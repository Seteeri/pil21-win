	.text
	.def	 @feat.00;
	.scl	3;
	.type	0;
	.endef
	.globl	@feat.00
.set @feat.00, 0
	.file	"llvm-link"
	.def	 __meth;
	.scl	2;
	.type	32;
	.endef
	.globl	__meth                          # -- Begin function __meth
	.p2align	4, 0x90
__meth:                                 # @__meth
.seh_proc __meth
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rdx, %r15
	movq	%rcx, %r14
	movq	8(%rcx), %rdi
	movq	(%rdi), %rbx
	testb	$6, %bl
	jne	.LBB0_4
# %bb.1:                                # %"$3"
	testb	$8, %bl
	jne	.LBB0_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rbx
	jmp	.LBB0_4
.LBB0_2:                                # %"$6"
	movq	(%rbx), %rbx
.LBB0_4:                                # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rbx, (%rsi)
	movq	%rsi, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rsi, env(%rip)
	movl	%ebx, %eax
	andl	$14, %eax
	cmpl	$8, %eax
	jne	.LBB0_12
# %bb.5:                                # %"$8"
	movq	-8(%rbx), %rax
	testb	$8, %al
	je	.LBB0_10
# %bb.6:                                # %"$8"
	movl	%eax, %ecx
	andl	$6, %ecx
	testq	%rcx, %rcx
	je	.LBB0_10
# %bb.7:                                # %"$3.i"
	addq	%rax, %rax
	jb	.LBB0_10
# %bb.8:                                # %"$2.i"
	addq	%rax, %rax
	jb	.LBB0_10
# %bb.9:                                # %"$5.i"
	movl	$1, %r8d
	shldq	$62, %rax, %r8
	movq	%r8, -8(%rbx)
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rbx, %rdx
	callq	db
	addq	$32, %rsp
.LBB0_10:                               # %"$10"
	movq	$0, ($Ret)(%rip)
	subq	$32, %rsp
	movq	%rbx, %rcx
	movq	%r15, %rdx
	callq	method
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB0_11
# %bb.13:                               # %"$11"
	movq	($Ret)(%rip), %rdx
	movq	8(%rdi), %rcx
	subq	$48, %rsp
	movq	%rcx, 32(%rsp)
	movq	%rbx, %rcx
	movq	%r15, %r8
	movq	%rax, %r9
	callq	evMethod
	addq	$48, %rsp
	movq	8(%rsi), %rcx
	movq	%rcx, env(%rip)
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB0_12:                               # %"$7"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rbx, %rdx
	callq	symErr
.LBB0_11:                               # %"$12"
	subq	$32, %rsp
	leaq	.L$70(%rip), %r8
	movq	%r14, %rcx
	movq	%r15, %rdx
	xorl	%r9d, %r9d
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _quote;
	.scl	2;
	.type	32;
	.endef
	.globl	_quote                          # -- Begin function _quote
	.p2align	4, 0x90
_quote:                                 # @_quote
# %bb.0:                                # %"$1"
	movq	8(%rcx), %rax
	retq
                                        # -- End function
	.def	 _gc;
	.scl	2;
	.type	32;
	.endef
	.globl	_gc                             # -- Begin function _gc
	.p2align	4, 0x90
_gc:                                    # @_gc
.seh_proc _gc
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rdi
	movq	8(%rcx), %rbx
	movq	(%rbx), %rsi
	testb	$6, %sil
	jne	.LBB2_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB2_2
# %bb.3:                                # %"$5"
	movq	%rsi, %rcx
	callq	evList
	movq	%rax, %rsi
	jmp	.LBB2_4
.LBB2_2:                                # %"$6"
	movq	(%rsi), %rsi
.LBB2_4:                                # %"$2"
	leaq	SymTab+8(%rip), %rax
	movq	%rax, SymTab+440(%rip)
	movq	%rax, SymTab+456(%rip)
	cmpq	%rax, %rsi
	jne	.LBB2_6
# %bb.5:                                # %"$7"
	callq	gc
	jmp	.LBB2_15
.LBB2_6:                                # %"$8"
	testb	$2, %sil
	je	.LBB2_16
# %bb.7:                                # %xCnt.exit
	movq	%rsi, %rax
	shrq	$4, %rax
	movq	%rax, %rcx
	negq	%rcx
	testb	$8, %sil
	cmoveq	%rax, %rcx
	shlq	$16, %rcx
	movq	%rcx, ($GcCount)(%rip)
	callq	gc
	movq	8(%rbx), %rax
	movl	$65536, %ecx                    # imm = 0x10000
	testb	$15, %al
	jne	.LBB2_14
# %bb.8:                                # %"$11"
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB2_12
# %bb.9:                                # %"$3.i"
	testb	$8, %al
	jne	.LBB2_10
# %bb.11:                               # %"$5.i"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB2_12
.LBB2_10:                               # %"$6.i"
	movq	(%rax), %rax
.LBB2_12:                               # %"$2.i5"
	testb	$2, %al
	je	.LBB2_17
# %bb.13:                               # %evCnt.exit
	movq	%rax, %rdx
	shrq	$4, %rdx
	movq	%rdx, %rcx
	negq	%rcx
	testb	$8, %al
	cmoveq	%rdx, %rcx
	shlq	$16, %rcx
.LBB2_14:                               # %"$12"
	movq	%rcx, ($GcCount)(%rip)
.LBB2_15:                               # %"$9"
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
.LBB2_16:                               # %"$2.i"
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	cntErr
.LBB2_17:                               # %"$2.i.i"
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	cntErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _format;
	.scl	2;
	.type	32;
	.endef
	.globl	_format                         # -- Begin function _format
	.p2align	4, 0x90
_format:                                # @_format
.seh_proc _format
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %r13
	movq	8(%rax), %rdi
	testb	$6, %r13b
	jne	.LBB3_4
# %bb.1:                                # %"$3"
	testb	$8, %r13b
	jne	.LBB3_3
# %bb.2:                                # %"$5"
	subq	$32, %rsp
	movq	%r13, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r13
	jmp	.LBB3_4
.LBB3_3:                                # %"$6"
	movq	(%r13), %r13
.LBB3_4:                                # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%r13, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r15, env(%rip)
	movq	(%rdi), %rax
	movq	8(%rdi), %rdi
	testb	$6, %al
	jne	.LBB3_8
# %bb.5:                                # %"$8"
	testb	$8, %al
	jne	.LBB3_7
# %bb.6:                                # %"$10"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB3_8
.LBB3_7:                                # %"$11"
	movq	(%rax), %rax
.LBB3_8:                                # %"$7"
	leaq	SymTab+8(%rip), %r12
	cmpq	%r12, %rax
	jne	.LBB3_11
# %bb.9:
	xorl	%r14d, %r14d
	testb	$15, %dil
	je	.LBB3_13
.LBB3_10:
	movb	$46, %dil
	jmp	.LBB3_40
.LBB3_11:                               # %"$13"
	testb	$2, %al
	je	.LBB3_51
# %bb.12:                               # %xCnt.exit
	movq	%rax, %rcx
	shrq	$4, %rcx
	movq	%rcx, %r14
	negq	%r14
	testb	$8, %al
	cmoveq	%rcx, %r14
	testb	$15, %dil
	jne	.LBB3_10
.LBB3_13:                               # %"$15"
	movq	(%rdi), %rax
	movq	8(%rdi), %rbx
	testb	$6, %al
	jne	.LBB3_17
# %bb.14:                               # %"$18"
	testb	$8, %al
	jne	.LBB3_16
# %bb.15:                               # %"$20"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB3_17
.LBB3_16:                               # %"$21"
	movq	(%rax), %rax
.LBB3_17:                               # %"$17"
	movl	%eax, %ecx
	andl	$14, %ecx
	cmpl	$8, %ecx
	jne	.LBB3_52
# %bb.18:                               # %"$23"
	leaq	SymTab+8(%rip), %rdx
	cmpq	%rdx, %rax
	je	.LBB3_25
# %bb.20:                               # %"$3.i"
	movq	-8(%rax), %rdi
	testb	$8, %dil
	jne	.LBB3_25
	.p2align	4, 0x90
# %bb.21:                               # %"$8.i"
	testb	$6, %dil
	jne	.LBB3_23
.LBB3_22:                               # %"$8.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rdi), %rdi
	testb	$6, %dil
	je	.LBB3_22
.LBB3_23:                               # %"$9.i"
	testb	$2, %dil
	jne	.LBB3_27
# %bb.24:                               # %"$10.i"
	movb	-4(%rdi), %dil
	testb	$15, %bl
	jne	.LBB3_40
	jmp	.LBB3_28
.LBB3_25:
	xorl	%edi, %edi
	testb	$15, %bl
	jne	.LBB3_40
.LBB3_28:                               # %"$24"
	movq	(%rbx), %rax
	testb	$6, %al
	jne	.LBB3_32
# %bb.29:                               # %"$27"
	testb	$8, %al
	jne	.LBB3_31
# %bb.30:                               # %"$29"
	subq	$32, %rsp
	movq	%rax, %rcx
	movq	%rdx, %rbx
	callq	evList
	movq	%rbx, %rdx
	addq	$32, %rsp
	jmp	.LBB3_32
.LBB3_27:                               # %"$11.i"
	shrq	$4, %rdi
	testb	$15, %bl
	jne	.LBB3_40
	jmp	.LBB3_28
.LBB3_31:                               # %"$30"
	movq	(%rax), %rax
.LBB3_32:                               # %"$26"
	movl	%eax, %ecx
	andl	$14, %ecx
	cmpl	$8, %ecx
	jne	.LBB3_52
# %bb.33:                               # %"$32"
	cmpq	%rdx, %rax
	je	.LBB3_40
# %bb.35:                               # %"$3.i22"
	movq	-8(%rax), %rbx
	testb	$8, %bl
	jne	.LBB3_40
	.p2align	4, 0x90
# %bb.36:                               # %"$8.i26"
	testb	$6, %bl
	jne	.LBB3_38
.LBB3_37:                               # %"$8.i26"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rbx), %rbx
	testb	$6, %bl
	je	.LBB3_37
.LBB3_38:                               # %"$9.i29"
	testb	$2, %bl
	jne	.LBB3_43
# %bb.39:                               # %"$10.i33"
	movb	-4(%rbx), %bl
	testb	$6, %r13b
	jne	.LBB3_41
	jmp	.LBB3_44
.LBB3_40:
	xorl	%ebx, %ebx
	testb	$6, %r13b
	je	.LBB3_44
.LBB3_41:                               # %"$35"
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	$4, (%rsi)
	leaq	16(%rsi), %rax
	movq	$2, 16(%rsi)
	movq	env(%rip), %rcx
	movq	%rcx, 24(%rsi)
	movq	%rax, env(%rip)
	subq	$48, %rsp
	movq	%rsi, 32(%rsp)
	movq	%r13, %rcx
	movq	%r14, %rdx
	movl	%edi, %r8d
	movl	%ebx, %r9d
	callq	fmtNum
	addq	$48, %rsp
	movq	16(%rsi), %rcx
	cmpq	$2, %rcx
	je	.LBB3_50
# %bb.42:                               # %"$3.i37"
	subq	$32, %rsp
	xorl	%edx, %edx
	callq	consSym
	addq	$32, %rsp
	movq	%rax, %r12
	jmp	.LBB3_50
.LBB3_43:                               # %"$11.i31"
	shrq	$4, %rbx
	testb	$6, %r13b
	jne	.LBB3_41
.LBB3_44:                               # %"$34"
	testb	$8, %r13b
	jne	.LBB3_47
# %bb.45:                               # %"$36"
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	$4, (%rsi)
	leaq	16(%rsi), %rax
	movq	$2, 16(%rsi)
	movq	env(%rip), %rcx
	movq	%rcx, 24(%rsi)
	movq	%rax, env(%rip)
	subq	$32, %rsp
	movq	%r13, %rcx
	movq	%rsi, %rdx
	callq	pack
	addq	$32, %rsp
	movq	16(%rsi), %rcx
	jmp	.LBB3_46
.LBB3_47:                               # %"$37"
	movq	-8(%r13), %rcx
	testb	$8, %cl
	jne	.LBB3_50
	.p2align	4, 0x90
# %bb.48:                               # %"$41.preheader"
	testb	$6, %cl
	jne	.LBB3_46
.LBB3_49:                               # %"$42"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rcx
	testb	$6, %cl
	je	.LBB3_49
.LBB3_46:                               # %"$33"
	subq	$32, %rsp
	movq	%r14, %rdx
	movl	%edi, %r8d
	movl	%ebx, %r9d
	callq	symToNum
	addq	$32, %rsp
	testq	%rax, %rax
	leaq	SymTab+8(%rip), %r12
	cmovneq	%rax, %r12
.LBB3_50:                               # %"$33"
	movq	8(%r15), %rax
	movq	%rax, env(%rip)
	movq	%r12, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB3_51:                               # %"$2.i"
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	cntErr
.LBB3_52:                               # %"$22"
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	symErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _add;
	.scl	2;
	.type	32;
	.endef
	.globl	_add                            # -- Begin function _add
	.p2align	4, 0x90
_add:                                   # @_add
.seh_proc _add
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %r14
	movq	8(%rcx), %rsi
	movq	(%rsi), %rdx
	testb	$6, %dl
	jne	.LBB4_4
# %bb.1:                                # %"$3"
	testb	$8, %dl
	jne	.LBB4_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rdx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdx
	jmp	.LBB4_4
.LBB4_2:                                # %"$6"
	movq	(%rdx), %rdx
.LBB4_4:                                # %"$2"
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rdx
	je	.LBB4_26
# %bb.5:                                # %"$8"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	$10, (%rdi)
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rdi, env(%rip)
	testb	$6, %dl
	je	.LBB4_27
# %bb.6:                                # %"$11"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rdx, (%rbx)
	movq	%rdi, 8(%rbx)
	movq	%rbx, env(%rip)
	movq	8(%rsi), %rsi
	testb	$15, %sil
	jne	.LBB4_25
# %bb.7:                                # %"$13.preheader"
	leaq	SymTab+8(%rip), %r15
	jmp	.LBB4_8
	.p2align	4, 0x90
.LBB4_22:                               # %"$9.i"
                                        #   in Loop: Header=BB4_8 Depth=1
	andq	$-9, %rdx
	subq	$32, %rsp
	callq	addu
.LBB4_23:                               # %"$10.i"
                                        #   in Loop: Header=BB4_8 Depth=1
	addq	$32, %rsp
	movq	%rax, %rdx
	xorq	$8, %rdx
	cmpq	$2, %rax
	cmoveq	%rax, %rdx
.LBB4_24:                               # %adds.exit
                                        #   in Loop: Header=BB4_8 Depth=1
	movq	%rdx, (%rbx)
	movq	8(%rsi), %rsi
	testb	$15, %sil
	jne	.LBB4_25
.LBB4_8:                                # %"$13"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rdx
	testb	$6, %dl
	jne	.LBB4_12
# %bb.9:                                # %"$17"
                                        #   in Loop: Header=BB4_8 Depth=1
	testb	$8, %dl
	jne	.LBB4_10
# %bb.11:                               # %"$19"
                                        #   in Loop: Header=BB4_8 Depth=1
	subq	$32, %rsp
	movq	%rdx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdx
	jmp	.LBB4_12
.LBB4_10:                               # %"$20"
                                        #   in Loop: Header=BB4_8 Depth=1
	movq	(%rdx), %rdx
	.p2align	4, 0x90
.LBB4_12:                               # %"$16"
                                        #   in Loop: Header=BB4_8 Depth=1
	cmpq	%r15, %rdx
	je	.LBB4_13
# %bb.14:                               # %"$21"
                                        #   in Loop: Header=BB4_8 Depth=1
	testb	$6, %dl
	je	.LBB4_27
# %bb.15:                               # %"$24"
                                        #   in Loop: Header=BB4_8 Depth=1
	movq	%rdx, (%rdi)
	movq	(%rbx), %rcx
	testb	$8, %cl
	jne	.LBB4_20
# %bb.16:                               # %"$2.i"
                                        #   in Loop: Header=BB4_8 Depth=1
	testb	$8, %dl
	jne	.LBB4_19
# %bb.17:                               # %"$5.i"
                                        #   in Loop: Header=BB4_8 Depth=1
	subq	$32, %rsp
	callq	addu
	jmp	.LBB4_18
	.p2align	4, 0x90
.LBB4_20:                               # %"$3.i"
                                        #   in Loop: Header=BB4_8 Depth=1
	andq	$-9, %rcx
	testb	$8, %dl
	jne	.LBB4_22
# %bb.21:                               # %"$8.i"
                                        #   in Loop: Header=BB4_8 Depth=1
	subq	$32, %rsp
	callq	subu
	jmp	.LBB4_23
	.p2align	4, 0x90
.LBB4_19:                               # %"$6.i"
                                        #   in Loop: Header=BB4_8 Depth=1
	andq	$-9, %rdx
	subq	$32, %rsp
	callq	subu
.LBB4_18:                               # %adds.exit
                                        #   in Loop: Header=BB4_8 Depth=1
	addq	$32, %rsp
	movq	%rax, %rdx
	jmp	.LBB4_24
.LBB4_13:
	movq	%r15, %rdx
.LBB4_25:                               # %"$14"
	movq	8(%rdi), %rax
	movq	%rax, env(%rip)
	movq	%rdx, %rax
.LBB4_26:                               # %"$9"
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB4_27:                               # %"$10"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	numErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _sub;
	.scl	2;
	.type	32;
	.endef
	.globl	_sub                            # -- Begin function _sub
	.p2align	4, 0x90
_sub:                                   # @_sub
.seh_proc _sub
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %r14
	movq	8(%rcx), %rax
	movq	(%rax), %rdx
	movq	8(%rax), %rdi
	testb	$6, %dl
	jne	.LBB5_4
# %bb.1:                                # %"$3"
	testb	$8, %dl
	jne	.LBB5_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rdx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdx
	jmp	.LBB5_4
.LBB5_2:                                # %"$6"
	movq	(%rdx), %rdx
.LBB5_4:                                # %"$2"
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rdx
	je	.LBB5_26
# %bb.5:                                # %"$8"
	testb	$6, %dl
	je	.LBB5_27
# %bb.6:                                # %"$11"
	testb	$15, %dil
	je	.LBB5_8
# %bb.7:                                # %"$12"
	movq	%rdx, %rax
	xorq	$8, %rax
	cmpq	$2, %rdx
	cmoveq	%rdx, %rax
	jmp	.LBB5_26
.LBB5_8:                                # %"$13"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	$10, (%rbx)
	movq	%rbx, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rdx, (%rsi)
	movq	%rbx, 8(%rsi)
	movq	%rsi, env(%rip)
	leaq	SymTab+8(%rip), %r15
	jmp	.LBB5_9
	.p2align	4, 0x90
.LBB5_22:                               # %"$9.i"
                                        #   in Loop: Header=BB5_9 Depth=1
	andq	$-9, %rdx
	subq	$32, %rsp
	callq	subu
.LBB5_23:                               # %"$10.i"
                                        #   in Loop: Header=BB5_9 Depth=1
	addq	$32, %rsp
	movq	%rax, %rcx
	xorq	$8, %rax
	cmpq	$2, %rcx
	cmoveq	%rcx, %rax
.LBB5_24:                               # %subs.exit
                                        #   in Loop: Header=BB5_9 Depth=1
	movq	%rax, (%rsi)
	testb	$15, %dil
	jne	.LBB5_25
.LBB5_9:                                # %"$18"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rdx
	movq	8(%rdi), %rdi
	testb	$6, %dl
	jne	.LBB5_13
# %bb.10:                               # %"$20"
                                        #   in Loop: Header=BB5_9 Depth=1
	testb	$8, %dl
	jne	.LBB5_11
# %bb.12:                               # %"$22"
                                        #   in Loop: Header=BB5_9 Depth=1
	subq	$32, %rsp
	movq	%rdx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdx
	jmp	.LBB5_13
.LBB5_11:                               # %"$23"
                                        #   in Loop: Header=BB5_9 Depth=1
	movq	(%rdx), %rdx
	.p2align	4, 0x90
.LBB5_13:                               # %"$19"
                                        #   in Loop: Header=BB5_9 Depth=1
	cmpq	%r15, %rdx
	je	.LBB5_14
# %bb.15:                               # %"$24"
                                        #   in Loop: Header=BB5_9 Depth=1
	testb	$6, %dl
	je	.LBB5_27
# %bb.16:                               # %"$28"
                                        #   in Loop: Header=BB5_9 Depth=1
	movq	%rdx, (%rbx)
	movq	(%rsi), %rcx
	testb	$8, %cl
	jne	.LBB5_20
# %bb.17:                               # %"$2.i"
                                        #   in Loop: Header=BB5_9 Depth=1
	testb	$8, %dl
	jne	.LBB5_19
# %bb.18:                               # %"$5.i"
                                        #   in Loop: Header=BB5_9 Depth=1
	subq	$32, %rsp
	callq	subu
	addq	$32, %rsp
	jmp	.LBB5_24
	.p2align	4, 0x90
.LBB5_20:                               # %"$3.i"
                                        #   in Loop: Header=BB5_9 Depth=1
	andq	$-9, %rcx
	testb	$8, %dl
	jne	.LBB5_22
# %bb.21:                               # %"$8.i"
                                        #   in Loop: Header=BB5_9 Depth=1
	subq	$32, %rsp
	callq	addu
	jmp	.LBB5_23
	.p2align	4, 0x90
.LBB5_19:                               # %"$6.i"
                                        #   in Loop: Header=BB5_9 Depth=1
	andq	$-9, %rdx
	subq	$32, %rsp
	callq	addu
	addq	$32, %rsp
	jmp	.LBB5_24
.LBB5_14:
	movq	%r15, %rax
.LBB5_25:                               # %"$25"
	movq	8(%rbx), %rcx
	movq	%rcx, env(%rip)
.LBB5_26:                               # %"$9"
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB5_27:                               # %"$10"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	numErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _inc;
	.scl	2;
	.type	32;
	.endef
	.globl	_inc                            # -- Begin function _inc
	.p2align	4, 0x90
_inc:                                   # @_inc
.seh_proc _inc
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %r15
	movq	8(%rcx), %rdi
	movq	(%rdi), %rsi
	testb	$6, %sil
	jne	.LBB6_4
# %bb.1:                                # %"$4"
	testb	$8, %sil
	jne	.LBB6_2
# %bb.3:                                # %"$6"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB6_4
.LBB6_2:                                # %"$7"
	movq	(%rsi), %rsi
.LBB6_4:                                # %"$3"
	leaq	SymTab+8(%rip), %rbx
	cmpq	%rbx, %rsi
	je	.LBB6_54
# %bb.5:                                # %"$8"
	testb	$6, %sil
	je	.LBB6_13
# %bb.6:                                # %"$11"
	testb	$8, %sil
	jne	.LBB6_7
# %bb.12:                               # %"$3.i"
	movl	$18, %edx
	movq	%rsi, %rcx
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	addu                            # TAILCALL
.LBB6_13:                               # %"$10"
	leaq	SymTab+8(%rip), %rbx
	cmpq	%rbx, %rsi
	jb	.LBB6_15
# %bb.14:                               # %"$10"
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, %rsi
	jbe	.LBB6_55
.LBB6_15:                               # %"$15"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%rsi, (%r14)
	movq	%r14, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r14, env(%rip)
	testb	$8, %sil
	je	.LBB6_25
# %bb.16:                               # %"$17"
	movq	-8(%rsi), %rax
	testb	$8, %al
	je	.LBB6_25
# %bb.17:                               # %"$18"
	testb	$6, %al
	je	.LBB6_19
# %bb.18:
	leaq	-8(%rsi), %rcx
	addq	%rax, %rax
	jae	.LBB6_23
	jmp	.LBB6_25
.LBB6_7:                                # %"$2.i"
	movq	%rsi, %rax
	andq	$-9, %rax
	testb	$2, %sil
	jne	.LBB6_8
# %bb.10:                               # %"$3.i.i"
	subq	$32, %rsp
	movl	$18, %edx
	movq	%rax, %rcx
	callq	sub1
	addq	$32, %rsp
	jmp	.LBB6_11
.LBB6_8:                                # %"$4.i.i"
	subq	$16, %rax
	jae	.LBB6_11
# %bb.9:                                # %"$8.i.i"
	xorq	$-16, %rax
	addq	$24, %rax
.LBB6_11:                               # %subu.exit.i
	movq	%rax, %rbx
	xorq	$8, %rbx
	cmpq	$2, %rax
	cmoveq	%rax, %rbx
	jmp	.LBB6_54
.LBB6_19:                               # %"$2.i19"
	andq	$-9, %rax
	.p2align	4, 0x90
.LBB6_20:                               # %"$4.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rcx
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB6_20
# %bb.21:
	addq	$8, %rcx
	addq	%rax, %rax
	jb	.LBB6_25
.LBB6_23:                               # %"$7.i"
	leaq	(%rax,%rax), %rdx
	movl	$2, %r8d
	shldq	$62, %rdx, %r8
	addq	%rax, %rax
	movq	%r8, (%rcx)
	jb	.LBB6_25
# %bb.24:                               # %"$9.i"
	subq	$32, %rsp
	movq	%r15, %rcx
	movq	%rsi, %rdx
	callq	db
	addq	$32, %rsp
.LBB6_25:                               # %"$19"
	movq	8(%rdi), %rax
	testb	$15, %al
	je	.LBB6_34
# %bb.26:                               # %"$20"
	movq	(%rsi), %r8
	cmpq	%rbx, %r8
	je	.LBB6_53
# %bb.27:                               # %"$24"
	testb	$6, %r8b
	je	.LBB6_56
# %bb.28:                               # %"$27"
	testb	$8, %r8b
	jne	.LBB6_29
# %bb.33:                               # %"$3.i28"
	subq	$32, %rsp
	movl	$18, %edx
	movq	%r8, %rcx
	callq	addu
	addq	$32, %rsp
	movq	%rax, %rbx
	movq	%rax, (%rsi)
	jmp	.LBB6_53
.LBB6_34:                               # %"$21"
	movq	(%rax), %rdx
	testb	$6, %dl
	jne	.LBB6_38
# %bb.35:                               # %"$29"
	testb	$8, %dl
	jne	.LBB6_36
# %bb.37:                               # %"$31"
	subq	$32, %rsp
	movq	%rdx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdx
	jmp	.LBB6_38
.LBB6_29:                               # %"$2.i23"
	movq	%r8, %rax
	andq	$-9, %rax
	testb	$2, %r8b
	jne	.LBB6_30
# %bb.32:                               # %"$3.i.i26"
	subq	$32, %rsp
	movl	$18, %edx
	movq	%rax, %rcx
	callq	sub1
	jmp	.LBB6_50
.LBB6_30:                               # %"$4.i.i24"
	subq	$16, %rax
	jae	.LBB6_51
# %bb.31:                               # %"$8.i.i25"
	xorq	$-16, %rax
	addq	$24, %rax
	jmp	.LBB6_51
.LBB6_36:                               # %"$32"
	movq	(%rdx), %rdx
.LBB6_38:                               # %"$28"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rdx, (%rbx)
	movq	%rbx, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rbx, env(%rip)
	leaq	SymTab+8(%rip), %rbx
	cmpq	%rbx, %rdx
	je	.LBB6_53
# %bb.39:                               # %"$28"
	movq	(%rsi), %rax
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB6_53
# %bb.40:                               # %"$36"
	testb	$6, %al
	je	.LBB6_57
# %bb.41:                               # %"$39"
	testb	$6, %dl
	je	.LBB6_58
# %bb.42:                               # %"$41"
	testb	$8, %al
	jne	.LBB6_47
# %bb.43:                               # %"$2.i33"
	testb	$8, %dl
	jne	.LBB6_46
# %bb.44:                               # %"$5.i"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	addu
	jmp	.LBB6_45
.LBB6_47:                               # %"$3.i34"
	andq	$-9, %rax
	testb	$8, %dl
	jne	.LBB6_49
# %bb.48:                               # %"$8.i"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	subu
	jmp	.LBB6_50
.LBB6_46:                               # %"$6.i"
	andq	$-9, %rdx
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	subu
.LBB6_45:                               # %adds.exit
	addq	$32, %rsp
	movq	%rax, %rbx
	jmp	.LBB6_52
.LBB6_49:                               # %"$9.i35"
	andq	$-9, %rdx
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	addu
.LBB6_50:                               # %"$10.i"
	addq	$32, %rsp
.LBB6_51:                               # %adds.exit
	movq	%rax, %rbx
	xorq	$8, %rbx
	cmpq	$2, %rax
	cmoveq	%rax, %rbx
.LBB6_52:                               # %adds.exit
	movq	%rbx, (%rsi)
.LBB6_53:                               # %"$22"
	movq	8(%r14), %rax
	movq	%rax, env(%rip)
.LBB6_54:                               # %"$2"
	movq	%rbx, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB6_55:                               # %"$14"
	subq	$32, %rsp
	movq	%r15, %rcx
	movq	%rsi, %rdx
	callq	protErr
.LBB6_56:                               # %"$26"
	subq	$32, %rsp
	movq	%r15, %rcx
	movq	%r8, %rdx
	callq	numErr
.LBB6_57:                               # %"$38"
	subq	$32, %rsp
	movq	%r15, %rcx
	movq	%rax, %rdx
	callq	numErr
.LBB6_58:                               # %"$40"
	subq	$32, %rsp
	movq	%r15, %rcx
	callq	numErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _dec;
	.scl	2;
	.type	32;
	.endef
	.globl	_dec                            # -- Begin function _dec
	.p2align	4, 0x90
_dec:                                   # @_dec
.seh_proc _dec
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %r14
	movq	8(%rcx), %rdi
	movq	(%rdi), %rsi
	testb	$6, %sil
	jne	.LBB7_4
# %bb.1:                                # %"$4"
	testb	$8, %sil
	jne	.LBB7_3
# %bb.2:                                # %"$6"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB7_4
.LBB7_3:                                # %"$7"
	movq	(%rsi), %rsi
.LBB7_4:                                # %"$3"
	leaq	SymTab+8(%rip), %rbx
	cmpq	%rbx, %rsi
	je	.LBB7_53
# %bb.5:                                # %"$8"
	testb	$6, %sil
	je	.LBB7_9
# %bb.6:                                # %"$11"
	testb	$8, %sil
	jne	.LBB7_15
# %bb.7:                                # %"$3.i"
	testb	$2, %sil
	jne	.LBB7_16
# %bb.8:                                # %"$3.i.i"
	movl	$18, %edx
	movq	%rsi, %rcx
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	sub1                            # TAILCALL
.LBB7_9:                                # %"$10"
	leaq	SymTab+8(%rip), %rbx
	cmpq	%rbx, %rsi
	jb	.LBB7_11
# %bb.10:                               # %"$10"
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, %rsi
	jbe	.LBB7_54
.LBB7_11:                               # %"$15"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%rsi, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r15, env(%rip)
	testb	$8, %sil
	je	.LBB7_24
# %bb.12:                               # %"$17"
	movq	-8(%rsi), %rax
	testb	$8, %al
	je	.LBB7_24
# %bb.13:                               # %"$18"
	testb	$6, %al
	je	.LBB7_19
# %bb.14:
	leaq	-8(%rsi), %rcx
	addq	%rax, %rax
	jae	.LBB7_22
	jmp	.LBB7_24
.LBB7_15:                               # %"$2.i"
	andq	$-9, %rsi
	subq	$32, %rsp
	movl	$18, %edx
	movq	%rsi, %rcx
	callq	addu
	addq	$32, %rsp
	movq	%rax, %rbx
	xorq	$8, %rbx
	cmpq	$2, %rax
	cmoveq	%rax, %rbx
	jmp	.LBB7_53
.LBB7_16:                               # %"$4.i.i"
	subq	$16, %rsi
	jae	.LBB7_18
# %bb.17:                               # %"$8.i.i"
	xorq	$-16, %rsi
	addq	$24, %rsi
.LBB7_18:
	movq	%rsi, %rbx
	jmp	.LBB7_53
.LBB7_19:                               # %"$2.i19"
	andq	$-9, %rax
	.p2align	4, 0x90
.LBB7_20:                               # %"$4.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rcx
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB7_20
# %bb.21:
	addq	$8, %rcx
	addq	%rax, %rax
	jb	.LBB7_24
.LBB7_22:                               # %"$7.i"
	leaq	(%rax,%rax), %rdx
	movl	$2, %r8d
	shldq	$62, %rdx, %r8
	addq	%rax, %rax
	movq	%r8, (%rcx)
	jb	.LBB7_24
# %bb.23:                               # %"$9.i"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rsi, %rdx
	callq	db
	addq	$32, %rsp
.LBB7_24:                               # %"$19"
	movq	8(%rdi), %rax
	testb	$15, %al
	je	.LBB7_30
# %bb.25:                               # %"$20"
	movq	(%rsi), %rdi
	cmpq	%rbx, %rdi
	je	.LBB7_52
# %bb.26:                               # %"$24"
	testb	$6, %dil
	je	.LBB7_55
# %bb.27:                               # %"$27"
	testb	$8, %dil
	jne	.LBB7_33
# %bb.28:                               # %"$3.i24"
	testb	$2, %dil
	jne	.LBB7_35
# %bb.29:                               # %"$3.i.i27"
	subq	$32, %rsp
	movl	$18, %edx
	movq	%rdi, %rcx
	callq	sub1
	addq	$32, %rsp
	movq	%rax, %rdi
	jmp	.LBB7_34
.LBB7_30:                               # %"$21"
	movq	(%rax), %rdx
	testb	$6, %dl
	jne	.LBB7_38
# %bb.31:                               # %"$29"
	testb	$8, %dl
	jne	.LBB7_37
# %bb.32:                               # %"$31"
	subq	$32, %rsp
	movq	%rdx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdx
	jmp	.LBB7_38
.LBB7_33:                               # %"$2.i22"
	andq	$-9, %rdi
	subq	$32, %rsp
	movl	$18, %edx
	movq	%rdi, %rcx
	callq	addu
	addq	$32, %rsp
	movq	%rax, %rdi
	xorq	$8, %rdi
	cmpq	$2, %rax
	cmoveq	%rax, %rdi
.LBB7_34:                               # %decs.exit29
	movq	%rdi, (%rsi)
	movq	%rdi, %rbx
	jmp	.LBB7_52
.LBB7_35:                               # %"$4.i.i25"
	subq	$16, %rdi
	jae	.LBB7_34
# %bb.36:                               # %"$8.i.i26"
	xorq	$-16, %rdi
	addq	$24, %rdi
	jmp	.LBB7_34
.LBB7_37:                               # %"$32"
	movq	(%rdx), %rdx
.LBB7_38:                               # %"$28"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rdx, (%rbx)
	movq	%rbx, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rbx, env(%rip)
	leaq	SymTab+8(%rip), %rbx
	cmpq	%rbx, %rdx
	je	.LBB7_52
# %bb.39:                               # %"$28"
	movq	(%rsi), %rax
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB7_52
# %bb.40:                               # %"$36"
	testb	$6, %al
	je	.LBB7_56
# %bb.41:                               # %"$39"
	testb	$6, %dl
	je	.LBB7_57
# %bb.42:                               # %"$41"
	testb	$8, %al
	jne	.LBB7_45
# %bb.43:                               # %"$2.i32"
	testb	$8, %dl
	jne	.LBB7_47
# %bb.44:                               # %"$5.i"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	subu
	jmp	.LBB7_48
.LBB7_45:                               # %"$3.i33"
	andq	$-9, %rax
	testb	$8, %dl
	jne	.LBB7_49
# %bb.46:                               # %"$8.i"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	addu
	jmp	.LBB7_50
.LBB7_47:                               # %"$6.i"
	andq	$-9, %rdx
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	addu
.LBB7_48:                               # %subs.exit
	addq	$32, %rsp
	movq	%rax, %rbx
	jmp	.LBB7_51
.LBB7_49:                               # %"$9.i34"
	andq	$-9, %rdx
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	subu
.LBB7_50:                               # %"$10.i"
	addq	$32, %rsp
	movq	%rax, %rbx
	xorq	$8, %rbx
	cmpq	$2, %rax
	cmoveq	%rax, %rbx
.LBB7_51:                               # %subs.exit
	movq	%rbx, (%rsi)
.LBB7_52:                               # %"$22"
	movq	8(%r15), %rax
	movq	%rax, env(%rip)
.LBB7_53:                               # %"$2"
	movq	%rbx, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB7_54:                               # %"$14"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rsi, %rdx
	callq	protErr
.LBB7_55:                               # %"$26"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rdi, %rdx
	callq	numErr
.LBB7_56:                               # %"$38"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rax, %rdx
	callq	numErr
.LBB7_57:                               # %"$40"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	numErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _mul;
	.scl	2;
	.type	32;
	.endef
	.globl	_mul                            # -- Begin function _mul
	.p2align	4, 0x90
_mul:                                   # @_mul
.seh_proc _mul
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %r14
	movq	8(%rcx), %rdi
	movq	(%rdi), %rsi
	testb	$6, %sil
	jne	.LBB8_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB8_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB8_4
.LBB8_2:                                # %"$6"
	movq	(%rsi), %rsi
.LBB8_4:                                # %"$2"
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rsi
	je	.LBB8_14
# %bb.5:                                # %"$8"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	$10, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r15, env(%rip)
	testb	$6, %sil
	je	.LBB8_24
# %bb.6:                                # %"$11"
	movl	%esi, %r12d
	andl	$8, %r12d
	shrl	$3, %r12d
	andq	$-9, %rsi
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rsi, (%rbx)
	movq	%r15, 8(%rbx)
	movq	%rbx, env(%rip)
	movq	8(%rdi), %rdi
	testb	$15, %dil
	je	.LBB8_7
# %bb.11:                               # %"$15"
	testb	$1, %r12b
	je	.LBB8_13
.LBB8_12:                               # %"$16"
	movq	%rsi, %rax
	xorq	$8, %rax
	cmpq	$2, %rsi
	cmovneq	%rax, %rsi
	jmp	.LBB8_13
.LBB8_7:
	leaq	SymTab+8(%rip), %rsi
	jmp	.LBB8_8
	.p2align	4, 0x90
.LBB8_22:                               # %"$34"
                                        #   in Loop: Header=BB8_8 Depth=1
	movq	%rdx, (%r15)
	movq	(%rbx), %rcx
	subq	$32, %rsp
	callq	mulu
	addq	$32, %rsp
	movq	%rax, (%rbx)
	movq	8(%rdi), %rdi
	testb	$15, %dil
	jne	.LBB8_23
.LBB8_8:                                # %"$13"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rdx
	testb	$6, %dl
	jne	.LBB8_16
# %bb.9:                                # %"$23"
                                        #   in Loop: Header=BB8_8 Depth=1
	testb	$8, %dl
	jne	.LBB8_10
# %bb.15:                               # %"$25"
                                        #   in Loop: Header=BB8_8 Depth=1
	subq	$32, %rsp
	movq	%rdx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdx
	jmp	.LBB8_16
.LBB8_10:                               # %"$26"
                                        #   in Loop: Header=BB8_8 Depth=1
	movq	(%rdx), %rdx
	.p2align	4, 0x90
.LBB8_16:                               # %"$22"
                                        #   in Loop: Header=BB8_8 Depth=1
	cmpq	%rsi, %rdx
	je	.LBB8_13
# %bb.17:                               # %"$27"
                                        #   in Loop: Header=BB8_8 Depth=1
	cmpq	$2, %rdx
	je	.LBB8_18
# %bb.19:                               # %"$29"
                                        #   in Loop: Header=BB8_8 Depth=1
	testb	$6, %dl
	je	.LBB8_25
# %bb.20:                               # %"$32"
                                        #   in Loop: Header=BB8_8 Depth=1
	testb	$8, %dl
	je	.LBB8_22
# %bb.21:                               # %"$33"
                                        #   in Loop: Header=BB8_8 Depth=1
	xorb	$1, %r12b
	andq	$-9, %rdx
	jmp	.LBB8_22
.LBB8_18:
	movl	$2, %esi
	jmp	.LBB8_13
.LBB8_23:
	movq	%rax, %rsi
	testb	$1, %r12b
	jne	.LBB8_12
.LBB8_13:                               # %"$14"
	movq	8(%r15), %rax
	movq	%rax, env(%rip)
	movq	%rsi, %rax
.LBB8_14:                               # %"$9"
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB8_25:                               # %"$31"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	numErr
.LBB8_24:                               # %"$10"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rsi, %rdx
	callq	numErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _mulDiv;
	.scl	2;
	.type	32;
	.endef
	.globl	_mulDiv                         # -- Begin function _mulDiv
	.p2align	4, 0x90
_mulDiv:                                # @_mulDiv
.seh_proc _mulDiv
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %r14
	movq	8(%rcx), %rdi
	movq	(%rdi), %rdx
	testb	$6, %dl
	jne	.LBB9_4
# %bb.1:                                # %"$3"
	testb	$8, %dl
	jne	.LBB9_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rdx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdx
	jmp	.LBB9_4
.LBB9_2:                                # %"$6"
	movq	(%rdx), %rdx
.LBB9_4:                                # %"$2"
	leaq	SymTab+8(%rip), %r13
	cmpq	%r13, %rdx
	je	.LBB9_26
# %bb.5:                                # %"$8"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	$10, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r15, env(%rip)
	testb	$6, %dl
	je	.LBB9_27
# %bb.6:                                # %"$11"
	movl	%edx, %r12d
	andl	$8, %r12d
	shrl	$3, %r12d
	andq	$-9, %rdx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rdx, (%rsi)
	movq	%r15, 8(%rsi)
	movq	%rsi, env(%rip)
	movq	8(%rdi), %rdi
	leaq	SymTab+8(%rip), %r13
	.p2align	4, 0x90
.LBB9_7:                                # %"$12"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rbx
	testb	$6, %bl
	jne	.LBB9_11
# %bb.8:                                # %"$14"
                                        #   in Loop: Header=BB9_7 Depth=1
	testb	$8, %bl
	jne	.LBB9_9
# %bb.10:                               # %"$16"
                                        #   in Loop: Header=BB9_7 Depth=1
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rbx
	.p2align	4, 0x90
.LBB9_11:                               # %"$13"
                                        #   in Loop: Header=BB9_7 Depth=1
	cmpq	%r13, %rbx
	je	.LBB9_25
.LBB9_12:                               # %"$18"
                                        #   in Loop: Header=BB9_7 Depth=1
	testb	$6, %bl
	je	.LBB9_28
# %bb.13:                               # %"$22"
                                        #   in Loop: Header=BB9_7 Depth=1
	testb	$8, %bl
	je	.LBB9_15
# %bb.14:                               # %"$23"
                                        #   in Loop: Header=BB9_7 Depth=1
	xorb	$1, %r12b
	andq	$-9, %rbx
.LBB9_15:                               # %"$24"
                                        #   in Loop: Header=BB9_7 Depth=1
	movq	%rbx, (%r15)
	movq	8(%rdi), %rdi
	testb	$15, %dil
	jne	.LBB9_16
# %bb.23:                               # %"$25"
                                        #   in Loop: Header=BB9_7 Depth=1
	cmpq	$2, %rbx
	je	.LBB9_24
# %bb.30:                               # %"$35"
                                        #   in Loop: Header=BB9_7 Depth=1
	movq	(%rsi), %rcx
	subq	$32, %rsp
	movq	%rbx, %rdx
	callq	mulu
	addq	$32, %rsp
	movq	%rax, (%rsi)
	jmp	.LBB9_7
.LBB9_9:                                # %"$17"
                                        #   in Loop: Header=BB9_7 Depth=1
	movq	(%rbx), %rbx
	cmpq	%r13, %rbx
	jne	.LBB9_12
	jmp	.LBB9_25
.LBB9_16:                               # %"$26"
	subq	$32, %rsp
	cmpq	$2, %rbx
	je	.LBB9_29
# %bb.17:                               # %"$28"
	movq	%rbx, %rcx
	callq	shru
	addq	$32, %rsp
	movq	%rax, %rdx
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rdx, (%rdi)
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rdi, env(%rip)
	movq	(%rsi), %rcx
	subq	$32, %rsp
	callq	addu
	addq	$32, %rsp
	movq	%rax, (%rsi)
	testb	$4, %al
	jne	.LBB9_18
# %bb.19:                               # %"$3.i"
	movl	$2, %r13d
	testb	$4, %bl
	jne	.LBB9_21
# %bb.20:                               # %"$5.i"
	shrq	$4, %rax
	shrq	$4, %rbx
	xorl	%edx, %edx
	divq	%rbx
	movq	%rax, %r13
	shlq	$4, %r13
	orq	$2, %r13
	jmp	.LBB9_21
.LBB9_24:
	movl	$2, %r13d
	jmp	.LBB9_25
.LBB9_18:                               # %"$4.i"
	subq	$32, %rsp
	movq	%rax, %rcx
	movq	%rbx, %rdx
	xorl	%r8d, %r8d
	callq	div1
	addq	$32, %rsp
	movq	%rax, %r13
.LBB9_21:                               # %divu.exit
	testb	$1, %r12b
	je	.LBB9_25
# %bb.22:                               # %"$29"
	movq	%r13, %rax
	xorq	$8, %rax
	cmpq	$2, %r13
	cmovneq	%rax, %r13
.LBB9_25:                               # %"$19"
	movq	8(%r15), %rax
	movq	%rax, env(%rip)
.LBB9_26:                               # %"$9"
	movq	%r13, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB9_28:                               # %"$21"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rbx, %rdx
	callq	numErr
.LBB9_27:                               # %"$10"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	numErr
.LBB9_29:                               # %"$27"
	movq	%r14, %rcx
	callq	divErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _div;
	.scl	2;
	.type	32;
	.endef
	.globl	_div                            # -- Begin function _div
	.p2align	4, 0x90
_div:                                   # @_div
.seh_proc _div
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %r14
	movq	8(%rcx), %rsi
	movq	(%rsi), %rdx
	testb	$6, %dl
	jne	.LBB10_4
# %bb.1:                                # %"$3"
	testb	$8, %dl
	jne	.LBB10_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rdx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdx
	jmp	.LBB10_4
.LBB10_2:                               # %"$6"
	movq	(%rdx), %rdx
.LBB10_4:                               # %"$2"
	leaq	SymTab+8(%rip), %r13
	cmpq	%r13, %rdx
	je	.LBB10_26
# %bb.5:                                # %"$8"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	$10, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r15, env(%rip)
	testb	$6, %dl
	je	.LBB10_27
# %bb.6:                                # %"$11"
	movl	%edx, %r12d
	andl	$8, %r12d
	shrl	$3, %r12d
	andq	$-9, %rdx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rdx, (%rbx)
	movq	%r15, 8(%rbx)
	movq	%rbx, env(%rip)
	movq	8(%rsi), %rdi
	testb	$15, %dil
	je	.LBB10_7
.LBB10_11:                              # %"$15"
	testb	$1, %r12b
	je	.LBB10_12
# %bb.24:                               # %"$16"
	movq	%rdx, %r13
	xorq	$8, %r13
	cmpq	$2, %rdx
	cmoveq	%rdx, %r13
	jmp	.LBB10_25
.LBB10_12:
	movq	%rdx, %r13
.LBB10_25:                              # %"$14"
	movq	8(%r15), %rax
	movq	%rax, env(%rip)
.LBB10_26:                              # %"$9"
	movq	%r13, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB10_7:
	leaq	SymTab+8(%rip), %r13
	jmp	.LBB10_8
	.p2align	4, 0x90
.LBB10_20:                              # %"$4.i"
                                        #   in Loop: Header=BB10_8 Depth=1
	subq	$32, %rsp
	movq	%rsi, %rdx
	xorl	%r8d, %r8d
	callq	div1
	addq	$32, %rsp
	movq	%rax, %rdx
.LBB10_23:                              # %divu.exit
                                        #   in Loop: Header=BB10_8 Depth=1
	movq	%rdx, (%rbx)
	movq	8(%rdi), %rdi
	testb	$15, %dil
	jne	.LBB10_11
.LBB10_8:                               # %"$13"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rsi
	testb	$6, %sil
	jne	.LBB10_14
# %bb.9:                                # %"$23"
                                        #   in Loop: Header=BB10_8 Depth=1
	testb	$8, %sil
	jne	.LBB10_10
# %bb.13:                               # %"$25"
                                        #   in Loop: Header=BB10_8 Depth=1
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB10_14
.LBB10_10:                              # %"$26"
                                        #   in Loop: Header=BB10_8 Depth=1
	movq	(%rsi), %rsi
	.p2align	4, 0x90
.LBB10_14:                              # %"$22"
                                        #   in Loop: Header=BB10_8 Depth=1
	cmpq	%r13, %rsi
	je	.LBB10_25
# %bb.15:                               # %"$27"
                                        #   in Loop: Header=BB10_8 Depth=1
	cmpq	$2, %rsi
	je	.LBB10_28
# %bb.16:                               # %"$30"
                                        #   in Loop: Header=BB10_8 Depth=1
	testb	$6, %sil
	je	.LBB10_29
# %bb.17:                               # %"$32"
                                        #   in Loop: Header=BB10_8 Depth=1
	testb	$8, %sil
	je	.LBB10_19
# %bb.18:                               # %"$33"
                                        #   in Loop: Header=BB10_8 Depth=1
	xorb	$1, %r12b
	andq	$-9, %rsi
.LBB10_19:                              # %"$34"
                                        #   in Loop: Header=BB10_8 Depth=1
	movq	%rsi, (%r15)
	movq	(%rbx), %rcx
	testb	$4, %cl
	jne	.LBB10_20
# %bb.21:                               # %"$3.i"
                                        #   in Loop: Header=BB10_8 Depth=1
	movl	$2, %edx
	testb	$4, %sil
	jne	.LBB10_23
# %bb.22:                               # %"$5.i"
                                        #   in Loop: Header=BB10_8 Depth=1
	shrq	$4, %rcx
	shrq	$4, %rsi
	movq	%rcx, %rax
	xorl	%edx, %edx
	divq	%rsi
	movq	%rax, %rdx
	shlq	$4, %rdx
	orq	$2, %rdx
	jmp	.LBB10_23
.LBB10_28:                              # %"$29"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	divErr
.LBB10_29:                              # %"$31"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rsi, %rdx
	callq	numErr
.LBB10_27:                              # %"$10"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	numErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _rem;
	.scl	2;
	.type	32;
	.endef
	.globl	_rem                            # -- Begin function _rem
	.p2align	4, 0x90
_rem:                                   # @_rem
.seh_proc _rem
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %r14
	movq	8(%rcx), %rsi
	movq	(%rsi), %r15
	testb	$6, %r15b
	jne	.LBB11_4
# %bb.1:                                # %"$3"
	testb	$8, %r15b
	jne	.LBB11_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%r15, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r15
	jmp	.LBB11_4
.LBB11_2:                               # %"$6"
	movq	(%r15), %r15
.LBB11_4:                               # %"$2"
	leaq	SymTab+8(%rip), %r13
	cmpq	%r13, %r15
	je	.LBB11_24
# %bb.5:                                # %"$8"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r12
	movq	$10, (%r12)
	movq	%r12, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r12, env(%rip)
	testb	$6, %r15b
	je	.LBB11_25
# %bb.6:                                # %"$11"
	movq	%r15, %rcx
	andq	$-9, %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rcx, (%rdi)
	movq	%r12, 8(%rdi)
	movq	%rdi, env(%rip)
	movq	8(%rsi), %rbx
	testb	$15, %bl
	je	.LBB11_7
.LBB11_11:                              # %"$15"
	testb	$8, %r15b
	jne	.LBB11_22
# %bb.12:
	movq	%rcx, %r13
	jmp	.LBB11_23
.LBB11_22:                              # %"$16"
	movq	%rcx, %r13
	xorq	$8, %r13
	cmpq	$2, %rcx
	cmoveq	%rcx, %r13
.LBB11_23:                              # %"$14"
	movq	8(%r12), %rax
	movq	%rax, env(%rip)
.LBB11_24:                              # %"$9"
	movq	%r13, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB11_7:
	leaq	SymTab+8(%rip), %r13
	jmp	.LBB11_8
	.p2align	4, 0x90
.LBB11_18:                              # %"$4.i"
                                        #   in Loop: Header=BB11_8 Depth=1
	subq	$32, %rsp
	movb	$1, %r8b
	callq	div1
	addq	$32, %rsp
	movq	%rax, %rcx
.LBB11_21:                              # %remu.exit
                                        #   in Loop: Header=BB11_8 Depth=1
	movq	%rcx, (%rdi)
	movq	8(%rbx), %rbx
	testb	$15, %bl
	jne	.LBB11_11
.LBB11_8:                               # %"$13"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rbx), %rsi
	testb	$6, %sil
	jne	.LBB11_14
# %bb.9:                                # %"$23"
                                        #   in Loop: Header=BB11_8 Depth=1
	testb	$8, %sil
	jne	.LBB11_10
# %bb.13:                               # %"$25"
                                        #   in Loop: Header=BB11_8 Depth=1
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB11_14
.LBB11_10:                              # %"$26"
                                        #   in Loop: Header=BB11_8 Depth=1
	movq	(%rsi), %rsi
	.p2align	4, 0x90
.LBB11_14:                              # %"$22"
                                        #   in Loop: Header=BB11_8 Depth=1
	cmpq	%r13, %rsi
	je	.LBB11_23
# %bb.15:                               # %"$27"
                                        #   in Loop: Header=BB11_8 Depth=1
	cmpq	$2, %rsi
	je	.LBB11_26
# %bb.16:                               # %"$30"
                                        #   in Loop: Header=BB11_8 Depth=1
	testb	$6, %sil
	je	.LBB11_27
# %bb.17:                               # %"$32"
                                        #   in Loop: Header=BB11_8 Depth=1
	movq	(%rdi), %rcx
	movq	%rsi, %rdx
	andq	$-9, %rdx
	movq	%rdx, (%r12)
	testb	$4, %cl
	jne	.LBB11_18
# %bb.19:                               # %"$3.i"
                                        #   in Loop: Header=BB11_8 Depth=1
	testb	$4, %sil
	jne	.LBB11_21
# %bb.20:                               # %"$5.i"
                                        #   in Loop: Header=BB11_8 Depth=1
	shrq	$4, %rcx
	shrq	$4, %rsi
	movq	%rcx, %rax
	xorl	%edx, %edx
	divq	%rsi
	movq	%rdx, %rcx
	shlq	$4, %rcx
	orq	$2, %rcx
	jmp	.LBB11_21
.LBB11_26:                              # %"$29"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	divErr
.LBB11_27:                              # %"$31"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rsi, %rdx
	callq	numErr
.LBB11_25:                              # %"$10"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%r15, %rdx
	callq	numErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _shr;
	.scl	2;
	.type	32;
	.endef
	.globl	_shr                            # -- Begin function _shr
	.p2align	4, 0x90
_shr:                                   # @_shr
.seh_proc _shr
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rdi
	movq	8(%rcx), %rsi
	movq	(%rsi), %rax
	testb	$6, %al
	jne	.LBB12_4
# %bb.1:                                # %"$3.i"
	testb	$8, %al
	jne	.LBB12_2
# %bb.3:                                # %"$5.i"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB12_4
.LBB12_2:                               # %"$6.i"
	movq	(%rax), %rax
.LBB12_4:                               # %"$2.i"
	testb	$2, %al
	je	.LBB12_28
# %bb.5:                                # %evCnt.exit
	movq	%rax, %rcx
	shrq	$4, %rcx
	movq	%rcx, %rbx
	negq	%rbx
	testb	$8, %al
	cmoveq	%rcx, %rbx
	movq	8(%rsi), %rax
	movq	(%rax), %rsi
	testb	$6, %sil
	jne	.LBB12_9
# %bb.6:                                # %"$3"
	testb	$8, %sil
	jne	.LBB12_7
# %bb.8:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
.LBB12_9:                               # %"$2"
	testq	%rbx, %rbx
	je	.LBB12_10
.LBB12_11:                              # %"$8"
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rsi
	je	.LBB12_27
# %bb.12:                               # %"$9"
	testb	$6, %sil
	je	.LBB12_29
# %bb.13:                               # %"$7"
	movl	$2, %eax
	cmpq	$2, %rsi
	je	.LBB12_27
# %bb.14:                               # %"$13"
	movq	%rsi, %rdx
	andq	$-9, %rdx
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rdx, (%rdi)
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rdi, env(%rip)
	testq	%rbx, %rbx
	jle	.LBB12_15
	.p2align	4, 0x90
.LBB12_18:                              # %"$18"
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$64, %rbx
	jb	.LBB12_21
# %bb.19:                               # %"$18"
                                        #   in Loop: Header=BB12_18 Depth=1
	movl	%edx, %eax
	andl	$4, %eax
	testq	%rax, %rax
	je	.LBB12_21
# %bb.20:                               # %"$21"
                                        #   in Loop: Header=BB12_18 Depth=1
	movq	4(%rdx), %rdx
	addq	$-64, %rbx
	jne	.LBB12_18
	jmp	.LBB12_26
.LBB12_7:                               # %"$6"
	movq	(%rsi), %rsi
	testq	%rbx, %rbx
	jne	.LBB12_11
.LBB12_10:
	movq	%rsi, %rax
	jmp	.LBB12_27
.LBB12_15:                              # %"$28.preheader"
	incq	%rbx
	.p2align	4, 0x90
.LBB12_16:                              # %"$28"
                                        # =>This Inner Loop Header: Depth=1
	leaq	-1(%rbx), %rax
	subq	$32, %rsp
	cmpq	$-64, %rax
	ja	.LBB12_24
# %bb.17:                               # %"$29"
                                        #   in Loop: Header=BB12_16 Depth=1
	xorl	%ecx, %ecx
	callq	consNum
	addq	$32, %rsp
	movq	%rax, %rdx
	movq	%rax, (%rdi)
	addq	$64, %rbx
	cmpq	$1, %rbx
	jne	.LBB12_16
	jmp	.LBB12_26
.LBB12_21:                              # %"$22"
	subq	$32, %rsp
	movq	%rdx, %rcx
	callq	shru
	addq	$32, %rsp
	movq	%rax, %rdx
	movq	%rax, (%rdi)
	cmpq	$1, %rbx
	je	.LBB12_26
# %bb.22:                               # %"$26.preheader"
	decq	%rbx
	.p2align	4, 0x90
.LBB12_23:                              # %"$26"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	movq	%rdx, %rcx
	callq	half
	addq	$32, %rsp
	movq	%rax, %rdx
	decq	%rbx
	jne	.LBB12_23
	jmp	.LBB12_26
.LBB12_24:                              # %"$30"
	movq	%rdx, %rcx
	callq	shlu
	addq	$32, %rsp
	movq	%rax, %rdx
	movq	%rax, (%rdi)
	testq	%rbx, %rbx
	je	.LBB12_26
	.p2align	4, 0x90
.LBB12_25:                              # %"$34"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	movq	%rdx, %rcx
	callq	twice
	addq	$32, %rsp
	movq	%rax, %rdx
	movq	%rax, (%rdi)
	incq	%rbx
	jne	.LBB12_25
.LBB12_26:                              # %"$-9"
	movq	%rdx, %rax
	xorq	$8, %rax
	cmpq	$2, %rdx
	cmoveq	%rdx, %rax
	testb	$8, %sil
	cmoveq	%rdx, %rax
	movq	8(%rdi), %rcx
	movq	%rcx, env(%rip)
.LBB12_27:                              # %"$14"
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%rbp
	retq
.LBB12_28:                              # %"$2.i.i"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	cntErr
.LBB12_29:                              # %"$10"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	numErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _rev;
	.scl	2;
	.type	32;
	.endef
	.globl	_rev                            # -- Begin function _rev
	.p2align	4, 0x90
_rev:                                   # @_rev
.seh_proc _rev
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rbx
	movq	(%rbx), %rax
	testb	$6, %al
	jne	.LBB13_4
# %bb.1:                                # %"$3.i"
	testb	$8, %al
	jne	.LBB13_2
# %bb.3:                                # %"$5.i"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB13_4
.LBB13_2:                               # %"$6.i"
	movq	(%rax), %rax
.LBB13_4:                               # %"$2.i"
	testb	$2, %al
	je	.LBB13_13
# %bb.5:                                # %evCnt.exit
	movq	%rax, %rcx
	shrq	$4, %rcx
	movq	%rcx, %rdi
	negq	%rdi
	testb	$8, %al
	cmoveq	%rcx, %rdi
	movq	8(%rbx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB13_9
# %bb.6:                                # %"$3.i3"
	testb	$8, %al
	jne	.LBB13_7
# %bb.8:                                # %"$5.i5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB13_9
.LBB13_7:                               # %"$6.i4"
	movq	(%rax), %rax
.LBB13_9:                               # %"$2.i7"
	testb	$2, %al
	je	.LBB13_13
# %bb.10:                               # %evCnt.exit10
	movq	%rax, %rdx
	shrq	$4, %rdx
	movq	%rdx, %rcx
	negq	%rcx
	testb	$8, %al
	cmoveq	%rdx, %rcx
	xorl	%eax, %eax
	.p2align	4, 0x90
.LBB13_11:                              # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	movl	%ecx, %edx
	andl	$1, %edx
	leaq	(%rdx,%rax,2), %rax
	shrq	%rcx
	decq	%rdi
	jne	.LBB13_11
# %bb.12:                               # %"$4"
	shlq	$4, %rax
	orq	$2, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
.LBB13_13:                              # %"$2.i.i"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	cntErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _lt0;
	.scl	2;
	.type	32;
	.endef
	.globl	_lt0                            # -- Begin function _lt0
	.p2align	4, 0x90
_lt0:                                   # @_lt0
.seh_proc _lt0
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB14_4
# %bb.1:                                # %"$4"
	testb	$8, %al
	jne	.LBB14_2
# %bb.3:                                # %"$6"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB14_4
.LBB14_2:                               # %"$7"
	movq	(%rax), %rax
.LBB14_4:                               # %"$3"
	leaq	SymTab+8(%rip), %rdx
	testb	$8, %al
	movq	%rax, %rcx
	cmoveq	%rdx, %rcx
	testb	$6, %al
	cmoveq	%rdx, %rcx
	movq	%rcx, %rax
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _le0;
	.scl	2;
	.type	32;
	.endef
	.globl	_le0                            # -- Begin function _le0
	.p2align	4, 0x90
_le0:                                   # @_le0
.seh_proc _le0
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB15_4
# %bb.1:                                # %"$4"
	testb	$8, %al
	jne	.LBB15_2
# %bb.3:                                # %"$6"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB15_4
.LBB15_2:                               # %"$7"
	movq	(%rax), %rax
.LBB15_4:                               # %"$3"
	leaq	SymTab+8(%rip), %rdx
	testb	$8, %al
	movq	%rdx, %rcx
	cmovneq	%rax, %rcx
	cmpq	$2, %rax
	cmoveq	%rax, %rcx
	testb	$6, %al
	cmoveq	%rdx, %rcx
	movq	%rcx, %rax
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _ge0;
	.scl	2;
	.type	32;
	.endef
	.globl	_ge0                            # -- Begin function _ge0
	.p2align	4, 0x90
_ge0:                                   # @_ge0
.seh_proc _ge0
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB16_4
# %bb.1:                                # %"$4"
	testb	$8, %al
	jne	.LBB16_2
# %bb.3:                                # %"$6"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB16_4
.LBB16_2:                               # %"$7"
	movq	(%rax), %rax
.LBB16_4:                               # %"$3"
	testb	$8, %al
	leaq	SymTab+8(%rip), %rdx
	movq	%rax, %rcx
	cmovneq	%rdx, %rcx
	testb	$6, %al
	cmoveq	%rdx, %rcx
	movq	%rcx, %rax
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _gt0;
	.scl	2;
	.type	32;
	.endef
	.globl	_gt0                            # -- Begin function _gt0
	.p2align	4, 0x90
_gt0:                                   # @_gt0
.seh_proc _gt0
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB17_4
# %bb.1:                                # %"$4"
	testb	$8, %al
	jne	.LBB17_2
# %bb.3:                                # %"$6"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB17_4
.LBB17_2:                               # %"$7"
	movq	(%rax), %rax
.LBB17_4:                               # %"$3"
	testb	$6, %al
	leaq	SymTab+8(%rip), %rdx
	movq	%rdx, %rcx
	cmovneq	%rax, %rcx
	cmpq	$2, %rax
	cmoveq	%rdx, %rcx
	testb	$8, %al
	cmovneq	%rdx, %rcx
	movq	%rcx, %rax
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _abs;
	.scl	2;
	.type	32;
	.endef
	.globl	_abs                            # -- Begin function _abs
	.p2align	4, 0x90
_abs:                                   # @_abs
.seh_proc _abs
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB18_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB18_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB18_4
.LBB18_2:                               # %"$6"
	movq	(%rax), %rax
.LBB18_4:                               # %"$2"
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB18_7
# %bb.5:                                # %"$8"
	testb	$6, %al
	je	.LBB18_8
# %bb.6:                                # %"$11"
	andq	$-9, %rax
	movq	%rax, %rcx
.LBB18_7:                               # %"$9"
	movq	%rcx, %rax
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB18_8:                               # %"$10"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	numErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _bitQ;
	.scl	2;
	.type	32;
	.endef
	.globl	_bitQ                           # -- Begin function _bitQ
	.p2align	4, 0x90
_bitQ:                                  # @_bitQ
.seh_proc _bitQ
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %r14
	movq	8(%rcx), %rax
	movq	(%rax), %rbx
	movq	8(%rax), %rsi
	testb	$6, %bl
	jne	.LBB19_4
# %bb.1:                                # %"$3"
	testb	$8, %bl
	jne	.LBB19_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rbx
	jmp	.LBB19_4
.LBB19_2:                               # %"$6"
	movq	(%rbx), %rbx
.LBB19_4:                               # %"$2"
	testb	$6, %bl
	je	.LBB19_37
# %bb.5:                                # %"$8"
	movq	%rbx, %rdi
	andq	$-9, %rdi
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%rdi, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r15, env(%rip)
	testb	$4, %bl
	jne	.LBB19_6
# %bb.11:                               # %"$9.us.preheader"
	shrq	$4, %rbx
	leaq	SymTab+8(%rip), %r12
	jmp	.LBB19_12
	.p2align	4, 0x90
.LBB19_21:                              # %"$29.us"
                                        #   in Loop: Header=BB19_12 Depth=1
	movq	-4(%rcx), %rcx
	movq	%rbx, %rax
.LBB19_22:                              # %"$30.us"
                                        #   in Loop: Header=BB19_12 Depth=1
	andq	%rax, %rcx
	cmpq	%rcx, %rax
	jne	.LBB19_35
.LBB19_12:                              # %"$9.us"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %sil
	jne	.LBB19_36
# %bb.13:                               # %"$10.us"
                                        #   in Loop: Header=BB19_12 Depth=1
	movq	(%rsi), %rax
	movq	8(%rsi), %rsi
	testb	$6, %al
	jne	.LBB19_17
# %bb.14:                               # %"$14.us"
                                        #   in Loop: Header=BB19_12 Depth=1
	testb	$8, %al
	jne	.LBB19_15
# %bb.16:                               # %"$16.us"
                                        #   in Loop: Header=BB19_12 Depth=1
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	.p2align	4, 0x90
.LBB19_17:                              # %"$13.us"
                                        #   in Loop: Header=BB19_12 Depth=1
	cmpq	%r12, %rax
	je	.LBB19_35
.LBB19_18:                              # %"$18.us"
                                        #   in Loop: Header=BB19_12 Depth=1
	testb	$6, %al
	je	.LBB19_38
# %bb.19:                               # %"$21.us"
                                        #   in Loop: Header=BB19_12 Depth=1
	movq	%rax, %rcx
	andq	$-9, %rcx
	testb	$4, %al
	jne	.LBB19_21
# %bb.20:                               #   in Loop: Header=BB19_12 Depth=1
	movq	%rdi, %rax
	jmp	.LBB19_22
.LBB19_15:                              # %"$17.us"
                                        #   in Loop: Header=BB19_12 Depth=1
	movq	(%rax), %rax
	cmpq	%r12, %rax
	jne	.LBB19_18
.LBB19_35:
	movq	%r12, %rdi
.LBB19_36:                              # %"$11"
	movq	8(%r15), %rax
	movq	%rax, env(%rip)
	movq	%rdi, %rax
	jmp	.LBB19_29
.LBB19_6:
	leaq	SymTab+8(%rip), %r12
.LBB19_7:                               # %"$9"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_27 Depth 2
	testb	$15, %sil
	jne	.LBB19_36
# %bb.8:                                # %"$10"
                                        #   in Loop: Header=BB19_7 Depth=1
	movq	(%rsi), %rax
	movq	8(%rsi), %rsi
	testb	$6, %al
	jne	.LBB19_24
# %bb.9:                                # %"$14"
                                        #   in Loop: Header=BB19_7 Depth=1
	testb	$8, %al
	jne	.LBB19_10
# %bb.23:                               # %"$16"
                                        #   in Loop: Header=BB19_7 Depth=1
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB19_24
.LBB19_10:                              # %"$17"
                                        #   in Loop: Header=BB19_7 Depth=1
	movq	(%rax), %rax
	.p2align	4, 0x90
.LBB19_24:                              # %"$13"
                                        #   in Loop: Header=BB19_7 Depth=1
	cmpq	%r12, %rax
	je	.LBB19_35
# %bb.25:                               # %"$18"
                                        #   in Loop: Header=BB19_7 Depth=1
	testb	$6, %al
	je	.LBB19_38
# %bb.26:                               # %"$21"
                                        #   in Loop: Header=BB19_7 Depth=1
	movq	%rax, %rcx
	andq	$-9, %rcx
	testb	$4, %al
	sete	%dl
	movq	%rdi, %rax
	.p2align	4, 0x90
.LBB19_27:                              # %"$23"
                                        #   Parent Loop BB19_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	testb	$1, %dl
	jne	.LBB19_28
# %bb.30:                               # %"$26"
                                        #   in Loop: Header=BB19_27 Depth=2
	movq	-4(%rax), %rdx
	movq	-4(%rcx), %rbx
	andq	%rdx, %rbx
	cmpq	%rbx, %rdx
	jne	.LBB19_28
# %bb.31:                               # %"$28"
                                        #   in Loop: Header=BB19_27 Depth=2
	movq	4(%rcx), %rcx
	movq	4(%rax), %rax
	testb	$4, %cl
	sete	%dl
	testb	$4, %al
	jne	.LBB19_27
# %bb.32:                               # %"$24"
                                        #   in Loop: Header=BB19_7 Depth=1
	testb	$4, %cl
	je	.LBB19_34
# %bb.33:                               # %"$29"
                                        #   in Loop: Header=BB19_7 Depth=1
	shrq	$4, %rax
	movq	-4(%rcx), %rcx
.LBB19_34:                              # %"$30"
                                        #   in Loop: Header=BB19_7 Depth=1
	andq	%rax, %rcx
	cmpq	%rcx, %rax
	je	.LBB19_7
	jmp	.LBB19_35
.LBB19_28:                              # %"$25"
	movq	8(%r15), %rax
	movq	%rax, env(%rip)
	leaq	SymTab+8(%rip), %rax
.LBB19_29:                              # %"$25"
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB19_38:                              # %"$20"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rax, %rdx
	callq	numErr
.LBB19_37:                              # %"$7"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rbx, %rdx
	callq	numErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _bitAnd;
	.scl	2;
	.type	32;
	.endef
	.globl	_bitAnd                         # -- Begin function _bitAnd
	.p2align	4, 0x90
_bitAnd:                                # @_bitAnd
.seh_proc _bitAnd
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %r14
	movq	8(%rcx), %r15
	movq	(%r15), %rdx
	testb	$6, %dl
	jne	.LBB20_4
# %bb.1:                                # %"$3"
	testb	$8, %dl
	jne	.LBB20_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rdx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdx
	jmp	.LBB20_4
.LBB20_2:                               # %"$6"
	movq	(%rdx), %rdx
.LBB20_4:                               # %"$2"
	leaq	SymTab+8(%rip), %rdi
	cmpq	%rdi, %rdx
	je	.LBB20_17
# %bb.5:                                # %"$8"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r12
	movq	$10, (%r12)
	movq	%r12, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r12, env(%rip)
	testb	$6, %dl
	je	.LBB20_18
# %bb.6:                                # %"$11"
	andq	$-9, %rdx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rdx, (%rsi)
	movq	%r12, 8(%rsi)
	movq	%rsi, env(%rip)
	movq	8(%r15), %rbx
	testb	$15, %bl
	movq	%rdx, %rdi
	jne	.LBB20_16
# %bb.7:                                # %"$13.preheader"
	leaq	SymTab+8(%rip), %rdi
	.p2align	4, 0x90
.LBB20_8:                               # %"$13"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rbx), %rdx
	testb	$6, %dl
	jne	.LBB20_12
# %bb.9:                                # %"$17"
                                        #   in Loop: Header=BB20_8 Depth=1
	testb	$8, %dl
	jne	.LBB20_10
# %bb.11:                               # %"$19"
                                        #   in Loop: Header=BB20_8 Depth=1
	subq	$32, %rsp
	movq	%rdx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdx
	jmp	.LBB20_12
.LBB20_10:                              # %"$20"
                                        #   in Loop: Header=BB20_8 Depth=1
	movq	(%rdx), %rdx
	.p2align	4, 0x90
.LBB20_12:                              # %"$16"
                                        #   in Loop: Header=BB20_8 Depth=1
	cmpq	%rdi, %rdx
	je	.LBB20_16
# %bb.13:                               # %"$21"
                                        #   in Loop: Header=BB20_8 Depth=1
	testb	$6, %dl
	je	.LBB20_18
# %bb.14:                               # %"$24"
                                        #   in Loop: Header=BB20_8 Depth=1
	movq	%rdx, (%r12)
	movq	(%rsi), %rcx
	andq	$-9, %rdx
	subq	$32, %rsp
	callq	andu
	addq	$32, %rsp
	movq	%rax, (%rsi)
	movq	8(%rbx), %rbx
	testb	$15, %bl
	je	.LBB20_8
# %bb.15:
	movq	%rax, %rdi
.LBB20_16:                              # %"$14"
	movq	8(%r12), %rax
	movq	%rax, env(%rip)
.LBB20_17:                              # %"$9"
	movq	%rdi, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB20_18:                              # %"$10"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	numErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _bitOr;
	.scl	2;
	.type	32;
	.endef
	.globl	_bitOr                          # -- Begin function _bitOr
	.p2align	4, 0x90
_bitOr:                                 # @_bitOr
.seh_proc _bitOr
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %r14
	movq	8(%rcx), %r15
	movq	(%r15), %rdx
	testb	$6, %dl
	jne	.LBB21_4
# %bb.1:                                # %"$3"
	testb	$8, %dl
	jne	.LBB21_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rdx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdx
	jmp	.LBB21_4
.LBB21_2:                               # %"$6"
	movq	(%rdx), %rdx
.LBB21_4:                               # %"$2"
	leaq	SymTab+8(%rip), %rdi
	cmpq	%rdi, %rdx
	je	.LBB21_17
# %bb.5:                                # %"$8"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r12
	movq	$10, (%r12)
	movq	%r12, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r12, env(%rip)
	testb	$6, %dl
	je	.LBB21_18
# %bb.6:                                # %"$11"
	andq	$-9, %rdx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rdx, (%rsi)
	movq	%r12, 8(%rsi)
	movq	%rsi, env(%rip)
	movq	8(%r15), %rbx
	testb	$15, %bl
	movq	%rdx, %rdi
	jne	.LBB21_16
# %bb.7:                                # %"$13.preheader"
	leaq	SymTab+8(%rip), %rdi
	.p2align	4, 0x90
.LBB21_8:                               # %"$13"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rbx), %rdx
	testb	$6, %dl
	jne	.LBB21_12
# %bb.9:                                # %"$17"
                                        #   in Loop: Header=BB21_8 Depth=1
	testb	$8, %dl
	jne	.LBB21_10
# %bb.11:                               # %"$19"
                                        #   in Loop: Header=BB21_8 Depth=1
	subq	$32, %rsp
	movq	%rdx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdx
	jmp	.LBB21_12
.LBB21_10:                              # %"$20"
                                        #   in Loop: Header=BB21_8 Depth=1
	movq	(%rdx), %rdx
	.p2align	4, 0x90
.LBB21_12:                              # %"$16"
                                        #   in Loop: Header=BB21_8 Depth=1
	cmpq	%rdi, %rdx
	je	.LBB21_16
# %bb.13:                               # %"$21"
                                        #   in Loop: Header=BB21_8 Depth=1
	testb	$6, %dl
	je	.LBB21_18
# %bb.14:                               # %"$24"
                                        #   in Loop: Header=BB21_8 Depth=1
	movq	%rdx, (%r12)
	movq	(%rsi), %rcx
	andq	$-9, %rdx
	subq	$32, %rsp
	callq	oru
	addq	$32, %rsp
	movq	%rax, (%rsi)
	movq	8(%rbx), %rbx
	testb	$15, %bl
	je	.LBB21_8
# %bb.15:
	movq	%rax, %rdi
.LBB21_16:                              # %"$14"
	movq	8(%r12), %rax
	movq	%rax, env(%rip)
.LBB21_17:                              # %"$9"
	movq	%rdi, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB21_18:                              # %"$10"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	numErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _bitXor;
	.scl	2;
	.type	32;
	.endef
	.globl	_bitXor                         # -- Begin function _bitXor
	.p2align	4, 0x90
_bitXor:                                # @_bitXor
.seh_proc _bitXor
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %r14
	movq	8(%rcx), %r15
	movq	(%r15), %rdx
	testb	$6, %dl
	jne	.LBB22_4
# %bb.1:                                # %"$3"
	testb	$8, %dl
	jne	.LBB22_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rdx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdx
	jmp	.LBB22_4
.LBB22_2:                               # %"$6"
	movq	(%rdx), %rdx
.LBB22_4:                               # %"$2"
	leaq	SymTab+8(%rip), %rdi
	cmpq	%rdi, %rdx
	je	.LBB22_17
# %bb.5:                                # %"$8"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r12
	movq	$10, (%r12)
	movq	%r12, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r12, env(%rip)
	testb	$6, %dl
	je	.LBB22_18
# %bb.6:                                # %"$11"
	andq	$-9, %rdx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rdx, (%rsi)
	movq	%r12, 8(%rsi)
	movq	%rsi, env(%rip)
	movq	8(%r15), %rbx
	testb	$15, %bl
	movq	%rdx, %rdi
	jne	.LBB22_16
# %bb.7:                                # %"$13.preheader"
	leaq	SymTab+8(%rip), %rdi
	.p2align	4, 0x90
.LBB22_8:                               # %"$13"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rbx), %rdx
	testb	$6, %dl
	jne	.LBB22_12
# %bb.9:                                # %"$17"
                                        #   in Loop: Header=BB22_8 Depth=1
	testb	$8, %dl
	jne	.LBB22_10
# %bb.11:                               # %"$19"
                                        #   in Loop: Header=BB22_8 Depth=1
	subq	$32, %rsp
	movq	%rdx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdx
	jmp	.LBB22_12
.LBB22_10:                              # %"$20"
                                        #   in Loop: Header=BB22_8 Depth=1
	movq	(%rdx), %rdx
	.p2align	4, 0x90
.LBB22_12:                              # %"$16"
                                        #   in Loop: Header=BB22_8 Depth=1
	cmpq	%rdi, %rdx
	je	.LBB22_16
# %bb.13:                               # %"$21"
                                        #   in Loop: Header=BB22_8 Depth=1
	testb	$6, %dl
	je	.LBB22_18
# %bb.14:                               # %"$24"
                                        #   in Loop: Header=BB22_8 Depth=1
	movq	%rdx, (%r12)
	movq	(%rsi), %rcx
	andq	$-9, %rdx
	subq	$32, %rsp
	callq	xoru
	addq	$32, %rsp
	movq	%rax, (%rsi)
	movq	8(%rbx), %rbx
	testb	$15, %bl
	je	.LBB22_8
# %bb.15:
	movq	%rax, %rdi
.LBB22_16:                              # %"$14"
	movq	8(%r12), %rax
	movq	%rax, env(%rip)
.LBB22_17:                              # %"$9"
	movq	%rdi, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB22_18:                              # %"$10"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	numErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _sqrt;
	.scl	2;
	.type	32;
	.endef
	.globl	_sqrt                           # -- Begin function _sqrt
	.p2align	4, 0x90
_sqrt:                                  # @_sqrt
.seh_proc _sqrt
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$24, %rsp
	.seh_stackalloc 24
	leaq	16(%rsp), %rbp
	.seh_setframe %rbp, 16
	.seh_endprologue
	movq	%rcx, %r14
	movq	8(%rcx), %rsi
	movq	(%rsi), %rbx
	testb	$6, %bl
	jne	.LBB23_4
# %bb.1:                                # %"$3"
	testb	$8, %bl
	jne	.LBB23_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rbx
	jmp	.LBB23_4
.LBB23_2:                               # %"$6"
	movq	(%rbx), %rbx
.LBB23_4:                               # %"$2"
	leaq	SymTab+8(%rip), %rdi
	cmpq	%rdi, %rbx
	je	.LBB23_49
# %bb.5:                                # %"$8"
	testb	$6, %bl
	je	.LBB23_50
# %bb.6:                                # %"$11"
	testb	$8, %bl
	jne	.LBB23_51
# %bb.7:                                # %"$13"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdx
	movq	%rbx, (%rdx)
	movq	%rdx, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rdx, env(%rip)
	movq	8(%rsi), %rax
	movq	(%rax), %r14
	testb	$6, %r14b
	movq	%rdx, (%rbp)                    # 8-byte Spill
	je	.LBB23_9
# %bb.8:
	movq	%rdx, %rcx
	jmp	.LBB23_12
.LBB23_9:                               # %"$15"
	testb	$8, %r14b
	jne	.LBB23_10
# %bb.11:                               # %"$17"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r14
	movq	env(%rip), %rcx
	jmp	.LBB23_12
.LBB23_10:                              # %"$18"
	movq	(%r14), %r14
	movq	(%rbp), %rcx                    # 8-byte Reload
.LBB23_12:                              # %"$14"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%r14, (%rax)
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%rcx, (%rdx)
	movq	%rax, env(%rip)
	testb	$6, %r14b
	je	.LBB23_14
# %bb.13:                               # %"$19"
	subq	$32, %rsp
	movq	%rbx, %rcx
	movq	%r14, %rdx
	callq	mulu
	addq	$32, %rsp
	movq	%rax, %rbx
	movq	(%rbp), %rax                    # 8-byte Reload
	movq	%rbx, (%rax)
.LBB23_14:                              # %"$20"
	testb	$2, %bl
	jne	.LBB23_15
# %bb.16:                               # %"$22"
	movq	%r14, -8(%rbp)                  # 8-byte Spill
	subq	$32, %rsp
	movl	$18, %edx
	xorl	%ecx, %ecx
	callq	consNum
	addq	$32, %rsp
	movq	%rax, %rdi
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r12
	movq	%rdi, (%r12)
	movq	env(%rip), %rax
	movq	%rax, 8(%r12)
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r13
	movq	$2, (%r13)
	movq	%r12, 8(%r13)
	movq	%r13, env(%rip)
	movq	-4(%rbx), %rsi
	movq	($Avail)(%rip), %rcx
	testq	%rcx, %rcx
	jne	.LBB23_18
# %bb.17:                               # %"$2.i"
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rcx
.LBB23_18:                              # %boxNum.exit
	movq	(%rcx), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%rsi, (%rcx)
	leaq	8(%rcx), %r15
	movq	$2, 8(%rcx)
	addq	$4, %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%rcx, (%r14)
	movq	env(%rip), %rax
	movq	%rax, 8(%r14)
	movq	%r14, env(%rip)
	movq	4(%rbx), %rsi
	testb	$4, %sil
	jne	.LBB23_20
# %bb.19:
	movq	%r15, %rbx
.LBB23_23:                              # %"$34"
	movq	%rsi, (%rbx)
	movq	(%r14), %r15
	movq	(%rbp), %rbx                    # 8-byte Reload
	movq	%r15, (%rbx)
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%r15, %rdx
	callq	cmpu
	addq	$32, %rsp
	testq	%rax, %rax
	jg	.LBB23_41
	jmp	.LBB23_24
	.p2align	4, 0x90
.LBB23_22:                              # %boxNum.exit27
                                        #   in Loop: Header=BB23_20 Depth=1
	movq	(%rax), %rcx
	movq	%rcx, ($Avail)(%rip)
	movq	%rbx, (%rax)
	leaq	8(%rax), %rbx
	movq	$2, 8(%rax)
	addq	$4, %rax
	movq	%rax, (%r15)
	subq	$32, %rsp
	xorl	%ecx, %ecx
	movq	%rdi, %rdx
	callq	consNum
	addq	$32, %rsp
	movq	%rax, %rdi
	movq	%rax, (%r12)
	movq	4(%rsi), %rsi
	testb	$4, %sil
	movq	%rbx, %r15
	je	.LBB23_23
.LBB23_20:                              # %"$33"
                                        # =>This Inner Loop Header: Depth=1
	movq	-4(%rsi), %rbx
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	jne	.LBB23_22
# %bb.21:                               # %"$2.i26"
                                        #   in Loop: Header=BB23_20 Depth=1
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rax
	jmp	.LBB23_22
	.p2align	4, 0x90
.LBB23_39:                              # %"$6.i41"
                                        #   in Loop: Header=BB23_24 Depth=1
	shlq	$4, %rbx
	orq	$2, %rbx
	movq	%rbx, %rax
.LBB23_40:                              # %twiceBig.exit42
                                        #   in Loop: Header=BB23_24 Depth=1
	movq	%rax, 4(%rsi)
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%r15, %rdx
	callq	cmpu
	addq	$32, %rsp
	testq	%rax, %rax
	movq	(%rbp), %rbx                    # 8-byte Reload
	jg	.LBB23_41
.LBB23_24:                              # %"$36"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_26 Depth 2
                                        #     Child Loop BB23_34 Depth 2
	movq	-4(%rdi), %rcx
	movq	4(%rdi), %rax
	leaq	(%rcx,%rcx), %rdx
	movq	%rdx, -4(%rdi)
	testb	$4, %al
	jne	.LBB23_26
# %bb.25:                               #   in Loop: Header=BB23_24 Depth=1
	movq	%rdi, %rsi
	movq	%rcx, %rdx
	jmp	.LBB23_27
	.p2align	4, 0x90
.LBB23_26:                              # %"$3.i"
                                        #   Parent Loop BB23_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rax, %rsi
	movq	-4(%rax), %rdx
	movq	4(%rax), %rax
	shrdq	$63, %rdx, %rcx
	movq	%rcx, -4(%rsi)
	testb	$4, %al
	movq	%rdx, %rcx
	jne	.LBB23_26
.LBB23_27:                              # %"$4.i"
                                        #   in Loop: Header=BB23_24 Depth=1
	movq	%rax, %rbx
	shrq	$4, %rbx
	shldq	$1, %rdx, %rbx
	testq	%rax, %rax
	js	.LBB23_28
# %bb.31:                               # %"$6.i"
                                        #   in Loop: Header=BB23_24 Depth=1
	shlq	$4, %rbx
	orq	$2, %rbx
	movq	%rbx, %rax
	jmp	.LBB23_32
	.p2align	4, 0x90
.LBB23_28:                              # %"$5.i"
                                        #   in Loop: Header=BB23_24 Depth=1
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	jne	.LBB23_30
# %bb.29:                               # %"$2.i.i"
                                        #   in Loop: Header=BB23_24 Depth=1
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rax
.LBB23_30:                              # %boxNum.exit.i
                                        #   in Loop: Header=BB23_24 Depth=1
	movq	(%rax), %rcx
	movq	%rcx, ($Avail)(%rip)
	movq	%rbx, (%rax)
	movq	$2, 8(%rax)
	addq	$4, %rax
.LBB23_32:                              # %twiceBig.exit
                                        #   in Loop: Header=BB23_24 Depth=1
	movq	%rax, 4(%rsi)
	movq	-4(%rdi), %rcx
	movq	4(%rdi), %rax
	leaq	(%rcx,%rcx), %rdx
	movq	%rdx, -4(%rdi)
	testb	$4, %al
	jne	.LBB23_34
# %bb.33:                               #   in Loop: Header=BB23_24 Depth=1
	movq	%rdi, %rsi
	movq	%rcx, %rdx
	jmp	.LBB23_35
	.p2align	4, 0x90
.LBB23_34:                              # %"$3.i31"
                                        #   Parent Loop BB23_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rax, %rsi
	movq	-4(%rax), %rdx
	movq	4(%rax), %rax
	shrdq	$63, %rdx, %rcx
	movq	%rcx, -4(%rsi)
	testb	$4, %al
	movq	%rdx, %rcx
	jne	.LBB23_34
.LBB23_35:                              # %"$4.i36"
                                        #   in Loop: Header=BB23_24 Depth=1
	movq	%rax, %rbx
	shrq	$4, %rbx
	shldq	$1, %rdx, %rbx
	testq	%rax, %rax
	jns	.LBB23_39
# %bb.36:                               # %"$5.i38"
                                        #   in Loop: Header=BB23_24 Depth=1
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	jne	.LBB23_38
# %bb.37:                               # %"$2.i.i39"
                                        #   in Loop: Header=BB23_24 Depth=1
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rax
.LBB23_38:                              # %boxNum.exit.i40
                                        #   in Loop: Header=BB23_24 Depth=1
	movq	(%rax), %rcx
	movq	%rcx, ($Avail)(%rip)
	movq	%rbx, (%rax)
	movq	$2, 8(%rax)
	addq	$4, %rax
	jmp	.LBB23_40
	.p2align	4, 0x90
.LBB23_43:                              # %"$39"
                                        #   in Loop: Header=BB23_41 Depth=1
	subq	$32, %rsp
	movq	%r15, %rcx
	movq	%rsi, %rdx
	callq	subu
	addq	$32, %rsp
	movq	%rax, %r15
	movq	%rax, (%rbx)
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rdi, %rdx
	callq	addu
	addq	$32, %rsp
	movq	%rax, %rcx
	movq	%rax, (%r13)
.LBB23_44:                              # %"$40"
                                        #   in Loop: Header=BB23_41 Depth=1
	subq	$32, %rsp
	callq	half
	addq	$32, %rsp
	movq	%rax, (%r13)
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	half
	movq	%rax, %rcx
	callq	half
	addq	$32, %rsp
	movq	%rax, %rdi
	movq	%rax, (%r12)
	cmpq	$2, %rax
	je	.LBB23_45
.LBB23_41:                              # %"$38"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rcx
	subq	$32, %rsp
	movq	%rdi, %rdx
	callq	addu
	addq	$32, %rsp
	movq	%rax, %rsi
	movq	%rax, (%r14)
	subq	$32, %rsp
	movq	%r15, %rcx
	movq	%rax, %rdx
	callq	cmpu
	addq	$32, %rsp
	testq	%rax, %rax
	jns	.LBB23_43
# %bb.42:                               # %"$38.$40_crit_edge"
                                        #   in Loop: Header=BB23_41 Depth=1
	movq	(%r13), %rcx
	jmp	.LBB23_44
.LBB23_15:                              # %"$21"
	movq	%rbx, %rax
	shrq	$4, %rax
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	shrq	$62, %rbx
	setne	%dl
	sete	%cl
	shlq	$58, %rcx
	addq	%rax, %rcx
	movabsq	$-288230376151711744, %rax      # imm = 0xFC00000000000000
	addq	%rcx, %rax
	shlq	$58, %rdx
	movabsq	$72057594037927936, %rbx        # imm = 0x100000000000000
	leaq	(%rdx,%rbx), %rdi
	addq	%rdi, %rbx
	xorl	%ecx, %ecx
	cmpq	%rdi, %rax
	cmovbq	%rcx, %rdi
	cmovbq	%rdx, %rbx
	subq	%rdi, %rax
	shrq	%rbx
	movabsq	$18014398509481984, %rdx        # imm = 0x40000000000000
	leaq	(%rbx,%rdx), %rdi
	addq	%rdi, %rdx
	cmpq	%rdi, %rax
	cmovbq	%rcx, %rdi
	cmovbq	%rbx, %rdx
	subq	%rdi, %rax
	shrq	%rdx
	movabsq	$4503599627370496, %rbx         # imm = 0x10000000000000
	addq	%rdx, %rbx
	movabsq	$9007199254740992, %rdi         # imm = 0x20000000000000
	addq	%rdx, %rdi
	cmpq	%rbx, %rax
	cmovbq	%rcx, %rbx
	cmovbq	%rdx, %rdi
	subq	%rbx, %rax
	shrq	%rdi
	movabsq	$1125899906842624, %rdx         # imm = 0x4000000000000
	addq	%rdi, %rdx
	movabsq	$2251799813685248, %rbx         # imm = 0x8000000000000
	addq	%rdi, %rbx
	cmpq	%rdx, %rax
	cmovbq	%rcx, %rdx
	cmovbq	%rdi, %rbx
	subq	%rdx, %rax
	shrq	%rbx
	movabsq	$281474976710656, %rdx          # imm = 0x1000000000000
	addq	%rbx, %rdx
	movabsq	$562949953421312, %rdi          # imm = 0x2000000000000
	addq	%rbx, %rdi
	cmpq	%rdx, %rax
	cmovbq	%rcx, %rdx
	cmovbq	%rbx, %rdi
	subq	%rdx, %rax
	shrq	%rdi
	movabsq	$70368744177664, %rdx           # imm = 0x400000000000
	addq	%rdi, %rdx
	movabsq	$140737488355328, %rbx          # imm = 0x800000000000
	addq	%rdi, %rbx
	cmpq	%rdx, %rax
	cmovbq	%rcx, %rdx
	cmovbq	%rdi, %rbx
	subq	%rdx, %rax
	shrq	%rbx
	movabsq	$17592186044416, %rdx           # imm = 0x100000000000
	addq	%rbx, %rdx
	movabsq	$35184372088832, %rdi           # imm = 0x200000000000
	addq	%rbx, %rdi
	cmpq	%rdx, %rax
	cmovbq	%rcx, %rdx
	cmovbq	%rbx, %rdi
	subq	%rdx, %rax
	shrq	%rdi
	movabsq	$4398046511104, %rdx            # imm = 0x40000000000
	addq	%rdi, %rdx
	movabsq	$8796093022208, %rbx            # imm = 0x80000000000
	addq	%rdi, %rbx
	cmpq	%rdx, %rax
	cmovbq	%rcx, %rdx
	cmovbq	%rdi, %rbx
	subq	%rdx, %rax
	shrq	%rbx
	movabsq	$1099511627776, %rdx            # imm = 0x10000000000
	addq	%rbx, %rdx
	movabsq	$2199023255552, %rdi            # imm = 0x20000000000
	addq	%rbx, %rdi
	cmpq	%rdx, %rax
	cmovbq	%rcx, %rdx
	cmovbq	%rbx, %rdi
	subq	%rdx, %rax
	shrq	%rdi
	movabsq	$274877906944, %rdx             # imm = 0x4000000000
	addq	%rdi, %rdx
	movabsq	$549755813888, %rbx             # imm = 0x8000000000
	addq	%rdi, %rbx
	cmpq	%rdx, %rax
	cmovbq	%rcx, %rdx
	cmovbq	%rdi, %rbx
	subq	%rdx, %rax
	shrq	%rbx
	movabsq	$68719476736, %rdx              # imm = 0x1000000000
	addq	%rbx, %rdx
	movabsq	$137438953472, %rdi             # imm = 0x2000000000
	addq	%rbx, %rdi
	cmpq	%rdx, %rax
	cmovbq	%rcx, %rdx
	cmovbq	%rbx, %rdi
	subq	%rdx, %rax
	shrq	%rdi
	movabsq	$17179869184, %rdx              # imm = 0x400000000
	addq	%rdi, %rdx
	movabsq	$34359738368, %rbx              # imm = 0x800000000
	addq	%rdi, %rbx
	cmpq	%rdx, %rax
	cmovbq	%rcx, %rdx
	cmovbq	%rdi, %rbx
	subq	%rdx, %rax
	shrq	%rbx
	movabsq	$4294967296, %rdx               # imm = 0x100000000
	addq	%rbx, %rdx
	movabsq	$8589934592, %rsi               # imm = 0x200000000
	addq	%rbx, %rsi
	cmpq	%rdx, %rax
	cmovbq	%rcx, %rdx
	cmovbq	%rbx, %rsi
	subq	%rdx, %rax
	shrq	%rsi
	leaq	1073741824(%rsi), %rdx
	movq	%rsi, %rdi
	subq	$-2147483648, %rdi              # imm = 0x80000000
	cmpq	%rdx, %rax
	cmovbq	%rcx, %rdx
	cmovbq	%rsi, %rdi
	subq	%rdx, %rax
	shrq	%rdi
	leaq	268435456(%rdi), %rdx
	leaq	536870912(%rdi), %rbx
	cmpq	%rdx, %rax
	cmovbq	%rcx, %rdx
	cmovbq	%rdi, %rbx
	subq	%rdx, %rax
	shrq	%rbx
	leaq	67108864(%rbx), %rdx
	leaq	134217728(%rbx), %rdi
	cmpq	%rdx, %rax
	cmovbq	%rcx, %rdx
	cmovbq	%rbx, %rdi
	subq	%rdx, %rax
	shrq	%rdi
	leaq	16777216(%rdi), %rdx
	leaq	33554432(%rdi), %rbx
	cmpq	%rdx, %rax
	cmovbq	%rcx, %rdx
	cmovbq	%rdi, %rbx
	subq	%rdx, %rax
	shrq	%rbx
	leaq	4194304(%rbx), %rdx
	leaq	8388608(%rbx), %rdi
	cmpq	%rdx, %rax
	cmovbq	%rcx, %rdx
	cmovbq	%rbx, %rdi
	subq	%rdx, %rax
	shrq	%rdi
	leaq	1048576(%rdi), %rdx
	leaq	2097152(%rdi), %rbx
	cmpq	%rdx, %rax
	cmovbq	%rcx, %rdx
	cmovbq	%rdi, %rbx
	subq	%rdx, %rax
	shrq	%rbx
	leaq	262144(%rbx), %rdx
	leaq	524288(%rbx), %rdi
	cmpq	%rdx, %rax
	cmovbq	%rcx, %rdx
	cmovbq	%rbx, %rdi
	subq	%rdx, %rax
	shrq	%rdi
	leaq	65536(%rdi), %rdx
	leaq	131072(%rdi), %rbx
	cmpq	%rdx, %rax
	cmovbq	%rcx, %rdx
	cmovbq	%rdi, %rbx
	subq	%rdx, %rax
	shrq	%rbx
	leaq	16384(%rbx), %rdx
	leaq	32768(%rbx), %rdi
	cmpq	%rdx, %rax
	cmovbq	%rcx, %rdx
	cmovbq	%rbx, %rdi
	subq	%rdx, %rax
	shrq	%rdi
	leaq	4096(%rdi), %rdx
	leaq	8192(%rdi), %rbx
	cmpq	%rdx, %rax
	cmovbq	%rcx, %rdx
	cmovbq	%rdi, %rbx
	subq	%rdx, %rax
	shrq	%rbx
	leaq	1024(%rbx), %rdx
	leaq	2048(%rbx), %rdi
	cmpq	%rdx, %rax
	cmovbq	%rcx, %rdx
	cmovbq	%rbx, %rdi
	subq	%rdx, %rax
	shrq	%rdi
	leaq	256(%rdi), %rdx
	leaq	512(%rdi), %rbx
	cmpq	%rdx, %rax
	cmovbq	%rcx, %rdx
	cmovbq	%rdi, %rbx
	subq	%rdx, %rax
	shrq	%rbx
	leaq	64(%rbx), %rdx
	leaq	128(%rbx), %rdi
	cmpq	%rdx, %rax
	cmovbq	%rcx, %rdx
	cmovbq	%rbx, %rdi
	subq	%rdx, %rax
	shrq	%rdi
	leaq	16(%rdi), %rdx
	leaq	32(%rdi), %rbx
	cmpq	%rdx, %rax
	cmovbq	%rcx, %rdx
	cmovbq	%rdi, %rbx
	subq	%rdx, %rax
	shrq	%rbx
	leaq	4(%rbx), %rdx
	leaq	8(%rbx), %rdi
	cmpq	%rdx, %rax
	cmovbq	%rcx, %rdx
	cmovbq	%rbx, %rdi
	subq	%rdx, %rax
	shrq	%rdi
	leaq	2(%rdi), %rdx
	cmpq	%rdi, %rax
	cmovbeq	%rdi, %rdx
	notq	%rdi
	cmovbeq	%rcx, %rdi
	addq	%rax, %rdi
	shrq	%rdx
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %r14
	setne	%al
	cmpq	%rdi, %rdx
	setb	%cl
	andb	%al, %cl
	movzbl	%cl, %edi
	addq	%rdx, %rdi
	shlq	$4, %rdi
	orq	$2, %rdi
	movq	(%rbp), %rbx                    # 8-byte Reload
	jmp	.LBB23_48
.LBB23_45:                              # %"$42"
	movq	(%r13), %rdi
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, -8(%rbp)                  # 8-byte Folded Reload
	je	.LBB23_48
# %bb.46:                               # %"$44"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%r15, %rdx
	callq	cmpu
	addq	$32, %rsp
	testq	%rax, %rax
	jns	.LBB23_48
# %bb.47:                               # %"$46"
	subq	$32, %rsp
	movl	$18, %edx
	movq	%rdi, %rcx
	callq	addu
	addq	$32, %rsp
	movq	%rax, %rdi
.LBB23_48:                              # %"$23"
	movq	8(%rbx), %rax
	movq	%rax, env(%rip)
.LBB23_49:                              # %"$9"
	movq	%rdi, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB23_50:                              # %"$10"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rbx, %rdx
	callq	numErr
.LBB23_51:                              # %"$12"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rbx, %rdx
	callq	argErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _seed;
	.scl	2;
	.type	32;
	.endef
	.globl	_seed                           # -- Begin function _seed
	.p2align	4, 0x90
_seed:                                  # @_seed
.seh_proc _seed
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rcx
	testb	$6, %cl
	jne	.LBB24_4
# %bb.1:                                # %"$3"
	testb	$8, %cl
	jne	.LBB24_2
# %bb.3:                                # %"$5"
	callq	evList
	movq	%rax, %rcx
	jmp	.LBB24_4
.LBB24_2:                               # %"$6"
	movq	(%rcx), %rcx
.LBB24_4:                               # %"$2"
	callq	initSeed
	movabsq	$6364136223846793005, %rcx      # imm = 0x5851F42D4C957F2D
	mulq	%rcx
	movq	%rax, ($SeedL)(%rip)
	movq	%rdx, ($SeedH)(%rip)
	shrq	$32, %rax
	leaq	2(,%rax,8), %rax
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _hash;
	.scl	2;
	.type	32;
	.endef
	.globl	_hash                           # -- Begin function _hash
	.p2align	4, 0x90
_hash:                                  # @_hash
.seh_proc _hash
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rcx
	testb	$6, %cl
	jne	.LBB25_4
# %bb.1:                                # %"$3"
	testb	$8, %cl
	jne	.LBB25_2
# %bb.3:                                # %"$5"
	callq	evList
	movq	%rax, %rcx
	jmp	.LBB25_4
.LBB25_2:                               # %"$6"
	movq	(%rcx), %rcx
.LBB25_4:                               # %"$2"
	callq	initSeed
	movq	%rax, %rcx
	movq	$-64, %r8
	xorl	%eax, %eax
	.p2align	4, 0x90
.LBB25_5:                               # %"$7"
                                        # =>This Inner Loop Header: Depth=1
	movl	%eax, %r9d
	xorl	%ecx, %r9d
	shrq	%rcx
	movq	%rax, %rdx
	shrq	%rdx
	movq	%rdx, %rax
	xorq	$40961, %rax                    # imm = 0xA001
	testb	$1, %r9b
	cmoveq	%rdx, %rax
	incq	%r8
	jne	.LBB25_5
# %bb.6:                                # %"$11"
	shlq	$4, %rax
	addq	$18, %rax
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _rand;
	.scl	2;
	.type	32;
	.endef
	.globl	_rand                           # -- Begin function _rand
	.p2align	4, 0x90
_rand:                                  # @_rand
.seh_proc _rand
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rdi
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rbx
	testb	$6, %sil
	jne	.LBB26_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB26_2
# %bb.3:                                # %"$5"
	movq	%rsi, %rcx
	callq	evList
	movq	%rax, %rsi
	jmp	.LBB26_4
.LBB26_2:                               # %"$6"
	movq	(%rsi), %rsi
.LBB26_4:                               # %"$2"
	movabsq	$6364136223846793005, %rax      # imm = 0x5851F42D4C957F2D
	mulq	($SeedL)(%rip)
	addq	$1, %rax
	movq	%rax, ($SeedL)(%rip)
	adcq	$0, %rdx
	movq	%rdx, ($SeedH)(%rip)
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rsi
	jne	.LBB26_6
# %bb.5:                                # %"$9"
	shrq	$32, %rax
	leaq	2(,%rax,8), %rax
	jmp	.LBB26_20
.LBB26_6:                               # %"$8"
	leaq	SymTab+280(%rip), %rdx
	cmpq	%rdx, %rsi
	jne	.LBB26_8
# %bb.7:                                # %"$11"
	addq	%rax, %rax
	cmovbq	%rdx, %rcx
	movq	%rcx, %rax
	jmp	.LBB26_20
.LBB26_8:                               # %"$10"
	testb	$2, %sil
	je	.LBB26_21
# %bb.9:                                # %"$16"
	testb	$8, %sil
	jne	.LBB26_22
# %bb.10:                               # %"$18"
	movq	(%rbx), %rax
	testb	$6, %al
	jne	.LBB26_14
# %bb.11:                               # %"$20"
	testb	$8, %al
	jne	.LBB26_12
# %bb.13:                               # %"$22"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB26_14
.LBB26_12:                              # %"$23"
	movq	(%rax), %rax
.LBB26_14:                              # %"$19"
	testb	$2, %al
	je	.LBB26_23
# %bb.15:                               # %"$25"
	testb	$8, %al
	jne	.LBB26_24
# %bb.16:                               # %"$27"
	shrq	$4, %rsi
	movq	%rax, %rcx
	shrq	$4, %rcx
	subq	%rsi, %rcx
	jb	.LBB26_24
# %bb.17:                               # %"$29"
	movq	($SeedH)(%rip), %rdx
	movq	($SeedL)(%rip), %rax
	shrdq	$32, %rdx, %rax
	incq	%rcx
	xorl	%edx, %edx
	divq	%rcx
	addq	%rsi, %rdx
	movq	%rdx, %rax
	shlq	$4, %rax
	testq	%rdx, %rdx
	js	.LBB26_18
# %bb.19:                               # %"$31"
	orq	$2, %rax
	jmp	.LBB26_20
.LBB26_18:                              # %"$30"
	negq	%rax
	orq	$10, %rax
.LBB26_20:                              # %"$7"
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
.LBB26_24:                              # %"$26"
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	argErr
.LBB26_21:                              # %"$15"
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	cntErr
.LBB26_22:                              # %"$17"
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	argErr
.LBB26_23:                              # %"$24"
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	cntErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _name;
	.scl	2;
	.type	32;
	.endef
	.globl	_name                           # -- Begin function _name
	.p2align	4, 0x90
_name:                                  # @_name
.seh_proc _name
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB27_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB27_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB27_4
.LBB27_2:                               # %"$6"
	movq	(%rax), %rax
.LBB27_4:                               # %"$2"
	movl	%eax, %ecx
	andl	$14, %ecx
	cmpl	$8, %ecx
	jne	.LBB27_19
# %bb.5:                                # %"$8"
	movq	-8(%rax), %rcx
	testb	$8, %cl
	jne	.LBB27_6
	.p2align	4, 0x90
# %bb.13:                               # %"$16"
	testb	$6, %cl
	jne	.LBB27_14
.LBB27_12:                              # %"$16"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rcx
	testb	$6, %cl
	je	.LBB27_12
.LBB27_14:                              # %"$17"
	cmpq	$2, %rcx
	jne	.LBB27_20
# %bb.15:
	leaq	SymTab+8(%rip), %rax
	jmp	.LBB27_18
.LBB27_6:                               # %"$9"
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	$4, (%rsi)
	leaq	16(%rsi), %rax
	movq	$2, 16(%rsi)
	movq	env(%rip), %rdx
	movq	%rdx, 24(%rsi)
	movq	%rax, env(%rip)
	movq	%rcx, %rdi
	andq	$-9, %rdi
	testb	$6, %cl
	jne	.LBB27_8
	.p2align	4, 0x90
.LBB27_7:                               # %"$13"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rdi), %rdi
	testb	$6, %dil
	je	.LBB27_7
.LBB27_8:                               # %"$14"
	movl	%edi, %eax
	shrl	$24, %eax
	movq	%rdi, %rcx
	shrq	$36, %rcx
	andl	$65280, %ecx                    # imm = 0xFF00
	orl	%eax, %ecx
	je	.LBB27_10
# %bb.9:                                # %"$2.i"
	subq	$32, %rsp
                                        # kill: def $ecx killed $ecx killed $rcx
	movq	%rsi, %rdx
	callq	packAO
	addq	$32, %rsp
.LBB27_10:                              # %packExtNm.exit
	movl	%edi, %eax
	shrl	$4, %eax
	andl	$1048575, %eax                  # imm = 0xFFFFF
	movq	%rdi, %rdx
	shrq	$12, %rdx
	andl	$-1048576, %edx                 # imm = 0xFFF00000
	orq	%rax, %rdx
	shrq	$20, %rdi
	movabsq	$4393751543808, %rcx            # imm = 0x3FF00000000
	andq	%rdi, %rcx
	orq	%rdx, %rcx
	subq	$32, %rsp
	movq	%rsi, %rdx
	callq	packOct
	addq	$32, %rsp
	movq	16(%rsi), %rcx
	cmpq	$2, %rcx
	jne	.LBB27_16
# %bb.11:
	leaq	SymTab+8(%rip), %rax
	jmp	.LBB27_17
.LBB27_20:                              # %"$3.i5"
	xorl	%edx, %edx
	movq	%rbp, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	jmp	consSym                         # TAILCALL
.LBB27_16:                              # %"$3.i"
	subq	$32, %rsp
	xorl	%edx, %edx
	callq	consSym
	addq	$32, %rsp
.LBB27_17:                              # %consStr.exit
	movq	24(%rsi), %rcx
	movq	%rcx, env(%rip)
.LBB27_18:                              # %"$11"
	movq	%rbp, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	retq
.LBB27_19:                              # %"$7"
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	symErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _nsp;
	.scl	2;
	.type	32;
	.endef
	.globl	_nsp                            # -- Begin function _nsp
	.p2align	4, 0x90
_nsp:                                   # @_nsp
.seh_proc _nsp
# %bb.0:                                # %"$1"
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rdi
	movq	8(%rcx), %rax
	movq	(%rax), %r15
	testb	$6, %r15b
	jne	.LBB28_4
# %bb.1:                                # %"$3"
	testb	$8, %r15b
	jne	.LBB28_3
# %bb.2:                                # %"$5"
	movq	%r15, %rcx
	callq	evList
	movq	%rax, %r15
	jmp	.LBB28_4
.LBB28_3:                               # %"$6"
	movq	(%r15), %r15
.LBB28_4:                               # %"$2"
	movl	%r15d, %eax
	andl	$14, %eax
	cmpl	$8, %eax
	jne	.LBB28_15
# %bb.5:                                # %"$8"
	movq	-8(%r15), %rdi
	leaq	SymTab+8(%rip), %r14
	testb	$8, %dil
	jne	.LBB28_12
	.p2align	4, 0x90
# %bb.6:                                # %"$12.preheader"
	testb	$6, %dil
	jne	.LBB28_8
.LBB28_7:                               # %"$13"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rdi), %rdi
	testb	$6, %dil
	je	.LBB28_7
.LBB28_8:                               # %"$15.preheader"
	movq	gcData(%rip), %rsi
	testb	$15, %sil
	je	.LBB28_11
.LBB28_12:
	movq	%r14, %rbx
.LBB28_13:                              # %"$11"
	movq	%rbx, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	retq
	.p2align	4, 0x90
.LBB28_10:                              # %"$15"
                                        #   in Loop: Header=BB28_11 Depth=1
	movq	8(%rsi), %rsi
	testb	$15, %sil
	jne	.LBB28_12
.LBB28_11:                              # %"$16"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rbx
	movq	(%rbx), %rax
	movq	8(%rax), %rdx
	movq	%rdi, %rcx
	callq	isIntern
	cmpq	%rax, %r15
	jne	.LBB28_10
	jmp	.LBB28_13
.LBB28_15:                              # %"$7"
	movq	%rdi, %rcx
	movq	%r15, %rdx
	callq	symErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _spQ;
	.scl	2;
	.type	32;
	.endef
	.globl	_spQ                            # -- Begin function _spQ
	.p2align	4, 0x90
_spQ:                                   # @_spQ
.seh_proc _spQ
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rcx
	testb	$6, %cl
	jne	.LBB29_4
# %bb.1:                                # %"$3"
	testb	$8, %cl
	jne	.LBB29_2
# %bb.3:                                # %"$5"
	callq	evList
	movq	%rax, %rcx
	jmp	.LBB29_4
.LBB29_2:                               # %"$6"
	movq	(%rcx), %rcx
.LBB29_4:                               # %"$2"
	leaq	SymTab+280(%rip), %rax
	leaq	SymTab+8(%rip), %r8
	cmpq	%r8, %rcx
	je	.LBB29_18
# %bb.5:                                # %"$3.i"
	movl	%ecx, %edx
	andl	$14, %edx
	cmpl	$8, %edx
	jne	.LBB29_17
# %bb.6:                                # %"$5.i"
	movq	-8(%rcx), %r9
	testb	$8, %r9b
	jne	.LBB29_17
	.p2align	4, 0x90
# %bb.8:                                # %"$8.i"
	testb	$6, %r9b
	jne	.LBB29_9
.LBB29_7:                               # %"$8.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%r9), %r9
	testb	$6, %r9b
	je	.LBB29_7
.LBB29_9:                               # %"$10.i.preheader"
	xorl	%edx, %edx
	.p2align	4, 0x90
.LBB29_10:                              # %"$10.i"
                                        # =>This Inner Loop Header: Depth=1
	testq	%rdx, %rdx
	jne	.LBB29_15
# %bb.11:                               # %"$2.i.i"
                                        #   in Loop: Header=BB29_10 Depth=1
	cmpq	$2, %r9
	je	.LBB29_18
# %bb.12:                               # %"$5.i.i"
                                        #   in Loop: Header=BB29_10 Depth=1
	testb	$2, %r9b
	jne	.LBB29_13
# %bb.14:                               # %"$7.i.i"
                                        #   in Loop: Header=BB29_10 Depth=1
	movq	-4(%r9), %rdx
	movq	4(%r9), %r9
	jmp	.LBB29_15
.LBB29_13:                              # %"$8.i.i"
                                        #   in Loop: Header=BB29_10 Depth=1
	movq	%r9, %rdx
	shrq	$4, %rdx
	movl	$2, %r9d
	.p2align	4, 0x90
.LBB29_15:                              # %symByte.exit.i
                                        #   in Loop: Header=BB29_10 Depth=1
	testb	%dl, %dl
	je	.LBB29_18
# %bb.16:                               # %"$11.i"
                                        #   in Loop: Header=BB29_10 Depth=1
	movq	%rdx, %rcx
	shrq	$8, %rcx
	cmpb	$33, %dl
	movq	%rcx, %rdx
	jb	.LBB29_10
.LBB29_17:
	movq	%r8, %rax
.LBB29_18:                              # %isBlank.exit
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _patQ;
	.scl	2;
	.type	32;
	.endef
	.globl	_patQ                           # -- Begin function _patQ
	.p2align	4, 0x90
_patQ:                                  # @_patQ
.seh_proc _patQ
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	testb	$6, %sil
	jne	.LBB30_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB30_2
# %bb.3:                                # %"$5"
	movq	%rsi, %rcx
	callq	evList
	movq	%rax, %rsi
	jmp	.LBB30_4
.LBB30_2:                               # %"$6"
	movq	(%rsi), %rsi
.LBB30_4:                               # %"$2"
	movl	%esi, %eax
	andl	$14, %eax
	cmpl	$8, %eax
	jne	.LBB30_5
# %bb.6:                                # %"$8"
	movq	%rsi, %rcx
	callq	firstChar
	cmpl	$64, %eax
	leaq	SymTab+8(%rip), %rax
	cmoveq	%rsi, %rax
	jmp	.LBB30_7
.LBB30_5:
	leaq	SymTab+8(%rip), %rax
.LBB30_7:                               # %"$7"
	addq	$32, %rsp
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _funQ;
	.scl	2;
	.type	32;
	.endef
	.globl	_funQ                           # -- Begin function _funQ
	.p2align	4, 0x90
_funQ:                                  # @_funQ
.seh_proc _funQ
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rcx
	testb	$6, %cl
	jne	.LBB31_4
# %bb.1:                                # %"$3"
	testb	$8, %cl
	jne	.LBB31_2
# %bb.3:                                # %"$5"
	callq	evList
	movq	%rax, %rcx
	jmp	.LBB31_4
.LBB31_2:                               # %"$6"
	movq	(%rcx), %rcx
.LBB31_4:                               # %"$2"
	callq	funq
	testq	%rax, %rax
	leaq	SymTab+8(%rip), %rcx
	cmoveq	%rcx, %rax
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _getd;
	.scl	2;
	.type	32;
	.endef
	.globl	_getd                           # -- Begin function _getd
	.p2align	4, 0x90
_getd:                                  # @_getd
.seh_proc _getd
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	testb	$6, %sil
	jne	.LBB32_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB32_2
# %bb.3:                                # %"$5"
	movq	%rsi, %rcx
	callq	evList
	movq	%rax, %rsi
	jmp	.LBB32_4
.LBB32_2:                               # %"$6"
	movq	(%rsi), %rsi
.LBB32_4:                               # %"$2"
	movl	%esi, %eax
	andl	$14, %eax
	cmpl	$8, %eax
	jne	.LBB32_5
# %bb.6:                                # %"$8"
	movq	(%rsi), %rbx
	movq	%rbx, %rcx
	callq	funq
	testq	%rax, %rax
	je	.LBB32_8
# %bb.7:
	movq	%rbx, %rdi
	jmp	.LBB32_11
.LBB32_5:
	leaq	SymTab+8(%rip), %rdi
.LBB32_11:                              # %"$7"
	movq	%rdi, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
.LBB32_8:                               # %"$10"
	leaq	SymTab+8(%rip), %rdi
	cmpq	%rdi, %rbx
	jne	.LBB32_11
# %bb.9:                                # %"$13"
	movq	%rsi, %rcx
	callq	sharedLib
	testb	$1, %al
	je	.LBB32_11
# %bb.10:                               # %"$15"
	movq	(%rsi), %rdi
	jmp	.LBB32_11
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _all;
	.scl	2;
	.type	32;
	.endef
	.globl	_all                            # -- Begin function _all
	.p2align	4, 0x90
_all:                                   # @_all
.seh_proc _all
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rcx
	testb	$6, %cl
	jne	.LBB33_4
# %bb.1:                                # %"$3"
	testb	$8, %cl
	jne	.LBB33_2
# %bb.3:                                # %"$5"
	callq	evList
	movq	%rax, %rcx
	jmp	.LBB33_4
.LBB33_2:                               # %"$6"
	movq	(%rcx), %rcx
.LBB33_4:                               # %"$2"
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rcx
	jne	.LBB33_7
# %bb.5:                                # %"$9"
	leaq	SymTab+8(%rip), %rax
	movq	gcData(%rip), %rdi
	.p2align	4, 0x90
.LBB33_6:                               # %"$10"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rcx
	movq	8(%rdi), %rdi
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	(%rcx), %rsi
	movq	8(%rcx), %rcx
	movq	%rax, %rdx
	callq	consTree
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	consTree
	testb	$15, %dil
	je	.LBB33_6
.LBB33_25:                              # %"$7"
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
.LBB33_7:                               # %"$8"
	leaq	SymTab+280(%rip), %rdx
	cmpq	%rdx, %rcx
	jne	.LBB33_10
# %bb.8:                                # %"$15"
	movq	gcData+8(%rip), %rsi
	movq	gcData+16(%rip), %rcx
.LBB33_9:                               # %"$15"
	leaq	SymTab+8(%rip), %rdx
	callq	consTree
	movq	%rsi, %rcx
	movq	%rax, %rdx
	jmp	.LBB33_12
.LBB33_10:                              # %"$14"
	testb	$6, %cl
	je	.LBB33_13
# %bb.11:                               # %"$17"
	movq	($Extern)(%rip), %rcx
	leaq	SymTab+8(%rip), %rdx
.LBB33_12:                              # %"$17"
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	jmp	consTree                        # TAILCALL
.LBB33_13:                              # %"$16"
	testb	$8, %cl
	jne	.LBB33_14
# %bb.16:                               # %"$18"
	movq	(%rcx), %rdi
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rdi
	jne	.LBB33_20
# %bb.17:                               # %"$24"
	movq	gcData(%rip), %rdx
	movq	(%rdx), %rdx
	movq	(%rdx), %rdx
	cmpq	%rax, 8(%rcx)
	jne	.LBB33_19
# %bb.18:                               # %"$25"
	movq	(%rdx), %rax
	jmp	.LBB33_25
.LBB33_14:                              # %"$19"
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	testb	$15, %cl
	jne	.LBB33_25
# %bb.15:                               # %"$20"
	movq	(%rcx), %rsi
	movq	8(%rcx), %rcx
	jmp	.LBB33_9
.LBB33_20:                              # %"$23"
	cmpq	%rdx, %rdi
	jne	.LBB33_24
# %bb.21:                               # %"$29"
	cmpq	%rax, 8(%rcx)
	jne	.LBB33_23
# %bb.22:                               # %"$30"
	movq	gcData+8(%rip), %rax
	jmp	.LBB33_25
.LBB33_19:                              # %"$26"
	movq	8(%rdx), %rax
	jmp	.LBB33_25
.LBB33_24:                              # %"$28"
	movq	($Extern)(%rip), %rax
	jmp	.LBB33_25
.LBB33_23:                              # %"$31"
	movq	gcData+16(%rip), %rax
	jmp	.LBB33_25
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _symbols;
	.scl	2;
	.type	32;
	.endef
	.globl	_symbols                        # -- Begin function _symbols
	.p2align	4, 0x90
_symbols:                               # @_symbols
.seh_proc _symbols
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rax
	testb	$15, %al
	je	.LBB34_2
# %bb.1:                                # %"$2"
	movq	gcData(%rip), %rsi
	jmp	.LBB34_43
.LBB34_2:                               # %"$3"
	movq	%rcx, %r12
	movq	(%rax), %rdi
	movq	8(%rax), %rbx
	testb	$6, %dil
	jne	.LBB34_6
# %bb.3:                                # %"$6"
	testb	$8, %dil
	jne	.LBB34_4
# %bb.5:                                # %"$8"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdi
.LBB34_6:                               # %"$5"
	testb	$15, %dil
	je	.LBB34_7
.LBB34_24:                              # %"$11"
	movl	%edi, %eax
	andl	$14, %eax
	cmpl	$8, %eax
	jne	.LBB34_46
# %bb.25:                               # %"$38"
	movq	(%rdi), %rax
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB34_27
# %bb.26:                               # %"$38"
	cmpq	%rdi, %rax
	je	.LBB34_27
# %bb.30:                               # %"$41"
	testb	$15, %al
	jne	.LBB34_48
# %bb.31:                               # %"$48"
	leaq	SymTab+40(%rip), %rcx
	cmpq	%rcx, (%rax)
	je	.LBB34_32
.LBB34_48:                              # %"$49"
	subq	$32, %rsp
	movq	%r12, %rcx
	movq	%rdi, %rdx
	callq	symNspErr
.LBB34_27:                              # %"$40"
	cmpq	%rcx, %rdi
	jb	.LBB34_29
# %bb.28:                               # %"$40"
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, %rdi
	jbe	.LBB34_47
.LBB34_29:                              # %"$46"
	subq	$32, %rsp
	leaq	SymTab+8(%rip), %rcx
	movq	%rcx, %rdx
	callq	cons
	leaq	SymTab+40(%rip), %rcx
	movq	%rax, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, (%rdi)
.LBB34_32:                              # %"$42"
	subq	$32, %rsp
	leaq	SymTab+8(%rip), %rdx
	movq	%rdi, %rcx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %r14
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%r14, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r15, env(%rip)
	testb	$15, %bl
	jne	.LBB34_42
# %bb.33:                               # %"$52.preheader"
	leaq	SymTab+40(%rip), %r13
	leaq	SymTab+8(%rip), %rdi
	movq	%r14, %rsi
	.p2align	4, 0x90
.LBB34_34:                              # %"$52"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rbx), %rax
	movq	8(%rbx), %rbx
	testb	$6, %al
	jne	.LBB34_38
# %bb.35:                               # %"$55"
                                        #   in Loop: Header=BB34_34 Depth=1
	testb	$8, %al
	jne	.LBB34_36
# %bb.37:                               # %"$57"
                                        #   in Loop: Header=BB34_34 Depth=1
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB34_38
.LBB34_36:                              # %"$58"
                                        #   in Loop: Header=BB34_34 Depth=1
	movq	(%rax), %rax
	.p2align	4, 0x90
.LBB34_38:                              # %"$54"
                                        #   in Loop: Header=BB34_34 Depth=1
	movl	%eax, %ecx
	andl	$14, %ecx
	cmpl	$8, %ecx
	jne	.LBB34_49
# %bb.39:                               # %"$60"
                                        #   in Loop: Header=BB34_34 Depth=1
	movq	(%rax), %rcx
	testb	$15, %cl
	jne	.LBB34_50
# %bb.40:                               # %"$62"
                                        #   in Loop: Header=BB34_34 Depth=1
	cmpq	%r13, (%rcx)
	jne	.LBB34_50
# %bb.41:                               # %"$64"
                                        #   in Loop: Header=BB34_34 Depth=1
	subq	$32, %rsp
	movq	%rax, %rcx
	movq	%rdi, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, 8(%rsi)
	testb	$15, %bl
	movq	%rax, %rsi
	je	.LBB34_34
.LBB34_42:                              # %"$53"
	movq	gcData(%rip), %rsi
	movq	%r14, gcData(%rip)
	movq	8(%r15), %rax
	movq	%rax, env(%rip)
	jmp	.LBB34_43
.LBB34_4:                               # %"$9"
	movq	(%rdi), %rdi
	testb	$15, %dil
	jne	.LBB34_24
.LBB34_7:                               # %"$13.preheader"
	leaq	SymTab+40(%rip), %rax
	movq	%rdi, %rcx
	.p2align	4, 0x90
.LBB34_8:                               # %"$13"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rcx), %rdx
	movl	%edx, %esi
	andl	$14, %esi
	cmpl	$8, %esi
	jne	.LBB34_44
# %bb.9:                                # %"$15"
                                        #   in Loop: Header=BB34_8 Depth=1
	movq	(%rdx), %rsi
	testb	$15, %sil
	jne	.LBB34_45
# %bb.10:                               # %"$17"
                                        #   in Loop: Header=BB34_8 Depth=1
	cmpq	%rax, (%rsi)
	jne	.LBB34_45
# %bb.11:                               # %"$19"
                                        #   in Loop: Header=BB34_8 Depth=1
	movq	8(%rcx), %rcx
	testb	$15, %cl
	je	.LBB34_8
# %bb.12:                               # %"$21"
	testb	$15, %bl
	movq	gcData(%rip), %rsi
	je	.LBB34_14
# %bb.13:                               # %"$22"
	movq	%rdi, gcData(%rip)
	jmp	.LBB34_43
.LBB34_14:                              # %"$23"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%rsi, (%r14)
	movq	%r14, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r14, env(%rip)
	movq	%rdi, gcData(%rip)
	movq	(%rbx), %rcx
	movq	8(%rbx), %rdi
	jmp	.LBB34_15
	.p2align	4, 0x90
.LBB34_21:                              # %"$34"
                                        #   in Loop: Header=BB34_15 Depth=1
	movq	(%rdi), %rcx
	movq	8(%rdi), %rdi
.LBB34_15:                              # %"$23"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %dil
	jne	.LBB34_16
# %bb.19:                               # %"$26"
                                        #   in Loop: Header=BB34_15 Depth=1
	testb	$15, %cl
	jne	.LBB34_21
# %bb.20:                               # %"$35"
                                        #   in Loop: Header=BB34_15 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	jmp	.LBB34_21
.LBB34_16:                              # %"$28"
	testb	$6, %cl
	jne	.LBB34_23
# %bb.17:                               # %"$30"
	testb	$8, %cl
	jne	.LBB34_18
# %bb.22:                               # %"$32"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB34_23
.LBB34_18:                              # %"$33"
	movq	(%rcx), %rcx
.LBB34_23:                              # %"$27"
	movq	%rsi, gcData(%rip)
	movq	8(%r14), %rax
	movq	%rax, env(%rip)
	movq	%rcx, %rsi
.LBB34_43:                              # %"$4"
	movq	%rsi, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB34_45:                              # %"$18"
	subq	$32, %rsp
	movq	%r12, %rcx
	callq	symNspErr
.LBB34_50:                              # %"$63"
	subq	$32, %rsp
	movq	%r12, %rcx
	movq	%rax, %rdx
	callq	symNspErr
.LBB34_44:                              # %"$14"
	subq	$32, %rsp
	movq	%r12, %rcx
	callq	symErr
.LBB34_49:                              # %"$59"
	subq	$32, %rsp
	movq	%r12, %rcx
	movq	%rax, %rdx
	callq	symErr
.LBB34_46:                              # %"$37"
	subq	$32, %rsp
	movq	%r12, %rcx
	movq	%rdi, %rdx
	callq	symErr
.LBB34_47:                              # %"$45"
	subq	$32, %rsp
	movq	%r12, %rcx
	movq	%rdi, %rdx
	callq	protErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _intern;
	.scl	2;
	.type	32;
	.endef
	.globl	_intern                         # -- Begin function _intern
	.p2align	4, 0x90
_intern:                                # @_intern
.seh_proc _intern
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rdi
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %r14
	testb	$6, %sil
	jne	.LBB35_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB35_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB35_4
.LBB35_2:                               # %"$6"
	movq	(%rsi), %rsi
.LBB35_4:                               # %"$2"
	movl	%esi, %eax
	andl	$14, %eax
	cmpl	$8, %eax
	jne	.LBB35_20
# %bb.5:                                # %"$8"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rsi, (%rbx)
	movq	%rbx, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rbx, env(%rip)
	movq	-8(%rsi), %rdi
	leaq	SymTab+8(%rip), %rax
	testb	$8, %dil
	jne	.LBB35_19
	.p2align	4, 0x90
# %bb.7:                                # %"$13"
	testb	$6, %dil
	jne	.LBB35_8
.LBB35_6:                               # %"$13"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rdi), %rdi
	testb	$6, %dil
	je	.LBB35_6
.LBB35_8:                               # %"$14"
	cmpq	$2, %rdi
	je	.LBB35_19
# %bb.9:                                # %"$15"
	movq	(%r14), %rax
	testb	$6, %al
	jne	.LBB35_13
# %bb.10:                               # %"$18"
	testb	$8, %al
	jne	.LBB35_11
# %bb.12:                               # %"$20"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB35_13
.LBB35_11:                              # %"$21"
	movq	(%rax), %rax
.LBB35_13:                              # %"$17"
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	jne	.LBB35_15
# %bb.14:                               # %"$22"
	movq	gcData(%rip), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rax
	movq	(%rcx), %rcx
	movq	8(%rcx), %r9
	subq	$48, %rsp
	movq	%rax, 32(%rsp)
	jmp	.LBB35_18
.LBB35_15:                              # %"$23"
	leaq	SymTab+280(%rip), %rdx
	cmpq	%rdx, %rax
	jne	.LBB35_17
# %bb.16:                               # %"$25"
	movq	gcData(%rip), %rax
	movq	(%rax), %rax
.LBB35_17:                              # %"$27"
	movq	(%rax), %rax
	movq	8(%rax), %r9
	subq	$48, %rsp
	movq	%rcx, 32(%rsp)
.LBB35_18:                              # %"$9"
	movb	$0, 40(%rsp)
	movq	%rsi, %rcx
	xorl	%edx, %edx
	movq	%rdi, %r8
	callq	intern
	addq	$48, %rsp
.LBB35_19:                              # %"$9"
	movq	8(%rbx), %rcx
	movq	%rcx, env(%rip)
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	retq
.LBB35_20:                              # %"$7"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	symErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _hide;
	.scl	2;
	.type	32;
	.endef
	.globl	_hide                           # -- Begin function _hide
	.p2align	4, 0x90
_hide:                                  # @_hide
# %bb.0:                                # %"$1"
	leaq	SymTab+8(%rip), %rax
	movq	%rax, gcData+16(%rip)
	movq	%rax, gcData+8(%rip)
	retq
                                        # -- End function
	.def	 _boxQ;
	.scl	2;
	.type	32;
	.endef
	.globl	_boxQ                           # -- Begin function _boxQ
	.p2align	4, 0x90
_boxQ:                                  # @_boxQ
.seh_proc _boxQ
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB37_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB37_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB37_4
.LBB37_2:                               # %"$6"
	movq	(%rax), %rax
.LBB37_4:                               # %"$2"
	movl	%eax, %edx
	andl	$14, %edx
	leaq	SymTab+8(%rip), %rcx
	cmpl	$8, %edx
	jne	.LBB37_9
# %bb.5:                                # %"$8"
	movq	-8(%rax), %rdx
	testb	$8, %dl
	jne	.LBB37_9
	.p2align	4, 0x90
# %bb.7:                                # %"$11"
	testb	$6, %dl
	jne	.LBB37_8
.LBB37_6:                               # %"$11"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rdx), %rdx
	testb	$6, %dl
	je	.LBB37_6
.LBB37_8:                               # %"$12"
	cmpq	$2, %rdx
	leaq	SymTab+8(%rip), %rcx
	cmoveq	%rax, %rcx
.LBB37_9:                               # %"$7"
	movq	%rcx, %rax
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _strQ;
	.scl	2;
	.type	32;
	.endef
	.globl	_strQ                           # -- Begin function _strQ
	.p2align	4, 0x90
_strQ:                                  # @_strQ
.seh_proc _strQ
# %bb.0:                                # %"$1"
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	testb	$6, %sil
	jne	.LBB38_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB38_2
# %bb.3:                                # %"$5"
	movq	%rsi, %rcx
	callq	evList
	movq	%rax, %rsi
	jmp	.LBB38_4
.LBB38_2:                               # %"$6"
	movq	(%rsi), %rsi
.LBB38_4:                               # %"$2"
	movl	%esi, %eax
	andl	$14, %eax
	leaq	SymTab+8(%rip), %r14
	cmpl	$8, %eax
	jne	.LBB38_13
# %bb.5:                                # %"$8"
	movq	-8(%rsi), %rbx
	testb	$8, %bl
	jne	.LBB38_13
	.p2align	4, 0x90
# %bb.7:                                # %"$13"
	testb	$6, %bl
	jne	.LBB38_8
.LBB38_6:                               # %"$13"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rbx), %rbx
	testb	$6, %bl
	je	.LBB38_6
.LBB38_8:                               # %"$14"
	movq	gcData(%rip), %rdi
	testb	$15, %dil
	jne	.LBB38_12
	.p2align	4, 0x90
.LBB38_10:                              # %"$3.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rdx
	movq	%rbx, %rcx
	callq	isIntern
	cmpq	%rsi, %rax
	je	.LBB38_13
# %bb.11:                               # %"$6.i"
                                        #   in Loop: Header=BB38_10 Depth=1
	movq	8(%rdi), %rdi
	testb	$15, %dil
	je	.LBB38_10
.LBB38_12:
	movq	%rsi, %r14
.LBB38_13:                              # %"$7"
	movq	%r14, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _zap;
	.scl	2;
	.type	32;
	.endef
	.globl	_zap                            # -- Begin function _zap
	.p2align	4, 0x90
_zap:                                   # @_zap
.seh_proc _zap
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rcx, %rdi
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	testb	$6, %sil
	jne	.LBB39_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB39_2
# %bb.3:                                # %"$5"
	movq	%rsi, %rcx
	callq	evList
	movq	%rax, %rsi
	jmp	.LBB39_4
.LBB39_2:                               # %"$6"
	movq	(%rsi), %rsi
.LBB39_4:                               # %"$2"
	movl	%esi, %eax
	andl	$14, %eax
	cmpl	$8, %eax
	jne	.LBB39_15
# %bb.5:                                # %"$8"
	movq	-8(%rsi), %rdx
	testb	$8, %dl
	jne	.LBB39_6
	.p2align	4, 0x90
# %bb.12:                               # %"$13"
	testb	$6, %dl
	jne	.LBB39_13
.LBB39_11:                              # %"$13"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rdx), %rdx
	testb	$6, %dl
	je	.LBB39_11
.LBB39_13:                              # %"$14"
	movq	gcData(%rip), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %r8
	movq	%rsi, %rcx
	callq	unintern
	jmp	.LBB39_14
.LBB39_6:                               # %"$9"
	testb	$6, %dl
	jne	.LBB39_10
# %bb.7:                                # %"$2.i"
	andq	$-9, %rdx
	.p2align	4, 0x90
.LBB39_8:                               # %"$4.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rdx), %rdx
	testb	$6, %dl
	je	.LBB39_8
# %bb.9:                                # %"$6.i"
	orq	$8, %rdx
.LBB39_10:                              # %dbZap.exit
	shlq	$2, %rdx
	movl	$3, %eax
	shldq	$62, %rdx, %rax
	movq	%rax, -8(%rsi)
	leaq	SymTab+8(%rip), %rax
	movq	%rax, (%rsi)
.LBB39_14:                              # %"$11"
	movq	%rsi, %rax
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
.LBB39_15:                              # %"$7"
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	symErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _chop;
	.scl	2;
	.type	32;
	.endef
	.globl	_chop                           # -- Begin function _chop
	.p2align	4, 0x90
_chop:                                  # @_chop
.seh_proc _chop
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rcx
	testb	$6, %cl
	jne	.LBB40_4
# %bb.1:                                # %"$3"
	testb	$8, %cl
	jne	.LBB40_3
# %bb.2:                                # %"$5"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB40_4
.LBB40_3:                               # %"$6"
	movq	(%rcx), %rcx
.LBB40_4:                               # %"$2"
	leaq	SymTab+8(%rip), %r12
	cmpq	%r12, %rcx
	je	.LBB40_16
# %bb.5:                                # %"$2"
	movl	%ecx, %eax
	andl	$15, %eax
	testq	%rax, %rax
	je	.LBB40_16
# %bb.6:                                # %"$10"
	subq	$32, %rsp
	callq	xSym
	addq	$32, %rsp
	movq	-8(%rax), %rsi
	testb	$8, %sil
	jne	.LBB40_17
# %bb.7:                                # %"$18.preheader"
	testb	$6, %sil
	movq	%rsi, %rcx
	jne	.LBB40_10
# %bb.8:
	movq	%rsi, %rcx
	.p2align	4, 0x90
.LBB40_9:                               # %"$19"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rcx
	testb	$6, %cl
	je	.LBB40_9
.LBB40_10:                              # %"$20"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	$0, (%r14)
	movq	%rcx, 8(%r14)
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	symChar
	addq	$32, %rsp
	testl	%eax, %eax
	je	.LBB40_36
# %bb.11:                               # %"$21"
	movl	%eax, %edx
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%rsi, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r15, env(%rip)
	cmpl	$127, %edx
	jg	.LBB40_20
# %bb.12:                               # %"$4.i"
	movslq	%edx, %rcx
.LBB40_13:                              # %"$2.i"
	shlq	$4, %rcx
	orq	$2, %rcx
	cmpq	$2, %rcx
	jne	.LBB40_21
# %bb.14:
	leaq	SymTab+8(%rip), %rcx
	jmp	.LBB40_22
.LBB40_16:
	movq	%rcx, %r12
	jmp	.LBB40_36
.LBB40_17:                              # %"$12"
	movq	%rsi, %rcx
	andq	$-9, %rcx
	testb	$6, %sil
	jne	.LBB40_19
	.p2align	4, 0x90
.LBB40_18:                              # %"$16"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rcx
	testb	$6, %cl
	je	.LBB40_18
.LBB40_19:                              # %"$17"
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	chopExtNm                       # TAILCALL
.LBB40_20:                              # %"$3.i"
	movl	$4082, %ecx                     # imm = 0xFF2
	cmpl	$1114112, %edx                  # imm = 0x110000
	jne	.LBB40_37
.LBB40_21:                              # %"$3.i.i"
	subq	$32, %rsp
	xorl	%edx, %edx
	callq	consSym
	addq	$32, %rsp
	movq	%rax, %rcx
.LBB40_22:                              # %mkChar.exit
	subq	$32, %rsp
	leaq	SymTab+8(%rip), %rbx
	movq	%rbx, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %r12
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%r12, (%rax)
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%rcx, (%rdx)
	movq	%rax, env(%rip)
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	symChar
	addq	$32, %rsp
                                        # kill: def $eax killed $eax def $rax
	testl	%eax, %eax
	je	.LBB40_35
# %bb.23:                               # %"$25.preheader"
	movq	%r12, %rdi
	jmp	.LBB40_26
	.p2align	4, 0x90
.LBB40_24:                              # %"$3.i.i18"
                                        #   in Loop: Header=BB40_26 Depth=1
	subq	$32, %rsp
	xorl	%edx, %edx
	callq	consSym
	addq	$32, %rsp
.LBB40_25:                              # %mkChar.exit19
                                        #   in Loop: Header=BB40_26 Depth=1
	subq	$32, %rsp
	movq	%rax, %rcx
	movq	%rbx, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rsi
	movq	%rax, 8(%rdi)
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	symChar
	addq	$32, %rsp
                                        # kill: def $eax killed $eax def $rax
	testl	%eax, %eax
	movq	%rsi, %rdi
	je	.LBB40_35
.LBB40_26:                              # %"$25"
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$127, %eax
	jg	.LBB40_28
# %bb.27:                               # %"$4.i10"
                                        #   in Loop: Header=BB40_26 Depth=1
	movslq	%eax, %rcx
	jmp	.LBB40_34
	.p2align	4, 0x90
.LBB40_28:                              # %"$3.i11"
                                        #   in Loop: Header=BB40_26 Depth=1
	movl	$4082, %ecx                     # imm = 0xFF2
	cmpl	$1114112, %eax                  # imm = 0x110000
	je	.LBB40_24
# %bb.29:                               # %"$5.i12"
                                        #   in Loop: Header=BB40_26 Depth=1
	movl	%eax, %ecx
	cmpl	$2047, %eax                     # imm = 0x7FF
	jg	.LBB40_31
# %bb.30:                               # %"$8.i13"
                                        #   in Loop: Header=BB40_26 Depth=1
	shrl	$6, %ecx
	andl	$63, %eax
	shll	$8, %eax
	orl	%ecx, %eax
	orl	$32960, %eax                    # imm = 0x80C0
	movq	%rax, %rcx
	jmp	.LBB40_34
.LBB40_31:                              # %"$7.i14"
                                        #   in Loop: Header=BB40_26 Depth=1
	cmpl	$65535, %eax                    # imm = 0xFFFF
	jg	.LBB40_33
# %bb.32:                               # %"$10.i15"
                                        #   in Loop: Header=BB40_26 Depth=1
	shrl	$12, %ecx
	leal	(,%rax,4), %edx
	andl	$16128, %edx                    # imm = 0x3F00
	andl	$63, %eax
	shll	$16, %eax
	orl	%edx, %eax
	orl	%ecx, %eax
	orl	$8421600, %eax                  # imm = 0x8080E0
	movq	%rax, %rcx
	jmp	.LBB40_34
.LBB40_33:                              # %"$9.i16"
                                        #   in Loop: Header=BB40_26 Depth=1
	shrl	$18, %ecx
	andl	$7, %ecx
	movl	%eax, %edx
	shrl	$4, %edx
	andl	$16128, %edx                    # imm = 0x3F00
	orl	%ecx, %edx
	movl	%eax, %ecx
	shll	$10, %ecx
	andl	$4128768, %ecx                  # imm = 0x3F0000
	orl	%edx, %ecx
	andl	$63, %eax
	shll	$24, %eax
	leal	-2139062032(%rax,%rcx), %ecx
	.p2align	4, 0x90
.LBB40_34:                              # %"$2.i17"
                                        #   in Loop: Header=BB40_26 Depth=1
	shlq	$4, %rcx
	orq	$2, %rcx
	cmpq	$2, %rcx
	movq	%rbx, %rax
	jne	.LBB40_24
	jmp	.LBB40_25
.LBB40_35:                              # %"$26"
	movq	8(%r15), %rax
	movq	%rax, env(%rip)
.LBB40_36:                              # %"$11"
	movq	%r12, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB40_37:                              # %"$5.i"
	movl	%edx, %eax
	cmpl	$2047, %edx                     # imm = 0x7FF
	jg	.LBB40_39
# %bb.38:                               # %"$8.i"
	shrl	$6, %eax
	andl	$63, %edx
	shll	$8, %edx
	orl	%eax, %edx
	orl	$32960, %edx                    # imm = 0x80C0
	movq	%rdx, %rcx
	jmp	.LBB40_13
.LBB40_39:                              # %"$7.i"
	cmpl	$65535, %edx                    # imm = 0xFFFF
	jg	.LBB40_41
# %bb.40:                               # %"$10.i"
	shrl	$12, %eax
	leal	(,%rdx,4), %ecx
	andl	$16128, %ecx                    # imm = 0x3F00
	andl	$63, %edx
	shll	$16, %edx
	orl	%ecx, %edx
	orl	%eax, %edx
	orl	$8421600, %edx                  # imm = 0x8080E0
	movq	%rdx, %rcx
	jmp	.LBB40_13
.LBB40_41:                              # %"$9.i"
	shrl	$18, %eax
	andl	$7, %eax
	movl	%edx, %ecx
	shrl	$4, %ecx
	andl	$16128, %ecx                    # imm = 0x3F00
	orl	%eax, %ecx
	movl	%edx, %eax
	shll	$10, %eax
	andl	$4128768, %eax                  # imm = 0x3F0000
	orl	%ecx, %eax
	andl	$63, %edx
	shll	$24, %edx
	leal	-2139062032(%rdx,%rax), %ecx
	jmp	.LBB40_13
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _pack;
	.scl	2;
	.type	32;
	.endef
	.globl	_pack                           # -- Begin function _pack
	.p2align	4, 0x90
_pack:                                  # @_pack
.seh_proc _pack
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$80, %rsp
	.seh_stackalloc 80
	.seh_endprologue
	movq	env(%rip), %rax
	movq	$10, 32(%rsp)
	movq	%rax, 40(%rsp)
	leaq	32(%rsp), %rax
	movq	%rax, env(%rip)
	movq	8(%rcx), %rbx
	movq	$4, 48(%rsp)
	leaq	64(%rsp), %rcx
	movq	$2, 64(%rsp)
	movq	%rax, 72(%rsp)
	movq	%rcx, env(%rip)
	leaq	SymTab+8(%rip), %rsi
	testb	$15, %bl
	jne	.LBB41_9
# %bb.1:                                # %"$3.preheader"
	leaq	48(%rsp), %rdi
	jmp	.LBB41_2
.LBB41_5:                               # %"$8"
                                        #   in Loop: Header=BB41_2 Depth=1
	callq	evList
	movq	%rax, %rcx
	.p2align	4, 0x90
.LBB41_6:                               # %"$5"
                                        #   in Loop: Header=BB41_2 Depth=1
	movq	%rcx, 32(%rsp)
	movq	%rdi, %rdx
	callq	pack
	testb	$15, %bl
	jne	.LBB41_7
.LBB41_2:                               # %"$3"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rbx), %rcx
	movq	8(%rbx), %rbx
	testb	$6, %cl
	jne	.LBB41_6
# %bb.3:                                # %"$6"
                                        #   in Loop: Header=BB41_2 Depth=1
	testb	$8, %cl
	je	.LBB41_5
# %bb.4:                                # %"$9"
                                        #   in Loop: Header=BB41_2 Depth=1
	movq	(%rcx), %rcx
	jmp	.LBB41_6
.LBB41_7:                               # %"$4"
	movq	64(%rsp), %rcx
	cmpq	$2, %rcx
	je	.LBB41_9
# %bb.8:                                # %"$3.i"
	xorl	%edx, %edx
	callq	consSym
	movq	%rax, %rsi
.LBB41_9:                               # %consStr.exit
	movq	40(%rsp), %rax
	movq	%rax, env(%rip)
	movq	%rsi, %rax
	addq	$80, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _glue;
	.scl	2;
	.type	32;
	.endef
	.globl	_glue                           # -- Begin function _glue
	.p2align	4, 0x90
_glue:                                  # @_glue
.seh_proc _glue
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rdi
	testb	$6, %sil
	jne	.LBB42_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB42_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB42_4
.LBB42_2:                               # %"$6"
	movq	(%rsi), %rsi
.LBB42_4:                               # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%rsi, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r15, env(%rip)
	movq	(%rdi), %rdx
	testb	$6, %dl
	jne	.LBB42_8
# %bb.5:                                # %"$8"
	testb	$8, %dl
	jne	.LBB42_6
# %bb.7:                                # %"$10"
	subq	$32, %rsp
	movq	%rdx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdx
.LBB42_8:                               # %"$7"
	testb	$15, %dl
	jne	.LBB42_15
.LBB42_9:                               # %"$13"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rdx, (%rbx)
	movq	%rbx, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	$4, (%rdi)
	leaq	16(%rdi), %r14
	movq	$2, 16(%rdi)
	movq	%rbx, 24(%rdi)
	movq	%r14, env(%rip)
	movq	(%rdx), %rcx
	movq	8(%rdx), %rbx
	.p2align	4, 0x90
.LBB42_11:                              # %"$16"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	movq	%rdi, %rdx
	callq	pack
	addq	$32, %rsp
	testb	$15, %bl
	jne	.LBB42_12
# %bb.10:                               # %"$16"
                                        #   in Loop: Header=BB42_11 Depth=1
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rdi, %rdx
	callq	pack
	addq	$32, %rsp
	movq	(%rbx), %rcx
	movq	8(%rbx), %rbx
	jmp	.LBB42_11
.LBB42_12:                              # %"$17"
	movq	(%r14), %rcx
	cmpq	$2, %rcx
	jne	.LBB42_14
# %bb.13:
	leaq	SymTab+8(%rip), %rdx
	jmp	.LBB42_15
.LBB42_6:                               # %"$11"
	movq	(%rdx), %rdx
	testb	$15, %dl
	jne	.LBB42_15
	jmp	.LBB42_9
.LBB42_14:                              # %"$3.i"
	subq	$32, %rsp
	xorl	%edx, %edx
	callq	consSym
	addq	$32, %rsp
	movq	%rax, %rdx
.LBB42_15:                              # %"$14"
	movq	8(%r15), %rax
	movq	%rax, env(%rip)
	movq	%rdx, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _text;
	.scl	2;
	.type	32;
	.endef
	.globl	_text                           # -- Begin function _text
	.p2align	4, 0x90
_text:                                  # @_text
.seh_proc _text
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$24, %rsp
	.seh_stackalloc 24
	leaq	16(%rsp), %rbp
	.seh_setframe %rbp, 16
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rbx
	movq	(%rbx), %rcx
	testb	$6, %cl
	jne	.LBB43_4
# %bb.1:                                # %"$3.i"
	testb	$8, %cl
	jne	.LBB43_2
# %bb.3:                                # %"$5.i"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB43_4
.LBB43_2:                               # %"$6.i"
	movq	(%rcx), %rcx
.LBB43_4:                               # %evSym.exit
	subq	$32, %rsp
	callq	xSym
	addq	$32, %rsp
	movq	%rax, %rdx
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rdx
	je	.LBB43_57
# %bb.5:                                # %"$3.i13"
	movq	-8(%rdx), %rcx
	testb	$8, %cl
	jne	.LBB43_6
	.p2align	4, 0x90
# %bb.8:                                # %"$8.i"
	testb	$6, %cl
	jne	.LBB43_9
.LBB43_7:                               # %"$8.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rcx
	testb	$6, %cl
	je	.LBB43_7
.LBB43_9:                               # %xName.exit
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r13
	movq	$0, (%r13)
	leaq	8(%r13), %r15
	movq	%rcx, 8(%r13)
	movq	env(%rip), %rax
	movq	%rax, 16(%r13)
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r12
	movq	$4, (%r12)
	leaq	16(%r12), %rsi
	movq	$2, 16(%r12)
	movq	%r15, 24(%r12)
	movq	%rsi, env(%rip)
	movq	8(%rbx), %rdi
	testb	$15, %dil
	movq	%rsi, -8(%rbp)                  # 8-byte Spill
	je	.LBB43_16
# %bb.10:
	xorl	%ebx, %ebx
.LBB43_11:                              # %"$13.preheader"
	leaq	1(%rbx), %rax
	movq	%rax, (%rbp)                    # 8-byte Spill
	jmp	.LBB43_12
.LBB43_36:                              # %"$5.i33"
                                        #   in Loop: Header=BB43_12 Depth=1
	movl	$64, %eax
	shlq	%cl, %rax
	orq	%rax, %rdi
	movq	%rdi, 16(%r12)
.LBB43_37:                              # %"$13"
                                        #   in Loop: Header=BB43_12 Depth=1
	addq	$8, %rcx
	movq	%rcx, (%r12)
	.p2align	4, 0x90
.LBB43_12:                              # %"$13"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_51 Depth 2
	movq	(%r13), %rcx
	testq	%rcx, %rcx
	jne	.LBB43_24
# %bb.13:                               # %"$2.i"
                                        #   in Loop: Header=BB43_12 Depth=1
	movq	(%r15), %rcx
	cmpq	$2, %rcx
	je	.LBB43_53
# %bb.14:                               # %"$5.i18"
                                        #   in Loop: Header=BB43_12 Depth=1
	testb	$2, %cl
	jne	.LBB43_15
# %bb.22:                               # %"$7.i"
                                        #   in Loop: Header=BB43_12 Depth=1
	movq	-4(%rcx), %rdx
	movq	%rdx, (%r13)
	movq	4(%rcx), %rax
	movq	%rdx, %rcx
	jmp	.LBB43_23
.LBB43_15:                              # %"$8.i19"
                                        #   in Loop: Header=BB43_12 Depth=1
	shrq	$4, %rcx
	movl	$2, %eax
.LBB43_23:                              # %symByte.exit.sink.split
                                        #   in Loop: Header=BB43_12 Depth=1
	movq	%rax, (%r15)
.LBB43_24:                              # %symByte.exit
                                        #   in Loop: Header=BB43_12 Depth=1
	movq	%rcx, %rax
	shrq	$8, %rax
	movq	%rax, (%r13)
	cmpb	$64, %cl
	je	.LBB43_27
# %bb.25:                               # %symByte.exit
                                        #   in Loop: Header=BB43_12 Depth=1
	testb	%cl, %cl
	je	.LBB43_53
# %bb.26:                               # %"$18"
                                        #   in Loop: Header=BB43_12 Depth=1
	subq	$32, %rsp
                                        # kill: def $cl killed $cl killed $rcx
	movq	%r12, %rdx
	callq	byteSym
	addq	$32, %rsp
	jmp	.LBB43_12
	.p2align	4, 0x90
.LBB43_27:                              # %"$17"
                                        #   in Loop: Header=BB43_12 Depth=1
	testq	%rax, %rax
	jne	.LBB43_33
# %bb.28:                               # %"$2.i22"
                                        #   in Loop: Header=BB43_12 Depth=1
	movq	(%r15), %rax
	cmpq	$2, %rax
	je	.LBB43_12
# %bb.29:                               # %"$5.i25"
                                        #   in Loop: Header=BB43_12 Depth=1
	testb	$2, %al
	jne	.LBB43_30
# %bb.31:                               # %"$7.i27"
                                        #   in Loop: Header=BB43_12 Depth=1
	movq	-4(%rax), %rdx
	movq	%rdx, (%r13)
	movq	4(%rax), %rcx
	movq	%rdx, %rax
	jmp	.LBB43_32
.LBB43_30:                              # %"$8.i26"
                                        #   in Loop: Header=BB43_12 Depth=1
	shrq	$4, %rax
	movl	$2, %ecx
.LBB43_32:                              # %symByte.exit29.sink.split
                                        #   in Loop: Header=BB43_12 Depth=1
	movq	%rcx, (%r15)
.LBB43_33:                              # %symByte.exit29
                                        #   in Loop: Header=BB43_12 Depth=1
	movq	%rax, %rcx
	shrq	$8, %rcx
	movq	%rcx, (%r13)
	cmpb	$64, %al
	jne	.LBB43_46
# %bb.34:                               # %"$20"
                                        #   in Loop: Header=BB43_12 Depth=1
	movq	(%r12), %rcx
	movq	16(%r12), %rdi
	testb	$2, %dil
	jne	.LBB43_35
# %bb.41:                               # %"$3.i35"
                                        #   in Loop: Header=BB43_12 Depth=1
	movq	8(%r12), %rdi
	movq	4(%rdi), %r14
	cmpq	$59, %rcx
	ja	.LBB43_43
# %bb.42:                               # %"$8.i36"
                                        #   in Loop: Header=BB43_12 Depth=1
	movl	$64, %eax
	shlq	%cl, %rax
	orq	%rax, %r14
	movq	%r14, 4(%rdi)
	jmp	.LBB43_37
.LBB43_46:                              # %"$19"
                                        #   in Loop: Header=BB43_12 Depth=1
	leal	-48(%rax), %ecx
	testb	%cl, %cl
	jle	.LBB43_12
# %bb.47:                               # %"$22"
                                        #   in Loop: Header=BB43_12 Depth=1
	addb	$-55, %al
	cmpb	$9, %cl
	movzbl	%cl, %ecx
	movzbl	%al, %eax
	cmovbel	%ecx, %eax
	movzbl	%al, %eax
	movq	%rbx, %rcx
	subq	%rax, %rcx
	js	.LBB43_12
# %bb.48:                               # %"$27.preheader"
                                        #   in Loop: Header=BB43_12 Depth=1
	testq	%rcx, %rcx
	je	.LBB43_49
# %bb.50:                               # %"$28.preheader"
                                        #   in Loop: Header=BB43_12 Depth=1
	movq	(%rbp), %rcx                    # 8-byte Reload
	subq	%rax, %rcx
	movq	%rsi, %rax
	.p2align	4, 0x90
.LBB43_51:                              # %"$28"
                                        #   Parent Loop BB43_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rax), %rax
	decq	%rcx
	cmpq	$1, %rcx
	jg	.LBB43_51
	jmp	.LBB43_52
.LBB43_35:                              # %"$2.i32"
                                        #   in Loop: Header=BB43_12 Depth=1
	cmpq	$59, %rcx
	jbe	.LBB43_36
# %bb.38:                               # %"$6.i34"
                                        #   in Loop: Header=BB43_12 Depth=1
	shrq	$4, %rdi
	movabsq	$4611686018427387904, %rax      # imm = 0x4000000000000000
	orq	%rax, %rdi
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	jne	.LBB43_40
# %bb.39:                               # %"$2.i.i"
                                        #   in Loop: Header=BB43_12 Depth=1
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rax
.LBB43_40:                              # %boxNum.exit.i
                                        #   in Loop: Header=BB43_12 Depth=1
	movq	(%rax), %rcx
	movq	%rcx, ($Avail)(%rip)
	movq	%rdi, (%rax)
	movq	$2, 8(%rax)
	addq	$4, %rax
	movq	%rax, 8(%r12)
	movq	%rax, 16(%r12)
	movq	$4, (%r12)
	jmp	.LBB43_12
.LBB43_43:                              # %"$9.i"
                                        #   in Loop: Header=BB43_12 Depth=1
	shrq	$4, %r14
	movabsq	$4611686018427387904, %rax      # imm = 0x4000000000000000
	orq	%rax, %r14
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	jne	.LBB43_45
# %bb.44:                               # %"$2.i2.i"
                                        #   in Loop: Header=BB43_12 Depth=1
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rax
.LBB43_45:                              # %boxNum.exit3.i
                                        #   in Loop: Header=BB43_12 Depth=1
	movq	(%rax), %rcx
	movq	%rcx, ($Avail)(%rip)
	movq	%r14, (%rax)
	movq	$2, 8(%rax)
	addq	$4, %rax
	movq	%rax, 4(%rdi)
	movq	%rax, 8(%r12)
	movq	$4, (%r12)
	jmp	.LBB43_12
.LBB43_49:                              #   in Loop: Header=BB43_12 Depth=1
	movq	%rsi, %rax
.LBB43_52:                              # %"$29"
                                        #   in Loop: Header=BB43_12 Depth=1
	movq	(%rax), %rcx
	subq	$32, %rsp
	movq	%r12, %rdx
	callq	pack
	addq	$32, %rsp
	jmp	.LBB43_12
.LBB43_53:                              # %"$15"
	movq	-8(%rbp), %rax                  # 8-byte Reload
	movq	(%rax), %rcx
	cmpq	$2, %rcx
	jne	.LBB43_55
# %bb.54:
	leaq	SymTab+8(%rip), %rax
	jmp	.LBB43_56
.LBB43_55:                              # %"$3.i30"
	subq	$32, %rsp
	xorl	%edx, %edx
	callq	consSym
	addq	$32, %rsp
.LBB43_56:                              # %consStr.exit
	movq	16(%r13), %rcx
	movq	%rcx, env(%rip)
.LBB43_57:                              # %"$4"
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB43_16:                              # %"$6.preheader"
	xorl	%ebx, %ebx
	movq	%rsi, %rdx
	jmp	.LBB43_17
.LBB43_20:                              # %"$11"
                                        #   in Loop: Header=BB43_17 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	movq	env(%rip), %rdx
	.p2align	4, 0x90
.LBB43_21:                              # %"$8"
                                        #   in Loop: Header=BB43_17 Depth=1
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rcx, (%rsi)
	movq	%rdx, 8(%rsi)
	movq	%rsi, env(%rip)
	incq	%rbx
	movq	8(%rdi), %rdi
	testb	$15, %dil
	movq	%rsi, %rdx
	jne	.LBB43_11
.LBB43_17:                              # %"$6"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rcx
	testb	$6, %cl
	jne	.LBB43_21
# %bb.18:                               # %"$9"
                                        #   in Loop: Header=BB43_17 Depth=1
	testb	$8, %cl
	je	.LBB43_20
# %bb.19:                               # %"$12"
                                        #   in Loop: Header=BB43_17 Depth=1
	movq	(%rcx), %rcx
	jmp	.LBB43_21
.LBB43_6:                               # %"$6.i14"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	nameErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _preQ;
	.scl	2;
	.type	32;
	.endef
	.globl	_preQ                           # -- Begin function _preQ
	.p2align	4, 0x90
_preQ:                                  # @_preQ
.seh_proc _preQ
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %r14
	movq	8(%rcx), %rsi
	movq	(%rsi), %rcx
	testb	$6, %cl
	jne	.LBB44_4
# %bb.1:                                # %"$3.i"
	testb	$8, %cl
	jne	.LBB44_2
# %bb.3:                                # %"$5.i"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB44_4
.LBB44_2:                               # %"$6.i"
	movq	(%rcx), %rcx
.LBB44_4:                               # %evSym.exit
	subq	$32, %rsp
	callq	xSym
	addq	$32, %rsp
	movq	%rax, %rdi
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rdi, (%rbx)
	movq	%rbx, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rbx, env(%rip)
	movq	8(%rsi), %rax
	movq	(%rax), %rcx
	testb	$6, %cl
	jne	.LBB44_8
# %bb.5:                                # %"$3.i6"
	testb	$8, %cl
	jne	.LBB44_6
# %bb.7:                                # %"$5.i8"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB44_8
.LBB44_6:                               # %"$6.i7"
	movq	(%rcx), %rcx
.LBB44_8:                               # %evSym.exit9
	subq	$32, %rsp
	callq	xSym
	addq	$32, %rsp
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rdi
	je	.LBB44_41
# %bb.9:                                # %"$3.i11"
	movq	-8(%rdi), %rdx
	testb	$8, %dl
	jne	.LBB44_10
	.p2align	4, 0x90
# %bb.12:                               # %"$8.i"
	testb	$6, %dl
	jne	.LBB44_13
.LBB44_11:                              # %"$8.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rdx), %rdx
	testb	$6, %dl
	je	.LBB44_11
.LBB44_13:                              # %xName.exit
	cmpq	$2, %rdx
	je	.LBB44_41
# %bb.14:                               # %"$5"
	cmpq	%rcx, %rax
	je	.LBB44_40
# %bb.15:                               # %"$3.i15"
	movq	-8(%rax), %rdi
	testb	$8, %dil
	jne	.LBB44_16
	.p2align	4, 0x90
# %bb.18:                               # %"$8.i20"
	testb	$6, %dil
	jne	.LBB44_19
.LBB44_17:                              # %"$8.i20"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rdi), %rdi
	testb	$6, %dil
	je	.LBB44_17
.LBB44_19:                              # %"$2.i"
	cmpq	$2, %rdi
	je	.LBB44_40
# %bb.20:                               # %"$5.i24"
	testb	$2, %dil
	jne	.LBB44_21
# %bb.22:                               # %"$7.i"
	movq	4(%rdi), %r8
	movq	-4(%rdi), %rdi
	testb	%dil, %dil
	jne	.LBB44_24
	jmp	.LBB44_40
.LBB44_21:                              # %"$8.i25"
	shrq	$4, %rdi
	movl	$2, %r8d
	testb	%dil, %dil
	je	.LBB44_40
.LBB44_24:                              # %"$5.i.i"
	testb	$2, %dl
	jne	.LBB44_25
# %bb.26:                               # %"$7.i.i"
	movq	4(%rdx), %rsi
	movq	-4(%rdx), %rdx
	jmp	.LBB44_27
.LBB44_25:                              # %"$8.i.i"
	shrq	$4, %rdx
	movl	$2, %esi
	jmp	.LBB44_27
.LBB44_38:                              # %"$7.i8.i"
                                        #   in Loop: Header=BB44_27 Depth=1
	movq	-4(%r8), %rdi
	movq	4(%r8), %r8
	.p2align	4, 0x90
.LBB44_39:                              # %symByte.exit10.i
                                        #   in Loop: Header=BB44_27 Depth=1
	testb	%dil, %dil
	je	.LBB44_40
.LBB44_27:                              # %"$2.i28"
                                        # =>This Inner Loop Header: Depth=1
	cmpb	%dl, %dil
	jne	.LBB44_40
# %bb.28:                               # %"$3.i29"
                                        #   in Loop: Header=BB44_27 Depth=1
	shrq	$8, %rdx
	jne	.LBB44_33
# %bb.29:                               # %"$2.i12.i"
                                        #   in Loop: Header=BB44_27 Depth=1
	cmpq	$2, %rsi
	je	.LBB44_41
# %bb.30:                               # %"$5.i15.i"
                                        #   in Loop: Header=BB44_27 Depth=1
	testb	$2, %sil
	jne	.LBB44_31
# %bb.32:                               # %"$7.i17.i"
                                        #   in Loop: Header=BB44_27 Depth=1
	movq	-4(%rsi), %rdx
	movq	4(%rsi), %rsi
	jmp	.LBB44_33
.LBB44_31:                              # %"$8.i16.i"
                                        #   in Loop: Header=BB44_27 Depth=1
	movq	%rsi, %rdx
	shrq	$4, %rdx
	movl	$2, %esi
	.p2align	4, 0x90
.LBB44_33:                              # %symByte.exit19.i
                                        #   in Loop: Header=BB44_27 Depth=1
	testb	%dl, %dl
	je	.LBB44_41
# %bb.34:                               # %"$6.i30"
                                        #   in Loop: Header=BB44_27 Depth=1
	shrq	$8, %rdi
	jne	.LBB44_39
# %bb.35:                               # %"$2.i3.i"
                                        #   in Loop: Header=BB44_27 Depth=1
	cmpq	$2, %r8
	je	.LBB44_40
# %bb.36:                               # %"$5.i6.i"
                                        #   in Loop: Header=BB44_27 Depth=1
	testb	$2, %r8b
	je	.LBB44_38
# %bb.37:                               # %"$8.i7.i"
                                        #   in Loop: Header=BB44_27 Depth=1
	movq	%r8, %rdi
	shrq	$4, %rdi
	movl	$2, %r8d
	jmp	.LBB44_39
.LBB44_40:
	movq	%rcx, %rax
.LBB44_41:                              # %"$2"
	movq	8(%rbx), %rcx
	movq	%rcx, env(%rip)
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	retq
.LBB44_10:                              # %"$6.i12"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rdi, %rdx
	callq	nameErr
.LBB44_16:                              # %"$6.i18"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rax, %rdx
	callq	nameErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _subQ;
	.scl	2;
	.type	32;
	.endef
	.globl	_subQ                           # -- Begin function _subQ
	.p2align	4, 0x90
_subQ:                                  # @_subQ
.seh_proc _subQ
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rdi
	movq	(%rdi), %rcx
	testb	$6, %cl
	jne	.LBB45_4
# %bb.1:                                # %"$3.i"
	testb	$8, %cl
	jne	.LBB45_2
# %bb.3:                                # %"$5.i"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB45_4
.LBB45_2:                               # %"$6.i"
	movq	(%rcx), %rcx
.LBB45_4:                               # %evSym.exit
	subq	$32, %rsp
	callq	xSym
	addq	$32, %rsp
	movq	%rax, %rsi
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rsi, (%rbx)
	movq	%rbx, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rbx, env(%rip)
	movq	8(%rdi), %rax
	movq	(%rax), %rcx
	testb	$6, %cl
	jne	.LBB45_8
# %bb.5:                                # %"$3.i3"
	testb	$8, %cl
	jne	.LBB45_6
# %bb.7:                                # %"$5.i5"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB45_8
.LBB45_6:                               # %"$6.i4"
	movq	(%rcx), %rcx
.LBB45_8:                               # %evSym.exit6
	subq	$32, %rsp
	callq	xSym
	addq	$32, %rsp
	movq	%rax, %rdi
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	subStr
	addq	$32, %rsp
	leaq	SymTab+8(%rip), %rcx
	testb	$1, %al
	cmoveq	%rcx, %rdi
	movq	8(%rbx), %rax
	movq	%rax, env(%rip)
	movq	%rdi, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _val;
	.scl	2;
	.type	32;
	.endef
	.globl	_val                            # -- Begin function _val
	.p2align	4, 0x90
_val:                                   # @_val
.seh_proc _val
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rcx, %rdi
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	testb	$6, %sil
	jne	.LBB46_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB46_2
# %bb.3:                                # %"$5"
	movq	%rsi, %rcx
	callq	evList
	movq	%rax, %rsi
	jmp	.LBB46_4
.LBB46_2:                               # %"$6"
	movq	(%rsi), %rsi
.LBB46_4:                               # %"$2"
	testb	$6, %sil
	jne	.LBB46_12
# %bb.5:                                # %"$8"
	testb	$8, %sil
	jne	.LBB46_6
.LBB46_11:                              # %"$12"
	movq	(%rsi), %rax
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
.LBB46_6:                               # %"$10"
	movq	-8(%rsi), %rax
	testb	$8, %al
	je	.LBB46_11
# %bb.7:                                # %"$10"
	movl	%eax, %ecx
	andl	$6, %ecx
	testq	%rcx, %rcx
	je	.LBB46_11
# %bb.8:                                # %"$3.i"
	addq	%rax, %rax
	jb	.LBB46_11
# %bb.9:                                # %"$2.i"
	addq	%rax, %rax
	jb	.LBB46_11
# %bb.10:                               # %"$5.i"
	movl	$1, %r8d
	shldq	$62, %rax, %r8
	movq	%r8, -8(%rsi)
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	db
	jmp	.LBB46_11
.LBB46_12:                              # %"$7"
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	varErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _set;
	.scl	2;
	.type	32;
	.endef
	.globl	_set                            # -- Begin function _set
	.p2align	4, 0x90
_set:                                   # @_set
.seh_proc _set
# %bb.0:                                # %"$1"
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$56, %rsp
	.seh_stackalloc 56
	.seh_endprologue
	movq	%rcx, %r14
	movq	env(%rip), %rax
	movq	$10, 32(%rsp)
	movq	%rax, 40(%rsp)
	leaq	32(%rsp), %rax
	movq	%rax, env(%rip)
	movq	8(%rcx), %rsi
	leaq	SymTab+8(%rip), %rbx
	leaq	SymTab+280(%rip), %r12
	movl	$2, %r15d
	jmp	.LBB47_1
	.p2align	4, 0x90
.LBB47_18:                              # %"$17"
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	(%rsi), %rax
	movq	8(%rsi), %rsi
	testb	$6, %al
	je	.LBB47_19
.LBB47_22:                              # %"$18"
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	%rax, (%rdi)
	testb	$15, %sil
	jne	.LBB47_23
.LBB47_1:                               # %"$2"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_13 Depth 2
	movq	(%rsi), %rdi
	movq	8(%rsi), %rsi
	testb	$6, %dil
	jne	.LBB47_5
# %bb.2:                                # %"$4"
                                        #   in Loop: Header=BB47_1 Depth=1
	testb	$8, %dil
	jne	.LBB47_3
# %bb.4:                                # %"$6"
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	%rdi, %rcx
	callq	evList
	movq	%rax, %rdi
	jmp	.LBB47_5
	.p2align	4, 0x90
.LBB47_19:                              # %"$19"
                                        #   in Loop: Header=BB47_1 Depth=1
	testb	$8, %al
	jne	.LBB47_20
# %bb.21:                               # %"$21"
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB47_22
.LBB47_3:                               # %"$7"
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	(%rdi), %rdi
	.p2align	4, 0x90
.LBB47_5:                               # %"$3"
                                        #   in Loop: Header=BB47_1 Depth=1
	testb	$6, %dil
	jne	.LBB47_24
# %bb.6:                                # %"$9"
                                        #   in Loop: Header=BB47_1 Depth=1
	cmpq	%rbx, %rdi
	jb	.LBB47_8
# %bb.7:                                # %"$9"
                                        #   in Loop: Header=BB47_1 Depth=1
	cmpq	%r12, %rdi
	jbe	.LBB47_25
.LBB47_8:                               # %"$13"
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	%rdi, 32(%rsp)
	testb	$8, %dil
	je	.LBB47_18
# %bb.9:                                # %"$15"
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	-8(%rdi), %rax
	testb	$8, %al
	je	.LBB47_18
# %bb.10:                               # %"$16"
                                        #   in Loop: Header=BB47_1 Depth=1
	testb	$6, %al
	je	.LBB47_12
# %bb.11:                               #   in Loop: Header=BB47_1 Depth=1
	leaq	-8(%rdi), %rcx
	addq	%rax, %rax
	jb	.LBB47_18
	jmp	.LBB47_16
.LBB47_20:                              # %"$22"
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	(%rax), %rax
	jmp	.LBB47_22
.LBB47_12:                              # %"$2.i"
                                        #   in Loop: Header=BB47_1 Depth=1
	andq	$-9, %rax
	.p2align	4, 0x90
.LBB47_13:                              # %"$4.i"
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rax, %rcx
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB47_13
# %bb.14:                               #   in Loop: Header=BB47_1 Depth=1
	addq	$8, %rcx
	addq	%rax, %rax
	jb	.LBB47_18
.LBB47_16:                              # %"$7.i"
                                        #   in Loop: Header=BB47_1 Depth=1
	leaq	(%rax,%rax), %r8
	shrdq	$2, %r15, %r8
	addq	%rax, %rax
	movq	%r8, (%rcx)
	jb	.LBB47_18
# %bb.17:                               # %"$9.i"
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	%r14, %rcx
	movq	%rdi, %rdx
	callq	db
	jmp	.LBB47_18
.LBB47_23:                              # %"$24"
	movq	40(%rsp), %rcx
	movq	%rcx, env(%rip)
	addq	$56, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	retq
.LBB47_24:                              # %"$8"
	movq	%r14, %rcx
	movq	%rdi, %rdx
	callq	varErr
.LBB47_25:                              # %"$12"
	movq	%r14, %rcx
	movq	%rdi, %rdx
	callq	protErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _setq;
	.scl	2;
	.type	32;
	.endef
	.globl	_setq                           # -- Begin function _setq
	.p2align	4, 0x90
_setq:                                  # @_setq
.seh_proc _setq
# %bb.0:                                # %"$1"
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %r14
	movq	8(%rcx), %rsi
	leaq	SymTab+8(%rip), %rbx
	leaq	SymTab+280(%rip), %r15
	jmp	.LBB48_1
.LBB48_7:                               # %"$12"
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	%rax, %rcx
	callq	evList
	.p2align	4, 0x90
.LBB48_8:                               # %"$9"
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	%rax, (%rdi)
	testb	$15, %sil
	jne	.LBB48_9
.LBB48_1:                               # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rdi
	testb	$6, %dil
	jne	.LBB48_10
# %bb.2:                                # %"$4"
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	8(%rsi), %rcx
	cmpq	%rbx, %rdi
	jb	.LBB48_4
# %bb.3:                                # %"$4"
                                        #   in Loop: Header=BB48_1 Depth=1
	cmpq	%r15, %rdi
	jbe	.LBB48_11
.LBB48_4:                               # %"$8"
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	(%rcx), %rax
	movq	8(%rcx), %rsi
	testb	$6, %al
	jne	.LBB48_8
# %bb.5:                                # %"$10"
                                        #   in Loop: Header=BB48_1 Depth=1
	testb	$8, %al
	je	.LBB48_7
# %bb.6:                                # %"$13"
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	(%rax), %rax
	jmp	.LBB48_8
.LBB48_9:                               # %"$15"
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	retq
.LBB48_10:                              # %"$3"
	movq	%r14, %rcx
	movq	%rdi, %rdx
	callq	varErr
.LBB48_11:                              # %"$7"
	movq	%r14, %rcx
	movq	%rdi, %rdx
	callq	protErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _swap;
	.scl	2;
	.type	32;
	.endef
	.globl	_swap                           # -- Begin function _swap
	.p2align	4, 0x90
_swap:                                  # @_swap
.seh_proc _swap
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rdi
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %r14
	testb	$6, %sil
	jne	.LBB49_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB49_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB49_4
.LBB49_2:                               # %"$6"
	movq	(%rsi), %rsi
.LBB49_4:                               # %"$2"
	testb	$6, %sil
	jne	.LBB49_22
# %bb.5:                                # %"$8"
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rsi
	jb	.LBB49_7
# %bb.6:                                # %"$8"
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, %rsi
	jbe	.LBB49_23
.LBB49_7:                               # %"$12"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rsi, (%rbx)
	movq	%rbx, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rbx, env(%rip)
	testb	$8, %sil
	je	.LBB49_17
# %bb.8:                                # %"$14"
	movq	-8(%rsi), %rax
	testb	$8, %al
	je	.LBB49_17
# %bb.9:                                # %"$15"
	testb	$6, %al
	je	.LBB49_11
# %bb.10:
	leaq	-8(%rsi), %rcx
	addq	%rax, %rax
	jae	.LBB49_15
	jmp	.LBB49_17
.LBB49_11:                              # %"$2.i"
	andq	$-9, %rax
	.p2align	4, 0x90
.LBB49_12:                              # %"$4.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rcx
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB49_12
# %bb.13:
	addq	$8, %rcx
	addq	%rax, %rax
	jb	.LBB49_17
.LBB49_15:                              # %"$7.i"
	leaq	(%rax,%rax), %rdx
	movl	$2, %r8d
	shldq	$62, %rdx, %r8
	addq	%rax, %rax
	movq	%r8, (%rcx)
	jb	.LBB49_17
# %bb.16:                               # %"$9.i"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	db
	addq	$32, %rsp
.LBB49_17:                              # %"$16"
	movq	(%r14), %rax
	testb	$6, %al
	jne	.LBB49_21
# %bb.18:                               # %"$18"
	testb	$8, %al
	jne	.LBB49_19
# %bb.20:                               # %"$20"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB49_21
.LBB49_19:                              # %"$21"
	movq	(%rax), %rax
.LBB49_21:                              # %"$17"
	movq	(%rsi), %rcx
	movq	%rax, (%rsi)
	movq	8(%rbx), %rax
	movq	%rax, env(%rip)
	movq	%rcx, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	retq
.LBB49_22:                              # %"$7"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	varErr
.LBB49_23:                              # %"$11"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	protErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _xchg;
	.scl	2;
	.type	32;
	.endef
	.globl	_xchg                           # -- Begin function _xchg
	.p2align	4, 0x90
_xchg:                                  # @_xchg
.seh_proc _xchg
# %bb.0:                                # %"$1"
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$48, %rsp
	.seh_stackalloc 48
	.seh_endprologue
	movq	%rcx, %r14
	movq	env(%rip), %rax
	movq	$10, 32(%rsp)
	movq	%rax, 40(%rsp)
	leaq	32(%rsp), %rax
	movq	%rax, env(%rip)
	movq	8(%rcx), %rsi
	leaq	SymTab+8(%rip), %r13
	leaq	SymTab+280(%rip), %r15
	movl	$2, %r12d
	jmp	.LBB50_1
	.p2align	4, 0x90
.LBB50_35:                              # %"$32"
                                        #   in Loop: Header=BB50_1 Depth=1
	movq	(%rdi), %rax
	movq	(%rbx), %rcx
	movq	%rcx, (%rdi)
	movq	%rax, (%rbx)
	testb	$15, %sil
	jne	.LBB50_36
.LBB50_1:                               # %"$2"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_13 Depth 2
                                        #     Child Loop BB50_30 Depth 2
	movq	(%rsi), %rdi
	movq	8(%rsi), %rsi
	testb	$6, %dil
	jne	.LBB50_5
# %bb.2:                                # %"$4"
                                        #   in Loop: Header=BB50_1 Depth=1
	testb	$8, %dil
	jne	.LBB50_3
# %bb.4:                                # %"$6"
                                        #   in Loop: Header=BB50_1 Depth=1
	movq	%rdi, %rcx
	callq	evList
	movq	%rax, %rdi
	jmp	.LBB50_5
.LBB50_3:                               # %"$7"
                                        #   in Loop: Header=BB50_1 Depth=1
	movq	(%rdi), %rdi
	.p2align	4, 0x90
.LBB50_5:                               # %"$3"
                                        #   in Loop: Header=BB50_1 Depth=1
	testb	$6, %dil
	jne	.LBB50_37
# %bb.6:                                # %"$9"
                                        #   in Loop: Header=BB50_1 Depth=1
	cmpq	%r13, %rdi
	jb	.LBB50_8
# %bb.7:                                # %"$9"
                                        #   in Loop: Header=BB50_1 Depth=1
	cmpq	%r15, %rdi
	jbe	.LBB50_38
.LBB50_8:                               # %"$13"
                                        #   in Loop: Header=BB50_1 Depth=1
	movq	%rdi, 32(%rsp)
	testb	$8, %dil
	je	.LBB50_18
# %bb.9:                                # %"$15"
                                        #   in Loop: Header=BB50_1 Depth=1
	movq	-8(%rdi), %rax
	testb	$8, %al
	je	.LBB50_18
# %bb.10:                               # %"$16"
                                        #   in Loop: Header=BB50_1 Depth=1
	testb	$6, %al
	je	.LBB50_12
# %bb.11:                               #   in Loop: Header=BB50_1 Depth=1
	leaq	-8(%rdi), %rcx
	addq	%rax, %rax
	jae	.LBB50_16
	jmp	.LBB50_18
.LBB50_12:                              # %"$2.i"
                                        #   in Loop: Header=BB50_1 Depth=1
	andq	$-9, %rax
	.p2align	4, 0x90
.LBB50_13:                              # %"$4.i"
                                        #   Parent Loop BB50_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rax, %rcx
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB50_13
# %bb.14:                               #   in Loop: Header=BB50_1 Depth=1
	addq	$8, %rcx
	addq	%rax, %rax
	jb	.LBB50_18
.LBB50_16:                              # %"$7.i"
                                        #   in Loop: Header=BB50_1 Depth=1
	leaq	(%rax,%rax), %r8
	shrdq	$2, %r12, %r8
	addq	%rax, %rax
	movq	%r8, (%rcx)
	jb	.LBB50_18
# %bb.17:                               # %"$9.i"
                                        #   in Loop: Header=BB50_1 Depth=1
	movq	%r14, %rcx
	movq	%rdi, %rdx
	callq	db
	.p2align	4, 0x90
.LBB50_18:                              # %"$17"
                                        #   in Loop: Header=BB50_1 Depth=1
	movq	(%rsi), %rbx
	movq	8(%rsi), %rsi
	testb	$6, %bl
	jne	.LBB50_22
# %bb.19:                               # %"$19"
                                        #   in Loop: Header=BB50_1 Depth=1
	testb	$8, %bl
	jne	.LBB50_20
# %bb.21:                               # %"$21"
                                        #   in Loop: Header=BB50_1 Depth=1
	movq	%rbx, %rcx
	callq	evList
	movq	%rax, %rbx
	jmp	.LBB50_22
.LBB50_20:                              # %"$22"
                                        #   in Loop: Header=BB50_1 Depth=1
	movq	(%rbx), %rbx
	.p2align	4, 0x90
.LBB50_22:                              # %"$18"
                                        #   in Loop: Header=BB50_1 Depth=1
	testb	$6, %bl
	jne	.LBB50_39
# %bb.23:                               # %"$24"
                                        #   in Loop: Header=BB50_1 Depth=1
	cmpq	%r13, %rbx
	jb	.LBB50_25
# %bb.24:                               # %"$24"
                                        #   in Loop: Header=BB50_1 Depth=1
	cmpq	%r15, %rbx
	jbe	.LBB50_40
.LBB50_25:                              # %"$28"
                                        #   in Loop: Header=BB50_1 Depth=1
	testb	$8, %bl
	je	.LBB50_35
# %bb.26:                               # %"$30"
                                        #   in Loop: Header=BB50_1 Depth=1
	movq	-8(%rbx), %rax
	testb	$8, %al
	je	.LBB50_35
# %bb.27:                               # %"$31"
                                        #   in Loop: Header=BB50_1 Depth=1
	testb	$6, %al
	je	.LBB50_29
# %bb.28:                               #   in Loop: Header=BB50_1 Depth=1
	leaq	-8(%rbx), %rcx
	addq	%rax, %rax
	jb	.LBB50_35
	jmp	.LBB50_33
.LBB50_29:                              # %"$2.i13"
                                        #   in Loop: Header=BB50_1 Depth=1
	andq	$-9, %rax
	.p2align	4, 0x90
.LBB50_30:                              # %"$4.i15"
                                        #   Parent Loop BB50_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rax, %rcx
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB50_30
# %bb.31:                               #   in Loop: Header=BB50_1 Depth=1
	addq	$8, %rcx
	addq	%rax, %rax
	jb	.LBB50_35
.LBB50_33:                              # %"$7.i17"
                                        #   in Loop: Header=BB50_1 Depth=1
	leaq	(%rax,%rax), %r8
	shrdq	$2, %r12, %r8
	addq	%rax, %rax
	movq	%r8, (%rcx)
	jb	.LBB50_35
# %bb.34:                               # %"$9.i18"
                                        #   in Loop: Header=BB50_1 Depth=1
	movq	%r14, %rcx
	movq	%rbx, %rdx
	callq	db
	jmp	.LBB50_35
.LBB50_36:                              # %"$34"
	movq	40(%rsp), %rcx
	movq	%rcx, env(%rip)
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB50_37:                              # %"$8"
	movq	%r14, %rcx
	movq	%rdi, %rdx
	callq	varErr
.LBB50_38:                              # %"$12"
	movq	%r14, %rcx
	movq	%rdi, %rdx
	callq	protErr
.LBB50_39:                              # %"$23"
	movq	%r14, %rcx
	movq	%rbx, %rdx
	callq	varErr
.LBB50_40:                              # %"$27"
	movq	%r14, %rcx
	movq	%rbx, %rdx
	callq	protErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _on;
	.scl	2;
	.type	32;
	.endef
	.globl	_on                             # -- Begin function _on
	.p2align	4, 0x90
_on:                                    # @_on
.seh_proc _on
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	leaq	SymTab+8(%rip), %r8
	leaq	SymTab+280(%rip), %r9
	jmp	.LBB51_1
	.p2align	4, 0x90
.LBB51_4:                               # %"$8"
                                        #   in Loop: Header=BB51_1 Depth=1
	movq	%r9, (%rdx)
	testb	$15, %al
	jne	.LBB51_5
.LBB51_1:                               # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rax), %rdx
	testb	$6, %dl
	jne	.LBB51_6
# %bb.2:                                # %"$4"
                                        #   in Loop: Header=BB51_1 Depth=1
	movq	8(%rax), %rax
	cmpq	%r8, %rdx
	jb	.LBB51_4
# %bb.3:                                # %"$4"
                                        #   in Loop: Header=BB51_1 Depth=1
	cmpq	%r9, %rdx
	ja	.LBB51_4
# %bb.7:                                # %"$7"
	callq	protErr
.LBB51_5:                               # %"$10"
	leaq	SymTab+280(%rip), %rax
	addq	$40, %rsp
	retq
.LBB51_6:                               # %"$3"
	callq	varErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _off;
	.scl	2;
	.type	32;
	.endef
	.globl	_off                            # -- Begin function _off
	.p2align	4, 0x90
_off:                                   # @_off
.seh_proc _off
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	leaq	SymTab+8(%rip), %r8
	leaq	SymTab+280(%rip), %r9
	jmp	.LBB52_1
	.p2align	4, 0x90
.LBB52_4:                               # %"$8"
                                        #   in Loop: Header=BB52_1 Depth=1
	movq	%r8, (%rdx)
	testb	$15, %al
	jne	.LBB52_5
.LBB52_1:                               # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rax), %rdx
	testb	$6, %dl
	jne	.LBB52_6
# %bb.2:                                # %"$4"
                                        #   in Loop: Header=BB52_1 Depth=1
	movq	8(%rax), %rax
	cmpq	%r8, %rdx
	jb	.LBB52_4
# %bb.3:                                # %"$4"
                                        #   in Loop: Header=BB52_1 Depth=1
	cmpq	%r9, %rdx
	ja	.LBB52_4
# %bb.7:                                # %"$7"
	callq	protErr
.LBB52_5:                               # %"$10"
	leaq	SymTab+8(%rip), %rax
	addq	$40, %rsp
	retq
.LBB52_6:                               # %"$3"
	callq	varErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _onOff;
	.scl	2;
	.type	32;
	.endef
	.globl	_onOff                          # -- Begin function _onOff
	.p2align	4, 0x90
_onOff:                                 # @_onOff
.seh_proc _onOff
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %r8
	leaq	SymTab+8(%rip), %r9
	leaq	SymTab+280(%rip), %r10
	jmp	.LBB53_1
	.p2align	4, 0x90
.LBB53_4:                               # %"$8"
                                        #   in Loop: Header=BB53_1 Depth=1
	cmpq	%r9, (%rdx)
	movq	%r9, %rax
	cmoveq	%r10, %rax
	movq	%rax, (%rdx)
	testb	$15, %r8b
	jne	.LBB53_5
.LBB53_1:                               # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r8), %rdx
	testb	$6, %dl
	jne	.LBB53_6
# %bb.2:                                # %"$4"
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	8(%r8), %r8
	cmpq	%r9, %rdx
	jb	.LBB53_4
# %bb.3:                                # %"$4"
                                        #   in Loop: Header=BB53_1 Depth=1
	cmpq	%r10, %rdx
	ja	.LBB53_4
# %bb.7:                                # %"$7"
	callq	protErr
.LBB53_5:                               # %"$13"
	nop
	addq	$40, %rsp
	retq
.LBB53_6:                               # %"$3"
	callq	varErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _zero;
	.scl	2;
	.type	32;
	.endef
	.globl	_zero                           # -- Begin function _zero
	.p2align	4, 0x90
_zero:                                  # @_zero
.seh_proc _zero
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	leaq	SymTab+8(%rip), %r8
	leaq	SymTab+280(%rip), %r9
	jmp	.LBB54_1
	.p2align	4, 0x90
.LBB54_4:                               # %"$8"
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	$2, (%rdx)
	testb	$15, %al
	jne	.LBB54_5
.LBB54_1:                               # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rax), %rdx
	testb	$6, %dl
	jne	.LBB54_6
# %bb.2:                                # %"$4"
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	8(%rax), %rax
	cmpq	%r8, %rdx
	jb	.LBB54_4
# %bb.3:                                # %"$4"
                                        #   in Loop: Header=BB54_1 Depth=1
	cmpq	%r9, %rdx
	ja	.LBB54_4
# %bb.7:                                # %"$7"
	callq	protErr
.LBB54_5:                               # %"$10"
	movl	$2, %eax
	addq	$40, %rsp
	retq
.LBB54_6:                               # %"$3"
	callq	varErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _one;
	.scl	2;
	.type	32;
	.endef
	.globl	_one                            # -- Begin function _one
	.p2align	4, 0x90
_one:                                   # @_one
.seh_proc _one
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	leaq	SymTab+8(%rip), %r8
	leaq	SymTab+280(%rip), %r9
	jmp	.LBB55_1
	.p2align	4, 0x90
.LBB55_4:                               # %"$8"
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	$18, (%rdx)
	testb	$15, %al
	jne	.LBB55_5
.LBB55_1:                               # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rax), %rdx
	testb	$6, %dl
	jne	.LBB55_6
# %bb.2:                                # %"$4"
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	8(%rax), %rax
	cmpq	%r8, %rdx
	jb	.LBB55_4
# %bb.3:                                # %"$4"
                                        #   in Loop: Header=BB55_1 Depth=1
	cmpq	%r9, %rdx
	ja	.LBB55_4
# %bb.7:                                # %"$7"
	callq	protErr
.LBB55_5:                               # %"$10"
	movl	$18, %eax
	addq	$40, %rsp
	retq
.LBB55_6:                               # %"$3"
	callq	varErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _default;
	.scl	2;
	.type	32;
	.endef
	.globl	_default                        # -- Begin function _default
	.p2align	4, 0x90
_default:                               # @_default
.seh_proc _default
# %bb.0:                                # %"$1"
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %r14
	movq	8(%rcx), %rcx
	leaq	SymTab+8(%rip), %rbx
	leaq	SymTab+280(%rip), %r15
	jmp	.LBB56_1
.LBB56_8:                               # %"$14"
                                        #   in Loop: Header=BB56_1 Depth=1
	movq	%rax, %rcx
	callq	evList
	.p2align	4, 0x90
.LBB56_9:                               # %"$11"
                                        #   in Loop: Header=BB56_1 Depth=1
	movq	%rax, (%rdi)
.LBB56_10:                              # %"$10"
                                        #   in Loop: Header=BB56_1 Depth=1
	movq	8(%rsi), %rcx
	testb	$15, %cl
	jne	.LBB56_11
.LBB56_1:                               # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rcx), %rdi
	testb	$6, %dil
	jne	.LBB56_12
# %bb.2:                                # %"$4"
                                        #   in Loop: Header=BB56_1 Depth=1
	movq	8(%rcx), %rsi
	cmpq	%rbx, %rdi
	jb	.LBB56_4
# %bb.3:                                # %"$4"
                                        #   in Loop: Header=BB56_1 Depth=1
	cmpq	%r15, %rdi
	jbe	.LBB56_13
.LBB56_4:                               # %"$8"
                                        #   in Loop: Header=BB56_1 Depth=1
	movq	(%rdi), %rax
	cmpq	%rbx, %rax
	jne	.LBB56_10
# %bb.5:                                # %"$9"
                                        #   in Loop: Header=BB56_1 Depth=1
	movq	(%rsi), %rax
	testb	$6, %al
	jne	.LBB56_9
# %bb.6:                                # %"$12"
                                        #   in Loop: Header=BB56_1 Depth=1
	testb	$8, %al
	je	.LBB56_8
# %bb.7:                                # %"$15"
                                        #   in Loop: Header=BB56_1 Depth=1
	movq	(%rax), %rax
	jmp	.LBB56_9
.LBB56_11:                              # %"$18"
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	retq
.LBB56_12:                              # %"$3"
	movq	%r14, %rcx
	movq	%rdi, %rdx
	callq	varErr
.LBB56_13:                              # %"$7"
	movq	%r14, %rcx
	movq	%rdi, %rdx
	callq	protErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _push;
	.scl	2;
	.type	32;
	.endef
	.globl	_push                           # -- Begin function _push
	.p2align	4, 0x90
_push:                                  # @_push
.seh_proc _push
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rdi
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rbx
	testb	$6, %sil
	jne	.LBB57_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB57_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB57_4
.LBB57_2:                               # %"$6"
	movq	(%rsi), %rsi
.LBB57_4:                               # %"$2"
	testb	$6, %sil
	jne	.LBB57_23
# %bb.5:                                # %"$8"
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rsi
	jb	.LBB57_7
# %bb.6:                                # %"$8"
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, %rsi
	jbe	.LBB57_24
.LBB57_7:                               # %"$12"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%rsi, (%r14)
	movq	%r14, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r14, env(%rip)
	testb	$8, %sil
	je	.LBB57_17
# %bb.8:                                # %"$14"
	movq	-8(%rsi), %rax
	testb	$8, %al
	je	.LBB57_17
# %bb.9:                                # %"$15"
	testb	$6, %al
	je	.LBB57_11
# %bb.10:
	leaq	-8(%rsi), %rcx
	addq	%rax, %rax
	jb	.LBB57_17
	jmp	.LBB57_15
.LBB57_11:                              # %"$2.i"
	andq	$-9, %rax
	.p2align	4, 0x90
.LBB57_12:                              # %"$4.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rcx
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB57_12
# %bb.13:
	addq	$8, %rcx
	addq	%rax, %rax
	jb	.LBB57_17
.LBB57_15:                              # %"$7.i"
	leaq	(%rax,%rax), %rdx
	movl	$2, %r8d
	shldq	$62, %rdx, %r8
	addq	%rax, %rax
	movq	%r8, (%rcx)
	jb	.LBB57_17
# %bb.16:                               # %"$9.i"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	db
	addq	$32, %rsp
	jmp	.LBB57_17
.LBB57_20:                              # %"$21"
                                        #   in Loop: Header=BB57_17 Depth=1
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdi
	.p2align	4, 0x90
.LBB57_21:                              # %"$18"
                                        #   in Loop: Header=BB57_17 Depth=1
	movq	(%rsi), %rdx
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	cons
	addq	$32, %rsp
	movq	%rax, (%rsi)
	testb	$15, %bl
	jne	.LBB57_22
.LBB57_17:                              # %"$17"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rbx), %rdi
	movq	8(%rbx), %rbx
	testb	$6, %dil
	jne	.LBB57_21
# %bb.18:                               # %"$19"
                                        #   in Loop: Header=BB57_17 Depth=1
	testb	$8, %dil
	je	.LBB57_20
# %bb.19:                               # %"$22"
                                        #   in Loop: Header=BB57_17 Depth=1
	movq	(%rdi), %rdi
	jmp	.LBB57_21
.LBB57_22:                              # %"$24"
	movq	8(%r14), %rax
	movq	%rax, env(%rip)
	movq	%rdi, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	retq
.LBB57_23:                              # %"$7"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	varErr
.LBB57_24:                              # %"$11"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	protErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _push1;
	.scl	2;
	.type	32;
	.endef
	.globl	_push1                          # -- Begin function _push1
	.p2align	4, 0x90
_push1:                                 # @_push1
.seh_proc _push1
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rdi
	movq	8(%rcx), %rax
	movq	(%rax), %r14
	movq	8(%rax), %r12
	testb	$6, %r14b
	jne	.LBB58_4
# %bb.1:                                # %"$3"
	testb	$8, %r14b
	jne	.LBB58_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r14
	jmp	.LBB58_4
.LBB58_2:                               # %"$6"
	movq	(%r14), %r14
.LBB58_4:                               # %"$2"
	testb	$6, %r14b
	jne	.LBB58_28
# %bb.5:                                # %"$8"
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %r14
	jb	.LBB58_7
# %bb.6:                                # %"$8"
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, %r14
	jbe	.LBB58_29
.LBB58_7:                               # %"$12"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%r14, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r15, env(%rip)
	testb	$8, %r14b
	je	.LBB58_17
# %bb.8:                                # %"$14"
	movq	-8(%r14), %rax
	testb	$8, %al
	je	.LBB58_17
# %bb.9:                                # %"$15"
	testb	$6, %al
	je	.LBB58_11
# %bb.10:
	leaq	-8(%r14), %rcx
	addq	%rax, %rax
	jb	.LBB58_17
	jmp	.LBB58_15
.LBB58_11:                              # %"$2.i"
	andq	$-9, %rax
	.p2align	4, 0x90
.LBB58_12:                              # %"$4.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rcx
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB58_12
# %bb.13:
	addq	$8, %rcx
	addq	%rax, %rax
	jb	.LBB58_17
.LBB58_15:                              # %"$7.i"
	leaq	(%rax,%rax), %rdx
	movl	$2, %r8d
	shldq	$62, %rdx, %r8
	addq	%rax, %rax
	movq	%r8, (%rcx)
	jb	.LBB58_17
# %bb.16:                               # %"$9.i"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%r14, %rdx
	callq	db
	addq	$32, %rsp
	jmp	.LBB58_17
	.p2align	4, 0x90
.LBB58_25:                              # %"$29.critedge"
                                        #   in Loop: Header=BB58_17 Depth=1
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, (%r14)
.LBB58_26:                              # %"$30"
                                        #   in Loop: Header=BB58_17 Depth=1
	testb	$15, %r12b
	jne	.LBB58_27
.LBB58_17:                              # %"$17"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_23 Depth 2
	movq	(%r12), %rdi
	movq	8(%r12), %r12
	testb	$6, %dil
	jne	.LBB58_21
# %bb.18:                               # %"$19"
                                        #   in Loop: Header=BB58_17 Depth=1
	testb	$8, %dil
	jne	.LBB58_19
# %bb.20:                               # %"$21"
                                        #   in Loop: Header=BB58_17 Depth=1
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdi
	jmp	.LBB58_21
.LBB58_19:                              # %"$22"
                                        #   in Loop: Header=BB58_17 Depth=1
	movq	(%rdi), %rdi
	.p2align	4, 0x90
.LBB58_21:                              # %"$18"
                                        #   in Loop: Header=BB58_17 Depth=1
	movq	(%r14), %rsi
	testb	$15, %sil
	jne	.LBB58_25
# %bb.22:                               # %"$24.preheader"
                                        #   in Loop: Header=BB58_17 Depth=1
	movq	%rsi, %rbx
	.p2align	4, 0x90
.LBB58_23:                              # %"$24"
                                        #   Parent Loop BB58_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rbx), %rdx
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	equal
	addq	$32, %rsp
	testb	$1, %al
	jne	.LBB58_26
# %bb.24:                               # %"$27"
                                        #   in Loop: Header=BB58_23 Depth=2
	movq	8(%rbx), %rbx
	testb	$15, %bl
	je	.LBB58_23
	jmp	.LBB58_25
.LBB58_27:                              # %"$32"
	movq	8(%r15), %rax
	movq	%rax, env(%rip)
	movq	%rdi, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB58_28:                              # %"$7"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%r14, %rdx
	callq	varErr
.LBB58_29:                              # %"$11"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%r14, %rdx
	callq	protErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _push1q;
	.scl	2;
	.type	32;
	.endef
	.globl	_push1q                         # -- Begin function _push1q
	.p2align	4, 0x90
_push1q:                                # @_push1q
.seh_proc _push1q
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rdi
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rbx
	testb	$6, %sil
	jne	.LBB59_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB59_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB59_4
.LBB59_2:                               # %"$6"
	movq	(%rsi), %rsi
.LBB59_4:                               # %"$2"
	testb	$6, %sil
	jne	.LBB59_28
# %bb.5:                                # %"$8"
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rsi
	jb	.LBB59_7
# %bb.6:                                # %"$8"
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, %rsi
	jbe	.LBB59_29
.LBB59_7:                               # %"$12"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%rsi, (%r14)
	movq	%r14, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r14, env(%rip)
	testb	$8, %sil
	je	.LBB59_17
# %bb.8:                                # %"$14"
	movq	-8(%rsi), %rax
	testb	$8, %al
	je	.LBB59_17
# %bb.9:                                # %"$15"
	testb	$6, %al
	je	.LBB59_11
# %bb.10:
	leaq	-8(%rsi), %rcx
	addq	%rax, %rax
	jb	.LBB59_17
	jmp	.LBB59_15
.LBB59_11:                              # %"$2.i"
	andq	$-9, %rax
	.p2align	4, 0x90
.LBB59_12:                              # %"$4.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rcx
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB59_12
# %bb.13:
	addq	$8, %rcx
	addq	%rax, %rax
	jb	.LBB59_17
.LBB59_15:                              # %"$7.i"
	leaq	(%rax,%rax), %rdx
	movl	$2, %r8d
	shldq	$62, %rdx, %r8
	addq	%rax, %rax
	movq	%r8, (%rcx)
	jb	.LBB59_17
# %bb.16:                               # %"$9.i"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	db
	addq	$32, %rsp
	jmp	.LBB59_17
	.p2align	4, 0x90
.LBB59_25:                              # %"$29.critedge"
                                        #   in Loop: Header=BB59_17 Depth=1
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	cons
	addq	$32, %rsp
	movq	%rax, (%rsi)
.LBB59_26:                              # %"$30"
                                        #   in Loop: Header=BB59_17 Depth=1
	testb	$15, %bl
	jne	.LBB59_27
.LBB59_17:                              # %"$17"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_23 Depth 2
	movq	(%rbx), %rdi
	movq	8(%rbx), %rbx
	testb	$6, %dil
	jne	.LBB59_21
# %bb.18:                               # %"$19"
                                        #   in Loop: Header=BB59_17 Depth=1
	testb	$8, %dil
	jne	.LBB59_19
# %bb.20:                               # %"$21"
                                        #   in Loop: Header=BB59_17 Depth=1
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdi
	jmp	.LBB59_21
.LBB59_19:                              # %"$22"
                                        #   in Loop: Header=BB59_17 Depth=1
	movq	(%rdi), %rdi
	.p2align	4, 0x90
.LBB59_21:                              # %"$18"
                                        #   in Loop: Header=BB59_17 Depth=1
	movq	(%rsi), %rdx
	testb	$15, %dl
	jne	.LBB59_25
# %bb.22:                               # %"$24.preheader"
                                        #   in Loop: Header=BB59_17 Depth=1
	movq	%rdx, %rax
	.p2align	4, 0x90
.LBB59_23:                              # %"$24"
                                        #   Parent Loop BB59_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpq	(%rax), %rdi
	je	.LBB59_26
# %bb.24:                               # %"$27"
                                        #   in Loop: Header=BB59_23 Depth=2
	movq	8(%rax), %rax
	testb	$15, %al
	je	.LBB59_23
	jmp	.LBB59_25
.LBB59_27:                              # %"$32"
	movq	8(%r14), %rax
	movq	%rax, env(%rip)
	movq	%rdi, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	retq
.LBB59_28:                              # %"$7"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	varErr
.LBB59_29:                              # %"$11"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	protErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _pop;
	.scl	2;
	.type	32;
	.endef
	.globl	_pop                            # -- Begin function _pop
	.p2align	4, 0x90
_pop:                                   # @_pop
.seh_proc _pop
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rcx, %rdi
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	testb	$6, %sil
	jne	.LBB60_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB60_2
# %bb.3:                                # %"$5"
	movq	%rsi, %rcx
	callq	evList
	movq	%rax, %rsi
	jmp	.LBB60_4
.LBB60_2:                               # %"$6"
	movq	(%rsi), %rsi
.LBB60_4:                               # %"$2"
	testb	$6, %sil
	jne	.LBB60_20
# %bb.5:                                # %"$8"
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rsi
	jb	.LBB60_7
# %bb.6:                                # %"$8"
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, %rsi
	jbe	.LBB60_21
.LBB60_7:                               # %"$12"
	testb	$8, %sil
	je	.LBB60_17
# %bb.8:                                # %"$14"
	movq	-8(%rsi), %rax
	testb	$8, %al
	je	.LBB60_17
# %bb.9:                                # %"$15"
	testb	$6, %al
	je	.LBB60_11
# %bb.10:
	leaq	-8(%rsi), %rcx
	addq	%rax, %rax
	jae	.LBB60_15
	jmp	.LBB60_17
.LBB60_11:                              # %"$2.i"
	andq	$-9, %rax
	.p2align	4, 0x90
.LBB60_12:                              # %"$4.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rcx
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB60_12
# %bb.13:
	addq	$8, %rcx
	addq	%rax, %rax
	jb	.LBB60_17
.LBB60_15:                              # %"$7.i"
	leaq	(%rax,%rax), %rdx
	movl	$2, %r8d
	shldq	$62, %rdx, %r8
	addq	%rax, %rax
	movq	%r8, (%rcx)
	jb	.LBB60_17
# %bb.16:                               # %"$9.i"
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	db
.LBB60_17:                              # %"$16"
	movq	(%rsi), %rax
	testb	$15, %al
	jne	.LBB60_19
# %bb.18:                               # %"$18"
	movq	8(%rax), %rcx
	movq	%rcx, (%rsi)
	movq	(%rax), %rax
.LBB60_19:                              # %"$19"
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
.LBB60_20:                              # %"$7"
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	varErr
.LBB60_21:                              # %"$11"
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	protErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _popq;
	.scl	2;
	.type	32;
	.endef
	.globl	_popq                           # -- Begin function _popq
	.p2align	4, 0x90
_popq:                                  # @_popq
.seh_proc _popq
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rdx
	testb	$6, %dl
	jne	.LBB61_6
# %bb.1:                                # %"$3"
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rdx
	jb	.LBB61_3
# %bb.2:                                # %"$3"
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, %rdx
	jbe	.LBB61_7
.LBB61_3:                               # %"$7"
	movq	(%rdx), %rax
	testb	$15, %al
	jne	.LBB61_5
# %bb.4:                                # %"$9"
	movq	8(%rax), %rcx
	movq	%rcx, (%rdx)
	movq	(%rax), %rax
.LBB61_5:                               # %"$10"
	addq	$40, %rsp
	retq
.LBB61_6:                               # %"$2"
	callq	varErr
.LBB61_7:                               # %"$6"
	callq	protErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _shift;
	.scl	2;
	.type	32;
	.endef
	.globl	_shift                          # -- Begin function _shift
	.p2align	4, 0x90
_shift:                                 # @_shift
.seh_proc _shift
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rdi
	testb	$6, %dil
	jne	.LBB62_4
# %bb.1:                                # %"$3"
	testb	$8, %dil
	jne	.LBB62_2
# %bb.3:                                # %"$5"
	movq	%rdi, %rcx
	callq	evList
	movq	%rax, %rdi
	jmp	.LBB62_4
.LBB62_2:                               # %"$6"
	movq	(%rdi), %rdi
.LBB62_4:                               # %"$2"
	testb	$6, %dil
	jne	.LBB62_20
# %bb.5:                                # %"$8"
	leaq	SymTab+8(%rip), %rbx
	cmpq	%rbx, %rdi
	jb	.LBB62_7
# %bb.6:                                # %"$8"
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, %rdi
	jbe	.LBB62_21
.LBB62_7:                               # %"$12"
	testb	$8, %dil
	je	.LBB62_17
# %bb.8:                                # %"$14"
	movq	-8(%rdi), %rax
	testb	$8, %al
	je	.LBB62_17
# %bb.9:                                # %"$15"
	testb	$6, %al
	je	.LBB62_11
# %bb.10:
	leaq	-8(%rdi), %rcx
	addq	%rax, %rax
	jae	.LBB62_15
	jmp	.LBB62_17
.LBB62_11:                              # %"$2.i"
	andq	$-9, %rax
	.p2align	4, 0x90
.LBB62_12:                              # %"$4.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rcx
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB62_12
# %bb.13:
	addq	$8, %rcx
	addq	%rax, %rax
	jb	.LBB62_17
.LBB62_15:                              # %"$7.i"
	leaq	(%rax,%rax), %rdx
	movl	$2, %r8d
	shldq	$62, %rdx, %r8
	addq	%rax, %rax
	movq	%r8, (%rcx)
	jb	.LBB62_17
# %bb.16:                               # %"$9.i"
	movq	%rsi, %rcx
	movq	%rdi, %rdx
	callq	db
.LBB62_17:                              # %"$16"
	movq	(%rdi), %rdx
	cmpq	%rbx, %rdx
	je	.LBB62_19
# %bb.18:                               # %"$16"
	movl	%edx, %eax
	andl	$15, %eax
	testq	%rax, %rax
	jne	.LBB62_22
.LBB62_19:                              # %"$20"
	movq	8(%rdx), %rax
	movq	%rax, (%rdi)
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
.LBB62_20:                              # %"$7"
	movq	%rsi, %rcx
	movq	%rdi, %rdx
	callq	varErr
.LBB62_21:                              # %"$11"
	movq	%rsi, %rcx
	movq	%rdi, %rdx
	callq	protErr
.LBB62_22:                              # %"$19"
	movq	%rsi, %rcx
	callq	lstErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cut;
	.scl	2;
	.type	32;
	.endef
	.globl	_cut                            # -- Begin function _cut
	.p2align	4, 0x90
_cut:                                   # @_cut
.seh_proc _cut
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rdi
	movq	8(%rcx), %rbx
	movq	(%rbx), %rax
	testb	$6, %al
	jne	.LBB63_4
# %bb.1:                                # %"$3.i"
	testb	$8, %al
	jne	.LBB63_2
# %bb.3:                                # %"$5.i"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB63_4
.LBB63_2:                               # %"$6.i"
	movq	(%rax), %rax
.LBB63_4:                               # %"$2.i"
	testb	$2, %al
	je	.LBB63_32
# %bb.5:                                # %evCnt.exit
	movq	%rax, %rcx
	shrq	$4, %rcx
	movq	%rcx, %rsi
	negq	%rsi
	testb	$8, %al
	cmoveq	%rcx, %rsi
	testq	%rsi, %rsi
	jle	.LBB63_6
# %bb.7:                                # %"$3"
	movq	8(%rbx), %rax
	movq	(%rax), %r14
	testb	$6, %r14b
	jne	.LBB63_11
# %bb.8:                                # %"$6"
	testb	$8, %r14b
	jne	.LBB63_9
# %bb.10:                               # %"$8"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r14
	jmp	.LBB63_11
.LBB63_6:
	leaq	SymTab+8(%rip), %r12
	jmp	.LBB63_31
.LBB63_9:                               # %"$9"
	movq	(%r14), %r14
.LBB63_11:                              # %"$5"
	testb	$6, %r14b
	jne	.LBB63_33
# %bb.12:                               # %"$11"
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %r14
	jb	.LBB63_14
# %bb.13:                               # %"$11"
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, %r14
	jbe	.LBB63_34
.LBB63_14:                              # %"$15"
	testb	$8, %r14b
	je	.LBB63_24
# %bb.15:                               # %"$17"
	movq	-8(%r14), %rax
	testb	$8, %al
	je	.LBB63_24
# %bb.16:                               # %"$18"
	testb	$6, %al
	je	.LBB63_18
# %bb.17:
	leaq	-8(%r14), %rcx
	addq	%rax, %rax
	jae	.LBB63_22
	jmp	.LBB63_24
.LBB63_18:                              # %"$2.i8"
	andq	$-9, %rax
	.p2align	4, 0x90
.LBB63_19:                              # %"$4.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rcx
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB63_19
# %bb.20:
	addq	$8, %rcx
	addq	%rax, %rax
	jb	.LBB63_24
.LBB63_22:                              # %"$7.i"
	leaq	(%rax,%rax), %rdx
	movl	$2, %r8d
	shldq	$62, %rdx, %r8
	addq	%rax, %rax
	movq	%r8, (%rcx)
	jb	.LBB63_24
# %bb.23:                               # %"$9.i"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%r14, %rdx
	callq	db
	addq	$32, %rsp
.LBB63_24:                              # %"$19"
	movq	(%r14), %r12
	testb	$15, %r12b
	jne	.LBB63_31
# %bb.25:                               # %"$21"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%r12, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r15, env(%rip)
	movq	(%r12), %rcx
	movq	8(%r12), %rdi
	subq	$32, %rsp
	leaq	SymTab+8(%rip), %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %r12
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%r12, (%rax)
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%rcx, (%rdx)
	movq	%rax, env(%rip)
	cmpq	$1, %rsi
	je	.LBB63_30
# %bb.26:                               # %"$21"
	movl	%edi, %eax
	andl	$15, %eax
	testq	%rax, %rax
	jne	.LBB63_30
# %bb.27:                               # %"$26.preheader"
	addq	$-2, %rsi
	leaq	SymTab+8(%rip), %r13
	movq	%r12, %rbx
	.p2align	4, 0x90
.LBB63_28:                              # %"$26"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rcx
	movq	8(%rdi), %rdi
	subq	$32, %rsp
	movq	%r13, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, 8(%rbx)
	addq	$-1, %rsi
	jae	.LBB63_30
# %bb.29:                               # %"$26"
                                        #   in Loop: Header=BB63_28 Depth=1
	movl	%edi, %ecx
	andl	$15, %ecx
	testq	%rcx, %rcx
	movq	%rax, %rbx
	je	.LBB63_28
.LBB63_30:                              # %"$27"
	movq	%rdi, (%r14)
	movq	8(%r15), %rax
	movq	%rax, env(%rip)
.LBB63_31:                              # %"$4"
	movq	%r12, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB63_32:                              # %"$2.i.i"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	cntErr
.LBB63_33:                              # %"$10"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%r14, %rdx
	callq	varErr
.LBB63_34:                              # %"$14"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%r14, %rdx
	callq	protErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _del;
	.scl	2;
	.type	32;
	.endef
	.globl	_del                            # -- Begin function _del
	.p2align	4, 0x90
_del:                                   # @_del
.seh_proc _del
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$24, %rsp
	.seh_stackalloc 24
	leaq	16(%rsp), %rbp
	.seh_setframe %rbp, 16
	.seh_endprologue
	movq	%rcx, %rbx
	movq	8(%rcx), %rax
	movq	(%rax), %r15
	movq	8(%rax), %rsi
	testb	$6, %r15b
	jne	.LBB64_4
# %bb.1:                                # %"$3"
	testb	$8, %r15b
	jne	.LBB64_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%r15, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r15
	jmp	.LBB64_4
.LBB64_2:                               # %"$6"
	movq	(%r15), %r15
.LBB64_4:                               # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r12
	movq	%r15, (%r12)
	movq	%r12, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r12, env(%rip)
	movq	(%rsi), %r13
	movq	8(%rsi), %rdi
	testb	$6, %r13b
	jne	.LBB64_8
# %bb.5:                                # %"$8"
	testb	$8, %r13b
	jne	.LBB64_6
# %bb.7:                                # %"$10"
	subq	$32, %rsp
	movq	%r13, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r13
	jmp	.LBB64_8
.LBB64_6:                               # %"$11"
	movq	(%r13), %r13
.LBB64_8:                               # %"$7"
	testb	$6, %r13b
	jne	.LBB64_44
# %bb.9:                                # %"$13"
	leaq	SymTab+8(%rip), %rsi
	cmpq	%rsi, %r13
	jb	.LBB64_11
# %bb.10:                               # %"$13"
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, %r13
	jbe	.LBB64_45
.LBB64_11:                              # %"$17"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%r13, (%rax)
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%rcx, (%rdx)
	movq	%rax, env(%rip)
	movq	(%rdi), %r14
	testb	$6, %r14b
	jne	.LBB64_15
# %bb.12:                               # %"$19"
	testb	$8, %r14b
	jne	.LBB64_13
# %bb.14:                               # %"$21"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r14
.LBB64_15:                              # %"$18"
	testb	$8, %r13b
	je	.LBB64_25
.LBB64_16:                              # %"$24"
	movq	-8(%r13), %rax
	testb	$8, %al
	je	.LBB64_25
# %bb.17:                               # %"$25"
	testb	$6, %al
	je	.LBB64_19
# %bb.18:
	leaq	-8(%r13), %rcx
	addq	%rax, %rax
	jae	.LBB64_23
	jmp	.LBB64_25
.LBB64_13:                              # %"$22"
	movq	(%r14), %r14
	testb	$8, %r13b
	jne	.LBB64_16
	jmp	.LBB64_25
.LBB64_19:                              # %"$2.i"
	andq	$-9, %rax
	.p2align	4, 0x90
.LBB64_20:                              # %"$4.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rcx
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB64_20
# %bb.21:
	addq	$8, %rcx
	addq	%rax, %rax
	jb	.LBB64_25
.LBB64_23:                              # %"$7.i"
	leaq	(%rax,%rax), %rdx
	movl	$2, %r8d
	shldq	$62, %rdx, %r8
	addq	%rax, %rax
	movq	%r8, (%rcx)
	jb	.LBB64_25
# %bb.24:                               # %"$9.i"
	subq	$32, %rsp
	movq	%rbx, %rcx
	movq	%r13, %rdx
	callq	db
	addq	$32, %rsp
.LBB64_25:                              # %"$26"
	cmpq	%rsi, %r14
	movq	(%r13), %rbx
	jne	.LBB64_26
# %bb.30:                               # %"$27.us"
	testb	$15, %bl
	jne	.LBB64_43
# %bb.31:                               # %"$28.us"
	movq	(%rbx), %rsi
	movq	8(%rbx), %rbx
	subq	$32, %rsp
	movq	%r15, %rcx
	movq	%rsi, %rdx
	callq	equal
	addq	$32, %rsp
	testb	$1, %al
	je	.LBB64_28
# %bb.32:                               # %"$31.us"
	movq	%rbx, (%r13)
	jmp	.LBB64_43
	.p2align	4, 0x90
.LBB64_26:                              # %"$27.preheader"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %bl
	jne	.LBB64_43
# %bb.27:                               # %"$28"
                                        #   in Loop: Header=BB64_26 Depth=1
	movq	(%rbx), %rsi
	movq	8(%rbx), %rbx
	subq	$32, %rsp
	movq	%r15, %rcx
	movq	%rsi, %rdx
	callq	equal
	addq	$32, %rsp
	testb	$1, %al
	je	.LBB64_28
# %bb.46:                               # %"$31"
                                        #   in Loop: Header=BB64_26 Depth=1
	movq	%rbx, (%r13)
	jmp	.LBB64_26
.LBB64_28:
	movq	%r12, (%rbp)                    # 8-byte Spill
	movq	%rbx, %r12
	subq	$32, %rsp
	leaq	SymTab+8(%rip), %rdi
	movq	%rsi, %rcx
	movq	%rdi, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rbx
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdx
	movq	%rbx, (%rdx)
	movq	%rdx, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rdx, -8(%rbp)                  # 8-byte Spill
	movq	%rdx, env(%rip)
	testb	$15, %r12b
	je	.LBB64_33
# %bb.29:
	movq	%rbx, %rsi
.LBB64_42:                              # %"$35"
	movq	-8(%rbp), %rax                  # 8-byte Reload
	movq	8(%rax), %rax
	movq	%rax, env(%rip)
	movq	%r12, 8(%rsi)
	movq	%rbx, (%r13)
	movq	(%rbp), %r12                    # 8-byte Reload
.LBB64_43:                              # %"$29"
	movq	8(%r12), %rax
	movq	%rax, env(%rip)
	movq	%rbx, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB64_33:                              # %"$34.lr.ph"
	cmpq	%rdi, %r14
	jne	.LBB64_34
# %bb.38:                               # %"$34.us.preheader"
	leaq	SymTab+8(%rip), %r14
	movq	%rbx, %rdi
	.p2align	4, 0x90
.LBB64_39:                              # %"$34.us"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r12), %rsi
	movq	8(%r12), %r12
	subq	$32, %rsp
	movq	%r15, %rcx
	movq	%rsi, %rdx
	callq	equal
	addq	$32, %rsp
	testb	$1, %al
	jne	.LBB64_40
# %bb.41:                               # %"$37.us"
                                        #   in Loop: Header=BB64_39 Depth=1
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%r14, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rsi
	movq	%rax, 8(%rdi)
	testb	$15, %r12b
	movq	%rax, %rdi
	je	.LBB64_39
	jmp	.LBB64_42
.LBB64_34:
	leaq	SymTab+8(%rip), %r14
	movq	%rbx, %rsi
	jmp	.LBB64_35
	.p2align	4, 0x90
.LBB64_37:                              # %"$38"
                                        #   in Loop: Header=BB64_35 Depth=1
	testb	$15, %r12b
	jne	.LBB64_42
.LBB64_35:                              # %"$34"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r12), %rdi
	movq	8(%r12), %r12
	subq	$32, %rsp
	movq	%r15, %rcx
	movq	%rdi, %rdx
	callq	equal
	addq	$32, %rsp
	testb	$1, %al
	jne	.LBB64_37
# %bb.36:                               # %"$37"
                                        #   in Loop: Header=BB64_35 Depth=1
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%r14, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, 8(%rsi)
	movq	%rax, %rsi
	jmp	.LBB64_37
.LBB64_40:
	movq	%rdi, %rsi
	jmp	.LBB64_42
.LBB64_44:                              # %"$12"
	subq	$32, %rsp
	movq	%rbx, %rcx
	movq	%r13, %rdx
	callq	varErr
.LBB64_45:                              # %"$16"
	subq	$32, %rsp
	movq	%rbx, %rcx
	movq	%r13, %rdx
	callq	protErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _queue;
	.scl	2;
	.type	32;
	.endef
	.globl	_queue                          # -- Begin function _queue
	.p2align	4, 0x90
_queue:                                 # @_queue
.seh_proc _queue
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rdi
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %r14
	testb	$6, %sil
	jne	.LBB65_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB65_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB65_4
.LBB65_2:                               # %"$6"
	movq	(%rsi), %rsi
.LBB65_4:                               # %"$2"
	testb	$6, %sil
	jne	.LBB65_25
# %bb.5:                                # %"$8"
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rsi
	jb	.LBB65_7
# %bb.6:                                # %"$8"
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, %rsi
	jbe	.LBB65_26
.LBB65_7:                               # %"$12"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rsi, (%rbx)
	movq	%rbx, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rbx, env(%rip)
	testb	$8, %sil
	je	.LBB65_17
# %bb.8:                                # %"$14"
	movq	-8(%rsi), %rax
	testb	$8, %al
	je	.LBB65_17
# %bb.9:                                # %"$15"
	testb	$6, %al
	je	.LBB65_11
# %bb.10:
	leaq	-8(%rsi), %rcx
	addq	%rax, %rax
	jae	.LBB65_15
	jmp	.LBB65_17
.LBB65_11:                              # %"$2.i"
	andq	$-9, %rax
	.p2align	4, 0x90
.LBB65_12:                              # %"$4.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rcx
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB65_12
# %bb.13:
	addq	$8, %rcx
	addq	%rax, %rax
	jb	.LBB65_17
.LBB65_15:                              # %"$7.i"
	leaq	(%rax,%rax), %rdx
	movl	$2, %r8d
	shldq	$62, %rdx, %r8
	addq	%rax, %rax
	movq	%r8, (%rcx)
	jb	.LBB65_17
# %bb.16:                               # %"$9.i"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	db
	addq	$32, %rsp
.LBB65_17:                              # %"$16"
	movq	(%r14), %rdi
	testb	$6, %dil
	jne	.LBB65_21
# %bb.18:                               # %"$18"
	testb	$8, %dil
	jne	.LBB65_19
# %bb.20:                               # %"$20"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdi
	jmp	.LBB65_21
.LBB65_19:                              # %"$21"
	movq	(%rdi), %rdi
.LBB65_21:                              # %"$17"
	subq	$32, %rsp
	leaq	SymTab+8(%rip), %rdx
	movq	%rdi, %rcx
	callq	cons
	addq	$32, %rsp
	movq	(%rsi), %rcx
	testb	$15, %cl
	jne	.LBB65_24
	.p2align	4, 0x90
.LBB65_22:                              # %"$25"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rcx, %rsi
	movq	8(%rcx), %rcx
	testb	$15, %cl
	je	.LBB65_22
# %bb.23:
	addq	$8, %rsi
.LBB65_24:                              # %"$24"
	movq	%rax, (%rsi)
	movq	8(%rbx), %rax
	movq	%rax, env(%rip)
	movq	%rdi, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	retq
.LBB65_25:                              # %"$7"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	varErr
.LBB65_26:                              # %"$11"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	protErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _fifo;
	.scl	2;
	.type	32;
	.endef
	.globl	_fifo                           # -- Begin function _fifo
	.p2align	4, 0x90
_fifo:                                  # @_fifo
.seh_proc _fifo
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rbx
	movq	8(%rcx), %rax
	movq	(%rax), %r13
	movq	8(%rax), %r15
	testb	$6, %r13b
	jne	.LBB66_4
# %bb.1:                                # %"$3"
	testb	$8, %r13b
	jne	.LBB66_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%r13, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r13
	jmp	.LBB66_4
.LBB66_2:                               # %"$6"
	movq	(%r13), %r13
.LBB66_4:                               # %"$2"
	testb	$6, %r13b
	jne	.LBB66_38
# %bb.5:                                # %"$8"
	leaq	SymTab+8(%rip), %rdi
	cmpq	%rdi, %r13
	jb	.LBB66_7
# %bb.6:                                # %"$8"
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, %r13
	jbe	.LBB66_39
.LBB66_7:                               # %"$12"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%r13, (%r14)
	movq	%r14, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r14, env(%rip)
	testb	$8, %r13b
	je	.LBB66_17
# %bb.8:                                # %"$14"
	movq	-8(%r13), %rax
	testb	$8, %al
	je	.LBB66_17
# %bb.9:                                # %"$15"
	testb	$6, %al
	je	.LBB66_11
# %bb.10:
	leaq	-8(%r13), %rcx
	addq	%rax, %rax
	jae	.LBB66_15
	jmp	.LBB66_17
.LBB66_11:                              # %"$2.i"
	andq	$-9, %rax
	.p2align	4, 0x90
.LBB66_12:                              # %"$4.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rcx
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB66_12
# %bb.13:
	addq	$8, %rcx
	addq	%rax, %rax
	jb	.LBB66_17
.LBB66_15:                              # %"$7.i"
	leaq	(%rax,%rax), %rdx
	movl	$2, %r8d
	shldq	$62, %rdx, %r8
	addq	%rax, %rax
	movq	%r8, (%rcx)
	jb	.LBB66_17
# %bb.16:                               # %"$9.i"
	subq	$32, %rsp
	movq	%rbx, %rcx
	movq	%r13, %rdx
	callq	db
	addq	$32, %rsp
.LBB66_17:                              # %"$16"
	movq	(%r13), %r12
	testb	$15, %r15b
	je	.LBB66_18
# %bb.33:                               # %"$18"
	testb	$15, %r12b
	jne	.LBB66_37
# %bb.34:                               # %"$36"
	movq	8(%r12), %rax
	cmpq	%r12, %rax
	jne	.LBB66_36
# %bb.35:                               # %"$39"
	leaq	SymTab+8(%rip), %rax
	movq	%rax, (%r13)
	movq	(%r12), %rdi
	jmp	.LBB66_37
.LBB66_18:                              # %"$19"
	movq	(%r15), %rdi
	testb	$6, %dil
	jne	.LBB66_22
# %bb.19:                               # %"$21"
	testb	$8, %dil
	jne	.LBB66_20
# %bb.21:                               # %"$23"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdi
.LBB66_22:                              # %"$20"
	testb	$15, %r12b
	je	.LBB66_23
.LBB66_24:                              # %"$26"
	subq	$32, %rsp
	movl	$10, %edx
	movq	%rdi, %rcx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rbx
	movq	%rax, 8(%rax)
	jmp	.LBB66_25
.LBB66_36:                              # %"$38"
	movq	8(%rax), %rcx
	movq	%rcx, 8(%r12)
	movq	(%rax), %rdi
	jmp	.LBB66_37
.LBB66_20:                              # %"$24"
	movq	(%rdi), %rdi
	testb	$15, %r12b
	jne	.LBB66_24
.LBB66_23:                              # %"$25"
	movq	8(%r12), %rdx
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rbx
	movq	%rax, 8(%r12)
.LBB66_25:                              # %"$27"
	movq	8(%r15), %rsi
	testb	$15, %sil
	je	.LBB66_27
# %bb.26:
	movq	%rbx, %rax
	movq	%rbx, (%r13)
	jmp	.LBB66_37
.LBB66_30:                              # %"$34"
                                        #   in Loop: Header=BB66_27 Depth=1
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdi
	.p2align	4, 0x90
.LBB66_31:                              # %"$31"
                                        #   in Loop: Header=BB66_27 Depth=1
	movq	8(%rbx), %rdx
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	cons
	addq	$32, %rsp
	movq	%rax, 8(%rbx)
	movq	8(%rsi), %rsi
	testb	$15, %sil
	movq	%rax, %rbx
	jne	.LBB66_32
.LBB66_27:                              # %"$29"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rdi
	testb	$6, %dil
	jne	.LBB66_31
# %bb.28:                               # %"$32"
                                        #   in Loop: Header=BB66_27 Depth=1
	testb	$8, %dil
	je	.LBB66_30
# %bb.29:                               # %"$35"
                                        #   in Loop: Header=BB66_27 Depth=1
	movq	(%rdi), %rdi
	jmp	.LBB66_31
.LBB66_32:                              # %"$30"
	movq	%rax, (%r13)
.LBB66_37:                              # %"$17"
	movq	8(%r14), %rax
	movq	%rax, env(%rip)
	movq	%rdi, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB66_38:                              # %"$7"
	subq	$32, %rsp
	movq	%rbx, %rcx
	movq	%r13, %rdx
	callq	varErr
.LBB66_39:                              # %"$11"
	subq	$32, %rsp
	movq	%rbx, %rcx
	movq	%r13, %rdx
	callq	protErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _rid;
	.scl	2;
	.type	32;
	.endef
	.globl	_rid                            # -- Begin function _rid
	.p2align	4, 0x90
_rid:                                   # @_rid
.seh_proc _rid
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rdi
	movq	8(%rcx), %rax
	movq	(%rax), %r14
	movq	8(%rax), %rbx
	testb	$6, %r14b
	jne	.LBB67_4
# %bb.1:                                # %"$3"
	testb	$8, %r14b
	jne	.LBB67_3
# %bb.2:                                # %"$5"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r14
	jmp	.LBB67_4
.LBB67_3:                               # %"$6"
	movq	(%r14), %r14
.LBB67_4:                               # %"$2"
	testb	$6, %r14b
	jne	.LBB67_38
# %bb.5:                                # %"$8"
	leaq	SymTab+8(%rip), %rsi
	cmpq	%rsi, %r14
	jb	.LBB67_7
# %bb.6:                                # %"$8"
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, %r14
	jbe	.LBB67_39
.LBB67_7:                               # %"$12"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%r14, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r15, env(%rip)
	testb	$8, %r14b
	je	.LBB67_16
# %bb.8:                                # %"$14"
	movq	-8(%r14), %rax
	testb	$8, %al
	je	.LBB67_16
# %bb.9:                                # %"$15"
	testb	$6, %al
	je	.LBB67_11
# %bb.10:
	leaq	-8(%r14), %rcx
	addq	%rax, %rax
	jae	.LBB67_14
	jmp	.LBB67_16
.LBB67_11:                              # %"$2.i"
	andq	$-9, %rax
	.p2align	4, 0x90
.LBB67_12:                              # %"$4.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rcx
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB67_12
# %bb.13:
	addq	$8, %rcx
	addq	%rax, %rax
	jb	.LBB67_16
.LBB67_14:                              # %"$7.i"
	leaq	(%rax,%rax), %rdx
	movl	$2, %r8d
	shldq	$62, %rdx, %r8
	addq	%rax, %rax
	movq	%r8, (%rcx)
	jb	.LBB67_16
# %bb.15:                               # %"$9.i"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%r14, %rdx
	callq	db
	addq	$32, %rsp
.LBB67_16:                              # %"$16"
	movq	(%rbx), %r12
	testb	$6, %r12b
	jne	.LBB67_20
# %bb.17:                               # %"$18"
	testb	$8, %r12b
	jne	.LBB67_19
# %bb.18:                               # %"$20"
	subq	$32, %rsp
	movq	%r12, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r12
	jmp	.LBB67_20
.LBB67_19:                              # %"$21"
	movq	(%r12), %r12
.LBB67_20:                              # %"$17"
	movq	(%r14), %rdi
	testb	$15, %dil
	je	.LBB67_23
# %bb.21:                               # %"$23"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%r12, %rdx
	callq	equal
	addq	$32, %rsp
	testb	$1, %al
	je	.LBB67_33
# %bb.22:                               # %"$45"
	movq	%rsi, (%r14)
	movq	%rsi, %rdi
	jmp	.LBB67_33
.LBB67_23:                              # %"$24"
	movq	8(%rdi), %rsi
	movq	%rdi, %rbx
	testb	$15, %sil
	je	.LBB67_25
	jmp	.LBB67_28
	.p2align	4, 0x90
.LBB67_24:                              # %"$42"
                                        #   in Loop: Header=BB67_25 Depth=1
	movq	8(%rbx), %rbx
	movq	8(%rbx), %rsi
	testb	$15, %sil
	jne	.LBB67_28
.LBB67_25:                              # %"$26"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rcx
	subq	$32, %rsp
	movq	%r12, %rdx
	callq	equal
	addq	$32, %rsp
	cmpq	%rdi, %rsi
	je	.LBB67_34
# %bb.26:                               # %"$34"
                                        #   in Loop: Header=BB67_25 Depth=1
	testb	$1, %al
	je	.LBB67_24
# %bb.27:                               # %"$41"
                                        #   in Loop: Header=BB67_25 Depth=1
	movq	8(%rsi), %rsi
	movq	%rsi, 8(%rbx)
	testb	$15, %sil
	je	.LBB67_25
.LBB67_28:                              # %"$28"
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%r12, %rdx
	callq	equal
	addq	$32, %rsp
	testb	$1, %al
	je	.LBB67_30
# %bb.29:                               # %"$29"
	leaq	SymTab+8(%rip), %rax
	movq	%rax, 8(%rbx)
.LBB67_30:                              # %"$30"
	movq	(%rdi), %rcx
	subq	$32, %rsp
	movq	%r12, %rdx
	callq	equal
	addq	$32, %rsp
	testb	$1, %al
	je	.LBB67_33
# %bb.31:                               # %"$31"
	movq	8(%rdi), %rdi
.LBB67_32:                              # %"$22"
	movq	%rdi, (%r14)
.LBB67_33:                              # %"$22"
	movq	8(%r15), %rax
	movq	%rax, env(%rip)
	movq	%rdi, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB67_34:                              # %"$35"
	testb	$1, %al
	je	.LBB67_33
# %bb.35:                               # %"$37"
	cmpq	%rbx, %rdi
	jne	.LBB67_37
# %bb.36:                               # %"$39"
	leaq	SymTab+8(%rip), %rdi
	jmp	.LBB67_32
.LBB67_37:                              # %"$40"
	movq	8(%rsi), %rax
	movq	%rax, 8(%rbx)
	movq	%rbx, (%r14)
	movq	%rbx, %rdi
	jmp	.LBB67_33
.LBB67_38:                              # %"$7"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%r14, %rdx
	callq	varErr
.LBB67_39:                              # %"$11"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%r14, %rdx
	callq	protErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _enum;
	.scl	2;
	.type	32;
	.endef
	.globl	_enum                           # -- Begin function _enum
	.p2align	4, 0x90
_enum:                                  # @_enum
.seh_proc _enum
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$24, %rsp
	.seh_stackalloc 24
	leaq	16(%rsp), %rbp
	.seh_setframe %rbp, 16
	.seh_endprologue
	movq	%rcx, %r15
	movq	8(%rcx), %rax
	movq	(%rax), %rbx
	movq	8(%rax), %r12
	testb	$6, %bl
	jne	.LBB68_4
# %bb.1:                                # %"$3"
	testb	$8, %bl
	jne	.LBB68_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rbx
	jmp	.LBB68_4
.LBB68_2:                               # %"$6"
	movq	(%rbx), %rbx
.LBB68_4:                               # %"$2"
	testb	$6, %bl
	jne	.LBB68_47
# %bb.5:                                # %"$8"
	leaq	SymTab+8(%rip), %r14
	cmpq	%r14, %rbx
	jb	.LBB68_7
# %bb.6:                                # %"$8"
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, %rbx
	jbe	.LBB68_48
.LBB68_7:                               # %"$12"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r13
	movq	%rbx, (%r13)
	movq	%r13, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r13, env(%rip)
	testb	$15, %r12b
	je	.LBB68_8
# %bb.33:                               # %"$14"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r12
	movq	%r13, (%rbp)                    # 8-byte Spill
	movq	%r13, 8(%r12)
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r13
	movq	$10, (%r13)
	movq	%r12, 8(%r13)
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%r14, (%rax)
	movq	%r13, 8(%rax)
	movq	%rax, -8(%rbp)                  # 8-byte Spill
	movq	%rax, env(%rip)
	movq	(%rbx), %rax
	movl	$1, %ebx
	movl	$10, %ecx
	xorl	%esi, %esi
.LBB68_34:                              # %"$42"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_37 Depth 2
                                        #     Child Loop BB68_39 Depth 2
                                        #       Child Loop BB68_44 Depth 3
	movq	8(%rax), %rdx
	movq	8(%rdx), %rdi
	testb	$15, %dil
	je	.LBB68_36
# %bb.35:                               #   in Loop: Header=BB68_34 Depth=1
	movq	%rax, %r15
	jmp	.LBB68_38
	.p2align	4, 0x90
.LBB68_36:                              # %"$44.preheader"
                                        #   in Loop: Header=BB68_34 Depth=1
	addq	$8, %rdx
	.p2align	4, 0x90
.LBB68_37:                              # %"$44"
                                        #   Parent Loop BB68_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rdi, %r15
	movq	%rcx, (%rdx)
	movq	%rax, (%r13)
	orq	%rbx, %rsi
	addq	%rbx, %rbx
	movq	8(%rdi), %rdx
	movq	8(%rdx), %rdi
	addq	$8, %rdx
	testb	$15, %dil
	movq	%rax, %rcx
	movq	%r15, %rax
	je	.LBB68_37
.LBB68_38:                              # %"$46.preheader"
                                        #   in Loop: Header=BB68_34 Depth=1
	movq	-8(%rbp), %rdi                  # 8-byte Reload
.LBB68_39:                              # %"$46"
                                        #   Parent Loop BB68_34 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_44 Depth 3
	movq	%r15, (%r12)
	movq	(%r15), %rdx
	cmpq	%r14, %rdx
	je	.LBB68_41
# %bb.40:                               # %"$47"
                                        #   in Loop: Header=BB68_39 Depth=2
	movq	%rbx, %rcx
	orq	%rsi, %rcx
	shlq	$4, %rcx
	orq	$2, %rcx
	subq	$32, %rsp
	callq	cons
	addq	$32, %rsp
	movq	(%rdi), %rdx
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	cons
	addq	$32, %rsp
	movq	%rax, (%rdi)
.LBB68_41:                              # %"$48"
                                        #   in Loop: Header=BB68_39 Depth=2
	movq	8(%r15), %rdx
	movq	(%rdx), %rax
	testb	$15, %al
	movq	(%r13), %rcx
	je	.LBB68_50
	.p2align	4, 0x90
# %bb.42:                               # %"$52.preheader"
                                        #   in Loop: Header=BB68_39 Depth=2
	cmpq	$10, %rcx
	je	.LBB68_43
.LBB68_44:                              # %"$54"
                                        #   Parent Loop BB68_34 Depth=1
                                        #     Parent Loop BB68_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	testb	$8, %cl
	je	.LBB68_45
# %bb.46:                               # %"$55"
                                        #   in Loop: Header=BB68_44 Depth=3
	andq	$-9, %rcx
	shrq	%rbx
	movq	%rbx, %rax
	notq	%rax
	andq	%rax, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rdx
	movq	%rdx, (%r13)
	movq	%r15, (%rax)
	movq	%rcx, (%r12)
	movq	%rcx, %r15
	movq	(%r13), %rcx
	cmpq	$10, %rcx
	jne	.LBB68_44
	jmp	.LBB68_43
	.p2align	4, 0x90
.LBB68_45:                              # %"$57"
                                        #   in Loop: Header=BB68_39 Depth=2
	shrq	%rbx
	movq	%rbx, %rax
	notq	%rax
	andq	%rax, %rsi
	movq	8(%rcx), %rax
	movq	8(%rax), %rdx
	movq	%rdx, (%r13)
	movq	%r15, 8(%rax)
	movq	%rcx, %r15
	jmp	.LBB68_39
.LBB68_50:                              # %"$51"
                                        #   in Loop: Header=BB68_34 Depth=1
	movq	%rcx, (%rdx)
	orq	$8, %r15
	movq	%r15, (%r13)
	movq	%rax, (%r12)
	addq	%rbx, %rbx
	movq	%r15, %rcx
	jmp	.LBB68_34
	.p2align	4, 0x90
.LBB68_19:                              # %"$22"
                                        #   in Loop: Header=BB68_8 Depth=1
	movq	8(%r12), %r12
	testb	$15, %r12b
	movq	%rsi, %rbx
	jne	.LBB68_20
.LBB68_8:                               # %"$16"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_15 Depth 2
                                        #       Child Loop BB68_16 Depth 3
	movq	(%r12), %rax
	testb	$6, %al
	jne	.LBB68_12
# %bb.9:                                # %"$3.i"
                                        #   in Loop: Header=BB68_8 Depth=1
	testb	$8, %al
	jne	.LBB68_10
# %bb.11:                               # %"$5.i"
                                        #   in Loop: Header=BB68_8 Depth=1
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB68_12
.LBB68_10:                              # %"$6.i"
                                        #   in Loop: Header=BB68_8 Depth=1
	movq	(%rax), %rax
	.p2align	4, 0x90
.LBB68_12:                              # %"$2.i"
                                        #   in Loop: Header=BB68_8 Depth=1
	testb	$2, %al
	je	.LBB68_49
# %bb.13:                               # %evCnt.exit
                                        #   in Loop: Header=BB68_8 Depth=1
	movq	%rax, %rcx
	shrq	$4, %rcx
	movq	%rcx, %rdi
	negq	%rdi
	testb	$8, %al
	cmoveq	%rcx, %rdi
	testq	%rdi, %rdi
	jle	.LBB68_14
.LBB68_15:                              # %"$17"
                                        #   Parent Loop BB68_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_16 Depth 3
	movq	(%rbx), %rsi
	jmp	.LBB68_16
	.p2align	4, 0x90
.LBB68_28:                              # %"$28"
                                        #   in Loop: Header=BB68_16 Depth=3
	testb	$15, %sil
	je	.LBB68_31
# %bb.29:                               # %"$37"
                                        #   in Loop: Header=BB68_16 Depth=3
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%r14, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rsi
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rax, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, (%rbx)
.LBB68_30:                              # %"$29"
                                        #   in Loop: Header=BB68_16 Depth=3
	movq	%rsi, %rbx
	movq	%r14, %rsi
.LBB68_16:                              # %"$17"
                                        #   Parent Loop BB68_8 Depth=1
                                        #     Parent Loop BB68_15 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rdi, %rax
	shrq	%rax
	je	.LBB68_17
# %bb.22:                               # %"$21"
                                        #   in Loop: Header=BB68_16 Depth=3
	testb	$1, %dil
	movq	%rax, %rdi
	je	.LBB68_28
# %bb.23:                               # %"$27"
                                        #   in Loop: Header=BB68_16 Depth=3
	testb	$15, %sil
	je	.LBB68_25
# %bb.24:                               # %"$32"
                                        #   in Loop: Header=BB68_16 Depth=3
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%r14, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rsi
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rax, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, (%rbx)
	addq	$8, %rsi
	jmp	.LBB68_30
.LBB68_31:                              # %"$36"
                                        #   in Loop: Header=BB68_16 Depth=3
	movq	8(%rsi), %rbx
	testb	$15, %bl
	je	.LBB68_15
# %bb.32:                               # %"$39"
                                        #   in Loop: Header=BB68_16 Depth=3
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%r14, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rbx
	movq	%rax, 8(%rsi)
	movq	%r14, %rsi
	jmp	.LBB68_16
.LBB68_25:                              # %"$31"
                                        #   in Loop: Header=BB68_16 Depth=3
	movq	8(%rsi), %rbx
	testb	$15, %bl
	je	.LBB68_27
# %bb.26:                               # %"$34"
                                        #   in Loop: Header=BB68_16 Depth=3
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%r14, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rbx
	movq	%rax, 8(%rsi)
	addq	$8, %rbx
	movq	%r14, %rsi
	jmp	.LBB68_16
.LBB68_27:                              # %"$33"
                                        #   in Loop: Header=BB68_16 Depth=3
	movq	8(%rbx), %rsi
	addq	$8, %rbx
	jmp	.LBB68_16
	.p2align	4, 0x90
.LBB68_17:                              # %"$23"
                                        #   in Loop: Header=BB68_8 Depth=1
	testb	$15, %sil
	je	.LBB68_19
# %bb.18:                               # %"$25"
                                        #   in Loop: Header=BB68_8 Depth=1
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%r14, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rsi
	movq	%rax, (%rbx)
	jmp	.LBB68_19
.LBB68_43:                              # %"$53"
	movq	(%rdi), %rax
	movq	(%rbp), %rcx                    # 8-byte Reload
	movq	8(%rcx), %rcx
	movq	%rcx, env(%rip)
	jmp	.LBB68_21
.LBB68_14:
	movq	%r14, %rsi
.LBB68_20:                              # %"$15"
	movq	8(%r13), %rax
	movq	%rax, env(%rip)
	movq	%rsi, %rax
.LBB68_21:                              # %"$15"
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB68_49:                              # %"$2.i.i"
	subq	$32, %rsp
	movq	%r15, %rcx
	movq	%rax, %rdx
	callq	cntErr
.LBB68_47:                              # %"$7"
	subq	$32, %rsp
	movq	%r15, %rcx
	movq	%rbx, %rdx
	callq	varErr
.LBB68_48:                              # %"$11"
	subq	$32, %rsp
	movq	%r15, %rcx
	movq	%rbx, %rdx
	callq	protErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _enumQ;
	.scl	2;
	.type	32;
	.endef
	.globl	_enumQ                          # -- Begin function _enumQ
	.p2align	4, 0x90
_enumQ:                                 # @_enumQ
.seh_proc _enumQ
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %r15
	movq	8(%rcx), %rax
	movq	(%rax), %rdi
	movq	8(%rax), %rbx
	testb	$6, %dil
	jne	.LBB69_4
# %bb.1:                                # %"$3"
	testb	$8, %dil
	jne	.LBB69_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdi
	jmp	.LBB69_4
.LBB69_2:                               # %"$6"
	movq	(%rdi), %rdi
.LBB69_4:                               # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rdi, (%rsi)
	movq	%rsi, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rsi, env(%rip)
	leaq	SymTab+8(%rip), %r14
.LBB69_5:                               # %"$7"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_12 Depth 2
	movq	(%rbx), %rax
	testb	$6, %al
	jne	.LBB69_9
# %bb.6:                                # %"$3.i"
                                        #   in Loop: Header=BB69_5 Depth=1
	testb	$8, %al
	jne	.LBB69_7
# %bb.8:                                # %"$5.i"
                                        #   in Loop: Header=BB69_5 Depth=1
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB69_9
.LBB69_7:                               # %"$6.i"
                                        #   in Loop: Header=BB69_5 Depth=1
	movq	(%rax), %rax
	.p2align	4, 0x90
.LBB69_9:                               # %"$2.i"
                                        #   in Loop: Header=BB69_5 Depth=1
	testb	$2, %al
	je	.LBB69_19
# %bb.10:                               # %evCnt.exit
                                        #   in Loop: Header=BB69_5 Depth=1
	movq	%rax, %rdx
	shrq	$4, %rdx
	movq	%rdx, %rcx
	negq	%rcx
	testb	$8, %al
	cmoveq	%rdx, %rcx
	testq	%rcx, %rcx
	jle	.LBB69_18
# %bb.11:                               # %"$11.preheader"
                                        #   in Loop: Header=BB69_5 Depth=1
	movq	%rcx, %rax
	.p2align	4, 0x90
.LBB69_12:                              # %"$11"
                                        #   Parent Loop BB69_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	shrq	%rax
	je	.LBB69_16
# %bb.13:                               # %"$12"
                                        #   in Loop: Header=BB69_12 Depth=2
	movq	8(%rdi), %rdx
	leaq	8(%rdx), %rdi
	testb	$1, %cl
	cmoveq	%rdx, %rdi
	movq	(%rdi), %rdi
	testb	$15, %dil
	movq	%rax, %rcx
	je	.LBB69_12
	jmp	.LBB69_14
	.p2align	4, 0x90
.LBB69_16:                              # %"$13"
                                        #   in Loop: Header=BB69_5 Depth=1
	movq	8(%rbx), %rbx
	testb	$15, %bl
	jne	.LBB69_17
# %bb.20:                               # %"$19"
                                        #   in Loop: Header=BB69_5 Depth=1
	movq	(%rdi), %rdi
	jmp	.LBB69_5
.LBB69_14:                              # %"$18"
	movq	8(%rsi), %rax
	movq	%rax, env(%rip)
	leaq	SymTab+8(%rip), %rax
.LBB69_15:                              # %"$18"
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB69_17:
	movq	%rdi, %r14
.LBB69_18:                              # %"$9"
	movq	8(%rsi), %rax
	movq	%rax, env(%rip)
	movq	%r14, %rax
	jmp	.LBB69_15
.LBB69_19:                              # %"$2.i.i"
	subq	$32, %rsp
	movq	%r15, %rcx
	movq	%rax, %rdx
	callq	cntErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _idx;
	.scl	2;
	.type	32;
	.endef
	.globl	_idx                            # -- Begin function _idx
	.p2align	4, 0x90
_idx:                                   # @_idx
.seh_proc _idx
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rbx
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rdi
	testb	$6, %sil
	jne	.LBB70_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB70_3
# %bb.2:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB70_4
.LBB70_3:                               # %"$6"
	movq	(%rsi), %rsi
.LBB70_4:                               # %"$2"
	testb	$6, %sil
	jne	.LBB70_29
# %bb.5:                                # %"$8"
	leaq	SymTab+8(%rip), %r15
	cmpq	%r15, %rsi
	jb	.LBB70_7
# %bb.6:                                # %"$8"
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, %rsi
	jbe	.LBB70_30
.LBB70_7:                               # %"$12"
	testb	$15, %dil
	je	.LBB70_9
# %bb.8:                                # %"$13"
	movq	(%rsi), %rcx
	leaq	SymTab+8(%rip), %rdx
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	consTree                        # TAILCALL
.LBB70_9:                               # %"$14"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%rsi, (%r14)
	movq	%r14, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r14, env(%rip)
	movq	(%rdi), %rbx
	movq	8(%rdi), %rdi
	testb	$6, %bl
	jne	.LBB70_14
# %bb.11:                               # %"$17"
	testb	$8, %bl
	jne	.LBB70_13
# %bb.12:                               # %"$19"
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rbx
	movq	env(%rip), %rcx
	jmp	.LBB70_15
.LBB70_13:                              # %"$20"
	movq	(%rbx), %rbx
.LBB70_14:                              # %"$16"
	movq	%r14, %rcx
.LBB70_15:                              # %"$16"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rbx, (%rax)
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%rcx, (%rdx)
	movq	%rax, env(%rip)
	testb	$15, %dil
	je	.LBB70_19
# %bb.16:                               # %"$23"
	movq	(%rsi), %rsi
	testb	$15, %sil
	jne	.LBB70_28
	.p2align	4, 0x90
.LBB70_17:                              # %"$3.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rcx
	subq	$32, %rsp
	movq	%rbx, %rdx
	callq	compare
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB70_22
# %bb.18:                               # %"$6.i"
                                        #   in Loop: Header=BB70_17 Depth=1
	movq	8(%rsi), %rcx
	leaq	8(%rcx), %rdx
	testq	%rax, %rax
	cmovnsq	%rcx, %rdx
	movq	(%rdx), %rsi
	testb	$15, %sil
	je	.LBB70_17
	jmp	.LBB70_28
.LBB70_19:                              # %"$22"
	movq	(%rdi), %rax
	testb	$6, %al
	jne	.LBB70_24
# %bb.20:                               # %"$25"
	testb	$8, %al
	jne	.LBB70_23
# %bb.21:                               # %"$27"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB70_24
.LBB70_22:
	movq	%rsi, %r15
	jmp	.LBB70_28
.LBB70_23:                              # %"$28"
	movq	(%rax), %rax
.LBB70_24:                              # %"$24"
	leaq	SymTab+8(%rip), %rcx
	subq	$32, %rsp
	cmpq	%rcx, %rax
	jne	.LBB70_26
# %bb.25:                               # %"$30"
	movq	%rsi, %rcx
	movq	%rbx, %rdx
	callq	idxDel
	jmp	.LBB70_27
.LBB70_26:                              # %"$29"
	movq	%rsi, %rcx
	movq	%rbx, %rdx
	callq	idxPut
.LBB70_27:                              # %"$21"
	addq	$32, %rsp
	movq	%rax, %r15
.LBB70_28:                              # %"$21"
	movq	8(%r14), %rax
	movq	%rax, env(%rip)
	movq	%r15, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB70_29:                              # %"$7"
	subq	$32, %rsp
	movq	%rbx, %rcx
	movq	%rsi, %rdx
	callq	varErr
.LBB70_30:                              # %"$11"
	subq	$32, %rsp
	movq	%rbx, %rcx
	movq	%rsi, %rdx
	callq	protErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _lup;
	.scl	2;
	.type	32;
	.endef
	.globl	_lup                            # -- Begin function _lup
	.p2align	4, 0x90
_lup:                                   # @_lup
.seh_proc _lup
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$24, %rsp
	.seh_stackalloc 24
	leaq	16(%rsp), %rbp
	.seh_setframe %rbp, 16
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rdi
	movq	8(%rax), %rsi
	testb	$6, %dil
	jne	.LBB71_4
# %bb.1:                                # %"$3"
	testb	$8, %dil
	jne	.LBB71_3
# %bb.2:                                # %"$5"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdi
	jmp	.LBB71_4
.LBB71_3:                               # %"$6"
	movq	(%rdi), %rdi
.LBB71_4:                               # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r13
	movq	%rdi, (%r13)
	movq	%r13, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r13, env(%rip)
	testb	$15, %dil
	jne	.LBB71_18
# %bb.5:                                # %"$8"
	movq	(%rsi), %r14
	movq	8(%rsi), %rsi
	testb	$6, %r14b
	je	.LBB71_6
# %bb.8:                                # %"$10"
	testb	$15, %sil
	je	.LBB71_21
.LBB71_9:                               # %"$18.preheader"
	leaq	SymTab+280(%rip), %rbx
	leaq	SymTab+8(%rip), %rsi
	jmp	.LBB71_12
	.p2align	4, 0x90
.LBB71_10:                              # %"$21"
                                        #   in Loop: Header=BB71_12 Depth=1
	movq	8(%rdi), %rcx
.LBB71_11:                              # %"$19"
                                        #   in Loop: Header=BB71_12 Depth=1
	movq	(%rcx), %rdi
	testb	$15, %dil
	jne	.LBB71_17
.LBB71_12:                              # %"$18"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rax
	cmpq	%rbx, %rax
	je	.LBB71_10
# %bb.13:                               # %"$20"
                                        #   in Loop: Header=BB71_12 Depth=1
	testb	$15, %al
	je	.LBB71_15
# %bb.14:                               # %"$23"
                                        #   in Loop: Header=BB71_12 Depth=1
	movq	8(%rdi), %rcx
	addq	$8, %rcx
	jmp	.LBB71_11
.LBB71_15:                              # %"$22"
                                        #   in Loop: Header=BB71_12 Depth=1
	movq	(%rax), %rcx
	subq	$32, %rsp
	movq	%r14, %rdx
	callq	compare
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB71_24
# %bb.16:                               # %"$24"
                                        #   in Loop: Header=BB71_12 Depth=1
	movq	8(%rdi), %rdx
	leaq	8(%rdx), %rcx
	testq	%rax, %rax
	cmovnsq	%rdx, %rcx
	jmp	.LBB71_11
.LBB71_17:
	movq	%rsi, %rdi
.LBB71_18:                              # %"$9"
	movq	8(%r13), %rax
	movq	%rax, env(%rip)
	movq	%rdi, %rax
.LBB71_19:                              # %"$56"
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB71_6:                               # %"$11"
	testb	$8, %r14b
	jne	.LBB71_20
# %bb.7:                                # %"$13"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r14
	testb	$15, %sil
	jne	.LBB71_9
	jmp	.LBB71_21
.LBB71_20:                              # %"$14"
	movq	(%r14), %r14
	testb	$15, %sil
	jne	.LBB71_9
.LBB71_21:                              # %"$16"
	movq	env(%rip), %rdx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%r14, (%rbx)
	movq	%rbx, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	%rbx, env(%rip)
	movq	(%rsi), %rcx
	testb	$6, %cl
	jne	.LBB71_26
# %bb.22:                               # %"$33"
	testb	$8, %cl
	jne	.LBB71_25
# %bb.23:                               # %"$35"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	movq	env(%rip), %rbx
	jmp	.LBB71_26
.LBB71_24:                              # %"$26"
	movq	(%rdi), %rdi
	jmp	.LBB71_18
.LBB71_25:                              # %"$36"
	movq	(%rcx), %rcx
.LBB71_26:                              # %"$32"
	movq	%r14, -16(%rbp)                 # 8-byte Spill
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdx
	movq	%rcx, -8(%rbp)                  # 8-byte Spill
	movq	%rcx, (%rdx)
	movq	%rdx, %rax
	orq	$8, %rax
	movq	%rbx, (%rax)
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rdx, 8(%rsi)
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	$10, (%rbx)
	movq	%rsi, 8(%rbx)
	movq	%rbx, env(%rip)
	leaq	SymTab+8(%rip), %rax
	movq	%rax, (%rbp)                    # 8-byte Spill
	movl	$10, %eax
	leaq	SymTab+280(%rip), %r8
.LBB71_27:                              # %"$37"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_31 Depth 2
                                        #     Child Loop BB71_38 Depth 2
                                        #       Child Loop BB71_44 Depth 3
	movq	8(%rdi), %r15
	movq	8(%r15), %rcx
	testb	$15, %cl
	je	.LBB71_29
.LBB71_28:                              #   in Loop: Header=BB71_27 Depth=1
	movq	%rdi, %r14
.LBB71_37:                              # %"$45.preheader"
                                        #   in Loop: Header=BB71_27 Depth=1
	movq	(%rbp), %r12                    # 8-byte Reload
.LBB71_38:                              # %"$45"
                                        #   Parent Loop BB71_27 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_44 Depth 3
	movq	%r14, (%rsi)
	movq	(%r14), %rdi
	testb	$15, %dil
	jne	.LBB71_44
# %bb.39:                               # %"$47"
                                        #   in Loop: Header=BB71_38 Depth=2
	movq	%r8, %r15
	movq	(%rdi), %rcx
	subq	$32, %rsp
	movq	-16(%rbp), %rdx                 # 8-byte Reload
	callq	compare
	addq	$32, %rsp
	testq	%rax, %rax
	js	.LBB71_43
# %bb.40:                               # %"$48"
                                        #   in Loop: Header=BB71_38 Depth=2
	movq	(%rdi), %rcx
	subq	$32, %rsp
	movq	-8(%rbp), %rdx                  # 8-byte Reload
	callq	compare
	addq	$32, %rsp
	testq	%rax, %rax
	jg	.LBB71_42
# %bb.41:                               # %"$50"
                                        #   in Loop: Header=BB71_38 Depth=2
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%r12, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %r12
.LBB71_42:                              # %"$51"
                                        #   in Loop: Header=BB71_38 Depth=2
	movq	8(%r14), %rax
	movq	(%rax), %rdi
	testb	$15, %dil
	movq	%r15, %r8
	jne	.LBB71_44
	jmp	.LBB71_48
.LBB71_43:                              #   in Loop: Header=BB71_38 Depth=2
	movq	%r15, %r8
	.p2align	4, 0x90
.LBB71_44:                              # %"$49"
                                        #   Parent Loop BB71_27 Depth=1
                                        #     Parent Loop BB71_38 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	(%rbx), %rax
	cmpq	$10, %rax
	je	.LBB71_49
# %bb.45:                               # %"$57"
                                        #   in Loop: Header=BB71_44 Depth=3
	testb	$8, %al
	je	.LBB71_47
# %bb.46:                               # %"$58"
                                        #   in Loop: Header=BB71_44 Depth=3
	andq	$-9, %rax
	movq	8(%rax), %rcx
	movq	(%rcx), %rdx
	movq	%rdx, (%rbx)
	movq	%r14, (%rcx)
	movq	%rax, (%rsi)
	movq	%rax, %r14
	jmp	.LBB71_44
.LBB71_47:                              # %"$60"
                                        #   in Loop: Header=BB71_38 Depth=2
	movq	8(%rax), %rcx
	movq	8(%rcx), %rdx
	movq	%rdx, (%rbx)
	movq	%r14, 8(%rcx)
	movq	%rax, %r14
	jmp	.LBB71_38
.LBB71_29:                              # %"$39.preheader"
                                        #   in Loop: Header=BB71_27 Depth=1
	addq	$8, %r15
	jmp	.LBB71_31
	.p2align	4, 0x90
.LBB71_30:                              # %"$44"
                                        #   in Loop: Header=BB71_31 Depth=2
	movq	%rax, (%r15)
	movq	%rdi, (%rbx)
	movq	8(%r14), %r15
	movq	8(%r15), %rcx
	addq	$8, %r15
	testb	$15, %cl
	movq	%rdi, %rax
	movq	%r14, %rdi
	jne	.LBB71_37
.LBB71_31:                              # %"$39"
                                        #   Parent Loop BB71_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rcx, %r14
	movq	(%rdi), %rcx
	cmpq	%r8, %rcx
	je	.LBB71_28
# %bb.32:                               # %"$41"
                                        #   in Loop: Header=BB71_31 Depth=2
	testb	$15, %cl
	jne	.LBB71_30
# %bb.33:                               # %"$43"
                                        #   in Loop: Header=BB71_31 Depth=2
	movq	%r8, %r12
	movq	(%rcx), %rcx
	subq	$32, %rsp
	movq	-8(%rbp), %rdx                  # 8-byte Reload
	callq	compare
	addq	$32, %rsp
	testq	%rax, %rax
	jg	.LBB71_36
# %bb.34:                               # %"$43.$44_crit_edge"
                                        #   in Loop: Header=BB71_31 Depth=2
	movq	(%rbx), %rax
	movq	%r12, %r8
	jmp	.LBB71_30
.LBB71_36:                              #   in Loop: Header=BB71_27 Depth=1
	movq	%rdi, %r14
	movq	%r12, %r8
	jmp	.LBB71_37
.LBB71_48:                              # %"$54"
                                        #   in Loop: Header=BB71_27 Depth=1
	movq	%r12, (%rbp)                    # 8-byte Spill
	movq	(%rbx), %rcx
	movq	%rcx, (%rax)
	orq	$8, %r14
	movq	%r14, (%rbx)
	movq	%rdi, (%rsi)
	movq	%r14, %rax
	jmp	.LBB71_27
.LBB71_49:                              # %"$56"
	movq	8(%r13), %rax
	movq	%rax, env(%rip)
	movq	%r12, %rax
	jmp	.LBB71_19
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _put;
	.scl	2;
	.type	32;
	.endef
	.globl	_put                            # -- Begin function _put
	.p2align	4, 0x90
_put:                                   # @_put
.seh_proc _put
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %r15
	movq	8(%rcx), %rax
	movq	(%rax), %rdi
	movq	8(%rax), %rsi
	testb	$6, %dil
	jne	.LBB72_4
# %bb.1:                                # %"$3"
	testb	$8, %dil
	jne	.LBB72_3
# %bb.2:                                # %"$5"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdi
	jmp	.LBB72_4
.LBB72_3:                               # %"$6"
	movq	(%rdi), %rdi
.LBB72_4:                               # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r12
	movq	%rdi, (%r12)
	movq	%r12, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r12, env(%rip)
	.p2align	4, 0x90
.LBB72_5:                               # %"$7"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rbx
	movq	8(%rsi), %rsi
	testb	$6, %bl
	je	.LBB72_6
# %bb.8:                                # %"$8"
                                        #   in Loop: Header=BB72_5 Depth=1
	testb	$15, 8(%rsi)
	jne	.LBB72_11
.LBB72_9:                               # %"$13"
                                        #   in Loop: Header=BB72_5 Depth=1
	subq	$32, %rsp
	movq	%r15, %rcx
	movq	%rdi, %rdx
	movq	%rbx, %r8
	callq	getn
	addq	$32, %rsp
	movq	%rax, %rdi
	movq	%rax, (%r12)
	jmp	.LBB72_5
	.p2align	4, 0x90
.LBB72_6:                               # %"$9"
                                        #   in Loop: Header=BB72_5 Depth=1
	testb	$8, %bl
	jne	.LBB72_10
# %bb.7:                                # %"$11"
                                        #   in Loop: Header=BB72_5 Depth=1
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rbx
	testb	$15, 8(%rsi)
	je	.LBB72_9
	jmp	.LBB72_11
.LBB72_10:                              # %"$12"
                                        #   in Loop: Header=BB72_5 Depth=1
	movq	(%rbx), %rbx
	testb	$15, 8(%rsi)
	je	.LBB72_9
.LBB72_11:                              # %"$14"
	testb	$6, %dil
	jne	.LBB72_49
# %bb.12:                               # %"$16"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rbx, (%rax)
	movq	env(%rip), %rcx
	movq	%rcx, 8(%rax)
	movq	%rax, env(%rip)
	movq	(%rsi), %r14
	testb	$6, %r14b
	je	.LBB72_13
# %bb.15:                               # %"$17"
	testb	$15, %dil
	je	.LBB72_28
.LBB72_16:                              # %"$23"
	movq	-8(%rdi), %rax
	testb	$8, %al
	jne	.LBB72_21
.LBB72_17:                              # %"$26"
	cmpq	$2, %rbx
	jne	.LBB72_26
# %bb.18:                               # %"$30"
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rdi
	jb	.LBB72_39
# %bb.19:                               # %"$30"
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, %rdi
	ja	.LBB72_39
# %bb.50:                               # %"$35"
	subq	$32, %rsp
	movq	%r15, %rcx
	movq	%rdi, %rdx
	callq	protErr
.LBB72_13:                              # %"$18"
	testb	$8, %r14b
	jne	.LBB72_27
# %bb.14:                               # %"$20"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r14
	testb	$15, %dil
	jne	.LBB72_16
	jmp	.LBB72_28
.LBB72_21:                              # %"$25"
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rbx
	jne	.LBB72_40
# %bb.22:                               # %"$27"
	testb	$6, %al
	je	.LBB72_17
# %bb.23:                               # %"$3.i12"
	addq	%rax, %rax
	jb	.LBB72_17
# %bb.24:                               # %"$2.i"
	addq	%rax, %rax
	jb	.LBB72_17
# %bb.25:                               # %"$5.i13"
	movl	$1, %r8d
	shldq	$62, %rax, %r8
	movq	%r8, -8(%rdi)
	jmp	.LBB72_48
.LBB72_26:                              # %"$31"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%rbx, %rdx
	movq	%r14, %r8
	callq	put
	addq	$32, %rsp
	jmp	.LBB72_43
.LBB72_27:                              # %"$21"
	movq	(%r14), %r14
	testb	$15, %dil
	jne	.LBB72_16
.LBB72_28:                              # %"$22"
	testb	$6, %bl
	je	.LBB72_35
# %bb.29:                               # %"$3.i"
	cmpq	$2, %rbx
	je	.LBB72_51
# %bb.30:                               # %"$14.i"
	movq	%rbx, %rax
	shrq	$4, %rax
	.p2align	4, 0x90
.LBB72_31:                              # %"$15.i"
                                        # =>This Inner Loop Header: Depth=1
	decq	%rax
	je	.LBB72_38
# %bb.32:                               # %"$16.i"
                                        #   in Loop: Header=BB72_31 Depth=1
	movq	8(%rdi), %rdi
	testb	$15, %dil
	je	.LBB72_31
.LBB72_33:                              # %"$11.i"
	subq	$32, %rsp
	movq	%r15, %rcx
	movq	%rbx, %rdx
	callq	itemErr
	.p2align	4, 0x90
.LBB72_34:                              # %"$8.i"
                                        #   in Loop: Header=BB72_35 Depth=1
	movq	8(%rdi), %rdi
	testb	$15, %dil
	jne	.LBB72_33
.LBB72_35:                              # %"$5.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rax
	testb	$15, %al
	jne	.LBB72_34
# %bb.36:                               # %"$7.i"
                                        #   in Loop: Header=BB72_35 Depth=1
	cmpq	%rbx, (%rax)
	jne	.LBB72_34
# %bb.37:                               # %"$10.i"
	movq	%r14, 8(%rax)
	jmp	.LBB72_43
.LBB72_38:                              # %"$17.i"
	testb	$8, %bl
	jne	.LBB72_42
.LBB72_39:                              # %"$21.i"
	movq	%r14, (%rdi)
	jmp	.LBB72_43
.LBB72_40:                              # %"$28"
	testb	$6, %al
	je	.LBB72_44
# %bb.41:
	leaq	-8(%rdi), %rcx
	addq	%rax, %rax
	jb	.LBB72_17
	jmp	.LBB72_47
.LBB72_42:                              # %"$20.i"
	movq	%r14, 8(%rdi)
.LBB72_43:                              # %"$24"
	movq	8(%r12), %rax
	movq	%rax, env(%rip)
	movq	%r14, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB72_44:                              # %"$2.i15"
	andq	$-9, %rax
	.p2align	4, 0x90
.LBB72_45:                              # %"$4.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rcx
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB72_45
# %bb.46:
	addq	$8, %rcx
	addq	%rax, %rax
	jb	.LBB72_17
.LBB72_47:                              # %"$7.i17"
	leaq	(%rax,%rax), %rdx
	movl	$2, %r8d
	shldq	$62, %rdx, %r8
	addq	%rax, %rax
	movq	%r8, (%rcx)
	jb	.LBB72_17
.LBB72_48:                              # %"$9.i"
	subq	$32, %rsp
	movq	%r15, %rcx
	movq	%rdi, %rdx
	callq	db
	addq	$32, %rsp
	jmp	.LBB72_17
.LBB72_49:                              # %"$15"
	subq	$32, %rsp
	movq	%r15, %rcx
	movq	%rdi, %rdx
	callq	argErr
.LBB72_51:                              # %"$13.i"
	subq	$32, %rsp
	movl	$2, %edx
	movq	%r15, %rcx
	callq	argErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _get;
	.scl	2;
	.type	32;
	.endef
	.globl	_get                            # -- Begin function _get
	.p2align	4, 0x90
_get:                                   # @_get
.seh_proc _get
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %r14
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rbx
	testb	$6, %sil
	jne	.LBB73_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB73_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
.LBB73_4:                               # %"$2"
	testb	$15, %bl
	jne	.LBB73_13
.LBB73_5:                               # %"$7"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rsi, (%rdi)
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rdi, env(%rip)
	.p2align	4, 0x90
.LBB73_6:                               # %"$9"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rbx), %r8
	movq	8(%rbx), %rbx
	testb	$6, %r8b
	jne	.LBB73_10
# %bb.7:                                # %"$11"
                                        #   in Loop: Header=BB73_6 Depth=1
	testb	$8, %r8b
	jne	.LBB73_8
# %bb.9:                                # %"$13"
                                        #   in Loop: Header=BB73_6 Depth=1
	subq	$32, %rsp
	movq	%r8, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r8
	jmp	.LBB73_10
.LBB73_8:                               # %"$14"
                                        #   in Loop: Header=BB73_6 Depth=1
	movq	(%r8), %r8
	.p2align	4, 0x90
.LBB73_10:                              # %"$10"
                                        #   in Loop: Header=BB73_6 Depth=1
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rsi, %rdx
	callq	getn
	addq	$32, %rsp
	movq	%rax, %rsi
	testb	$15, %bl
	jne	.LBB73_12
# %bb.11:                               # %"$15"
                                        #   in Loop: Header=BB73_6 Depth=1
	movq	%rsi, (%rdi)
	jmp	.LBB73_6
.LBB73_12:                              # %"$16"
	movq	8(%rdi), %rax
	movq	%rax, env(%rip)
	jmp	.LBB73_13
.LBB73_2:                               # %"$6"
	movq	(%rsi), %rsi
	testb	$15, %bl
	je	.LBB73_5
.LBB73_13:                              # %"$8"
	movq	%rsi, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _prop;
	.scl	2;
	.type	32;
	.endef
	.globl	_prop                           # -- Begin function _prop
	.p2align	4, 0x90
_prop:                                  # @_prop
.seh_proc _prop
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %r14
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rdi
	testb	$6, %sil
	jne	.LBB74_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB74_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB74_4
.LBB74_2:                               # %"$6"
	movq	(%rsi), %rsi
.LBB74_4:                               # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%rsi, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r15, env(%rip)
	.p2align	4, 0x90
.LBB74_5:                               # %"$7"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rbx
	movq	8(%rdi), %rdi
	testb	$6, %bl
	jne	.LBB74_9
# %bb.6:                                # %"$9"
                                        #   in Loop: Header=BB74_5 Depth=1
	testb	$8, %bl
	jne	.LBB74_7
# %bb.8:                                # %"$11"
                                        #   in Loop: Header=BB74_5 Depth=1
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rbx
	.p2align	4, 0x90
.LBB74_9:                               # %"$8"
                                        #   in Loop: Header=BB74_5 Depth=1
	testb	$15, %dil
	jne	.LBB74_11
.LBB74_10:                              # %"$13"
                                        #   in Loop: Header=BB74_5 Depth=1
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rsi, %rdx
	movq	%rbx, %r8
	callq	getn
	addq	$32, %rsp
	movq	%rax, %rsi
	movq	%rax, (%r15)
	jmp	.LBB74_5
.LBB74_7:                               # %"$12"
                                        #   in Loop: Header=BB74_5 Depth=1
	movq	(%rbx), %rbx
	testb	$15, %dil
	je	.LBB74_10
.LBB74_11:                              # %"$14"
	movl	%esi, %eax
	andl	$14, %eax
	cmpl	$8, %eax
	jne	.LBB74_27
# %bb.12:                               # %"$16"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rbx, (%rax)
	movq	env(%rip), %rcx
	movq	%rcx, 8(%rax)
	movq	%rax, env(%rip)
	movq	-8(%rsi), %rax
	testb	$8, %al
	jne	.LBB74_13
.LBB74_26:                              # %"$18"
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rbx, %rdx
	callq	prop
	addq	$32, %rsp
	movq	8(%r15), %rcx
	movq	%rcx, env(%rip)
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB74_13:                              # %"$17"
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rbx
	jne	.LBB74_18
# %bb.14:                               # %"$19"
	testb	$6, %al
	je	.LBB74_26
# %bb.15:                               # %"$3.i"
	addq	%rax, %rax
	jb	.LBB74_26
# %bb.16:                               # %"$2.i"
	addq	%rax, %rax
	jb	.LBB74_26
# %bb.17:                               # %"$5.i"
	movl	$1, %r8d
	shldq	$62, %rax, %r8
	movq	%r8, -8(%rsi)
	jmp	.LBB74_25
.LBB74_18:                              # %"$20"
	testb	$6, %al
	je	.LBB74_20
# %bb.19:
	leaq	-8(%rsi), %rcx
	addq	%rax, %rax
	jb	.LBB74_26
	jmp	.LBB74_24
.LBB74_20:                              # %"$2.i8"
	andq	$-9, %rax
	.p2align	4, 0x90
.LBB74_21:                              # %"$4.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rcx
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB74_21
# %bb.22:
	addq	$8, %rcx
	addq	%rax, %rax
	jb	.LBB74_26
.LBB74_24:                              # %"$7.i"
	leaq	(%rax,%rax), %rdx
	movl	$2, %r8d
	shldq	$62, %rdx, %r8
	addq	%rax, %rax
	movq	%r8, (%rcx)
	jb	.LBB74_26
.LBB74_25:                              # %"$9.i"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rsi, %rdx
	callq	db
	addq	$32, %rsp
	jmp	.LBB74_26
.LBB74_27:                              # %"$15"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rsi, %rdx
	callq	symErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _semicol;
	.scl	2;
	.type	32;
	.endef
	.globl	_semicol                        # -- Begin function _semicol
	.p2align	4, 0x90
_semicol:                               # @_semicol
.seh_proc _semicol
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rdx
	movq	8(%rax), %rbx
	testb	$6, %dl
	jne	.LBB75_4
# %bb.1:                                # %"$3"
	testb	$8, %dl
	jne	.LBB75_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rdx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdx
.LBB75_4:                               # %"$2"
	testb	$15, %bl
	jne	.LBB75_9
.LBB75_5:                               # %"$7"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rdx, (%rdi)
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rdi, env(%rip)
	.p2align	4, 0x90
.LBB75_7:                               # %"$10"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rbx), %r8
	movq	8(%rbx), %rbx
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	getn
	addq	$32, %rsp
	movq	%rax, %rdx
	testb	$15, %bl
	jne	.LBB75_8
# %bb.6:                                # %"$10"
                                        #   in Loop: Header=BB75_7 Depth=1
	movq	%rdx, (%rdi)
	jmp	.LBB75_7
.LBB75_8:                               # %"$11"
	movq	8(%rdi), %rax
	movq	%rax, env(%rip)
	jmp	.LBB75_9
.LBB75_2:                               # %"$6"
	movq	(%rdx), %rdx
	testb	$15, %bl
	je	.LBB75_5
.LBB75_9:                               # %"$8"
	movq	%rdx, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _setCol;
	.scl	2;
	.type	32;
	.endef
	.globl	_setCol                         # -- Begin function _setCol
	.p2align	4, 0x90
_setCol:                                # @_setCol
.seh_proc _setCol
# %bb.0:                                # %"$1"
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %r15
	movq	8(%rcx), %rax
	movq	SymTab+488(%rip), %rdi
	movq	(%rax), %rbx
	movq	8(%rax), %rsi
	testb	$15, 8(%rsi)
	jne	.LBB76_2
	.p2align	4, 0x90
.LBB76_1:                               # %"$3"
                                        # =>This Inner Loop Header: Depth=1
	movq	%r15, %rcx
	movq	%rdi, %rdx
	movq	%rbx, %r8
	callq	getn
	movq	%rax, %rdi
	movq	(%rsi), %rbx
	movq	8(%rsi), %rsi
	testb	$15, 8(%rsi)
	je	.LBB76_1
.LBB76_2:                               # %"$4"
	testb	$6, %dil
	jne	.LBB76_40
# %bb.3:                                # %"$6"
	movq	(%rsi), %r14
	testb	$6, %r14b
	je	.LBB76_4
# %bb.6:                                # %"$7"
	testb	$15, %dil
	je	.LBB76_19
.LBB76_7:                               # %"$13"
	movq	-8(%rdi), %rax
	testb	$8, %al
	jne	.LBB76_12
.LBB76_8:                               # %"$16"
	cmpq	$2, %rbx
	jne	.LBB76_17
# %bb.9:                                # %"$20"
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rdi
	jb	.LBB76_30
# %bb.10:                               # %"$20"
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, %rdi
	ja	.LBB76_30
# %bb.41:                               # %"$25"
	movq	%r15, %rcx
	movq	%rdi, %rdx
	callq	protErr
.LBB76_4:                               # %"$8"
	testb	$8, %r14b
	jne	.LBB76_18
# %bb.5:                                # %"$10"
	movq	%r14, %rcx
	callq	evList
	movq	%rax, %r14
	testb	$15, %dil
	jne	.LBB76_7
	jmp	.LBB76_19
.LBB76_12:                              # %"$15"
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rbx
	jne	.LBB76_31
# %bb.13:                               # %"$17"
	testb	$6, %al
	je	.LBB76_8
# %bb.14:                               # %"$3.i7"
	addq	%rax, %rax
	jb	.LBB76_8
# %bb.15:                               # %"$2.i"
	addq	%rax, %rax
	jb	.LBB76_8
# %bb.16:                               # %"$5.i8"
	movl	$1, %r8d
	shldq	$62, %rax, %r8
	movq	%r8, -8(%rdi)
	jmp	.LBB76_39
.LBB76_17:                              # %"$21"
	movq	%rdi, %rcx
	movq	%rbx, %rdx
	movq	%r14, %r8
	callq	put
	jmp	.LBB76_34
.LBB76_18:                              # %"$11"
	movq	(%r14), %r14
	testb	$15, %dil
	jne	.LBB76_7
.LBB76_19:                              # %"$12"
	testb	$6, %bl
	je	.LBB76_26
# %bb.20:                               # %"$3.i"
	cmpq	$2, %rbx
	je	.LBB76_42
# %bb.21:                               # %"$14.i"
	movq	%rbx, %rax
	shrq	$4, %rax
	.p2align	4, 0x90
.LBB76_22:                              # %"$15.i"
                                        # =>This Inner Loop Header: Depth=1
	decq	%rax
	je	.LBB76_29
# %bb.23:                               # %"$16.i"
                                        #   in Loop: Header=BB76_22 Depth=1
	movq	8(%rdi), %rdi
	testb	$15, %dil
	je	.LBB76_22
.LBB76_24:                              # %"$11.i"
	movq	%r15, %rcx
	movq	%rbx, %rdx
	callq	itemErr
	.p2align	4, 0x90
.LBB76_25:                              # %"$8.i"
                                        #   in Loop: Header=BB76_26 Depth=1
	movq	8(%rdi), %rdi
	testb	$15, %dil
	jne	.LBB76_24
.LBB76_26:                              # %"$5.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rax
	testb	$15, %al
	jne	.LBB76_25
# %bb.27:                               # %"$7.i"
                                        #   in Loop: Header=BB76_26 Depth=1
	cmpq	%rbx, (%rax)
	jne	.LBB76_25
# %bb.28:                               # %"$10.i"
	movq	%r14, 8(%rax)
	jmp	.LBB76_34
.LBB76_29:                              # %"$17.i"
	testb	$8, %bl
	jne	.LBB76_33
.LBB76_30:                              # %"$21.i"
	movq	%r14, (%rdi)
	jmp	.LBB76_34
.LBB76_31:                              # %"$18"
	testb	$6, %al
	je	.LBB76_35
# %bb.32:
	leaq	-8(%rdi), %rcx
	addq	%rax, %rax
	jb	.LBB76_8
	jmp	.LBB76_38
.LBB76_33:                              # %"$20.i"
	movq	%r14, 8(%rdi)
.LBB76_34:                              # %"$14"
	movq	%r14, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	retq
.LBB76_35:                              # %"$2.i10"
	andq	$-9, %rax
	.p2align	4, 0x90
.LBB76_36:                              # %"$4.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rcx
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB76_36
# %bb.37:
	addq	$8, %rcx
	addq	%rax, %rax
	jb	.LBB76_8
.LBB76_38:                              # %"$7.i12"
	leaq	(%rax,%rax), %rdx
	movl	$2, %r8d
	shldq	$62, %rdx, %r8
	addq	%rax, %rax
	movq	%r8, (%rcx)
	jb	.LBB76_8
.LBB76_39:                              # %"$9.i"
	movq	%r15, %rcx
	movq	%rdi, %rdx
	callq	db
	jmp	.LBB76_8
.LBB76_40:                              # %"$5"
	movq	%r15, %rcx
	movq	%rdi, %rdx
	callq	argErr
.LBB76_42:                              # %"$13.i"
	movl	$2, %edx
	movq	%r15, %rcx
	callq	argErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _col;
	.scl	2;
	.type	32;
	.endef
	.globl	_col                            # -- Begin function _col
	.p2align	4, 0x90
_col:                                   # @_col
.seh_proc _col
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rdi
	movq	SymTab+488(%rip), %rax
	.p2align	4, 0x90
.LBB77_1:                               # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %r8
	movq	8(%rdi), %rdi
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	getn
	testb	$15, %dil
	je	.LBB77_1
# %bb.2:                                # %"$4"
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _propCol;
	.scl	2;
	.type	32;
	.endef
	.globl	_propCol                        # -- Begin function _propCol
	.p2align	4, 0x90
_propCol:                               # @_propCol
.seh_proc _propCol
# %bb.0:                                # %"$1"
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rcx, %r14
	movq	8(%rcx), %rax
	movq	SymTab+488(%rip), %rsi
	movq	(%rax), %rdi
	movq	8(%rax), %rbx
	testb	$15, %bl
	jne	.LBB78_3
	.p2align	4, 0x90
.LBB78_1:                               # %"$3"
                                        # =>This Inner Loop Header: Depth=1
	movq	%r14, %rcx
	movq	%rsi, %rdx
	movq	%rdi, %r8
	callq	getn
	movq	%rax, %rsi
	movq	(%rbx), %rdi
	movq	8(%rbx), %rbx
	testb	$15, %bl
	je	.LBB78_1
.LBB78_3:                               # %"$4"
	movl	%esi, %eax
	andl	$14, %eax
	cmpl	$8, %eax
	jne	.LBB78_19
# %bb.4:                                # %"$6"
	movq	-8(%rsi), %rax
	testb	$8, %al
	jne	.LBB78_5
.LBB78_18:                              # %"$8"
	movq	%rsi, %rcx
	movq	%rdi, %rdx
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	jmp	prop                            # TAILCALL
.LBB78_5:                               # %"$7"
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rdi
	jne	.LBB78_10
# %bb.6:                                # %"$9"
	testb	$6, %al
	je	.LBB78_18
# %bb.7:                                # %"$3.i"
	addq	%rax, %rax
	jb	.LBB78_18
# %bb.8:                                # %"$2.i"
	addq	%rax, %rax
	jb	.LBB78_18
# %bb.9:                                # %"$5.i"
	movl	$1, %r8d
	shldq	$62, %rax, %r8
	movq	%r8, -8(%rsi)
	jmp	.LBB78_17
.LBB78_10:                              # %"$10"
	testb	$6, %al
	je	.LBB78_12
# %bb.11:
	leaq	-8(%rsi), %rcx
	addq	%rax, %rax
	jb	.LBB78_18
	jmp	.LBB78_16
.LBB78_12:                              # %"$2.i3"
	andq	$-9, %rax
	.p2align	4, 0x90
.LBB78_13:                              # %"$4.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rcx
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB78_13
# %bb.14:
	addq	$8, %rcx
	addq	%rax, %rax
	jb	.LBB78_18
.LBB78_16:                              # %"$7.i"
	leaq	(%rax,%rax), %rdx
	movl	$2, %r8d
	shldq	$62, %rdx, %r8
	addq	%rax, %rax
	movq	%r8, (%rcx)
	jb	.LBB78_18
.LBB78_17:                              # %"$9.i"
	movq	%r14, %rcx
	movq	%rsi, %rdx
	callq	db
	jmp	.LBB78_18
.LBB78_19:                              # %"$5"
	movq	%r14, %rcx
	movq	%rsi, %rdx
	callq	symErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _putl;
	.scl	2;
	.type	32;
	.endef
	.globl	_putl                           # -- Begin function _putl
	.p2align	4, 0x90
_putl:                                  # @_putl
.seh_proc _putl
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %r13
	movq	8(%rcx), %rax
	movq	(%rax), %rbx
	movq	8(%rax), %rdi
	testb	$6, %bl
	jne	.LBB79_4
# %bb.1:                                # %"$3"
	testb	$8, %bl
	jne	.LBB79_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rbx
	jmp	.LBB79_4
.LBB79_2:                               # %"$6"
	movq	(%rbx), %rbx
.LBB79_4:                               # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%rbx, (%r14)
	movq	%r14, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r14, env(%rip)
	.p2align	4, 0x90
.LBB79_5:                               # %"$7"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %r15
	movq	8(%rdi), %rdi
	testb	$6, %r15b
	jne	.LBB79_9
# %bb.6:                                # %"$9"
                                        #   in Loop: Header=BB79_5 Depth=1
	testb	$8, %r15b
	jne	.LBB79_7
# %bb.8:                                # %"$11"
                                        #   in Loop: Header=BB79_5 Depth=1
	subq	$32, %rsp
	movq	%r15, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r15
	.p2align	4, 0x90
.LBB79_9:                               # %"$8"
                                        #   in Loop: Header=BB79_5 Depth=1
	testb	$15, %dil
	jne	.LBB79_11
.LBB79_10:                              # %"$13"
                                        #   in Loop: Header=BB79_5 Depth=1
	subq	$32, %rsp
	movq	%r13, %rcx
	movq	%rbx, %rdx
	movq	%r15, %r8
	callq	getn
	addq	$32, %rsp
	movq	%rax, %rbx
	movq	%rax, (%r14)
	jmp	.LBB79_5
.LBB79_7:                               # %"$12"
                                        #   in Loop: Header=BB79_5 Depth=1
	movq	(%r15), %r15
	testb	$15, %dil
	je	.LBB79_10
.LBB79_11:                              # %"$14"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%r15, (%rax)
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%rcx, (%rdx)
	movq	%rax, env(%rip)
	movl	%ebx, %eax
	andl	$14, %eax
	cmpl	$8, %eax
	jne	.LBB79_34
# %bb.12:                               # %"$16"
	leaq	-8(%rbx), %rsi
	movq	-8(%rbx), %rax
	movq	%rax, %r12
	andq	$8, %r12
	je	.LBB79_22
# %bb.13:                               # %"$17"
	testb	$6, %al
	je	.LBB79_15
# %bb.14:
	movq	%rsi, %rcx
	addq	%rax, %rax
	jae	.LBB79_19
	jmp	.LBB79_21
.LBB79_15:                              # %"$2.i"
	andq	$-9, %rax
	.p2align	4, 0x90
.LBB79_16:                              # %"$4.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rcx
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB79_16
# %bb.17:
	addq	$8, %rcx
	addq	%rax, %rax
	jb	.LBB79_21
.LBB79_19:                              # %"$7.i"
	leaq	(%rax,%rax), %rdx
	movl	$2, %r8d
	shldq	$62, %rdx, %r8
	addq	%rax, %rax
	movq	%r8, (%rcx)
	jb	.LBB79_21
# %bb.20:                               # %"$9.i"
	subq	$32, %rsp
	movq	%r13, %rcx
	movq	%rbx, %rdx
	callq	db
	addq	$32, %rsp
.LBB79_21:                              # %dbTouch.exit
	movq	(%rsi), %rax
	andq	$-9, %rax
.LBB79_22:                              # %"$18"
	movq	%rsi, %rbx
	testb	$6, %al
	jne	.LBB79_24
	.p2align	4, 0x90
.LBB79_33:                              # %"$20"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB79_33
.LBB79_24:                              # %"$22.preheader"
	testb	$15, %r15b
	je	.LBB79_25
.LBB79_32:                              # %"$24"
	orq	%r12, %rax
	movq	%rax, (%rbx)
	movq	8(%r14), %rax
	movq	%rax, env(%rip)
	movq	%r15, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB79_25:
	leaq	SymTab+8(%rip), %rdi
	leaq	SymTab+280(%rip), %r13
	movq	%r15, %rsi
	jmp	.LBB79_26
	.p2align	4, 0x90
.LBB79_30:                              # %"$27.sink.split"
                                        #   in Loop: Header=BB79_26 Depth=1
	subq	$32, %rsp
	movq	%rax, %rdx
	callq	cons
	addq	$32, %rsp
.LBB79_31:                              # %"$27"
                                        #   in Loop: Header=BB79_26 Depth=1
	testb	$15, %sil
	jne	.LBB79_32
.LBB79_26:                              # %"$23"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rcx
	movq	8(%rsi), %rsi
	testb	$15, %cl
	jne	.LBB79_30
# %bb.27:                               # %"$26"
                                        #   in Loop: Header=BB79_26 Depth=1
	movq	(%rcx), %rdx
	cmpq	%rdi, %rdx
	je	.LBB79_31
# %bb.28:                               # %"$28"
                                        #   in Loop: Header=BB79_26 Depth=1
	cmpq	%r13, %rdx
	jne	.LBB79_30
# %bb.29:                               # %"$30"
                                        #   in Loop: Header=BB79_26 Depth=1
	movq	8(%rcx), %rcx
	jmp	.LBB79_30
.LBB79_34:                              # %"$15"
	subq	$32, %rsp
	movq	%r13, %rcx
	movq	%rbx, %rdx
	callq	symErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _getl;
	.scl	2;
	.type	32;
	.endef
	.globl	_getl                           # -- Begin function _getl
	.p2align	4, 0x90
_getl:                                  # @_getl
.seh_proc _getl
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rbx
	movq	(%rbx), %rdi
	testb	$6, %dil
	jne	.LBB80_4
# %bb.1:                                # %"$3"
	testb	$8, %dil
	jne	.LBB80_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdi
	jmp	.LBB80_4
.LBB80_2:                               # %"$6"
	movq	(%rdi), %rdi
.LBB80_4:                               # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%rdi, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r15, env(%rip)
	jmp	.LBB80_5
.LBB80_9:                               # %"$13"
                                        #   in Loop: Header=BB80_5 Depth=1
	subq	$32, %rsp
	movq	%r8, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r8
	.p2align	4, 0x90
.LBB80_10:                              # %"$10"
                                        #   in Loop: Header=BB80_5 Depth=1
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rdi, %rdx
	callq	getn
	addq	$32, %rsp
	movq	%rax, %rdi
	movq	%rax, (%r15)
.LBB80_5:                               # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rbx), %rbx
	testb	$15, %bl
	jne	.LBB80_11
# %bb.6:                                # %"$8"
                                        #   in Loop: Header=BB80_5 Depth=1
	movq	(%rbx), %r8
	testb	$6, %r8b
	jne	.LBB80_10
# %bb.7:                                # %"$11"
                                        #   in Loop: Header=BB80_5 Depth=1
	testb	$8, %r8b
	je	.LBB80_9
# %bb.8:                                # %"$14"
                                        #   in Loop: Header=BB80_5 Depth=1
	movq	(%r8), %r8
	jmp	.LBB80_10
.LBB80_11:                              # %"$9"
	movl	%edi, %eax
	andl	$14, %eax
	cmpl	$8, %eax
	jne	.LBB80_24
# %bb.12:                               # %"$16"
	movq	-8(%rdi), %r14
	testb	$8, %r14b
	je	.LBB80_18
# %bb.13:                               # %"$17"
	testb	$6, %r14b
	je	.LBB80_17
# %bb.14:                               # %"$3.i"
	movq	%r14, %rax
	addq	%r14, %rax
	jb	.LBB80_17
# %bb.15:                               # %"$2.i"
	addq	%rax, %rax
	jb	.LBB80_17
# %bb.16:                               # %"$5.i"
	movl	$1, %r8d
	shldq	$62, %rax, %r8
	movq	%r8, -8(%rdi)
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rdi, %rdx
	callq	db
	addq	$32, %rsp
	movq	-8(%rdi), %r14
.LBB80_17:                              # %dbFetch.exit
	andq	$-9, %r14
.LBB80_18:                              # %"$18"
	testb	$6, %r14b
	je	.LBB80_20
# %bb.19:
	leaq	SymTab+8(%rip), %r12
	jmp	.LBB80_23
.LBB80_20:                              # %"$20"
	movq	(%r14), %rcx
	subq	$32, %rsp
	leaq	SymTab+8(%rip), %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %r12
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%r12, (%rax)
	movq	env(%rip), %rcx
	movq	%rcx, 8(%rax)
	movq	%rax, env(%rip)
	movq	8(%r14), %rbx
	testb	$15, %bl
	jne	.LBB80_23
# %bb.21:                               # %"$23.preheader"
	leaq	SymTab+8(%rip), %rdi
	movq	%r12, %rsi
	.p2align	4, 0x90
.LBB80_22:                              # %"$23"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rbx), %rcx
	subq	$32, %rsp
	movq	%rdi, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, 8(%rsi)
	movq	8(%rbx), %rbx
	testb	$15, %bl
	movq	%rax, %rsi
	je	.LBB80_22
.LBB80_23:                              # %"$21"
	movq	8(%r15), %rax
	movq	%rax, env(%rip)
	movq	%r12, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB80_24:                              # %"$15"
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rdi, %rdx
	callq	symErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _wipe;
	.scl	2;
	.type	32;
	.endef
	.globl	_wipe                           # -- Begin function _wipe
	.p2align	4, 0x90
_wipe:                                  # @_wipe
.seh_proc _wipe
# %bb.0:                                # %"$1"
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rcx, %r14
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB81_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB81_3
# %bb.2:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB81_4
.LBB81_3:                               # %"$6"
	movq	(%rax), %rax
.LBB81_4:                               # %"$2"
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB81_26
# %bb.5:                                # %"$7"
	testb	$15, %al
	je	.LBB81_11
# %bb.6:                                # %"$9"
	movl	%eax, %edx
	andl	$14, %edx
	cmpl	$8, %edx
	jne	.LBB81_28
# %bb.7:                                # %"$3.i"
	movq	-8(%rax), %rbx
	movq	%rbx, %rdx
	andq	$-9, %rdx
	testb	$6, %bl
	jne	.LBB81_9
	.p2align	4, 0x90
.LBB81_8:                               # %"$5.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rdx), %rdx
	testb	$6, %dl
	je	.LBB81_8
.LBB81_9:                               # %"$6.i"
	testb	$8, %bl
	jne	.LBB81_22
# %bb.10:                               # %"$7.i"
	movq	%rcx, (%rax)
.LBB81_25:                              # %"$8"
	movq	%rdx, -8(%rax)
	jmp	.LBB81_26
.LBB81_11:
	movq	%rax, %rsi
	jmp	.LBB81_15
	.p2align	4, 0x90
.LBB81_12:                              # %"$7.i12"
                                        #   in Loop: Header=BB81_15 Depth=1
	movq	%rcx, (%rdx)
.LBB81_13:                              # %wipe.exit16
                                        #   in Loop: Header=BB81_15 Depth=1
	movq	%rdi, -8(%rdx)
.LBB81_14:                              # %wipe.exit16
                                        #   in Loop: Header=BB81_15 Depth=1
	testb	$15, %sil
	jne	.LBB81_26
.LBB81_15:                              # %"$12"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_17 Depth 2
	movq	(%rsi), %rdx
	movl	%edx, %ebx
	andl	$14, %ebx
	cmpl	$8, %ebx
	jne	.LBB81_27
# %bb.16:                               # %"$3.i6"
                                        #   in Loop: Header=BB81_15 Depth=1
	movq	8(%rsi), %rsi
	movq	-8(%rdx), %rbx
	movq	%rbx, %rdi
	andq	$-9, %rdi
	testb	$6, %bl
	jne	.LBB81_18
	.p2align	4, 0x90
.LBB81_17:                              # %"$5.i8"
                                        #   Parent Loop BB81_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rdi), %rdi
	testb	$6, %dil
	je	.LBB81_17
.LBB81_18:                              # %"$6.i11"
                                        #   in Loop: Header=BB81_15 Depth=1
	testb	$8, %bl
	je	.LBB81_12
# %bb.19:                               # %"$8.i13"
                                        #   in Loop: Header=BB81_15 Depth=1
	addq	%rdi, %rdi
	jb	.LBB81_14
# %bb.20:                               # %"$10.i14"
                                        #   in Loop: Header=BB81_15 Depth=1
	addq	%rdi, %rdi
	jae	.LBB81_14
# %bb.21:                               # %"$12.i15"
                                        #   in Loop: Header=BB81_15 Depth=1
	movq	%rcx, (%rdx)
	shrq	$2, %rdi
	orq	$8, %rdi
	jmp	.LBB81_13
.LBB81_22:                              # %"$8.i"
	addq	%rdx, %rdx
	jb	.LBB81_26
# %bb.23:                               # %"$10.i"
	addq	%rdx, %rdx
	jae	.LBB81_26
# %bb.24:                               # %"$12.i"
	movq	%rcx, (%rax)
	shrq	$2, %rdx
	orq	$8, %rdx
	jmp	.LBB81_25
.LBB81_26:                              # %"$8"
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq
.LBB81_27:                              # %"$2.i4"
	movq	%r14, %rcx
	callq	symErr
.LBB81_28:                              # %"$2.i"
	movq	%r14, %rcx
	movq	%rax, %rdx
	callq	symErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _meta;
	.scl	2;
	.type	32;
	.endef
	.globl	_meta                           # -- Begin function _meta
	.p2align	4, 0x90
_meta:                                  # @_meta
.seh_proc _meta
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %r15
	movq	8(%rcx), %rax
	movq	(%rax), %rdi
	movq	8(%rax), %r14
	testb	$6, %dil
	jne	.LBB82_4
# %bb.1:                                # %"$3"
	testb	$8, %dil
	jne	.LBB82_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdi
	jmp	.LBB82_4
.LBB82_2:                               # %"$6"
	movq	(%rdi), %rdi
.LBB82_4:                               # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rdi, (%rbx)
	movq	%rbx, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rbx, env(%rip)
	testb	$6, %dil
	jne	.LBB82_24
# %bb.5:                                # %"$8"
	testb	$8, %dil
	je	.LBB82_12
# %bb.6:                                # %"$9"
	movq	-8(%rdi), %rax
	testb	$8, %al
	je	.LBB82_11
# %bb.7:                                # %"$9"
	movl	%eax, %ecx
	andl	$6, %ecx
	testq	%rcx, %rcx
	je	.LBB82_11
# %bb.8:                                # %"$3.i"
	addq	%rax, %rax
	jb	.LBB82_11
# %bb.9:                                # %"$2.i"
	addq	%rax, %rax
	jb	.LBB82_11
# %bb.10:                               # %"$5.i"
	movl	$1, %r8d
	shldq	$62, %rax, %r8
	movq	%r8, -8(%rdi)
	subq	$32, %rsp
	movq	%r15, %rcx
	movq	%rdi, %rdx
	callq	db
	addq	$32, %rsp
.LBB82_11:                              # %"$12"
	movq	(%rdi), %rdi
.LBB82_12:                              # %"$10"
	movq	(%r14), %rdx
	testb	$6, %dl
	jne	.LBB82_16
# %bb.13:                               # %"$14"
	testb	$8, %dl
	jne	.LBB82_14
# %bb.15:                               # %"$16"
	subq	$32, %rsp
	movq	%rdx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdx
	jmp	.LBB82_16
.LBB82_14:                              # %"$17"
	movq	(%rdx), %rdx
.LBB82_16:                              # %"$13"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	meta
	addq	$32, %rsp
	movq	%rax, %rdi
	movq	8(%r14), %rsi
	jmp	.LBB82_17
.LBB82_21:                              # %"$24"
                                        #   in Loop: Header=BB82_17 Depth=1
	subq	$32, %rsp
	movq	%r8, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r8
	.p2align	4, 0x90
.LBB82_22:                              # %"$21"
                                        #   in Loop: Header=BB82_17 Depth=1
	subq	$32, %rsp
	movq	%r15, %rcx
	movq	%rdi, %rdx
	callq	getn
	addq	$32, %rsp
	movq	%rax, %rdi
	movq	8(%rsi), %rsi
.LBB82_17:                              # %"$13"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %sil
	jne	.LBB82_23
# %bb.18:                               # %"$19"
                                        #   in Loop: Header=BB82_17 Depth=1
	movq	%rdi, (%rbx)
	movq	(%rsi), %r8
	testb	$6, %r8b
	jne	.LBB82_22
# %bb.19:                               # %"$22"
                                        #   in Loop: Header=BB82_17 Depth=1
	testb	$8, %r8b
	je	.LBB82_21
# %bb.20:                               # %"$25"
                                        #   in Loop: Header=BB82_17 Depth=1
	movq	(%r8), %r8
	jmp	.LBB82_22
.LBB82_23:                              # %"$20"
	movq	8(%rbx), %rax
	movq	%rax, env(%rip)
	movq	%rdi, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB82_24:                              # %"$7"
	subq	$32, %rsp
	movq	%r15, %rcx
	movq	%rdi, %rdx
	callq	argErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _lowQ;
	.scl	2;
	.type	32;
	.endef
	.globl	_lowQ                           # -- Begin function _lowQ
	.p2align	4, 0x90
_lowQ:                                  # @_lowQ
.seh_proc _lowQ
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	testb	$6, %sil
	jne	.LBB83_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB83_2
# %bb.3:                                # %"$5"
	movq	%rsi, %rcx
	callq	evList
	movq	%rax, %rsi
	jmp	.LBB83_4
.LBB83_2:                               # %"$6"
	movq	(%rsi), %rsi
.LBB83_4:                               # %"$2"
	movl	%esi, %eax
	andl	$14, %eax
	cmpl	$8, %eax
	jne	.LBB83_5
# %bb.6:                                # %"$8"
	movq	%rsi, %rcx
	callq	firstChar
	movl	%eax, %ecx
	callq	isLowc
	movl	%eax, %ecx
	leaq	SymTab+8(%rip), %rax
	testb	$1, %cl
	cmovneq	%rsi, %rax
	jmp	.LBB83_7
.LBB83_5:
	leaq	SymTab+8(%rip), %rax
.LBB83_7:                               # %"$7"
	addq	$32, %rsp
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _uppQ;
	.scl	2;
	.type	32;
	.endef
	.globl	_uppQ                           # -- Begin function _uppQ
	.p2align	4, 0x90
_uppQ:                                  # @_uppQ
.seh_proc _uppQ
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	testb	$6, %sil
	jne	.LBB84_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB84_2
# %bb.3:                                # %"$5"
	movq	%rsi, %rcx
	callq	evList
	movq	%rax, %rsi
	jmp	.LBB84_4
.LBB84_2:                               # %"$6"
	movq	(%rsi), %rsi
.LBB84_4:                               # %"$2"
	movl	%esi, %eax
	andl	$14, %eax
	cmpl	$8, %eax
	jne	.LBB84_5
# %bb.6:                                # %"$8"
	movq	%rsi, %rcx
	callq	firstChar
	movl	%eax, %ecx
	callq	isUppc
	movl	%eax, %ecx
	leaq	SymTab+8(%rip), %rax
	testb	$1, %cl
	cmovneq	%rsi, %rax
	jmp	.LBB84_7
.LBB84_5:
	leaq	SymTab+8(%rip), %rax
.LBB84_7:                               # %"$7"
	addq	$32, %rsp
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _lowc;
	.scl	2;
	.type	32;
	.endef
	.globl	_lowc                           # -- Begin function _lowc
	.p2align	4, 0x90
_lowc:                                  # @_lowc
.seh_proc _lowc
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rdi
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB85_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB85_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB85_4
.LBB85_2:                               # %"$6"
	movq	(%rax), %rax
.LBB85_4:                               # %"$2"
	leaq	SymTab+8(%rip), %r14
	cmpq	%r14, %rax
	je	.LBB85_16
# %bb.5:                                # %"$2"
	movl	%eax, %ecx
	andl	$14, %ecx
	cmpl	$8, %ecx
	jne	.LBB85_16
# %bb.6:                                # %"$3.i"
	movq	-8(%rax), %rcx
	testb	$8, %cl
	jne	.LBB85_7
	.p2align	4, 0x90
# %bb.9:                                # %"$8.i"
	testb	$6, %cl
	jne	.LBB85_10
.LBB85_8:                               # %"$8.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rcx
	testb	$6, %cl
	je	.LBB85_8
.LBB85_10:                              # %xName.exit
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	$0, (%rdi)
	leaq	8(%rdi), %rdx
	movq	%rcx, 8(%rdi)
	movq	env(%rip), %rax
	movq	%rax, 16(%rdi)
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	$4, (%rbx)
	leaq	16(%rbx), %rsi
	movq	$2, 16(%rbx)
	movq	%rdx, 24(%rbx)
	movq	%rsi, env(%rip)
	subq	$32, %rsp
	.p2align	4, 0x90
.LBB85_12:                              # %"$13"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rdi, %rcx
	callq	symChar
	addq	$32, %rsp
	testl	%eax, %eax
	je	.LBB85_13
# %bb.11:                               # %"$13"
                                        #   in Loop: Header=BB85_12 Depth=1
	subq	$32, %rsp
	movl	%eax, %ecx
	callq	toLowerCase
	movl	%eax, %ecx
	movq	%rbx, %rdx
	callq	charSym
	jmp	.LBB85_12
.LBB85_13:                              # %"$14"
	movq	(%rsi), %rcx
	cmpq	$2, %rcx
	je	.LBB85_15
# %bb.14:                               # %"$3.i5"
	subq	$32, %rsp
	xorl	%edx, %edx
	callq	consSym
	addq	$32, %rsp
	movq	%rax, %r14
.LBB85_15:                              # %consStr.exit
	movq	16(%rdi), %rax
	movq	%rax, env(%rip)
	movq	%r14, %rax
.LBB85_16:                              # %"$11"
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	retq
.LBB85_7:                               # %"$6.i"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	nameErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _uppc;
	.scl	2;
	.type	32;
	.endef
	.globl	_uppc                           # -- Begin function _uppc
	.p2align	4, 0x90
_uppc:                                  # @_uppc
.seh_proc _uppc
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rdi
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB86_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB86_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB86_4
.LBB86_2:                               # %"$6"
	movq	(%rax), %rax
.LBB86_4:                               # %"$2"
	leaq	SymTab+8(%rip), %r14
	cmpq	%r14, %rax
	je	.LBB86_42
# %bb.5:                                # %"$2"
	movl	%eax, %ecx
	andl	$14, %ecx
	cmpl	$8, %ecx
	jne	.LBB86_42
# %bb.6:                                # %"$3.i"
	movq	-8(%rax), %rcx
	testb	$8, %cl
	jne	.LBB86_7
	.p2align	4, 0x90
# %bb.9:                                # %"$8.i"
	testb	$6, %cl
	jne	.LBB86_10
.LBB86_8:                               # %"$8.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rcx
	testb	$6, %cl
	je	.LBB86_8
.LBB86_10:                              # %xName.exit
	movabsq	$5980780305148018688, %r15      # imm = 0x5300000000000000
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r13
	movq	$0, (%r13)
	leaq	8(%r13), %rdx
	movq	%rcx, 8(%r13)
	movq	env(%rip), %rax
	movq	%rax, 16(%r13)
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	$4, (%rbx)
	leaq	16(%rbx), %r12
	movq	$2, 16(%rbx)
	movq	%rdx, 24(%rbx)
	movq	%r12, env(%rip)
	jmp	.LBB86_11
.LBB86_29:                              # %"$5.i12"
                                        #   in Loop: Header=BB86_11 Depth=1
	movl	$83, %eax
	shlq	%cl, %rax
	orq	%rax, %rsi
	movq	%rsi, 16(%rbx)
.LBB86_30:                              # %"$12"
                                        #   in Loop: Header=BB86_11 Depth=1
	addq	$8, %rcx
	movq	%rcx, (%rbx)
.LBB86_11:                              # %"$12"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	movq	%r13, %rcx
	callq	symChar
	addq	$32, %rsp
	cmpl	$223, %eax
	je	.LBB86_14
# %bb.12:                               # %"$12"
                                        #   in Loop: Header=BB86_11 Depth=1
	testl	%eax, %eax
	je	.LBB86_39
# %bb.13:                               # %"$15"
                                        #   in Loop: Header=BB86_11 Depth=1
	subq	$32, %rsp
	movl	%eax, %ecx
	callq	toUpperCase
	movl	%eax, %ecx
	movq	%rbx, %rdx
	callq	charSym
	addq	$32, %rsp
	jmp	.LBB86_11
	.p2align	4, 0x90
.LBB86_14:                              # %"$16"
                                        #   in Loop: Header=BB86_11 Depth=1
	movq	(%rbx), %rcx
	movq	16(%rbx), %rsi
	testb	$2, %sil
	jne	.LBB86_15
# %bb.21:                               # %"$3.i7"
                                        #   in Loop: Header=BB86_11 Depth=1
	movq	8(%rbx), %rsi
	movq	4(%rsi), %rdi
	cmpq	$59, %rcx
	ja	.LBB86_23
# %bb.22:                               # %"$8.i8"
                                        #   in Loop: Header=BB86_11 Depth=1
	movl	$83, %eax
	shlq	%cl, %rax
	orq	%rax, %rdi
	movq	%rdi, 4(%rsi)
	jmp	.LBB86_17
	.p2align	4, 0x90
.LBB86_15:                              # %"$2.i"
                                        #   in Loop: Header=BB86_11 Depth=1
	cmpq	$59, %rcx
	ja	.LBB86_18
# %bb.16:                               # %"$5.i"
                                        #   in Loop: Header=BB86_11 Depth=1
	movl	$83, %eax
	shlq	%cl, %rax
	orq	%rax, %rsi
	movq	%rsi, 16(%rbx)
.LBB86_17:                              # %byteSym.exit
                                        #   in Loop: Header=BB86_11 Depth=1
	addq	$8, %rcx
	movq	%rcx, (%rbx)
	jmp	.LBB86_27
.LBB86_23:                              # %"$9.i"
                                        #   in Loop: Header=BB86_11 Depth=1
	shrq	$4, %rdi
	orq	%r15, %rdi
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	jne	.LBB86_25
# %bb.24:                               # %"$2.i2.i"
                                        #   in Loop: Header=BB86_11 Depth=1
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rax
.LBB86_25:                              # %boxNum.exit3.i
                                        #   in Loop: Header=BB86_11 Depth=1
	movq	(%rax), %rcx
	movq	%rcx, ($Avail)(%rip)
	movq	%rdi, (%rax)
	movq	$2, 8(%rax)
	addq	$4, %rax
	movq	%rax, 4(%rsi)
	movq	%rax, 8(%rbx)
	jmp	.LBB86_26
.LBB86_18:                              # %"$6.i6"
                                        #   in Loop: Header=BB86_11 Depth=1
	shrq	$4, %rsi
	orq	%r15, %rsi
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	jne	.LBB86_20
# %bb.19:                               # %"$2.i.i"
                                        #   in Loop: Header=BB86_11 Depth=1
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rax
.LBB86_20:                              # %boxNum.exit.i
                                        #   in Loop: Header=BB86_11 Depth=1
	movq	(%rax), %rcx
	movq	%rcx, ($Avail)(%rip)
	movq	%rsi, (%rax)
	movq	$2, 8(%rax)
	addq	$4, %rax
	movq	%rax, 8(%rbx)
	movq	%rax, 16(%rbx)
.LBB86_26:                              # %byteSym.exit
                                        #   in Loop: Header=BB86_11 Depth=1
	movq	$4, (%rbx)
	movl	$4, %ecx
.LBB86_27:                              # %byteSym.exit
                                        #   in Loop: Header=BB86_11 Depth=1
	movq	(%r12), %rsi
	testb	$2, %sil
	jne	.LBB86_28
# %bb.34:                               # %"$3.i17"
                                        #   in Loop: Header=BB86_11 Depth=1
	movq	8(%rbx), %rsi
	movq	4(%rsi), %rdi
	cmpq	$59, %rcx
	ja	.LBB86_36
# %bb.35:                               # %"$8.i18"
                                        #   in Loop: Header=BB86_11 Depth=1
	movl	$83, %eax
	shlq	%cl, %rax
	orq	%rax, %rdi
	movq	%rdi, 4(%rsi)
	jmp	.LBB86_30
	.p2align	4, 0x90
.LBB86_28:                              # %"$2.i11"
                                        #   in Loop: Header=BB86_11 Depth=1
	cmpq	$59, %rcx
	jbe	.LBB86_29
# %bb.31:                               # %"$6.i14"
                                        #   in Loop: Header=BB86_11 Depth=1
	shrq	$4, %rsi
	orq	%r15, %rsi
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	jne	.LBB86_33
# %bb.32:                               # %"$2.i.i15"
                                        #   in Loop: Header=BB86_11 Depth=1
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rax
.LBB86_33:                              # %boxNum.exit.i16
                                        #   in Loop: Header=BB86_11 Depth=1
	movq	(%rax), %rcx
	movq	%rcx, ($Avail)(%rip)
	movq	%rsi, (%rax)
	movq	$2, 8(%rax)
	addq	$4, %rax
	movq	%rax, 8(%rbx)
	movq	%rax, 16(%rbx)
	movq	$4, (%rbx)
	jmp	.LBB86_11
.LBB86_36:                              # %"$9.i20"
                                        #   in Loop: Header=BB86_11 Depth=1
	shrq	$4, %rdi
	orq	%r15, %rdi
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	jne	.LBB86_38
# %bb.37:                               # %"$2.i2.i21"
                                        #   in Loop: Header=BB86_11 Depth=1
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rax
.LBB86_38:                              # %boxNum.exit3.i22
                                        #   in Loop: Header=BB86_11 Depth=1
	movq	(%rax), %rcx
	movq	%rcx, ($Avail)(%rip)
	movq	%rdi, (%rax)
	movq	$2, 8(%rax)
	addq	$4, %rax
	movq	%rax, 4(%rsi)
	movq	%rax, 8(%rbx)
	movq	$4, (%rbx)
	jmp	.LBB86_11
.LBB86_39:                              # %"$14"
	movq	(%r12), %rcx
	cmpq	$2, %rcx
	je	.LBB86_41
# %bb.40:                               # %"$3.i24"
	subq	$32, %rsp
	xorl	%edx, %edx
	callq	consSym
	addq	$32, %rsp
	movq	%rax, %r14
.LBB86_41:                              # %consStr.exit
	movq	16(%r13), %rax
	movq	%rax, env(%rip)
	movq	%r14, %rax
.LBB86_42:                              # %"$11"
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB86_7:                               # %"$6.i"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	nameErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _fold;
	.scl	2;
	.type	32;
	.endef
	.globl	_fold                           # -- Begin function _fold
	.p2align	4, 0x90
_fold:                                  # @_fold
.seh_proc _fold
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rdi
	movq	8(%rax), %rbx
	testb	$6, %dil
	jne	.LBB87_4
# %bb.1:                                # %"$3"
	testb	$8, %dil
	jne	.LBB87_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdi
	jmp	.LBB87_4
.LBB87_2:                               # %"$6"
	movq	(%rdi), %rdi
.LBB87_4:                               # %"$2"
	leaq	SymTab+8(%rip), %r14
	cmpq	%r14, %rdi
	je	.LBB87_26
# %bb.5:                                # %"$2"
	movl	%edi, %eax
	andl	$14, %eax
	cmpl	$8, %eax
	jne	.LBB87_26
# %bb.6:                                # %"$10"
	testb	$15, %bl
	je	.LBB87_8
# %bb.7:
	xorl	%ebx, %ebx
	jmp	.LBB87_14
.LBB87_8:                               # %"$13"
	movq	(%rbx), %rax
	testb	$6, %al
	jne	.LBB87_12
# %bb.9:                                # %"$3.i"
	testb	$8, %al
	jne	.LBB87_10
# %bb.11:                               # %"$5.i"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB87_12
.LBB87_10:                              # %"$6.i"
	movq	(%rax), %rax
.LBB87_12:                              # %"$2.i"
	testb	$2, %al
	je	.LBB87_27
# %bb.13:                               # %evCnt.exit
	movq	%rax, %rcx
	shrq	$4, %rcx
	movq	%rcx, %rbx
	negq	%rbx
	testb	$8, %al
	cmoveq	%rcx, %rbx
.LBB87_14:                              # %"$3.i8"
	movq	-8(%rdi), %rcx
	testb	$8, %cl
	je	.LBB87_17
# %bb.15:                               # %"$6.i9"
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rdi, %rdx
	callq	nameErr
	.p2align	4, 0x90
.LBB87_16:                              # %"$8.i"
                                        #   in Loop: Header=BB87_17 Depth=1
	movq	8(%rcx), %rcx
.LBB87_17:                              # %"$8.i"
                                        # =>This Inner Loop Header: Depth=1
	testb	$6, %cl
	je	.LBB87_16
# %bb.18:                               # %xName.exit
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	$0, (%rdi)
	leaq	8(%rdi), %rdx
	movq	%rcx, 8(%rdi)
	movq	env(%rip), %rax
	movq	%rax, 16(%rdi)
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	$4, (%r15)
	leaq	16(%r15), %r12
	movq	$2, 16(%r15)
	movq	%rdx, 24(%r15)
	movq	%r12, env(%rip)
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	symChar
	addq	$32, %rsp
	testl	%eax, %eax
	je	.LBB87_23
# %bb.19:                               # %"$16.preheader"
	movl	%eax, %esi
	jmp	.LBB87_20
	.p2align	4, 0x90
.LBB87_22:                              # %"$19"
                                        #   in Loop: Header=BB87_20 Depth=1
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	symChar
	addq	$32, %rsp
	movl	%eax, %esi
	testl	%eax, %eax
	je	.LBB87_23
.LBB87_20:                              # %"$16"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	movl	%esi, %ecx
	callq	isLetterOrDigit
	addq	$32, %rsp
	testb	$1, %al
	je	.LBB87_22
# %bb.21:                               # %"$18"
                                        #   in Loop: Header=BB87_20 Depth=1
	subq	$32, %rsp
	movl	%esi, %ecx
	callq	toLowerCase
	movl	%eax, %ecx
	movq	%r15, %rdx
	callq	charSym
	addq	$32, %rsp
	decq	%rbx
	jne	.LBB87_22
.LBB87_23:                              # %"$17"
	movq	(%r12), %rcx
	cmpq	$2, %rcx
	je	.LBB87_25
# %bb.24:                               # %"$3.i12"
	subq	$32, %rsp
	xorl	%edx, %edx
	callq	consSym
	addq	$32, %rsp
	movq	%rax, %r14
.LBB87_25:                              # %consStr.exit
	movq	16(%rdi), %rax
	movq	%rax, env(%rip)
	movq	%r14, %rdi
.LBB87_26:                              # %"$11"
	movq	%rdi, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB87_27:                              # %"$2.i.i"
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	cntErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _path;
	.scl	2;
	.type	32;
	.endef
	.globl	_path                           # -- Begin function _path
	.p2align	4, 0x90
_path:                                  # @_path
.seh_proc _path
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rcx
	testb	$6, %cl
	jne	.LBB88_4
# %bb.1:                                # %"$3.i"
	testb	$8, %cl
	jne	.LBB88_2
# %bb.3:                                # %"$5.i"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB88_4
.LBB88_2:                               # %"$6.i"
	movq	(%rcx), %rcx
.LBB88_4:                               # %evSym.exit
	subq	$32, %rsp
	callq	xSym
	addq	$32, %rsp
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	jne	.LBB88_6
# %bb.5:
	movl	$2, %ecx
	movl	$1, %eax
	jmp	.LBB88_16
.LBB88_6:                               # %"$3.i2"
	movq	-8(%rax), %rcx
	testb	$8, %cl
	jne	.LBB88_7
	.p2align	4, 0x90
# %bb.9:                                # %"$8.i"
	testb	$6, %cl
	jne	.LBB88_10
.LBB88_8:                               # %"$8.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rcx
	testb	$6, %cl
	je	.LBB88_8
.LBB88_10:                              # %xName.exit
	movl	$1, %eax
	testb	$4, %cl
	movq	%rcx, %rdx
	je	.LBB88_13
# %bb.11:                               # %"$3.i.i.preheader"
	movl	$1, %eax
	movq	%rcx, %rdx
	.p2align	4, 0x90
.LBB88_12:                              # %"$3.i.i"
                                        # =>This Inner Loop Header: Depth=1
	addq	$8, %rax
	movq	4(%rdx), %rdx
	testb	$4, %dl
	jne	.LBB88_12
.LBB88_13:                              # %"$4.i.i"
	shrq	$4, %rdx
	je	.LBB88_15
	.p2align	4, 0x90
.LBB88_14:                              # %"$6.i.i"
                                        # =>This Inner Loop Header: Depth=1
	incq	%rax
	shrq	$8, %rdx
	jne	.LBB88_14
.LBB88_15:                              # %bufSize.exit.i
	testb	$2, %cl
	jne	.LBB88_16
# %bb.17:                               # %"$3.i6"
	movq	-4(%rcx), %rdx
	movq	%rdx, %rsi
	shrq	$8, %rsi
	cmpb	$126, %dl
	jne	.LBB88_19
	jmp	.LBB88_24
.LBB88_16:                              # %"$2.i"
	movq	%rcx, %rdx
	shrq	$4, %rdx
	movq	%rcx, %rsi
	shrq	$12, %rsi
	cmpb	$126, %dl
	je	.LBB88_24
.LBB88_19:                              # %"$4.i"
	cmpb	$64, %dl
	je	.LBB88_23
# %bb.20:                               # %"$4.i"
	cmpb	$43, %dl
	jne	.LBB88_26
# %bb.21:                               # %"$9.i"
	cmpb	$126, %sil
	je	.LBB88_24
# %bb.22:                               # %"$9.i"
	cmpb	$64, %sil
	jne	.LBB88_26
.LBB88_23:                              # %"$11.i"
	movq	($PilLen)(%rip), %rdx
	jmp	.LBB88_25
.LBB88_24:                              # %"$17.i"
	movq	($UsrLen)(%rip), %rdx
.LBB88_25:                              # %pathSize.exit
	leaq	-1(%rax,%rdx), %rax
.LBB88_26:                              # %pathSize.exit
	addq	$15, %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	subq	$32, %rsp
	movq	%rsi, %rdx
	callq	pathString
	movq	%rsi, %rcx
	callq	mkStr
	nop
	leaq	8(%rbp), %rsp
	popq	%rsi
	popq	%rbp
	retq
.LBB88_7:                               # %"$6.i3"
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	nameErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _wait;
	.scl	2;
	.type	32;
	.endef
	.globl	_wait                           # -- Begin function _wait
	.p2align	4, 0x90
_wait:                                  # @_wait
.seh_proc _wait
# %bb.0:                                # %"$1"
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %r15
	movq	8(%rcx), %rcx
	movq	(%rcx), %rax
	movq	8(%rcx), %rbx
	testb	$6, %al
	jne	.LBB89_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB89_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB89_4
.LBB89_2:                               # %"$6"
	movq	(%rax), %rax
.LBB89_4:                               # %"$2"
	leaq	SymTab+8(%rip), %r14
	cmpq	%r14, %rax
	jne	.LBB89_6
# %bb.5:
	movabsq	$9223372036854775807, %rdi      # imm = 0x7FFFFFFFFFFFFFFF
	jmp	.LBB89_8
.LBB89_6:                               # %"$8"
	testb	$2, %al
	je	.LBB89_37
# %bb.7:                                # %xCnt.exit
	movq	%rax, %rcx
	shrq	$4, %rcx
	movq	%rcx, %rdi
	negq	%rdi
	testb	$8, %al
	cmoveq	%rcx, %rdi
.LBB89_8:                               # %"$9"
	movq	(%rbx), %rcx
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, %rcx
	jne	.LBB89_16
# %bb.9:                                # %"$10"
	movq	8(%rbx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB89_13
# %bb.10:                               # %"$3.i"
	testb	$8, %al
	jne	.LBB89_11
# %bb.12:                               # %"$5.i"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB89_13
	.p2align	4, 0x90
.LBB89_16:                              # %"$16"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_17 Depth 2
	movq	8(%rbx), %rsi
	jmp	.LBB89_17
	.p2align	4, 0x90
.LBB89_23:                              # %"$26"
                                        #   in Loop: Header=BB89_17 Depth=2
	movq	(%rsi), %rcx
	movq	8(%rsi), %rsi
.LBB89_17:                              # %"$16"
                                        #   Parent Loop BB89_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	testb	$15, %sil
	jne	.LBB89_18
# %bb.21:                               # %"$18"
                                        #   in Loop: Header=BB89_17 Depth=2
	testb	$15, %cl
	jne	.LBB89_23
# %bb.22:                               # %"$27"
                                        #   in Loop: Header=BB89_17 Depth=2
	callq	evList
	jmp	.LBB89_23
	.p2align	4, 0x90
.LBB89_18:                              # %"$20"
                                        #   in Loop: Header=BB89_16 Depth=1
	testb	$6, %cl
	jne	.LBB89_25
# %bb.19:                               # %"$22"
                                        #   in Loop: Header=BB89_16 Depth=1
	testb	$8, %cl
	jne	.LBB89_20
# %bb.24:                               # %"$24"
                                        #   in Loop: Header=BB89_16 Depth=1
	callq	evList
	movq	%rax, %rcx
	.p2align	4, 0x90
.LBB89_25:                              # %"$19"
                                        #   in Loop: Header=BB89_16 Depth=1
	cmpq	%r14, %rcx
	jne	.LBB89_32
.LBB89_26:                              # %"$28"
                                        #   in Loop: Header=BB89_16 Depth=1
	movq	%r15, %rcx
	movl	$-1, %edx
	movq	%rdi, %r8
	callq	waitFd
	movq	%rax, %rdi
	testq	%rax, %rax
	movq	(%rbx), %rcx
	jne	.LBB89_16
	jmp	.LBB89_27
.LBB89_20:                              # %"$25"
                                        #   in Loop: Header=BB89_16 Depth=1
	movq	(%rcx), %rcx
	cmpq	%r14, %rcx
	je	.LBB89_26
	jmp	.LBB89_32
.LBB89_27:                              # %"$33.preheader"
	movq	8(%rbx), %rsi
	jmp	.LBB89_28
	.p2align	4, 0x90
.LBB89_36:                              # %"$42"
                                        #   in Loop: Header=BB89_28 Depth=1
	movq	(%rsi), %rcx
	movq	8(%rsi), %rsi
.LBB89_28:                              # %"$33.preheader"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %sil
	jne	.LBB89_29
# %bb.34:                               # %"$34"
                                        #   in Loop: Header=BB89_28 Depth=1
	testb	$15, %cl
	jne	.LBB89_36
# %bb.35:                               # %"$43"
                                        #   in Loop: Header=BB89_28 Depth=1
	callq	evList
	jmp	.LBB89_36
.LBB89_29:                              # %"$36"
	testb	$6, %cl
	jne	.LBB89_32
# %bb.30:                               # %"$38"
	testb	$8, %cl
	jne	.LBB89_31
# %bb.33:                               # %"$40"
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	jmp	evList                          # TAILCALL
.LBB89_11:                              # %"$6.i"
	movq	(%rax), %rax
.LBB89_13:                              # %"$2.i13"
	testb	$2, %al
	je	.LBB89_37
# %bb.14:                               # %evCnt.exit
	movq	%rax, %rcx
	shrq	$4, %rcx
	movq	%rcx, %rbx
	negq	%rbx
	testb	$8, %al
	cmoveq	%rcx, %rbx
	movq	%r15, %rcx
	movl	%ebx, %edx
	movq	%rdi, %r8
	callq	waitFd
	testq	%rax, %rax
	movq	%r14, %rcx
	je	.LBB89_32
# %bb.15:                               # %"$13"
	shlq	$4, %rbx
	orq	$2, %rbx
	movq	%rbx, %rcx
.LBB89_32:                              # %"$12"
	movq	%rcx, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	retq
.LBB89_31:                              # %"$41"
	movq	(%rcx), %rcx
	jmp	.LBB89_32
.LBB89_37:                              # %"$2.i"
	movq	%r15, %rcx
	movq	%rax, %rdx
	callq	cntErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _sync;
	.scl	2;
	.type	32;
	.endef
	.globl	_sync                           # -- Begin function _sync
	.p2align	4, 0x90
_sync:                                  # @_sync
.seh_proc _sync
# %bb.0:                                # %"$1"
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movl	($Mic)(%rip), %ebx
	testl	%ebx, %ebx
	leaq	SymTab+8(%rip), %r14
	je	.LBB90_13
# %bb.1:                                # %"$1"
	cmpl	$0, ($Hear)(%rip)
	je	.LBB90_13
# %bb.2:                                # %"$5"
	leaq	SymTab+280(%rip), %r14
	cmpb	$0, ($Sync)(%rip)
	jne	.LBB90_13
# %bb.3:                                # %"$9.outer.preheader"
	movq	%rcx, %r15
	movl	$4, %esi
	leaq	($Slot)(%rip), %rdi
	.p2align	4, 0x90
.LBB90_4:                               # %"$9"
                                        # =>This Inner Loop Header: Depth=1
	movl	%ebx, %ecx
	movq	%rdi, %rdx
	movq	%rsi, %r8
	callq	write
	testq	%rax, %rax
	jns	.LBB90_5
# %bb.7:                                # %"$11"
                                        #   in Loop: Header=BB90_4 Depth=1
	callq	gErrno
	cmpl	$2, %eax
	jne	.LBB90_10
# %bb.8:                                # %"$16"
                                        #   in Loop: Header=BB90_4 Depth=1
	cmpl	$0, ($Signal)(%rip)
	je	.LBB90_4
# %bb.9:                                # %"$17"
                                        #   in Loop: Header=BB90_4 Depth=1
	movq	%r15, %rcx
	callq	sighandler
	jmp	.LBB90_4
.LBB90_5:                               # %"$12"
                                        #   in Loop: Header=BB90_4 Depth=1
	subq	%rax, %rsi
	je	.LBB90_11
# %bb.6:                                # %"$13"
                                        #   in Loop: Header=BB90_4 Depth=1
	addq	%rax, %rdi
	jmp	.LBB90_4
.LBB90_11:                              # %"$14"
	movb	$0, ($Sync)(%rip)
	movabsq	$9223372036854775807, %rsi      # imm = 0x7FFFFFFFFFFFFFFF
	.p2align	4, 0x90
.LBB90_12:                              # %"$19"
                                        # =>This Inner Loop Header: Depth=1
	movq	%r15, %rcx
	movl	$-1, %edx
	movq	%rsi, %r8
	callq	waitFd
	cmpb	$1, ($Sync)(%rip)
	jne	.LBB90_12
.LBB90_13:                              # %"$2"
	movq	%r14, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	retq
.LBB90_10:                              # %"$15"
	leaq	.L$41(%rip), %rcx
	callq	writeErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _hear;
	.scl	2;
	.type	32;
	.endef
	.globl	_hear                           # -- Begin function _hear
	.p2align	4, 0x90
_hear:                                  # @_hear
.seh_proc _hear
# %bb.0:                                # %"$1"
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rcx, %rdi
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	testb	$6, %sil
	jne	.LBB91_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB91_2
# %bb.3:                                # %"$5"
	movq	%rsi, %rcx
	callq	evList
	movq	%rax, %rsi
	jmp	.LBB91_4
.LBB91_2:                               # %"$6"
	movq	(%rsi), %rsi
.LBB91_4:                               # %"$2"
	testb	$2, %sil
	je	.LBB91_21
# %bb.5:                                # %xCnt.exit
	movq	%rsi, %rax
	shrq	$4, %rax
	movq	%rax, %rbx
	negq	%rbx
	testb	$8, %sil
	cmoveq	%rax, %rbx
	testl	%ebx, %ebx
	js	.LBB91_22
# %bb.6:                                # %xCnt.exit
	cmpl	%ebx, ($InFDs)(%rip)
	jle	.LBB91_22
# %bb.7:                                # %"$9"
	movq	($InFiles)(%rip), %rax
	movl	%ebx, %ecx
	movq	(%rax,%rcx,8), %rax
	testq	%rax, %rax
	je	.LBB91_22
# %bb.8:                                # %"$10"
	cmpl	$0, 8(%rax)
	js	.LBB91_22
# %bb.9:                                # %"$12"
	movslq	($Hear)(%rip), %rdi
	testq	%rdi, %rdi
	je	.LBB91_20
# %bb.10:                               # %"$13"
	movl	%edi, %ecx
	callq	close
	cmpl	%edi, ($InFDs)(%rip)
	jle	.LBB91_15
# %bb.11:                               # %"$2.i7"
	movq	($InFiles)(%rip), %rax
	movq	(%rax,%rdi,8), %r14
	cmpq	($InFile)(%rip), %r14
	jne	.LBB91_13
# %bb.12:                               # %"$4.i"
	movq	(%rax), %rax
	movq	%rax, ($InFile)(%rip)
	movl	12(%rax), %eax
	movl	%eax, ($Chr)(%rip)
.LBB91_13:                              # %"$5.i"
	testq	%r14, %r14
	je	.LBB91_15
# %bb.14:                               # %"$6.i"
	movq	(%r14), %rcx
	callq	free
	movq	$0, (%r14)
	movl	$-1, 8(%r14)
.LBB91_15:                              # %closeInFile.exit
	cmpl	%edi, ($OutFDs)(%rip)
	jle	.LBB91_20
# %bb.16:                               # %"$2.i9"
	movq	($OutFiles)(%rip), %rcx
	movq	(%rcx,%rdi,8), %rax
	cmpq	($OutFile)(%rip), %rax
	jne	.LBB91_18
# %bb.17:                               # %"$4.i10"
	movq	8(%rcx), %rcx
	movq	%rcx, ($OutFile)(%rip)
.LBB91_18:                              # %"$5.i12"
	testq	%rax, %rax
	je	.LBB91_20
# %bb.19:                               # %"$6.i13"
	movl	$-1, (%rax)
.LBB91_20:                              # %"$14"
	movl	%ebx, ($Hear)(%rip)
	movq	%rsi, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq
.LBB91_22:                              # %"$11"
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	badFd
.LBB91_21:                              # %"$2.i"
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	cntErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _tell;
	.scl	2;
	.type	32;
	.endef
	.globl	_tell                           # -- Begin function _tell
	.p2align	4, 0x90
_tell:                                  # @_tell
.seh_proc _tell
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movl	($Children)(%rip), %eax
	leaq	SymTab+8(%rip), %rsi
	orl	($Tell)(%rip), %eax
	je	.LBB92_20
# %bb.1:                                # %"$5"
	movq	%rcx, %rbx
	movq	8(%rcx), %rdi
	testb	$15, %dil
	je	.LBB92_3
# %bb.2:                                # %"$8"
	subq	$32, %rsp
	callq	unsync
	addq	$32, %rsp
	jmp	.LBB92_20
.LBB92_3:                               # %"$7"
	movq	(%rdi), %rsi
	testb	$6, %sil
	jne	.LBB92_7
# %bb.4:                                # %"$10"
	testb	$8, %sil
	jne	.LBB92_5
# %bb.6:                                # %"$12"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB92_7
.LBB92_5:                               # %"$13"
	movq	(%rsi), %rsi
.LBB92_7:                               # %"$9"
	xorl	%r14d, %r14d
	testb	$2, %sil
	je	.LBB92_12
# %bb.8:                                # %"$14"
	shrq	$4, %rsi
	movl	%esi, %r14d
	movq	8(%rdi), %rdi
	movq	(%rdi), %rsi
	testb	$6, %sil
	jne	.LBB92_12
# %bb.9:                                # %"$17"
	testb	$8, %sil
	jne	.LBB92_10
# %bb.11:                               # %"$19"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB92_12
.LBB92_10:                              # %"$20"
	movq	(%rsi), %rsi
.LBB92_12:                              # %"$15"
	movq	($TellBuf)(%rip), %r15
	movq	($Ptr)(%rip), %r12
	movq	($End)(%rip), %r13
	movl	PipeBufSize(%rip), %ecx
	movq	%rcx, %rax
	addq	$15, %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rax, ($TellBuf)(%rip)
	decl	%ecx
	movslq	%ecx, %rcx
	addq	%rax, %rcx
	movq	%rcx, ($End)(%rip)
	movb	$1, 8(%rax)
	addq	$9, %rax
	movq	%rax, ($Ptr)(%rip)
	cmpq	%rsp, ($StkLimit)(%rip)
	ja	.LBB92_21
# %bb.13:                               # %"$23.preheader"
	leaq	putTell(%rip), %rbx
	jmp	.LBB92_14
.LBB92_17:                              # %"$30"
                                        #   in Loop: Header=BB92_14 Depth=1
	movq	(%rsi), %rsi
	.p2align	4, 0x90
.LBB92_14:                              # %"$23.preheader"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rbx, ($PutBin)(%rip)
	movl	$0, ($Extn)(%rip)
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	binPrint
	addq	$32, %rsp
	movq	8(%rdi), %rdi
	testb	$15, %dil
	jne	.LBB92_19
# %bb.15:                               # %"$24"
                                        #   in Loop: Header=BB92_14 Depth=1
	movq	(%rdi), %rsi
	testb	$6, %sil
	jne	.LBB92_14
# %bb.16:                               # %"$27"
                                        #   in Loop: Header=BB92_14 Depth=1
	testb	$8, %sil
	jne	.LBB92_17
# %bb.18:                               # %"$29"
                                        #   in Loop: Header=BB92_14 Depth=1
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB92_14
.LBB92_19:                              # %"$25"
	subq	$32, %rsp
	movl	%r14d, %ecx
	callq	tellEnd
	addq	$32, %rsp
	movq	%r15, ($TellBuf)(%rip)
	movq	%r12, ($Ptr)(%rip)
	movq	%r13, ($End)(%rip)
.LBB92_20:                              # %"$2"
	movq	%rsi, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB92_21:                              # %"$21"
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	stkErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _poll;
	.scl	2;
	.type	32;
	.endef
	.globl	_poll                           # -- Begin function _poll
	.p2align	4, 0x90
_poll:                                  # @_poll
.seh_proc _poll
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %r14
	movq	8(%rcx), %rax
	movq	(%rax), %rdi
	testb	$6, %dil
	jne	.LBB93_4
# %bb.1:                                # %"$3"
	testb	$8, %dil
	jne	.LBB93_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdi
	jmp	.LBB93_4
.LBB93_2:                               # %"$6"
	movq	(%rdi), %rdi
.LBB93_4:                               # %"$2"
	testb	$2, %dil
	je	.LBB93_18
# %bb.5:                                # %xCnt.exit
	movq	%rdi, %rax
	shrq	$4, %rax
	movq	%rax, %rcx
	negq	%rcx
	testb	$8, %dil
	cmoveq	%rax, %rcx
	testl	%ecx, %ecx
	js	.LBB93_19
# %bb.6:                                # %xCnt.exit
	cmpl	%ecx, ($InFDs)(%rip)
	jle	.LBB93_19
# %bb.7:                                # %"$10"
	movq	($InFiles)(%rip), %rax
	movl	%ecx, %edx
	movq	(%rax,%rdx,8), %rsi
	leaq	SymTab+8(%rip), %r15
	testq	%rsi, %rsi
	je	.LBB93_17
# %bb.8:                                # %"$12"
	cmpl	$0, 8(%rsi)
	js	.LBB93_17
# %bb.9:                                # %"$14"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	subq	$32, %rsp
                                        # kill: def $ecx killed $ecx killed $rcx
	movq	%rbx, %rdx
	callq	pollIn
	addq	$32, %rsp
	.p2align	4, 0x90
.LBB93_10:                              # %"$16"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_11 Depth 2
	movl	28(%rsi), %eax
	cmpl	24(%rsi), %eax
	jg	.LBB93_16
	.p2align	4, 0x90
.LBB93_11:                              # %"$20"
                                        #   Parent Loop BB93_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	subq	$32, %rsp
	movq	%rbx, %rcx
	movl	$1, %edx
	xorl	%r8d, %r8d
	callq	gPoll
	addq	$32, %rsp
	subq	$32, %rsp
	testl	%eax, %eax
	jns	.LBB93_14
# %bb.12:                               # %"$21"
                                        #   in Loop: Header=BB93_11 Depth=2
	callq	gErrno
	addq	$32, %rsp
	cmpl	$2, %eax
	je	.LBB93_11
	jmp	.LBB93_13
	.p2align	4, 0x90
.LBB93_14:                              # %"$22"
                                        #   in Loop: Header=BB93_10 Depth=1
	movq	%rbx, %rcx
	callq	readyIn
	addq	$32, %rsp
	testb	$1, %al
	je	.LBB93_17
# %bb.15:                               # %"$25"
                                        #   in Loop: Header=BB93_10 Depth=1
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	slowNb
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB93_10
.LBB93_16:
	movq	%rdi, %r15
.LBB93_17:                              # %"$15"
	movq	%r15, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB93_13:                              # %"$23"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	selectErr
.LBB93_19:                              # %"$9"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rdi, %rdx
	callq	badFd
.LBB93_18:                              # %"$2.i"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rdi, %rdx
	callq	cntErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _read;
	.scl	2;
	.type	32;
	.endef
	.globl	_read                           # -- Begin function _read
	.p2align	4, 0x90
_read:                                  # @_read
.seh_proc _read
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rax
	testb	$15, %al
	je	.LBB94_5
# %bb.1:                                # %"$2"
	cmpl	$0, ($Chr)(%rip)
	jne	.LBB94_4
# %bb.2:                                # %"$3.i"
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	cmpl	$0, ($Chr)(%rip)
	je	.LBB94_3
.LBB94_4:                               # %"$5.i"
	subq	$32, %rsp
	movb	$1, %cl
	callq	read0
	addq	$32, %rsp
	cmpl	$10, ($Chr)(%rip)
	je	.LBB94_17
	jmp	.LBB94_19
.LBB94_5:                               # %"$3"
	movq	%rcx, %rsi
	movq	(%rax), %rdi
	movq	8(%rax), %r14
	testb	$6, %dil
	jne	.LBB94_9
# %bb.6:                                # %"$6"
	testb	$8, %dil
	jne	.LBB94_7
# %bb.8:                                # %"$8"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdi
	jmp	.LBB94_9
.LBB94_3:
	leaq	SymTab+8(%rip), %rax
	jmp	.LBB94_19
.LBB94_7:                               # %"$9"
	movq	(%rdi), %rdi
.LBB94_9:                               # %"$5"
	movl	%edi, %eax
	andl	$14, %eax
	cmpl	$8, %eax
	jne	.LBB94_20
# %bb.10:                               # %"$11"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rdi, (%rbx)
	movq	%rbx, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rbx, env(%rip)
	movq	(%r14), %rax
	testb	$6, %al
	jne	.LBB94_14
# %bb.11:                               # %"$13"
	testb	$8, %al
	jne	.LBB94_12
# %bb.13:                               # %"$15"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB94_14
.LBB94_12:                              # %"$16"
	movq	(%rax), %rax
.LBB94_14:                              # %"$12"
	movl	%eax, %ecx
	andl	$14, %ecx
	subq	$32, %rsp
	cmpl	$8, %ecx
	jne	.LBB94_21
# %bb.15:                               # %"$18"
	movq	%rax, %rcx
	callq	firstChar
	movq	%rdi, %rcx
	movl	%eax, %edx
	callq	token
	addq	$32, %rsp
	movq	%rax, %rcx
	testq	%rax, %rax
	leaq	SymTab+8(%rip), %rax
	cmovneq	%rcx, %rax
	movq	8(%rbx), %rcx
	movq	%rcx, env(%rip)
	cmpl	$10, ($Chr)(%rip)
	jne	.LBB94_19
.LBB94_17:                              # %"$23"
	movq	($InFile)(%rip), %rcx
	movq	($InFiles)(%rip), %rdx
	cmpq	(%rdx), %rcx
	jne	.LBB94_19
# %bb.18:                               # %"$24"
	movl	$0, ($Chr)(%rip)
.LBB94_19:                              # %"$22"
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	retq
.LBB94_20:                              # %"$10"
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rdi, %rdx
	callq	symErr
.LBB94_21:                              # %"$17"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	symErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _key;
	.scl	2;
	.type	32;
	.endef
	.globl	_key                            # -- Begin function _key
	.p2align	4, 0x90
_key:                                   # @_key
.seh_proc _key
# %bb.0:                                # %"$1"
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %r14
	movl	($OutFDs)(%rip), %esi
	testl	%esi, %esi
	jle	.LBB95_6
# %bb.1:                                # %"$3.i.preheader"
	movq	($OutFiles)(%rip), %rbx
	xorl	%edi, %edi
	jmp	.LBB95_2
	.p2align	4, 0x90
.LBB95_5:                               # %flush.exit.i
                                        #   in Loop: Header=BB95_2 Depth=1
	incq	%rdi
	cmpl	%edi, %esi
	jle	.LBB95_6
.LBB95_2:                               # %"$3.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rbx,%rdi,8), %rdx
	testq	%rdx, %rdx
	je	.LBB95_5
# %bb.3:                                # %"$3.i.i"
                                        #   in Loop: Header=BB95_2 Depth=1
	movl	4(%rdx), %r8d
	testl	%r8d, %r8d
	je	.LBB95_5
# %bb.4:                                # %"$6.i.i"
                                        #   in Loop: Header=BB95_2 Depth=1
	movl	$0, 4(%rdx)
	movl	(%rdx), %ecx
	addq	$8, %rdx
	callq	wrBytes
	jmp	.LBB95_5
.LBB95_6:                               # %flushAll.exit
	movq	Termio(%rip), %r15
	callq	setRaw
	movq	8(%r14), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB95_10
# %bb.7:                                # %"$3"
	testb	$8, %al
	jne	.LBB95_8
# %bb.9:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB95_10
.LBB95_8:                               # %"$6"
	movq	(%rax), %rax
.LBB95_10:                              # %"$2"
	leaq	SymTab+8(%rip), %rsi
	cmpq	%rsi, %rax
	jne	.LBB95_12
# %bb.11:
	movabsq	$9223372036854775807, %r8       # imm = 0x7FFFFFFFFFFFFFFF
	jmp	.LBB95_14
.LBB95_12:                              # %"$8"
	testb	$2, %al
	je	.LBB95_36
# %bb.13:                               # %xCnt.exit
	movq	%rax, %rcx
	shrq	$4, %rcx
	movq	%rcx, %r8
	negq	%r8
	testb	$8, %al
	cmoveq	%rcx, %r8
.LBB95_14:                              # %"$9"
	movq	%r14, %rcx
	xorl	%edx, %edx
	callq	waitFd
	testq	%rax, %rax
	je	.LBB95_33
# %bb.15:                               # %"$10"
	callq	stdinByte
	movl	%eax, %edi
	cmpl	$128, %eax
	jge	.LBB95_16
.LBB95_24:                              # %"$4.i"
	movslq	%edi, %rbx
.LBB95_31:                              # %"$2.i9"
	shlq	$4, %rbx
	orq	$2, %rbx
	cmpq	$2, %rbx
	jne	.LBB95_32
.LBB95_33:                              # %"$12"
	testq	%r15, %r15
	je	.LBB95_34
.LBB95_35:                              # %"$25"
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	retq
.LBB95_16:                              # %"$14"
	movl	$4082, %ebx                     # imm = 0xFF2
	cmpl	$255, %edi
	jne	.LBB95_17
.LBB95_32:                              # %"$3.i.i10"
	movq	%rbx, %rcx
	xorl	%edx, %edx
	callq	consSym
	movq	%rax, %rsi
	testq	%r15, %r15
	jne	.LBB95_35
.LBB95_34:                              # %"$24"
	callq	setCooked
	jmp	.LBB95_35
.LBB95_17:                              # %"$16"
	testb	$32, %dil
	jne	.LBB95_19
# %bb.18:                               # %"$18"
	andl	$31, %edi
	movl	%edi, %r14d
	jmp	.LBB95_23
.LBB95_19:                              # %"$19"
	testb	$16, %dil
	jne	.LBB95_21
# %bb.20:                               # %"$21"
	andl	$15, %edi
	jmp	.LBB95_22
.LBB95_21:                              # %"$22"
	andl	$7, %edi
	shll	$6, %edi
	callq	stdinByte
	andl	$63, %eax
	orl	%eax, %edi
.LBB95_22:                              # %"$23"
	shll	$6, %edi
	callq	stdinByte
	movl	%eax, %r14d
	andl	$63, %r14d
	orl	%edi, %r14d
.LBB95_23:                              # %"$13"
	movl	%r14d, %edi
	shll	$6, %edi
	callq	stdinByte
                                        # kill: def $eax killed $eax def $rax
	andl	$63, %eax
	orl	%eax, %edi
	cmpl	$127, %edi
	jle	.LBB95_24
# %bb.25:                               # %"$3.i8"
	cmpl	$1114112, %edi                  # imm = 0x110000
	je	.LBB95_32
# %bb.26:                               # %"$5.i"
	cmpl	$2047, %edi                     # imm = 0x7FF
	jg	.LBB95_28
# %bb.27:                               # %"$8.i"
	andl	$63, %edi
	shll	$8, %edi
	orl	%edi, %r14d
	orl	$32960, %r14d                   # imm = 0x80C0
	movq	%r14, %rbx
	jmp	.LBB95_31
.LBB95_28:                              # %"$7.i"
	cmpl	$65535, %edi                    # imm = 0xFFFF
	jg	.LBB95_30
# %bb.29:                               # %"$10.i"
	movl	%r14d, %eax
	shrl	$6, %eax
	andl	$63, %r14d
	shll	$8, %r14d
	orl	%eax, %r14d
	andl	$63, %edi
	shll	$16, %edi
	orl	%r14d, %edi
	orl	$8421600, %edi                  # imm = 0x8080E0
	movq	%rdi, %rbx
	jmp	.LBB95_31
.LBB95_30:                              # %"$9.i"
	movl	%r14d, %ecx
	shrl	$12, %ecx
	movl	%r14d, %edx
	andl	$4032, %edx                     # imm = 0xFC0
	andl	$63, %r14d
	shll	$16, %r14d
	shll	$24, %eax
	leal	(%rcx,%rdx,4), %ecx
	orl	%r14d, %ecx
	leal	-2139062032(%rax,%rcx), %ebx
	jmp	.LBB95_31
.LBB95_36:                              # %"$2.i"
	movq	%r14, %rcx
	movq	%rax, %rdx
	callq	cntErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _peek;
	.scl	2;
	.type	32;
	.endef
	.globl	_peek                           # -- Begin function _peek
	.p2align	4, 0x90
_peek:                                  # @_peek
.seh_proc _peek
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movl	($Chr)(%rip), %eax
	testl	%eax, %eax
	je	.LBB96_1
# %bb.2:                                # %"$3"
	testl	%eax, %eax
	jns	.LBB96_3
	jmp	.LBB96_11
.LBB96_1:                               # %"$2"
	callq	*($Get)(%rip)
                                        # kill: def $eax killed $eax def $rax
	testl	%eax, %eax
	js	.LBB96_11
.LBB96_3:                               # %"$5"
	cmpl	$128, %eax
	jl	.LBB96_10
# %bb.4:                                # %"$3.i"
	movl	$4082, %ecx                     # imm = 0xFF2
	cmpl	$1114112, %eax                  # imm = 0x110000
	je	.LBB96_12
# %bb.5:                                # %"$5.i"
	movl	%eax, %ecx
	cmpl	$2047, %eax                     # imm = 0x7FF
	jg	.LBB96_7
# %bb.6:                                # %"$8.i"
	shrl	$6, %ecx
	andl	$63, %eax
	shll	$8, %eax
	orl	%ecx, %eax
	orl	$32960, %eax                    # imm = 0x80C0
	jmp	.LBB96_10
.LBB96_7:                               # %"$7.i"
	cmpl	$65535, %eax                    # imm = 0xFFFF
	jg	.LBB96_9
# %bb.8:                                # %"$10.i"
	shrl	$12, %ecx
	leal	(,%rax,4), %edx
	andl	$16128, %edx                    # imm = 0x3F00
	andl	$63, %eax
	shll	$16, %eax
	orl	%edx, %eax
	orl	%ecx, %eax
	orl	$8421600, %eax                  # imm = 0x8080E0
	jmp	.LBB96_10
.LBB96_9:                               # %"$9.i"
	shrl	$18, %ecx
	andl	$7, %ecx
	movl	%eax, %edx
	shrl	$4, %edx
	andl	$16128, %edx                    # imm = 0x3F00
	orl	%ecx, %edx
	movl	%eax, %ecx
	shll	$10, %ecx
	andl	$4128768, %ecx                  # imm = 0x3F0000
	orl	%edx, %ecx
	andl	$63, %eax
	shll	$24, %eax
	leal	-2139062032(%rax,%rcx), %eax
.LBB96_10:                              # %"$2.i"
	movl	%eax, %ecx
	shlq	$4, %rcx
	orq	$2, %rcx
	cmpq	$2, %rcx
	jne	.LBB96_12
.LBB96_11:                              # %"$6"
	leaq	SymTab+8(%rip), %rax
	addq	$40, %rsp
	retq
.LBB96_12:                              # %"$3.i.i"
	xorl	%edx, %edx
	addq	$40, %rsp
	jmp	consSym                         # TAILCALL
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _char;
	.scl	2;
	.type	32;
	.endef
	.globl	_char                           # -- Begin function _char
	.p2align	4, 0x90
_char:                                  # @_char
.seh_proc _char
# %bb.0:                                # %"$1"
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	testb	$15, %al
	je	.LBB97_23
# %bb.1:                                # %"$4"
	movl	($Chr)(%rip), %edi
	testl	%edi, %edi
	jne	.LBB97_3
# %bb.2:                                # %"$5"
	callq	*($Get)(%rip)
	movl	%eax, %edi
.LBB97_3:                               # %"$6"
	leaq	SymTab+8(%rip), %rsi
	testl	%edi, %edi
	js	.LBB97_22
# %bb.4:                                # %"$8"
	cmpl	$128, %edi
	jge	.LBB97_5
.LBB97_13:                              # %"$4.i"
	movslq	%edi, %rbx
.LBB97_20:                              # %"$2.i"
	shlq	$4, %rbx
	orq	$2, %rbx
	cmpq	$2, %rbx
	jne	.LBB97_21
	jmp	.LBB97_22
.LBB97_23:                              # %"$3"
	movq	%rcx, %rsi
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB97_27
# %bb.24:                               # %"$11"
	testb	$8, %al
	jne	.LBB97_25
# %bb.26:                               # %"$13"
	movq	%rax, %rcx
	callq	evList
.LBB97_27:                              # %"$10"
	testb	$2, %al
	jne	.LBB97_28
.LBB97_39:                              # %"$15"
	leaq	SymTab+280(%rip), %rcx
	cmpq	%rcx, %rax
	jne	.LBB97_41
# %bb.40:                               # %"$21"
	movl	$4082, %ecx                     # imm = 0xFF2
	jmp	.LBB97_38
.LBB97_5:                               # %"$3.i"
	movl	$4082, %ebx                     # imm = 0xFF2
	cmpl	$255, %edi
	jne	.LBB97_6
.LBB97_21:                              # %"$3.i.i"
	movq	%rbx, %rcx
	xorl	%edx, %edx
	callq	consSym
	movq	%rax, %rsi
.LBB97_22:                              # %"$9"
	callq	*($Get)(%rip)
.LBB97_43:                              # %"$2"
	movq	%rsi, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq
.LBB97_6:                               # %"$5.i"
	testb	$32, %dil
	jne	.LBB97_8
# %bb.7:                                # %"$7.i"
	andl	$31, %edi
	movl	%edi, %r14d
	jmp	.LBB97_12
.LBB97_41:                              # %"$20"
	movl	%eax, %ecx
	andl	$14, %ecx
	cmpl	$8, %ecx
	jne	.LBB97_44
# %bb.42:                               # %"$23"
	movq	%rax, %rcx
	callq	firstChar
	movslq	%eax, %rsi
	shlq	$4, %rsi
	orq	$2, %rsi
	jmp	.LBB97_43
.LBB97_25:                              # %"$14"
	movq	(%rax), %rax
	testb	$2, %al
	je	.LBB97_39
.LBB97_28:                              # %"$16"
	movq	%rax, %rdx
	shrq	$4, %rdx
	leaq	SymTab+8(%rip), %rsi
	je	.LBB97_43
# %bb.29:                               # %"$17"
	cmpl	$127, %edx
	jg	.LBB97_31
# %bb.30:                               # %"$4.i15"
	movslq	%edx, %rcx
.LBB97_37:                              # %"$2.i22"
	shlq	$4, %rcx
	orq	$2, %rcx
	cmpq	$2, %rcx
	je	.LBB97_43
	jmp	.LBB97_38
.LBB97_31:                              # %"$3.i16"
	movl	$4082, %ecx                     # imm = 0xFF2
	cmpl	$1114112, %edx                  # imm = 0x110000
	jne	.LBB97_32
.LBB97_38:                              # %"$3.i.i23"
	xorl	%edx, %edx
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	jmp	consSym                         # TAILCALL
.LBB97_8:                               # %"$8.i"
	testb	$16, %dil
	jne	.LBB97_10
# %bb.9:                                # %"$10.i"
	andl	$15, %edi
	jmp	.LBB97_11
.LBB97_32:                              # %"$5.i17"
	cmpl	$2047, %edx                     # imm = 0x7FF
	jg	.LBB97_34
# %bb.33:                               # %"$8.i18"
	shrq	$10, %rax
	andl	$67075903, %eax                 # imm = 0x3FF7F3F
	andl	$63, %edx
	shll	$8, %edx
	orl	%eax, %edx
	orl	$32960, %edx                    # imm = 0x80C0
	movq	%rdx, %rcx
	jmp	.LBB97_37
.LBB97_10:                              # %"$11.i"
	andl	$7, %edi
	shll	$6, %edi
	callq	*($Get)(%rip)
	andl	$63, %eax
	orl	%eax, %edi
.LBB97_11:                              # %"$12.i"
	shll	$6, %edi
	callq	*($Get)(%rip)
	movl	%eax, %r14d
	andl	$63, %r14d
	orl	%edi, %r14d
.LBB97_12:                              # %getChar.exit
	movl	%r14d, %edi
	shll	$6, %edi
	callq	*($Get)(%rip)
                                        # kill: def $eax killed $eax def $rax
	andl	$63, %eax
	orl	%eax, %edi
	cmpl	$127, %edi
	jle	.LBB97_13
# %bb.14:                               # %"$3.i9"
	cmpl	$1114112, %edi                  # imm = 0x110000
	je	.LBB97_21
# %bb.15:                               # %"$5.i10"
	cmpl	$2047, %edi                     # imm = 0x7FF
	jg	.LBB97_17
# %bb.16:                               # %"$8.i11"
	andl	$63, %edi
	shll	$8, %edi
	orl	%edi, %r14d
	orl	$32960, %r14d                   # imm = 0x80C0
	movq	%r14, %rbx
	jmp	.LBB97_20
.LBB97_34:                              # %"$7.i19"
	cmpl	$65535, %edx                    # imm = 0xFFFF
	jg	.LBB97_36
# %bb.35:                               # %"$10.i20"
	shrq	$16, %rax
	andl	$1015583, %eax                  # imm = 0xF7F1F
	leal	(,%rdx,4), %ecx
	andl	$16128, %ecx                    # imm = 0x3F00
	andl	$63, %edx
	shll	$16, %edx
	orl	%ecx, %edx
	orl	%eax, %edx
	orl	$8421600, %edx                  # imm = 0x8080E0
	movq	%rdx, %rcx
	jmp	.LBB97_37
.LBB97_17:                              # %"$7.i12"
	cmpl	$65535, %edi                    # imm = 0xFFFF
	jg	.LBB97_19
# %bb.18:                               # %"$10.i13"
	movl	%r14d, %eax
	shrl	$6, %eax
	andl	$63, %r14d
	shll	$8, %r14d
	orl	%eax, %r14d
	andl	$63, %edi
	shll	$16, %edi
	orl	%r14d, %edi
	orl	$8421600, %edi                  # imm = 0x8080E0
	movq	%rdi, %rbx
	jmp	.LBB97_20
.LBB97_36:                              # %"$9.i21"
	movl	%eax, %ecx
	shrl	$22, %ecx
	andl	$7, %ecx
	shrl	$8, %eax
	andl	$16128, %eax                    # imm = 0x3F00
	orl	%ecx, %eax
	movl	%edx, %ecx
	shll	$10, %ecx
	andl	$4128768, %ecx                  # imm = 0x3F0000
	orl	%eax, %ecx
	andl	$63, %edx
	shll	$24, %edx
	leal	-2139062032(%rdx,%rcx), %ecx
	jmp	.LBB97_37
.LBB97_19:                              # %"$9.i14"
	movl	%r14d, %ecx
	shrl	$12, %ecx
	movl	%r14d, %edx
	andl	$4032, %edx                     # imm = 0xFC0
	andl	$63, %r14d
	shll	$16, %r14d
	shll	$24, %eax
	leal	(%rcx,%rdx,4), %ecx
	orl	%r14d, %ecx
	leal	-2139062032(%rax,%rcx), %ebx
	jmp	.LBB97_20
.LBB97_44:                              # %"$22"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	atomErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _skip;
	.scl	2;
	.type	32;
	.endef
	.globl	_skip                           # -- Begin function _skip
	.p2align	4, 0x90
_skip:                                  # @_skip
.seh_proc _skip
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rcx
	testb	$6, %cl
	jne	.LBB98_4
# %bb.1:                                # %"$3.i"
	testb	$8, %cl
	jne	.LBB98_2
# %bb.3:                                # %"$5.i"
	callq	evList
	movq	%rax, %rcx
	jmp	.LBB98_4
.LBB98_2:                               # %"$6.i"
	movq	(%rcx), %rcx
.LBB98_4:                               # %evSym.exit
	callq	xSym
	movq	%rax, %rcx
	callq	firstChar
	movl	%eax, %esi
	movl	($Chr)(%rip), %eax
	cmpl	$32, %eax
	jg	.LBB98_7
.LBB98_6:                               # %"$4.i"
                                        # =>This Inner Loop Header: Depth=1
	callq	*($Get)(%rip)
                                        # kill: def $eax killed $eax def $rax
	testl	%eax, %eax
	js	.LBB98_19
# %bb.5:                                # %"$3.i1"
                                        #   in Loop: Header=BB98_6 Depth=1
	cmpl	$32, %eax
	jle	.LBB98_6
.LBB98_7:                               # %"$5.i3"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_8 Depth 2
	cmpl	%esi, %eax
	jne	.LBB98_11
	.p2align	4, 0x90
.LBB98_8:                               # %"$10.i"
                                        #   Parent Loop BB98_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	callq	*($Get)(%rip)
	cmpl	$10, %eax
	je	.LBB98_10
# %bb.9:                                # %"$11.i"
                                        #   in Loop: Header=BB98_8 Depth=2
	testl	%eax, %eax
	jns	.LBB98_8
	jmp	.LBB98_19
	.p2align	4, 0x90
.LBB98_10:                              # %"$12.i"
                                        #   in Loop: Header=BB98_7 Depth=1
	callq	*($Get)(%rip)
                                        # kill: def $eax killed $eax def $rax
	cmpl	$32, %eax
	jle	.LBB98_6
	jmp	.LBB98_7
.LBB98_11:                              # %"$3"
	cmpl	$128, %eax
	jl	.LBB98_18
# %bb.12:                               # %"$3.i5"
	movl	$4082, %ecx                     # imm = 0xFF2
	cmpl	$1114112, %eax                  # imm = 0x110000
	je	.LBB98_20
# %bb.13:                               # %"$5.i6"
	movl	%eax, %ecx
	cmpl	$2047, %eax                     # imm = 0x7FF
	jg	.LBB98_15
# %bb.14:                               # %"$8.i"
	shrl	$6, %ecx
	andl	$63, %eax
	shll	$8, %eax
	orl	%ecx, %eax
	orl	$32960, %eax                    # imm = 0x80C0
	jmp	.LBB98_18
.LBB98_15:                              # %"$7.i"
	cmpl	$65535, %eax                    # imm = 0xFFFF
	jg	.LBB98_17
# %bb.16:                               # %"$10.i7"
	shrl	$12, %ecx
	leal	(,%rax,4), %edx
	andl	$16128, %edx                    # imm = 0x3F00
	andl	$63, %eax
	shll	$16, %eax
	orl	%edx, %eax
	orl	%ecx, %eax
	orl	$8421600, %eax                  # imm = 0x8080E0
	jmp	.LBB98_18
.LBB98_17:                              # %"$9.i"
	shrl	$18, %ecx
	andl	$7, %ecx
	movl	%eax, %edx
	shrl	$4, %edx
	andl	$16128, %edx                    # imm = 0x3F00
	orl	%ecx, %edx
	movl	%eax, %ecx
	shll	$10, %ecx
	andl	$4128768, %ecx                  # imm = 0x3F0000
	orl	%edx, %ecx
	andl	$63, %eax
	shll	$24, %eax
	leal	-2139062032(%rax,%rcx), %eax
.LBB98_18:                              # %"$2.i8"
	movl	%eax, %ecx
	shlq	$4, %rcx
	orq	$2, %rcx
	cmpq	$2, %rcx
	jne	.LBB98_20
.LBB98_19:                              # %"$4"
	leaq	SymTab+8(%rip), %rax
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB98_20:                              # %"$3.i.i"
	xorl	%edx, %edx
	addq	$32, %rsp
	popq	%rsi
	jmp	consSym                         # TAILCALL
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _eol;
	.scl	2;
	.type	32;
	.endef
	.globl	_eol                            # -- Begin function _eol
	.p2align	4, 0x90
_eol:                                   # @_eol
.seh_proc _eol
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movl	($Chr)(%rip), %eax
	testl	%eax, %eax
	jne	.LBB99_2
# %bb.1:                                # %"$3"
	callq	*($Get)(%rip)
.LBB99_2:                               # %"$4"
	cmpl	$10, %eax
	leaq	SymTab+280(%rip), %rdx
	leaq	SymTab+8(%rip), %rcx
	cmoveq	%rdx, %rcx
	testl	%eax, %eax
	cmovleq	%rdx, %rcx
	movq	%rcx, %rax
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _eof;
	.scl	2;
	.type	32;
	.endef
	.globl	_eof                            # -- Begin function _eof
	.p2align	4, 0x90
_eof:                                   # @_eof
.seh_proc _eof
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB100_4
# %bb.1:                                # %"$4"
	testb	$8, %al
	jne	.LBB100_2
# %bb.3:                                # %"$6"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB100_4
.LBB100_2:                              # %"$7"
	movq	(%rax), %rax
.LBB100_4:                              # %"$3"
	leaq	SymTab+8(%rip), %rsi
	cmpq	%rsi, %rax
	jne	.LBB100_5
# %bb.6:                                # %"$8"
	cmpl	$0, ($Chr)(%rip)
	jne	.LBB100_8
# %bb.7:                                # %"$10"
	callq	*($Get)(%rip)
	testl	%eax, %eax
.LBB100_8:                              # %"$2"
	leaq	SymTab+280(%rip), %rax
	cmovsq	%rax, %rsi
	jmp	.LBB100_9
.LBB100_5:                              # %"$9"
	movl	$-1, ($Chr)(%rip)
	leaq	SymTab+280(%rip), %rsi
.LBB100_9:                              # %"$2"
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _from;
	.scl	2;
	.type	32;
	.endef
	.globl	_from                           # -- Begin function _from
	.p2align	4, 0x90
_from:                                  # @_from
.seh_proc _from
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$24, %rsp
	.seh_stackalloc 24
	leaq	16(%rsp), %rbp
	.seh_setframe %rbp, 16
	.seh_endprologue
	movq	%rcx, %r15
	movq	8(%rcx), %r14
	movq	(%r14), %rcx
	testb	$6, %cl
	jne	.LBB101_4
# %bb.1:                                # %"$3.i"
	testb	$8, %cl
	jne	.LBB101_2
# %bb.3:                                # %"$5.i"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB101_4
.LBB101_2:                              # %"$6.i"
	movq	(%rcx), %rcx
.LBB101_4:                              # %evSym.exit
	subq	$32, %rsp
	callq	xSym
	addq	$32, %rsp
	movq	%rax, %rdx
	leaq	SymTab+8(%rip), %r12
	cmpq	%r12, %rax
	jne	.LBB101_6
# %bb.5:
	movl	$1, %eax
	movl	$2, %esi
	jmp	.LBB101_14
.LBB101_6:                              # %"$3.i7"
	movq	-8(%rdx), %rsi
	testb	$8, %sil
	jne	.LBB101_40
	.p2align	4, 0x90
# %bb.8:                                # %"$8.i"
	testb	$6, %sil
	jne	.LBB101_9
.LBB101_7:                              # %"$8.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rsi), %rsi
	testb	$6, %sil
	je	.LBB101_7
.LBB101_9:                              # %xName.exit
	movl	$1, %eax
	testb	$4, %sil
	movq	%rsi, %rcx
	je	.LBB101_12
# %bb.10:                               # %"$3.i11.preheader"
	movl	$1, %eax
	movq	%rsi, %rcx
	.p2align	4, 0x90
.LBB101_11:                             # %"$3.i11"
                                        # =>This Inner Loop Header: Depth=1
	addq	$8, %rax
	movq	4(%rcx), %rcx
	testb	$4, %cl
	jne	.LBB101_11
.LBB101_12:                             # %"$4.i"
	shrq	$4, %rcx
	je	.LBB101_14
	.p2align	4, 0x90
.LBB101_13:                             # %"$6.i13"
                                        # =>This Inner Loop Header: Depth=1
	incq	%rax
	shrq	$8, %rcx
	jne	.LBB101_13
.LBB101_14:                             # %bufSize.exit
	addq	$15, %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	xorl	%ecx, %ecx
	movq	%rbx, %rax
	testq	%rcx, %rcx
	jne	.LBB101_31
	.p2align	4, 0x90
.LBB101_16:                             # %"$2.i.i"
	cmpq	$2, %rsi
	je	.LBB101_17
# %bb.28:                               # %"$5.i.i"
	testb	$2, %sil
	jne	.LBB101_29
# %bb.30:                               # %"$7.i.i"
	movq	-4(%rsi), %rcx
	movq	4(%rsi), %rsi
	jmp	.LBB101_31
	.p2align	4, 0x90
.LBB101_29:                             # %"$8.i.i"
	movq	%rsi, %rcx
	shrq	$4, %rcx
	movl	$2, %esi
	.p2align	4, 0x90
.LBB101_31:                             # %symByte.exit.i
                                        # =>This Inner Loop Header: Depth=1
	movb	%cl, (%rax)
	testb	%cl, %cl
	je	.LBB101_18
# %bb.32:                               # %"$3.i15"
                                        #   in Loop: Header=BB101_31 Depth=1
	shrq	$8, %rcx
	incq	%rax
	testq	%rcx, %rcx
	jne	.LBB101_31
	jmp	.LBB101_16
.LBB101_17:                             # %symByte.exit.thread.i
	movb	$0, (%rax)
.LBB101_18:                             # %bufString.exit
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r13
	movq	%rdx, (%r13)
	movq	$0, 16(%r13)
	movq	%rbx, 24(%r13)
	movq	env(%rip), %rax
	movq	%rax, 8(%r13)
	movq	%r13, env(%rip)
	movq	8(%r14), %rsi
	testb	$15, %sil
	movq	%r13, (%rbp)                    # 8-byte Spill
	movl	$1, %r14d
	je	.LBB101_33
.LBB101_19:                             # %"$4"
	movl	($Chr)(%rip), %r15d
	testl	%r15d, %r15d
	je	.LBB101_20
# %bb.21:                               # %"$6"
	testl	%r15d, %r15d
	jns	.LBB101_22
	jmp	.LBB101_65
	.p2align	4, 0x90
.LBB101_51:                             # %symByte.exit.thread.i49
                                        #   in Loop: Header=BB101_33 Depth=1
	movb	$0, (%rax)
.LBB101_52:                             # %bufString.exit59
                                        #   in Loop: Header=BB101_33 Depth=1
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r13
	movq	%rdx, (%r13)
	movq	$0, 16(%r13)
	movq	%rbx, 24(%r13)
	movq	env(%rip), %rax
	movq	%rax, 8(%r13)
	movq	%r13, env(%rip)
	incq	%r14
	movq	8(%rsi), %rsi
	testb	$15, %sil
	jne	.LBB101_19
.LBB101_33:                             # %"$3"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_42 Depth 2
                                        #     Child Loop BB101_45 Depth 2
                                        #     Child Loop BB101_47 Depth 2
                                        #     Child Loop BB101_56 Depth 2
	movq	(%rsi), %rcx
	testb	$6, %cl
	jne	.LBB101_37
# %bb.34:                               # %"$3.i19"
                                        #   in Loop: Header=BB101_33 Depth=1
	testb	$8, %cl
	jne	.LBB101_35
# %bb.36:                               # %"$5.i21"
                                        #   in Loop: Header=BB101_33 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB101_37
.LBB101_35:                             # %"$6.i20"
                                        #   in Loop: Header=BB101_33 Depth=1
	movq	(%rcx), %rcx
	.p2align	4, 0x90
.LBB101_37:                             # %evSym.exit23
                                        #   in Loop: Header=BB101_33 Depth=1
	subq	$32, %rsp
	callq	xSym
	addq	$32, %rsp
	movq	%rax, %rdx
	cmpq	%r12, %rax
	jne	.LBB101_39
# %bb.38:                               #   in Loop: Header=BB101_33 Depth=1
	movl	$1, %eax
	movl	$2, %edi
	jmp	.LBB101_48
	.p2align	4, 0x90
.LBB101_39:                             # %"$3.i25"
                                        #   in Loop: Header=BB101_33 Depth=1
	movq	-8(%rdx), %rdi
	testb	$8, %dil
	je	.LBB101_42
	jmp	.LBB101_40
	.p2align	4, 0x90
.LBB101_41:                             # %"$8.i30"
                                        #   in Loop: Header=BB101_42 Depth=2
	movq	8(%rdi), %rdi
.LBB101_42:                             # %"$8.i30"
                                        #   Parent Loop BB101_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	testb	$6, %dil
	je	.LBB101_41
# %bb.43:                               # %xName.exit32
                                        #   in Loop: Header=BB101_33 Depth=1
	movl	$1, %eax
	testb	$4, %dil
	movq	%rdi, %rcx
	je	.LBB101_46
# %bb.44:                               # %"$3.i35.preheader"
                                        #   in Loop: Header=BB101_33 Depth=1
	movl	$1, %eax
	movq	%rdi, %rcx
	.p2align	4, 0x90
.LBB101_45:                             # %"$3.i35"
                                        #   Parent Loop BB101_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addq	$8, %rax
	movq	4(%rcx), %rcx
	testb	$4, %cl
	jne	.LBB101_45
.LBB101_46:                             # %"$4.i39"
                                        #   in Loop: Header=BB101_33 Depth=1
	shrq	$4, %rcx
	je	.LBB101_48
	.p2align	4, 0x90
.LBB101_47:                             # %"$6.i41"
                                        #   Parent Loop BB101_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	incq	%rax
	shrq	$8, %rcx
	jne	.LBB101_47
.LBB101_48:                             # %bufSize.exit43
                                        #   in Loop: Header=BB101_33 Depth=1
	addq	$15, %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	xorl	%ecx, %ecx
	movq	%rbx, %rax
	testq	%rcx, %rcx
	jne	.LBB101_56
	.p2align	4, 0x90
.LBB101_50:                             # %"$2.i.i48"
                                        #   in Loop: Header=BB101_33 Depth=1
	cmpq	$2, %rdi
	je	.LBB101_51
# %bb.53:                               # %"$5.i.i51"
                                        #   in Loop: Header=BB101_33 Depth=1
	testb	$2, %dil
	jne	.LBB101_54
# %bb.55:                               # %"$7.i.i53"
                                        #   in Loop: Header=BB101_33 Depth=1
	movq	-4(%rdi), %rcx
	movq	4(%rdi), %rdi
	jmp	.LBB101_56
	.p2align	4, 0x90
.LBB101_54:                             # %"$8.i.i52"
                                        #   in Loop: Header=BB101_33 Depth=1
	movq	%rdi, %rcx
	shrq	$4, %rcx
	movl	$2, %edi
	.p2align	4, 0x90
.LBB101_56:                             # %symByte.exit.i56
                                        #   Parent Loop BB101_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movb	%cl, (%rax)
	testb	%cl, %cl
	je	.LBB101_52
# %bb.57:                               # %"$3.i57"
                                        #   in Loop: Header=BB101_56 Depth=2
	shrq	$8, %rcx
	incq	%rax
	testq	%rcx, %rcx
	jne	.LBB101_56
	jmp	.LBB101_50
.LBB101_20:                             # %"$5"
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	movl	($Chr)(%rip), %r15d
	testl	%r15d, %r15d
	js	.LBB101_65
.LBB101_22:                             # %"$8.preheader"
	movq	%r14, -8(%rbp)                  # 8-byte Spill
	jmp	.LBB101_23
	.p2align	4, 0x90
.LBB101_64:                             # %"$22"
                                        #   in Loop: Header=BB101_23 Depth=1
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	movl	($Chr)(%rip), %r15d
	testl	%r15d, %r15d
	movq	-8(%rbp), %r14                  # 8-byte Reload
	js	.LBB101_65
.LBB101_23:                             # %"$8"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_24 Depth 2
                                        #       Child Loop BB101_25 Depth 3
                                        #         Child Loop BB101_60 Depth 4
	movq	%r13, %rbx
	movq	%r14, %r12
	.p2align	4, 0x90
.LBB101_24:                             # %"$10"
                                        #   Parent Loop BB101_23 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB101_25 Depth 3
                                        #         Child Loop BB101_60 Depth 4
	movq	16(%rbx), %rdi
	movq	24(%rbx), %rsi
	.p2align	4, 0x90
.LBB101_25:                             # %"$10"
                                        #   Parent Loop BB101_23 Depth=1
                                        #     Parent Loop BB101_24 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB101_60 Depth 4
	cmpb	%r15b, (%rsi,%rdi)
	je	.LBB101_26
# %bb.58:                               # %"$13"
                                        #   in Loop: Header=BB101_25 Depth=3
	testq	%rdi, %rdi
	je	.LBB101_62
# %bb.59:                               # %"$17.preheader"
                                        #   in Loop: Header=BB101_25 Depth=3
	decq	%rdi
	movl	$1, %r14d
	movq	%rdi, %rcx
	.p2align	4, 0x90
.LBB101_60:                             # %"$17"
                                        #   Parent Loop BB101_23 Depth=1
                                        #     Parent Loop BB101_24 Depth=2
                                        #       Parent Loop BB101_25 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movq	%rcx, %rdi
	movq	%rcx, 16(%rbx)
	testq	%rcx, %rcx
	je	.LBB101_25
# %bb.61:                               # %"$18"
                                        #   in Loop: Header=BB101_60 Depth=4
	leaq	(%rsi,%r14), %rdx
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rdi, %r8
	callq	memcmp
	addq	$32, %rsp
	leaq	-1(%rdi), %rcx
	incq	%r14
	testl	%eax, %eax
	jne	.LBB101_60
	jmp	.LBB101_25
	.p2align	4, 0x90
.LBB101_26:                             # %"$12"
                                        #   in Loop: Header=BB101_24 Depth=2
	leaq	1(%rdi), %rax
	movq	%rax, 16(%rbx)
	cmpb	$0, 1(%rsi,%rdi)
	je	.LBB101_27
.LBB101_62:                             # %"$15"
                                        #   in Loop: Header=BB101_24 Depth=2
	decq	%r12
	je	.LBB101_64
# %bb.63:                               # %"$21"
                                        #   in Loop: Header=BB101_24 Depth=2
	movq	8(%rbx), %rbx
	jmp	.LBB101_24
.LBB101_27:                             # %"$14"
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	movq	(%rbp), %rax                    # 8-byte Reload
	movq	8(%rax), %rax
	movq	%rax, env(%rip)
	movq	(%rbx), %rax
	jmp	.LBB101_66
.LBB101_65:                             # %"$9"
	movq	(%rbp), %rax                    # 8-byte Reload
	movq	8(%rax), %rax
	movq	%rax, env(%rip)
	leaq	SymTab+8(%rip), %rax
.LBB101_66:                             # %"$9"
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB101_40:                             # %"$6.i8"
	subq	$32, %rsp
	movq	%r15, %rcx
	callq	nameErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _till;
	.scl	2;
	.type	32;
	.endef
	.globl	_till                           # -- Begin function _till
	.p2align	4, 0x90
_till:                                  # @_till
.seh_proc _till
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rdi
	movq	(%rdi), %rcx
	testb	$6, %cl
	jne	.LBB102_4
# %bb.1:                                # %"$3.i"
	testb	$8, %cl
	jne	.LBB102_2
# %bb.3:                                # %"$5.i"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB102_4
.LBB102_2:                              # %"$6.i"
	movq	(%rcx), %rcx
.LBB102_4:                              # %evSym.exit
	subq	$32, %rsp
	callq	xSym
	addq	$32, %rsp
	leaq	SymTab+8(%rip), %r13
	cmpq	%r13, %rax
	jne	.LBB102_6
# %bb.5:
	movl	$1, %eax
	movl	$2, %ecx
	jmp	.LBB102_15
.LBB102_6:                              # %"$3.i10"
	movq	-8(%rax), %rcx
	testb	$8, %cl
	jne	.LBB102_7
	.p2align	4, 0x90
# %bb.9:                                # %"$8.i"
	testb	$6, %cl
	jne	.LBB102_10
.LBB102_8:                              # %"$8.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rcx
	testb	$6, %cl
	je	.LBB102_8
.LBB102_10:                             # %xName.exit
	movl	$1, %eax
	testb	$4, %cl
	movq	%rcx, %rdx
	je	.LBB102_13
# %bb.11:                               # %"$3.i14.preheader"
	movl	$1, %eax
	movq	%rcx, %rdx
	.p2align	4, 0x90
.LBB102_12:                             # %"$3.i14"
                                        # =>This Inner Loop Header: Depth=1
	addq	$8, %rax
	movq	4(%rdx), %rdx
	testb	$4, %dl
	jne	.LBB102_12
.LBB102_13:                             # %"$4.i"
	shrq	$4, %rdx
	je	.LBB102_15
	.p2align	4, 0x90
.LBB102_14:                             # %"$6.i16"
                                        # =>This Inner Loop Header: Depth=1
	incq	%rax
	shrq	$8, %rdx
	jne	.LBB102_14
.LBB102_15:                             # %bufSize.exit
	addq	$15, %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r12
	xorl	%edx, %edx
	movq	%r12, %rax
	testq	%rdx, %rdx
	jne	.LBB102_29
	.p2align	4, 0x90
.LBB102_17:                             # %"$2.i.i"
	cmpq	$2, %rcx
	je	.LBB102_18
# %bb.26:                               # %"$5.i.i"
	testb	$2, %cl
	jne	.LBB102_27
# %bb.28:                               # %"$7.i.i"
	movq	-4(%rcx), %rdx
	movq	4(%rcx), %rcx
	jmp	.LBB102_29
	.p2align	4, 0x90
.LBB102_27:                             # %"$8.i.i"
	movq	%rcx, %rdx
	shrq	$4, %rdx
	movl	$2, %ecx
	.p2align	4, 0x90
.LBB102_29:                             # %symByte.exit.i
                                        # =>This Inner Loop Header: Depth=1
	movb	%dl, (%rax)
	testb	%dl, %dl
	je	.LBB102_19
# %bb.30:                               # %"$3.i18"
                                        #   in Loop: Header=BB102_29 Depth=1
	shrq	$8, %rdx
	incq	%rax
	testq	%rdx, %rdx
	jne	.LBB102_29
	jmp	.LBB102_17
.LBB102_18:                             # %symByte.exit.thread.i
	movb	$0, (%rax)
.LBB102_19:                             # %bufString.exit
	movl	($Chr)(%rip), %ebx
	testl	%ebx, %ebx
	jne	.LBB102_21
# %bb.20:                               # %"$3"
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	movl	%eax, %ebx
.LBB102_21:                             # %"$4"
	testl	%ebx, %ebx
	js	.LBB102_92
# %bb.22:                               # %"$7"
	subq	$32, %rsp
	movq	%r12, %rcx
	movl	%ebx, %edx
	callq	strchr
	addq	$32, %rsp
	testq	%rax, %rax
	jne	.LBB102_92
# %bb.23:                               # %"$8"
	movq	8(%rdi), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB102_32
# %bb.24:                               # %"$11"
	testb	$8, %al
	jne	.LBB102_25
# %bb.31:                               # %"$13"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB102_32
.LBB102_25:                             # %"$14"
	movq	(%rax), %rax
.LBB102_32:                             # %"$10"
	leaq	SymTab+8(%rip), %r13
	cmpq	%r13, %rax
	jne	.LBB102_75
# %bb.33:                               # %"$16"
	cmpl	$128, %ebx
	jge	.LBB102_34
.LBB102_42:                             # %"$4.i28"
	movslq	%ebx, %rdi
.LBB102_49:                             # %"$2.i35"
	shlq	$4, %rdi
	orq	$2, %rdi
	cmpq	$2, %rdi
	jne	.LBB102_51
# %bb.50:
	leaq	SymTab+8(%rip), %rcx
	jmp	.LBB102_52
.LBB102_75:                             # %"$15"
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	$4, (%rdi)
	leaq	16(%rdi), %r14
	movq	$2, 16(%rdi)
	movq	env(%rip), %rax
	movq	%rax, 24(%rdi)
	movq	%r14, env(%rip)
	.p2align	4, 0x90
.LBB102_76:                             # %"$22"
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$128, %ebx
	jge	.LBB102_78
# %bb.77:                               #   in Loop: Header=BB102_76 Depth=1
	movl	%ebx, %ecx
	jmp	.LBB102_86
	.p2align	4, 0x90
.LBB102_78:                             # %"$3.i58"
                                        #   in Loop: Header=BB102_76 Depth=1
	movl	$1114112, %ecx                  # imm = 0x110000
	cmpl	$255, %ebx
	je	.LBB102_86
# %bb.79:                               # %"$5.i60"
                                        #   in Loop: Header=BB102_76 Depth=1
	testb	$32, %bl
	jne	.LBB102_81
# %bb.80:                               # %"$7.i61"
                                        #   in Loop: Header=BB102_76 Depth=1
	andl	$31, %ebx
	jmp	.LBB102_85
.LBB102_81:                             # %"$8.i63"
                                        #   in Loop: Header=BB102_76 Depth=1
	testb	$16, %bl
	jne	.LBB102_83
# %bb.82:                               # %"$10.i64"
                                        #   in Loop: Header=BB102_76 Depth=1
	andl	$15, %ebx
	movl	%ebx, %esi
	jmp	.LBB102_84
.LBB102_83:                             # %"$11.i65"
                                        #   in Loop: Header=BB102_76 Depth=1
	andl	$7, %ebx
	shll	$6, %ebx
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	movl	%eax, %esi
	andl	$63, %esi
	orl	%ebx, %esi
.LBB102_84:                             # %"$12.i66"
                                        #   in Loop: Header=BB102_76 Depth=1
	shll	$6, %esi
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	movl	%eax, %ebx
	andl	$63, %ebx
	orl	%esi, %ebx
.LBB102_85:                             # %"$9.i67"
                                        #   in Loop: Header=BB102_76 Depth=1
	shll	$6, %ebx
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	movl	%eax, %ecx
	andl	$63, %ecx
	orl	%ebx, %ecx
.LBB102_86:                             # %getChar.exit69
                                        #   in Loop: Header=BB102_76 Depth=1
	subq	$32, %rsp
	movq	%rdi, %rdx
	callq	charSym
	callq	*($Get)(%rip)
	addq	$32, %rsp
	testl	%eax, %eax
	jle	.LBB102_88
# %bb.87:                               # %"$23"
                                        #   in Loop: Header=BB102_76 Depth=1
	movl	%eax, %ebx
	subq	$32, %rsp
	movq	%r12, %rcx
	movl	%eax, %edx
	callq	strchr
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB102_76
.LBB102_88:                             # %"$24"
	movq	(%r14), %rcx
	cmpq	$2, %rcx
	je	.LBB102_90
# %bb.89:                               # %"$3.i20"
	subq	$32, %rsp
	xorl	%edx, %edx
	callq	consSym
	addq	$32, %rsp
	movq	%rax, %r13
.LBB102_90:                             # %consStr.exit
	movq	24(%rdi), %rax
	jmp	.LBB102_91
.LBB102_34:                             # %"$3.i22"
	movl	$4082, %edi                     # imm = 0xFF2
	cmpl	$255, %ebx
	je	.LBB102_51
# %bb.35:                               # %"$5.i24"
	testb	$32, %bl
	jne	.LBB102_37
# %bb.36:                               # %"$7.i"
	andl	$31, %ebx
	movl	%ebx, %r14d
	jmp	.LBB102_41
.LBB102_37:                             # %"$8.i26"
	testb	$16, %bl
	jne	.LBB102_39
# %bb.38:                               # %"$10.i"
	andl	$15, %ebx
	jmp	.LBB102_40
.LBB102_39:                             # %"$11.i"
	andl	$7, %ebx
	shll	$6, %ebx
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	andl	$63, %eax
	orl	%eax, %ebx
.LBB102_40:                             # %"$12.i"
	shll	$6, %ebx
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	movl	%eax, %r14d
	andl	$63, %r14d
	orl	%ebx, %r14d
.LBB102_41:                             # %getChar.exit
	movl	%r14d, %ebx
	shll	$6, %ebx
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
                                        # kill: def $eax killed $eax def $rax
	andl	$63, %eax
	orl	%eax, %ebx
	cmpl	$127, %ebx
	jle	.LBB102_42
# %bb.43:                               # %"$3.i29"
	cmpl	$1114112, %ebx                  # imm = 0x110000
	jne	.LBB102_44
.LBB102_51:                             # %"$3.i.i"
	subq	$32, %rsp
	movq	%rdi, %rcx
	xorl	%edx, %edx
	callq	consSym
	addq	$32, %rsp
	movq	%rax, %rcx
.LBB102_52:                             # %mkChar.exit
	subq	$32, %rsp
	leaq	SymTab+8(%rip), %r14
	movq	%r14, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %r13
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdx
	movq	%r13, (%rdx)
	movq	%rdx, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rdx, (%rbp)                    # 8-byte Spill
	movq	%rdx, env(%rip)
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	testl	%eax, %eax
	jle	.LBB102_74
# %bb.53:                               # %"$19.preheader"
	movl	%eax, %ebx
	movq	%r13, %r15
	jmp	.LBB102_54
	.p2align	4, 0x90
.LBB102_72:                             # %"$3.i.i56"
                                        #   in Loop: Header=BB102_54 Depth=1
	subq	$32, %rsp
	movq	%rdi, %rcx
	xorl	%edx, %edx
	callq	consSym
	addq	$32, %rsp
	movq	%rax, %rcx
.LBB102_73:                             # %mkChar.exit57
                                        #   in Loop: Header=BB102_54 Depth=1
	subq	$32, %rsp
	movq	%r14, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rsi
	movq	%rax, 8(%r15)
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	movl	%eax, %ebx
	testl	%eax, %eax
	movq	%rsi, %r15
	jle	.LBB102_74
.LBB102_54:                             # %"$19"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	movq	%r12, %rcx
	movl	%ebx, %edx
	callq	strchr
	addq	$32, %rsp
	testq	%rax, %rax
	jne	.LBB102_74
# %bb.55:                               # %"$20"
                                        #   in Loop: Header=BB102_54 Depth=1
	cmpl	$128, %ebx
	jge	.LBB102_56
.LBB102_64:                             # %"$4.i48"
                                        #   in Loop: Header=BB102_54 Depth=1
	movslq	%ebx, %rdi
.LBB102_71:                             # %"$2.i55"
                                        #   in Loop: Header=BB102_54 Depth=1
	shlq	$4, %rdi
	orq	$2, %rdi
	cmpq	$2, %rdi
	movq	%r14, %rcx
	jne	.LBB102_72
	jmp	.LBB102_73
	.p2align	4, 0x90
.LBB102_56:                             # %"$3.i36"
                                        #   in Loop: Header=BB102_54 Depth=1
	movl	$4082, %edi                     # imm = 0xFF2
	cmpl	$255, %ebx
	je	.LBB102_72
# %bb.57:                               # %"$5.i38"
                                        #   in Loop: Header=BB102_54 Depth=1
	testb	$32, %bl
	jne	.LBB102_59
# %bb.58:                               # %"$7.i39"
                                        #   in Loop: Header=BB102_54 Depth=1
	andl	$31, %ebx
	movl	%ebx, %esi
	jmp	.LBB102_63
.LBB102_59:                             # %"$8.i41"
                                        #   in Loop: Header=BB102_54 Depth=1
	testb	$16, %bl
	jne	.LBB102_61
# %bb.60:                               # %"$10.i42"
                                        #   in Loop: Header=BB102_54 Depth=1
	andl	$15, %ebx
	jmp	.LBB102_62
.LBB102_61:                             # %"$11.i43"
                                        #   in Loop: Header=BB102_54 Depth=1
	andl	$7, %ebx
	shll	$6, %ebx
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	andl	$63, %eax
	orl	%eax, %ebx
.LBB102_62:                             # %"$12.i44"
                                        #   in Loop: Header=BB102_54 Depth=1
	shll	$6, %ebx
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	movl	%eax, %esi
	andl	$63, %esi
	orl	%ebx, %esi
.LBB102_63:                             # %getChar.exit47
                                        #   in Loop: Header=BB102_54 Depth=1
	movl	%esi, %ebx
	shll	$6, %ebx
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
                                        # kill: def $eax killed $eax def $rax
	andl	$63, %eax
	orl	%eax, %ebx
	cmpl	$127, %ebx
	jle	.LBB102_64
# %bb.65:                               # %"$3.i49"
                                        #   in Loop: Header=BB102_54 Depth=1
	cmpl	$1114112, %ebx                  # imm = 0x110000
	je	.LBB102_72
# %bb.66:                               # %"$5.i50"
                                        #   in Loop: Header=BB102_54 Depth=1
	cmpl	$2047, %ebx                     # imm = 0x7FF
	jg	.LBB102_68
# %bb.67:                               # %"$8.i51"
                                        #   in Loop: Header=BB102_54 Depth=1
	andl	$63, %ebx
	shll	$8, %ebx
	orl	%ebx, %esi
	orl	$32960, %esi                    # imm = 0x80C0
	movq	%rsi, %rdi
	jmp	.LBB102_71
.LBB102_68:                             # %"$7.i52"
                                        #   in Loop: Header=BB102_54 Depth=1
	cmpl	$65535, %ebx                    # imm = 0xFFFF
	jg	.LBB102_70
# %bb.69:                               # %"$10.i53"
                                        #   in Loop: Header=BB102_54 Depth=1
	movl	%esi, %eax
	shrl	$6, %eax
	andl	$63, %esi
	shll	$8, %esi
	orl	%eax, %esi
	andl	$63, %ebx
	shll	$16, %ebx
	orl	%esi, %ebx
	orl	$8421600, %ebx                  # imm = 0x8080E0
	movq	%rbx, %rdi
	jmp	.LBB102_71
.LBB102_70:                             # %"$9.i54"
                                        #   in Loop: Header=BB102_54 Depth=1
	movl	%esi, %ecx
	shrl	$12, %ecx
	movl	%esi, %edx
	andl	$4032, %edx                     # imm = 0xFC0
	andl	$63, %esi
	shll	$16, %esi
	shll	$24, %eax
	leal	(%rcx,%rdx,4), %ecx
	orl	%esi, %ecx
	leal	-2139062032(%rax,%rcx), %edi
	jmp	.LBB102_71
.LBB102_74:                             # %"$21"
	movq	(%rbp), %rax                    # 8-byte Reload
	movq	8(%rax), %rax
.LBB102_91:                             # %"$5"
	movq	%rax, env(%rip)
.LBB102_92:                             # %"$5"
	movq	%r13, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB102_44:                             # %"$5.i30"
	cmpl	$2047, %ebx                     # imm = 0x7FF
	jg	.LBB102_46
# %bb.45:                               # %"$8.i31"
	andl	$63, %ebx
	shll	$8, %ebx
	orl	%ebx, %r14d
	orl	$32960, %r14d                   # imm = 0x80C0
	movq	%r14, %rdi
	jmp	.LBB102_49
.LBB102_46:                             # %"$7.i32"
	cmpl	$65535, %ebx                    # imm = 0xFFFF
	jg	.LBB102_48
# %bb.47:                               # %"$10.i33"
	movl	%r14d, %eax
	shrl	$6, %eax
	andl	$63, %r14d
	shll	$8, %r14d
	orl	%eax, %r14d
	andl	$63, %ebx
	shll	$16, %ebx
	orl	%r14d, %ebx
	orl	$8421600, %ebx                  # imm = 0x8080E0
	movq	%rbx, %rdi
	jmp	.LBB102_49
.LBB102_48:                             # %"$9.i34"
	movl	%r14d, %ecx
	shrl	$12, %ecx
	movl	%r14d, %edx
	andl	$4032, %edx                     # imm = 0xFC0
	andl	$63, %r14d
	shll	$16, %r14d
	shll	$24, %eax
	leal	(%rcx,%rdx,4), %ecx
	orl	%r14d, %ecx
	leal	-2139062032(%rax,%rcx), %edi
	jmp	.LBB102_49
.LBB102_7:                              # %"$6.i11"
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	nameErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _line;
	.scl	2;
	.type	32;
	.endef
	.globl	_line                           # -- Begin function _line
	.p2align	4, 0x90
_line:                                  # @_line
.seh_proc _line
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$24, %rsp
	.seh_stackalloc 24
	leaq	16(%rsp), %rbp
	.seh_setframe %rbp, 16
	.seh_endprologue
	movq	%rcx, %rdi
	movl	($Chr)(%rip), %ebx
	testl	%ebx, %ebx
	jne	.LBB103_2
# %bb.1:                                # %"$2"
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	movl	%eax, %ebx
.LBB103_2:                              # %"$3"
	leaq	SymTab+8(%rip), %r12
	testl	%ebx, %ebx
	js	.LBB103_125
# %bb.3:                                # %"$3.i"
	cmpl	$13, %ebx
	je	.LBB103_6
# %bb.4:                                # %"$3.i"
	cmpl	$10, %ebx
	je	.LBB103_5
# %bb.8:                                # %"$5"
	movq	8(%rdi), %rcx
	movq	(%rcx), %rax
	movq	8(%rcx), %r14
	testb	$6, %al
	jne	.LBB103_12
# %bb.9:                                # %"$9"
	testb	$8, %al
	jne	.LBB103_11
# %bb.10:                               # %"$11"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB103_12
.LBB103_6:                              # %"$8.i"
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	cmpl	$10, %eax
	jne	.LBB103_125
.LBB103_5:                              # %"$6.i"
	movl	$0, ($Chr)(%rip)
	jmp	.LBB103_125
.LBB103_11:                             # %"$12"
	movq	(%rax), %rax
.LBB103_12:                             # %"$8"
	leaq	SymTab+8(%rip), %r12
	cmpq	%r12, %rax
	jne	.LBB103_17
# %bb.13:                               # %"$14"
	cmpl	$128, %ebx
	movq	%rdi, -16(%rbp)                 # 8-byte Spill
	jge	.LBB103_32
.LBB103_14:                             # %"$4.i"
	movslq	%ebx, %rsi
.LBB103_15:                             # %"$2.i"
	shlq	$4, %rsi
	orq	$2, %rsi
	cmpq	$2, %rsi
	jne	.LBB103_33
# %bb.16:
	leaq	SymTab+8(%rip), %rcx
	jmp	.LBB103_34
.LBB103_17:                             # %"$13"
	testb	$15, %r14b
	je	.LBB103_58
# %bb.18:                               # %"$31"
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	$4, (%rsi)
	leaq	16(%rsi), %r14
	movq	$2, 16(%rsi)
	movq	env(%rip), %rax
	movq	%rax, 24(%rsi)
	movq	%r14, env(%rip)
	.p2align	4, 0x90
.LBB103_19:                             # %"$32"
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$128, %ebx
	jge	.LBB103_21
# %bb.20:                               #   in Loop: Header=BB103_19 Depth=1
	movl	%ebx, %ecx
	jmp	.LBB103_29
	.p2align	4, 0x90
.LBB103_21:                             # %"$3.i111"
                                        #   in Loop: Header=BB103_19 Depth=1
	movl	$1114112, %ecx                  # imm = 0x110000
	cmpl	$255, %ebx
	je	.LBB103_29
# %bb.22:                               # %"$5.i113"
                                        #   in Loop: Header=BB103_19 Depth=1
	testb	$32, %bl
	jne	.LBB103_24
# %bb.23:                               # %"$7.i114"
                                        #   in Loop: Header=BB103_19 Depth=1
	andl	$31, %ebx
	jmp	.LBB103_28
.LBB103_24:                             # %"$8.i116"
                                        #   in Loop: Header=BB103_19 Depth=1
	testb	$16, %bl
	jne	.LBB103_26
# %bb.25:                               # %"$10.i117"
                                        #   in Loop: Header=BB103_19 Depth=1
	andl	$15, %ebx
	movl	%ebx, %edi
	jmp	.LBB103_27
.LBB103_26:                             # %"$11.i118"
                                        #   in Loop: Header=BB103_19 Depth=1
	andl	$7, %ebx
	shll	$6, %ebx
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	movl	%eax, %edi
	andl	$63, %edi
	orl	%ebx, %edi
.LBB103_27:                             # %"$12.i119"
                                        #   in Loop: Header=BB103_19 Depth=1
	shll	$6, %edi
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	movl	%eax, %ebx
	andl	$63, %ebx
	orl	%edi, %ebx
.LBB103_28:                             # %"$9.i120"
                                        #   in Loop: Header=BB103_19 Depth=1
	shll	$6, %ebx
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	movl	%eax, %ecx
	andl	$63, %ecx
	orl	%ebx, %ecx
.LBB103_29:                             # %getChar.exit122
                                        #   in Loop: Header=BB103_19 Depth=1
	subq	$32, %rsp
	movq	%rsi, %rdx
	callq	charSym
	callq	*($Get)(%rip)
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB103_121
# %bb.30:                               # %"$3.i123"
                                        #   in Loop: Header=BB103_19 Depth=1
	movl	%eax, %ebx
	cmpl	$13, %eax
	je	.LBB103_119
# %bb.31:                               # %"$3.i123"
                                        #   in Loop: Header=BB103_19 Depth=1
	cmpl	$10, %ebx
	jne	.LBB103_19
	jmp	.LBB103_120
.LBB103_32:                             # %"$3.i12"
	movl	$4082, %esi                     # imm = 0xFF2
	cmpl	$255, %ebx
	jne	.LBB103_114
.LBB103_33:                             # %"$3.i.i"
	subq	$32, %rsp
	movq	%rsi, %rcx
	xorl	%edx, %edx
	callq	consSym
	addq	$32, %rsp
	movq	%rax, %rcx
.LBB103_34:                             # %mkChar.exit
	subq	$32, %rsp
	leaq	SymTab+8(%rip), %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %r12
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdx
	movq	%r12, (%rdx)
	movq	%rdx, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rdx, -8(%rbp)                  # 8-byte Spill
	movq	%rdx, env(%rip)
	testb	$15, %r14b
	movq	%r12, %r13
	je	.LBB103_61
.LBB103_35:                             # %"$16"
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	testl	%eax, %eax
	leaq	SymTab+8(%rip), %r14
	js	.LBB103_118
# %bb.36:                               # %"$3.i83.preheader"
	movl	%eax, %esi
	jmp	.LBB103_39
	.p2align	4, 0x90
.LBB103_37:                             # %"$3.i.i109"
                                        #   in Loop: Header=BB103_39 Depth=1
	subq	$32, %rsp
	movq	%rdi, %rcx
	xorl	%edx, %edx
	callq	consSym
	addq	$32, %rsp
	movq	%rax, %rcx
.LBB103_38:                             # %mkChar.exit110
                                        #   in Loop: Header=BB103_39 Depth=1
	subq	$32, %rsp
	movq	%r14, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rdi
	movq	%rax, 8(%r13)
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	movl	%eax, %esi
	testl	%eax, %eax
	movq	%rdi, %r13
	js	.LBB103_118
.LBB103_39:                             # %"$3.i83"
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$13, %esi
	je	.LBB103_116
# %bb.40:                               # %"$3.i83"
                                        #   in Loop: Header=BB103_39 Depth=1
	cmpl	$10, %esi
	je	.LBB103_117
# %bb.41:                               # %"$28"
                                        #   in Loop: Header=BB103_39 Depth=1
	cmpl	$128, %esi
	jge	.LBB103_44
.LBB103_42:                             # %"$4.i101"
                                        #   in Loop: Header=BB103_39 Depth=1
	movslq	%esi, %rdi
.LBB103_43:                             # %"$2.i108"
                                        #   in Loop: Header=BB103_39 Depth=1
	shlq	$4, %rdi
	orq	$2, %rdi
	cmpq	$2, %rdi
	movq	%r14, %rcx
	jne	.LBB103_37
	jmp	.LBB103_38
	.p2align	4, 0x90
.LBB103_44:                             # %"$3.i89"
                                        #   in Loop: Header=BB103_39 Depth=1
	movl	$4082, %edi                     # imm = 0xFF2
	cmpl	$255, %esi
	je	.LBB103_37
# %bb.45:                               # %"$5.i91"
                                        #   in Loop: Header=BB103_39 Depth=1
	testb	$32, %sil
	jne	.LBB103_47
# %bb.46:                               # %"$7.i92"
                                        #   in Loop: Header=BB103_39 Depth=1
	andl	$31, %esi
	movl	%esi, %ebx
	jmp	.LBB103_51
.LBB103_47:                             # %"$8.i94"
                                        #   in Loop: Header=BB103_39 Depth=1
	testb	$16, %sil
	jne	.LBB103_49
# %bb.48:                               # %"$10.i95"
                                        #   in Loop: Header=BB103_39 Depth=1
	andl	$15, %esi
	jmp	.LBB103_50
.LBB103_49:                             # %"$11.i96"
                                        #   in Loop: Header=BB103_39 Depth=1
	andl	$7, %esi
	shll	$6, %esi
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	andl	$63, %eax
	orl	%eax, %esi
.LBB103_50:                             # %"$12.i97"
                                        #   in Loop: Header=BB103_39 Depth=1
	shll	$6, %esi
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	movl	%eax, %ebx
	andl	$63, %ebx
	orl	%esi, %ebx
.LBB103_51:                             # %getChar.exit100
                                        #   in Loop: Header=BB103_39 Depth=1
	movl	%ebx, %esi
	shll	$6, %esi
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
                                        # kill: def $eax killed $eax def $rax
	andl	$63, %eax
	orl	%eax, %esi
	cmpl	$127, %esi
	jle	.LBB103_42
# %bb.52:                               # %"$3.i102"
                                        #   in Loop: Header=BB103_39 Depth=1
	cmpl	$1114112, %esi                  # imm = 0x110000
	je	.LBB103_37
# %bb.53:                               # %"$5.i103"
                                        #   in Loop: Header=BB103_39 Depth=1
	cmpl	$2047, %esi                     # imm = 0x7FF
	jg	.LBB103_55
# %bb.54:                               # %"$8.i104"
                                        #   in Loop: Header=BB103_39 Depth=1
	andl	$63, %esi
	shll	$8, %esi
	orl	%esi, %ebx
	orl	$32960, %ebx                    # imm = 0x80C0
	movq	%rbx, %rdi
	jmp	.LBB103_43
.LBB103_55:                             # %"$7.i105"
                                        #   in Loop: Header=BB103_39 Depth=1
	cmpl	$65535, %esi                    # imm = 0xFFFF
	jg	.LBB103_57
# %bb.56:                               # %"$10.i106"
                                        #   in Loop: Header=BB103_39 Depth=1
	movl	%ebx, %eax
	shrl	$6, %eax
	andl	$63, %ebx
	shll	$8, %ebx
	orl	%eax, %ebx
	andl	$63, %esi
	shll	$16, %esi
	orl	%ebx, %esi
	orl	$8421600, %esi                  # imm = 0x8080E0
	movq	%rsi, %rdi
	jmp	.LBB103_43
.LBB103_57:                             # %"$9.i107"
                                        #   in Loop: Header=BB103_39 Depth=1
	movl	%ebx, %ecx
	shrl	$12, %ecx
	movl	%ebx, %edx
	andl	$4032, %edx                     # imm = 0xFC0
	andl	$63, %ebx
	shll	$16, %ebx
	shll	$24, %eax
	leal	(%rcx,%rdx,4), %ecx
	orl	%ebx, %ecx
	leal	-2139062032(%rax,%rcx), %edi
	jmp	.LBB103_43
.LBB103_58:                             # %"$30"
	movq	(%r14), %rax
	testb	$6, %al
	jne	.LBB103_130
# %bb.59:                               # %"$3.i133"
	testb	$8, %al
	jne	.LBB103_129
# %bb.60:                               # %"$5.i135"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB103_130
.LBB103_61:                             # %"$15"
	movq	(%r12), %rcx
	subq	$32, %rsp
	leaq	SymTab+8(%rip), %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rbx
	movq	%rax, (%r12)
	movq	%r12, %r13
.LBB103_62:                             # %"$17"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_71 Depth 2
	movq	(%r14), %rax
	testb	$6, %al
	jne	.LBB103_66
# %bb.63:                               # %"$3.i23"
                                        #   in Loop: Header=BB103_62 Depth=1
	testb	$8, %al
	jne	.LBB103_65
# %bb.64:                               # %"$5.i25"
                                        #   in Loop: Header=BB103_62 Depth=1
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB103_66
.LBB103_65:                             # %"$6.i24"
                                        #   in Loop: Header=BB103_62 Depth=1
	movq	(%rax), %rax
.LBB103_66:                             # %"$2.i26"
                                        #   in Loop: Header=BB103_62 Depth=1
	movq	%r14, (%rbp)                    # 8-byte Spill
	testb	$2, %al
	je	.LBB103_220
# %bb.67:                               # %evCnt.exit
                                        #   in Loop: Header=BB103_62 Depth=1
	movq	%rax, %rcx
	shrq	$4, %rcx
	movq	%rcx, %r14
	negq	%r14
	testb	$8, %al
	cmoveq	%rcx, %r14
	cmpq	$2, %r14
	jl	.LBB103_91
# %bb.68:                               # %"$19.preheader"
                                        #   in Loop: Header=BB103_62 Depth=1
	decq	%r14
	jmp	.LBB103_71
	.p2align	4, 0x90
.LBB103_69:                             # %"$3.i.i53"
                                        #   in Loop: Header=BB103_71 Depth=2
	subq	$32, %rsp
	movq	%rdi, %rcx
	xorl	%edx, %edx
	callq	consSym
	addq	$32, %rsp
	movq	%rax, %rcx
.LBB103_70:                             # %mkChar.exit54
                                        #   in Loop: Header=BB103_71 Depth=2
	subq	$32, %rsp
	leaq	SymTab+8(%rip), %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, 8(%rbx)
	decq	%r14
	testq	%r14, %r14
	movq	%rax, %rbx
	jle	.LBB103_91
.LBB103_71:                             # %"$19"
                                        #   Parent Loop BB103_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB103_118
# %bb.72:                               # %"$3.i27"
                                        #   in Loop: Header=BB103_71 Depth=2
	movl	%eax, %esi
	cmpl	$13, %eax
	je	.LBB103_116
# %bb.73:                               # %"$3.i27"
                                        #   in Loop: Header=BB103_71 Depth=2
	cmpl	$10, %esi
	je	.LBB103_117
# %bb.74:                               # %"$22"
                                        #   in Loop: Header=BB103_71 Depth=2
	cmpl	$128, %esi
	jge	.LBB103_77
.LBB103_75:                             # %"$4.i45"
                                        #   in Loop: Header=BB103_71 Depth=2
	movslq	%esi, %rdi
.LBB103_76:                             # %"$2.i52"
                                        #   in Loop: Header=BB103_71 Depth=2
	shlq	$4, %rdi
	orq	$2, %rdi
	cmpq	$2, %rdi
	leaq	SymTab+8(%rip), %rcx
	jne	.LBB103_69
	jmp	.LBB103_70
	.p2align	4, 0x90
.LBB103_77:                             # %"$3.i33"
                                        #   in Loop: Header=BB103_71 Depth=2
	movl	$4082, %edi                     # imm = 0xFF2
	cmpl	$255, %esi
	je	.LBB103_69
# %bb.78:                               # %"$5.i35"
                                        #   in Loop: Header=BB103_71 Depth=2
	testb	$32, %sil
	jne	.LBB103_80
# %bb.79:                               # %"$7.i36"
                                        #   in Loop: Header=BB103_71 Depth=2
	andl	$31, %esi
	movl	%esi, %r15d
	jmp	.LBB103_84
.LBB103_80:                             # %"$8.i38"
                                        #   in Loop: Header=BB103_71 Depth=2
	testb	$16, %sil
	jne	.LBB103_82
# %bb.81:                               # %"$10.i39"
                                        #   in Loop: Header=BB103_71 Depth=2
	andl	$15, %esi
	jmp	.LBB103_83
.LBB103_82:                             # %"$11.i40"
                                        #   in Loop: Header=BB103_71 Depth=2
	andl	$7, %esi
	shll	$6, %esi
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	andl	$63, %eax
	orl	%eax, %esi
.LBB103_83:                             # %"$12.i41"
                                        #   in Loop: Header=BB103_71 Depth=2
	shll	$6, %esi
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	movl	%eax, %r15d
	andl	$63, %r15d
	orl	%esi, %r15d
.LBB103_84:                             # %getChar.exit44
                                        #   in Loop: Header=BB103_71 Depth=2
	movl	%r15d, %esi
	shll	$6, %esi
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
                                        # kill: def $eax killed $eax def $rax
	andl	$63, %eax
	orl	%eax, %esi
	cmpl	$127, %esi
	jle	.LBB103_75
# %bb.85:                               # %"$3.i46"
                                        #   in Loop: Header=BB103_71 Depth=2
	cmpl	$1114112, %esi                  # imm = 0x110000
	je	.LBB103_69
# %bb.86:                               # %"$5.i47"
                                        #   in Loop: Header=BB103_71 Depth=2
	cmpl	$2047, %esi                     # imm = 0x7FF
	jg	.LBB103_88
# %bb.87:                               # %"$8.i48"
                                        #   in Loop: Header=BB103_71 Depth=2
	andl	$63, %esi
	shll	$8, %esi
	orl	%esi, %r15d
	orl	$32960, %r15d                   # imm = 0x80C0
	movq	%r15, %rdi
	jmp	.LBB103_76
.LBB103_88:                             # %"$7.i49"
                                        #   in Loop: Header=BB103_71 Depth=2
	cmpl	$65535, %esi                    # imm = 0xFFFF
	jg	.LBB103_90
# %bb.89:                               # %"$10.i50"
                                        #   in Loop: Header=BB103_71 Depth=2
	movl	%r15d, %eax
	shrl	$6, %eax
	andl	$63, %r15d
	shll	$8, %r15d
	orl	%eax, %r15d
	andl	$63, %esi
	shll	$16, %esi
	orl	%r15d, %esi
	orl	$8421600, %esi                  # imm = 0x8080E0
	movq	%rsi, %rdi
	jmp	.LBB103_76
.LBB103_90:                             # %"$9.i51"
                                        #   in Loop: Header=BB103_71 Depth=2
	movl	%r15d, %ecx
	shrl	$12, %ecx
	movl	%r15d, %edx
	andl	$4032, %edx                     # imm = 0xFC0
	andl	$63, %r15d
	shll	$16, %r15d
	shll	$24, %eax
	leal	(%rcx,%rdx,4), %ecx
	orl	%r15d, %ecx
	leal	-2139062032(%rax,%rcx), %edi
	jmp	.LBB103_76
.LBB103_91:                             # %"$20"
                                        #   in Loop: Header=BB103_62 Depth=1
	movq	(%rbp), %r14                    # 8-byte Reload
	movq	8(%r14), %r14
	testb	$15, %r14b
	jne	.LBB103_35
# %bb.92:                               # %"$23"
                                        #   in Loop: Header=BB103_62 Depth=1
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB103_118
# %bb.93:                               # %"$3.i55"
                                        #   in Loop: Header=BB103_62 Depth=1
	movl	%eax, %esi
	cmpl	$13, %eax
	je	.LBB103_116
# %bb.94:                               # %"$3.i55"
                                        #   in Loop: Header=BB103_62 Depth=1
	cmpl	$10, %esi
	je	.LBB103_117
# %bb.95:                               # %"$26"
                                        #   in Loop: Header=BB103_62 Depth=1
	cmpl	$128, %esi
	jge	.LBB103_98
.LBB103_96:                             # %"$4.i73"
                                        #   in Loop: Header=BB103_62 Depth=1
	movslq	%esi, %rbx
.LBB103_97:                             # %"$2.i80"
                                        #   in Loop: Header=BB103_62 Depth=1
	shlq	$4, %rbx
	orq	$2, %rbx
	cmpq	$2, %rbx
	leaq	SymTab+8(%rip), %rcx
	jne	.LBB103_99
	jmp	.LBB103_100
.LBB103_98:                             # %"$3.i61"
                                        #   in Loop: Header=BB103_62 Depth=1
	movl	$4082, %ebx                     # imm = 0xFF2
	cmpl	$255, %esi
	jne	.LBB103_101
.LBB103_99:                             # %"$3.i.i81"
                                        #   in Loop: Header=BB103_62 Depth=1
	subq	$32, %rsp
	movq	%rbx, %rcx
	xorl	%edx, %edx
	callq	consSym
	addq	$32, %rsp
	movq	%rax, %rcx
.LBB103_100:                            # %mkChar.exit82
                                        #   in Loop: Header=BB103_62 Depth=1
	subq	$32, %rsp
	leaq	SymTab+8(%rip), %rsi
	movq	%rsi, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rbx
	subq	$32, %rsp
	movq	%rax, %rcx
	movq	%rsi, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, 8(%r13)
	movq	%rax, %r13
	jmp	.LBB103_62
.LBB103_101:                            # %"$5.i63"
                                        #   in Loop: Header=BB103_62 Depth=1
	testb	$32, %sil
	jne	.LBB103_103
# %bb.102:                              # %"$7.i64"
                                        #   in Loop: Header=BB103_62 Depth=1
	andl	$31, %esi
	movl	%esi, %edi
	jmp	.LBB103_107
.LBB103_103:                            # %"$8.i66"
                                        #   in Loop: Header=BB103_62 Depth=1
	testb	$16, %sil
	jne	.LBB103_105
# %bb.104:                              # %"$10.i67"
                                        #   in Loop: Header=BB103_62 Depth=1
	andl	$15, %esi
	jmp	.LBB103_106
.LBB103_105:                            # %"$11.i68"
                                        #   in Loop: Header=BB103_62 Depth=1
	andl	$7, %esi
	shll	$6, %esi
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	andl	$63, %eax
	orl	%eax, %esi
.LBB103_106:                            # %"$12.i69"
                                        #   in Loop: Header=BB103_62 Depth=1
	shll	$6, %esi
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	movl	%eax, %edi
	andl	$63, %edi
	orl	%esi, %edi
.LBB103_107:                            # %getChar.exit72
                                        #   in Loop: Header=BB103_62 Depth=1
	movl	%edi, %esi
	shll	$6, %esi
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
                                        # kill: def $eax killed $eax def $rax
	andl	$63, %eax
	orl	%eax, %esi
	cmpl	$127, %esi
	jle	.LBB103_96
# %bb.108:                              # %"$3.i74"
                                        #   in Loop: Header=BB103_62 Depth=1
	cmpl	$1114112, %esi                  # imm = 0x110000
	je	.LBB103_99
# %bb.109:                              # %"$5.i75"
                                        #   in Loop: Header=BB103_62 Depth=1
	cmpl	$2047, %esi                     # imm = 0x7FF
	jg	.LBB103_111
# %bb.110:                              # %"$8.i76"
                                        #   in Loop: Header=BB103_62 Depth=1
	andl	$63, %esi
	shll	$8, %esi
	orl	%esi, %edi
	orl	$32960, %edi                    # imm = 0x80C0
	movq	%rdi, %rbx
	jmp	.LBB103_97
.LBB103_111:                            # %"$7.i77"
                                        #   in Loop: Header=BB103_62 Depth=1
	cmpl	$65535, %esi                    # imm = 0xFFFF
	jg	.LBB103_113
# %bb.112:                              # %"$10.i78"
                                        #   in Loop: Header=BB103_62 Depth=1
	movl	%edi, %eax
	shrl	$6, %eax
	andl	$63, %edi
	shll	$8, %edi
	orl	%eax, %edi
	andl	$63, %esi
	shll	$16, %esi
	orl	%edi, %esi
	orl	$8421600, %esi                  # imm = 0x8080E0
	movq	%rsi, %rbx
	jmp	.LBB103_97
.LBB103_113:                            # %"$9.i79"
                                        #   in Loop: Header=BB103_62 Depth=1
	movl	%edi, %ecx
	shrl	$12, %ecx
	movl	%edi, %edx
	andl	$4032, %edx                     # imm = 0xFC0
	andl	$63, %edi
	shll	$16, %edi
	shll	$24, %eax
	leal	(%rcx,%rdx,4), %ecx
	orl	%edi, %ecx
	leal	-2139062032(%rax,%rcx), %ebx
	jmp	.LBB103_97
.LBB103_114:                            # %"$5.i"
	testb	$32, %bl
	jne	.LBB103_127
# %bb.115:                              # %"$7.i"
	andl	$31, %ebx
	movl	%ebx, %edi
	jmp	.LBB103_150
.LBB103_116:                            # %"$8.i29"
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	cmpl	$10, %eax
	jne	.LBB103_118
.LBB103_117:                            # %"$9.i30"
	movl	$0, ($Chr)(%rip)
.LBB103_118:                            # %"$21"
	movq	-8(%rbp), %rax                  # 8-byte Reload
	movq	8(%rax), %rax
	jmp	.LBB103_124
.LBB103_119:                            # %"$8.i125"
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	cmpl	$10, %eax
	jne	.LBB103_121
.LBB103_120:                            # %"$9.i126"
	movl	$0, ($Chr)(%rip)
.LBB103_121:                            # %"$34"
	movq	(%r14), %rcx
	cmpq	$2, %rcx
	je	.LBB103_123
# %bb.122:                              # %"$3.i129"
	subq	$32, %rsp
	xorl	%edx, %edx
	callq	consSym
	addq	$32, %rsp
	movq	%rax, %r12
.LBB103_123:                            # %consStr.exit
	movq	24(%rsi), %rax
.LBB103_124:                            # %"$6"
	movq	%rax, env(%rip)
.LBB103_125:                            # %"$6"
	movq	%r12, %rax
.LBB103_126:                            # %"$6"
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB103_127:                            # %"$8.i13"
	testb	$16, %bl
	jne	.LBB103_148
# %bb.128:                              # %"$10.i"
	andl	$15, %ebx
	jmp	.LBB103_149
.LBB103_129:                            # %"$6.i134"
	movq	(%rax), %rax
.LBB103_130:                            # %"$2.i137"
	movq	%r14, (%rbp)                    # 8-byte Spill
	movq	%rdi, -16(%rbp)                 # 8-byte Spill
	testb	$2, %al
	je	.LBB103_220
# %bb.131:                              # %evCnt.exit140
	movq	%rax, %rcx
	shrq	$4, %rcx
	movq	%rcx, %rdi
	negq	%rdi
	testb	$8, %al
	cmoveq	%rcx, %rdi
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r13
	movq	$4, (%r13)
	leaq	16(%r13), %r14
	movq	$2, 16(%r13)
	movq	env(%rip), %rax
	movq	%rax, 24(%r13)
	movq	%r14, env(%rip)
	.p2align	4, 0x90
.LBB103_132:                            # %"$35"
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$128, %ebx
	jge	.LBB103_134
# %bb.133:                              #   in Loop: Header=BB103_132 Depth=1
	movl	%ebx, %ecx
	jmp	.LBB103_142
	.p2align	4, 0x90
.LBB103_134:                            # %"$3.i141"
                                        #   in Loop: Header=BB103_132 Depth=1
	movl	$1114112, %ecx                  # imm = 0x110000
	cmpl	$255, %ebx
	je	.LBB103_142
# %bb.135:                              # %"$5.i143"
                                        #   in Loop: Header=BB103_132 Depth=1
	testb	$32, %bl
	jne	.LBB103_137
# %bb.136:                              # %"$7.i144"
                                        #   in Loop: Header=BB103_132 Depth=1
	andl	$31, %ebx
	jmp	.LBB103_141
.LBB103_137:                            # %"$8.i146"
                                        #   in Loop: Header=BB103_132 Depth=1
	testb	$16, %bl
	jne	.LBB103_139
# %bb.138:                              # %"$10.i147"
                                        #   in Loop: Header=BB103_132 Depth=1
	andl	$15, %ebx
	movl	%ebx, %esi
	jmp	.LBB103_140
.LBB103_139:                            # %"$11.i148"
                                        #   in Loop: Header=BB103_132 Depth=1
	andl	$7, %ebx
	shll	$6, %ebx
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	movl	%eax, %esi
	andl	$63, %esi
	orl	%ebx, %esi
.LBB103_140:                            # %"$12.i149"
                                        #   in Loop: Header=BB103_132 Depth=1
	shll	$6, %esi
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	movl	%eax, %ebx
	andl	$63, %ebx
	orl	%esi, %ebx
.LBB103_141:                            # %"$9.i150"
                                        #   in Loop: Header=BB103_132 Depth=1
	shll	$6, %ebx
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	movl	%eax, %ecx
	andl	$63, %ecx
	orl	%ebx, %ecx
.LBB103_142:                            # %getChar.exit152
                                        #   in Loop: Header=BB103_132 Depth=1
	subq	$32, %rsp
	movq	%r13, %rdx
	callq	charSym
	callq	*($Get)(%rip)
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB103_156
# %bb.143:                              # %"$3.i153"
                                        #   in Loop: Header=BB103_132 Depth=1
	movl	%eax, %ebx
	cmpl	$13, %eax
	je	.LBB103_154
# %bb.144:                              # %"$3.i153"
                                        #   in Loop: Header=BB103_132 Depth=1
	cmpl	$10, %ebx
	je	.LBB103_155
# %bb.145:                              # %"$37"
                                        #   in Loop: Header=BB103_132 Depth=1
	decq	%rdi
	jne	.LBB103_132
# %bb.146:                              # %"$39"
	movq	(%r14), %rcx
	cmpq	$2, %rcx
	jne	.LBB103_160
# %bb.147:
	leaq	SymTab+8(%rip), %rcx
	jmp	.LBB103_161
.LBB103_148:                            # %"$11.i"
	andl	$7, %ebx
	shll	$6, %ebx
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	andl	$63, %eax
	orl	%ebx, %eax
	movl	%eax, %ebx
.LBB103_149:                            # %"$12.i"
	shll	$6, %ebx
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	movl	%eax, %edi
	andl	$63, %edi
	orl	%ebx, %edi
.LBB103_150:                            # %getChar.exit
	movl	%edi, %ebx
	shll	$6, %ebx
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
                                        # kill: def $eax killed $eax def $rax
	andl	$63, %eax
	orl	%eax, %ebx
	cmpl	$127, %ebx
	jle	.LBB103_14
# %bb.151:                              # %"$3.i15"
	cmpl	$1114112, %ebx                  # imm = 0x110000
	je	.LBB103_33
# %bb.152:                              # %"$5.i16"
	cmpl	$2047, %ebx                     # imm = 0x7FF
	jg	.LBB103_208
# %bb.153:                              # %"$8.i17"
	andl	$63, %ebx
	shll	$8, %ebx
	orl	%ebx, %edi
	orl	$32960, %edi                    # imm = 0x80C0
	movq	%rdi, %rsi
	jmp	.LBB103_15
.LBB103_154:                            # %"$8.i155"
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	cmpl	$10, %eax
	jne	.LBB103_156
.LBB103_155:                            # %"$9.i156"
	movl	$0, ($Chr)(%rip)
.LBB103_156:                            # %"$36"
	movq	(%r14), %rcx
	cmpq	$2, %rcx
	jne	.LBB103_158
# %bb.157:
	leaq	SymTab+8(%rip), %rcx
	jmp	.LBB103_159
.LBB103_158:                            # %"$3.i159"
	subq	$32, %rsp
	xorl	%edx, %edx
	callq	consSym
	addq	$32, %rsp
	movq	%rax, %rcx
.LBB103_159:                            # %consStr.exit161
	subq	$32, %rsp
	leaq	SymTab+8(%rip), %rdx
	callq	cons
	addq	$32, %rsp
	movq	24(%r13), %rcx
	movq	%rcx, env(%rip)
	jmp	.LBB103_126
.LBB103_160:                            # %"$3.i162"
	subq	$32, %rsp
	xorl	%edx, %edx
	callq	consSym
	addq	$32, %rsp
	movq	%rax, %rcx
.LBB103_161:                            # %consStr.exit164
	subq	$32, %rsp
	leaq	SymTab+8(%rip), %r15
	movq	%r15, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %r12
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%r12, (%rax)
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%rcx, (%rdx)
	movq	%rax, env(%rip)
	movq	(%rbp), %rax                    # 8-byte Reload
	movq	8(%rax), %rax
	testb	$15, %al
	je	.LBB103_184
# %bb.162:
	movq	%r12, %rsi
.LBB103_163:                            # %"$48"
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$128, %ebx
	jge	.LBB103_166
.LBB103_164:                            # %"$4.i211"
                                        #   in Loop: Header=BB103_163 Depth=1
	movslq	%ebx, %rdi
.LBB103_165:                            # %"$2.i218"
                                        #   in Loop: Header=BB103_163 Depth=1
	shlq	$4, %rdi
	orq	$2, %rdi
	cmpq	$2, %rdi
	movq	%r15, %rcx
	jne	.LBB103_167
	jmp	.LBB103_168
.LBB103_166:                            # %"$3.i199"
                                        #   in Loop: Header=BB103_163 Depth=1
	movl	$4082, %edi                     # imm = 0xFF2
	cmpl	$255, %ebx
	jne	.LBB103_171
.LBB103_167:                            # %"$3.i.i219"
                                        #   in Loop: Header=BB103_163 Depth=1
	subq	$32, %rsp
	movq	%rdi, %rcx
	xorl	%edx, %edx
	callq	consSym
	addq	$32, %rsp
	movq	%rax, %rcx
.LBB103_168:                            # %mkChar.exit220
                                        #   in Loop: Header=BB103_163 Depth=1
	subq	$32, %rsp
	movq	%r15, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rdi
	movq	%rax, 8(%rsi)
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB103_219
# %bb.169:                              # %"$3.i221"
                                        #   in Loop: Header=BB103_163 Depth=1
	movl	%eax, %ebx
	cmpl	$13, %eax
	je	.LBB103_210
# %bb.170:                              # %"$3.i221"
                                        #   in Loop: Header=BB103_163 Depth=1
	cmpl	$10, %ebx
	movq	%rdi, %rsi
	jne	.LBB103_163
	jmp	.LBB103_211
.LBB103_171:                            # %"$5.i201"
                                        #   in Loop: Header=BB103_163 Depth=1
	testb	$32, %bl
	jne	.LBB103_173
# %bb.172:                              # %"$7.i202"
                                        #   in Loop: Header=BB103_163 Depth=1
	andl	$31, %ebx
	movl	%ebx, %r14d
	jmp	.LBB103_177
.LBB103_173:                            # %"$8.i204"
                                        #   in Loop: Header=BB103_163 Depth=1
	testb	$16, %bl
	jne	.LBB103_175
# %bb.174:                              # %"$10.i205"
                                        #   in Loop: Header=BB103_163 Depth=1
	andl	$15, %ebx
	jmp	.LBB103_176
.LBB103_175:                            # %"$11.i206"
                                        #   in Loop: Header=BB103_163 Depth=1
	andl	$7, %ebx
	shll	$6, %ebx
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	andl	$63, %eax
	orl	%eax, %ebx
.LBB103_176:                            # %"$12.i207"
                                        #   in Loop: Header=BB103_163 Depth=1
	shll	$6, %ebx
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	movl	%eax, %r14d
	andl	$63, %r14d
	orl	%ebx, %r14d
.LBB103_177:                            # %getChar.exit210
                                        #   in Loop: Header=BB103_163 Depth=1
	movl	%r14d, %ebx
	shll	$6, %ebx
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
                                        # kill: def $eax killed $eax def $rax
	andl	$63, %eax
	orl	%eax, %ebx
	cmpl	$127, %ebx
	jle	.LBB103_164
# %bb.178:                              # %"$3.i212"
                                        #   in Loop: Header=BB103_163 Depth=1
	cmpl	$1114112, %ebx                  # imm = 0x110000
	je	.LBB103_167
# %bb.179:                              # %"$5.i213"
                                        #   in Loop: Header=BB103_163 Depth=1
	cmpl	$2047, %ebx                     # imm = 0x7FF
	jg	.LBB103_181
# %bb.180:                              # %"$8.i214"
                                        #   in Loop: Header=BB103_163 Depth=1
	andl	$63, %ebx
	shll	$8, %ebx
	orl	%ebx, %r14d
	orl	$32960, %r14d                   # imm = 0x80C0
	movq	%r14, %rdi
	jmp	.LBB103_165
.LBB103_181:                            # %"$7.i215"
                                        #   in Loop: Header=BB103_163 Depth=1
	cmpl	$65535, %ebx                    # imm = 0xFFFF
	jg	.LBB103_183
# %bb.182:                              # %"$10.i216"
                                        #   in Loop: Header=BB103_163 Depth=1
	movl	%r14d, %eax
	shrl	$6, %eax
	andl	$63, %r14d
	shll	$8, %r14d
	orl	%eax, %r14d
	andl	$63, %ebx
	shll	$16, %ebx
	orl	%r14d, %ebx
	orl	$8421600, %ebx                  # imm = 0x8080E0
	movq	%rbx, %rdi
	jmp	.LBB103_165
.LBB103_183:                            # %"$9.i217"
                                        #   in Loop: Header=BB103_163 Depth=1
	movl	%r14d, %ecx
	shrl	$12, %ecx
	movl	%r14d, %edx
	andl	$4032, %edx                     # imm = 0xFC0
	andl	$63, %r14d
	shll	$16, %r14d
	shll	$24, %eax
	leal	(%rcx,%rdx,4), %ecx
	orl	%r14d, %ecx
	leal	-2139062032(%rax,%rcx), %edi
	jmp	.LBB103_165
.LBB103_184:                            # %"$41.preheader"
	movq	%r12, %rdi
.LBB103_185:                            # %"$41"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_191 Depth 2
	movq	%rax, -8(%rbp)                  # 8-byte Spill
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB103_189
# %bb.186:                              # %"$3.i167"
                                        #   in Loop: Header=BB103_185 Depth=1
	testb	$8, %al
	jne	.LBB103_188
# %bb.187:                              # %"$5.i169"
                                        #   in Loop: Header=BB103_185 Depth=1
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB103_189
.LBB103_188:                            # %"$6.i168"
                                        #   in Loop: Header=BB103_185 Depth=1
	movq	(%rax), %rax
.LBB103_189:                            # %"$2.i171"
                                        #   in Loop: Header=BB103_185 Depth=1
	movq	%rdi, (%rbp)                    # 8-byte Spill
	testb	$2, %al
	je	.LBB103_220
# %bb.190:                              # %evCnt.exit174
                                        #   in Loop: Header=BB103_185 Depth=1
	movq	%rax, %rcx
	shrq	$4, %rcx
	movq	%rcx, %rdi
	negq	%rdi
	testb	$8, %al
	cmoveq	%rcx, %rdi
	movq	$4, (%r13)
	movq	$2, 16(%r13)
.LBB103_191:                            # %"$43"
                                        #   Parent Loop BB103_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$128, %ebx
	jge	.LBB103_193
# %bb.192:                              #   in Loop: Header=BB103_191 Depth=2
	movl	%ebx, %ecx
	jmp	.LBB103_201
.LBB103_193:                            # %"$3.i175"
                                        #   in Loop: Header=BB103_191 Depth=2
	movl	$1114112, %ecx                  # imm = 0x110000
	cmpl	$255, %ebx
	je	.LBB103_201
# %bb.194:                              # %"$5.i177"
                                        #   in Loop: Header=BB103_191 Depth=2
	testb	$32, %bl
	jne	.LBB103_196
# %bb.195:                              # %"$7.i178"
                                        #   in Loop: Header=BB103_191 Depth=2
	andl	$31, %ebx
	jmp	.LBB103_200
.LBB103_196:                            # %"$8.i180"
                                        #   in Loop: Header=BB103_191 Depth=2
	testb	$16, %bl
	jne	.LBB103_198
# %bb.197:                              # %"$10.i181"
                                        #   in Loop: Header=BB103_191 Depth=2
	andl	$15, %ebx
	movl	%ebx, %esi
	jmp	.LBB103_199
.LBB103_198:                            # %"$11.i182"
                                        #   in Loop: Header=BB103_191 Depth=2
	andl	$7, %ebx
	shll	$6, %ebx
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	movl	%eax, %esi
	andl	$63, %esi
	orl	%ebx, %esi
.LBB103_199:                            # %"$12.i183"
                                        #   in Loop: Header=BB103_191 Depth=2
	shll	$6, %esi
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	movl	%eax, %ebx
	andl	$63, %ebx
	orl	%esi, %ebx
.LBB103_200:                            # %"$9.i184"
                                        #   in Loop: Header=BB103_191 Depth=2
	shll	$6, %ebx
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	movl	%eax, %ecx
	andl	$63, %ecx
	orl	%ebx, %ecx
.LBB103_201:                            # %getChar.exit186
                                        #   in Loop: Header=BB103_191 Depth=2
	subq	$32, %rsp
	movq	%r13, %rdx
	callq	charSym
	callq	*($Get)(%rip)
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB103_215
# %bb.202:                              # %"$3.i187"
                                        #   in Loop: Header=BB103_191 Depth=2
	movl	%eax, %ebx
	cmpl	$13, %eax
	je	.LBB103_213
# %bb.203:                              # %"$3.i187"
                                        #   in Loop: Header=BB103_191 Depth=2
	cmpl	$10, %ebx
	je	.LBB103_214
# %bb.204:                              # %"$45"
                                        #   in Loop: Header=BB103_191 Depth=2
	decq	%rdi
	jne	.LBB103_191
# %bb.205:                              # %"$47"
                                        #   in Loop: Header=BB103_185 Depth=1
	movq	(%r14), %rax
	cmpq	$2, %rax
	leaq	SymTab+8(%rip), %rcx
	je	.LBB103_207
# %bb.206:                              # %"$3.i196"
                                        #   in Loop: Header=BB103_185 Depth=1
	subq	$32, %rsp
	movq	%rax, %rcx
	xorl	%edx, %edx
	callq	consSym
	addq	$32, %rsp
	movq	%rax, %rcx
.LBB103_207:                            # %consStr.exit198
                                        #   in Loop: Header=BB103_185 Depth=1
	subq	$32, %rsp
	leaq	SymTab+8(%rip), %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rsi
	movq	(%rbp), %rax                    # 8-byte Reload
	movq	%rsi, 8(%rax)
	movq	-8(%rbp), %rax                  # 8-byte Reload
	movq	8(%rax), %rax
	testb	$15, %al
	movq	%rsi, %rdi
	je	.LBB103_185
	jmp	.LBB103_163
.LBB103_208:                            # %"$7.i18"
	cmpl	$65535, %ebx                    # imm = 0xFFFF
	jg	.LBB103_212
# %bb.209:                              # %"$10.i19"
	movl	%edi, %eax
	shrl	$6, %eax
	andl	$63, %edi
	shll	$8, %edi
	orl	%eax, %edi
	andl	$63, %ebx
	shll	$16, %ebx
	orl	%edi, %ebx
	orl	$8421600, %ebx                  # imm = 0x8080E0
	movq	%rbx, %rsi
	jmp	.LBB103_15
.LBB103_210:                            # %"$8.i223"
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	cmpl	$10, %eax
	jne	.LBB103_219
.LBB103_211:                            # %"$9.i224"
	movl	$0, ($Chr)(%rip)
	jmp	.LBB103_219
.LBB103_212:                            # %"$9.i20"
	movl	%edi, %ecx
	shrl	$12, %ecx
	movl	%edi, %edx
	andl	$4032, %edx                     # imm = 0xFC0
	andl	$63, %edi
	shll	$16, %edi
	shll	$24, %eax
	leal	(%rcx,%rdx,4), %ecx
	orl	%edi, %ecx
	leal	-2139062032(%rax,%rcx), %esi
	jmp	.LBB103_15
.LBB103_213:                            # %"$8.i189"
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	cmpl	$10, %eax
	jne	.LBB103_215
.LBB103_214:                            # %"$9.i190"
	movl	$0, ($Chr)(%rip)
.LBB103_215:                            # %"$44"
	movq	(%r14), %rcx
	cmpq	$2, %rcx
	jne	.LBB103_217
# %bb.216:
	leaq	SymTab+8(%rip), %rcx
	jmp	.LBB103_218
.LBB103_217:                            # %"$3.i193"
	subq	$32, %rsp
	xorl	%edx, %edx
	callq	consSym
	addq	$32, %rsp
	movq	%rax, %rcx
.LBB103_218:                            # %consStr.exit195
	movq	(%rbp), %rsi                    # 8-byte Reload
	subq	$32, %rsp
	leaq	SymTab+8(%rip), %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, 8(%rsi)
.LBB103_219:                            # %"$50"
	movq	24(%r13), %rax
	jmp	.LBB103_124
.LBB103_220:                            # %"$2.i.i"
	subq	$32, %rsp
	movq	-16(%rbp), %rcx                 # 8-byte Reload
	movq	%rax, %rdx
	callq	cntErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _in;
	.scl	2;
	.type	32;
	.endef
	.globl	_in                             # -- Begin function _in
	.p2align	4, 0x90
_in:                                    # @_in
.seh_proc _in
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rdx
	movq	8(%rax), %rdi
	testb	$6, %dl
	jne	.LBB104_4
# %bb.1:                                # %"$3"
	testb	$8, %dl
	jne	.LBB104_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rdx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdx
	jmp	.LBB104_4
.LBB104_2:                              # %"$6"
	movq	(%rdx), %rdx
.LBB104_4:                              # %"$2"
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r8
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	rdOpen
	.p2align	4, 0x90
.LBB104_5:                              # %"$2"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_6 Depth 2
	addq	$32, %rsp
.LBB104_6:                              # %"$2"
                                        #   Parent Loop BB104_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rdi), %rsi
	movq	8(%rdi), %rdi
	testb	$15, %dil
	jne	.LBB104_7
# %bb.10:                               # %"$8"
                                        #   in Loop: Header=BB104_6 Depth=2
	testb	$15, %sil
	jne	.LBB104_6
# %bb.11:                               # %"$17"
                                        #   in Loop: Header=BB104_5 Depth=1
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	jmp	.LBB104_5
.LBB104_7:                              # %"$10"
	testb	$6, %sil
	jne	.LBB104_13
# %bb.8:                                # %"$12"
	testb	$8, %sil
	jne	.LBB104_9
# %bb.12:                               # %"$14"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB104_13
.LBB104_9:                              # %"$15"
	movq	(%rsi), %rsi
.LBB104_13:                             # %"$9"
	subq	$32, %rsp
	callq	popInFiles
	addq	$32, %rsp
	movq	env+32(%rip), %rax
	movq	8(%rax), %rcx
	movq	%rcx, ($InFile)(%rip)
	movl	12(%rcx), %ecx
	movl	%ecx, ($Chr)(%rip)
	movq	16(%rax), %rax
	movq	%rax, ($Get)(%rip)
	movq	%rsi, %rax
	movq	%rbp, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _out;
	.scl	2;
	.type	32;
	.endef
	.globl	_out                            # -- Begin function _out
	.p2align	4, 0x90
_out:                                   # @_out
.seh_proc _out
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rdx
	movq	8(%rax), %rdi
	testb	$6, %dl
	jne	.LBB105_4
# %bb.1:                                # %"$3"
	testb	$8, %dl
	jne	.LBB105_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rdx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdx
	jmp	.LBB105_4
.LBB105_2:                              # %"$6"
	movq	(%rdx), %rdx
.LBB105_4:                              # %"$2"
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r8
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	wrOpen
	.p2align	4, 0x90
.LBB105_5:                              # %"$2"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_6 Depth 2
	addq	$32, %rsp
.LBB105_6:                              # %"$2"
                                        #   Parent Loop BB105_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rdi), %rsi
	movq	8(%rdi), %rdi
	testb	$15, %dil
	jne	.LBB105_7
# %bb.10:                               # %"$8"
                                        #   in Loop: Header=BB105_6 Depth=2
	testb	$15, %sil
	jne	.LBB105_6
# %bb.11:                               # %"$17"
                                        #   in Loop: Header=BB105_5 Depth=1
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	jmp	.LBB105_5
.LBB105_7:                              # %"$10"
	testb	$6, %sil
	jne	.LBB105_13
# %bb.8:                                # %"$12"
	testb	$8, %sil
	jne	.LBB105_9
# %bb.12:                               # %"$14"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB105_13
.LBB105_9:                              # %"$15"
	movq	(%rsi), %rsi
.LBB105_13:                             # %"$9"
	subq	$32, %rsp
	callq	popOutFiles
	addq	$32, %rsp
	movq	env+40(%rip), %rax
	movq	8(%rax), %rcx
	movq	%rcx, ($OutFile)(%rip)
	movq	16(%rax), %rax
	movq	%rax, ($Put)(%rip)
	movq	%rsi, %rax
	movq	%rbp, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _err;
	.scl	2;
	.type	32;
	.endef
	.globl	_err                            # -- Begin function _err
	.p2align	4, 0x90
_err:                                   # @_err
.seh_proc _err
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rdx
	movq	8(%rax), %rdi
	testb	$6, %dl
	jne	.LBB106_4
# %bb.1:                                # %"$3"
	testb	$8, %dl
	jne	.LBB106_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rdx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdx
	jmp	.LBB106_4
.LBB106_2:                              # %"$6"
	movq	(%rdx), %rdx
.LBB106_4:                              # %"$2"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r8
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	erOpen
	.p2align	4, 0x90
.LBB106_5:                              # %"$2"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_6 Depth 2
	addq	$32, %rsp
.LBB106_6:                              # %"$2"
                                        #   Parent Loop BB106_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rdi), %rsi
	movq	8(%rdi), %rdi
	testb	$15, %dil
	jne	.LBB106_7
# %bb.10:                               # %"$8"
                                        #   in Loop: Header=BB106_6 Depth=2
	testb	$15, %sil
	jne	.LBB106_6
# %bb.11:                               # %"$17"
                                        #   in Loop: Header=BB106_5 Depth=1
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	jmp	.LBB106_5
.LBB106_7:                              # %"$10"
	testb	$6, %sil
	jne	.LBB106_13
# %bb.8:                                # %"$12"
	testb	$8, %sil
	jne	.LBB106_9
# %bb.12:                               # %"$14"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB106_13
.LBB106_9:                              # %"$15"
	movq	(%rsi), %rsi
.LBB106_13:                             # %"$9"
	movq	env+48(%rip), %rdi
	movl	8(%rdi), %ecx
	subq	$32, %rsp
	movl	$2, %edx
	callq	dup2
	addq	$32, %rsp
	movl	8(%rdi), %ecx
	subq	$32, %rsp
	callq	close
	addq	$32, %rsp
	movq	(%rdi), %rax
	movq	%rax, env+48(%rip)
	movq	%rsi, %rax
	movq	%rbp, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _ctl;
	.scl	2;
	.type	32;
	.endef
	.globl	_ctl                            # -- Begin function _ctl
	.p2align	4, 0x90
_ctl:                                   # @_ctl
.seh_proc _ctl
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rdx
	movq	8(%rax), %rdi
	testb	$6, %dl
	jne	.LBB107_4
# %bb.1:                                # %"$3"
	testb	$8, %dl
	jne	.LBB107_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rdx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdx
	jmp	.LBB107_4
.LBB107_2:                              # %"$6"
	movq	(%rdx), %rdx
.LBB107_4:                              # %"$2"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r8
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	ctOpen
	.p2align	4, 0x90
.LBB107_5:                              # %"$2"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_6 Depth 2
	addq	$32, %rsp
.LBB107_6:                              # %"$2"
                                        #   Parent Loop BB107_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rdi), %rsi
	movq	8(%rdi), %rdi
	testb	$15, %dil
	jne	.LBB107_7
# %bb.10:                               # %"$8"
                                        #   in Loop: Header=BB107_6 Depth=2
	testb	$15, %sil
	jne	.LBB107_6
# %bb.11:                               # %"$17"
                                        #   in Loop: Header=BB107_5 Depth=1
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	jmp	.LBB107_5
.LBB107_7:                              # %"$10"
	testb	$6, %sil
	jne	.LBB107_13
# %bb.8:                                # %"$12"
	testb	$8, %sil
	jne	.LBB107_9
# %bb.12:                               # %"$14"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB107_13
.LBB107_9:                              # %"$15"
	movq	(%rsi), %rsi
.LBB107_13:                             # %"$9"
	movq	env+56(%rip), %rdi
	movl	8(%rdi), %ecx
	testl	%ecx, %ecx
	js	.LBB107_15
# %bb.14:                               # %"$2.i"
	subq	$32, %rsp
	callq	close
	jmp	.LBB107_22
.LBB107_15:                             # %"$3.i"
	movq	env+32(%rip), %rax
	movq	env+40(%rip), %rcx
	movq	%rcx, %rdx
	orq	%rax, %rdx
	je	.LBB107_23
# %bb.16:                               # %"$5.i.i"
	testq	%rcx, %rcx
	je	.LBB107_17
# %bb.18:                               # %"$7.i.i"
	testq	%rax, %rax
	je	.LBB107_20
# %bb.19:                               # %"$9.i.i"
	xorl	%r8d, %r8d
	cmpq	%rax, %rcx
	seta	%r8b
	xorl	%edx, %edx
	cmpq	%rcx, %rax
	seta	%dl
	cmpq	%rsp, %rax
	cmoval	%r8d, %edx
	cmpb	$1, %dl
	jne	.LBB107_20
.LBB107_17:                             # %"$8.i.i"
	movq	8(%rax), %rax
	addq	$8, %rax
	jmp	.LBB107_21
.LBB107_20:                             # %"$15.i.i"
	movq	8(%rcx), %rax
.LBB107_21:                             # %currFd.exit.i
	movl	(%rax), %ecx
	subq	$32, %rsp
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	callq	unLock
.LBB107_22:                             # %popCtlFiles.exit
	addq	$32, %rsp
	movq	(%rdi), %rax
	movq	%rax, env+56(%rip)
	movq	%rsi, %rax
	movq	%rbp, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	retq
.LBB107_23:                             # %"$6.i.i"
	subq	$32, %rsp
	leaq	.L$40(%rip), %r8
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _input;
	.scl	2;
	.type	32;
	.endef
	.globl	_input                          # -- Begin function _input
	.p2align	4, 0x90
_input:                                 # @_input
.seh_proc _input
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$64, %rsp
	.seh_stackalloc 64
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	env+64(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movq	(%rax), %rcx
	movq	8(%rax), %rax
	movq	%rcx, 40(%rsp)
	movq	($Get)(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movl	($Chr)(%rip), %ecx
	movl	%ecx, 56(%rsp)
	leaq	32(%rsp), %rcx
	movq	%rcx, env+64(%rip)
	leaq	getIn(%rip), %rcx
	movq	%rcx, ($Get)(%rip)
	movq	$0, ($IoChar)(%rip)
	movl	$0, ($Chr)(%rip)
	movq	(%rax), %rcx
	movq	8(%rax), %rsi
	jmp	.LBB108_1
	.p2align	4, 0x90
.LBB108_7:                              # %"$11"
                                        #   in Loop: Header=BB108_1 Depth=1
	movq	(%rsi), %rcx
	movq	8(%rsi), %rsi
.LBB108_1:                              # %"$1"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %sil
	jne	.LBB108_2
# %bb.5:                                # %"$3"
                                        #   in Loop: Header=BB108_1 Depth=1
	testb	$15, %cl
	jne	.LBB108_7
# %bb.6:                                # %"$12"
                                        #   in Loop: Header=BB108_1 Depth=1
	callq	evList
	jmp	.LBB108_7
.LBB108_2:                              # %"$5"
	testb	$6, %cl
	jne	.LBB108_9
# %bb.3:                                # %"$7"
	testb	$8, %cl
	jne	.LBB108_4
# %bb.8:                                # %"$9"
	callq	evList
	movq	%rax, %rcx
	jmp	.LBB108_9
.LBB108_4:                              # %"$10"
	movq	(%rcx), %rcx
.LBB108_9:                              # %"$4"
	movq	32(%rsp), %rax
	movq	48(%rsp), %rdx
	movq	%rdx, ($Get)(%rip)
	movq	%rax, env+64(%rip)
	movl	$0, ($Chr)(%rip)
	movq	%rcx, %rax
	addq	$64, %rsp
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _output;
	.scl	2;
	.type	32;
	.endef
	.globl	_output                         # -- Begin function _output
	.p2align	4, 0x90
_output:                                # @_output
.seh_proc _output
# %bb.0:                                # %"$1"
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$104, %rsp
	.seh_stackalloc 104
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	env+72(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movq	(%rax), %rcx
	movq	8(%rax), %rax
	movq	%rcx, 40(%rsp)
	movq	($Put)(%rip), %rcx
	movq	%rcx, 48(%rsp)
	leaq	SymTab+8(%rip), %r12
	movq	%r12, 56(%rsp)
	leaq	32(%rsp), %r14
	movq	%r14, env+72(%rip)
	leaq	putOut(%rip), %r15
	movq	%r15, ($Put)(%rip)
	movq	(%rax), %rsi
	movq	8(%rax), %rbx
	jmp	.LBB109_1
	.p2align	4, 0x90
.LBB109_7:                              # %"$11"
                                        #   in Loop: Header=BB109_1 Depth=1
	movq	(%rbx), %rsi
	movq	8(%rbx), %rbx
.LBB109_1:                              # %"$1"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %bl
	jne	.LBB109_2
# %bb.5:                                # %"$3"
                                        #   in Loop: Header=BB109_1 Depth=1
	testb	$15, %sil
	jne	.LBB109_7
# %bb.6:                                # %"$12"
                                        #   in Loop: Header=BB109_1 Depth=1
	movq	%rsi, %rcx
	callq	evList
	jmp	.LBB109_7
.LBB109_2:                              # %"$5"
	testb	$6, %sil
	jne	.LBB109_9
# %bb.3:                                # %"$7"
	testb	$8, %sil
	jne	.LBB109_4
# %bb.8:                                # %"$9"
	movq	%rsi, %rcx
	callq	evList
	movq	%rax, %rsi
	jmp	.LBB109_9
.LBB109_4:                              # %"$10"
	movq	(%rsi), %rsi
.LBB109_9:                              # %"$4"
	movq	56(%rsp), %rax
	cmpq	%r12, %rax
	je	.LBB109_13
# %bb.10:                               # %"$13"
	movq	SymTab+456(%rip), %rbx
	movq	env(%rip), %rcx
	movq	%rbx, 64(%rsp)
	movq	%rcx, 72(%rsp)
	movq	SymTab+472(%rip), %rdi
	movq	%rdi, 80(%rsp)
	leaq	64(%rsp), %rcx
	movq	%rcx, 88(%rsp)
	leaq	80(%rsp), %rcx
	movq	%rcx, env(%rip)
	movq	48(%rsp), %rcx
	movq	%rcx, ($Put)(%rip)
	movq	32(%rsp), %rdx
	movq	40(%rsp), %rcx
	movq	%rdx, env+72(%rip)
	movq	%rax, SymTab+456(%rip)
	movq	%r12, SymTab+472(%rip)
	testb	$14, %cl
	jne	.LBB109_12
# %bb.11:                               # %"$5.i"
	callq	evList
.LBB109_12:                             # %put1.exit
	movq	%rdi, SymTab+472(%rip)
	movq	%rbx, SymTab+456(%rip)
	movq	%r14, env+72(%rip)
	movq	%r15, ($Put)(%rip)
	movq	72(%rsp), %rax
	movq	%rax, env(%rip)
.LBB109_13:                             # %"$14"
	movq	32(%rsp), %rax
	movq	48(%rsp), %rcx
	movq	%rcx, ($Put)(%rip)
	movq	%rax, env+72(%rip)
	movq	%rsi, %rax
	addq	$104, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _fd;
	.scl	2;
	.type	32;
	.endef
	.globl	_fd                             # -- Begin function _fd
	.p2align	4, 0x90
_fd:                                    # @_fd
.seh_proc _fd
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rbx
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB110_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB110_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB110_4
.LBB110_2:                              # %"$6"
	movq	(%rax), %rax
.LBB110_4:                              # %"$2"
	movq	env+32(%rip), %rcx
	movq	env+40(%rip), %rdi
	movq	%rdi, %rdx
	orq	%rcx, %rdx
	je	.LBB110_14
# %bb.5:                                # %"$5.i"
	testq	%rdi, %rdi
	je	.LBB110_6
# %bb.7:                                # %"$7.i"
	testq	%rcx, %rcx
	je	.LBB110_9
# %bb.8:                                # %"$9.i"
	xorl	%edx, %edx
	cmpq	%rcx, %rdi
	seta	%dl
	xorl	%esi, %esi
	cmpq	%rdi, %rcx
	seta	%sil
	cmpq	%rsp, %rcx
	cmoval	%edx, %esi
	cmpb	$1, %sil
	jne	.LBB110_9
.LBB110_6:                              # %"$8.i"
	movq	8(%rcx), %rcx
	addq	$8, %rcx
	jmp	.LBB110_10
.LBB110_9:                              # %"$15.i"
	movq	8(%rdi), %rcx
.LBB110_10:                             # %currFd.exit
	movslq	(%rcx), %rdi
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB110_13
# %bb.11:                               # %"$7"
	testb	$2, %al
	je	.LBB110_15
# %bb.12:                               # %xCnt.exit
	movq	%rax, %rcx
	shrq	$4, %rcx
	movl	%ecx, %edx
	negl	%edx
	testb	$8, %al
	cmovel	%ecx, %edx
	movl	%edi, %ecx
	callq	dup2
.LBB110_13:                             # %"$8"
	shlq	$4, %rdi
	orq	$2, %rdi
	movq	%rdi, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
.LBB110_14:                             # %"$6.i"
	leaq	.L$40(%rip), %r8
	movq	%rbx, %rcx
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	callq	err
.LBB110_15:                             # %"$2.i"
	movq	%rbx, %rcx
	movq	%rax, %rdx
	callq	cntErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _pipe;
	.scl	2;
	.type	32;
	.endef
	.globl	_pipe                           # -- Begin function _pipe
	.p2align	4, 0x90
_pipe:                                  # @_pipe
.seh_proc _pipe
# %bb.0:                                # %"$1"
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$80, %rsp
	.seh_stackalloc 80
	.seh_endprologue
	movq	%rcx, %rdi
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %r14
	leaq	40(%rsp), %rcx
	testb	$15, %r14b
	je	.LBB111_1
# %bb.2:                                # %"$3"
	callq	socketPair
	testl	%eax, %eax
	jns	.LBB111_4
	jmp	.LBB111_32
.LBB111_1:                              # %"$2"
	callq	pipe
	testl	%eax, %eax
	js	.LBB111_32
.LBB111_4:                              # %"$6"
	cmpl	$1, 44(%rsp)
	jle	.LBB111_32
# %bb.5:                                # %"$8"
	movq	%rdi, %rcx
	callq	forkLisp
	testl	%eax, %eax
	je	.LBB111_24
# %bb.6:                                # %"$9"
	movl	%eax, %ebx
	movl	44(%rsp), %ecx
	callq	close
	movl	40(%rsp), %ebp
	movl	%ebp, %ecx
	callq	fcntlCloExec
	testl	%eax, %eax
	js	.LBB111_33
# %bb.7:                                # %closeOnExec.exit
	testb	$15, %r14b
	je	.LBB111_10
# %bb.8:                                # %"$14"
	movslq	%ebp, %rsi
	movl	%ebp, %ecx
	xorl	%edx, %edx
	callq	initInFile
	movl	%ebp, %ecx
	callq	initOutFile
	shlq	$4, %rsi
	orq	$2, %rsi
	jmp	.LBB111_9
.LBB111_10:                             # %"$13"
	movl	%ebx, %ecx
	xorl	%edx, %edx
	callq	setpgid
	movl	%ebp, %ecx
	xorl	%edx, %edx
	callq	initInFile
	movq	($InFile)(%rip), %rcx
	testq	%rcx, %rcx
	je	.LBB111_12
# %bb.11:                               # %"$2.i6"
	movl	($Chr)(%rip), %edx
	movl	%edx, 12(%rcx)
.LBB111_12:                             # %"$3.i"
	movq	env+32(%rip), %rcx
	movq	%rcx, 48(%rsp)
	testq	%rcx, %rcx
	je	.LBB111_14
# %bb.13:                               # %"$4.i"
	movq	($Get)(%rip), %rdx
	movq	%rdx, 16(%rcx)
.LBB111_14:                             # %pushInFile.exit
	leaq	_getStdin(%rip), %rcx
	movq	%rcx, ($Get)(%rip)
	movq	%rax, ($InFile)(%rip)
	movq	%rax, 56(%rsp)
	movl	12(%rax), %eax
	movl	%eax, ($Chr)(%rip)
	movl	%ebx, 72(%rsp)
	leaq	48(%rsp), %rax
	movq	%rax, env+32(%rip)
	movq	(%r14), %rsi
	movq	8(%r14), %rdi
	jmp	.LBB111_15
	.p2align	4, 0x90
.LBB111_21:                             # %"$24"
                                        #   in Loop: Header=BB111_15 Depth=1
	movq	(%rdi), %rsi
	movq	8(%rdi), %rdi
.LBB111_15:                             # %pushInFile.exit
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %dil
	jne	.LBB111_16
# %bb.19:                               # %"$16"
                                        #   in Loop: Header=BB111_15 Depth=1
	testb	$15, %sil
	jne	.LBB111_21
# %bb.20:                               # %"$25"
                                        #   in Loop: Header=BB111_15 Depth=1
	movq	%rsi, %rcx
	callq	evList
	jmp	.LBB111_21
.LBB111_16:                             # %"$18"
	testb	$6, %sil
	jne	.LBB111_23
# %bb.17:                               # %"$20"
	testb	$8, %sil
	jne	.LBB111_18
# %bb.22:                               # %"$22"
	movq	%rsi, %rcx
	callq	evList
	movq	%rax, %rsi
	jmp	.LBB111_23
.LBB111_18:                             # %"$23"
	movq	(%rsi), %rsi
.LBB111_23:                             # %"$17"
	callq	popInFiles
	movq	env+32(%rip), %rax
	movq	8(%rax), %rcx
	movq	%rcx, ($InFile)(%rip)
	movl	12(%rcx), %ecx
	movl	%ecx, ($Chr)(%rip)
	movq	16(%rax), %rax
	movq	%rax, ($Get)(%rip)
.LBB111_9:                              # %"$11"
	movq	%rsi, %rax
	addq	$80, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq
.LBB111_32:                             # %"$5"
	movq	%rdi, %rcx
	callq	pipeErr
.LBB111_24:                             # %"$10"
	movl	40(%rsp), %ecx
	callq	close
	testb	$15, %r14b
	movl	44(%rsp), %edi
	jne	.LBB111_26
# %bb.25:                               # %"$26"
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	callq	setpgid
	jmp	.LBB111_27
.LBB111_33:                             # %"$2.i"
	callq	strErrno
	leaq	.L$36(%rip), %r8
	movq	%rdi, %rcx
	xorl	%edx, %edx
	movq	%rax, %r9
	callq	err
.LBB111_26:                             # %"$27"
	movl	%edi, %ecx
	xorl	%edx, %edx
	callq	dup2
	movq	($InFiles)(%rip), %rax
	movq	(%rax), %rax
	movb	$0, 4128(%rax)
.LBB111_27:                             # %"$28"
	movl	%edi, %ecx
	movl	$1, %edx
	callq	dup2
	movl	%edi, %ecx
	callq	close
	movl	Sig+16(%rip), %ecx
	movq	SigDfl(%rip), %rdx
	callq	signal
	movq	($OutFile)(%rip), %rax
	movb	$0, 4104(%rax)
	movq	($OutFiles)(%rip), %rax
	movq	8(%rax), %rax
	movq	env+40(%rip), %rcx
	movq	%rcx, 48(%rsp)
	testq	%rcx, %rcx
	je	.LBB111_29
# %bb.28:                               # %"$2.i8"
	movq	($Put)(%rip), %rdx
	movq	%rdx, 16(%rcx)
.LBB111_29:                             # %pushOutFile.exit
	leaq	_putStdout(%rip), %rcx
	movq	%rcx, ($Put)(%rip)
	movq	%rax, ($OutFile)(%rip)
	movq	%rax, 56(%rsp)
	movl	$0, 72(%rsp)
	leaq	48(%rsp), %rax
	movq	%rax, env+40(%rip)
	movq	$0, ($LinePtr)(%rip)
	testb	$15, %sil
	jne	.LBB111_31
# %bb.30:                               # %"$29"
	movq	%rsi, %rcx
	callq	evList
.LBB111_31:                             # %"$30"
	xorl	%ecx, %ecx
	callq	bye
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _open;
	.scl	2;
	.type	32;
	.endef
	.globl	_open                           # -- Begin function _open
	.p2align	4, 0x90
_open:                                  # @_open
.seh_proc _open
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %r14
	movq	8(%rcx), %rsi
	movq	(%rsi), %rcx
	testb	$6, %cl
	jne	.LBB112_4
# %bb.1:                                # %"$3.i"
	testb	$8, %cl
	jne	.LBB112_2
# %bb.3:                                # %"$5.i"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB112_4
.LBB112_2:                              # %"$6.i"
	movq	(%rcx), %rcx
.LBB112_4:                              # %evSym.exit
	subq	$32, %rsp
	callq	xSym
	addq	$32, %rsp
	leaq	SymTab+8(%rip), %rdi
	cmpq	%rdi, %rax
	jne	.LBB112_6
# %bb.5:
	movl	$2, %ecx
	movl	$1, %eax
	jmp	.LBB112_16
.LBB112_6:                              # %"$3.i5"
	movq	-8(%rax), %rcx
	testb	$8, %cl
	jne	.LBB112_7
	.p2align	4, 0x90
# %bb.9:                                # %"$8.i"
	testb	$6, %cl
	jne	.LBB112_10
.LBB112_8:                              # %"$8.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rcx
	testb	$6, %cl
	je	.LBB112_8
.LBB112_10:                             # %xName.exit
	movl	$1, %eax
	testb	$4, %cl
	movq	%rcx, %rdx
	je	.LBB112_13
# %bb.11:                               # %"$3.i.i.preheader"
	movl	$1, %eax
	movq	%rcx, %rdx
	.p2align	4, 0x90
.LBB112_12:                             # %"$3.i.i"
                                        # =>This Inner Loop Header: Depth=1
	addq	$8, %rax
	movq	4(%rdx), %rdx
	testb	$4, %dl
	jne	.LBB112_12
.LBB112_13:                             # %"$4.i.i"
	shrq	$4, %rdx
	je	.LBB112_15
	.p2align	4, 0x90
.LBB112_14:                             # %"$6.i.i"
                                        # =>This Inner Loop Header: Depth=1
	incq	%rax
	shrq	$8, %rdx
	jne	.LBB112_14
.LBB112_15:                             # %bufSize.exit.i
	testb	$2, %cl
	jne	.LBB112_16
# %bb.17:                               # %"$3.i9"
	movq	-4(%rcx), %rdx
	movq	%rdx, %rbx
	shrq	$8, %rbx
	cmpb	$126, %dl
	jne	.LBB112_19
	jmp	.LBB112_24
.LBB112_16:                             # %"$2.i"
	movq	%rcx, %rdx
	shrq	$4, %rdx
	movq	%rcx, %rbx
	shrq	$12, %rbx
	cmpb	$126, %dl
	je	.LBB112_24
.LBB112_19:                             # %"$4.i"
	cmpb	$64, %dl
	je	.LBB112_23
# %bb.20:                               # %"$4.i"
	cmpb	$43, %dl
	jne	.LBB112_26
# %bb.21:                               # %"$9.i"
	cmpb	$126, %bl
	je	.LBB112_24
# %bb.22:                               # %"$9.i"
	cmpb	$64, %bl
	jne	.LBB112_26
.LBB112_23:                             # %"$11.i"
	movq	($PilLen)(%rip), %rdx
	jmp	.LBB112_25
.LBB112_24:                             # %"$17.i"
	movq	($UsrLen)(%rip), %rdx
.LBB112_25:                             # %pathSize.exit
	leaq	-1(%rax,%rdx), %rax
.LBB112_26:                             # %pathSize.exit
	addq	$15, %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	subq	$32, %rsp
	movq	%rbx, %rdx
	callq	pathString
	addq	$32, %rsp
	movq	8(%rsi), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB112_30
# %bb.27:                               # %"$3"
	testb	$8, %al
	jne	.LBB112_28
# %bb.29:                               # %"$5"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB112_30
.LBB112_28:                             # %"$6"
	movq	(%rax), %rax
.LBB112_30:                             # %"$2"
	subq	$32, %rsp
	movq	%rbx, %rcx
	cmpq	%rdi, %rax
	jne	.LBB112_31
# %bb.36:                               # %"$7.us.preheader"
	callq	openRdWrCreate
	addq	$32, %rsp
	movl	%eax, %esi
	testl	%eax, %eax
	jns	.LBB112_42
	jmp	.LBB112_37
	.p2align	4, 0x90
.LBB112_40:                             # %"$17.us"
                                        #   in Loop: Header=BB112_37 Depth=1
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	openRdWrCreate
	addq	$32, %rsp
	testl	%eax, %eax
	jns	.LBB112_41
.LBB112_37:                             # %"$11.us"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	callq	gErrno
	addq	$32, %rsp
	cmpl	$2, %eax
	jne	.LBB112_44
# %bb.38:                               # %"$14.us"
                                        #   in Loop: Header=BB112_37 Depth=1
	cmpl	$0, ($Signal)(%rip)
	je	.LBB112_40
# %bb.39:                               # %"$16.us"
                                        #   in Loop: Header=BB112_37 Depth=1
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	sighandler
	addq	$32, %rsp
	jmp	.LBB112_40
.LBB112_31:                             # %"$7.preheader"
	callq	openRd
	addq	$32, %rsp
	movl	%eax, %esi
	testl	%eax, %eax
	jns	.LBB112_42
	jmp	.LBB112_32
	.p2align	4, 0x90
.LBB112_35:                             # %"$17"
                                        #   in Loop: Header=BB112_32 Depth=1
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	openRd
	addq	$32, %rsp
	testl	%eax, %eax
	jns	.LBB112_41
.LBB112_32:                             # %"$11"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	callq	gErrno
	addq	$32, %rsp
	cmpl	$2, %eax
	jne	.LBB112_44
# %bb.33:                               # %"$14"
                                        #   in Loop: Header=BB112_32 Depth=1
	cmpl	$0, ($Signal)(%rip)
	je	.LBB112_35
# %bb.34:                               # %"$16"
                                        #   in Loop: Header=BB112_32 Depth=1
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	sighandler
	addq	$32, %rsp
	jmp	.LBB112_35
.LBB112_41:
	movl	%eax, %esi
.LBB112_42:                             # %"$13"
	subq	$32, %rsp
	movl	%esi, %ecx
	callq	fcntlCloExec
	addq	$32, %rsp
	subq	$32, %rsp
	testl	%eax, %eax
	js	.LBB112_45
# %bb.43:                               # %closeOnExec.exit
	movq	%rbx, %rcx
	callq	strdup
	movl	%esi, %ecx
	movq	%rax, %rdx
	callq	initInFile
	movl	%esi, %ecx
	callq	initOutFile
	addq	$32, %rsp
	movl	%esi, %edi
	shlq	$4, %rdi
	orq	$2, %rdi
.LBB112_44:                             # %"$12"
	movq	%rdi, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	retq
.LBB112_45:                             # %"$2.i11"
	callq	strErrno
	leaq	.L$36(%rip), %r8
	movq	%r14, %rcx
	xorl	%edx, %edx
	movq	%rax, %r9
	callq	err
.LBB112_7:                              # %"$6.i6"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rax, %rdx
	callq	nameErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _close;
	.scl	2;
	.type	32;
	.endef
	.globl	_close                          # -- Begin function _close
	.p2align	4, 0x90
_close:                                 # @_close
.seh_proc _close
# %bb.0:                                # %"$1"
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rcx, %rdi
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	testb	$6, %sil
	jne	.LBB113_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB113_2
# %bb.3:                                # %"$5"
	movq	%rsi, %rcx
	callq	evList
	movq	%rax, %rsi
	jmp	.LBB113_4
.LBB113_2:                              # %"$6"
	movq	(%rsi), %rsi
.LBB113_4:                              # %"$2"
	testb	$2, %sil
	je	.LBB113_23
# %bb.5:                                # %xCnt.exit
	movq	%rsi, %rax
	shrq	$4, %rax
	movl	%eax, %ebx
	negl	%ebx
	testb	$8, %sil
	cmovel	%eax, %ebx
	movl	%ebx, %ecx
	callq	close
	testl	%eax, %eax
	je	.LBB113_9
# %bb.6:
	leaq	SymTab+8(%rip), %r14
	jmp	.LBB113_7
	.p2align	4, 0x90
.LBB113_22:                             # %"$14"
                                        #   in Loop: Header=BB113_7 Depth=1
	movl	%ebx, %ecx
	callq	close
	testl	%eax, %eax
	je	.LBB113_9
.LBB113_7:                              # %"$8"
                                        # =>This Inner Loop Header: Depth=1
	callq	gErrno
	cmpl	$2, %eax
	jne	.LBB113_8
# %bb.20:                               # %"$11"
                                        #   in Loop: Header=BB113_7 Depth=1
	cmpl	$0, ($Signal)(%rip)
	je	.LBB113_22
# %bb.21:                               # %"$13"
                                        #   in Loop: Header=BB113_7 Depth=1
	movq	%rdi, %rcx
	callq	sighandler
	jmp	.LBB113_22
.LBB113_9:                              # %"$10"
	cmpl	%ebx, ($InFDs)(%rip)
	movslq	%ebx, %r14
	jle	.LBB113_14
# %bb.10:                               # %"$2.i4"
	movq	($InFiles)(%rip), %rax
	movq	(%rax,%r14,8), %rdi
	cmpq	($InFile)(%rip), %rdi
	jne	.LBB113_12
# %bb.11:                               # %"$4.i"
	movq	(%rax), %rax
	movq	%rax, ($InFile)(%rip)
	movl	12(%rax), %eax
	movl	%eax, ($Chr)(%rip)
.LBB113_12:                             # %"$5.i"
	testq	%rdi, %rdi
	je	.LBB113_14
# %bb.13:                               # %"$6.i"
	movq	(%rdi), %rcx
	callq	free
	movq	$0, (%rdi)
	movl	$-1, 8(%rdi)
.LBB113_14:                             # %closeInFile.exit
	cmpl	%ebx, ($OutFDs)(%rip)
	jle	.LBB113_19
# %bb.15:                               # %"$2.i6"
	movq	($OutFiles)(%rip), %rcx
	movq	(%rcx,%r14,8), %rax
	cmpq	($OutFile)(%rip), %rax
	jne	.LBB113_17
# %bb.16:                               # %"$4.i7"
	movq	8(%rcx), %rcx
	movq	%rcx, ($OutFile)(%rip)
.LBB113_17:                             # %"$5.i9"
	testq	%rax, %rax
	je	.LBB113_19
# %bb.18:                               # %"$6.i10"
	movl	$-1, (%rax)
	jmp	.LBB113_19
.LBB113_8:
	movq	%r14, %rsi
.LBB113_19:                             # %"$9"
	movq	%rsi, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq
.LBB113_23:                             # %"$2.i"
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	cntErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _echo;
	.scl	2;
	.type	32;
	.endef
	.globl	_echo                           # -- Begin function _echo
	.p2align	4, 0x90
_echo:                                  # @_echo
.seh_proc _echo
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$56, %rsp
	.seh_stackalloc 56
	leaq	48(%rsp), %rbp
	.seh_setframe %rbp, 48
	.seh_endprologue
	movq	%rcx, %r14
	movq	8(%rcx), %rax
	movq	(%rax), %rdx
	movq	8(%rax), %r13
	testb	$6, %dl
	jne	.LBB114_4
# %bb.1:                                # %"$3"
	testb	$8, %dl
	jne	.LBB114_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rdx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdx
.LBB114_4:                              # %"$2"
	testb	$15, %r13b
	je	.LBB114_11
.LBB114_5:                              # %"$2"
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rdx
	jne	.LBB114_11
# %bb.6:                                # %"$11"
	movl	($Chr)(%rip), %eax
	testl	%eax, %eax
	jne	.LBB114_8
# %bb.7:                                # %"$13"
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
.LBB114_8:                              # %"$14"
	leaq	SymTab+280(%rip), %rdi
	testl	%eax, %eax
	js	.LBB114_28
	.p2align	4, 0x90
.LBB114_10:                             # %"$16"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	movl	%eax, %ecx
	callq	*($Put)(%rip)
	callq	*($Get)(%rip)
	addq	$32, %rsp
	testl	%eax, %eax
	jns	.LBB114_10
	jmp	.LBB114_28
.LBB114_2:                              # %"$6"
	movq	(%rdx), %rdx
	testb	$15, %r13b
	jne	.LBB114_5
.LBB114_11:                             # %"$10"
	testb	$6, %dl
	je	.LBB114_30
# %bb.12:                               # %"$19"
	testb	$2, %dl
	je	.LBB114_123
# %bb.13:                               # %xCnt.exit
	movq	%rdx, %rax
	shrq	$4, %rax
	movq	%rax, %rbx
	negq	%rbx
	testb	$8, %dl
	cmoveq	%rax, %rbx
	testb	$15, %r13b
	je	.LBB114_14
# %bb.22:                               # %"$21"
	testq	%rbx, %rbx
	jle	.LBB114_26
.LBB114_23:                             # %"$28.preheader"
	decq	%rbx
	leaq	SymTab+8(%rip), %rdi
	.p2align	4, 0x90
.LBB114_24:                             # %"$28"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB114_28
# %bb.25:                               # %"$31"
                                        #   in Loop: Header=BB114_24 Depth=1
	subq	$32, %rsp
	movl	%eax, %ecx
	callq	*($Put)(%rip)
	addq	$32, %rsp
	decq	%rbx
	jns	.LBB114_24
	jmp	.LBB114_26
.LBB114_30:                             # %"$18"
	testb	$15, %dl
	je	.LBB114_125
# %bb.31:                               # %"$32"
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rdx
	jne	.LBB114_33
# %bb.32:
	movl	$1, %eax
	movl	$2, %edi
	jmp	.LBB114_41
.LBB114_14:                             # %"$20"
	movq	(%r13), %rax
	testb	$6, %al
	jne	.LBB114_18
# %bb.15:                               # %"$3.i"
	testb	$8, %al
	jne	.LBB114_16
# %bb.17:                               # %"$5.i"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB114_18
.LBB114_33:                             # %"$3.i38"
	movq	-8(%rdx), %rdi
	testb	$8, %dil
	jne	.LBB114_66
	.p2align	4, 0x90
# %bb.35:                               # %"$8.i"
	testb	$6, %dil
	jne	.LBB114_36
.LBB114_34:                             # %"$8.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rdi), %rdi
	testb	$6, %dil
	je	.LBB114_34
.LBB114_36:                             # %xName.exit
	movl	$1, %eax
	testb	$4, %dil
	movq	%rdi, %rcx
	je	.LBB114_39
# %bb.37:                               # %"$3.i43.preheader"
	movl	$1, %eax
	movq	%rdi, %rcx
	.p2align	4, 0x90
.LBB114_38:                             # %"$3.i43"
                                        # =>This Inner Loop Header: Depth=1
	addq	$8, %rax
	movq	4(%rcx), %rcx
	testb	$4, %cl
	jne	.LBB114_38
.LBB114_39:                             # %"$4.i"
	shrq	$4, %rcx
	je	.LBB114_41
	.p2align	4, 0x90
.LBB114_40:                             # %"$6.i45"
                                        # =>This Inner Loop Header: Depth=1
	incq	%rax
	shrq	$8, %rcx
	jne	.LBB114_40
.LBB114_41:                             # %bufSize.exit
	addq	$15, %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	xorl	%ecx, %ecx
	movq	%rbx, %rax
	testq	%rcx, %rcx
	jne	.LBB114_56
	.p2align	4, 0x90
.LBB114_43:                             # %"$2.i.i48"
	cmpq	$2, %rdi
	je	.LBB114_44
# %bb.53:                               # %"$5.i.i"
	testb	$2, %dil
	jne	.LBB114_54
# %bb.55:                               # %"$7.i.i"
	movq	-4(%rdi), %rcx
	movq	4(%rdi), %rdi
	jmp	.LBB114_56
	.p2align	4, 0x90
.LBB114_54:                             # %"$8.i.i"
	movq	%rdi, %rcx
	shrq	$4, %rcx
	movl	$2, %edi
	.p2align	4, 0x90
.LBB114_56:                             # %symByte.exit.i
                                        # =>This Inner Loop Header: Depth=1
	movb	%cl, (%rax)
	testb	%cl, %cl
	je	.LBB114_45
# %bb.57:                               # %"$3.i50"
                                        #   in Loop: Header=BB114_56 Depth=1
	shrq	$8, %rcx
	incq	%rax
	testq	%rcx, %rcx
	jne	.LBB114_56
	jmp	.LBB114_43
.LBB114_44:                             # %symByte.exit.thread.i
	movb	$0, (%rax)
.LBB114_45:                             # %bufString.exit
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%rdx, (%r15)
	movq	$0, 16(%r15)
	movq	%rbx, 24(%r15)
	movq	env(%rip), %rax
	movq	%rax, 8(%r15)
	movq	%r15, env(%rip)
	movl	$1, %esi
	testb	$15, %r13b
	je	.LBB114_58
# %bb.46:
	movq	%r15, %r13
	jmp	.LBB114_47
.LBB114_58:                             # %"$35.preheader"
	leaq	SymTab+8(%rip), %r12
	jmp	.LBB114_59
	.p2align	4, 0x90
.LBB114_77:                             # %symByte.exit.thread.i83
                                        #   in Loop: Header=BB114_59 Depth=1
	movb	$0, (%rax)
.LBB114_78:                             # %bufString.exit93
                                        #   in Loop: Header=BB114_59 Depth=1
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rcx
	movq	%rdx, (%rcx)
	movq	$0, 16(%rcx)
	movq	%rdi, 24(%rcx)
	movq	env(%rip), %rax
	movq	%rax, 8(%rcx)
	movq	%rcx, env(%rip)
	incq	%rsi
	testb	$15, %r13b
	jne	.LBB114_79
.LBB114_59:                             # %"$35"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_67 Depth 2
                                        #     Child Loop BB114_71 Depth 2
                                        #     Child Loop BB114_73 Depth 2
                                        #     Child Loop BB114_83 Depth 2
	movq	(%r13), %rax
	movq	8(%r13), %r13
	movq	(%rax), %rcx
	testb	$6, %cl
	jne	.LBB114_63
# %bb.60:                               # %"$3.i54"
                                        #   in Loop: Header=BB114_59 Depth=1
	testb	$8, %cl
	jne	.LBB114_61
# %bb.62:                               # %"$5.i56"
                                        #   in Loop: Header=BB114_59 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB114_63
.LBB114_61:                             # %"$6.i55"
                                        #   in Loop: Header=BB114_59 Depth=1
	movq	(%rcx), %rcx
	.p2align	4, 0x90
.LBB114_63:                             # %evSym.exit
                                        #   in Loop: Header=BB114_59 Depth=1
	subq	$32, %rsp
	callq	xSym
	addq	$32, %rsp
	movq	%rax, %rdx
	cmpq	%r12, %rax
	jne	.LBB114_65
# %bb.64:                               #   in Loop: Header=BB114_59 Depth=1
	movl	$1, %eax
	movl	$2, %ebx
	jmp	.LBB114_74
	.p2align	4, 0x90
.LBB114_65:                             # %"$3.i59"
                                        #   in Loop: Header=BB114_59 Depth=1
	movq	-8(%rdx), %rbx
	testb	$8, %bl
	jne	.LBB114_66
	.p2align	4, 0x90
# %bb.68:                               # %"$8.i64"
                                        #   in Loop: Header=BB114_59 Depth=1
	testb	$6, %bl
	jne	.LBB114_69
.LBB114_67:                             # %"$8.i64"
                                        #   Parent Loop BB114_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rbx), %rbx
	testb	$6, %bl
	je	.LBB114_67
.LBB114_69:                             # %xName.exit66
                                        #   in Loop: Header=BB114_59 Depth=1
	movl	$1, %eax
	testb	$4, %bl
	movq	%rbx, %rcx
	je	.LBB114_72
# %bb.70:                               # %"$3.i69.preheader"
                                        #   in Loop: Header=BB114_59 Depth=1
	movl	$1, %eax
	movq	%rbx, %rcx
	.p2align	4, 0x90
.LBB114_71:                             # %"$3.i69"
                                        #   Parent Loop BB114_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addq	$8, %rax
	movq	4(%rcx), %rcx
	testb	$4, %cl
	jne	.LBB114_71
.LBB114_72:                             # %"$4.i73"
                                        #   in Loop: Header=BB114_59 Depth=1
	shrq	$4, %rcx
	je	.LBB114_74
	.p2align	4, 0x90
.LBB114_73:                             # %"$6.i75"
                                        #   Parent Loop BB114_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	incq	%rax
	shrq	$8, %rcx
	jne	.LBB114_73
.LBB114_74:                             # %bufSize.exit77
                                        #   in Loop: Header=BB114_59 Depth=1
	addq	$15, %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	xorl	%ecx, %ecx
	movq	%rdi, %rax
	testq	%rcx, %rcx
	jne	.LBB114_83
	.p2align	4, 0x90
.LBB114_76:                             # %"$2.i.i82"
                                        #   in Loop: Header=BB114_59 Depth=1
	cmpq	$2, %rbx
	je	.LBB114_77
# %bb.80:                               # %"$5.i.i85"
                                        #   in Loop: Header=BB114_59 Depth=1
	testb	$2, %bl
	jne	.LBB114_81
# %bb.82:                               # %"$7.i.i87"
                                        #   in Loop: Header=BB114_59 Depth=1
	movq	-4(%rbx), %rcx
	movq	4(%rbx), %rbx
	jmp	.LBB114_83
	.p2align	4, 0x90
.LBB114_81:                             # %"$8.i.i86"
                                        #   in Loop: Header=BB114_59 Depth=1
	movq	%rbx, %rcx
	shrq	$4, %rcx
	movl	$2, %ebx
	.p2align	4, 0x90
.LBB114_83:                             # %symByte.exit.i90
                                        #   Parent Loop BB114_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movb	%cl, (%rax)
	testb	%cl, %cl
	je	.LBB114_78
# %bb.84:                               # %"$3.i91"
                                        #   in Loop: Header=BB114_83 Depth=2
	shrq	$8, %rcx
	incq	%rax
	testq	%rcx, %rcx
	jne	.LBB114_83
	jmp	.LBB114_76
.LBB114_79:
	movq	%rcx, %r13
.LBB114_47:                             # %"$36"
	movl	($Chr)(%rip), %edi
	testl	%edi, %edi
	je	.LBB114_48
# %bb.49:                               # %"$38"
	testl	%edi, %edi
	jns	.LBB114_50
	jmp	.LBB114_122
.LBB114_48:                             # %"$37"
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	movl	($Chr)(%rip), %edi
	testl	%edi, %edi
	js	.LBB114_122
.LBB114_50:                             # %"$40.preheader"
	leaq	-1(%rsi), %rax
	movq	%rax, -40(%rbp)                 # 8-byte Spill
	xorl	%r12d, %r12d
	movq	%r15, -8(%rbp)                  # 8-byte Spill
	movq	%rsi, -32(%rbp)                 # 8-byte Spill
	movq	%r13, -24(%rbp)                 # 8-byte Spill
.LBB114_51:                             # %"$40"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_87 Depth 2
                                        #       Child Loop BB114_88 Depth 3
                                        #         Child Loop BB114_99 Depth 4
                                        #         Child Loop BB114_103 Depth 4
                                        #     Child Loop BB114_120 Depth 2
                                        #     Child Loop BB114_115 Depth 2
	testq	%r12, %r12
	je	.LBB114_52
# %bb.85:                               # %"$42"
                                        #   in Loop: Header=BB114_51 Depth=1
	movq	16(%r12), %rax
	jmp	.LBB114_86
.LBB114_52:                             #   in Loop: Header=BB114_51 Depth=1
	xorl	%eax, %eax
.LBB114_86:                             # %"$44"
                                        #   in Loop: Header=BB114_51 Depth=1
	movq	%rax, (%rbp)                    # 8-byte Spill
	movq	%r12, -16(%rbp)                 # 8-byte Spill
	movq	-32(%rbp), %r14                 # 8-byte Reload
	.p2align	4, 0x90
.LBB114_87:                             # %"$45"
                                        #   Parent Loop BB114_51 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB114_88 Depth 3
                                        #         Child Loop BB114_99 Depth 4
                                        #         Child Loop BB114_103 Depth 4
	movq	16(%r13), %rbx
	movq	24(%r13), %rsi
	.p2align	4, 0x90
.LBB114_88:                             # %"$45"
                                        #   Parent Loop BB114_51 Depth=1
                                        #     Parent Loop BB114_87 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB114_99 Depth 4
                                        #         Child Loop BB114_103 Depth 4
	cmpb	%dil, (%rsi,%rbx)
	je	.LBB114_89
# %bb.97:                               # %"$48"
                                        #   in Loop: Header=BB114_88 Depth=3
	testq	%rbx, %rbx
	je	.LBB114_110
# %bb.98:                               # %"$62.preheader"
                                        #   in Loop: Header=BB114_88 Depth=3
	decq	%rbx
	movl	$1, %r15d
	movq	%rbx, %rcx
	.p2align	4, 0x90
.LBB114_99:                             # %"$62"
                                        #   Parent Loop BB114_51 Depth=1
                                        #     Parent Loop BB114_87 Depth=2
                                        #       Parent Loop BB114_88 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movq	%rcx, %rbx
	movq	%rcx, 16(%r13)
	testq	%rcx, %rcx
	je	.LBB114_101
# %bb.100:                              # %"$63"
                                        #   in Loop: Header=BB114_99 Depth=4
	leaq	(%rsi,%r15), %rdx
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rbx, %r8
	callq	memcmp
	addq	$32, %rsp
	leaq	-1(%rbx), %rcx
	incq	%r15
	testl	%eax, %eax
	jne	.LBB114_99
.LBB114_101:                            # %"$64"
                                        #   in Loop: Header=BB114_88 Depth=3
	cmpq	%r13, %r12
	jne	.LBB114_88
# %bb.102:                              # %"$68.preheader"
                                        #   in Loop: Header=BB114_88 Depth=3
	movq	-40(%rbp), %rax                 # 8-byte Reload
	xorl	%r12d, %r12d
	movq	-24(%rbp), %rcx                 # 8-byte Reload
	.p2align	4, 0x90
.LBB114_103:                            # %"$68"
                                        #   Parent Loop BB114_51 Depth=1
                                        #     Parent Loop BB114_87 Depth=2
                                        #       Parent Loop BB114_88 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movq	16(%rcx), %rdx
	testq	%rdx, %rdx
	je	.LBB114_107
# %bb.104:                              # %"$69"
                                        #   in Loop: Header=BB114_103 Depth=4
	testq	%r12, %r12
	je	.LBB114_105
# %bb.106:                              # %"$71"
                                        #   in Loop: Header=BB114_103 Depth=4
	cmpq	%rdx, 16(%r12)
	cmovbq	%rcx, %r12
.LBB114_107:                            # %"$70"
                                        #   in Loop: Header=BB114_103 Depth=4
	testq	%rax, %rax
	je	.LBB114_88
.LBB114_108:                            # %"$75"
                                        #   in Loop: Header=BB114_103 Depth=4
	movq	8(%rcx), %rcx
	decq	%rax
	jmp	.LBB114_103
	.p2align	4, 0x90
.LBB114_105:                            #   in Loop: Header=BB114_103 Depth=4
	movq	%rcx, %r12
	testq	%rax, %rax
	jne	.LBB114_108
	jmp	.LBB114_88
	.p2align	4, 0x90
.LBB114_89:                             # %"$47"
                                        #   in Loop: Header=BB114_87 Depth=2
	leaq	1(%rbx), %rax
	movq	%rax, 16(%r13)
	cmpb	$0, 1(%rsi,%rbx)
	je	.LBB114_92
# %bb.90:                               # %"$51"
                                        #   in Loop: Header=BB114_87 Depth=2
	testq	%r12, %r12
	je	.LBB114_91
# %bb.109:                              # %"$52"
                                        #   in Loop: Header=BB114_87 Depth=2
	cmpq	%rax, 16(%r12)
	cmovbq	%r13, %r12
.LBB114_110:                            # %"$50"
                                        #   in Loop: Header=BB114_87 Depth=2
	decq	%r14
	jne	.LBB114_111
	jmp	.LBB114_112
	.p2align	4, 0x90
.LBB114_91:                             #   in Loop: Header=BB114_87 Depth=2
	movq	%r13, %r12
	decq	%r14
	je	.LBB114_112
.LBB114_111:                            # %"$77"
                                        #   in Loop: Header=BB114_87 Depth=2
	movq	8(%r13), %r13
	jmp	.LBB114_87
.LBB114_112:                            # %"$78"
                                        #   in Loop: Header=BB114_51 Depth=1
	testq	%r12, %r12
	je	.LBB114_113
# %bb.117:                              # %"$80"
                                        #   in Loop: Header=BB114_51 Depth=1
	movq	-16(%rbp), %rax                 # 8-byte Reload
	testq	%rax, %rax
	movq	-8(%rbp), %r15                  # 8-byte Reload
	movq	-24(%rbp), %r13                 # 8-byte Reload
	movq	(%rbp), %rdi                    # 8-byte Reload
	je	.LBB114_121
# %bb.118:                              # %"$88"
                                        #   in Loop: Header=BB114_51 Depth=1
	subq	16(%r12), %rdi
	js	.LBB114_121
# %bb.119:                              # %"$90.preheader"
                                        #   in Loop: Header=BB114_51 Depth=1
	movq	24(%rax), %rsi
	incq	%rdi
	.p2align	4, 0x90
.LBB114_120:                            # %"$90"
                                        #   Parent Loop BB114_51 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	(%rsi), %ecx
	subq	$32, %rsp
	callq	*($Put)(%rip)
	addq	$32, %rsp
	incq	%rsi
	decq	%rdi
	testq	%rdi, %rdi
	jg	.LBB114_120
	jmp	.LBB114_121
.LBB114_113:                            # %"$81"
                                        #   in Loop: Header=BB114_51 Depth=1
	movq	-16(%rbp), %rax                 # 8-byte Reload
	testq	%rax, %rax
	movq	-8(%rbp), %r15                  # 8-byte Reload
	movq	-24(%rbp), %r13                 # 8-byte Reload
	movq	(%rbp), %rbx                    # 8-byte Reload
	je	.LBB114_116
# %bb.114:                              # %"$82"
                                        #   in Loop: Header=BB114_51 Depth=1
	movq	24(%rax), %rsi
	.p2align	4, 0x90
.LBB114_115:                            # %"$84"
                                        #   Parent Loop BB114_51 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	(%rsi), %ecx
	subq	$32, %rsp
	callq	*($Put)(%rip)
	addq	$32, %rsp
	incq	%rsi
	decq	%rbx
	jne	.LBB114_115
.LBB114_116:                            # %"$83"
                                        #   in Loop: Header=BB114_51 Depth=1
	subq	$32, %rsp
	movl	%edi, %ecx
	callq	*($Put)(%rip)
	addq	$32, %rsp
	xorl	%r12d, %r12d
.LBB114_121:                            # %"$79"
                                        #   in Loop: Header=BB114_51 Depth=1
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	movl	($Chr)(%rip), %edi
	testl	%edi, %edi
	jns	.LBB114_51
.LBB114_122:                            # %"$41"
	movq	8(%r15), %rax
	movq	%rax, env(%rip)
	leaq	SymTab+8(%rip), %rdi
	jmp	.LBB114_28
.LBB114_92:                             # %"$49"
	movq	-16(%rbp), %rcx                 # 8-byte Reload
	testq	%rcx, %rcx
	movq	(%rbp), %rdi                    # 8-byte Reload
	je	.LBB114_96
# %bb.93:                               # %"$56"
	cmpq	%rax, %rdi
	js	.LBB114_96
# %bb.94:                               # %"$59.preheader"
	movq	24(%rcx), %rsi
	subq	%rbx, %rdi
	.p2align	4, 0x90
.LBB114_95:                             # %"$59"
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%rsi), %ecx
	subq	$32, %rsp
	callq	*($Put)(%rip)
	addq	$32, %rsp
	incq	%rsi
	decq	%rdi
	testq	%rdi, %rdi
	jg	.LBB114_95
.LBB114_96:                             # %"$57"
	movl	$0, ($Chr)(%rip)
	movq	-8(%rbp), %rax                  # 8-byte Reload
	movq	8(%rax), %rax
	movq	%rax, env(%rip)
	movq	(%r13), %rax
	jmp	.LBB114_29
.LBB114_16:                             # %"$6.i"
	movq	(%rax), %rax
.LBB114_18:                             # %"$2.i36"
	testb	$2, %al
	je	.LBB114_124
# %bb.19:                               # %evCnt.exit
	movq	%rax, %rcx
	shrq	$4, %rcx
	movq	%rcx, %rsi
	negq	%rsi
	testb	$8, %al
	cmoveq	%rcx, %rsi
	incq	%rbx
	leaq	SymTab+8(%rip), %rdi
	.p2align	4, 0x90
.LBB114_20:                             # %"$22"
                                        # =>This Inner Loop Header: Depth=1
	decq	%rbx
	jle	.LBB114_21
# %bb.27:                               # %"$23"
                                        #   in Loop: Header=BB114_20 Depth=1
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	testl	%eax, %eax
	jns	.LBB114_20
	jmp	.LBB114_28
.LBB114_21:
	movq	%rsi, %rbx
	testq	%rbx, %rbx
	jg	.LBB114_23
.LBB114_26:                             # %"$29"
	movl	$0, ($Chr)(%rip)
	leaq	SymTab+280(%rip), %rdi
.LBB114_28:                             # %"$25"
	movq	%rdi, %rax
.LBB114_29:                             # %"$25"
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB114_66:                             # %"$6.i39"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	nameErr
.LBB114_123:                            # %"$2.i"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	cntErr
.LBB114_125:                            # %"$33"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	argErr
.LBB114_124:                            # %"$2.i.i"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rax, %rdx
	callq	cntErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _prin;
	.scl	2;
	.type	32;
	.endef
	.globl	_prin                           # -- Begin function _prin
	.p2align	4, 0x90
_prin:                                  # @_prin
.seh_proc _prin
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rdi
	jmp	.LBB115_1
.LBB115_4:                              # %"$6"
                                        #   in Loop: Header=BB115_1 Depth=1
	movq	%rsi, %rcx
	callq	evList
	movq	%rax, %rsi
	.p2align	4, 0x90
.LBB115_5:                              # %"$3"
                                        #   in Loop: Header=BB115_1 Depth=1
	movq	%rsi, %rcx
	callq	prin
	testb	$15, %dil
	jne	.LBB115_6
.LBB115_1:                              # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rsi
	movq	8(%rdi), %rdi
	testb	$6, %sil
	jne	.LBB115_5
# %bb.2:                                # %"$4"
                                        #   in Loop: Header=BB115_1 Depth=1
	testb	$8, %sil
	je	.LBB115_4
# %bb.3:                                # %"$7"
                                        #   in Loop: Header=BB115_1 Depth=1
	movq	(%rsi), %rsi
	jmp	.LBB115_5
.LBB115_6:                              # %"$9"
	movq	%rsi, %rax
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _prinl;
	.scl	2;
	.type	32;
	.endef
	.globl	_prinl                          # -- Begin function _prinl
	.p2align	4, 0x90
_prinl:                                 # @_prinl
.seh_proc _prinl
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rdi
	jmp	.LBB116_1
.LBB116_4:                              # %"$6.i"
                                        #   in Loop: Header=BB116_1 Depth=1
	movq	%rsi, %rcx
	callq	evList
	movq	%rax, %rsi
	.p2align	4, 0x90
.LBB116_5:                              # %"$3.i"
                                        #   in Loop: Header=BB116_1 Depth=1
	movq	%rsi, %rcx
	callq	prin
	testb	$15, %dil
	jne	.LBB116_6
.LBB116_1:                              # %"$2.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rsi
	movq	8(%rdi), %rdi
	testb	$6, %sil
	jne	.LBB116_5
# %bb.2:                                # %"$4.i"
                                        #   in Loop: Header=BB116_1 Depth=1
	testb	$8, %sil
	je	.LBB116_4
# %bb.3:                                # %"$7.i"
                                        #   in Loop: Header=BB116_1 Depth=1
	movq	(%rsi), %rsi
	jmp	.LBB116_5
.LBB116_6:                              # %_prin.exit
	movb	$10, %cl
	callq	*($Put)(%rip)
	movq	%rsi, %rax
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _space;
	.scl	2;
	.type	32;
	.endef
	.globl	_space                          # -- Begin function _space
	.p2align	4, 0x90
_space:                                 # @_space
.seh_proc _space
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rcx, %rdi
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	testb	$6, %sil
	jne	.LBB117_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB117_2
# %bb.3:                                # %"$5"
	movq	%rsi, %rcx
	callq	evList
	movq	%rax, %rsi
	jmp	.LBB117_4
.LBB117_2:                              # %"$6"
	movq	(%rsi), %rsi
.LBB117_4:                              # %"$2"
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rsi
	jne	.LBB117_5
# %bb.9:                                # %"$8"
	movb	$32, %cl
	callq	*($Put)(%rip)
	movl	$18, %esi
	jmp	.LBB117_10
.LBB117_5:                              # %"$7"
	testb	$2, %sil
	je	.LBB117_11
# %bb.6:                                # %xCnt.exit
	movq	%rsi, %rax
	shrq	$4, %rax
	movq	%rax, %rdi
	negq	%rdi
	testb	$8, %sil
	cmoveq	%rax, %rdi
	testq	%rdi, %rdi
	jle	.LBB117_10
# %bb.7:                                # %"$11.preheader"
	incq	%rdi
	.p2align	4, 0x90
.LBB117_8:                              # %"$11"
                                        # =>This Inner Loop Header: Depth=1
	movb	$32, %cl
	callq	*($Put)(%rip)
	decq	%rdi
	cmpq	$1, %rdi
	jg	.LBB117_8
.LBB117_10:                             # %"$9"
	movq	%rsi, %rax
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
.LBB117_11:                             # %"$2.i"
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	cntErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _print;
	.scl	2;
	.type	32;
	.endef
	.globl	_print                          # -- Begin function _print
	.p2align	4, 0x90
_print:                                 # @_print
.seh_proc _print
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rdi
	.p2align	4, 0x90
.LBB118_1:                              # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rsi
	movq	8(%rdi), %rdi
	testb	$6, %sil
	jne	.LBB118_5
# %bb.2:                                # %"$4"
                                        #   in Loop: Header=BB118_1 Depth=1
	testb	$8, %sil
	jne	.LBB118_3
# %bb.4:                                # %"$6"
                                        #   in Loop: Header=BB118_1 Depth=1
	movq	%rsi, %rcx
	callq	evList
	movq	%rax, %rsi
	jmp	.LBB118_5
.LBB118_3:                              # %"$7"
                                        #   in Loop: Header=BB118_1 Depth=1
	movq	(%rsi), %rsi
	.p2align	4, 0x90
.LBB118_5:                              # %"$3"
                                        #   in Loop: Header=BB118_1 Depth=1
	movq	%rsi, %rcx
	callq	print
	testb	$15, %dil
	jne	.LBB118_7
# %bb.6:                                # %"$8"
                                        #   in Loop: Header=BB118_1 Depth=1
	movb	$32, %cl
	callq	*($Put)(%rip)
	jmp	.LBB118_1
.LBB118_7:                              # %"$9"
	movq	%rsi, %rax
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _printsp;
	.scl	2;
	.type	32;
	.endef
	.globl	_printsp                        # -- Begin function _printsp
	.p2align	4, 0x90
_printsp:                               # @_printsp
.seh_proc _printsp
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rdi
	jmp	.LBB119_1
.LBB119_4:                              # %"$6.i"
                                        #   in Loop: Header=BB119_1 Depth=1
	movq	%rsi, %rcx
	callq	evList
	movq	%rax, %rsi
	.p2align	4, 0x90
.LBB119_5:                              # %"$3.i"
                                        #   in Loop: Header=BB119_1 Depth=1
	movq	%rsi, %rcx
	callq	print
	movb	$32, %cl
	callq	*($Put)(%rip)
	testb	$15, %dil
	jne	.LBB119_6
.LBB119_1:                              # %"$2.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rsi
	movq	8(%rdi), %rdi
	testb	$6, %sil
	jne	.LBB119_5
# %bb.2:                                # %"$4.i"
                                        #   in Loop: Header=BB119_1 Depth=1
	testb	$8, %sil
	je	.LBB119_4
# %bb.3:                                # %"$7.i"
                                        #   in Loop: Header=BB119_1 Depth=1
	movq	(%rsi), %rsi
	jmp	.LBB119_5
.LBB119_6:                              # %_print.exit
	movq	%rsi, %rax
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _println;
	.scl	2;
	.type	32;
	.endef
	.globl	_println                        # -- Begin function _println
	.p2align	4, 0x90
_println:                               # @_println
.seh_proc _println
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rdi
	.p2align	4, 0x90
.LBB120_1:                              # %"$2.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rsi
	movq	8(%rdi), %rdi
	testb	$6, %sil
	jne	.LBB120_5
# %bb.2:                                # %"$4.i"
                                        #   in Loop: Header=BB120_1 Depth=1
	testb	$8, %sil
	jne	.LBB120_3
# %bb.4:                                # %"$6.i"
                                        #   in Loop: Header=BB120_1 Depth=1
	movq	%rsi, %rcx
	callq	evList
	movq	%rax, %rsi
	jmp	.LBB120_5
.LBB120_3:                              # %"$7.i"
                                        #   in Loop: Header=BB120_1 Depth=1
	movq	(%rsi), %rsi
	.p2align	4, 0x90
.LBB120_5:                              # %"$3.i"
                                        #   in Loop: Header=BB120_1 Depth=1
	movq	%rsi, %rcx
	callq	print
	testb	$15, %dil
	movq	($Put)(%rip), %rax
	jne	.LBB120_7
# %bb.6:                                # %"$8.i"
                                        #   in Loop: Header=BB120_1 Depth=1
	movb	$32, %cl
	callq	*%rax
	jmp	.LBB120_1
.LBB120_7:                              # %_print.exit
	movb	$10, %cl
	callq	*%rax
	movq	%rsi, %rax
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _flush;
	.scl	2;
	.type	32;
	.endef
	.globl	_flush                          # -- Begin function _flush
	.p2align	4, 0x90
_flush:                                 # @_flush
.seh_proc _flush
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	($OutFile)(%rip), %rdx
	testq	%rdx, %rdx
	je	.LBB121_4
# %bb.1:                                # %"$3.i"
	movl	4(%rdx), %r8d
	testl	%r8d, %r8d
	je	.LBB121_4
# %bb.2:                                # %flush.exit
	movl	$0, 4(%rdx)
	movl	(%rdx), %ecx
	addq	$8, %rdx
	callq	wrBytes
	testb	$1, %al
	je	.LBB121_3
.LBB121_4:                              # %flush.exit.thread
	leaq	SymTab+280(%rip), %rax
	jmp	.LBB121_5
.LBB121_3:
	leaq	SymTab+8(%rip), %rax
.LBB121_5:
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _rewind;
	.scl	2;
	.type	32;
	.endef
	.globl	_rewind                         # -- Begin function _rewind
	.p2align	4, 0x90
_rewind:                                # @_rewind
.seh_proc _rewind
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	($OutFile)(%rip), %rax
	leaq	SymTab+8(%rip), %rsi
	testq	%rax, %rax
	je	.LBB122_3
# %bb.1:                                # %"$3"
	movl	(%rax), %edi
	movl	$0, 4(%rax)
	movl	%edi, %ecx
	callq	seek0
	testb	$1, %al
	je	.LBB122_3
# %bb.2:                                # %"$5"
	movl	%edi, %ecx
	callq	truncate0
	leaq	SymTab+280(%rip), %rcx
	leaq	SymTab+8(%rip), %rsi
	testb	$1, %al
	cmovneq	%rcx, %rsi
.LBB122_3:                              # %"$2"
	movq	%rsi, %rax
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _ext;
	.scl	2;
	.type	32;
	.endef
	.globl	_ext                            # -- Begin function _ext
	.p2align	4, 0x90
_ext:                                   # @_ext
.seh_proc _ext
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rdi
	movq	(%rdi), %rax
	testb	$6, %al
	jne	.LBB123_4
# %bb.1:                                # %"$3.i"
	testb	$8, %al
	jne	.LBB123_2
# %bb.3:                                # %"$5.i"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB123_4
.LBB123_2:                              # %"$6.i"
	movq	(%rax), %rax
.LBB123_4:                              # %"$2.i"
	testb	$2, %al
	je	.LBB123_15
# %bb.5:                                # %evCnt.exit
	movq	%rax, %rcx
	shrq	$4, %rcx
	movl	%ecx, %edx
	negl	%edx
	testb	$8, %al
	movl	($ExtN)(%rip), %esi
	cmovel	%ecx, %edx
	movl	%edx, ($ExtN)(%rip)
	movq	8(%rdi), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rdi
	jmp	.LBB123_6
	.p2align	4, 0x90
.LBB123_12:                             # %"$11"
                                        #   in Loop: Header=BB123_6 Depth=1
	movq	(%rdi), %rcx
	movq	8(%rdi), %rdi
.LBB123_6:                              # %evCnt.exit
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %dil
	jne	.LBB123_7
# %bb.10:                               # %"$3"
                                        #   in Loop: Header=BB123_6 Depth=1
	testb	$15, %cl
	jne	.LBB123_12
# %bb.11:                               # %"$12"
                                        #   in Loop: Header=BB123_6 Depth=1
	callq	evList
	jmp	.LBB123_12
.LBB123_7:                              # %"$5"
	testb	$6, %cl
	jne	.LBB123_14
# %bb.8:                                # %"$7"
	testb	$8, %cl
	jne	.LBB123_9
# %bb.13:                               # %"$9"
	callq	evList
	movq	%rax, %rcx
	jmp	.LBB123_14
.LBB123_9:                              # %"$10"
	movq	(%rcx), %rcx
.LBB123_14:                             # %"$4"
	movl	%esi, ($ExtN)(%rip)
	movq	%rcx, %rax
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
.LBB123_15:                             # %"$2.i.i"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	cntErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _plio;
	.scl	2;
	.type	32;
	.endef
	.globl	_plio                           # -- Begin function _plio
	.p2align	4, 0x90
_plio:                                  # @_plio
.seh_proc _plio
# %bb.0:                                # %"$1"
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rdi
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rbx
	testb	$6, %sil
	jne	.LBB124_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB124_2
# %bb.3:                                # %"$5"
	movq	%rsi, %rcx
	callq	evList
	movq	%rax, %rsi
	jmp	.LBB124_4
.LBB124_2:                              # %"$6"
	movq	(%rsi), %rsi
.LBB124_4:                              # %"$2"
	testb	$6, %sil
	je	.LBB124_21
# %bb.5:                                # %"$8"
	testb	$2, %sil
	jne	.LBB124_6
# %bb.7:                                # %"$10"
	movq	-4(%rsi), %rsi
	jmp	.LBB124_8
.LBB124_6:                              # %"$9"
	shrq	$4, %rsi
.LBB124_8:                              # %"$11"
	movq	($Ptr)(%rip), %r15
	movq	($End)(%rip), %r14
	movl	($ExtN)(%rip), %eax
	movl	%eax, ($Extn)(%rip)
	movq	%rsi, ($Ptr)(%rip)
	testb	$15, %bl
	je	.LBB124_9
# %bb.19:                               # %"$13"
	leaq	getPlio(%rip), %rax
	movq	%rax, ($GetBin)(%rip)
	callq	binRead
	movq	%rax, %rcx
	testq	%rax, %rax
	leaq	SymTab+8(%rip), %rax
	cmovneq	%rcx, %rax
	jmp	.LBB124_20
.LBB124_9:                              # %"$12"
	movq	(%rbx), %rax
	testb	$6, %al
	jne	.LBB124_13
# %bb.10:                               # %"$3.i"
	testb	$8, %al
	jne	.LBB124_11
# %bb.12:                               # %"$5.i"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB124_13
.LBB124_11:                             # %"$6.i"
	movq	(%rax), %rax
.LBB124_13:                             # %"$2.i"
	testb	$2, %al
	je	.LBB124_22
# %bb.14:                               # %evCnt.exit
	movq	%rax, %rcx
	shrq	$4, %rcx
	movq	%rcx, %rdi
	negq	%rdi
	testb	$8, %al
	cmoveq	%rcx, %rdi
	movq	8(%rbx), %rax
	movq	(%rax), %rcx
	testb	$6, %cl
	jne	.LBB124_18
# %bb.15:                               # %"$16"
	testb	$8, %cl
	jne	.LBB124_16
# %bb.17:                               # %"$18"
	callq	evList
	movq	%rax, %rcx
	jmp	.LBB124_18
.LBB124_16:                             # %"$19"
	movq	(%rcx), %rcx
.LBB124_18:                             # %"$15"
	leaq	putPlio(%rip), %rax
	movq	%rax, ($PutBin)(%rip)
	addq	%rsi, %rdi
	movq	%rdi, ($End)(%rip)
	callq	binPrint
	movq	($Ptr)(%rip), %rax
	subq	%rsi, %rax
	shlq	$4, %rax
	orq	$2, %rax
.LBB124_20:                             # %"$14"
	movq	%r15, ($Ptr)(%rip)
	movq	%r14, ($End)(%rip)
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	retq
.LBB124_21:                             # %"$7"
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	numErr
.LBB124_22:                             # %"$2.i.i"
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	cntErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _rd;
	.scl	2;
	.type	32;
	.endef
	.globl	_rd                             # -- Begin function _rd
	.p2align	4, 0x90
_rd:                                    # @_rd
.seh_proc _rd
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	testb	$6, %sil
	jne	.LBB125_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB125_3
# %bb.2:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB125_4
.LBB125_3:                              # %"$6"
	movq	(%rsi), %rsi
.LBB125_4:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%rsi, (%r14)
	movq	%r14, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r14, env(%rip)
	movq	($InFile)(%rip), %rax
	leaq	SymTab+8(%rip), %rcx
	cmpl	$0, 8(%rax)
	js	.LBB125_21
# %bb.5:                                # %"$8"
	testb	$6, %sil
	je	.LBB125_20
# %bb.6:                                # %"$11"
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	$3, (%r15)
	leaq	16(%r15), %rbx
	movq	$2, 16(%r15)
	movq	%r14, 24(%r15)
	movq	%rbx, env(%rip)
	movq	%rsi, %rdi
	shrq	$4, %rdi
	je	.LBB125_21
# %bb.7:                                # %"$13"
	testb	$8, %sil
	jne	.LBB125_14
	.p2align	4, 0x90
.LBB125_8:                              # %"$25"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	callq	getBinary
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB125_23
# %bb.9:                                # %"$27"
                                        #   in Loop: Header=BB125_8 Depth=1
	movl	%eax, %esi
	shlq	$4, %rsi
	orq	$2, %rsi
	movq	(%rbx), %rcx
	subq	$32, %rsp
	movl	$4098, %edx                     # imm = 0x1002
	callq	mulu
	addq	$32, %rsp
	movq	%rax, (%rbx)
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	addu
	addq	$32, %rsp
	movq	%rax, (%rbx)
	decq	%rdi
	jne	.LBB125_8
# %bb.10:                               # %"$29"
	movq	%rax, %rcx
	testb	$2, %cl
	jne	.LBB125_21
# %bb.11:                               # %"$31"
	movq	%rcx, (%rbp)
	movq	4(%rcx), %rbx
	movq	%rbp, %rax
	testb	$2, %bl
	jne	.LBB125_25
# %bb.12:                               # %"$3.i16.preheader"
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rbp, %rdi
	movq	%rdi, %rax
	.p2align	4, 0x90
.LBB125_13:                             # %"$3.i16"
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -4(%rcx)
	cmovneq	%rdi, %rax
	movq	%rdx, %rdi
	movq	%rbx, %rcx
	leaq	4(%rbx), %rdx
	movq	4(%rbx), %rbx
	testb	$2, %bl
	je	.LBB125_13
	jmp	.LBB125_26
	.p2align	4, 0x90
.LBB125_14:                             # %"$17"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	callq	getBinary
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB125_23
# %bb.15:                               # %"$19"
                                        #   in Loop: Header=BB125_14 Depth=1
	subq	$32, %rsp
	movl	%eax, %ecx
	movq	%r15, %rdx
	callq	byteNum
	addq	$32, %rsp
	decq	%rdi
	jne	.LBB125_14
# %bb.16:                               # %"$21"
	movq	(%rbx), %rcx
	testb	$2, %cl
	jne	.LBB125_24
# %bb.17:                               # %"$23"
	movq	%rcx, (%rbp)
	movq	4(%rcx), %rbx
	movq	%rbp, %rax
	testb	$2, %bl
	jne	.LBB125_25
# %bb.18:                               # %"$3.i.preheader"
	leaq	4(%rcx), %rdx
	movq	%rbp, %rdi
	movq	%rdi, %rax
	.p2align	4, 0x90
.LBB125_19:                             # %"$3.i"
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -4(%rcx)
	cmovneq	%rdi, %rax
	movq	%rdx, %rdi
	movq	%rbx, %rcx
	leaq	4(%rbx), %rdx
	movq	4(%rbx), %rbx
	testb	$2, %bl
	je	.LBB125_19
	jmp	.LBB125_26
.LBB125_20:                             # %"$10"
	leaq	getBinary(%rip), %rax
	movq	%rax, ($GetBin)(%rip)
	movl	($ExtN)(%rip), %eax
	movl	%eax, ($Extn)(%rip)
	subq	$32, %rsp
	callq	binRead
	addq	$32, %rsp
	testq	%rax, %rax
	cmovneq	%rax, %rsi
	movq	%rsi, %rcx
.LBB125_21:                             # %"$7"
	movq	8(%r14), %rax
	movq	%rax, env(%rip)
	movq	%rcx, %rax
.LBB125_22:                             # %"$-1"
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB125_23:                             # %"$-1"
	movq	8(%r14), %rax
	movq	%rax, env(%rip)
	leaq	SymTab+8(%rip), %rax
	jmp	.LBB125_22
.LBB125_24:                             # %"$22"
	subq	$32, %rsp
	callq	twice
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB125_21
.LBB125_25:
	movq	%rax, %rdi
.LBB125_26:                             # %"$4.i24"
	cmpq	$2, %rbx
	jne	.LBB125_34
# %bb.27:                               # %"$7.i26"
	movq	-4(%rcx), %rcx
	testq	%rcx, %rcx
	je	.LBB125_28
# %bb.31:                               # %"$11.i"
	movq	%rcx, %rax
	shrq	$60, %rax
	jne	.LBB125_34
# %bb.32:                               # %"$12.i"
	shlq	$4, %rcx
	orq	$2, %rcx
	movq	%rcx, (%rdi)
	movq	(%rbp), %rcx
	jmp	.LBB125_21
.LBB125_28:                             # %"$10.i31"
	movq	(%rax), %rdx
	movq	-4(%rdx), %rbx
	movq	%rbx, %rcx
	shrq	$60, %rcx
	jne	.LBB125_29
# %bb.33:                               # %"$14.i"
	shlq	$4, %rbx
	orq	$2, %rbx
	movq	%rbx, (%rax)
.LBB125_34:                             # %zapZero.exit
	movq	(%rbp), %rcx
	jmp	.LBB125_21
.LBB125_29:                             # %"$15.i"
	movq	$2, 4(%rdx)
	movq	(%rbp), %rcx
	jmp	.LBB125_21
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _pr;
	.scl	2;
	.type	32;
	.endef
	.globl	_pr                             # -- Begin function _pr
	.p2align	4, 0x90
_pr:                                    # @_pr
.seh_proc _pr
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	8(%rcx), %rdi
	leaq	_putStdout(%rip), %rbx
	jmp	.LBB126_1
.LBB126_4:                              # %"$6"
                                        #   in Loop: Header=BB126_1 Depth=1
	movq	%rsi, %rcx
	callq	evList
	movq	%rax, %rsi
	.p2align	4, 0x90
.LBB126_5:                              # %"$3"
                                        #   in Loop: Header=BB126_1 Depth=1
	movl	($ExtN)(%rip), %eax
	movl	%eax, ($Extn)(%rip)
	movq	%rbx, ($PutBin)(%rip)
	movq	%rsi, %rcx
	callq	binPrint
	testb	$15, %dil
	jne	.LBB126_6
.LBB126_1:                              # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rsi
	movq	8(%rdi), %rdi
	testb	$6, %sil
	jne	.LBB126_5
# %bb.2:                                # %"$4"
                                        #   in Loop: Header=BB126_1 Depth=1
	testb	$8, %sil
	je	.LBB126_4
# %bb.3:                                # %"$7"
                                        #   in Loop: Header=BB126_1 Depth=1
	movq	(%rsi), %rsi
	jmp	.LBB126_5
.LBB126_6:                              # %"$9"
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _wr;
	.scl	2;
	.type	32;
	.endef
	.globl	_wr                             # -- Begin function _wr
	.p2align	4, 0x90
_wr:                                    # @_wr
.seh_proc _wr
# %bb.0:                                # %"$1"
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %r14
	jmp	.LBB127_1
	.p2align	4, 0x90
.LBB127_11:                             # %_putStdout.exit
                                        #   in Loop: Header=BB127_1 Depth=1
	testb	$15, %r14b
	jne	.LBB127_12
.LBB127_1:                              # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r14), %rdi
	movq	8(%r14), %r14
	testb	$6, %dil
	jne	.LBB127_5
# %bb.2:                                # %"$4"
                                        #   in Loop: Header=BB127_1 Depth=1
	testb	$8, %dil
	jne	.LBB127_3
# %bb.4:                                # %"$6"
                                        #   in Loop: Header=BB127_1 Depth=1
	movq	%rdi, %rcx
	callq	evList
	movq	%rax, %rdi
	jmp	.LBB127_5
.LBB127_3:                              # %"$7"
                                        #   in Loop: Header=BB127_1 Depth=1
	movq	(%rdi), %rdi
	.p2align	4, 0x90
.LBB127_5:                              # %"$3"
                                        #   in Loop: Header=BB127_1 Depth=1
	movq	($OutFile)(%rip), %rbx
	testq	%rbx, %rbx
	je	.LBB127_11
# %bb.6:                                # %"$2.i"
                                        #   in Loop: Header=BB127_1 Depth=1
	movq	%rdi, %rsi
	shrq	$4, %rsi
	movl	4(%rbx), %eax
	cmpl	$4096, %eax                     # imm = 0x1000
	jne	.LBB127_8
# %bb.7:                                # %"$4.i"
                                        #   in Loop: Header=BB127_1 Depth=1
	movl	$0, 4(%rbx)
	movl	(%rbx), %ecx
	leaq	8(%rbx), %rdx
	movl	$4096, %r8d                     # imm = 0x1000
	callq	wrBytes
	xorl	%eax, %eax
.LBB127_8:                              # %"$5.i"
                                        #   in Loop: Header=BB127_1 Depth=1
	movslq	%eax, %r8
	movb	%sil, 8(%rbx,%r8)
	incl	%r8d
	movl	%r8d, 4(%rbx)
	cmpb	$10, %sil
	jne	.LBB127_11
# %bb.9:                                # %"$7.i"
                                        #   in Loop: Header=BB127_1 Depth=1
	cmpb	$1, 4104(%rbx)
	jne	.LBB127_11
# %bb.10:                               # %"$8.i"
                                        #   in Loop: Header=BB127_1 Depth=1
	leaq	8(%rbx), %rdx
	movl	$0, 4(%rbx)
	movl	(%rbx), %ecx
                                        # kill: def $r8d killed $r8d killed $r8
	callq	wrBytes
	jmp	.LBB127_11
.LBB127_12:                             # %"$9"
	movq	%rdi, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _any;
	.scl	2;
	.type	32;
	.endef
	.globl	_any                            # -- Begin function _any
	.p2align	4, 0x90
_any:                                   # @_any
.seh_proc _any
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$48, %rsp
	.seh_stackalloc 48
	leaq	48(%rsp), %rbp
	.seh_setframe %rbp, 48
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rcx
	testb	$6, %cl
	jne	.LBB128_4
# %bb.1:                                # %"$3.i"
	testb	$8, %cl
	jne	.LBB128_2
# %bb.3:                                # %"$5.i"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB128_4
.LBB128_2:                              # %"$6.i"
	movq	(%rcx), %rcx
.LBB128_4:                              # %evSym.exit
	subq	$32, %rsp
	callq	xSym
	addq	$32, %rsp
	movq	%rax, %rcx
	movq	env(%rip), %rdx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rcx, (%rsi)
	movq	%rsi, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	%rsi, env(%rip)
	movq	-8(%rcx), %rax
	testb	$8, %al
	jne	.LBB128_5
	.p2align	4, 0x90
# %bb.7:                                # %"$6"
	testb	$6, %al
	jne	.LBB128_8
.LBB128_6:                              # %"$6"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB128_6
.LBB128_8:                              # %"$7"
	movl	($Chr)(%rip), %r14d
	movq	($Get)(%rip), %rbx
	movq	env+80(%rip), %rdi
	movl	$0, ($Chr)(%rip)
	leaq	getParse(%rip), %rcx
	movq	%rcx, ($Get)(%rip)
	movq	%rax, -48(%rbp)
	movq	%rsi, -40(%rbp)
	leaq	-48(%rbp), %rcx
	movq	%rcx, env(%rip)
	movq	$0, -32(%rbp)
	movq	%rax, -24(%rbp)
	movq	$32, -16(%rbp)
	leaq	-32(%rbp), %rcx
	movq	%rcx, env+80(%rip)
	cmpq	$2, %rax
	je	.LBB128_14
# %bb.9:                                # %"$5.i.i.i"
	testb	$2, %al
	jne	.LBB128_10
# %bb.11:                               # %"$7.i.i.i"
	movq	-4(%rax), %rdx
	movq	%rdx, -32(%rbp)
	movq	4(%rax), %rcx
	movq	%rdx, %rax
	jmp	.LBB128_12
.LBB128_5:
	leaq	SymTab+8(%rip), %rax
	jmp	.LBB128_16
.LBB128_10:                             # %"$8.i.i.i"
	shrq	$4, %rax
	movl	$2, %ecx
.LBB128_12:                             # %symByte.exit.i.i
	movq	%rcx, -24(%rbp)
	movq	%rax, %rcx
	shrq	$8, %rcx
	movq	%rcx, -32(%rbp)
	testb	%al, %al
	je	.LBB128_14
# %bb.13:
	movzbl	%al, %eax
	jmp	.LBB128_15
.LBB128_14:                             # %"$3.i.i"
	movq	$0, -16(%rbp)
	movl	$32, %eax
.LBB128_15:                             # %parse.exit
	movl	%eax, ($Chr)(%rip)
	subq	$32, %rsp
	movb	$1, %cl
	callq	read0
	addq	$32, %rsp
	movq	%rdi, env+80(%rip)
	movq	%rbx, ($Get)(%rip)
	movl	%r14d, ($Chr)(%rip)
	movq	-40(%rbp), %rcx
	movq	%rcx, env(%rip)
.LBB128_16:                             # %"$4"
	movq	8(%rsi), %rcx
	movq	%rcx, env(%rip)
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _sym;
	.scl	2;
	.type	32;
	.endef
	.globl	_sym                            # -- Begin function _sym
	.p2align	4, 0x90
_sym:                                   # @_sym
.seh_proc _sym
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rcx
	testb	$6, %cl
	jne	.LBB129_4
# %bb.1:                                # %"$3"
	testb	$8, %cl
	jne	.LBB129_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB129_4
.LBB129_2:                              # %"$6"
	movq	(%rcx), %rcx
.LBB129_4:                              # %"$2"
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	$4, (%rax)
	leaq	16(%rax), %rdx
	movq	$2, 16(%rax)
	movq	($StrP)(%rip), %rsi
	movq	%rsi, 40(%rax)
	movq	%rax, ($StrP)(%rip)
	movq	env(%rip), %rsi
	movq	%rsi, 24(%rax)
	movq	%rdx, env(%rip)
	movq	($Put)(%rip), %rdx
	movq	%rdx, 32(%rax)
	leaq	putString(%rip), %rax
	movq	%rax, ($Put)(%rip)
	subq	$32, %rsp
	callq	print
	addq	$32, %rsp
	movq	($StrP)(%rip), %rsi
	movq	32(%rsi), %rax
	movq	%rax, ($Put)(%rip)
	movq	40(%rsi), %rax
	movq	%rax, ($StrP)(%rip)
	movq	16(%rsi), %rcx
	cmpq	$2, %rcx
	jne	.LBB129_6
# %bb.5:
	leaq	SymTab+8(%rip), %rax
	jmp	.LBB129_7
.LBB129_6:                              # %"$3.i.i"
	subq	$32, %rsp
	xorl	%edx, %edx
	callq	consSym
	addq	$32, %rsp
.LBB129_7:                              # %endString.exit
	movq	24(%rsi), %rcx
	movq	%rcx, env(%rip)
	leaq	8(%rbp), %rsp
	popq	%rsi
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _str;
	.scl	2;
	.type	32;
	.endef
	.globl	_str                            # -- Begin function _str
	.p2align	4, 0x90
_str:                                   # @_str
.seh_proc _str
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$48, %rsp
	.seh_stackalloc 48
	leaq	48(%rsp), %rbp
	.seh_setframe %rbp, 48
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rdi
	movq	(%rdi), %rdx
	testb	$6, %dl
	jne	.LBB130_4
# %bb.1:                                # %"$3"
	testb	$8, %dl
	jne	.LBB130_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rdx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdx
	jmp	.LBB130_4
.LBB130_2:                              # %"$6"
	movq	(%rdx), %rdx
.LBB130_4:                              # %"$2"
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rdx
	je	.LBB130_28
# %bb.5:                                # %"$8"
	testb	$6, %dl
	jne	.LBB130_29
# %bb.6:                                # %"$10"
	testb	$15, %dl
	je	.LBB130_7
# %bb.14:                               # %"$12"
	movq	-8(%rdx), %rsi
	testb	$8, %sil
	jne	.LBB130_28
# %bb.15:                               # %"$17"
	movq	8(%rdi), %rcx
	testb	$15, %cl
	je	.LBB130_16
	.p2align	4, 0x90
# %bb.18:                               # %"$22"
	testb	$6, %sil
	jne	.LBB130_19
.LBB130_17:                             # %"$22"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rsi), %rsi
	testb	$6, %sil
	je	.LBB130_17
.LBB130_19:                             # %"$23"
	movl	($Chr)(%rip), %r14d
	movq	($Get)(%rip), %rbx
	movq	env+80(%rip), %rdi
	movl	$0, ($Chr)(%rip)
	leaq	getParse(%rip), %rax
	movq	%rax, ($Get)(%rip)
	movq	env(%rip), %rax
	movq	%rsi, -16(%rbp)
	movq	%rax, -8(%rbp)
	leaq	-16(%rbp), %rax
	movq	%rax, env(%rip)
	movq	$0, -48(%rbp)
	movq	%rsi, -40(%rbp)
	movq	$23818, -32(%rbp)               # imm = 0x5D0A
	leaq	-48(%rbp), %rax
	movq	%rax, env+80(%rip)
	subq	$32, %rsp
	callq	rdList
	addq	$32, %rsp
	movq	%rdi, env+80(%rip)
	movq	%rbx, ($Get)(%rip)
	movl	%r14d, ($Chr)(%rip)
	movq	-8(%rbp), %rcx
	jmp	.LBB130_27
.LBB130_7:                              # %"$13"
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	$4, (%rax)
	leaq	16(%rax), %rcx
	movq	$2, 16(%rax)
	movq	($StrP)(%rip), %rdi
	movq	%rdi, 40(%rax)
	movq	%rax, ($StrP)(%rip)
	movq	env(%rip), %rdi
	movq	%rdi, 24(%rax)
	movq	%rcx, env(%rip)
	movq	($Put)(%rip), %rcx
	movq	%rcx, 32(%rax)
	leaq	putString(%rip), %rax
	movq	%rax, ($Put)(%rip)
	movq	(%rdx), %rcx
	movq	8(%rdx), %rsi
	.p2align	4, 0x90
.LBB130_9:                              # %"$15"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	callq	print
	addq	$32, %rsp
	testb	$15, %sil
	jne	.LBB130_10
# %bb.8:                                # %"$15"
                                        #   in Loop: Header=BB130_9 Depth=1
	subq	$32, %rsp
	movb	$32, %cl
	callq	*($Put)(%rip)
	addq	$32, %rsp
	movq	(%rsi), %rcx
	movq	8(%rsi), %rsi
	jmp	.LBB130_9
.LBB130_10:                             # %"$16"
	movq	($StrP)(%rip), %rsi
	movq	32(%rsi), %rax
	movq	%rax, ($Put)(%rip)
	movq	40(%rsi), %rax
	movq	%rax, ($StrP)(%rip)
	movq	16(%rsi), %rcx
	cmpq	$2, %rcx
	jne	.LBB130_12
# %bb.11:
	leaq	SymTab+8(%rip), %rax
	movq	24(%rsi), %rcx
	jmp	.LBB130_27
.LBB130_12:                             # %"$3.i.i"
	subq	$32, %rsp
	xorl	%edx, %edx
	callq	consSym
	addq	$32, %rsp
	movq	24(%rsi), %rcx
	jmp	.LBB130_27
.LBB130_16:                             # %"$19"
	movq	env(%rip), %rdx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rsi, (%rdi)
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	%rdi, env(%rip)
	testb	$6, %sil
	jne	.LBB130_22
	.p2align	4, 0x90
.LBB130_20:                             # %"$25"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rsi), %rsi
	testb	$6, %sil
	je	.LBB130_20
.LBB130_22:                             # %"$26"
	movq	(%rcx), %rcx
	testb	$6, %cl
	jne	.LBB130_26
# %bb.23:                               # %"$3.i"
	testb	$8, %cl
	jne	.LBB130_24
# %bb.25:                               # %"$5.i"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB130_26
.LBB130_24:                             # %"$6.i"
	movq	(%rcx), %rcx
.LBB130_26:                             # %evSym.exit
	subq	$32, %rsp
	callq	xSym
	addq	$32, %rsp
	movq	%rax, %r9
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%r9, (%rax)
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%rcx, (%rdx)
	movq	%rax, env(%rip)
	subq	$32, %rsp
	movq	%rsi, %rcx
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	callq	parse
	addq	$32, %rsp
	movq	8(%rdi), %rcx
.LBB130_27:                             # %"$7"
	movq	%rcx, env(%rip)
.LBB130_28:                             # %"$7"
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	retq
.LBB130_29:                             # %"$11"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	argErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _load;
	.scl	2;
	.type	32;
	.endef
	.globl	_load                           # -- Begin function _load
	.p2align	4, 0x90
_load:                                  # @_load
.seh_proc _load
# %bb.0:                                # %"$1"
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rbx
	leaq	SymTab+280(%rip), %rdi
	leaq	SymTab+8(%rip), %r15
	leaq	.L$48(%rip), %r14
	jmp	.LBB131_1
	.p2align	4, 0x90
.LBB131_11:                             # %"$9"
                                        #   in Loop: Header=BB131_1 Depth=1
	movq	%rsi, %rcx
	movq	%r14, %rdx
	callq	repl
.LBB131_12:                             # %"$10"
                                        #   in Loop: Header=BB131_1 Depth=1
	testb	$15, %bl
	jne	.LBB131_13
.LBB131_1:                              # %"$2"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB131_8 Depth 2
	movq	(%rbx), %r8
	movq	8(%rbx), %rbx
	testb	$6, %r8b
	jne	.LBB131_5
# %bb.2:                                # %"$4"
                                        #   in Loop: Header=BB131_1 Depth=1
	testb	$8, %r8b
	jne	.LBB131_3
# %bb.4:                                # %"$6"
                                        #   in Loop: Header=BB131_1 Depth=1
	movq	%r8, %rcx
	callq	evList
	movq	%rax, %r8
	.p2align	4, 0x90
.LBB131_5:                              # %"$3"
                                        #   in Loop: Header=BB131_1 Depth=1
	cmpq	%rdi, %r8
	jne	.LBB131_11
.LBB131_6:                              # %"$8"
                                        #   in Loop: Header=BB131_1 Depth=1
	movq	($AV)(%rip), %rdx
	movq	(%rdx), %rcx
	testq	%rcx, %rcx
	movq	%r15, %rax
	je	.LBB131_12
# %bb.7:                                # %"$4.i.preheader"
                                        #   in Loop: Header=BB131_1 Depth=1
	movq	%r15, %rax
	jmp	.LBB131_8
	.p2align	4, 0x90
.LBB131_10:                             # %"$7.i"
                                        #   in Loop: Header=BB131_8 Depth=2
	addq	$8, %rdx
	movq	%rdx, ($AV)(%rip)
	callq	mkStr
	movq	%rsi, %rcx
	xorl	%edx, %edx
	movq	%rax, %r8
	callq	repl
	movq	($AV)(%rip), %rdx
	movq	(%rdx), %rcx
	testq	%rcx, %rcx
	je	.LBB131_12
.LBB131_8:                              # %"$4.i"
                                        #   Parent Loop BB131_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpb	$45, (%rcx)
	jne	.LBB131_10
# %bb.9:                                # %"$6.i"
                                        #   in Loop: Header=BB131_8 Depth=2
	cmpb	$0, 1(%rcx)
	jne	.LBB131_10
	jmp	.LBB131_12
.LBB131_3:                              # %"$7"
                                        #   in Loop: Header=BB131_1 Depth=1
	movq	(%r8), %r8
	cmpq	%rdi, %r8
	jne	.LBB131_11
	jmp	.LBB131_6
.LBB131_13:                             # %"$12"
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _extQ;
	.scl	2;
	.type	32;
	.endef
	.globl	_extQ                           # -- Begin function _extQ
	.p2align	4, 0x90
_extQ:                                  # @_extQ
.seh_proc _extQ
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	testb	$6, %sil
	jne	.LBB132_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB132_2
# %bb.3:                                # %"$5"
	movq	%rsi, %rcx
	callq	evList
	movq	%rax, %rsi
	jmp	.LBB132_4
.LBB132_2:                              # %"$6"
	movq	(%rsi), %rsi
.LBB132_4:                              # %"$2"
	movl	%esi, %ecx
	andl	$14, %ecx
	leaq	SymTab+8(%rip), %rax
	cmpl	$8, %ecx
	jne	.LBB132_7
# %bb.5:                                # %"$8"
	testb	$8, -8(%rsi)
	je	.LBB132_7
# %bb.6:                                # %"$9"
	movq	%rsi, %rcx
	callq	isLife
	movl	%eax, %ecx
	leaq	SymTab+8(%rip), %rax
	testb	$1, %cl
	cmovneq	%rsi, %rax
.LBB132_7:                              # %"$7"
	addq	$32, %rsp
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _rollback;
	.scl	2;
	.type	32;
	.endef
	.globl	_rollback                       # -- Begin function _rollback
	.p2align	4, 0x90
_rollback:                              # @_rollback
.seh_proc _rollback
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movl	($DBs)(%rip), %ebx
	testl	%ebx, %ebx
	je	.LBB133_1
.LBB133_3:                              # %"$5"
	movq	($Extern)(%rip), %rax
	xorl	%edx, %edx
	movabsq	$4611686018427387903, %r8       # imm = 0x3FFFFFFFFFFFFFFF
	leaq	SymTab+8(%rip), %r9
.LBB133_4:                              # %"$7"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB133_7 Depth 2
                                        #     Child Loop BB133_8 Depth 2
                                        #       Child Loop BB133_10 Depth 3
                                        #       Child Loop BB133_15 Depth 3
	movq	8(%rax), %rsi
	movq	8(%rsi), %rcx
	testb	$15, %cl
	je	.LBB133_6
# %bb.5:                                #   in Loop: Header=BB133_4 Depth=1
	movq	%rdx, %rdi
	jmp	.LBB133_8
	.p2align	4, 0x90
.LBB133_6:                              # %"$9.preheader"
                                        #   in Loop: Header=BB133_4 Depth=1
	addq	$8, %rsi
	.p2align	4, 0x90
.LBB133_7:                              # %"$9"
                                        #   Parent Loop BB133_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rax, %rdi
	movq	%rcx, %rax
	movq	%rdx, (%rsi)
	movq	8(%rcx), %rsi
	movq	8(%rsi), %rcx
	addq	$8, %rsi
	testb	$15, %cl
	movq	%rdi, %rdx
	je	.LBB133_7
	jmp	.LBB133_8
	.p2align	4, 0x90
.LBB133_16:                             # %"$25"
                                        #   in Loop: Header=BB133_8 Depth=2
	movq	8(%rax), %rcx
	movq	8(%rcx), %rdi
	movq	%rdx, 8(%rcx)
.LBB133_8:                              # %"$11.preheader"
                                        #   Parent Loop BB133_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB133_10 Depth 3
                                        #       Child Loop BB133_15 Depth 3
	movq	%rax, %rdx
	movq	(%rax), %rcx
	movq	-8(%rcx), %rax
	testb	$6, %al
	jne	.LBB133_12
# %bb.9:                                # %"$12"
                                        #   in Loop: Header=BB133_8 Depth=2
	andq	$-9, %rax
	.p2align	4, 0x90
.LBB133_10:                             # %"$14"
                                        #   Parent Loop BB133_4 Depth=1
                                        #     Parent Loop BB133_8 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB133_10
# %bb.11:                               # %"$16"
                                        #   in Loop: Header=BB133_8 Depth=2
	orq	$8, %rax
.LBB133_12:                             # %"$13"
                                        #   in Loop: Header=BB133_8 Depth=2
	andq	%r8, %rax
	movq	%rax, -8(%rcx)
	movq	%r9, (%rcx)
	movq	8(%rdx), %rcx
	movq	(%rcx), %rax
	testb	$15, %al
	je	.LBB133_30
# %bb.13:                               # %"$20.preheader"
                                        #   in Loop: Header=BB133_8 Depth=2
	testq	%rdi, %rdi
	movq	%rdi, %rax
	je	.LBB133_18
	.p2align	4, 0x90
.LBB133_15:                             # %"$22"
                                        #   Parent Loop BB133_4 Depth=1
                                        #     Parent Loop BB133_8 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	testb	$8, %al
	je	.LBB133_16
# %bb.17:                               # %"$23"
                                        #   in Loop: Header=BB133_15 Depth=3
	andq	$-9, %rax
	movq	8(%rax), %rcx
	movq	(%rcx), %rdi
	movq	%rdx, (%rcx)
	testq	%rdi, %rdi
	movq	%rax, %rdx
	movq	%rdi, %rax
	jne	.LBB133_15
	jmp	.LBB133_18
.LBB133_30:                             # %"$19"
                                        #   in Loop: Header=BB133_4 Depth=1
	movq	%rdi, (%rcx)
	orq	$8, %rdx
	jmp	.LBB133_4
.LBB133_18:                             # %"$-1"
	movq	SymTab+520(%rip), %rax
	testb	$15, %al
	jne	.LBB133_20
# %bb.19:                               # %"$27"
	movq	%r9, (%rax)
.LBB133_20:                             # %"$28"
	testl	%ebx, %ebx
	je	.LBB133_28
# %bb.21:                               # %"$28"
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, SymTab+424(%rip)
	je	.LBB133_28
# %bb.22:                               # %"$2.i"
	decl	%ebx
	je	.LBB133_27
# %bb.23:                               # %"$7.preheader.i"
	movq	($DbFiles)(%rip), %rsi
	addq	$82, %rsi
	jmp	.LBB133_24
	.p2align	4, 0x90
.LBB133_26:                             # %"$10.i"
                                        #   in Loop: Header=BB133_24 Depth=1
	addq	$42, %rsi
	decl	%ebx
	je	.LBB133_27
.LBB133_24:                             # %"$7.i"
                                        # =>This Inner Loop Header: Depth=1
	cmpb	$1, (%rsi)
	jne	.LBB133_26
# %bb.25:                               # %"$9.i"
                                        #   in Loop: Header=BB133_24 Depth=1
	movl	-40(%rsi), %ecx
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	callq	unLock
	movb	$0, (%rsi)
	jmp	.LBB133_26
.LBB133_27:                             # %"$8.i"
	movq	$2, SymTab+424(%rip)
	movq	($DbFiles)(%rip), %rax
	movl	(%rax), %ecx
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	callq	unLock
.LBB133_28:                             # %"$30"
	callq	unsync
	leaq	SymTab+280(%rip), %rax
	jmp	.LBB133_29
.LBB133_1:                              # %"$3"
	testb	$15, SymTab+536(%rip)
	je	.LBB133_3
# %bb.2:
	leaq	SymTab+8(%rip), %rax
.LBB133_29:                             # %"$6"
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _extern;
	.scl	2;
	.type	32;
	.endef
	.globl	_extern                         # -- Begin function _extern
	.p2align	4, 0x90
_extern:                                # @_extern
.seh_proc _extern
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB134_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB134_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB134_4
.LBB134_2:                              # %"$6"
	movq	(%rax), %rax
.LBB134_4:                              # %"$2"
	movl	%eax, %ecx
	andl	$14, %ecx
	cmpl	$8, %ecx
	jne	.LBB134_20
# %bb.5:                                # %"$8"
	movq	-8(%rax), %rax
	movq	%rax, %rcx
	andq	$-9, %rcx
	testb	$6, %al
	jne	.LBB134_7
	.p2align	4, 0x90
.LBB134_6:                              # %"$10"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rcx
	testb	$6, %cl
	je	.LBB134_6
.LBB134_7:                              # %"$11"
	leaq	SymTab+8(%rip), %r14
	cmpq	$2, %rcx
	je	.LBB134_19
# %bb.8:                                # %"$13"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	$0, (%rdi)
	movq	%rcx, 8(%rdi)
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	symChar
	addq	$32, %rsp
	cmpl	$123, %eax
	jne	.LBB134_10
# %bb.9:                                # %"$14"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	symChar
	addq	$32, %rsp
.LBB134_10:                             # %"$15"
	xorl	%ebx, %ebx
	cmpl	$64, %eax
	jl	.LBB134_14
# %bb.11:                               # %"$17.preheader"
	xorl	%ebx, %ebx
	.p2align	4, 0x90
.LBB134_12:                             # %"$17"
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$79, %eax
	jg	.LBB134_19
# %bb.13:                               # %"$20"
                                        #   in Loop: Header=BB134_12 Depth=1
	shll	$4, %ebx
	addl	$-64, %eax
	orl	%eax, %ebx
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	symChar
	addq	$32, %rsp
	cmpl	$63, %eax
	jg	.LBB134_12
.LBB134_14:                             # %"$21.preheader"
	xorl	%esi, %esi
	.p2align	4, 0x90
.LBB134_15:                             # %"$21"
                                        # =>This Inner Loop Header: Depth=1
	movl	%eax, %ecx
	andl	$-8, %ecx
	cmpl	$48, %ecx
	jne	.LBB134_19
# %bb.16:                               # %"$25"
                                        #   in Loop: Header=BB134_15 Depth=1
	movq	%rsi, %rcx
	shlq	$3, %rcx
	addl	$-48, %eax
	movslq	%eax, %rsi
	orq	%rcx, %rsi
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	symChar
	addq	$32, %rsp
	cmpl	$125, %eax
	je	.LBB134_18
# %bb.17:                               # %"$25"
                                        #   in Loop: Header=BB134_15 Depth=1
	testl	%eax, %eax
	jne	.LBB134_15
.LBB134_18:                             # %"$29"
	movl	%esi, %eax
	andl	$1048575, %eax                  # imm = 0xFFFFF
	movzbl	%bl, %ecx
	shll	$20, %ecx
	movl	%esi, %edx
	andl	$-1048576, %edx                 # imm = 0xFFF00000
	shlq	$8, %rdx
	shrl	$8, %ebx
	shlq	$40, %rbx
	orq	%rcx, %rbx
	orq	%rax, %rbx
	shlq	$16, %rsi
	movabsq	$1152640029630136320, %rcx      # imm = 0xFFF000000000000
	andq	%rsi, %rcx
	orq	%rbx, %rcx
	orq	%rdx, %rcx
	shlq	$4, %rcx
	orq	$2, %rcx
	subq	$32, %rsp
	callq	extern
	addq	$32, %rsp
	movq	%rax, %rdi
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	isLife
	addq	$32, %rsp
	leaq	SymTab+8(%rip), %r14
	testb	$1, %al
	cmovneq	%rdi, %r14
.LBB134_19:                             # %"$12"
	movq	%r14, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	retq
.LBB134_20:                             # %"$7"
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	symErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _pool;
	.scl	2;
	.type	32;
	.endef
	.globl	_pool                           # -- Begin function _pool
	.p2align	4, 0x90
_pool:                                  # @_pool
.seh_proc _pool
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$72, %rsp
	.seh_stackalloc 72
	leaq	64(%rsp), %rbp
	.seh_setframe %rbp, 64
	.seh_endprologue
	movq	%rcx, %r15
	movq	8(%rcx), %rsi
	movq	(%rsi), %rcx
	testb	$6, %cl
	jne	.LBB135_4
# %bb.1:                                # %"$3.i"
	testb	$8, %cl
	jne	.LBB135_3
# %bb.2:                                # %"$5.i"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB135_4
.LBB135_3:                              # %"$6.i"
	movq	(%rcx), %rcx
.LBB135_4:                              # %evSym.exit
	subq	$32, %rsp
	callq	xSym
	addq	$32, %rsp
	movq	%rax, %r12
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r13
	movq	%r12, (%r13)
	movq	%r13, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r13, env(%rip)
	movq	8(%rsi), %rsi
	movq	(%rsi), %rdi
	testb	$6, %dil
	jne	.LBB135_8
# %bb.5:                                # %"$3.i24"
	testb	$8, %dil
	jne	.LBB135_7
# %bb.6:                                # %"$5.i26"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdi
	jmp	.LBB135_8
.LBB135_7:                              # %"$6.i25"
	movq	(%rdi), %rdi
.LBB135_8:                              # %"$2.i"
	leaq	SymTab+8(%rip), %r14
	cmpq	%r14, %rdi
	je	.LBB135_10
# %bb.9:                                # %"$2.i"
	movl	%edi, %eax
	andl	$15, %eax
	testq	%rax, %rax
	jne	.LBB135_116
.LBB135_10:                             # %evLst.exit
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rdi, (%rax)
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%rcx, (%rdx)
	movq	%rax, env(%rip)
	movq	8(%rsi), %rsi
	movq	(%rsi), %rcx
	testb	$6, %cl
	jne	.LBB135_14
# %bb.11:                               # %"$3.i29"
	testb	$8, %cl
	jne	.LBB135_13
# %bb.12:                               # %"$5.i31"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB135_14
.LBB135_13:                             # %"$6.i30"
	movq	(%rcx), %rcx
.LBB135_14:                             # %evSym.exit33
	subq	$32, %rsp
	callq	xSym
	addq	$32, %rsp
	movq	%rax, %rbx
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rbx, (%rax)
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%rcx, (%rdx)
	movq	%rax, env(%rip)
	movq	8(%rsi), %rax
	movq	(%rax), %rcx
	testb	$6, %cl
	movq	%r15, -8(%rbp)                  # 8-byte Spill
	movq	%rbx, -40(%rbp)                 # 8-byte Spill
	movq	%rdi, (%rbp)                    # 8-byte Spill
	jne	.LBB135_18
# %bb.15:                               # %"$3.i36"
	testb	$8, %cl
	jne	.LBB135_17
# %bb.16:                               # %"$5.i38"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB135_18
.LBB135_17:                             # %"$6.i37"
	movq	(%rcx), %rcx
.LBB135_18:                             # %evSym.exit40
	subq	$32, %rsp
	callq	xSym
	addq	$32, %rsp
	movq	%rax, %r15
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%r15, (%rax)
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%rcx, (%rdx)
	movq	%rax, env(%rip)
	movq	$2, SymTab+424(%rip)
	movl	($DBs)(%rip), %esi
	testl	%esi, %esi
	je	.LBB135_25
# %bb.19:                               # %"$2"
	subq	$32, %rsp
	callq	_rollback
	addq	$32, %rsp
	movq	($DbFiles)(%rip), %rdi
	.p2align	4, 0x90
.LBB135_20:                             # %"$4"
                                        # =>This Inner Loop Header: Depth=1
	movl	(%rdi), %ecx
	subq	$32, %rsp
	callq	close
	addq	$32, %rsp
	movq	16(%rdi), %rcx
	subq	$32, %rsp
	callq	free
	addq	$32, %rsp
	addq	$42, %rdi
	decl	%esi
	jne	.LBB135_20
# %bb.21:                               # %"$6"
	movl	$0, ($DBs)(%rip)
	movq	($DbJnl)(%rip), %rcx
	testq	%rcx, %rcx
	je	.LBB135_23
# %bb.22:                               # %"$7"
	subq	$32, %rsp
	callq	fclose
	addq	$32, %rsp
	movq	$0, ($DbJnl)(%rip)
.LBB135_23:                             # %"$8"
	movq	($DbLog)(%rip), %rcx
	testq	%rcx, %rcx
	je	.LBB135_25
# %bb.24:                               # %"$9"
	subq	$32, %rsp
	callq	fclose
	addq	$32, %rsp
	movq	$0, ($DbLog)(%rip)
.LBB135_25:                             # %"$3"
	cmpq	%r14, %r12
	je	.LBB135_111
# %bb.26:                               # %"$3.i42"
	movq	-8(%r12), %rcx
	testb	$8, %cl
	jne	.LBB135_118
# %bb.27:                               # %"$7.preheader.i"
	testb	$6, %cl
	movq	%r12, -16(%rbp)                 # 8-byte Spill
	jne	.LBB135_29
	.p2align	4, 0x90
.LBB135_28:                             # %"$8.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rcx
	testb	$6, %cl
	je	.LBB135_28
.LBB135_29:                             # %xName.exit
	movl	$1, %edi
	testb	$4, %cl
	movq	%rcx, %rax
	je	.LBB135_32
# %bb.30:                               # %"$3.i.i.preheader"
	movl	$1, %edi
	movq	%rcx, %rax
	.p2align	4, 0x90
.LBB135_31:                             # %"$3.i.i"
                                        # =>This Inner Loop Header: Depth=1
	addq	$8, %rdi
	movq	4(%rax), %rax
	testb	$4, %al
	jne	.LBB135_31
.LBB135_32:                             # %"$4.i.i"
	shrq	$4, %rax
	je	.LBB135_34
	.p2align	4, 0x90
.LBB135_33:                             # %"$6.i.i"
                                        # =>This Inner Loop Header: Depth=1
	incq	%rdi
	shrq	$8, %rax
	jne	.LBB135_33
.LBB135_34:                             # %bufSize.exit.i
	testb	$2, %cl
	jne	.LBB135_36
# %bb.35:                               # %"$3.i48"
	movq	-4(%rcx), %rdx
	movq	%rdx, %rax
	shrq	$8, %rax
	cmpb	$126, %dl
	jne	.LBB135_37
	jmp	.LBB135_42
.LBB135_36:                             # %"$2.i47"
	movq	%rcx, %rdx
	shrq	$4, %rdx
	movq	%rcx, %rax
	shrq	$12, %rax
	cmpb	$126, %dl
	je	.LBB135_42
.LBB135_37:                             # %"$4.i"
	cmpb	$64, %dl
	je	.LBB135_41
# %bb.38:                               # %"$4.i"
	cmpb	$43, %dl
	jne	.LBB135_44
# %bb.39:                               # %"$9.i49"
	cmpb	$126, %al
	je	.LBB135_42
# %bb.40:                               # %"$9.i49"
	cmpb	$64, %al
	jne	.LBB135_44
.LBB135_41:                             # %"$11.i"
	movq	($PilLen)(%rip), %rax
	jmp	.LBB135_43
.LBB135_42:                             # %"$17.i"
	movq	($UsrLen)(%rip), %rax
.LBB135_43:                             # %pathSize.exit
	leaq	-1(%rdi,%rax), %rdi
.LBB135_44:                             # %pathSize.exit
	leaq	19(%rdi), %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	subq	$32, %rsp
	movq	%r14, %rdx
	callq	pathString
	addq	$32, %rsp
	testb	$15, (%rbp)                     # 1-byte Folded Reload
	movl	$42, %edx
	jne	.LBB135_47
# %bb.45:                               # %"$15.preheader"
	xorl	%edx, %edx
	movq	(%rbp), %rax                    # 8-byte Reload
	.p2align	4, 0x90
.LBB135_46:                             # %"$15"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rax), %rax
	addq	$42, %rdx
	testb	$15, %al
	je	.LBB135_46
.LBB135_47:                             # %"$14"
	movq	%r15, -24(%rbp)                 # 8-byte Spill
	movq	%r13, -32(%rbp)                 # 8-byte Spill
	movq	($DbFiles)(%rip), %rcx
	subq	$32, %rsp
	callq	realloc
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB135_117
# %bb.48:                               # %alloc.exit
	movq	%rax, %rsi
	leaq	-1(%rdi,%r14), %rax
	movq	%rax, -56(%rbp)                 # 8-byte Spill
	movq	%rsi, ($DbFiles)(%rip)
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	movq	(%rbp), %r15                    # 8-byte Reload
	movq	%r14, -64(%rbp)                 # 8-byte Spill
	movq	%rbx, -48(%rbp)                 # 8-byte Spill
	.p2align	4, 0x90
.LBB135_49:                             # %"$18"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rsi, ($DbFile)(%rip)
	movl	%r12d, 4(%rsi)
	testb	$15, %r15b
	je	.LBB135_51
# %bb.50:                               # %"$19"
                                        #   in Loop: Header=BB135_49 Depth=1
	movl	$2, 8(%rsi)
	jmp	.LBB135_52
	.p2align	4, 0x90
.LBB135_51:                             # %"$20"
                                        #   in Loop: Header=BB135_49 Depth=1
	subq	$32, %rsp
	movq	-56(%rbp), %rcx                 # 8-byte Reload
	movl	%r12d, %edx
	callq	bufAo
	addq	$32, %rsp
	movb	$0, (%rax)
	movq	(%r15), %rax
	movq	8(%r15), %r15
	shrq	$4, %rax
	movl	%eax, 8(%rsi)
.LBB135_52:                             # %"$21"
                                        #   in Loop: Header=BB135_49 Depth=1
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	openRdWr
	addq	$32, %rsp
	movl	%eax, (%rsi)
	testl	%eax, %eax
	js	.LBB135_55
# %bb.53:                               # %"$24"
                                        #   in Loop: Header=BB135_49 Depth=1
	movq	($DbFile)(%rip), %rax
	movl	(%rax), %ecx
	subq	$32, %rsp
	movl	$13, %r8d
	movq	%rbx, %rdx
	xorl	%r9d, %r9d
	callq	pread
	addq	$32, %rsp
	cmpq	$13, %rax
	jne	.LBB135_115
# %bb.54:                               # %blkPeek.exit
                                        #   in Loop: Header=BB135_49 Depth=1
	movzbl	12(%rbx), %ecx
	movl	%ecx, 8(%rsi)
	movl	$64, %eax
                                        # kill: def $cl killed $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, 12(%rsi)
	jmp	.LBB135_60
	.p2align	4, 0x90
.LBB135_55:                             # %"$23"
                                        #   in Loop: Header=BB135_49 Depth=1
	subq	$32, %rsp
	callq	gErrno
	addq	$32, %rsp
	cmpl	$1, %eax
	jne	.LBB135_114
# %bb.56:                               # %"$26"
                                        #   in Loop: Header=BB135_49 Depth=1
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	openRdWrExcl
	addq	$32, %rsp
	movl	%eax, (%rsi)
	testl	%eax, %eax
	js	.LBB135_114
# %bb.57:                               # %"$28"
                                        #   in Loop: Header=BB135_49 Depth=1
	movq	%rsp, (%rbp)                    # 8-byte Spill
	movzbl	8(%rsi), %ecx
	movl	$64, %r13d
	shll	%cl, %r13d
	movl	%r13d, 12(%rsi)
	movq	%r13, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movslq	%r13d, %rbx
	subq	$32, %rsp
	movq	%r14, %rcx
	xorl	%edx, %edx
	movq	%rbx, %r8
	callq	memset
	addq	$32, %rsp
	cmpq	($DbFiles)(%rip), %rsi
	movl	$64, %eax
	movl	$128, %ecx
	cmovel	%ecx, %eax
	movb	%al, 6(%r14)
	movb	$0, 11(%r14)
	movl	$0, 7(%r14)
	movzbl	8(%rsi), %eax
	movb	%al, 12(%r14)
	subq	$32, %rsp
	xorl	%ecx, %ecx
	movq	%r14, %rdx
	movl	%ebx, %r8d
	callq	blkPoke
	addq	$32, %rsp
	cmpq	($DbFiles)(%rip), %rsi
	jne	.LBB135_59
# %bb.58:                               # %"$32"
                                        #   in Loop: Header=BB135_49 Depth=1
	movq	$0, (%r14)
	movq	$0, 8(%r14)
	movb	$1, (%r14)
	movl	$0, 1(%r14)
	movb	$0, 5(%r14)
	movslq	12(%rsi), %rcx
	subq	$32, %rsp
	movq	%r14, %rdx
	movl	%r13d, %r8d
	callq	blkPoke
	addq	$32, %rsp
.LBB135_59:                             # %"$33"
                                        #   in Loop: Header=BB135_49 Depth=1
	movq	(%rbp), %rsp                    # 8-byte Reload
	movq	-64(%rbp), %r14                 # 8-byte Reload
	movq	-48(%rbp), %rbx                 # 8-byte Reload
.LBB135_60:                             # %"$22"
                                        #   in Loop: Header=BB135_49 Depth=1
	movl	(%rsi), %ecx
	subq	$32, %rsp
	callq	fcntlCloExec
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB135_112
# %bb.61:                               # %closeOnExec.exit
                                        #   in Loop: Header=BB135_49 Depth=1
	movl	12(%rsi), %eax
	cmpl	%edi, %eax
	cmovgel	%eax, %edi
	movq	$0, 16(%rsi)
	movq	$0, 24(%rsi)
	movq	$-1, 32(%rsi)
	movw	$0, 40(%rsi)
	incl	%r12d
	addq	$42, %rsi
	testb	$15, %r15b
	je	.LBB135_49
# %bb.62:                               # %"$37"
	movl	%r12d, ($DBs)(%rip)
	movl	%edi, ($MaxBlkSize)(%rip)
	movq	($DbBlock)(%rip), %rcx
	movslq	%edi, %rdx
	subq	$32, %rsp
	callq	realloc
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB135_117
# %bb.63:                               # %alloc.exit61
	movq	%rax, ($DbBlock)(%rip)
	leaq	SymTab+8(%rip), %rdi
	movq	-40(%rbp), %rdx                 # 8-byte Reload
	cmpq	%rdi, %rdx
	movq	-8(%rbp), %r15                  # 8-byte Reload
	movq	-32(%rbp), %r13                 # 8-byte Reload
	movq	-24(%rbp), %r12                 # 8-byte Reload
	je	.LBB135_86
# %bb.64:                               # %"$3.i63"
	movq	-8(%rdx), %rcx
	testb	$8, %cl
	jne	.LBB135_122
	.p2align	4, 0x90
# %bb.65:                               # %"$8.i68"
	testb	$6, %cl
	jne	.LBB135_67
.LBB135_66:                             # %"$8.i68"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rcx
	testb	$6, %cl
	je	.LBB135_66
.LBB135_67:                             # %xName.exit70
	movl	$1, %eax
	testb	$4, %cl
	movq	%rcx, %rbx
	je	.LBB135_70
# %bb.68:                               # %"$3.i.i73.preheader"
	movl	$1, %eax
	movq	%rcx, %rbx
	.p2align	4, 0x90
.LBB135_69:                             # %"$3.i.i73"
                                        # =>This Inner Loop Header: Depth=1
	addq	$8, %rax
	movq	4(%rbx), %rbx
	testb	$4, %bl
	jne	.LBB135_69
.LBB135_70:                             # %"$4.i.i77"
	shrq	$4, %rbx
	je	.LBB135_72
	.p2align	4, 0x90
.LBB135_71:                             # %"$6.i.i79"
                                        # =>This Inner Loop Header: Depth=1
	incq	%rax
	shrq	$8, %rbx
	jne	.LBB135_71
.LBB135_72:                             # %bufSize.exit.i82
	testb	$2, %cl
	jne	.LBB135_74
# %bb.73:                               # %"$3.i90"
	movq	-4(%rcx), %rbx
	movq	%rbx, %rsi
	shrq	$8, %rsi
	cmpb	$126, %bl
	jne	.LBB135_75
	jmp	.LBB135_80
.LBB135_74:                             # %"$2.i86"
	movq	%rcx, %rbx
	shrq	$4, %rbx
	movq	%rcx, %rsi
	shrq	$12, %rsi
	cmpb	$126, %bl
	je	.LBB135_80
.LBB135_75:                             # %"$4.i93"
	cmpb	$64, %bl
	je	.LBB135_79
# %bb.76:                               # %"$4.i93"
	cmpb	$43, %bl
	jne	.LBB135_83
# %bb.77:                               # %"$9.i94"
	cmpb	$126, %sil
	je	.LBB135_80
# %bb.78:                               # %"$9.i94"
	cmpb	$64, %sil
	jne	.LBB135_83
.LBB135_79:                             # %"$11.i95"
	movq	%rdx, %rbx
	movq	($PilLen)(%rip), %rdx
	jmp	.LBB135_81
.LBB135_80:                             # %"$17.i96"
	movq	%rdx, %rbx
	movq	($UsrLen)(%rip), %rdx
.LBB135_81:                             # %pathSize.exit98
	leaq	-1(%rax,%rdx), %rax
	jmp	.LBB135_84
.LBB135_83:
	movq	%rdx, %rbx
.LBB135_84:                             # %pathSize.exit98
	addq	$15, %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	subq	$32, %rsp
	movq	%rsi, %rdx
	callq	pathString
	leaq	.L$60(%rip), %rdx
	movq	%rsi, %rcx
	callq	fopen
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB135_123
# %bb.85:                               # %"$41"
	movq	%rax, ($DbJnl)(%rip)
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	fileno
	movl	%eax, %ecx
	callq	fcntlCloExec
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB135_119
.LBB135_86:                             # %"$39"
	cmpq	%rdi, %r12
	je	.LBB135_111
# %bb.87:                               # %"$3.i103"
	movq	-8(%r12), %rcx
	testb	$8, %cl
	jne	.LBB135_124
	.p2align	4, 0x90
# %bb.88:                               # %"$8.i108"
	testb	$6, %cl
	jne	.LBB135_90
.LBB135_89:                             # %"$8.i108"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rcx
	testb	$6, %cl
	je	.LBB135_89
.LBB135_90:                             # %xName.exit110
	movl	$1, %eax
	testb	$4, %cl
	movq	%rcx, %rdx
	je	.LBB135_93
# %bb.91:                               # %"$3.i.i113.preheader"
	movl	$1, %eax
	movq	%rcx, %rdx
	.p2align	4, 0x90
.LBB135_92:                             # %"$3.i.i113"
                                        # =>This Inner Loop Header: Depth=1
	addq	$8, %rax
	movq	4(%rdx), %rdx
	testb	$4, %dl
	jne	.LBB135_92
.LBB135_93:                             # %"$4.i.i117"
	shrq	$4, %rdx
	je	.LBB135_95
	.p2align	4, 0x90
.LBB135_94:                             # %"$6.i.i119"
                                        # =>This Inner Loop Header: Depth=1
	incq	%rax
	shrq	$8, %rdx
	jne	.LBB135_94
.LBB135_95:                             # %bufSize.exit.i122
	testb	$2, %cl
	jne	.LBB135_97
# %bb.96:                               # %"$3.i130"
	movq	-4(%rcx), %rdx
	movq	%rdx, %rbx
	shrq	$8, %rbx
	cmpb	$126, %dl
	jne	.LBB135_98
	jmp	.LBB135_103
.LBB135_97:                             # %"$2.i126"
	movq	%rcx, %rdx
	shrq	$4, %rdx
	movq	%rcx, %rbx
	shrq	$12, %rbx
	cmpb	$126, %dl
	je	.LBB135_103
.LBB135_98:                             # %"$4.i133"
	cmpb	$64, %dl
	je	.LBB135_102
# %bb.99:                               # %"$4.i133"
	cmpb	$43, %dl
	jne	.LBB135_105
# %bb.100:                              # %"$9.i134"
	cmpb	$126, %bl
	je	.LBB135_103
# %bb.101:                              # %"$9.i134"
	cmpb	$64, %bl
	jne	.LBB135_105
.LBB135_102:                            # %"$11.i135"
	movq	($PilLen)(%rip), %rdx
	jmp	.LBB135_104
.LBB135_103:                            # %"$17.i136"
	movq	($UsrLen)(%rip), %rdx
.LBB135_104:                            # %pathSize.exit138
	leaq	-1(%rax,%rdx), %rax
.LBB135_105:                            # %pathSize.exit138
	addq	$15, %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	subq	$32, %rsp
	movq	%rsi, %rdx
	callq	pathString
	leaq	.L$61(%rip), %rdx
	movq	%rsi, %rcx
	callq	fopen
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB135_125
# %bb.106:                              # %"$45"
	movq	%rax, ($DbLog)(%rip)
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	fileno
	movl	%eax, %ecx
	callq	fcntlCloExec
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB135_119
# %bb.107:                              # %closeOnExec.exit141
	subq	$32, %rsp
	callq	transaction
	addq	$32, %rsp
	testb	$1, %al
	je	.LBB135_109
# %bb.108:                              # %"$46"
	subq	$32, %rsp
	movq	%r15, %rcx
	callq	restore
	addq	$32, %rsp
.LBB135_109:                            # %"$47"
	movq	($DbLog)(%rip), %rsi
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	fseek0
	addq	$32, %rsp
	testb	$1, %al
	je	.LBB135_120
# %bb.110:                              # %"$3.i142"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	fileno
	movl	%eax, %ecx
	callq	truncate0
	addq	$32, %rsp
	testb	$1, %al
	je	.LBB135_120
.LBB135_111:                            # %"$12"
	movq	8(%r13), %rax
	movq	%rax, env(%rip)
	leaq	SymTab+280(%rip), %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB135_112:                            # %"$2.i56"
	subq	$32, %rsp
	callq	strErrno
	leaq	.L$36(%rip), %r8
	movq	-8(%rbp), %rcx                  # 8-byte Reload
.LBB135_113:                            # %"$2.i99"
	xorl	%edx, %edx
	movq	%rax, %r9
	callq	err
.LBB135_114:                            # %"$27"
	subq	$32, %rsp
	movq	-8(%rbp), %rcx                  # 8-byte Reload
	movq	-16(%rbp), %rdx                 # 8-byte Reload
	callq	openErr
.LBB135_115:                            # %"$2.i54"
	subq	$32, %rsp
	callq	dbRdErr
.LBB135_116:                            # %"$9.i"
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rdi, %rdx
	callq	lstErr
.LBB135_117:                            # %"$2.i52"
	subq	$32, %rsp
	leaq	.L$3(%rip), %rcx
	xorl	%edx, %edx
	callq	giveup
.LBB135_118:                            # %"$6.i43"
	subq	$32, %rsp
	movq	-8(%rbp), %rcx                  # 8-byte Reload
	movq	%r12, %rdx
	callq	nameErr
.LBB135_119:                            # %"$2.i99"
	subq	$32, %rsp
	callq	strErrno
	leaq	.L$36(%rip), %r8
	jmp	.LBB135_121
.LBB135_120:                            # %"$4.i143"
	subq	$32, %rsp
	callq	strErrno
	leaq	.L$59(%rip), %r8
.LBB135_121:                            # %"$2.i99"
	movq	%r15, %rcx
	jmp	.LBB135_113
.LBB135_122:                            # %"$6.i66"
	subq	$32, %rsp
	movq	%r15, %rcx
	callq	nameErr
.LBB135_123:                            # %"$40"
	subq	$32, %rsp
	movq	%r15, %rcx
	movq	%rbx, %rdx
	callq	openErr
.LBB135_124:                            # %"$6.i106"
	subq	$32, %rsp
	movq	%r15, %rcx
	movq	%r12, %rdx
	callq	nameErr
.LBB135_125:                            # %"$44"
	subq	$32, %rsp
	movq	%r15, %rcx
	movq	%r12, %rdx
	callq	openErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _pool2;
	.scl	2;
	.type	32;
	.endef
	.globl	_pool2                          # -- Begin function _pool2
	.p2align	4, 0x90
_pool2:                                 # @_pool2
.seh_proc _pool2
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rbx
	movq	8(%rcx), %r12
	movq	(%r12), %rcx
	testb	$6, %cl
	jne	.LBB136_4
# %bb.1:                                # %"$3.i"
	testb	$8, %cl
	jne	.LBB136_2
# %bb.3:                                # %"$5.i"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB136_4
.LBB136_2:                              # %"$6.i"
	movq	(%rcx), %rcx
.LBB136_4:                              # %evSym.exit
	subq	$32, %rsp
	callq	xSym
	addq	$32, %rsp
	movq	%rax, %r15
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %r15
	jne	.LBB136_6
# %bb.5:                                # %bufSize.exit.i.thread
	movl	($DBs)(%rip), %edi
	movq	$0, ($DbJnl)(%rip)
	movq	$0, ($DbLog)(%rip)
	movl	$2, %ecx
	movl	$1, %esi
	jmp	.LBB136_16
.LBB136_6:                              # %"$3.i7"
	movq	-8(%r15), %rcx
	testb	$8, %cl
	jne	.LBB136_7
	.p2align	4, 0x90
# %bb.9:                                # %"$8.i"
	testb	$6, %cl
	jne	.LBB136_10
.LBB136_8:                              # %"$8.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rcx
	testb	$6, %cl
	je	.LBB136_8
.LBB136_10:                             # %xName.exit
	movl	($DBs)(%rip), %edi
	movq	$0, ($DbJnl)(%rip)
	movq	$0, ($DbLog)(%rip)
	movl	$1, %esi
	testb	$4, %cl
	movq	%rcx, %rax
	je	.LBB136_13
# %bb.11:                               # %"$3.i.i.preheader"
	movl	$1, %esi
	movq	%rcx, %rax
	.p2align	4, 0x90
.LBB136_12:                             # %"$3.i.i"
                                        # =>This Inner Loop Header: Depth=1
	addq	$8, %rsi
	movq	4(%rax), %rax
	testb	$4, %al
	jne	.LBB136_12
.LBB136_13:                             # %"$4.i.i"
	shrq	$4, %rax
	je	.LBB136_15
	.p2align	4, 0x90
.LBB136_14:                             # %"$6.i.i"
                                        # =>This Inner Loop Header: Depth=1
	incq	%rsi
	shrq	$8, %rax
	jne	.LBB136_14
.LBB136_15:                             # %bufSize.exit.i
	testb	$2, %cl
	jne	.LBB136_16
# %bb.17:                               # %"$3.i11"
	movq	-4(%rcx), %rdx
	movq	%rdx, %rax
	shrq	$8, %rax
	jmp	.LBB136_18
.LBB136_16:                             # %"$2.i"
	movq	%rcx, %rdx
	shrq	$4, %rdx
	movq	%rcx, %rax
	shrq	$12, %rax
.LBB136_18:                             # %"$4.i"
	cmpb	$126, %dl
	movq	%rbx, (%rbp)                    # 8-byte Spill
	je	.LBB136_24
# %bb.19:                               # %"$4.i"
	cmpb	$64, %dl
	je	.LBB136_23
# %bb.20:                               # %"$4.i"
	cmpb	$43, %dl
	jne	.LBB136_26
# %bb.21:                               # %"$9.i"
	cmpb	$126, %al
	je	.LBB136_24
# %bb.22:                               # %"$9.i"
	cmpb	$64, %al
	jne	.LBB136_26
.LBB136_23:                             # %"$11.i"
	movq	($PilLen)(%rip), %rax
	jmp	.LBB136_25
.LBB136_24:                             # %"$17.i"
	movq	($UsrLen)(%rip), %rax
.LBB136_25:                             # %pathSize.exit
	leaq	-1(%rsi,%rax), %rsi
.LBB136_26:                             # %pathSize.exit
	leaq	19(%rsi), %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r13
	subq	$32, %rsp
	movq	%r13, %rdx
	callq	pathString
	addq	$32, %rsp
	leaq	-1(%rsi,%r13), %rsi
	movq	($DbFiles)(%rip), %rbx
	movl	4(%rbx), %edx
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	bufAo
	addq	$32, %rsp
	movb	$0, (%rax)
	subq	$32, %rsp
	movq	%r13, %rcx
	callq	openRdWr
	addq	$32, %rsp
	movl	%eax, (%rbx)
	testl	%eax, %eax
	js	.LBB136_41
# %bb.27:                               # %"$7.preheader"
	addq	$46, %rbx
	.p2align	4, 0x90
.LBB136_29:                             # %"$7"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	movl	%eax, %ecx
	callq	fcntlCloExec
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB136_42
# %bb.30:                               # %closeOnExec.exit
                                        #   in Loop: Header=BB136_29 Depth=1
	decl	%edi
	je	.LBB136_31
# %bb.28:                               # %"$5"
                                        #   in Loop: Header=BB136_29 Depth=1
	leaq	42(%rbx), %r14
	movl	(%rbx), %edx
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	bufAo
	addq	$32, %rsp
	movb	$0, (%rax)
	subq	$32, %rsp
	movq	%r13, %rcx
	callq	openRdWr
	addq	$32, %rsp
	movl	%eax, -4(%rbx)
	testl	%eax, %eax
	movq	%r14, %rbx
	jns	.LBB136_29
.LBB136_41:                             # %"$6"
	subq	$32, %rsp
	movq	(%rbp), %rcx                    # 8-byte Reload
	movq	%r15, %rdx
	callq	openErr
.LBB136_31:                             # %"$9"
	movq	8(%r12), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rsi
	jmp	.LBB136_32
	.p2align	4, 0x90
.LBB136_38:                             # %"$19"
                                        #   in Loop: Header=BB136_32 Depth=1
	movq	(%rsi), %rcx
	movq	8(%rsi), %rsi
.LBB136_32:                             # %"$9"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %sil
	jne	.LBB136_33
# %bb.36:                               # %"$11"
                                        #   in Loop: Header=BB136_32 Depth=1
	testb	$15, %cl
	jne	.LBB136_38
# %bb.37:                               # %"$20"
                                        #   in Loop: Header=BB136_32 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	jmp	.LBB136_38
.LBB136_33:                             # %"$13"
	testb	$6, %cl
	jne	.LBB136_40
# %bb.34:                               # %"$15"
	testb	$8, %cl
	jne	.LBB136_35
# %bb.39:                               # %"$17"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB136_40
.LBB136_35:                             # %"$18"
	movq	(%rcx), %rcx
.LBB136_40:                             # %"$12"
	movq	%rcx, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB136_42:                             # %"$2.i13"
	subq	$32, %rsp
	callq	strErrno
	leaq	.L$36(%rip), %r8
	movq	(%rbp), %rcx                    # 8-byte Reload
	xorl	%edx, %edx
	movq	%rax, %r9
	callq	err
.LBB136_7:                              # %"$6.i8"
	subq	$32, %rsp
	movq	%rbx, %rcx
	movq	%r15, %rdx
	callq	nameErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _journal;
	.scl	2;
	.type	32;
	.endef
	.globl	_journal                        # -- Begin function _journal
	.p2align	4, 0x90
_journal:                               # @_journal
.seh_proc _journal
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$56, %rsp
	.seh_stackalloc 56
	leaq	48(%rsp), %rbp
	.seh_setframe %rbp, 48
	movdqa	%xmm6, -16(%rbp)                # 16-byte Spill
	.seh_savexmm %xmm6, 32
	.seh_endprologue
	movq	%rcx, %rax
	movq	8(%rcx), %r14
	movq	(%r14), %rcx
	testb	$6, %cl
	movq	%rax, -24(%rbp)                 # 8-byte Spill
	jne	.LBB137_4
# %bb.1:                                # %"$3.i"
	testb	$8, %cl
	jne	.LBB137_2
# %bb.3:                                # %"$5.i"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB137_4
.LBB137_2:                              # %"$6.i"
	movq	(%rcx), %rcx
.LBB137_4:                              # %evSym.exit
	subq	$32, %rsp
	callq	xSym
	addq	$32, %rsp
	movq	%rax, %r12
	movl	($MaxBlkSize)(%rip), %eax
	addq	$15, %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r13
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	cmpq	%rsp, ($StkLimit)(%rip)
	ja	.LBB137_54
# %bb.5:                                # %"$3"
	movq	($DbJnl)(%rip), %rax
	movq	%rax, -40(%rbp)                 # 8-byte Spill
	movq	($DbLog)(%rip), %rax
	movq	%rax, -32(%rbp)                 # 8-byte Spill
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, %r12
	jne	.LBB137_11
# %bb.6:                                # %"$4"
	movq	$0, ($DbJnl)(%rip)
	movq	$0, ($DbLog)(%rip)
	movq	8(%r14), %r14
	movq	(%r14), %rcx
	testb	$6, %cl
	jne	.LBB137_10
# %bb.7:                                # %"$3.i9"
	testb	$8, %cl
	jne	.LBB137_8
# %bb.9:                                # %"$5.i11"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB137_10
.LBB137_8:                              # %"$6.i10"
	movq	(%rcx), %rcx
.LBB137_10:                             # %evSym.exit12
	subq	$32, %rsp
	callq	xSym
	addq	$32, %rsp
	movq	%rax, %r12
.LBB137_11:                             # %"$5"
	pxor	%xmm6, %xmm6
	jmp	.LBB137_12
.LBB137_51:                             # %"$5.i26"
                                        #   in Loop: Header=BB137_12 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	.p2align	4, 0x90
.LBB137_52:                             # %evSym.exit28
                                        #   in Loop: Header=BB137_12 Depth=1
	subq	$32, %rsp
	callq	xSym
	addq	$32, %rsp
	movq	%rax, %r12
.LBB137_12:                             # %"$6"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB137_15 Depth 2
                                        #     Child Loop BB137_19 Depth 2
                                        #     Child Loop BB137_21 Depth 2
                                        #     Child Loop BB137_35 Depth 2
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %r12
	movl	$1, %eax
	movl	$2, %ecx
	je	.LBB137_23
# %bb.13:                               # %"$3.i14"
                                        #   in Loop: Header=BB137_12 Depth=1
	movq	-8(%r12), %rcx
	testb	$8, %cl
	jne	.LBB137_14
	.p2align	4, 0x90
# %bb.16:                               # %"$8.i"
                                        #   in Loop: Header=BB137_12 Depth=1
	testb	$6, %cl
	jne	.LBB137_17
.LBB137_15:                             # %"$8.i"
                                        #   Parent Loop BB137_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rcx), %rcx
	testb	$6, %cl
	je	.LBB137_15
.LBB137_17:                             # %xName.exit
                                        #   in Loop: Header=BB137_12 Depth=1
	movl	$1, %eax
	testb	$4, %cl
	movq	%rcx, %rdx
	je	.LBB137_20
# %bb.18:                               # %"$3.i.i.preheader"
                                        #   in Loop: Header=BB137_12 Depth=1
	movl	$1, %eax
	movq	%rcx, %rdx
	.p2align	4, 0x90
.LBB137_19:                             # %"$3.i.i"
                                        #   Parent Loop BB137_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addq	$8, %rax
	movq	4(%rdx), %rdx
	testb	$4, %dl
	jne	.LBB137_19
.LBB137_20:                             # %"$4.i.i"
                                        #   in Loop: Header=BB137_12 Depth=1
	shrq	$4, %rdx
	je	.LBB137_22
	.p2align	4, 0x90
.LBB137_21:                             # %"$6.i.i"
                                        #   Parent Loop BB137_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	incq	%rax
	shrq	$8, %rdx
	jne	.LBB137_21
.LBB137_22:                             # %bufSize.exit.i
                                        #   in Loop: Header=BB137_12 Depth=1
	testb	$2, %cl
	jne	.LBB137_23
# %bb.24:                               # %"$3.i18"
                                        #   in Loop: Header=BB137_12 Depth=1
	movq	-4(%rcx), %rdx
	movq	%rdx, %rbx
	shrq	$8, %rbx
	cmpb	$126, %dl
	jne	.LBB137_26
	jmp	.LBB137_31
	.p2align	4, 0x90
.LBB137_23:                             # %"$2.i"
                                        #   in Loop: Header=BB137_12 Depth=1
	movq	%rcx, %rdx
	shrq	$4, %rdx
	movq	%rcx, %rbx
	shrq	$12, %rbx
	cmpb	$126, %dl
	je	.LBB137_31
.LBB137_26:                             # %"$4.i"
                                        #   in Loop: Header=BB137_12 Depth=1
	cmpb	$64, %dl
	je	.LBB137_30
# %bb.27:                               # %"$4.i"
                                        #   in Loop: Header=BB137_12 Depth=1
	cmpb	$43, %dl
	jne	.LBB137_33
# %bb.28:                               # %"$9.i"
                                        #   in Loop: Header=BB137_12 Depth=1
	cmpb	$126, %bl
	je	.LBB137_31
# %bb.29:                               # %"$9.i"
                                        #   in Loop: Header=BB137_12 Depth=1
	cmpb	$64, %bl
	jne	.LBB137_33
.LBB137_30:                             # %"$11.i"
                                        #   in Loop: Header=BB137_12 Depth=1
	movq	($PilLen)(%rip), %rdx
	jmp	.LBB137_32
	.p2align	4, 0x90
.LBB137_31:                             # %"$17.i"
                                        #   in Loop: Header=BB137_12 Depth=1
	movq	($UsrLen)(%rip), %rdx
.LBB137_32:                             # %pathSize.exit
                                        #   in Loop: Header=BB137_12 Depth=1
	leaq	-1(%rax,%rdx), %rax
.LBB137_33:                             # %pathSize.exit
                                        #   in Loop: Header=BB137_12 Depth=1
	addq	$15, %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	subq	$32, %rsp
	movq	%rsi, %rdx
	callq	pathString
	movq	%rsi, %rcx
	leaq	.L$62(%rip), %rdx
	callq	fopen
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB137_55
# %bb.34:                               # %"$9.preheader"
                                        #   in Loop: Header=BB137_12 Depth=1
	movq	%rax, %rsi
	subq	$32, %rsp
	.p2align	4, 0x90
.LBB137_35:                             # %"$9.preheader"
                                        #   Parent Loop BB137_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rsi, %rcx
	callq	getc_unlocked
	addq	$32, %rsp
	movl	%eax, %edi
	subq	$32, %rsp
	testl	%eax, %eax
	js	.LBB137_47
# %bb.36:                               # %"$10"
                                        #   in Loop: Header=BB137_35 Depth=2
	movl	$2, %edx
	movl	$1, %r8d
	movq	%r15, %rcx
	movq	%rsi, %r9
	callq	fread
	addq	$32, %rsp
	cmpl	$1, %eax
	jne	.LBB137_56
# %bb.37:                               # %"$13"
                                        #   in Loop: Header=BB137_35 Depth=2
	movzwl	(%r15), %eax
	cmpl	%eax, ($DBs)(%rip)
	jle	.LBB137_46
# %bb.38:                               # %dbfBuf.exit
                                        #   in Loop: Header=BB137_35 Depth=2
	imulq	$42, %rax, %rbx
	addq	($DbFiles)(%rip), %rbx
	movq	%rbx, ($DbFile)(%rip)
	je	.LBB137_46
# %bb.39:                               # %"$14"
                                        #   in Loop: Header=BB137_35 Depth=2
	cmpl	$64, %edi
	jne	.LBB137_41
# %bb.40:                               # %"$17"
                                        #   in Loop: Header=BB137_35 Depth=2
	movl	12(%rbx), %edi
.LBB137_41:                             # %"$18"
                                        #   in Loop: Header=BB137_35 Depth=2
	testl	%edi, %edi
	jne	.LBB137_43
# %bb.42:                               # %"$19"
                                        #   in Loop: Header=BB137_35 Depth=2
	movl	12(%rbx), %edi
.LBB137_43:                             # %"$20"
                                        #   in Loop: Header=BB137_35 Depth=2
	subq	$32, %rsp
	movl	$6, %edx
	movl	$1, %r8d
	movq	%r15, %rcx
	movq	%rsi, %r9
	callq	fread
	addq	$32, %rsp
	cmpl	$1, %eax
	jne	.LBB137_56
# %bb.44:                               # %"$22"
                                        #   in Loop: Header=BB137_35 Depth=2
	movslq	%edi, %rdx
	subq	$32, %rsp
	movl	$1, %r8d
	movq	%r13, %rcx
	movq	%rsi, %r9
	callq	fread
	addq	$32, %rsp
	cmpl	$1, %eax
	jne	.LBB137_56
# %bb.45:                               # %"$24"
                                        #   in Loop: Header=BB137_35 Depth=2
	movzwl	4(%r15), %eax
	movd	%eax, %xmm0
	punpcklbw	%xmm6, %xmm0            # xmm0 = xmm0[0],xmm6[0],xmm0[1],xmm6[1],xmm0[2],xmm6[2],xmm0[3],xmm6[3],xmm0[4],xmm6[4],xmm0[5],xmm6[5],xmm0[6],xmm6[6],xmm0[7],xmm6[7]
	punpcklwd	%xmm6, %xmm0            # xmm0 = xmm0[0],xmm6[0],xmm0[1],xmm6[1],xmm0[2],xmm6[2],xmm0[3],xmm6[3]
	punpckldq	%xmm6, %xmm0            # xmm0 = xmm0[0],xmm6[0],xmm0[1],xmm6[1]
	movdqa	%xmm0, %xmm1
	psllq	$8, %xmm1
	psllq	$16, %xmm0
	pshufd	$78, %xmm0, %xmm0               # xmm0 = xmm0[2,3,0,1]
	por	%xmm1, %xmm0
	movq	%xmm0, %rax
	movzbl	3(%r15), %ecx
	orq	%rax, %rcx
	movzwl	1(%r15), %eax
	movd	%eax, %xmm0
	punpcklbw	%xmm6, %xmm0            # xmm0 = xmm0[0],xmm6[0],xmm0[1],xmm6[1],xmm0[2],xmm6[2],xmm0[3],xmm6[3],xmm0[4],xmm6[4],xmm0[5],xmm6[5],xmm0[6],xmm6[6],xmm0[7],xmm6[7]
	punpcklwd	%xmm6, %xmm0            # xmm0 = xmm0[0],xmm6[0],xmm0[1],xmm6[1],xmm0[2],xmm6[2],xmm0[3],xmm6[3]
	punpckldq	%xmm6, %xmm0            # xmm0 = xmm0[0],xmm6[0],xmm0[1],xmm6[1]
	shlq	$24, %rcx
	movdqa	%xmm0, %xmm1
	psllq	$8, %xmm1
	psllq	$16, %xmm0
	pshufd	$78, %xmm0, %xmm0               # xmm0 = xmm0[2,3,0,1]
	por	%xmm1, %xmm0
	movq	%xmm0, %rdx
	movzbl	(%r15), %eax
	orq	%rcx, %rax
	orq	%rdx, %rax
	movzbl	8(%rbx), %ecx
	shlq	%cl, %rax
	subq	$32, %rsp
	movq	%rax, %rcx
	movq	%r13, %rdx
	movl	%edi, %r8d
	callq	blkPoke
	jmp	.LBB137_35
	.p2align	4, 0x90
.LBB137_47:                             # %"$11"
                                        #   in Loop: Header=BB137_12 Depth=1
	movq	%rsi, %rcx
	callq	fclose
	addq	$32, %rsp
	movq	8(%r14), %r14
	testb	$15, %r14b
	jne	.LBB137_53
# %bb.48:                               # %"$25"
                                        #   in Loop: Header=BB137_12 Depth=1
	movq	(%r14), %rcx
	testb	$6, %cl
	jne	.LBB137_52
# %bb.49:                               # %"$3.i24"
                                        #   in Loop: Header=BB137_12 Depth=1
	testb	$8, %cl
	je	.LBB137_51
# %bb.50:                               # %"$6.i25"
                                        #   in Loop: Header=BB137_12 Depth=1
	movq	(%rcx), %rcx
	jmp	.LBB137_52
.LBB137_53:                             # %"$26"
	movq	-32(%rbp), %rax                 # 8-byte Reload
	movq	%rax, ($DbLog)(%rip)
	movq	-40(%rbp), %rax                 # 8-byte Reload
	movq	%rax, ($DbJnl)(%rip)
	leaq	SymTab+280(%rip), %rax
	movaps	-16(%rbp), %xmm6                # 16-byte Reload
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB137_56:                             # %"$12"
	subq	$32, %rsp
	movq	-24(%rbp), %rcx                 # 8-byte Reload
	callq	jnlErr
.LBB137_46:                             # %"$15"
	subq	$32, %rsp
	movq	-24(%rbp), %rcx                 # 8-byte Reload
	callq	dbfErr
.LBB137_55:                             # %"$7"
	subq	$32, %rsp
	movq	-24(%rbp), %rcx                 # 8-byte Reload
	movq	%r12, %rdx
	callq	openErr
.LBB137_14:                             # %"$6.i15"
	subq	$32, %rsp
	movq	-24(%rbp), %rcx                 # 8-byte Reload
	movq	%r12, %rdx
	callq	nameErr
.LBB137_54:                             # %"$2"
	subq	$32, %rsp
	movq	-24(%rbp), %rcx                 # 8-byte Reload
	callq	stkErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _id;
	.scl	2;
	.type	32;
	.endef
	.globl	_id                             # -- Begin function _id
	.p2align	4, 0x90
_id:                                    # @_id
.seh_proc _id
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rdi
	movq	8(%rax), %rbx
	testb	$6, %dil
	jne	.LBB138_4
# %bb.1:                                # %"$3"
	testb	$8, %dil
	jne	.LBB138_2
# %bb.3:                                # %"$5"
	movq	%rdi, %rcx
	callq	evList
	movq	%rax, %rdi
.LBB138_4:                              # %"$2"
	testb	$2, %dil
	jne	.LBB138_5
.LBB138_14:                             # %"$8"
	movl	%edi, %eax
	andl	$14, %eax
	cmpl	$8, %eax
	jne	.LBB138_25
# %bb.15:                               # %"$21"
	movq	-8(%rdi), %rax
	testb	$8, %al
	je	.LBB138_26
# %bb.16:                               # %"$23"
	movq	%rax, %rsi
	andq	$-9, %rsi
	testb	$6, %al
	jne	.LBB138_18
	.p2align	4, 0x90
.LBB138_17:                             # %"$25"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rsi), %rsi
	testb	$6, %sil
	je	.LBB138_17
.LBB138_18:                             # %"$26"
	movl	%esi, %eax
	shrl	$4, %eax
	andl	$1048575, %eax                  # imm = 0xFFFFF
	movq	%rsi, %rcx
	shrq	$12, %rcx
	andl	$-1048576, %ecx                 # imm = 0xFFF00000
	orq	%rax, %rcx
	movq	%rsi, %rax
	shrq	$20, %rax
	movabsq	$4393751543808, %rdi            # imm = 0x3FF00000000
	andq	%rax, %rdi
	orq	%rcx, %rdi
	shlq	$4, %rdi
	movq	(%rbx), %rax
	testb	$6, %al
	jne	.LBB138_22
# %bb.19:                               # %"$28"
	testb	$8, %al
	jne	.LBB138_20
# %bb.21:                               # %"$30"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB138_22
.LBB138_2:                              # %"$6"
	movq	(%rdi), %rdi
	testb	$2, %dil
	je	.LBB138_14
.LBB138_5:                              # %"$7"
	movq	(%rbx), %rax
	testb	$6, %al
	jne	.LBB138_9
# %bb.6:                                # %"$11"
	testb	$8, %al
	jne	.LBB138_7
# %bb.8:                                # %"$13"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB138_9
.LBB138_7:                              # %"$14"
	movq	(%rax), %rax
.LBB138_9:                              # %"$10"
	leaq	SymTab+8(%rip), %rdx
	movq	%rdi, %rcx
	shrq	$4, %rcx
	cmpq	%rdx, %rax
	jne	.LBB138_11
# %bb.10:                               # %"$15"
	movl	%ecx, %edx
	andl	$1048575, %edx                  # imm = 0xFFFFF
	shlq	$12, %rdi
	movabsq	$-281474976710656, %rax         # imm = 0xFFFF000000000000
	andq	%rdi, %rax
	orq	%rdx, %rax
	jmp	.LBB138_13
.LBB138_11:                             # %"$16"
	testb	$2, %al
	je	.LBB138_24
# %bb.12:                               # %xCnt.exit
	decl	%ecx
	movq	%rax, %rdx
	shrq	$4, %rdx
	movq	%rdx, %rbx
	negq	%rbx
	testb	$8, %al
	cmoveq	%rdx, %rbx
	movl	%ebx, %eax
	andl	$1048575, %eax                  # imm = 0xFFFFF
	movzbl	%cl, %edx
	shll	$20, %edx
	shrl	$8, %ecx
	shlq	$40, %rcx
	orq	%rdx, %rcx
	orq	%rax, %rcx
	movq	%rbx, %rdx
	shlq	$16, %rdx
	movabsq	$-281474976710656, %rax         # imm = 0xFFFF000000000000
	andq	%rdx, %rax
	orq	%rcx, %rax
	movq	%rbx, %rcx
.LBB138_13:                             # %"$17"
	andl	$-1048576, %ecx                 # imm = 0xFFF00000
	shlq	$8, %rcx
	orq	%rax, %rcx
	shlq	$4, %rcx
	orq	$2, %rcx
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	jmp	extern                          # TAILCALL
.LBB138_20:                             # %"$31"
	movq	(%rax), %rax
.LBB138_22:                             # %"$27"
	orq	$2, %rdi
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	jne	.LBB138_27
# %bb.23:                               # %"$9"
	movq	%rdi, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
.LBB138_27:                             # %"$33"
	movl	%esi, %eax
	shrl	$24, %eax
	shrq	$36, %rsi
	andl	$65280, %esi                    # imm = 0xFF00
	orl	%eax, %esi
	shll	$4, %esi
	addl	$18, %esi
	movq	%rsi, %rcx
	movq	%rdi, %rdx
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	jmp	cons                            # TAILCALL
.LBB138_25:                             # %"$18"
	movq	%rsi, %rcx
	movq	%rdi, %rdx
	callq	symErr
.LBB138_26:                             # %"$22"
	movq	%rsi, %rcx
	movq	%rdi, %rdx
	callq	extErr
.LBB138_24:                             # %"$2.i"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	cntErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _blk;
	.scl	2;
	.type	32;
	.endef
	.globl	_blk                            # -- Begin function _blk
	.p2align	4, 0x90
_blk:                                   # @_blk
.seh_proc _blk
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$56, %rsp
	.seh_stackalloc 56
	leaq	48(%rsp), %rbp
	.seh_setframe %rbp, 48
	.seh_endprologue
	movq	%rcx, %rdi
	movq	8(%rcx), %rbx
	movq	(%rbx), %rax
	testb	$6, %al
	jne	.LBB139_4
# %bb.1:                                # %"$3.i"
	testb	$8, %al
	jne	.LBB139_2
# %bb.3:                                # %"$5.i"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB139_4
.LBB139_2:                              # %"$6.i"
	movq	(%rax), %rax
.LBB139_4:                              # %"$2.i"
	testb	$2, %al
	je	.LBB139_45
# %bb.5:                                # %evCnt.exit
	movq	%rax, %rcx
	shrq	$4, %rcx
	movl	%ecx, %esi
	negl	%esi
	testb	$8, %al
	cmovel	%ecx, %esi
	movl	%esi, -36(%rbp)
	movq	8(%rbx), %rbx
	movq	(%rbx), %rax
	testb	$6, %al
	jne	.LBB139_9
# %bb.6:                                # %"$3.i10"
	testb	$8, %al
	jne	.LBB139_7
# %bb.8:                                # %"$5.i12"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB139_9
.LBB139_7:                              # %"$6.i11"
	movq	(%rax), %rax
.LBB139_9:                              # %"$2.i14"
	testb	$2, %al
	je	.LBB139_45
# %bb.10:                               # %evCnt.exit17
	movq	%rax, %rcx
	shrq	$4, %rcx
	movq	%rcx, %r15
	negq	%r15
	testb	$8, %al
	cmoveq	%rcx, %r15
	testq	%r15, %r15
	je	.LBB139_11
# %bb.13:                               # %"$3"
	movq	($DbBlock)(%rip), %r14
	movq	8(%rbx), %rsi
	movq	(%rsi), %rax
	testb	$6, %al
	jne	.LBB139_17
# %bb.14:                               # %"$3.i20"
	testb	$8, %al
	jne	.LBB139_15
# %bb.16:                               # %"$5.i22"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB139_17
.LBB139_11:                             # %"$2"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	subq	$32, %rsp
	movl	$7, %r8d
	movl	$6, %r9d
	movl	%esi, %ecx
	movq	%rdi, %rdx
	callq	pread
	addq	$32, %rsp
	cmpq	$7, %rax
	jne	.LBB139_46
# %bb.12:                               # %"$6"
	movzbl	5(%rdi), %eax
	movzbl	4(%rdi), %ecx
	shlq	$16, %rax
	shlq	$8, %rcx
	orq	%rax, %rcx
	movzbl	3(%rdi), %eax
	orq	%rcx, %rax
	movzbl	2(%rdi), %ecx
	movzbl	1(%rdi), %edx
	shlq	$24, %rax
	shlq	$16, %rcx
	shlq	$8, %rdx
	orq	%rcx, %rdx
	orq	%rax, %rdx
	movzbl	(%rdi), %ecx
	orq	%rdx, %rcx
	shrq	$2, %rcx
	andq	$-16, %rcx
	orq	$2, %rcx
	movzbl	6(%rdi), %edx
	shlq	$4, %rdx
	orq	$2, %rdx
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	cons                            # TAILCALL
.LBB139_15:                             # %"$6.i21"
	movq	(%rax), %rax
.LBB139_17:                             # %"$2.i24"
	testb	$2, %al
	je	.LBB139_45
# %bb.18:                               # %evCnt.exit27
	movq	%rax, %rdx
	shrq	$4, %rdx
	movq	%rdx, %rcx
	negq	%rcx
	testb	$8, %al
	cmoveq	%rdx, %rcx
	movl	%ecx, -28(%rbp)
	movl	$64, %ebx
                                        # kill: def $cl killed $cl killed $rcx
	shll	%cl, %ebx
	movq	8(%rsi), %rax
	movl	$-1, %esi
	testb	$15, %al
	jne	.LBB139_25
# %bb.19:                               # %"$8"
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB139_23
# %bb.20:                               # %"$3.i30"
	testb	$8, %al
	jne	.LBB139_21
# %bb.22:                               # %"$5.i32"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB139_23
.LBB139_21:                             # %"$6.i31"
	movq	(%rax), %rax
.LBB139_23:                             # %"$2.i34"
	testb	$2, %al
	je	.LBB139_45
# %bb.24:                               # %evCnt.exit37
	movq	%rax, %rcx
	shrq	$4, %rcx
	movl	%ecx, %esi
	negl	%esi
	testb	$8, %al
	cmovel	%ecx, %esi
.LBB139_25:                             # %"$9"
	movl	%ebx, -24(%rbp)
	cmpl	($MaxBlkSize)(%rip), %ebx
	jle	.LBB139_28
# %bb.26:                               # %"$10"
	movl	%ebx, ($MaxBlkSize)(%rip)
	movslq	%ebx, %rdx
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	realloc
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB139_47
# %bb.27:                               # %alloc.exit
	movq	%rax, ($DbBlock)(%rip)
.LBB139_28:                             # %"$11"
	leaq	-36(%rbp), %r14
	movq	%r14, ($DbFile)(%rip)
	testl	%esi, %esi
	js	.LBB139_33
	.p2align	4, 0x90
.LBB139_29:                             # %"$2.i41"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	movl	$1, %r8d
	movl	%esi, %ecx
	xorl	%edx, %edx
	movb	$1, %r9b
	callq	rdLock
	addq	$32, %rsp
	testl	%eax, %eax
	jns	.LBB139_32
# %bb.30:                               # %"$3.i42"
                                        #   in Loop: Header=BB139_29 Depth=1
	subq	$32, %rsp
	callq	gErrno
	addq	$32, %rsp
	cmpl	$2, %eax
	je	.LBB139_29
# %bb.31:                               # %"$5.i43"
	subq	$32, %rsp
	callq	lockErr
.LBB139_32:                             # %"$13.loopexit"
	movq	($DbFile)(%rip), %r14
.LBB139_33:                             # %"$13"
	shlq	$6, %r15
	movq	($DbBlock)(%rip), %rdi
	movq	%r15, ($BlkIndex)(%rip)
	movb	8(%r14), %cl
	shlq	%cl, %r15
	movslq	12(%r14), %rbx
	movl	(%r14), %ecx
	subq	$32, %rsp
	movq	%rdi, %rdx
	movq	%rbx, %r8
	movq	%r15, %r9
	callq	pread
	addq	$32, %rsp
	cmpq	%rbx, %rax
	jne	.LBB139_46
# %bb.34:                               # %rdBlock.exit
	movzbl	5(%rdi), %eax
	movzbl	4(%rdi), %ecx
	shlq	$16, %rax
	shlq	$8, %rcx
	orq	%rax, %rcx
	movzbl	3(%rdi), %eax
	orq	%rcx, %rax
	movzbl	2(%rdi), %ecx
	movzbl	1(%rdi), %edx
	shlq	$24, %rax
	shlq	$16, %rcx
	shlq	$8, %rdx
	orq	%rcx, %rdx
	orq	%rax, %rdx
	movzbl	(%rdi), %eax
	andl	$-64, %eax
	orq	%rdx, %rax
	movq	%rax, ($BlkLink)(%rip)
	movslq	12(%r14), %rax
	addq	%rdi, %rax
	movq	%rax, ($BlkEnd)(%rip)
	leaq	6(%rdi), %rax
	movq	%rax, ($BlkPtr)(%rip)
	movb	(%rdi), %al
	andb	$63, %al
	cmpb	$1, %al
	jne	.LBB139_35
# %bb.36:                               # %"$15"
	leaq	getBlock(%rip), %rax
	movq	%rax, ($GetBin)(%rip)
	movl	($ExtN)(%rip), %eax
	movl	%eax, ($Extn)(%rip)
	subq	$32, %rsp
	callq	binRead
	leaq	SymTab+8(%rip), %r13
	movq	%rax, %rcx
	movq	%r13, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %r14
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%r14, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r15, env(%rip)
	subq	$32, %rsp
	callq	binRead
	addq	$32, %rsp
	cmpq	%r13, %rax
	jne	.LBB139_37
.LBB139_41:                             # %"$19"
	movq	8(%r15), %rax
	movq	%rax, env(%rip)
	testl	%esi, %esi
	jns	.LBB139_43
	jmp	.LBB139_44
.LBB139_35:
	leaq	SymTab+8(%rip), %r14
	testl	%esi, %esi
	js	.LBB139_44
.LBB139_43:                             # %"$22"
	subq	$32, %rsp
	movl	%esi, %ecx
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	callq	unLock
	addq	$32, %rsp
.LBB139_44:                             # %"$4"
	movq	%r14, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB139_37:                             # %"$18.preheader"
	leaq	SymTab+280(%rip), %r12
	movq	%r14, %rdi
	jmp	.LBB139_38
	.p2align	4, 0x90
.LBB139_40:                             # %"$21"
                                        #   in Loop: Header=BB139_38 Depth=1
	subq	$32, %rsp
	callq	binRead
	addq	$32, %rsp
	cmpq	%r13, %rax
	je	.LBB139_41
.LBB139_38:                             # %"$18"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rdi, %rbx
	subq	$32, %rsp
	movq	%rax, %rcx
	movq	%r13, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rdi
	movq	%rax, 8(%rbx)
	subq	$32, %rsp
	callq	binRead
	addq	$32, %rsp
	cmpq	%r12, %rax
	je	.LBB139_40
# %bb.39:                               # %"$20"
                                        #   in Loop: Header=BB139_38 Depth=1
	movq	(%rdi), %rdx
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	cons
	addq	$32, %rsp
	movq	%rax, (%rdi)
	jmp	.LBB139_40
.LBB139_45:                             # %"$2.i.i"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	cntErr
.LBB139_46:                             # %"$5"
	subq	$32, %rsp
	callq	dbRdErr
.LBB139_47:                             # %"$2.i39"
	subq	$32, %rsp
	leaq	.L$3(%rip), %rcx
	xorl	%edx, %edx
	callq	giveup
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _seq;
	.scl	2;
	.type	32;
	.endef
	.globl	_seq                            # -- Begin function _seq
	.p2align	4, 0x90
_seq:                                   # @_seq
.seh_proc _seq
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rbx
	movq	8(%rcx), %rax
	movq	(%rax), %r14
	testb	$6, %r14b
	jne	.LBB140_4
# %bb.1:                                # %"$3"
	testb	$8, %r14b
	jne	.LBB140_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r14
	jmp	.LBB140_4
.LBB140_2:                              # %"$6"
	movq	(%r14), %r14
.LBB140_4:                              # %"$2"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	testb	$2, %r14b
	jne	.LBB140_5
# %bb.6:                                # %"$7"
	movl	%r14d, %eax
	andl	$14, %eax
	cmpl	$8, %eax
	jne	.LBB140_27
# %bb.7:                                # %"$10"
	movq	-8(%r14), %rcx
	testb	$8, %cl
	je	.LBB140_28
# %bb.8:                                # %"$12"
	movq	%rcx, %rax
	andq	$-9, %rax
	testb	$6, %cl
	jne	.LBB140_10
	.p2align	4, 0x90
.LBB140_9:                              # %"$14"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB140_9
.LBB140_10:                             # %"$15"
	movl	%eax, %ecx
	shrl	$24, %ecx
	movq	%rax, %r14
	shrq	$36, %r14
	andl	$65280, %r14d                   # imm = 0xFF00
	orl	%ecx, %r14d
	movl	%eax, %ecx
	shrl	$4, %ecx
	andl	$1048575, %ecx                  # imm = 0xFFFFF
	movq	%rax, %rdx
	shrq	$12, %rdx
	andl	$-1048576, %edx                 # imm = 0xFFF00000
	orq	%rcx, %rdx
	shrq	$20, %rax
	movabsq	$4393751543808, %rsi            # imm = 0x3FF00000000
	andq	%rax, %rsi
	orq	%rdx, %rsi
	shlq	$6, %rsi
	jmp	.LBB140_11
.LBB140_5:
	shrq	$4, %r14
	decl	%r14d
	xorl	%esi, %esi
.LBB140_11:                             # %"$8"
	cmpl	($DBs)(%rip), %r14d
	jge	.LBB140_29
# %bb.12:                               # %"$17"
	movq	($DbFiles)(%rip), %rax
	imull	$42, %r14d, %ecx
	movslq	%ecx, %r12
	addq	%rax, %r12
	movq	%r12, ($DbFile)(%rip)
	leaq	SymTab+280(%rip), %rcx
	cmpq	%rcx, SymTab+424(%rip)
	movq	%r12, %rcx
	je	.LBB140_18
# %bb.13:                               # %"$2.i8"
	movl	(%rax), %ebx
	.p2align	4, 0x90
.LBB140_14:                             # %"$2.i.i"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	movl	$1, %r8d
	movl	%ebx, %ecx
	xorl	%edx, %edx
	movb	$1, %r9b
	callq	rdLock
	addq	$32, %rsp
	testl	%eax, %eax
	jns	.LBB140_17
# %bb.15:                               # %"$3.i.i"
                                        #   in Loop: Header=BB140_14 Depth=1
	subq	$32, %rsp
	callq	gErrno
	addq	$32, %rsp
	cmpl	$2, %eax
	je	.LBB140_14
# %bb.16:                               # %"$5.i.i"
	subq	$32, %rsp
	callq	lockErr
.LBB140_17:                             # %rdLockDb.exit.loopexit
	movq	($DbFile)(%rip), %rcx
.LBB140_18:                             # %rdLockDb.exit
	movl	(%rcx), %ecx
	subq	$32, %rsp
	movl	$6, %r8d
	movl	$6, %r9d
	movq	%rdi, %rdx
	callq	pread
	addq	$32, %rsp
	cmpq	$6, %rax
	jne	.LBB140_30
# %bb.19:                               # %blkPeek.exit
	movzbl	5(%rdi), %eax
	movzbl	4(%rdi), %ecx
	shlq	$16, %rax
	shlq	$8, %rcx
	orq	%rax, %rcx
	movzbl	3(%rdi), %eax
	orq	%rcx, %rax
	movzbl	2(%rdi), %ecx
	movzbl	1(%rdi), %edx
	shlq	$24, %rax
	shlq	$16, %rcx
	shlq	$8, %rdx
	orq	%rcx, %rdx
	orq	%rax, %rdx
	movzbl	(%rdi), %r15d
	orq	%rdx, %r15
	leaq	(,%rsi,4), %rbx
	leaq	SymTab+8(%rip), %r13
	.p2align	4, 0x90
.LBB140_20:                             # %"$18"
                                        # =>This Inner Loop Header: Depth=1
	addq	$64, %rsi
	cmpq	%r15, %rsi
	jae	.LBB140_24
# %bb.21:                               # %"$19"
                                        #   in Loop: Header=BB140_20 Depth=1
	movzbl	8(%r12), %ecx
	movq	%rsi, %r9
	shlq	%cl, %r9
	movq	($DbFile)(%rip), %rax
	movl	(%rax), %ecx
	subq	$32, %rsp
	movl	$6, %r8d
	movq	%rdi, %rdx
	callq	pread
	addq	$32, %rsp
	cmpq	$6, %rax
	jne	.LBB140_30
# %bb.22:                               # %blkPeek.exit11
                                        #   in Loop: Header=BB140_20 Depth=1
	movzbl	(%rdi), %eax
	andb	$63, %al
	addq	$256, %rbx                      # imm = 0x100
	cmpb	$1, %al
	jne	.LBB140_20
# %bb.23:                               # %"$23"
	movl	%esi, %eax
	shrl	$6, %eax
	andl	$1048575, %eax                  # imm = 0xFFFFF
	movzbl	%r14b, %ecx
	shll	$20, %ecx
	movabsq	$1099243192320, %rdx            # imm = 0xFFF0000000
	andq	%rdx, %rbx
	shrl	$8, %r14d
	shlq	$40, %r14
	orq	%rcx, %r14
	orq	%rax, %r14
	shlq	$10, %rsi
	movabsq	$1152640029630136320, %rcx      # imm = 0xFFF000000000000
	andq	%rsi, %rcx
	orq	%r14, %rcx
	orq	%rbx, %rcx
	shlq	$4, %rcx
	orq	$2, %rcx
	subq	$32, %rsp
	callq	extern
	addq	$32, %rsp
	movq	%rax, %r13
.LBB140_24:                             # %"$20"
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, SymTab+424(%rip)
	je	.LBB140_26
# %bb.25:                               # %"$2.i"
	movq	($DbFiles)(%rip), %rax
	movl	(%rax), %ecx
	subq	$32, %rsp
	movl	$1, %r8d
	xorl	%edx, %edx
	callq	unLock
	addq	$32, %rsp
.LBB140_26:                             # %unLockDb.exit
	movq	%r13, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB140_30:                             # %"$2.i9"
	subq	$32, %rsp
	callq	dbRdErr
.LBB140_29:                             # %"$16"
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	dbfErr
.LBB140_27:                             # %"$9"
	subq	$32, %rsp
	movq	%rbx, %rcx
	movq	%r14, %rdx
	callq	symErr
.LBB140_28:                             # %"$11"
	subq	$32, %rsp
	movq	%rbx, %rcx
	movq	%r14, %rdx
	callq	extErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _lieu;
	.scl	2;
	.type	32;
	.endef
	.globl	_lieu                           # -- Begin function _lieu
	.p2align	4, 0x90
_lieu:                                  # @_lieu
.seh_proc _lieu
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB141_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB141_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB141_4
.LBB141_2:                              # %"$6"
	movq	(%rax), %rax
.LBB141_4:                              # %"$2"
	movl	%eax, %edx
	andl	$14, %edx
	leaq	SymTab+8(%rip), %rcx
	cmpl	$8, %edx
	jne	.LBB141_11
# %bb.5:                                # %"$8"
	movq	-8(%rax), %rdx
	testb	$8, %dl
	je	.LBB141_11
# %bb.6:                                # %"$10"
	movq	%rdx, %rcx
	andq	$-9, %rcx
	testb	$6, %dl
	jne	.LBB141_8
	.p2align	4, 0x90
.LBB141_7:                              # %"$13"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rcx
	testb	$6, %cl
	je	.LBB141_7
.LBB141_8:                              # %"$14"
	leaq	(%rcx,%rcx), %rdx
	addq	%rdx, %rdx
	setb	%dl
	addq	%rcx, %rcx
	jae	.LBB141_10
# %bb.9:                                # %"$17"
	leaq	SymTab+8(%rip), %rcx
	testb	%dl, %dl
	cmovneq	%rcx, %rax
	movq	%rax, %rcx
	jmp	.LBB141_11
.LBB141_10:                             # %"$16"
	leaq	SymTab+8(%rip), %rcx
	testb	%dl, %dl
	cmovneq	%rax, %rcx
.LBB141_11:                             # %"$7"
	movq	%rcx, %rax
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _lock;
	.scl	2;
	.type	32;
	.endef
	.globl	_lock                           # -- Begin function _lock
	.p2align	4, 0x90
_lock:                                  # @_lock
.seh_proc _lock
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB142_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB142_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB142_4
.LBB142_2:                              # %"$6"
	movq	(%rax), %rax
.LBB142_4:                              # %"$2"
	leaq	SymTab+8(%rip), %rbx
	cmpq	%rbx, %rax
	jne	.LBB142_6
# %bb.5:                                # %"$7"
	movq	($DbFiles)(%rip), %rcx
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	jmp	.LBB142_12
.LBB142_6:                              # %"$8"
	movl	%eax, %ecx
	andl	$14, %ecx
	cmpl	$8, %ecx
	jne	.LBB142_13
# %bb.7:                                # %"$13"
	movq	-8(%rax), %rcx
	testb	$8, %cl
	je	.LBB142_14
# %bb.8:                                # %"$15"
	movq	%rcx, %rax
	andq	$-9, %rax
	testb	$6, %cl
	jne	.LBB142_10
	.p2align	4, 0x90
.LBB142_9:                              # %"$17"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB142_9
.LBB142_10:                             # %"$18"
	movl	%eax, %edx
	shrl	$24, %edx
	movq	%rax, %rcx
	shrq	$36, %rcx
	andl	$65280, %ecx                    # imm = 0xFF00
	orl	%edx, %ecx
	cmpl	($DBs)(%rip), %ecx
	jge	.LBB142_15
# %bb.11:                               # %"$20"
	movl	%eax, %edx
	shrl	$4, %edx
	andl	$1048575, %edx                  # imm = 0xFFFFF
	movq	%rax, %rsi
	shrq	$12, %rsi
	andl	$-1048576, %esi                 # imm = 0xFFF00000
	orq	%rdx, %rsi
	shrq	$20, %rax
	movabsq	$4393751543808, %rdi            # imm = 0x3FF00000000
	andq	%rax, %rdi
	orq	%rsi, %rdi
	movq	($DbFiles)(%rip), %rax
	movl	%ecx, %ecx
	imulq	$42, %rcx, %rdx
	leaq	(%rax,%rdx), %rcx
	movslq	12(%rax,%rdx), %rdx
	imulq	%rdi, %rdx
	movl	$1, %r8d
.LBB142_12:                             # %"$9"
	callq	tryLock
	movslq	%eax, %rcx
	movq	%rcx, %rax
	shlq	$4, %rax
	orq	$2, %rax
	testl	%ecx, %ecx
	cmoveq	%rbx, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
.LBB142_13:                             # %"$10"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	symErr
.LBB142_14:                             # %"$14"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	extErr
.LBB142_15:                             # %"$19"
	movq	%rsi, %rcx
	callq	dbfErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _touch;
	.scl	2;
	.type	32;
	.endef
	.globl	_touch                          # -- Begin function _touch
	.p2align	4, 0x90
_touch:                                 # @_touch
.seh_proc _touch
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rcx, %rdi
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	testb	$6, %sil
	jne	.LBB143_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB143_2
# %bb.3:                                # %"$5"
	movq	%rsi, %rcx
	callq	evList
	movq	%rax, %rsi
	jmp	.LBB143_4
.LBB143_2:                              # %"$6"
	movq	(%rsi), %rsi
.LBB143_4:                              # %"$2"
	movl	%esi, %eax
	andl	$14, %eax
	cmpl	$8, %eax
	jne	.LBB143_14
# %bb.5:                                # %"$8"
	movq	-8(%rsi), %rax
	testb	$8, %al
	je	.LBB143_14
# %bb.6:                                # %"$9"
	testb	$6, %al
	je	.LBB143_8
# %bb.7:
	leaq	-8(%rsi), %rcx
	addq	%rax, %rax
	jae	.LBB143_12
	jmp	.LBB143_14
.LBB143_8:                              # %"$2.i"
	andq	$-9, %rax
	.p2align	4, 0x90
.LBB143_9:                              # %"$4.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rcx
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB143_9
# %bb.10:
	addq	$8, %rcx
	addq	%rax, %rax
	jb	.LBB143_14
.LBB143_12:                             # %"$7.i"
	leaq	(%rax,%rax), %rdx
	movl	$2, %r8d
	shldq	$62, %rdx, %r8
	addq	%rax, %rax
	movq	%r8, (%rcx)
	jb	.LBB143_14
# %bb.13:                               # %"$9.i"
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	db
.LBB143_14:                             # %"$10"
	movq	%rsi, %rax
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _commit;
	.scl	2;
	.type	32;
	.endef
	.globl	_commit                         # -- Begin function _commit
	.p2align	4, 0x90
_commit:                                # @_commit
.seh_proc _commit
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$56, %rsp
	.seh_stackalloc 56
	leaq	48(%rsp), %rbp
	.seh_setframe %rbp, 48
	.seh_endprologue
	movq	%rcx, -16(%rbp)                 # 8-byte Spill
	movq	8(%rcx), %rax
	movq	(%rax), %rdi
	movq	8(%rax), %r14
	testb	$6, %dil
	jne	.LBB144_4
# %bb.1:                                # %"$3"
	testb	$8, %dil
	jne	.LBB144_3
# %bb.2:                                # %"$5"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdi
	jmp	.LBB144_4
.LBB144_3:                              # %"$6"
	movq	(%rdi), %rdi
.LBB144_4:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdx
	movq	%rdi, (%rdx)
	movq	%rdx, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rdx, -40(%rbp)                 # 8-byte Spill
	movq	%rdx, env(%rip)
	incl	env+128(%rip)
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, SymTab+424(%rip)
	jne	.LBB144_46
.LBB144_5:                              # %wrLockDb.exit
	movq	($DbJnl)(%rip), %rcx
	testq	%rcx, %rcx
	je	.LBB144_9
# %bb.6:                                # %"$7"
	subq	$32, %rsp
	callq	fileno
	addq	$32, %rsp
	movl	%eax, %esi
	.p2align	4, 0x90
.LBB144_7:                              # %"$2.i.i43"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	movl	%esi, %ecx
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	movb	$1, %r9b
	callq	wrLock
	addq	$32, %rsp
	testl	%eax, %eax
	jns	.LBB144_9
# %bb.8:                                # %"$3.i.i44"
                                        #   in Loop: Header=BB144_7 Depth=1
	subq	$32, %rsp
	callq	gErrno
	addq	$32, %rsp
	cmpl	$2, %eax
	je	.LBB144_7
	jmp	.LBB144_49
.LBB144_9:                              # %"$8"
	cmpq	$0, ($DbLog)(%rip)
	movq	%rdi, -32(%rbp)                 # 8-byte Spill
	je	.LBB144_42
# %bb.10:                               # %"$9"
	movq	($DbFiles)(%rip), %rax
	movl	($DBs)(%rip), %ecx
	addq	$41, %rax
	.p2align	4, 0x90
.LBB144_11:                             # %"$11"
                                        # =>This Inner Loop Header: Depth=1
	movb	$0, (%rax)
	movq	$0, -9(%rax)
	addq	$42, %rax
	decl	%ecx
	jne	.LBB144_11
# %bb.12:                               # %"$13"
	movq	($Extern)(%rip), %rax
	xorl	%r13d, %r13d
.LBB144_13:                             # %"$14"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB144_15 Depth 2
                                        #     Child Loop BB144_17 Depth 2
                                        #       Child Loop BB144_18 Depth 3
                                        #       Child Loop BB144_22 Depth 3
                                        #       Child Loop BB144_29 Depth 3
	movq	8(%rax), %rcx
	movq	(%rcx), %rdx
	testb	$15, %dl
	je	.LBB144_15
# %bb.14:                               #   in Loop: Header=BB144_13 Depth=1
	movq	%r13, %r15
	jmp	.LBB144_17
	.p2align	4, 0x90
.LBB144_15:                             # %"$16"
                                        #   Parent Loop BB144_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rax, %r15
	movq	%rdx, %rax
	movq	%r13, (%rcx)
	movq	8(%rdx), %rcx
	movq	(%rcx), %rdx
	testb	$15, %dl
	movq	%r15, %r13
	je	.LBB144_15
	jmp	.LBB144_17
	.p2align	4, 0x90
.LBB144_16:                             # %"$39"
                                        #   in Loop: Header=BB144_17 Depth=2
	movq	8(%rax), %rcx
	movq	(%rcx), %r15
	movq	%r13, (%rcx)
.LBB144_17:                             # %"$18.preheader"
                                        #   Parent Loop BB144_13 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB144_18 Depth 3
                                        #       Child Loop BB144_22 Depth 3
                                        #       Child Loop BB144_29 Depth 3
	movq	%rax, %r13
	movq	(%rax), %rax
	movq	-8(%rax), %rax
	movq	%rax, %r9
	andq	$-9, %r9
	testb	$6, %al
	jne	.LBB144_19
	.p2align	4, 0x90
.LBB144_18:                             # %"$20"
                                        #   Parent Loop BB144_13 Depth=1
                                        #     Parent Loop BB144_17 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	8(%r9), %r9
	testb	$6, %r9b
	je	.LBB144_18
.LBB144_19:                             # %"$21"
                                        #   in Loop: Header=BB144_17 Depth=2
	movq	%r9, %r12
	addq	%r9, %r12
	jae	.LBB144_27
# %bb.20:                               # %"$22"
                                        #   in Loop: Header=BB144_17 Depth=2
	movl	%r9d, %eax
	shrl	$24, %eax
	movq	%r9, %rcx
	shrq	$36, %rcx
	andl	$65280, %ecx                    # imm = 0xFF00
	orl	%eax, %ecx
	cmpl	%ecx, ($DBs)(%rip)
	jle	.LBB144_27
# %bb.21:                               # %"$24"
                                        #   in Loop: Header=BB144_17 Depth=2
	movq	($DbFiles)(%rip), %rax
	movl	%ecx, %ecx
	imulq	$42, %rcx, %rdx
	leaq	(%rax,%rdx), %rbx
	movq	%rbx, ($DbFile)(%rip)
	movl	%r9d, %ecx
	shrl	$4, %ecx
	andl	$1048575, %ecx                  # imm = 0xFFFFF
	movq	%r9, %rdi
	shrq	$12, %rdi
	andl	$-1048576, %edi                 # imm = 0xFFF00000
	orq	%rcx, %rdi
	shrq	$20, %r9
	movabsq	$4393751543808, %rcx            # imm = 0x3FF00000000
	andq	%rcx, %r9
	orq	%rdi, %r9
	shlq	$6, %r9
	movq	($DbBlock)(%rip), %rsi
	movq	%r9, ($BlkIndex)(%rip)
	movb	8(%rax,%rdx), %cl
	shlq	%cl, %r9
	movslq	12(%rax,%rdx), %rdi
	movl	(%rax,%rdx), %ecx
	.p2align	4, 0x90
.LBB144_22:                             # %"$24"
                                        #   Parent Loop BB144_13 Depth=1
                                        #     Parent Loop BB144_17 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	subq	$32, %rsp
	movq	%rsi, %rdx
	movq	%rdi, %r8
	callq	pread
	addq	$32, %rsp
	cmpq	%rdi, %rax
	jne	.LBB144_165
# %bb.23:                               # %rdBlock.exit
                                        #   in Loop: Header=BB144_22 Depth=3
	movzbl	5(%rsi), %eax
	movzbl	4(%rsi), %ecx
	shlq	$16, %rax
	shlq	$8, %rcx
	orq	%rax, %rcx
	movzbl	3(%rsi), %eax
	orq	%rcx, %rax
	movzbl	2(%rsi), %ecx
	movzbl	1(%rsi), %edx
	shlq	$24, %rax
	shlq	$16, %rcx
	shlq	$8, %rdx
	orq	%rcx, %rdx
	orq	%rax, %rdx
	movzbl	(%rsi), %eax
	andl	$-64, %eax
	orq	%rdx, %rax
	movq	%rax, ($BlkLink)(%rip)
	movslq	12(%rbx), %rax
	addq	%rsi, %rax
	movq	%rax, ($BlkEnd)(%rip)
	addq	$6, %rsi
	movq	%rsi, ($BlkPtr)(%rip)
	subq	$32, %rsp
	callq	logBlock
	addq	$32, %rsp
	movq	($BlkLink)(%rip), %r9
	testq	%r9, %r9
	movq	($DbFile)(%rip), %rbx
	je	.LBB144_25
# %bb.24:                               # %"$27"
                                        #   in Loop: Header=BB144_22 Depth=3
	movq	($DbBlock)(%rip), %rsi
	movq	%r9, ($BlkIndex)(%rip)
	movzbl	8(%rbx), %ecx
	shlq	%cl, %r9
	movslq	12(%rbx), %rdi
	movl	(%rbx), %ecx
	jmp	.LBB144_22
	.p2align	4, 0x90
.LBB144_25:                             # %"$28"
                                        #   in Loop: Header=BB144_17 Depth=2
	movb	$1, 41(%rbx)
	addq	%r12, %r12
	jb	.LBB144_27
# %bb.26:                               # %"$29"
                                        #   in Loop: Header=BB144_17 Depth=2
	incq	32(%rbx)
	.p2align	4, 0x90
.LBB144_27:                             # %"$23"
                                        #   in Loop: Header=BB144_17 Depth=2
	movq	8(%r13), %rcx
	movq	8(%rcx), %rax
	testb	$15, %al
	je	.LBB144_31
# %bb.28:                               # %"$34.preheader"
                                        #   in Loop: Header=BB144_17 Depth=2
	testq	%r15, %r15
	movq	%r15, %rax
	je	.LBB144_32
	.p2align	4, 0x90
.LBB144_29:                             # %"$36"
                                        #   Parent Loop BB144_13 Depth=1
                                        #     Parent Loop BB144_17 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	testb	$8, %al
	je	.LBB144_16
# %bb.30:                               # %"$37"
                                        #   in Loop: Header=BB144_29 Depth=3
	andq	$-9, %rax
	movq	8(%rax), %rcx
	movq	8(%rcx), %rdx
	movq	%r13, 8(%rcx)
	testq	%rdx, %rdx
	movq	%rax, %r13
	movq	%rdx, %rax
	jne	.LBB144_29
	jmp	.LBB144_32
.LBB144_31:                             # %"$33"
                                        #   in Loop: Header=BB144_13 Depth=1
	movq	%r15, 8(%rcx)
	orq	$8, %r13
	jmp	.LBB144_13
.LBB144_32:                             # %"$-1"
	movq	($DbFiles)(%rip), %r12
	movl	($DBs)(%rip), %r15d
	jmp	.LBB144_34
	.p2align	4, 0x90
.LBB144_33:                             # %"$43"
                                        #   in Loop: Header=BB144_34 Depth=1
	addq	$42, %r12
	decl	%r15d
	je	.LBB144_41
.LBB144_34:                             # %"$41"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB144_37 Depth 2
	movq	32(%r12), %r13
	testq	%r13, %r13
	je	.LBB144_33
# %bb.35:                               # %"$42"
                                        #   in Loop: Header=BB144_34 Depth=1
	movq	%r12, ($DbFile)(%rip)
	movq	($DbBlock)(%rip), %rsi
	movq	$0, ($BlkIndex)(%rip)
	movslq	12(%r12), %rdi
	movl	(%r12), %ecx
	subq	$32, %rsp
	movq	%rsi, %rdx
	movq	%rdi, %r8
	xorl	%r9d, %r9d
	callq	pread
	addq	$32, %rsp
	cmpq	%rdi, %rax
	jne	.LBB144_165
# %bb.36:                               # %rdBlock.exit52
                                        #   in Loop: Header=BB144_34 Depth=1
	movzbl	5(%rsi), %eax
	movzbl	4(%rsi), %ecx
	shlq	$16, %rax
	shlq	$8, %rcx
	orq	%rax, %rcx
	movzbl	3(%rsi), %eax
	orq	%rcx, %rax
	movzbl	2(%rsi), %ecx
	movzbl	1(%rsi), %edx
	shlq	$24, %rax
	shlq	$16, %rcx
	shlq	$8, %rdx
	orq	%rcx, %rdx
	orq	%rax, %rdx
	movzbl	(%rsi), %eax
	andl	$-64, %eax
	orq	%rdx, %rax
	movq	%rax, ($BlkLink)(%rip)
	movslq	12(%r12), %rax
	.p2align	4, 0x90
.LBB144_37:                             # %rdBlock.exit52
                                        #   Parent Loop BB144_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addq	%rsi, %rax
	movq	%rax, ($BlkEnd)(%rip)
	addq	$6, %rsi
	movq	%rsi, ($BlkPtr)(%rip)
	subq	$32, %rsp
	callq	logBlock
	addq	$32, %rsp
	decq	%r13
	je	.LBB144_33
# %bb.38:                               # %"$45"
                                        #   in Loop: Header=BB144_37 Depth=2
	movq	($BlkLink)(%rip), %r9
	testq	%r9, %r9
	je	.LBB144_33
# %bb.39:                               # %"$47"
                                        #   in Loop: Header=BB144_37 Depth=2
	movq	($DbFile)(%rip), %rbx
	movq	($DbBlock)(%rip), %rsi
	movq	%r9, ($BlkIndex)(%rip)
	movzbl	8(%rbx), %ecx
	shlq	%cl, %r9
	movslq	12(%rbx), %rdi
	movl	(%rbx), %ecx
	subq	$32, %rsp
	movq	%rsi, %rdx
	movq	%rdi, %r8
	callq	pread
	addq	$32, %rsp
	cmpq	%rdi, %rax
	jne	.LBB144_165
# %bb.40:                               # %rdBlock.exit55
                                        #   in Loop: Header=BB144_37 Depth=2
	movzbl	5(%rsi), %eax
	movzbl	4(%rsi), %ecx
	shlq	$16, %rax
	shlq	$8, %rcx
	orq	%rax, %rcx
	movzbl	3(%rsi), %eax
	orq	%rcx, %rax
	movzbl	2(%rsi), %ecx
	movzbl	1(%rsi), %edx
	shlq	$24, %rax
	shlq	$16, %rcx
	shlq	$8, %rdx
	orq	%rcx, %rdx
	orq	%rax, %rdx
	movzbl	(%rsi), %eax
	andl	$-64, %eax
	orq	%rdx, %rax
	movq	%rax, ($BlkLink)(%rip)
	movslq	12(%rbx), %rax
	jmp	.LBB144_37
.LBB144_41:                             # %"$49"
	movq	($DbLog)(%rip), %rsi
	subq	$32, %rsp
	movl	$255, %ecx
	movq	%rsi, %rdx
	callq	putc_unlocked
	movl	$255, %ecx
	movq	%rsi, %rdx
	callq	putc_unlocked
	movq	%rsi, %rcx
	callq	fflush
	movq	%rsi, %rcx
	callq	fileno
	movl	%eax, %ecx
	callq	fsync
	addq	$32, %rsp
	testl	%eax, %eax
	movq	-32(%rbp), %rdi                 # 8-byte Reload
	js	.LBB144_167
.LBB144_42:                             # %"$10"
	movq	(%r14), %rcx
	movq	8(%r14), %rsi
	testb	$14, %cl
	jne	.LBB144_44
# %bb.43:                               # %"$55"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
.LBB144_44:                             # %"$52"
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rdi
	je	.LBB144_52
# %bb.50:                               # %"$58"
	movl	($Children)(%rip), %eax
	orl	($Tell)(%rip), %eax
	je	.LBB144_52
# %bb.51:                               # %"$61"
	movq	($TellBuf)(%rip), %rax
	movq	%rax, ($BufX)(%rip)
	movq	($Ptr)(%rip), %rax
	movq	%rax, ($PtrX)(%rip)
	movq	($End)(%rip), %rax
	movq	%rax, ($EndX)(%rip)
	movl	PipeBufSize(%rip), %ecx
	movq	%rcx, %rax
	addq	$15, %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rax, ($TellBuf)(%rip)
	decl	%ecx
	movslq	%ecx, %rcx
	addq	%rax, %rcx
	movq	%rcx, ($End)(%rip)
	movb	$1, 8(%rax)
	addq	$9, %rax
	movq	%rax, ($Ptr)(%rip)
	leaq	putTell(%rip), %rax
	movq	%rax, ($PutBin)(%rip)
	movl	$0, ($Extn)(%rip)
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	binPrint
	addq	$32, %rsp
	movb	$1, %dil
	jmp	.LBB144_53
.LBB144_52:
	xorl	%edi, %edi
.LBB144_53:                             # %"$62"
	movq	($Extern)(%rip), %rax
	leaq	putTell(%rip), %r14
	xorl	%r15d, %r15d
.LBB144_54:                             # %"$63"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB144_56 Depth 2
                                        #     Child Loop BB144_58 Depth 2
                                        #       Child Loop BB144_61 Depth 3
                                        #       Child Loop BB144_100 Depth 3
                                        #       Child Loop BB144_89 Depth 3
                                        #       Child Loop BB144_74 Depth 3
                                        #       Child Loop BB144_95 Depth 3
	movq	8(%rax), %rcx
	movq	(%rcx), %rdx
	testb	$15, %dl
	je	.LBB144_56
# %bb.55:                               #   in Loop: Header=BB144_54 Depth=1
	movq	%r15, %r12
	jmp	.LBB144_58
	.p2align	4, 0x90
.LBB144_56:                             # %"$65"
                                        #   Parent Loop BB144_54 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rax, %r12
	movq	%rdx, %rax
	movq	%r15, (%rcx)
	movq	8(%rdx), %rcx
	movq	(%rcx), %rdx
	testb	$15, %dl
	movq	%r12, %r15
	je	.LBB144_56
	jmp	.LBB144_58
	.p2align	4, 0x90
.LBB144_57:                             # %"$110"
                                        #   in Loop: Header=BB144_58 Depth=2
	movq	8(%rax), %rcx
	movq	(%rcx), %r12
	movq	%r15, (%rcx)
.LBB144_58:                             # %"$67.preheader"
                                        #   Parent Loop BB144_54 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB144_61 Depth 3
                                        #       Child Loop BB144_100 Depth 3
                                        #       Child Loop BB144_89 Depth 3
                                        #       Child Loop BB144_74 Depth 3
                                        #       Child Loop BB144_95 Depth 3
	movq	%rax, %r15
	movq	(%rax), %r13
	movq	-8(%r13), %r9
	testb	$6, %r9b
	je	.LBB144_60
# %bb.59:                               #   in Loop: Header=BB144_58 Depth=2
	leaq	-8(%r13), %rax
	jmp	.LBB144_63
	.p2align	4, 0x90
.LBB144_60:                             # %"$68"
                                        #   in Loop: Header=BB144_58 Depth=2
	andq	$-9, %r9
	.p2align	4, 0x90
.LBB144_61:                             # %"$70"
                                        #   Parent Loop BB144_54 Depth=1
                                        #     Parent Loop BB144_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%r9, %rax
	movq	8(%r9), %r9
	testb	$6, %r9b
	je	.LBB144_61
# %bb.62:                               #   in Loop: Header=BB144_58 Depth=2
	addq	$8, %rax
.LBB144_63:                             # %"$69"
                                        #   in Loop: Header=BB144_58 Depth=2
	movq	%r9, %rdx
	addq	%r9, %rdx
	jae	.LBB144_93
# %bb.64:                               # %"$73"
                                        #   in Loop: Header=BB144_58 Depth=2
	movl	%r9d, %ebx
	shrl	$24, %ebx
	movq	%r9, %rcx
	shrq	$36, %rcx
	andl	$65280, %ecx                    # imm = 0xFF00
	orl	%ebx, %ecx
	addq	%rdx, %rdx
	jae	.LBB144_76
# %bb.65:                               # %"$77"
                                        #   in Loop: Header=BB144_58 Depth=2
	shrq	$2, %rdx
	movq	%rdx, (%rax)
	cmpl	%ecx, ($DBs)(%rip)
	jle	.LBB144_93
# %bb.66:                               # %"$78"
                                        #   in Loop: Header=BB144_58 Depth=2
	imull	$42, %ecx, %eax
	addq	($DbFiles)(%rip), %rax
	movq	%rax, ($DbFile)(%rip)
	movl	%r9d, %eax
	shrl	$4, %eax
	andl	$1048575, %eax                  # imm = 0xFFFFF
	movq	%r9, %rcx
	shrq	$12, %rcx
	andl	$-1048576, %ecx                 # imm = 0xFFF00000
	orq	%rax, %rcx
	shrq	$20, %r9
	movabsq	$4393751543808, %rax            # imm = 0x3FF00000000
	andq	%rax, %r9
	orq	%rcx, %r9
	shlq	$6, %r9
	subq	$32, %rsp
	movq	%r9, %rcx
	callq	cleanUp
	addq	$32, %rsp
	testb	%dil, %dil
	je	.LBB144_93
# %bb.67:                               # %"$80"
                                        #   in Loop: Header=BB144_58 Depth=2
	movq	($TellBuf)(%rip), %rcx
	movq	($Ptr)(%rip), %r8
	movl	PipeBufSize(%rip), %eax
	addl	$-10, %eax
	cltq
	addq	%rcx, %rax
	cmpq	%rax, %r8
	jb	.LBB144_92
# %bb.68:                               # %"$82"
                                        #   in Loop: Header=BB144_58 Depth=2
	movl	%edi, 4(%rbp)                   # 4-byte Spill
	movq	%rsi, -24(%rbp)                 # 8-byte Spill
	movb	$3, (%r8)
	subl	%ecx, %r8d
	leal	-7(%r8), %edi
	movl	$0, (%rcx)
	movq	%rcx, -8(%rbp)                  # 8-byte Spill
	movl	%edi, 4(%rcx)
	movl	($Tell)(%rip), %ebx
	testl	%ebx, %ebx
	je	.LBB144_71
# %bb.69:                               # %"$2.i56"
                                        #   in Loop: Header=BB144_58 Depth=2
	incl	%r8d
	subq	$32, %rsp
	movl	%ebx, %ecx
	movq	-8(%rbp), %rdx                  # 8-byte Reload
                                        # kill: def $r8d killed $r8d killed $r8
	callq	wrBytes
	addq	$32, %rsp
	testb	$1, %al
	jne	.LBB144_71
# %bb.70:                               # %"$4.i"
                                        #   in Loop: Header=BB144_58 Depth=2
	subq	$32, %rsp
	movl	%ebx, %ecx
	callq	close
	addq	$32, %rsp
	movl	$0, ($Tell)(%rip)
.LBB144_71:                             # %"$3.i"
                                        #   in Loop: Header=BB144_58 Depth=2
	movl	($Children)(%rip), %eax
	leal	(%rax,%rax,8), %ecx
	leal	(%rcx,%rcx,2), %ecx
	addl	%eax, %ecx
	movslq	%ecx, %rsi
	testq	%rsi, %rsi
	je	.LBB144_91
# %bb.72:                               # %"$7.us.i.preheader"
                                        #   in Loop: Header=BB144_58 Depth=2
	movq	($Child)(%rip), %rbx
	movq	-8(%rbp), %rax                  # 8-byte Reload
	leaq	8(%rax), %r14
	jmp	.LBB144_74
	.p2align	4, 0x90
.LBB144_73:                             # %"$14.us.i"
                                        #   in Loop: Header=BB144_74 Depth=3
	addq	$28, %rbx
	addq	$-28, %rsi
	je	.LBB144_91
.LBB144_74:                             # %"$7.us.i"
                                        #   Parent Loop BB144_54 Depth=1
                                        #     Parent Loop BB144_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$0, 16(%rbx)
	je	.LBB144_73
# %bb.75:                               # %"$13.us.i"
                                        #   in Loop: Header=BB144_74 Depth=3
	subq	$32, %rsp
	movq	%rbx, %rcx
	movq	%r14, %rdx
	movl	%edi, %r8d
	callq	wrChild
	addq	$32, %rsp
	jmp	.LBB144_73
	.p2align	4, 0x90
.LBB144_76:                             # %"$76"
                                        #   in Loop: Header=BB144_58 Depth=2
	movl	$1, %ebx
	shrdq	$2, %rbx, %rdx
	movq	%rdx, (%rax)
	cmpl	%ecx, ($DBs)(%rip)
	jle	.LBB144_93
# %bb.77:                               # %"$84"
                                        #   in Loop: Header=BB144_58 Depth=2
	movl	%edi, 4(%rbp)                   # 4-byte Spill
	movq	%rsi, -24(%rbp)                 # 8-byte Spill
	movq	($DbFiles)(%rip), %rax
	movl	%ecx, %ecx
	imulq	$42, %rcx, %rdx
	leaq	(%rax,%rdx), %rsi
	movq	%rsi, ($DbFile)(%rip)
	movl	%r9d, %ecx
	shrl	$4, %ecx
	andl	$1048575, %ecx                  # imm = 0xFFFFF
	movq	%r9, %rbx
	shrq	$12, %rbx
	andl	$-1048576, %ebx                 # imm = 0xFFF00000
	orq	%rcx, %rbx
	shrq	$20, %r9
	movabsq	$4393751543808, %rcx            # imm = 0x3FF00000000
	andq	%rcx, %r9
	orq	%rbx, %r9
	shlq	$6, %r9
	movq	($DbBlock)(%rip), %rbx
	movq	%r9, ($BlkIndex)(%rip)
	movb	8(%rax,%rdx), %cl
	shlq	%cl, %r9
	movslq	12(%rax,%rdx), %rdi
	movl	(%rax,%rdx), %ecx
	subq	$32, %rsp
	movq	%rbx, %rdx
	movq	%rdi, %r8
	callq	pread
	addq	$32, %rsp
	cmpq	%rdi, %rax
	jne	.LBB144_165
# %bb.78:                               # %rdBlock.exit59
                                        #   in Loop: Header=BB144_58 Depth=2
	movzbl	5(%rbx), %eax
	movzbl	4(%rbx), %ecx
	shlq	$16, %rax
	shlq	$8, %rcx
	orq	%rax, %rcx
	movzbl	3(%rbx), %eax
	orq	%rcx, %rax
	movzbl	2(%rbx), %ecx
	leaq	1(%rbx), %r14
	movzbl	1(%rbx), %edx
	shlq	$24, %rax
	shlq	$16, %rcx
	shlq	$8, %rdx
	orq	%rcx, %rdx
	orq	%rax, %rdx
	movzbl	(%rbx), %eax
	andl	$-64, %eax
	orq	%rdx, %rax
	movq	%rax, ($BlkLink)(%rip)
	movslq	12(%rsi), %rax
	addq	%rbx, %rax
	movq	%rax, ($BlkEnd)(%rip)
	leaq	6(%rbx), %rax
	movq	%rax, ($BlkPtr)(%rip)
	orb	$1, (%rbx)
	leaq	putBlock(%rip), %rax
	movq	%rax, ($PutBin)(%rip)
	movl	$0, ($Extn)(%rip)
	movq	(%r13), %rcx
	subq	$32, %rsp
	callq	binPrint
	addq	$32, %rsp
	movq	-8(%r13), %rsi
	testb	$6, %sil
	je	.LBB144_97
.LBB144_79:                             # %"$88"
                                        #   in Loop: Header=BB144_58 Depth=2
	subq	$32, %rsp
	xorl	%ecx, %ecx
	callq	putBlock
	addq	$32, %rsp
	movq	($DbBlock)(%rip), %rax
	movb	(%rax), %al
	andb	$63, %al
	movb	%al, (%rbx)
	movb	$0, 4(%r14)
	movl	$0, (%r14)
	movq	($DbFile)(%rip), %rbx
	movq	($BlkIndex)(%rip), %rax
	movb	8(%rbx), %cl
	shlq	%cl, %rax
	movq	($DbBlock)(%rip), %rdx
	movl	12(%rbx), %r8d
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	blkPoke
	addq	$32, %rsp
	movq	($BlkLink)(%rip), %rcx
	testq	%rcx, %rcx
	movl	4(%rbp), %edi                   # 4-byte Reload
	je	.LBB144_81
# %bb.80:                               # %"$96"
                                        #   in Loop: Header=BB144_58 Depth=2
	subq	$32, %rsp
	callq	cleanUp
	addq	$32, %rsp
.LBB144_81:                             # %"$97"
                                        #   in Loop: Header=BB144_58 Depth=2
	testb	%dil, %dil
	movq	-24(%rbp), %rsi                 # 8-byte Reload
	leaq	putTell(%rip), %r14
	je	.LBB144_93
# %bb.82:                               # %"$98"
                                        #   in Loop: Header=BB144_58 Depth=2
	movq	($TellBuf)(%rip), %rbx
	movq	($Ptr)(%rip), %r8
	movl	PipeBufSize(%rip), %eax
	addl	$-10, %eax
	cltq
	addq	%rbx, %rax
	cmpq	%rax, %r8
	jb	.LBB144_92
# %bb.83:                               # %"$100"
                                        #   in Loop: Header=BB144_58 Depth=2
	movb	$3, (%r8)
	subl	%ebx, %r8d
	leal	-7(%r8), %r14d
	movl	$0, (%rbx)
	movl	%r14d, 4(%rbx)
	movl	($Tell)(%rip), %edi
	testl	%edi, %edi
	je	.LBB144_86
# %bb.84:                               # %"$2.i61"
                                        #   in Loop: Header=BB144_58 Depth=2
	incl	%r8d
	subq	$32, %rsp
	movl	%edi, %ecx
	movq	%rbx, %rdx
                                        # kill: def $r8d killed $r8d killed $r8
	callq	wrBytes
	addq	$32, %rsp
	testb	$1, %al
	jne	.LBB144_86
# %bb.85:                               # %"$4.i62"
                                        #   in Loop: Header=BB144_58 Depth=2
	subq	$32, %rsp
	movl	%edi, %ecx
	callq	close
	addq	$32, %rsp
	movl	$0, ($Tell)(%rip)
.LBB144_86:                             # %"$3.i63"
                                        #   in Loop: Header=BB144_58 Depth=2
	movq	%rbx, -8(%rbp)                  # 8-byte Spill
	movl	($Children)(%rip), %eax
	leal	(%rax,%rax,8), %ecx
	leal	(%rcx,%rcx,2), %ecx
	addl	%eax, %ecx
	movslq	%ecx, %rsi
	testq	%rsi, %rsi
	je	.LBB144_91
# %bb.87:                               # %"$7.us.i66.preheader"
                                        #   in Loop: Header=BB144_58 Depth=2
	movq	($Child)(%rip), %rbx
	movq	-8(%rbp), %rax                  # 8-byte Reload
	leaq	8(%rax), %rdi
	jmp	.LBB144_89
	.p2align	4, 0x90
.LBB144_88:                             # %"$14.us.i68"
                                        #   in Loop: Header=BB144_89 Depth=3
	addq	$28, %rbx
	addq	$-28, %rsi
	je	.LBB144_91
.LBB144_89:                             # %"$7.us.i66"
                                        #   Parent Loop BB144_54 Depth=1
                                        #     Parent Loop BB144_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$0, 16(%rbx)
	je	.LBB144_88
# %bb.90:                               # %"$13.us.i67"
                                        #   in Loop: Header=BB144_89 Depth=3
	subq	$32, %rsp
	movq	%rbx, %rcx
	movq	%rdi, %rdx
	movl	%r14d, %r8d
	callq	wrChild
	addq	$32, %rsp
	jmp	.LBB144_88
.LBB144_91:                             # %tellEnd.exit69
                                        #   in Loop: Header=BB144_58 Depth=2
	movq	-8(%rbp), %rax                  # 8-byte Reload
	movb	$1, 8(%rax)
	addq	$9, %rax
	movq	%rax, ($Ptr)(%rip)
	leaq	putTell(%rip), %r14
	movq	%r14, ($PutBin)(%rip)
	movl	$0, ($Extn)(%rip)
	subq	$32, %rsp
	movq	-32(%rbp), %rcx                 # 8-byte Reload
	callq	binPrint
	addq	$32, %rsp
	movq	-24(%rbp), %rsi                 # 8-byte Reload
	movl	4(%rbp), %edi                   # 4-byte Reload
.LBB144_92:                             # %"$101"
                                        #   in Loop: Header=BB144_58 Depth=2
	movq	%r14, ($PutBin)(%rip)
	movl	$0, ($Extn)(%rip)
	subq	$32, %rsp
	movq	%r13, %rcx
	callq	binPrint
	addq	$32, %rsp
	.p2align	4, 0x90
.LBB144_93:                             # %"$74"
                                        #   in Loop: Header=BB144_58 Depth=2
	movq	8(%r15), %rcx
	movq	8(%rcx), %rax
	testb	$15, %al
	je	.LBB144_105
# %bb.94:                               # %"$105.preheader"
                                        #   in Loop: Header=BB144_58 Depth=2
	testq	%r12, %r12
	movq	%r12, %rax
	je	.LBB144_106
	.p2align	4, 0x90
.LBB144_95:                             # %"$107"
                                        #   Parent Loop BB144_54 Depth=1
                                        #     Parent Loop BB144_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	testb	$8, %al
	je	.LBB144_57
# %bb.96:                               # %"$108"
                                        #   in Loop: Header=BB144_95 Depth=3
	andq	$-9, %rax
	movq	8(%rax), %rcx
	movq	8(%rcx), %rdx
	movq	%r15, 8(%rcx)
	testq	%rdx, %rdx
	movq	%rax, %r15
	movq	%rdx, %rax
	jne	.LBB144_95
	jmp	.LBB144_106
.LBB144_97:                             # %"$87.preheader"
                                        #   in Loop: Header=BB144_58 Depth=2
	andq	$-9, %rsi
	jmp	.LBB144_100
	.p2align	4, 0x90
.LBB144_98:                             # %"$89"
                                        #   in Loop: Header=BB144_100 Depth=3
	callq	binPrint
	addq	$32, %rsp
.LBB144_99:                             # %"$89"
                                        #   in Loop: Header=BB144_100 Depth=3
	testb	$6, %sil
	jne	.LBB144_79
.LBB144_100:                            # %"$87"
                                        #   Parent Loop BB144_54 Depth=1
                                        #     Parent Loop BB144_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	(%rsi), %rdi
	movq	8(%rsi), %rsi
	testb	$15, %dil
	je	.LBB144_103
# %bb.101:                              # %"$90"
                                        #   in Loop: Header=BB144_100 Depth=3
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rdi
	je	.LBB144_99
# %bb.102:                              # %"$95"
                                        #   in Loop: Header=BB144_100 Depth=3
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	binPrint
	leaq	SymTab+280(%rip), %rcx
	jmp	.LBB144_98
	.p2align	4, 0x90
.LBB144_103:                            # %"$91"
                                        #   in Loop: Header=BB144_100 Depth=3
	movq	8(%rdi), %rcx
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rcx
	je	.LBB144_99
# %bb.104:                              # %"$92"
                                        #   in Loop: Header=BB144_100 Depth=3
	subq	$32, %rsp
	callq	binPrint
	addq	$32, %rsp
	movq	(%rdi), %rcx
	subq	$32, %rsp
	jmp	.LBB144_98
.LBB144_105:                            # %"$104"
                                        #   in Loop: Header=BB144_54 Depth=1
	movq	%r12, 8(%rcx)
	orq	$8, %r15
	jmp	.LBB144_54
.LBB144_106:                            # %"$-2"
	testb	%dil, %dil
	je	.LBB144_116
# %bb.107:                              # %"$112"
	movq	%rsi, %r15
	movq	($Ptr)(%rip), %r8
	movq	($TellBuf)(%rip), %rsi
	movb	$3, (%r8)
	subl	%esi, %r8d
	leal	-7(%r8), %r14d
	movl	$0, (%rsi)
	movl	%r14d, 4(%rsi)
	movl	($Tell)(%rip), %ebx
	testl	%ebx, %ebx
	je	.LBB144_110
# %bb.108:                              # %"$2.i71"
	incl	%r8d
	subq	$32, %rsp
	movl	%ebx, %ecx
	movq	%rsi, %rdx
                                        # kill: def $r8d killed $r8d killed $r8
	callq	wrBytes
	addq	$32, %rsp
	testb	$1, %al
	jne	.LBB144_110
# %bb.109:                              # %"$4.i72"
	subq	$32, %rsp
	movl	%ebx, %ecx
	callq	close
	addq	$32, %rsp
	movl	$0, ($Tell)(%rip)
.LBB144_110:                            # %"$3.i73"
	movl	($Children)(%rip), %eax
	leal	(%rax,%rax,8), %ecx
	leal	(%rcx,%rcx,2), %ecx
	addl	%eax, %ecx
	movslq	%ecx, %rdi
	testq	%rdi, %rdi
	je	.LBB144_115
# %bb.111:                              # %"$7.us.i76.preheader"
	movq	($Child)(%rip), %rbx
	addq	$8, %rsi
	jmp	.LBB144_113
	.p2align	4, 0x90
.LBB144_112:                            # %"$14.us.i78"
                                        #   in Loop: Header=BB144_113 Depth=1
	addq	$28, %rbx
	addq	$-28, %rdi
	je	.LBB144_115
.LBB144_113:                            # %"$7.us.i76"
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, 16(%rbx)
	je	.LBB144_112
# %bb.114:                              # %"$13.us.i77"
                                        #   in Loop: Header=BB144_113 Depth=1
	subq	$32, %rsp
	movq	%rbx, %rcx
	movq	%rsi, %rdx
	movl	%r14d, %r8d
	callq	wrChild
	addq	$32, %rsp
	jmp	.LBB144_112
.LBB144_46:                             # %"$2.i"
	movq	($DbFiles)(%rip), %rax
	movl	(%rax), %esi
	.p2align	4, 0x90
.LBB144_47:                             # %"$2.i.i"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	movl	$1, %r8d
	movl	%esi, %ecx
	xorl	%edx, %edx
	movb	$1, %r9b
	callq	wrLock
	addq	$32, %rsp
	testl	%eax, %eax
	jns	.LBB144_5
# %bb.48:                               # %"$3.i.i"
                                        #   in Loop: Header=BB144_47 Depth=1
	subq	$32, %rsp
	callq	gErrno
	addq	$32, %rsp
	cmpl	$2, %eax
	je	.LBB144_47
.LBB144_49:                             # %"$5.i.i"
	subq	$32, %rsp
	callq	lockErr
.LBB144_115:                            # %tellEnd.exit79
	movq	($BufX)(%rip), %rax
	movq	%rax, ($TellBuf)(%rip)
	movq	($PtrX)(%rip), %rax
	movq	%rax, ($Ptr)(%rip)
	movq	($EndX)(%rip), %rax
	movq	%rax, ($End)(%rip)
	movq	%r15, %rsi
.LBB144_116:                            # %"$113"
	movq	(%rsi), %rcx
	testb	$14, %cl
	jne	.LBB144_118
# %bb.117:                              # %"$117"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
.LBB144_118:                            # %"$114"
	movq	($DbJnl)(%rip), %rsi
	testq	%rsi, %rsi
	je	.LBB144_120
# %bb.119:                              # %"$119"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	fflush
	movq	%rsi, %rcx
	callq	fileno
	movl	%eax, %ecx
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	callq	unLock
	addq	$32, %rsp
.LBB144_120:                            # %"$120"
	movq	SymTab+520(%rip), %rdi
	testb	$15, %dil
	je	.LBB144_122
# %bb.121:                              # %"$122"
	cmpq	$0, ($DbLog)(%rip)
	jne	.LBB144_148
	jmp	.LBB144_155
.LBB144_122:                            # %"$121"
	movq	($OutFile)(%rip), %r14
	movq	8(%rdi), %rdx
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rdx
	jne	.LBB144_124
# %bb.123:
	movl	$2, %ecx
	movl	$1, %eax
	jmp	.LBB144_134
.LBB144_124:                            # %"$3.i81"
	movq	-8(%rdx), %rcx
	testb	$8, %cl
	jne	.LBB144_170
	.p2align	4, 0x90
# %bb.125:                              # %"$8.i"
	testb	$6, %cl
	jne	.LBB144_127
.LBB144_126:                            # %"$8.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rcx
	testb	$6, %cl
	je	.LBB144_126
.LBB144_127:                            # %xName.exit
	movl	$1, %eax
	testb	$4, %cl
	movq	%rcx, %rdx
	je	.LBB144_130
# %bb.128:                              # %"$3.i.i83.preheader"
	movl	$1, %eax
	movq	%rcx, %rdx
	.p2align	4, 0x90
.LBB144_129:                            # %"$3.i.i83"
                                        # =>This Inner Loop Header: Depth=1
	addq	$8, %rax
	movq	4(%rdx), %rdx
	testb	$4, %dl
	jne	.LBB144_129
.LBB144_130:                            # %"$4.i.i"
	shrq	$4, %rdx
	je	.LBB144_132
	.p2align	4, 0x90
.LBB144_131:                            # %"$6.i.i"
                                        # =>This Inner Loop Header: Depth=1
	incq	%rax
	shrq	$8, %rdx
	jne	.LBB144_131
.LBB144_132:                            # %bufSize.exit.i
	testb	$2, %cl
	jne	.LBB144_134
# %bb.133:                              # %"$3.i86"
	movq	-4(%rcx), %rdx
	movq	%rdx, %rbx
	shrq	$8, %rbx
	cmpb	$126, %dl
	jne	.LBB144_135
	jmp	.LBB144_140
.LBB144_134:                            # %"$2.i85"
	movq	%rcx, %rdx
	shrq	$4, %rdx
	movq	%rcx, %rbx
	shrq	$12, %rbx
	cmpb	$126, %dl
	je	.LBB144_140
.LBB144_135:                            # %"$4.i87"
	cmpb	$64, %dl
	je	.LBB144_139
# %bb.136:                              # %"$4.i87"
	cmpb	$43, %dl
	jne	.LBB144_142
# %bb.137:                              # %"$9.i"
	cmpb	$126, %bl
	je	.LBB144_140
# %bb.138:                              # %"$9.i"
	cmpb	$64, %bl
	jne	.LBB144_142
.LBB144_139:                            # %"$11.i"
	movq	($PilLen)(%rip), %rdx
	jmp	.LBB144_141
.LBB144_140:                            # %"$17.i"
	movq	($UsrLen)(%rip), %rdx
.LBB144_141:                            # %pathSize.exit
	leaq	-1(%rax,%rdx), %rax
.LBB144_142:                            # %pathSize.exit
	addq	$15, %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	subq	$32, %rsp
	movq	%rsi, %rdx
	callq	pathString
	addq	$32, %rsp
	movl	$4112, %eax                     # imm = 0x1010
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	openWrAppend
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB144_169
# %bb.143:                              # %"$124"
	movl	%eax, (%rbx)
	movl	$0, 4(%rbx)
	movb	$0, 4104(%rbx)
	movq	%rbx, ($OutFile)(%rip)
	leaq	_putStdout(%rip), %rax
	movq	%rax, ($PutBin)(%rip)
	movl	$0, ($Extn)(%rip)
	movq	(%rdi), %rsi
	testb	$15, %sil
	jne	.LBB144_147
	.p2align	4, 0x90
.LBB144_144:                            # %"$126"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rcx
	movq	8(%rsi), %rsi
	subq	$32, %rsp
	callq	binPrint
	addq	$32, %rsp
	testb	$15, %sil
	je	.LBB144_144
# %bb.145:                              # %"$127"
	movl	4(%rbx), %r8d
	testl	%r8d, %r8d
	je	.LBB144_147
# %bb.146:                              # %"$6.i89"
	movl	$0, 4(%rbx)
	movl	(%rbx), %ecx
	movq	%rbx, %rdx
	addq	$8, %rdx
	subq	$32, %rsp
	callq	wrBytes
	addq	$32, %rsp
.LBB144_147:                            # %flush.exit
	movl	(%rbx), %ecx
	subq	$32, %rsp
	callq	close
	addq	$32, %rsp
	leaq	SymTab+8(%rip), %rax
	movq	%rax, (%rdi)
	movq	%r14, ($OutFile)(%rip)
	cmpq	$0, ($DbLog)(%rip)
	je	.LBB144_155
.LBB144_148:                            # %"$128"
	movq	($DbFiles)(%rip), %rsi
	movl	($DBs)(%rip), %edi
	jmp	.LBB144_150
	.p2align	4, 0x90
.LBB144_149:                            # %"$6.i93"
                                        #   in Loop: Header=BB144_150 Depth=1
	addq	$42, %rsi
	decl	%edi
	je	.LBB144_153
.LBB144_150:                            # %"$2.i91"
                                        # =>This Inner Loop Header: Depth=1
	cmpb	$1, 41(%rsi)
	jne	.LBB144_149
# %bb.151:                              # %"$4.i92"
                                        #   in Loop: Header=BB144_150 Depth=1
	movl	(%rsi), %ecx
	subq	$32, %rsp
	callq	fsync
	addq	$32, %rsp
	testl	%eax, %eax
	jns	.LBB144_149
# %bb.152:                              # %"$5.i"
	subq	$32, %rsp
	movq	-16(%rbp), %rcx                 # 8-byte Reload
	callq	dbSyncErr
.LBB144_153:                            # %fsyncDB.exit
	movq	($DbLog)(%rip), %rsi
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	fseek0
	addq	$32, %rsp
	testb	$1, %al
	je	.LBB144_166
# %bb.154:                              # %"$3.i95"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	fileno
	movl	%eax, %ecx
	callq	truncate0
	addq	$32, %rsp
	testb	$1, %al
	je	.LBB144_166
.LBB144_155:                            # %"$129"
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, SymTab+424(%rip)
	je	.LBB144_162
# %bb.156:                              # %"$2.i98"
	movl	($DBs)(%rip), %esi
	decl	%esi
	je	.LBB144_161
# %bb.157:                              # %"$7.preheader.i101"
	movq	($DbFiles)(%rip), %rdi
	addq	$82, %rdi
	jmp	.LBB144_159
	.p2align	4, 0x90
.LBB144_158:                            # %"$10.i"
                                        #   in Loop: Header=BB144_159 Depth=1
	addq	$42, %rdi
	decl	%esi
	je	.LBB144_161
.LBB144_159:                            # %"$7.i"
                                        # =>This Inner Loop Header: Depth=1
	cmpb	$1, (%rdi)
	jne	.LBB144_158
# %bb.160:                              # %"$9.i102"
                                        #   in Loop: Header=BB144_159 Depth=1
	movl	-40(%rdi), %ecx
	subq	$32, %rsp
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	callq	unLock
	addq	$32, %rsp
	movb	$0, (%rdi)
	jmp	.LBB144_158
.LBB144_161:                            # %"$8.i104"
	movq	$2, SymTab+424(%rip)
	movq	($DbFiles)(%rip), %rax
	movl	(%rax), %ecx
	subq	$32, %rsp
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	callq	unLock
	addq	$32, %rsp
.LBB144_162:                            # %unLockDb.exit
	subq	$32, %rsp
	callq	unsync
	addq	$32, %rsp
	decl	env+128(%rip)
	movq	($DbFiles)(%rip), %rax
	movl	($DBs)(%rip), %ecx
	addq	$32, %rax
	.p2align	4, 0x90
.LBB144_163:                            # %"$130"
                                        # =>This Inner Loop Header: Depth=1
	movq	$-1, (%rax)
	addq	$42, %rax
	decl	%ecx
	jne	.LBB144_163
# %bb.164:                              # %"$132"
	movq	-40(%rbp), %rax                 # 8-byte Reload
	movq	8(%rax), %rax
	movq	%rax, env(%rip)
	leaq	SymTab+280(%rip), %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB144_165:                            # %"$2.i.i46"
	subq	$32, %rsp
	callq	dbRdErr
.LBB144_166:                            # %"$4.i96"
	subq	$32, %rsp
	callq	strErrno
	leaq	.L$59(%rip), %r8
	jmp	.LBB144_168
.LBB144_167:                            # %"$50"
	subq	$32, %rsp
	callq	strErrno
	leaq	.L$64(%rip), %r8
.LBB144_168:                            # %"$50"
	movq	-16(%rbp), %rcx                 # 8-byte Reload
	xorl	%edx, %edx
	movq	%rax, %r9
	callq	err
.LBB144_169:                            # %"$123"
	movq	8(%rdi), %rdx
	subq	$32, %rsp
	movq	-16(%rbp), %rcx                 # 8-byte Reload
	callq	openErr
.LBB144_170:                            # %"$6.i"
	subq	$32, %rsp
	movq	-16(%rbp), %rcx                 # 8-byte Reload
	callq	nameErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _mark;
	.scl	2;
	.type	32;
	.endef
	.globl	_mark                           # -- Begin function _mark
	.p2align	4, 0x90
_mark:                                  # @_mark
.seh_proc _mark
# %bb.0:                                # %"$1"
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rcx
	movq	(%rcx), %rax
	movq	8(%rcx), %r14
	testb	$6, %al
	jne	.LBB145_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB145_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
.LBB145_4:                              # %"$2"
	cmpq	$2, %rax
	jne	.LBB145_8
.LBB145_5:                              # %"$7"
	movl	($DBs)(%rip), %esi
	leaq	SymTab+8(%rip), %r12
	movl	%esi, %eax
	decl	%eax
	js	.LBB145_26
# %bb.6:                                # %"$11.preheader"
	movq	($DbFiles)(%rip), %rdi
	addq	$16, %rdi
	.p2align	4, 0x90
.LBB145_7:                              # %"$11"
                                        # =>This Inner Loop Header: Depth=1
	movq	$0, 8(%rdi)
	movq	(%rdi), %rcx
	callq	free
	movq	$0, (%rdi)
	decl	%esi
	addq	$42, %rdi
	testl	%esi, %esi
	jg	.LBB145_7
	jmp	.LBB145_26
.LBB145_2:                              # %"$6"
	movq	(%rax), %rax
	cmpq	$2, %rax
	je	.LBB145_5
.LBB145_8:                              # %"$8"
	movl	%eax, %ecx
	andl	$14, %ecx
	cmpl	$8, %ecx
	jne	.LBB145_27
# %bb.9:                                # %"$14"
	movq	-8(%rax), %rcx
	testb	$8, %cl
	je	.LBB145_28
# %bb.10:                               # %"$16"
	movq	%rcx, %rax
	andq	$-9, %rax
	testb	$6, %cl
	jne	.LBB145_12
	.p2align	4, 0x90
.LBB145_11:                             # %"$18"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB145_11
.LBB145_12:                             # %"$19"
	movl	%eax, %ecx
	shrl	$24, %ecx
	movq	%rax, %rbx
	shrq	$36, %rbx
	andl	$65280, %ebx                    # imm = 0xFF00
	orl	%ecx, %ebx
	leaq	SymTab+280(%rip), %r12
	cmpl	($DBs)(%rip), %ebx
	jge	.LBB145_26
# %bb.13:                               # %"$21"
	movq	%rax, %r13
	shrq	$4, %r13
	movl	%r13d, %ecx
	andl	$1048568, %ecx                  # imm = 0xFFFF8
	movq	%rax, %rdx
	shrq	$12, %rdx
	andl	$-1048576, %edx                 # imm = 0xFFF00000
	orq	%rcx, %rdx
	shrq	$20, %rax
	movabsq	$4393751543808, %rsi            # imm = 0x3FF00000000
	andq	%rax, %rsi
	orq	%rdx, %rsi
	movq	(%r14), %r14
	testb	$6, %r14b
	jne	.LBB145_17
# %bb.14:                               # %"$24"
	testb	$8, %r14b
	jne	.LBB145_15
# %bb.16:                               # %"$26"
	movq	%r14, %rcx
	callq	evList
	movq	%rax, %r14
	jmp	.LBB145_17
.LBB145_15:                             # %"$27"
	movq	(%r14), %r14
.LBB145_17:                             # %"$23"
	movq	($DbFiles)(%rip), %rdi
	movl	%ebx, %eax
	imulq	$42, %rax, %rbp
	movq	16(%rdi,%rbp), %rbx
	shrq	$3, %rsi
	cmpq	24(%rdi,%rbp), %rsi
	jb	.LBB145_20
# %bb.18:                               # %"$28"
	leaq	1(%rsi), %r15
	movq	%rbx, %rcx
	movq	%r15, %rdx
	callq	realloc
	testq	%rax, %rax
	je	.LBB145_29
# %bb.19:                               # %alloc.exit
	movq	%rax, %rbx
	movq	%rax, 16(%rdi,%rbp)
	movq	24(%rdi,%rbp), %rax
	movq	%rbx, %rcx
	addq	%rax, %rcx
	movq	%r15, %r8
	subq	%rax, %r8
	xorl	%edx, %edx
	callq	memset
	movq	%r15, 24(%rdi,%rbp)
.LBB145_20:                             # %"$29"
	andb	$7, %r13b
	movl	$1, %eax
	movl	%r13d, %ecx
	shlq	%cl, %rax
	movb	(%rbx,%rsi), %cl
	testb	%al, %cl
	je	.LBB145_23
# %bb.21:                               # %"$32"
	cmpq	$2, %r14
	jne	.LBB145_26
# %bb.22:                               # %"$33"
	notb	%al
	andb	%al, %cl
	jmp	.LBB145_25
.LBB145_23:                             # %"$31"
	leaq	SymTab+8(%rip), %r12
	leaq	SymTab+280(%rip), %rdx
	cmpq	%rdx, %r14
	jne	.LBB145_26
# %bb.24:                               # %"$35"
	orb	%al, %cl
.LBB145_25:                             # %"$9"
	movb	%cl, (%rbx,%rsi)
.LBB145_26:                             # %"$9"
	movq	%r12, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB145_27:                             # %"$13"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	symErr
.LBB145_28:                             # %"$15"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	extErr
.LBB145_29:                             # %"$2.i"
	leaq	.L$3(%rip), %rcx
	xorl	%edx, %edx
	callq	giveup
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _free;
	.scl	2;
	.type	32;
	.endef
	.globl	_free                           # -- Begin function _free
	.p2align	4, 0x90
_free:                                  # @_free
.seh_proc _free
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	leaq	32(%rsp), %rbp
	.seh_setframe %rbp, 32
	movdqa	%xmm6, -16(%rbp)                # 16-byte Spill
	.seh_savexmm %xmm6, 16
	.seh_endprologue
	movq	%rcx, %rdi
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB146_4
# %bb.1:                                # %"$3.i"
	testb	$8, %al
	jne	.LBB146_2
# %bb.3:                                # %"$5.i"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB146_4
.LBB146_2:                              # %"$6.i"
	movq	(%rax), %rax
.LBB146_4:                              # %"$2.i"
	testb	$2, %al
	je	.LBB146_20
# %bb.5:                                # %evCnt.exit
	movq	%rax, %rcx
	shrq	$4, %rcx
	movl	%ecx, %r13d
	negl	%r13d
	testb	$8, %al
	cmovel	%ecx, %r13d
	decl	%r13d
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	cmpl	($DBs)(%rip), %r13d
	jge	.LBB146_21
# %bb.6:                                # %"$3"
	movq	($DbFiles)(%rip), %rcx
	imull	$42, %r13d, %eax
	cltq
	addq	%rcx, %rax
	movq	%rax, ($DbFile)(%rip)
	leaq	SymTab+280(%rip), %rdx
	cmpq	%rdx, SymTab+424(%rip)
	je	.LBB146_12
# %bb.7:                                # %"$2.i4"
	movl	(%rcx), %edi
	.p2align	4, 0x90
.LBB146_8:                              # %"$2.i.i5"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	movl	$1, %r8d
	movl	%edi, %ecx
	xorl	%edx, %edx
	movb	$1, %r9b
	callq	rdLock
	addq	$32, %rsp
	testl	%eax, %eax
	jns	.LBB146_11
# %bb.9:                                # %"$3.i.i"
                                        #   in Loop: Header=BB146_8 Depth=1
	subq	$32, %rsp
	callq	gErrno
	addq	$32, %rsp
	cmpl	$2, %eax
	je	.LBB146_8
# %bb.10:                               # %"$5.i.i"
	subq	$32, %rsp
	callq	lockErr
.LBB146_11:                             # %rdLockDb.exit.loopexit
	movq	($DbFile)(%rip), %rax
.LBB146_12:                             # %rdLockDb.exit
	movl	(%rax), %ecx
	subq	$32, %rsp
	movl	$12, %r8d
	movq	%rsi, %rdx
	xorl	%r9d, %r9d
	callq	pread
	addq	$32, %rsp
	cmpq	$12, %rax
	jne	.LBB146_22
# %bb.13:                               # %blkPeek.exit
	movzbl	5(%rsi), %eax
	movzbl	4(%rsi), %ecx
	shlq	$16, %rax
	shlq	$8, %rcx
	orq	%rax, %rcx
	movzbl	3(%rsi), %eax
	orq	%rcx, %rax
	movzbl	2(%rsi), %ecx
	movzbl	1(%rsi), %edx
	shlq	$24, %rax
	shlq	$16, %rcx
	shlq	$8, %rdx
	orq	%rcx, %rdx
	orq	%rax, %rdx
	movzbl	(%rsi), %eax
	orq	%rdx, %rax
	movq	%rax, ($BlkLink)(%rip)
	movzbl	11(%rsi), %ecx
	movzbl	10(%rsi), %eax
	shlq	$16, %rcx
	shlq	$8, %rax
	orq	%rcx, %rax
	movzbl	9(%rsi), %ecx
	orq	%rax, %rcx
	movzbl	8(%rsi), %edx
	movzbl	7(%rsi), %ebx
	shlq	$24, %rcx
	shlq	$16, %rdx
	shlq	$8, %rbx
	orq	%rdx, %rbx
	orq	%rcx, %rbx
	movzbl	6(%rsi), %ecx
	orq	%rbx, %rcx
	movabsq	$274810798080, %rdx             # imm = 0x3FFC000000
	andq	%rcx, %rdx
                                        # kill: def $ecx killed $ecx killed $rcx def $rcx
	shrl	$6, %ecx
	andl	$1048575, %ecx                  # imm = 0xFFFFF
	movzbl	%r13b, %ebx
	shll	$20, %ebx
	shrl	$8, %r13d
	shlq	$40, %r13
	orq	%rbx, %r13
	andl	$16760832, %eax                 # imm = 0xFFC000
	shlq	$34, %rax
	orq	%r13, %rax
	orq	%rcx, %rax
	leaq	(%rax,%rdx,4), %rcx
	shlq	$4, %rcx
	orq	$2, %rcx
	subq	$32, %rsp
	callq	extern
	leaq	SymTab+8(%rip), %rdx
	movq	%rax, %rcx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rdx
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rdx, -24(%rbp)                 # 8-byte Spill
	movq	%rdx, (%rbx)
	movq	%rbx, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rbx, -32(%rbp)                 # 8-byte Spill
	movq	%rbx, env(%rip)
	movq	($BlkLink)(%rip), %rbx
	testq	%rbx, %rbx
	je	.LBB146_17
# %bb.14:                               # %"$5.preheader"
	leaq	SymTab+8(%rip), %r15
	pxor	%xmm6, %xmm6
	movq	-24(%rbp), %rsi                 # 8-byte Reload
	.p2align	4, 0x90
.LBB146_15:                             # %"$5"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rbx, %rax
	shrq	$6, %rax
	movl	%eax, %ecx
	andl	$1048575, %ecx                  # imm = 0xFFFFF
	shlq	$8, %rax
	movabsq	$1099243192320, %rdx            # imm = 0xFFF0000000
	andq	%rdx, %rax
	movq	%rbx, %rdx
	shlq	$10, %rdx
	movabsq	$1152640029630136320, %rdi      # imm = 0xFFF000000000000
	andq	%rdi, %rdx
	orq	%rax, %rdx
	orq	%r13, %rcx
	orq	%rdx, %rcx
	shlq	$4, %rcx
	orq	$2, %rcx
	subq	$32, %rsp
	callq	extern
	movq	%rax, %rcx
	movq	%r15, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %r12
	movq	%rax, 8(%rsi)
	movq	($DbFile)(%rip), %r14
	movq	($DbBlock)(%rip), %rdi
	movq	%rbx, ($BlkIndex)(%rip)
	movzbl	8(%r14), %ecx
	shlq	%cl, %rbx
	movslq	12(%r14), %rsi
	movl	(%r14), %ecx
	subq	$32, %rsp
	movq	%rdi, %rdx
	movq	%rsi, %r8
	movq	%rbx, %r9
	callq	pread
	addq	$32, %rsp
	cmpq	%rsi, %rax
	jne	.LBB146_22
# %bb.16:                               # %rdBlock.exit
                                        #   in Loop: Header=BB146_15 Depth=1
	movzwl	4(%rdi), %eax
	movd	%eax, %xmm0
	punpcklbw	%xmm6, %xmm0            # xmm0 = xmm0[0],xmm6[0],xmm0[1],xmm6[1],xmm0[2],xmm6[2],xmm0[3],xmm6[3],xmm0[4],xmm6[4],xmm0[5],xmm6[5],xmm0[6],xmm6[6],xmm0[7],xmm6[7]
	punpcklwd	%xmm6, %xmm0            # xmm0 = xmm0[0],xmm6[0],xmm0[1],xmm6[1],xmm0[2],xmm6[2],xmm0[3],xmm6[3]
	punpckldq	%xmm6, %xmm0            # xmm0 = xmm0[0],xmm6[0],xmm0[1],xmm6[1]
	movdqa	%xmm0, %xmm1
	psllq	$8, %xmm1
	psllq	$16, %xmm0
	pshufd	$78, %xmm0, %xmm0               # xmm0 = xmm0[2,3,0,1]
	por	%xmm1, %xmm0
	movq	%xmm0, %rax
	movzbl	3(%rdi), %ecx
	orq	%rax, %rcx
	movzwl	1(%rdi), %eax
	movd	%eax, %xmm0
	punpcklbw	%xmm6, %xmm0            # xmm0 = xmm0[0],xmm6[0],xmm0[1],xmm6[1],xmm0[2],xmm6[2],xmm0[3],xmm6[3],xmm0[4],xmm6[4],xmm0[5],xmm6[5],xmm0[6],xmm6[6],xmm0[7],xmm6[7]
	punpcklwd	%xmm6, %xmm0            # xmm0 = xmm0[0],xmm6[0],xmm0[1],xmm6[1],xmm0[2],xmm6[2],xmm0[3],xmm6[3]
	punpckldq	%xmm6, %xmm0            # xmm0 = xmm0[0],xmm6[0],xmm0[1],xmm6[1]
	shlq	$24, %rcx
	movdqa	%xmm0, %xmm1
	psllq	$8, %xmm1
	psllq	$16, %xmm0
	pshufd	$78, %xmm0, %xmm0               # xmm0 = xmm0[2,3,0,1]
	por	%xmm1, %xmm0
	movq	%xmm0, %rbx
	orq	%rcx, %rbx
	movzbl	(%rdi), %eax
	andl	$-64, %eax
	movq	%rbx, %rcx
	orq	%rax, %rcx
	movq	%rcx, ($BlkLink)(%rip)
	movslq	12(%r14), %rcx
	addq	%rdi, %rcx
	addq	$6, %rdi
	orq	%rax, %rbx
	movq	%rcx, ($BlkEnd)(%rip)
	movq	%rdi, ($BlkPtr)(%rip)
	movq	%r12, %rsi
	jne	.LBB146_15
.LBB146_17:                             # %"$6"
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, SymTab+424(%rip)
	je	.LBB146_19
# %bb.18:                               # %"$2.i10"
	movq	($DbFiles)(%rip), %rax
	movl	(%rax), %ecx
	subq	$32, %rsp
	movl	$1, %r8d
	xorl	%edx, %edx
	callq	unLock
	addq	$32, %rsp
.LBB146_19:                             # %unLockDb.exit
	movq	-32(%rbp), %rax                 # 8-byte Reload
	movq	8(%rax), %rax
	movq	%rax, env(%rip)
	movq	-24(%rbp), %rax                 # 8-byte Reload
	movaps	-16(%rbp), %xmm6                # 16-byte Reload
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB146_22:                             # %"$2.i7"
	subq	$32, %rsp
	callq	dbRdErr
.LBB146_20:                             # %"$2.i.i"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	cntErr
.LBB146_21:                             # %"$2"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	dbfErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _dbck;
	.scl	2;
	.type	32;
	.endef
	.globl	_dbck                           # -- Begin function _dbck
	.p2align	4, 0x90
_dbck:                                  # @_dbck
.seh_proc _dbck
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	leaq	32(%rsp), %rbp
	.seh_setframe %rbp, 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rdi
	movq	(%rdi), %rbx
	testb	$6, %bl
	jne	.LBB147_4
# %bb.1:                                # %"$3"
	testb	$8, %bl
	jne	.LBB147_3
# %bb.2:                                # %"$5"
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rbx
	jmp	.LBB147_4
.LBB147_3:                              # %"$6"
	movq	(%rbx), %rbx
.LBB147_4:                              # %"$2"
	movq	($DbJnl)(%rip), %r13
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, -8(%rbp)                  # 8-byte Spill
	testb	$2, %bl
	jne	.LBB147_6
# %bb.5:                                # %"$8"
	movq	($DbFiles)(%rip), %rax
	movq	%rax, ($DbFile)(%rip)
	jmp	.LBB147_11
.LBB147_6:                              # %"$7"
	shrq	$4, %rbx
	decl	%ebx
	cmpl	($DBs)(%rip), %ebx
	jge	.LBB147_62
# %bb.7:                                # %"$11"
	imull	$42, %ebx, %eax
	cltq
	addq	($DbFiles)(%rip), %rax
	movq	%rax, ($DbFile)(%rip)
	movq	8(%rdi), %rax
	movq	(%rax), %rbx
	testb	$6, %bl
	jne	.LBB147_11
# %bb.8:                                # %"$13"
	testb	$8, %bl
	jne	.LBB147_10
# %bb.9:                                # %"$15"
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rbx
	jmp	.LBB147_11
.LBB147_10:                             # %"$16"
	movq	(%rbx), %rbx
.LBB147_11:                             # %"$9"
	incl	env+128(%rip)
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, SymTab+424(%rip)
	jne	.LBB147_30
.LBB147_12:                             # %wrLockDb.exit
	testq	%r13, %r13
	je	.LBB147_17
# %bb.13:                               # %"$17"
	movq	($DbJnl)(%rip), %rcx
	subq	$32, %rsp
	callq	fileno
	addq	$32, %rsp
	movl	%eax, %esi
	.p2align	4, 0x90
.LBB147_14:                             # %"$2.i.i20"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	movl	%esi, %ecx
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	movb	$1, %r9b
	callq	wrLock
	addq	$32, %rsp
	testl	%eax, %eax
	jns	.LBB147_16
# %bb.15:                               # %"$3.i.i21"
                                        #   in Loop: Header=BB147_14 Depth=1
	subq	$32, %rsp
	callq	gErrno
	addq	$32, %rsp
	cmpl	$2, %eax
	je	.LBB147_14
	jmp	.LBB147_33
.LBB147_16:                             # %lockJnl.exit
	movq	$0, ($DbJnl)(%rip)
.LBB147_17:                             # %"$18"
	movq	($DbFile)(%rip), %rax
	movl	(%rax), %ecx
	subq	$32, %rsp
	movl	$12, %r8d
	movq	-8(%rbp), %rsi                  # 8-byte Reload
	movq	%rsi, %rdx
	xorl	%r9d, %r9d
	callq	pread
	addq	$32, %rsp
	cmpq	$12, %rax
	jne	.LBB147_61
# %bb.18:                               # %blkPeek.exit
	movq	%rbx, -16(%rbp)                 # 8-byte Spill
	movzwl	4(%rsi), %eax
	movd	%eax, %xmm0
	pxor	%xmm1, %xmm1
	punpcklbw	%xmm1, %xmm0            # xmm0 = xmm0[0],xmm1[0],xmm0[1],xmm1[1],xmm0[2],xmm1[2],xmm0[3],xmm1[3],xmm0[4],xmm1[4],xmm0[5],xmm1[5],xmm0[6],xmm1[6],xmm0[7],xmm1[7]
	punpcklwd	%xmm1, %xmm0            # xmm0 = xmm0[0],xmm1[0],xmm0[1],xmm1[1],xmm0[2],xmm1[2],xmm0[3],xmm1[3]
	punpckldq	%xmm1, %xmm0            # xmm0 = xmm0[0],xmm1[0],xmm0[1],xmm1[1]
	movdqa	%xmm0, %xmm2
	psllq	$8, %xmm2
	psllq	$16, %xmm0
	pshufd	$78, %xmm0, %xmm0               # xmm0 = xmm0[2,3,0,1]
	por	%xmm2, %xmm0
	movq	%xmm0, %rax
	movzbl	3(%rsi), %ecx
	orq	%rax, %rcx
	movzwl	1(%rsi), %eax
	movd	%eax, %xmm0
	punpcklbw	%xmm1, %xmm0            # xmm0 = xmm0[0],xmm1[0],xmm0[1],xmm1[1],xmm0[2],xmm1[2],xmm0[3],xmm1[3],xmm0[4],xmm1[4],xmm0[5],xmm1[5],xmm0[6],xmm1[6],xmm0[7],xmm1[7]
	punpcklwd	%xmm1, %xmm0            # xmm0 = xmm0[0],xmm1[0],xmm0[1],xmm1[1],xmm0[2],xmm1[2],xmm0[3],xmm1[3]
	punpckldq	%xmm1, %xmm0            # xmm0 = xmm0[0],xmm1[0],xmm0[1],xmm1[1]
	shlq	$24, %rcx
	movdqa	%xmm0, %xmm1
	psllq	$8, %xmm1
	psllq	$16, %xmm0
	pshufd	$78, %xmm0, %xmm0               # xmm0 = xmm0[2,3,0,1]
	por	%xmm1, %xmm0
	movq	%xmm0, %r12
	orq	%rcx, %r12
	movzbl	(%rsi), %eax
	movq	%r12, %rcx
	orq	%rax, %rcx
	movq	%rcx, ($BlkLink)(%rip)
	movzbl	11(%rsi), %ecx
	movzbl	10(%rsi), %edx
	shlq	$16, %rcx
	shlq	$8, %rdx
	orq	%rcx, %rdx
	movzbl	9(%rsi), %ecx
	orq	%rdx, %rcx
	movzbl	8(%rsi), %edx
	movzbl	7(%rsi), %ebx
	shlq	$24, %rcx
	shlq	$16, %rdx
	shlq	$8, %rbx
	orq	%rdx, %rbx
	orq	%rcx, %rbx
	movzbl	6(%rsi), %r14d
	orq	%rbx, %r14
	orq	%rax, %r12
	movq	%r13, -24(%rbp)                 # 8-byte Spill
	movl	$64, %r15d
	je	.LBB147_23
# %bb.19:                               # %"$20.preheader"
	movq	%r12, %r9
	.p2align	4, 0x90
.LBB147_20:                             # %"$20"
                                        # =>This Inner Loop Header: Depth=1
	movq	($DbFile)(%rip), %rdi
	movq	($DbBlock)(%rip), %rsi
	movq	%r9, ($BlkIndex)(%rip)
	movzbl	8(%rdi), %ecx
	shlq	%cl, %r9
	movslq	12(%rdi), %rbx
	movl	(%rdi), %ecx
	subq	$32, %rsp
	movq	%rsi, %rdx
	movq	%rbx, %r8
	callq	pread
	addq	$32, %rsp
	cmpq	%rbx, %rax
	jne	.LBB147_61
# %bb.21:                               # %rdBlock.exit
                                        #   in Loop: Header=BB147_20 Depth=1
	movzbl	5(%rsi), %eax
	movzbl	4(%rsi), %ecx
	shlq	$16, %rax
	shlq	$8, %rcx
	orq	%rax, %rcx
	movzbl	3(%rsi), %eax
	orq	%rcx, %rax
	movzbl	2(%rsi), %ecx
	movzbl	1(%rsi), %edx
	shlq	$24, %rax
	shlq	$16, %rcx
	shlq	$8, %rdx
	orq	%rcx, %rdx
	orq	%rax, %rdx
	movzbl	(%rsi), %eax
	andl	$-64, %eax
	orq	%rdx, %rax
	movq	%rax, ($BlkLink)(%rip)
	movslq	12(%rdi), %rax
	addq	%rsi, %rax
	movq	%rax, ($BlkEnd)(%rip)
	leaq	6(%rsi), %rax
	movq	%rax, ($BlkPtr)(%rip)
	orb	$63, (%rsi)
	addq	$64, %r15
	cmpq	%r14, %r15
	ja	.LBB147_38
# %bb.22:                               # %"$23"
                                        #   in Loop: Header=BB147_20 Depth=1
	movq	($DbFile)(%rip), %rbx
	movq	($BlkIndex)(%rip), %rax
	movzbl	8(%rbx), %ecx
	shlq	%cl, %rax
	movq	($DbBlock)(%rip), %rdx
	movl	12(%rbx), %r8d
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	blkPoke
	addq	$32, %rsp
	movq	($BlkLink)(%rip), %r9
	testq	%r9, %r9
	jne	.LBB147_20
.LBB147_23:                             # %"$21"
	movq	%r13, ($DbJnl)(%rip)
	cmpq	$64, %r14
	jne	.LBB147_37
# %bb.24:
	xorl	%eax, %eax
	movq	%rax, (%rbp)                    # 8-byte Spill
	xorl	%r13d, %r13d
.LBB147_25:                             # %"$26"
	movq	%r12, ($BlkLink)(%rip)
	movq	$0, ($DbJnl)(%rip)
	.p2align	4, 0x90
.LBB147_26:                             # %"$26"
                                        # =>This Inner Loop Header: Depth=1
	testq	%r12, %r12
	je	.LBB147_34
# %bb.27:                               # %"$38"
                                        #   in Loop: Header=BB147_26 Depth=1
	movq	($DbFile)(%rip), %rdi
	movq	($DbBlock)(%rip), %rbx
	movq	%r12, ($BlkIndex)(%rip)
	movzbl	8(%rdi), %ecx
	shlq	%cl, %r12
	movslq	12(%rdi), %rsi
	movl	(%rdi), %ecx
	subq	$32, %rsp
	movq	%rbx, %rdx
	movq	%rsi, %r8
	movq	%r12, %r9
	callq	pread
	addq	$32, %rsp
	cmpq	%rsi, %rax
	jne	.LBB147_61
# %bb.28:                               # %rdBlock.exit33
                                        #   in Loop: Header=BB147_26 Depth=1
	movzbl	5(%rbx), %eax
	movzbl	4(%rbx), %ecx
	shlq	$16, %rax
	shlq	$8, %rcx
	orq	%rax, %rcx
	movzbl	3(%rbx), %eax
	orq	%rcx, %rax
	movzbl	2(%rbx), %ecx
	movzbl	1(%rbx), %edx
	shlq	$24, %rax
	shlq	$16, %rcx
	shlq	$8, %rdx
	orq	%rcx, %rdx
	orq	%rax, %rdx
	movzbl	(%rbx), %r12d
	andl	$-64, %r12d
	orq	%rdx, %r12
	movq	%r12, ($BlkLink)(%rip)
	movslq	12(%rdi), %rax
	addq	%rbx, %rax
	movq	%rax, ($BlkEnd)(%rip)
	leaq	6(%rbx), %rax
	movq	%rax, ($BlkPtr)(%rip)
	movzbl	(%rbx), %eax
	testb	$63, %al
	je	.LBB147_26
# %bb.29:                               # %"$40"
                                        #   in Loop: Header=BB147_26 Depth=1
	andb	$-64, %al
	movb	%al, (%rbx)
	movq	($DbFile)(%rip), %rbx
	movq	($BlkIndex)(%rip), %rax
	movzbl	8(%rbx), %ecx
	shlq	%cl, %rax
	movq	($DbBlock)(%rip), %rdx
	movl	12(%rbx), %r8d
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	blkPoke
	addq	$32, %rsp
	movq	($BlkLink)(%rip), %r12
	jmp	.LBB147_26
.LBB147_30:                             # %"$2.i"
	movq	($DbFiles)(%rip), %rax
	movl	(%rax), %esi
	.p2align	4, 0x90
.LBB147_31:                             # %"$2.i.i"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	movl	$1, %r8d
	movl	%esi, %ecx
	xorl	%edx, %edx
	movb	$1, %r9b
	callq	wrLock
	addq	$32, %rsp
	testl	%eax, %eax
	jns	.LBB147_12
# %bb.32:                               # %"$3.i.i"
                                        #   in Loop: Header=BB147_31 Depth=1
	subq	$32, %rsp
	callq	gErrno
	addq	$32, %rsp
	cmpl	$2, %eax
	je	.LBB147_31
.LBB147_33:                             # %"$5.i.i"
	subq	$32, %rsp
	callq	lockErr
.LBB147_34:                             # %"$39"
	cmpq	%r14, %r15
	jne	.LBB147_52
# %bb.35:                               # %"$43"
	leaq	SymTab+8(%rip), %rdi
	cmpq	%rdi, -16(%rbp)                 # 8-byte Folded Reload
	je	.LBB147_55
# %bb.36:                               # %"$46"
	shlq	$4, %r13
	orq	$2, %r13
	movq	(%rbp), %rdx                    # 8-byte Reload
	shlq	$4, %rdx
	orq	$2, %rdx
	subq	$32, %rsp
	movq	%r13, %rcx
	callq	cons
	jmp	.LBB147_54
.LBB147_37:                             # %"$25.preheader"
	movl	$64, %ebx
	xorl	%r13d, %r13d
	xorl	%r12d, %r12d
	movq	%r14, -32(%rbp)                 # 8-byte Spill
	jmp	.LBB147_42
.LBB147_38:                             # %"$22"
	subq	$32, %rsp
	leaq	.L$65(%rip), %rcx
	jmp	.LBB147_53
.LBB147_39:                             #   in Loop: Header=BB147_42 Depth=1
	movq	(%rbp), %r12                    # 8-byte Reload
	.p2align	4, 0x90
.LBB147_40:                             # %"$27"
                                        #   in Loop: Header=BB147_42 Depth=1
	movq	%r14, %rbx
.LBB147_41:                             # %"$27"
                                        #   in Loop: Header=BB147_42 Depth=1
	addq	$64, %rbx
	movq	-32(%rbp), %r14                 # 8-byte Reload
	cmpq	%r14, %rbx
	je	.LBB147_60
.LBB147_42:                             # %"$25"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB147_48 Depth 2
	movq	($DbFile)(%rip), %rsi
	movq	($DbBlock)(%rip), %rdi
	movq	%rbx, ($BlkIndex)(%rip)
	movb	8(%rsi), %cl
	movq	%rbx, %r14
	movq	%rbx, %rax
	shlq	%cl, %rax
	movslq	12(%rsi), %rbx
	movl	(%rsi), %ecx
	subq	$32, %rsp
	movq	%rdi, %rdx
	movq	%rbx, %r8
	movq	%rax, %r9
	callq	pread
	addq	$32, %rsp
	cmpq	%rbx, %rax
	jne	.LBB147_61
# %bb.43:                               # %rdBlock.exit27
                                        #   in Loop: Header=BB147_42 Depth=1
	movzbl	5(%rdi), %eax
	movzbl	4(%rdi), %ecx
	shlq	$16, %rax
	shlq	$8, %rcx
	orq	%rax, %rcx
	movzbl	3(%rdi), %eax
	orq	%rcx, %rax
	movzbl	2(%rdi), %ecx
	movzbl	1(%rdi), %edx
	shlq	$24, %rax
	shlq	$16, %rcx
	shlq	$8, %rdx
	orq	%rcx, %rdx
	orq	%rax, %rdx
	movzbl	(%rdi), %r9d
	andl	$-64, %r9d
	orq	%rdx, %r9
	movq	%r9, ($BlkLink)(%rip)
	movslq	12(%rsi), %rax
	addq	%rdi, %rax
	movq	%rax, ($BlkEnd)(%rip)
	leaq	6(%rdi), %rax
	movq	%rax, ($BlkPtr)(%rip)
	movb	(%rdi), %al
	andb	$63, %al
	cmpb	$1, %al
	je	.LBB147_46
# %bb.44:                               # %rdBlock.exit27
                                        #   in Loop: Header=BB147_42 Depth=1
	testb	%al, %al
	jne	.LBB147_40
# %bb.45:                               # %"$28"
                                        #   in Loop: Header=BB147_42 Depth=1
	addq	$64, %r15
	movq	-8(%rbp), %rsi                  # 8-byte Reload
	movzwl	4(%rsi), %eax
	movw	%ax, 4(%rdi)
	movl	(%rsi), %eax
	movl	%eax, (%rdi)
	movq	($DbFile)(%rip), %rbx
	movq	($BlkIndex)(%rip), %rax
	movb	8(%rbx), %cl
	shlq	%cl, %rax
	movq	($DbBlock)(%rip), %rdx
	movl	12(%rbx), %r8d
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	blkPoke
	addq	$32, %rsp
	movq	%r14, %rbx
	movb	%bl, (%rsi)
	movb	%bh, 1(%rsi)
	movq	%r14, %rax
	shrq	$16, %rax
	movb	%al, 2(%rsi)
	movq	%r14, %rax
	shrq	$24, %rax
	movb	%al, 3(%rsi)
	movq	%r14, %rax
	shrq	$32, %rax
	movb	%al, 4(%rsi)
	movq	%r14, %rax
	shrq	$40, %rax
	movb	%al, 5(%rsi)
	subq	$32, %rsp
	xorl	%ecx, %ecx
	movq	%rsi, %rdx
	movl	$6, %r8d
	callq	blkPoke
	addq	$32, %rsp
	jmp	.LBB147_41
	.p2align	4, 0x90
.LBB147_46:                             # %"$29"
                                        #   in Loop: Header=BB147_42 Depth=1
	incq	%r12
	incq	%r13
	addq	$64, %r15
	testq	%r9, %r9
	je	.LBB147_40
# %bb.47:                               # %"$31.preheader"
                                        #   in Loop: Header=BB147_42 Depth=1
	movq	%r12, (%rbp)                    # 8-byte Spill
	movb	$2, %r12b
	.p2align	4, 0x90
.LBB147_48:                             # %"$31"
                                        #   Parent Loop BB147_42 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	($DbFile)(%rip), %rsi
	movq	($DbBlock)(%rip), %rdi
	movq	%r9, ($BlkIndex)(%rip)
	movzbl	8(%rsi), %ecx
	shlq	%cl, %r9
	movslq	12(%rsi), %rbx
	movl	(%rsi), %ecx
	subq	$32, %rsp
	movq	%rdi, %rdx
	movq	%rbx, %r8
	callq	pread
	addq	$32, %rsp
	cmpq	%rbx, %rax
	jne	.LBB147_61
# %bb.49:                               # %rdBlock.exit30
                                        #   in Loop: Header=BB147_48 Depth=2
	movzbl	5(%rdi), %eax
	movzbl	4(%rdi), %ecx
	shlq	$16, %rax
	shlq	$8, %rcx
	orq	%rax, %rcx
	movzbl	3(%rdi), %eax
	orq	%rcx, %rax
	movzbl	2(%rdi), %ecx
	movzbl	1(%rdi), %edx
	shlq	$24, %rax
	shlq	$16, %rcx
	shlq	$8, %rdx
	orq	%rcx, %rdx
	orq	%rax, %rdx
	movzbl	(%rdi), %r9d
	andl	$-64, %r9d
	orq	%rdx, %r9
	movq	%r9, ($BlkLink)(%rip)
	movslq	12(%rsi), %rax
	addq	%rdi, %rax
	movq	%rax, ($BlkEnd)(%rip)
	leaq	6(%rdi), %rax
	movq	%rax, ($BlkPtr)(%rip)
	movzbl	(%rdi), %eax
	andb	$63, %al
	cmpb	%al, %r12b
	jne	.LBB147_51
# %bb.50:                               # %"$34"
                                        #   in Loop: Header=BB147_48 Depth=2
	leal	1(%r12), %eax
	cmpb	$63, %r12b
	movzbl	%al, %r12d
	movl	$63, %eax
	cmovael	%eax, %r12d
	incq	%r13
	addq	$64, %r15
	testq	%r9, %r9
	jne	.LBB147_48
	jmp	.LBB147_39
.LBB147_51:                             # %"$33"
	subq	$32, %rsp
	leaq	.L$66(%rip), %rcx
	jmp	.LBB147_53
.LBB147_52:                             # %"$44"
	subq	$32, %rsp
	leaq	.L$67(%rip), %rcx
.LBB147_53:                             # %"$-9"
	callq	mkStr
.LBB147_54:                             # %"$-9"
	addq	$32, %rsp
	movq	%rax, %rdi
.LBB147_55:                             # %"$-9"
	movq	-24(%rbp), %rsi                 # 8-byte Reload
	testq	%rsi, %rsi
	movq	%rsi, ($DbJnl)(%rip)
	je	.LBB147_57
# %bb.56:                               # %"$47"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	fflush
	movq	%rsi, %rcx
	callq	fileno
	movl	%eax, %ecx
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	callq	unLock
	addq	$32, %rsp
.LBB147_57:                             # %"$48"
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, SymTab+424(%rip)
	je	.LBB147_59
# %bb.58:                               # %"$2.i34"
	movq	($DbFiles)(%rip), %rax
	movl	(%rax), %ecx
	subq	$32, %rsp
	movl	$1, %r8d
	xorl	%edx, %edx
	callq	unLock
	addq	$32, %rsp
.LBB147_59:                             # %unLockDb.exit
	decl	env+128(%rip)
	movq	%rdi, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB147_60:                             # %"$26.loopexit"
	movq	%r12, (%rbp)                    # 8-byte Spill
	movq	-8(%rbp), %rdi                  # 8-byte Reload
	movzbl	5(%rdi), %eax
	movzbl	4(%rdi), %ecx
	movzbl	3(%rdi), %edx
	movzbl	2(%rdi), %ebx
	movzbl	1(%rdi), %r12d
	movzbl	(%rdi), %edi
	shlq	$16, %rax
	shlq	$8, %rcx
	orq	%rax, %rcx
	orq	%rdx, %rcx
	shlq	$24, %rcx
	shlq	$16, %rbx
	shlq	$8, %r12
	orq	%rbx, %r12
	orq	%rcx, %r12
	orq	%rdi, %r12
	jmp	.LBB147_25
.LBB147_61:                             # %"$2.i23"
	subq	$32, %rsp
	callq	dbRdErr
.LBB147_62:                             # %"$10"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	dbfErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _apply;
	.scl	2;
	.type	32;
	.endef
	.globl	_apply                          # -- Begin function _apply
	.p2align	4, 0x90
_apply:                                 # @_apply
.seh_proc _apply
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %r14
	movq	8(%rcx), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %r15
	testb	$6, %cl
	jne	.LBB148_4
# %bb.1:                                # %"$3"
	testb	$8, %cl
	jne	.LBB148_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB148_4
.LBB148_2:                              # %"$6"
	movq	(%rcx), %rcx
.LBB148_4:                              # %"$2"
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r12
	movq	%r12, %rax
	orq	$8, %rax
	leaq	SymTab+8(%rip), %r13
	movq	%r13, (%rax)
	movq	$2, 16(%r12)
	leaq	24(%r12), %rdx
	movq	%rcx, 24(%r12)
	movq	env(%rip), %rax
	movq	%rax, 32(%r12)
	movq	%rdx, env(%rip)
	movq	%rdx, (%r12)
	movq	(%r15), %rbx
	testb	$6, %bl
	jne	.LBB148_8
# %bb.5:                                # %"$8"
	testb	$8, %bl
	jne	.LBB148_6
# %bb.7:                                # %"$10"
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rbx
	movq	env(%rip), %rdx
	jmp	.LBB148_8
.LBB148_6:                              # %"$11"
	movq	(%rbx), %rbx
.LBB148_8:                              # %"$7"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rbx, (%rax)
	movq	%rax, %rcx
	orq	$8, %rcx
	movq	%rdx, (%rcx)
	movq	%rax, env(%rip)
	movq	8(%r15), %rdi
	testb	$15, %dil
	movq	%r12, %rsi
	je	.LBB148_9
.LBB148_13:                             # %"$20.preheader"
	testb	$15, %bl
	jne	.LBB148_19
	.p2align	4, 0x90
.LBB148_14:                             # %"$21"
                                        # =>This Inner Loop Header: Depth=1
	cmpq	%rsp, ($StkLimit)(%rip)
	ja	.LBB148_15
# %bb.18:                               # %"$24"
                                        #   in Loop: Header=BB148_14 Depth=1
	movq	(%rbx), %rcx
	movq	8(%rbx), %rbx
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdx
	movq	%rdx, %rax
	orq	$8, %rax
	movq	%r13, (%rax)
	movq	$2, 16(%rdx)
	leaq	24(%rdx), %rax
	movq	%rcx, 24(%rdx)
	movq	%rdx, 8(%rsi)
	movq	env(%rip), %rcx
	movq	%rcx, 32(%rdx)
	movq	%rax, env(%rip)
	movq	%rax, (%rdx)
	testb	$15, %bl
	movq	%rdx, %rsi
	je	.LBB148_14
.LBB148_19:                             # %"$22"
	subq	$32, %rsp
	movq	%r12, %rcx
	callq	evList
	addq	$32, %rsp
	movq	32(%r12), %rcx
	movq	%rcx, env(%rip)
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB148_9:
	movq	%r12, %rsi
	jmp	.LBB148_10
.LBB148_16:                             # %"$18"
                                        #   in Loop: Header=BB148_10 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	.p2align	4, 0x90
.LBB148_17:                             # %"$15"
                                        #   in Loop: Header=BB148_10 Depth=1
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rsi, %rax
	orq	$8, %rax
	movq	%r13, (%rax)
	movq	$2, 16(%rsi)
	leaq	24(%rsi), %rax
	movq	%rcx, 24(%rsi)
	movq	%rsi, 8(%r15)
	movq	env(%rip), %rcx
	movq	%rcx, 32(%rsi)
	movq	%rax, env(%rip)
	movq	%rax, (%rsi)
	movq	8(%rdi), %rdi
	testb	$15, %dil
	jne	.LBB148_13
.LBB148_10:                             # %"$13"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rsi, %r15
	movq	(%rdi), %rcx
	testb	$6, %cl
	jne	.LBB148_17
# %bb.11:                               # %"$16"
                                        #   in Loop: Header=BB148_10 Depth=1
	testb	$8, %cl
	je	.LBB148_16
# %bb.12:                               # %"$19"
                                        #   in Loop: Header=BB148_10 Depth=1
	movq	(%rcx), %rcx
	jmp	.LBB148_17
.LBB148_15:                             # %"$23"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	stkErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _pass;
	.scl	2;
	.type	32;
	.endef
	.globl	_pass                           # -- Begin function _pass
	.p2align	4, 0x90
_pass:                                  # @_pass
.seh_proc _pass
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	testb	$6, %cl
	jne	.LBB149_4
# %bb.1:                                # %"$3"
	testb	$8, %cl
	jne	.LBB149_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB149_4
.LBB149_2:                              # %"$6"
	movq	(%rcx), %rcx
.LBB149_4:                              # %"$2"
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%r14, %rax
	orq	$8, %rax
	leaq	SymTab+8(%rip), %r15
	movq	%r15, (%rax)
	movq	$2, 16(%r14)
	leaq	24(%r14), %rax
	movq	%rcx, 24(%r14)
	movq	env(%rip), %rcx
	movq	%rcx, 32(%r14)
	movq	%rax, env(%rip)
	movq	%rax, (%r14)
	testb	$15, %bl
	movq	%r14, %rsi
	je	.LBB149_5
.LBB149_11:                             # %"$9"
	movq	env+88(%rip), %rcx
	testb	$15, %cl
	jne	.LBB149_13
	.p2align	4, 0x90
.LBB149_12:                             # %"$16"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rbx
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdx
	movq	%rdx, %rax
	orq	$8, %rax
	movq	%r15, (%rax)
	movq	$2, 16(%rdx)
	leaq	24(%rdx), %rax
	movq	%rbx, 24(%rdx)
	movq	%rdx, 8(%rsi)
	movq	env(%rip), %rbx
	movq	%rbx, 32(%rdx)
	movq	%rax, env(%rip)
	movq	%rax, (%rdx)
	movq	(%rcx), %rcx
	testb	$15, %cl
	movq	%rdx, %rsi
	je	.LBB149_12
.LBB149_13:                             # %"$17"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	evList
	addq	$32, %rsp
	movq	32(%r14), %rcx
	movq	%rcx, env(%rip)
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB149_5:                              # %"$8.preheader"
	movq	%r14, %rdi
	jmp	.LBB149_6
.LBB149_9:                              # %"$13"
                                        #   in Loop: Header=BB149_6 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	.p2align	4, 0x90
.LBB149_10:                             # %"$10"
                                        #   in Loop: Header=BB149_6 Depth=1
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rsi, %rax
	orq	$8, %rax
	movq	%r15, (%rax)
	movq	$2, 16(%rsi)
	leaq	24(%rsi), %rax
	movq	%rcx, 24(%rsi)
	movq	%rsi, 8(%rdi)
	movq	env(%rip), %rcx
	movq	%rcx, 32(%rsi)
	movq	%rax, env(%rip)
	movq	%rax, (%rsi)
	testb	$15, %bl
	movq	%rsi, %rdi
	jne	.LBB149_11
.LBB149_6:                              # %"$8"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rbx), %rcx
	movq	8(%rbx), %rbx
	testb	$6, %cl
	jne	.LBB149_10
# %bb.7:                                # %"$11"
                                        #   in Loop: Header=BB149_6 Depth=1
	testb	$8, %cl
	je	.LBB149_9
# %bb.8:                                # %"$14"
                                        #   in Loop: Header=BB149_6 Depth=1
	movq	(%rcx), %rcx
	jmp	.LBB149_10
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _fun;
	.scl	2;
	.type	32;
	.endef
	.globl	_fun                            # -- Begin function _fun
	.p2align	4, 0x90
_fun:                                   # @_fun
# %bb.0:                                # %"$1"
	movq	8(%rcx), %rcx
	jmp	evList                          # TAILCALL
                                        # -- End function
	.def	 _maps;
	.scl	2;
	.type	32;
	.endef
	.globl	_maps                           # -- Begin function _maps
	.p2align	4, 0x90
_maps:                                  # @_maps
.seh_proc _maps
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	leaq	32(%rsp), %rbp
	.seh_setframe %rbp, 32
	.seh_endprologue
	movq	%rcx, -8(%rbp)                  # 8-byte Spill
	movq	8(%rcx), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %r13
	testb	$6, %cl
	jne	.LBB151_4
# %bb.1:                                # %"$3"
	testb	$8, %cl
	jne	.LBB151_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB151_4
.LBB151_2:                              # %"$6"
	movq	(%rcx), %rcx
.LBB151_4:                              # %"$2"
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%r14, %rax
	orq	$8, %rax
	leaq	SymTab+8(%rip), %r12
	movq	%r12, (%rax)
	movq	$2, 16(%r14)
	leaq	24(%r14), %rdx
	movq	%rcx, 24(%r14)
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	env(%rip), %rax
	movq	%rax, 32(%r14)
	movq	%rdx, env(%rip)
	movq	%rdx, -24(%rbp)                 # 8-byte Spill
	movq	%rdx, (%r14)
	movq	(%r13), %rbx
	testb	$6, %bl
	jne	.LBB151_8
# %bb.5:                                # %"$8"
	testb	$8, %bl
	jne	.LBB151_6
# %bb.7:                                # %"$10"
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rbx
	jmp	.LBB151_8
.LBB151_6:                              # %"$11"
	movq	(%rbx), %rbx
.LBB151_8:                              # %"$7"
	movl	%ebx, %eax
	andl	$14, %eax
	cmpl	$8, %eax
	jne	.LBB151_36
# %bb.9:                                # %"$13"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rbx, (%rax)
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%rcx, (%rdx)
	movq	%rax, env(%rip)
	movq	%rbx, (%rdi)
	movq	%r14, %rsi
	movq	%rdi, (%rbp)                    # 8-byte Spill
	movq	%rbx, -16(%rbp)                 # 8-byte Spill
	movq	%rbx, %rcx
	.p2align	4, 0x90
.LBB151_10:                             # %"$14"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rsi, %rbx
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rsi, %rax
	orq	$8, %rax
	movq	%r12, (%rax)
	movq	$2, 16(%rsi)
	leaq	24(%rsi), %rdx
	movq	%rcx, 24(%rsi)
	movq	%rsi, 8(%rbx)
	movq	env(%rip), %rax
	movq	%rax, 32(%rsi)
	movq	%rdx, env(%rip)
	movq	%rdx, (%rsi)
	movq	8(%r13), %r13
	testb	$15, %r13b
	jne	.LBB151_17
# %bb.11:                               # %"$15"
                                        #   in Loop: Header=BB151_10 Depth=1
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%r15, 8(%rdi)
	movq	(%r13), %rcx
	testb	$6, %cl
	jne	.LBB151_15
# %bb.12:                               # %"$18"
                                        #   in Loop: Header=BB151_10 Depth=1
	testb	$8, %cl
	jne	.LBB151_13
# %bb.14:                               # %"$20"
                                        #   in Loop: Header=BB151_10 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	movq	env(%rip), %rdx
	jmp	.LBB151_15
.LBB151_13:                             # %"$21"
                                        #   in Loop: Header=BB151_10 Depth=1
	movq	(%rcx), %rcx
	.p2align	4, 0x90
.LBB151_15:                             # %"$17"
                                        #   in Loop: Header=BB151_10 Depth=1
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rcx, (%rbx)
	movq	%rbx, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	%rbx, env(%rip)
	movq	%rcx, (%r15)
	testb	$15, %cl
	movq	%r15, %rdi
	jne	.LBB151_10
# %bb.16:                               # %"$22"
                                        #   in Loop: Header=BB151_10 Depth=1
	movq	(%rcx), %rcx
	movq	%r15, %rdi
	jmp	.LBB151_10
.LBB151_17:                             # %"$16"
	movq	-16(%rbp), %rdi                 # 8-byte Reload
	movq	-8(%rdi), %rax
	testb	$8, %al
	jne	.LBB151_19
# %bb.18:
	movq	(%rbp), %rsi                    # 8-byte Reload
	jmp	.LBB151_25
.LBB151_19:                             # %"$24"
	testb	$6, %al
	je	.LBB151_20
# %bb.21:                               # %"$3.i"
	movq	%rax, %rcx
	addq	%rax, %rcx
	movq	(%rbp), %rsi                    # 8-byte Reload
	jb	.LBB151_24
# %bb.22:                               # %"$2.i"
	addq	%rcx, %rcx
	jb	.LBB151_24
# %bb.23:                               # %"$5.i"
	movl	$1, %r8d
	shldq	$62, %rcx, %r8
	movq	%r8, -8(%rdi)
	subq	$32, %rsp
	movq	-8(%rbp), %rcx                  # 8-byte Reload
	movq	%rdi, %rdx
	callq	db
	addq	$32, %rsp
	movq	-8(%rdi), %rax
	jmp	.LBB151_24
.LBB151_20:
	movq	(%rbp), %rsi                    # 8-byte Reload
.LBB151_24:                             # %dbFetch.exit
	andq	$-9, %rax
.LBB151_25:                             # %"$25"
	movq	8(%r14), %rcx
	testb	$15, %al
	je	.LBB151_26
# %bb.34:                               # %"$30.critedge"
	movq	%rax, 24(%rcx)
	movq	%rax, (%rsi)
.LBB151_35:                             # %"$30"
	movq	-24(%rbp), %rax                 # 8-byte Reload
	movq	8(%rax), %rax
	movq	%rax, env(%rip)
	movq	%r12, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB151_26:                             # %"$26"
	movq	(%rax), %rdx
	movq	%rdx, 24(%rcx)
	movq	%rax, (%rsi)
	.p2align	4, 0x90
.LBB151_27:                             # %"$31.loopexit"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB151_30 Depth 2
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r12
	movq	(%rsi), %rax
	movq	8(%rax), %rax
	movq	%rax, (%rsi)
	testb	$15, %al
	jne	.LBB151_35
# %bb.28:                               # %"$32"
                                        #   in Loop: Header=BB151_27 Depth=1
	movq	8(%r14), %rcx
	movq	(%rax), %rax
	movq	%rax, 24(%rcx)
	movq	8(%rcx), %rax
	testb	$15, %al
	jne	.LBB151_27
# %bb.29:                               # %"$35.preheader"
                                        #   in Loop: Header=BB151_27 Depth=1
	movq	%rsi, %rcx
	jmp	.LBB151_30
	.p2align	4, 0x90
.LBB151_33:                             # %"$37"
                                        #   in Loop: Header=BB151_30 Depth=2
	movq	%rdx, 24(%rax)
	movq	8(%rax), %rax
	testb	$15, %al
	jne	.LBB151_27
.LBB151_30:                             # %"$35"
                                        #   Parent Loop BB151_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rcx), %rcx
	movq	(%rcx), %rdx
	testb	$15, %dl
	jne	.LBB151_33
# %bb.31:                               # %"$38"
                                        #   in Loop: Header=BB151_30 Depth=2
	movq	8(%rdx), %rdx
	movq	%rdx, (%rcx)
	testb	$15, %dl
	jne	.LBB151_33
# %bb.32:                               # %"$40"
                                        #   in Loop: Header=BB151_30 Depth=2
	movq	(%rdx), %rdx
	jmp	.LBB151_33
.LBB151_36:                             # %"$12"
	subq	$32, %rsp
	movq	-8(%rbp), %rcx                  # 8-byte Reload
	movq	%rbx, %rdx
	callq	symErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _map;
	.scl	2;
	.type	32;
	.endef
	.globl	_map                            # -- Begin function _map
	.p2align	4, 0x90
_map:                                   # @_map
.seh_proc _map
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rsi
	movq	(%rsi), %rcx
	testb	$6, %cl
	jne	.LBB152_4
# %bb.1:                                # %"$3"
	testb	$8, %cl
	jne	.LBB152_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB152_4
.LBB152_2:                              # %"$6"
	movq	(%rcx), %rcx
.LBB152_4:                              # %"$2"
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rdi, %rax
	orq	$8, %rax
	leaq	SymTab+8(%rip), %r12
	movq	%r12, (%rax)
	movq	$2, 16(%rdi)
	leaq	24(%rdi), %r14
	movq	%rcx, 24(%rdi)
	movq	env(%rip), %rax
	movq	%rax, 32(%rdi)
	movq	%r14, env(%rip)
	movq	%r14, (%rdi)
	movq	8(%rsi), %rbx
	testb	$15, %bl
	je	.LBB152_5
	.p2align	4, 0x90
.LBB152_9:                              # %"$15.preheader"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB152_14 Depth 2
	movq	8(%rdi), %rsi
	testb	$15, 24(%rsi)
	jne	.LBB152_10
# %bb.13:                               # %"$16"
                                        #   in Loop: Header=BB152_9 Depth=1
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r12
	jmp	.LBB152_14
	.p2align	4, 0x90
.LBB152_16:                             # %"$20"
                                        #   in Loop: Header=BB152_14 Depth=2
	movq	8(%rsi), %rsi
	testb	$15, %sil
	jne	.LBB152_9
.LBB152_14:                             # %"$18"
                                        #   Parent Loop BB152_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	24(%rsi), %rax
	testb	$15, %al
	jne	.LBB152_16
# %bb.15:                               # %"$19"
                                        #   in Loop: Header=BB152_14 Depth=2
	movq	8(%rax), %rax
	movq	%rax, 24(%rsi)
	jmp	.LBB152_16
.LBB152_10:                             # %"$17"
	movq	8(%r14), %rax
	movq	%rax, env(%rip)
	movq	%r12, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB152_5:
	leaq	SymTab+8(%rip), %r15
	movq	%rdi, %rsi
	jmp	.LBB152_6
.LBB152_11:                             # %"$13"
                                        #   in Loop: Header=BB152_6 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	.p2align	4, 0x90
.LBB152_12:                             # %"$10"
                                        #   in Loop: Header=BB152_6 Depth=1
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%r15, (%rdx)
	movq	$2, 16(%rax)
	leaq	24(%rax), %rdx
	movq	%rcx, 24(%rax)
	movq	%rax, 8(%rsi)
	movq	env(%rip), %rcx
	movq	%rcx, 32(%rax)
	movq	%rdx, env(%rip)
	movq	%rdx, (%rax)
	movq	8(%rbx), %rbx
	testb	$15, %bl
	movq	%rax, %rsi
	jne	.LBB152_9
.LBB152_6:                              # %"$8"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rbx), %rcx
	testb	$6, %cl
	jne	.LBB152_12
# %bb.7:                                # %"$11"
                                        #   in Loop: Header=BB152_6 Depth=1
	testb	$8, %cl
	je	.LBB152_11
# %bb.8:                                # %"$14"
                                        #   in Loop: Header=BB152_6 Depth=1
	movq	(%rcx), %rcx
	jmp	.LBB152_12
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _mapc;
	.scl	2;
	.type	32;
	.endef
	.globl	_mapc                           # -- Begin function _mapc
	.p2align	4, 0x90
_mapc:                                  # @_mapc
.seh_proc _mapc
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	testb	$6, %cl
	jne	.LBB153_4
# %bb.1:                                # %"$3"
	testb	$8, %cl
	jne	.LBB153_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB153_4
.LBB153_2:                              # %"$6"
	movq	(%rcx), %rcx
.LBB153_4:                              # %"$2"
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%r14, %rax
	orq	$8, %rax
	leaq	SymTab+8(%rip), %r13
	movq	%r13, (%rax)
	movq	$2, 16(%r14)
	leaq	24(%r14), %rdx
	movq	%rcx, 24(%r14)
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	env(%rip), %rax
	movq	%rax, 32(%r14)
	movq	%rdx, env(%rip)
	movq	%rdx, (%r14)
	movq	%rdx, (%rbp)                    # 8-byte Spill
	movq	%r14, %r12
	movq	%r15, %rsi
	.p2align	4, 0x90
.LBB153_5:                              # %"$7"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rbx), %rcx
	testb	$6, %cl
	jne	.LBB153_9
# %bb.6:                                # %"$9"
                                        #   in Loop: Header=BB153_5 Depth=1
	testb	$8, %cl
	jne	.LBB153_7
# %bb.8:                                # %"$11"
                                        #   in Loop: Header=BB153_5 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	movq	env(%rip), %rdx
	jmp	.LBB153_9
.LBB153_7:                              # %"$12"
                                        #   in Loop: Header=BB153_5 Depth=1
	movq	(%rcx), %rcx
	.p2align	4, 0x90
.LBB153_9:                              # %"$8"
                                        #   in Loop: Header=BB153_5 Depth=1
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rcx, (%rdi)
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	%rdi, env(%rip)
	movq	%rcx, (%rsi)
	testb	$15, %cl
	jne	.LBB153_11
# %bb.10:                               # %"$13"
                                        #   in Loop: Header=BB153_5 Depth=1
	movq	(%rcx), %rcx
.LBB153_11:                             # %"$14"
                                        #   in Loop: Header=BB153_5 Depth=1
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%r13, (%rax)
	movq	$2, 16(%rdi)
	leaq	24(%rdi), %rdx
	movq	%rcx, 24(%rdi)
	movq	%rdi, 8(%r12)
	movq	env(%rip), %rax
	movq	%rax, 32(%rdi)
	movq	%rdx, env(%rip)
	movq	%rdx, (%rdi)
	movq	8(%rbx), %rbx
	testb	$15, %bl
	jne	.LBB153_13
# %bb.12:                               # %"$15"
                                        #   in Loop: Header=BB153_5 Depth=1
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rax, 8(%rsi)
	movq	%rdi, %r12
	movq	%rax, %rsi
	jmp	.LBB153_5
.LBB153_13:                             # %"$16"
	testb	$15, (%r15)
	jne	.LBB153_21
	jmp	.LBB153_14
	.p2align	4, 0x90
.LBB153_15:                             # %"$20"
                                        #   in Loop: Header=BB153_14 Depth=1
	movq	8(%r14), %rcx
	movq	(%rax), %rax
	movq	%rax, 24(%rcx)
	movq	8(%rcx), %rax
	testb	$15, %al
	jne	.LBB153_14
# %bb.16:                               # %"$23.preheader"
                                        #   in Loop: Header=BB153_14 Depth=1
	movq	%r15, %rcx
	jmp	.LBB153_17
	.p2align	4, 0x90
.LBB153_20:                             # %"$25"
                                        #   in Loop: Header=BB153_17 Depth=2
	movq	%rdx, 24(%rax)
	movq	8(%rax), %rax
	testb	$15, %al
	jne	.LBB153_14
.LBB153_17:                             # %"$23"
                                        #   Parent Loop BB153_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rcx), %rcx
	movq	(%rcx), %rdx
	testb	$15, %dl
	jne	.LBB153_20
# %bb.18:                               # %"$26"
                                        #   in Loop: Header=BB153_17 Depth=2
	movq	8(%rdx), %rdx
	movq	%rdx, (%rcx)
	testb	$15, %dl
	jne	.LBB153_20
# %bb.19:                               # %"$28"
                                        #   in Loop: Header=BB153_17 Depth=2
	movq	(%rdx), %rdx
	jmp	.LBB153_20
	.p2align	4, 0x90
.LBB153_14:                             # %"$19.preheader"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB153_17 Depth 2
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r13
	movq	(%r15), %rax
	movq	8(%rax), %rax
	movq	%rax, (%r15)
	testb	$15, %al
	je	.LBB153_15
.LBB153_21:                             # %"$18"
	movq	(%rbp), %rax                    # 8-byte Reload
	movq	8(%rax), %rax
	movq	%rax, env(%rip)
	movq	%r13, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _maplist;
	.scl	2;
	.type	32;
	.endef
	.globl	_maplist                        # -- Begin function _maplist
	.p2align	4, 0x90
_maplist:                               # @_maplist
.seh_proc _maplist
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$24, %rsp
	.seh_stackalloc 24
	leaq	16(%rsp), %rbp
	.seh_setframe %rbp, 16
	.seh_endprologue
	movq	8(%rcx), %rsi
	movq	env(%rip), %rax
	leaq	SymTab+8(%rip), %r14
	movq	%r14, -16(%rbp)
	movq	%rax, -8(%rbp)
	leaq	-16(%rbp), %rax
	movq	%rax, env(%rip)
	movq	(%rsi), %rcx
	testb	$6, %cl
	jne	.LBB154_4
# %bb.1:                                # %"$3"
	testb	$8, %cl
	jne	.LBB154_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB154_4
.LBB154_2:                              # %"$6"
	movq	(%rcx), %rcx
.LBB154_4:                              # %"$2"
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rbx, %rax
	orq	$8, %rax
	movq	%r14, (%rax)
	movq	$2, 16(%rbx)
	leaq	24(%rbx), %rax
	movq	%rcx, 24(%rbx)
	movq	env(%rip), %rcx
	movq	%rcx, 32(%rbx)
	movq	%rax, env(%rip)
	movq	%rax, (%rbx)
	movq	8(%rsi), %rsi
	testb	$15, %sil
	je	.LBB154_5
.LBB154_9:                              # %"$15.preheader"
	movq	8(%rbx), %rsi
	testb	$15, 24(%rsi)
	je	.LBB154_10
.LBB154_20:                             # %"$17"
	movq	-8(%rbp), %rax
	movq	%rax, env(%rip)
	movq	%r14, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB154_5:
	leaq	SymTab+8(%rip), %r15
	movq	%rbx, %rdi
	jmp	.LBB154_6
.LBB154_11:                             # %"$13"
                                        #   in Loop: Header=BB154_6 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	.p2align	4, 0x90
.LBB154_12:                             # %"$10"
                                        #   in Loop: Header=BB154_6 Depth=1
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%r15, (%rdx)
	movq	$2, 16(%rax)
	leaq	24(%rax), %rdx
	movq	%rcx, 24(%rax)
	movq	%rax, 8(%rdi)
	movq	env(%rip), %rcx
	movq	%rcx, 32(%rax)
	movq	%rdx, env(%rip)
	movq	%rdx, (%rax)
	movq	8(%rsi), %rsi
	testb	$15, %sil
	movq	%rax, %rdi
	jne	.LBB154_9
.LBB154_6:                              # %"$8"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rcx
	testb	$6, %cl
	jne	.LBB154_12
# %bb.7:                                # %"$11"
                                        #   in Loop: Header=BB154_6 Depth=1
	testb	$8, %cl
	je	.LBB154_11
# %bb.8:                                # %"$14"
                                        #   in Loop: Header=BB154_6 Depth=1
	movq	(%rcx), %rcx
	jmp	.LBB154_12
.LBB154_10:                             # %"$16.preheader"
	leaq	SymTab+8(%rip), %r15
	xorl	%edi, %edi
	movq	%r15, %r14
	jmp	.LBB154_14
	.p2align	4, 0x90
.LBB154_13:                             # %"$15.loopexit"
                                        #   in Loop: Header=BB154_14 Depth=1
	movq	8(%rbx), %rsi
	testb	$15, 24(%rsi)
	movq	%rax, %rdi
	jne	.LBB154_20
.LBB154_14:                             # %"$16"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB154_17 Depth 2
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	evList
	movq	%rax, %rcx
	movq	%r15, %rdx
	callq	cons
	addq	$32, %rsp
	testq	%rdi, %rdi
	je	.LBB154_16
# %bb.15:                               # %"$18"
                                        #   in Loop: Header=BB154_14 Depth=1
	movq	%rax, 8(%rdi)
	jmp	.LBB154_17
	.p2align	4, 0x90
.LBB154_16:                             # %"$19"
                                        #   in Loop: Header=BB154_14 Depth=1
	movq	%rax, -16(%rbp)
	movq	%rax, %r14
	jmp	.LBB154_17
	.p2align	4, 0x90
.LBB154_19:                             # %"$23"
                                        #   in Loop: Header=BB154_17 Depth=2
	movq	8(%rsi), %rsi
	testb	$15, %sil
	jne	.LBB154_13
.LBB154_17:                             # %"$21"
                                        #   Parent Loop BB154_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	24(%rsi), %rcx
	testb	$15, %cl
	jne	.LBB154_19
# %bb.18:                               # %"$22"
                                        #   in Loop: Header=BB154_17 Depth=2
	movq	8(%rcx), %rcx
	movq	%rcx, 24(%rsi)
	jmp	.LBB154_19
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _mapcar;
	.scl	2;
	.type	32;
	.endef
	.globl	_mapcar                         # -- Begin function _mapcar
	.p2align	4, 0x90
_mapcar:                                # @_mapcar
.seh_proc _mapcar
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$24, %rsp
	.seh_stackalloc 24
	leaq	16(%rsp), %rbp
	.seh_setframe %rbp, 16
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	env(%rip), %rcx
	leaq	SymTab+8(%rip), %r13
	movq	%r13, -16(%rbp)
	movq	%rcx, -8(%rbp)
	leaq	-16(%rbp), %rcx
	movq	%rcx, env(%rip)
	movq	(%rax), %rcx
	movq	8(%rax), %rdi
	testb	$6, %cl
	jne	.LBB155_4
# %bb.1:                                # %"$3"
	testb	$8, %cl
	jne	.LBB155_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB155_4
.LBB155_2:                              # %"$6"
	movq	(%rcx), %rcx
.LBB155_4:                              # %"$2"
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%r15, %rax
	orq	$8, %rax
	movq	%r13, (%rax)
	movq	$2, 16(%r15)
	leaq	24(%r15), %rdx
	movq	%rcx, 24(%r15)
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r12
	movq	env(%rip), %rax
	movq	%rax, 32(%r15)
	movq	%rdx, env(%rip)
	movq	%rdx, (%r15)
	movq	%r15, %r14
	movq	%r12, %rbx
	.p2align	4, 0x90
.LBB155_5:                              # %"$7"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rcx
	testb	$6, %cl
	jne	.LBB155_9
# %bb.6:                                # %"$9"
                                        #   in Loop: Header=BB155_5 Depth=1
	testb	$8, %cl
	jne	.LBB155_7
# %bb.8:                                # %"$11"
                                        #   in Loop: Header=BB155_5 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	movq	env(%rip), %rdx
	jmp	.LBB155_9
.LBB155_7:                              # %"$12"
                                        #   in Loop: Header=BB155_5 Depth=1
	movq	(%rcx), %rcx
	.p2align	4, 0x90
.LBB155_9:                              # %"$8"
                                        #   in Loop: Header=BB155_5 Depth=1
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rcx, (%rsi)
	movq	%rsi, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	%rsi, env(%rip)
	movq	%rcx, (%rbx)
	testb	$15, %cl
	jne	.LBB155_11
# %bb.10:                               # %"$13"
                                        #   in Loop: Header=BB155_5 Depth=1
	movq	(%rcx), %rcx
.LBB155_11:                             # %"$14"
                                        #   in Loop: Header=BB155_5 Depth=1
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rsi, %rax
	orq	$8, %rax
	movq	%r13, (%rax)
	movq	$2, 16(%rsi)
	leaq	24(%rsi), %rdx
	movq	%rcx, 24(%rsi)
	movq	%rsi, 8(%r14)
	movq	env(%rip), %rax
	movq	%rax, 32(%rsi)
	movq	%rdx, env(%rip)
	movq	%rdx, (%rsi)
	movq	8(%rdi), %rdi
	testb	$15, %dil
	jne	.LBB155_13
# %bb.12:                               # %"$15"
                                        #   in Loop: Header=BB155_5 Depth=1
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rax, 8(%rbx)
	movq	%rsi, %r14
	movq	%rax, %rbx
	jmp	.LBB155_5
.LBB155_13:                             # %"$16"
	testb	$15, (%r12)
	je	.LBB155_14
.LBB155_26:                             # %"$18"
	movq	-8(%rbp), %rax
	movq	%rax, env(%rip)
	movq	%r13, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB155_14:                             # %"$19.preheader"
	leaq	SymTab+8(%rip), %r14
	xorl	%esi, %esi
	movq	%r14, %r13
	jmp	.LBB155_15
	.p2align	4, 0x90
.LBB155_25:                             #   in Loop: Header=BB155_15 Depth=1
	movq	%rax, %rsi
.LBB155_15:                             # %"$19"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB155_21 Depth 2
	subq	$32, %rsp
	movq	%r15, %rcx
	callq	evList
	movq	%rax, %rcx
	movq	%r14, %rdx
	callq	cons
	addq	$32, %rsp
	testq	%rsi, %rsi
	je	.LBB155_17
# %bb.16:                               # %"$20"
                                        #   in Loop: Header=BB155_15 Depth=1
	movq	%rax, 8(%rsi)
	jmp	.LBB155_18
	.p2align	4, 0x90
.LBB155_17:                             # %"$21"
                                        #   in Loop: Header=BB155_15 Depth=1
	movq	%rax, -16(%rbp)
	movq	%rax, %r13
.LBB155_18:                             # %"$22"
                                        #   in Loop: Header=BB155_15 Depth=1
	movq	(%r12), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, (%r12)
	testb	$15, %cl
	jne	.LBB155_26
# %bb.19:                               # %"$23"
                                        #   in Loop: Header=BB155_15 Depth=1
	movq	8(%r15), %rdx
	movq	(%rcx), %rcx
	movq	%rcx, 24(%rdx)
	movq	8(%rdx), %rcx
	testb	$15, %cl
	movq	%rax, %rsi
	jne	.LBB155_15
# %bb.20:                               # %"$26.preheader"
                                        #   in Loop: Header=BB155_15 Depth=1
	movq	%r12, %rdx
	jmp	.LBB155_21
	.p2align	4, 0x90
.LBB155_24:                             # %"$28"
                                        #   in Loop: Header=BB155_21 Depth=2
	movq	%rbx, 24(%rcx)
	movq	8(%rcx), %rcx
	testb	$15, %cl
	jne	.LBB155_25
.LBB155_21:                             # %"$26"
                                        #   Parent Loop BB155_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rdx), %rdx
	movq	(%rdx), %rbx
	testb	$15, %bl
	jne	.LBB155_24
# %bb.22:                               # %"$29"
                                        #   in Loop: Header=BB155_21 Depth=2
	movq	8(%rbx), %rbx
	movq	%rbx, (%rdx)
	testb	$15, %bl
	jne	.LBB155_24
# %bb.23:                               # %"$31"
                                        #   in Loop: Header=BB155_21 Depth=2
	movq	(%rbx), %rbx
	jmp	.LBB155_24
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _mapcon;
	.scl	2;
	.type	32;
	.endef
	.globl	_mapcon                         # -- Begin function _mapcon
	.p2align	4, 0x90
_mapcon:                                # @_mapcon
.seh_proc _mapcon
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$24, %rsp
	.seh_stackalloc 24
	leaq	16(%rsp), %rbp
	.seh_setframe %rbp, 16
	.seh_endprologue
	movq	8(%rcx), %rsi
	movq	env(%rip), %rax
	leaq	SymTab+8(%rip), %r14
	movq	%r14, -16(%rbp)
	movq	%rax, -8(%rbp)
	leaq	-16(%rbp), %rax
	movq	%rax, env(%rip)
	movq	(%rsi), %rcx
	testb	$6, %cl
	jne	.LBB156_4
# %bb.1:                                # %"$3"
	testb	$8, %cl
	jne	.LBB156_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB156_4
.LBB156_2:                              # %"$6"
	movq	(%rcx), %rcx
.LBB156_4:                              # %"$2"
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%r15, %rax
	orq	$8, %rax
	movq	%r14, (%rax)
	movq	$2, 16(%r15)
	leaq	24(%r15), %rax
	movq	%rcx, 24(%r15)
	movq	env(%rip), %rcx
	movq	%rcx, 32(%r15)
	movq	%rax, env(%rip)
	movq	%rax, (%r15)
	movq	8(%rsi), %rsi
	testb	$15, %sil
	je	.LBB156_5
.LBB156_9:                              # %"$15.preheader"
	movq	8(%r15), %rbx
	testb	$15, 24(%rbx)
	je	.LBB156_10
.LBB156_23:                             # %"$17"
	movq	-8(%rbp), %rax
	movq	%rax, env(%rip)
	movq	%r14, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB156_5:
	leaq	SymTab+8(%rip), %rbx
	movq	%r15, %rdi
	jmp	.LBB156_6
.LBB156_11:                             # %"$13"
                                        #   in Loop: Header=BB156_6 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	.p2align	4, 0x90
.LBB156_12:                             # %"$10"
                                        #   in Loop: Header=BB156_6 Depth=1
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%rbx, (%rdx)
	movq	$2, 16(%rax)
	leaq	24(%rax), %rdx
	movq	%rcx, 24(%rax)
	movq	%rax, 8(%rdi)
	movq	env(%rip), %rcx
	movq	%rcx, 32(%rax)
	movq	%rdx, env(%rip)
	movq	%rdx, (%rax)
	movq	8(%rsi), %rsi
	testb	$15, %sil
	movq	%rax, %rdi
	jne	.LBB156_9
.LBB156_6:                              # %"$8"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rcx
	testb	$6, %cl
	jne	.LBB156_12
# %bb.7:                                # %"$11"
                                        #   in Loop: Header=BB156_6 Depth=1
	testb	$8, %cl
	je	.LBB156_11
# %bb.8:                                # %"$14"
                                        #   in Loop: Header=BB156_6 Depth=1
	movq	(%rcx), %rcx
	jmp	.LBB156_12
.LBB156_10:                             # %"$16.preheader"
	leaq	SymTab+8(%rip), %r14
	xorl	%esi, %esi
	jmp	.LBB156_14
	.p2align	4, 0x90
.LBB156_13:                             # %"$15.loopexit"
                                        #   in Loop: Header=BB156_14 Depth=1
	movq	8(%r15), %rbx
	testb	$15, 24(%rbx)
	jne	.LBB156_23
.LBB156_14:                             # %"$16"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB156_16 Depth 2
                                        #     Child Loop BB156_20 Depth 2
	subq	$32, %rsp
	movq	%r15, %rcx
	callq	evList
	addq	$32, %rsp
	testb	$15, %al
	jne	.LBB156_20
# %bb.15:                               # %"$18"
                                        #   in Loop: Header=BB156_14 Depth=1
	testq	%rsi, %rsi
	je	.LBB156_18
	.p2align	4, 0x90
.LBB156_16:                             # %"$23"
                                        #   Parent Loop BB156_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rsi, %rcx
	movq	8(%rsi), %rsi
	testb	$15, %sil
	je	.LBB156_16
# %bb.17:                               # %"$25"
                                        #   in Loop: Header=BB156_14 Depth=1
	movq	%rax, 8(%rcx)
	jmp	.LBB156_19
.LBB156_18:                             # %"$21"
                                        #   in Loop: Header=BB156_14 Depth=1
	movq	%rax, -16(%rbp)
	movq	%rax, %r14
.LBB156_19:                             # %"$19"
                                        #   in Loop: Header=BB156_14 Depth=1
	movq	%rax, %rsi
	jmp	.LBB156_20
	.p2align	4, 0x90
.LBB156_22:                             # %"$28"
                                        #   in Loop: Header=BB156_20 Depth=2
	movq	8(%rbx), %rbx
	testb	$15, %bl
	jne	.LBB156_13
.LBB156_20:                             # %"$26"
                                        #   Parent Loop BB156_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	24(%rbx), %rax
	testb	$15, %al
	jne	.LBB156_22
# %bb.21:                               # %"$27"
                                        #   in Loop: Header=BB156_20 Depth=2
	movq	8(%rax), %rax
	movq	%rax, 24(%rbx)
	jmp	.LBB156_22
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _mapcan;
	.scl	2;
	.type	32;
	.endef
	.globl	_mapcan                         # -- Begin function _mapcan
	.p2align	4, 0x90
_mapcan:                                # @_mapcan
.seh_proc _mapcan
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$24, %rsp
	.seh_stackalloc 24
	leaq	16(%rsp), %rbp
	.seh_setframe %rbp, 16
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	env(%rip), %rcx
	leaq	SymTab+8(%rip), %r15
	movq	%r15, -16(%rbp)
	movq	%rcx, -8(%rbp)
	leaq	-16(%rbp), %rcx
	movq	%rcx, env(%rip)
	movq	(%rax), %rcx
	movq	8(%rax), %rdi
	testb	$6, %cl
	jne	.LBB157_4
# %bb.1:                                # %"$3"
	testb	$8, %cl
	jne	.LBB157_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB157_4
.LBB157_2:                              # %"$6"
	movq	(%rcx), %rcx
.LBB157_4:                              # %"$2"
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%r14, %rax
	orq	$8, %rax
	movq	%r15, (%rax)
	movq	$2, 16(%r14)
	leaq	24(%r14), %rdx
	movq	%rcx, 24(%r14)
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r12
	movq	env(%rip), %rax
	movq	%rax, 32(%r14)
	movq	%rdx, env(%rip)
	movq	%rdx, (%r14)
	movq	%r14, %r13
	movq	%r12, %rbx
	.p2align	4, 0x90
.LBB157_5:                              # %"$7"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rcx
	testb	$6, %cl
	jne	.LBB157_9
# %bb.6:                                # %"$9"
                                        #   in Loop: Header=BB157_5 Depth=1
	testb	$8, %cl
	jne	.LBB157_7
# %bb.8:                                # %"$11"
                                        #   in Loop: Header=BB157_5 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	movq	env(%rip), %rdx
	jmp	.LBB157_9
.LBB157_7:                              # %"$12"
                                        #   in Loop: Header=BB157_5 Depth=1
	movq	(%rcx), %rcx
	.p2align	4, 0x90
.LBB157_9:                              # %"$8"
                                        #   in Loop: Header=BB157_5 Depth=1
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rcx, (%rsi)
	movq	%rsi, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	%rsi, env(%rip)
	movq	%rcx, (%rbx)
	testb	$15, %cl
	jne	.LBB157_11
# %bb.10:                               # %"$13"
                                        #   in Loop: Header=BB157_5 Depth=1
	movq	(%rcx), %rcx
.LBB157_11:                             # %"$14"
                                        #   in Loop: Header=BB157_5 Depth=1
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rsi, %rax
	orq	$8, %rax
	movq	%r15, (%rax)
	movq	$2, 16(%rsi)
	leaq	24(%rsi), %rdx
	movq	%rcx, 24(%rsi)
	movq	%rsi, 8(%r13)
	movq	env(%rip), %rax
	movq	%rax, 32(%rsi)
	movq	%rdx, env(%rip)
	movq	%rdx, (%rsi)
	movq	8(%rdi), %rdi
	testb	$15, %dil
	jne	.LBB157_13
# %bb.12:                               # %"$15"
                                        #   in Loop: Header=BB157_5 Depth=1
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rax, 8(%rbx)
	movq	%rsi, %r13
	movq	%rax, %rbx
	jmp	.LBB157_5
.LBB157_13:                             # %"$16"
	testb	$15, (%r12)
	je	.LBB157_14
.LBB157_28:                             # %"$18"
	movq	-8(%rbp), %rax
	movq	%rax, env(%rip)
	movq	%r15, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB157_14:                             # %"$19.preheader"
	leaq	SymTab+8(%rip), %r15
	xorl	%edi, %edi
	.p2align	4, 0x90
.LBB157_15:                             # %"$19"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB157_17 Depth 2
                                        #     Child Loop BB157_24 Depth 2
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	evList
	addq	$32, %rsp
	testb	$15, %al
	jne	.LBB157_21
# %bb.16:                               # %"$20"
                                        #   in Loop: Header=BB157_15 Depth=1
	testq	%rdi, %rdi
	je	.LBB157_19
	.p2align	4, 0x90
.LBB157_17:                             # %"$25"
                                        #   Parent Loop BB157_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rdi, %rcx
	movq	8(%rdi), %rdi
	testb	$15, %dil
	je	.LBB157_17
# %bb.18:                               # %"$27"
                                        #   in Loop: Header=BB157_15 Depth=1
	movq	%rax, 8(%rcx)
	jmp	.LBB157_20
.LBB157_19:                             # %"$23"
                                        #   in Loop: Header=BB157_15 Depth=1
	movq	%rax, -16(%rbp)
	movq	%rax, %r15
.LBB157_20:                             # %"$21"
                                        #   in Loop: Header=BB157_15 Depth=1
	movq	%rax, %rdi
.LBB157_21:                             # %"$21"
                                        #   in Loop: Header=BB157_15 Depth=1
	movq	(%r12), %rax
	movq	8(%rax), %rax
	movq	%rax, (%r12)
	testb	$15, %al
	jne	.LBB157_28
# %bb.22:                               # %"$28"
                                        #   in Loop: Header=BB157_15 Depth=1
	movq	8(%r14), %rcx
	movq	(%rax), %rax
	movq	%rax, 24(%rcx)
	movq	8(%rcx), %rax
	testb	$15, %al
	jne	.LBB157_15
# %bb.23:                               # %"$31.preheader"
                                        #   in Loop: Header=BB157_15 Depth=1
	movq	%r12, %rcx
	jmp	.LBB157_24
	.p2align	4, 0x90
.LBB157_27:                             # %"$33"
                                        #   in Loop: Header=BB157_24 Depth=2
	movq	%rdx, 24(%rax)
	movq	8(%rax), %rax
	testb	$15, %al
	jne	.LBB157_15
.LBB157_24:                             # %"$31"
                                        #   Parent Loop BB157_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rcx), %rcx
	movq	(%rcx), %rdx
	testb	$15, %dl
	jne	.LBB157_27
# %bb.25:                               # %"$34"
                                        #   in Loop: Header=BB157_24 Depth=2
	movq	8(%rdx), %rdx
	movq	%rdx, (%rcx)
	testb	$15, %dl
	jne	.LBB157_27
# %bb.26:                               # %"$36"
                                        #   in Loop: Header=BB157_24 Depth=2
	movq	(%rdx), %rdx
	jmp	.LBB157_27
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _filter;
	.scl	2;
	.type	32;
	.endef
	.globl	_filter                         # -- Begin function _filter
	.p2align	4, 0x90
_filter:                                # @_filter
.seh_proc _filter
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$24, %rsp
	.seh_stackalloc 24
	leaq	16(%rsp), %rbp
	.seh_setframe %rbp, 16
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	env(%rip), %rcx
	leaq	SymTab+8(%rip), %r12
	movq	%r12, -16(%rbp)
	movq	%rcx, -8(%rbp)
	leaq	-16(%rbp), %rcx
	movq	%rcx, env(%rip)
	movq	(%rax), %rcx
	movq	8(%rax), %rdi
	testb	$6, %cl
	jne	.LBB158_4
# %bb.1:                                # %"$3"
	testb	$8, %cl
	jne	.LBB158_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB158_4
.LBB158_2:                              # %"$6"
	movq	(%rcx), %rcx
.LBB158_4:                              # %"$2"
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%r15, %rax
	orq	$8, %rax
	movq	%r12, (%rax)
	movq	$2, 16(%r15)
	leaq	24(%r15), %rdx
	movq	%rcx, 24(%r15)
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r13
	movq	env(%rip), %rax
	movq	%rax, 32(%r15)
	movq	%rdx, env(%rip)
	movq	%rdx, (%r15)
	movq	%r15, %r14
	movq	%r13, %rbx
	.p2align	4, 0x90
.LBB158_5:                              # %"$7"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rcx
	testb	$6, %cl
	jne	.LBB158_9
# %bb.6:                                # %"$9"
                                        #   in Loop: Header=BB158_5 Depth=1
	testb	$8, %cl
	jne	.LBB158_7
# %bb.8:                                # %"$11"
                                        #   in Loop: Header=BB158_5 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	movq	env(%rip), %rdx
	jmp	.LBB158_9
.LBB158_7:                              # %"$12"
                                        #   in Loop: Header=BB158_5 Depth=1
	movq	(%rcx), %rcx
	.p2align	4, 0x90
.LBB158_9:                              # %"$8"
                                        #   in Loop: Header=BB158_5 Depth=1
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rcx, (%rsi)
	movq	%rsi, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	%rsi, env(%rip)
	movq	%rcx, (%rbx)
	testb	$15, %cl
	jne	.LBB158_11
# %bb.10:                               # %"$13"
                                        #   in Loop: Header=BB158_5 Depth=1
	movq	(%rcx), %rcx
.LBB158_11:                             # %"$14"
                                        #   in Loop: Header=BB158_5 Depth=1
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rsi, %rax
	orq	$8, %rax
	movq	%r12, (%rax)
	movq	$2, 16(%rsi)
	leaq	24(%rsi), %rdx
	movq	%rcx, 24(%rsi)
	movq	%rsi, 8(%r14)
	movq	env(%rip), %rax
	movq	%rax, 32(%rsi)
	movq	%rdx, env(%rip)
	movq	%rdx, (%rsi)
	movq	8(%rdi), %rdi
	testb	$15, %dil
	jne	.LBB158_13
# %bb.12:                               # %"$15"
                                        #   in Loop: Header=BB158_5 Depth=1
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rax, 8(%rbx)
	movq	%rsi, %r14
	movq	%rax, %rbx
	jmp	.LBB158_5
.LBB158_13:                             # %"$16"
	testb	$15, (%r13)
	je	.LBB158_14
.LBB158_27:                             # %"$18"
	movq	-8(%rbp), %rax
	movq	%rax, env(%rip)
	movq	%r12, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB158_14:                             # %"$19.preheader"
	leaq	SymTab+8(%rip), %r14
	xorl	%edi, %edi
	movq	%r14, %r12
	.p2align	4, 0x90
.LBB158_15:                             # %"$19"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB158_23 Depth 2
	subq	$32, %rsp
	movq	%r15, %rcx
	callq	evList
	addq	$32, %rsp
	cmpq	%r14, %rax
	je	.LBB158_20
# %bb.16:                               # %"$20"
                                        #   in Loop: Header=BB158_15 Depth=1
	movq	(%r13), %rax
	movq	(%rax), %rcx
	subq	$32, %rsp
	movq	%r14, %rdx
	callq	cons
	addq	$32, %rsp
	testq	%rdi, %rdi
	je	.LBB158_18
# %bb.17:                               # %"$22"
                                        #   in Loop: Header=BB158_15 Depth=1
	movq	%rax, 8(%rdi)
	jmp	.LBB158_19
.LBB158_18:                             # %"$23"
                                        #   in Loop: Header=BB158_15 Depth=1
	movq	%rax, -16(%rbp)
	movq	%rax, %r12
.LBB158_19:                             # %"$21"
                                        #   in Loop: Header=BB158_15 Depth=1
	movq	%rax, %rdi
.LBB158_20:                             # %"$21"
                                        #   in Loop: Header=BB158_15 Depth=1
	movq	(%r13), %rax
	movq	8(%rax), %rax
	movq	%rax, (%r13)
	testb	$15, %al
	jne	.LBB158_27
# %bb.21:                               # %"$25"
                                        #   in Loop: Header=BB158_15 Depth=1
	movq	8(%r15), %rcx
	movq	(%rax), %rax
	movq	%rax, 24(%rcx)
	movq	8(%rcx), %rax
	testb	$15, %al
	jne	.LBB158_15
# %bb.22:                               # %"$28.preheader"
                                        #   in Loop: Header=BB158_15 Depth=1
	movq	%r13, %rcx
	jmp	.LBB158_23
	.p2align	4, 0x90
.LBB158_26:                             # %"$30"
                                        #   in Loop: Header=BB158_23 Depth=2
	movq	%rdx, 24(%rax)
	movq	8(%rax), %rax
	testb	$15, %al
	jne	.LBB158_15
.LBB158_23:                             # %"$28"
                                        #   Parent Loop BB158_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rcx), %rcx
	movq	(%rcx), %rdx
	testb	$15, %dl
	jne	.LBB158_26
# %bb.24:                               # %"$31"
                                        #   in Loop: Header=BB158_23 Depth=2
	movq	8(%rdx), %rdx
	movq	%rdx, (%rcx)
	testb	$15, %dl
	jne	.LBB158_26
# %bb.25:                               # %"$33"
                                        #   in Loop: Header=BB158_23 Depth=2
	movq	(%rdx), %rdx
	jmp	.LBB158_26
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _extract;
	.scl	2;
	.type	32;
	.endef
	.globl	_extract                        # -- Begin function _extract
	.p2align	4, 0x90
_extract:                               # @_extract
.seh_proc _extract
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$24, %rsp
	.seh_stackalloc 24
	leaq	16(%rsp), %rbp
	.seh_setframe %rbp, 16
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	env(%rip), %rcx
	leaq	SymTab+8(%rip), %r12
	movq	%r12, -16(%rbp)
	movq	%rcx, -8(%rbp)
	leaq	-16(%rbp), %rcx
	movq	%rcx, env(%rip)
	movq	(%rax), %rcx
	movq	8(%rax), %rdi
	testb	$6, %cl
	jne	.LBB159_4
# %bb.1:                                # %"$3"
	testb	$8, %cl
	jne	.LBB159_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB159_4
.LBB159_2:                              # %"$6"
	movq	(%rcx), %rcx
.LBB159_4:                              # %"$2"
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%r15, %rax
	orq	$8, %rax
	movq	%r12, (%rax)
	movq	$2, 16(%r15)
	leaq	24(%r15), %rdx
	movq	%rcx, 24(%r15)
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r13
	movq	env(%rip), %rax
	movq	%rax, 32(%r15)
	movq	%rdx, env(%rip)
	movq	%rdx, (%r15)
	movq	%r15, %r14
	movq	%r13, %rbx
	.p2align	4, 0x90
.LBB159_5:                              # %"$7"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rcx
	testb	$6, %cl
	jne	.LBB159_9
# %bb.6:                                # %"$9"
                                        #   in Loop: Header=BB159_5 Depth=1
	testb	$8, %cl
	jne	.LBB159_7
# %bb.8:                                # %"$11"
                                        #   in Loop: Header=BB159_5 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	movq	env(%rip), %rdx
	jmp	.LBB159_9
.LBB159_7:                              # %"$12"
                                        #   in Loop: Header=BB159_5 Depth=1
	movq	(%rcx), %rcx
	.p2align	4, 0x90
.LBB159_9:                              # %"$8"
                                        #   in Loop: Header=BB159_5 Depth=1
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rcx, (%rsi)
	movq	%rsi, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	%rsi, env(%rip)
	movq	%rcx, (%rbx)
	testb	$15, %cl
	jne	.LBB159_11
# %bb.10:                               # %"$13"
                                        #   in Loop: Header=BB159_5 Depth=1
	movq	(%rcx), %rcx
.LBB159_11:                             # %"$14"
                                        #   in Loop: Header=BB159_5 Depth=1
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rsi, %rax
	orq	$8, %rax
	movq	%r12, (%rax)
	movq	$2, 16(%rsi)
	leaq	24(%rsi), %rdx
	movq	%rcx, 24(%rsi)
	movq	%rsi, 8(%r14)
	movq	env(%rip), %rax
	movq	%rax, 32(%rsi)
	movq	%rdx, env(%rip)
	movq	%rdx, (%rsi)
	movq	8(%rdi), %rdi
	testb	$15, %dil
	jne	.LBB159_13
# %bb.12:                               # %"$15"
                                        #   in Loop: Header=BB159_5 Depth=1
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rax, 8(%rbx)
	movq	%rsi, %r14
	movq	%rax, %rbx
	jmp	.LBB159_5
.LBB159_13:                             # %"$16"
	testb	$15, (%r13)
	je	.LBB159_14
.LBB159_27:                             # %"$18"
	movq	-8(%rbp), %rax
	movq	%rax, env(%rip)
	movq	%r12, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB159_14:                             # %"$19.preheader"
	leaq	SymTab+8(%rip), %r14
	xorl	%edi, %edi
	movq	%r14, %r12
	.p2align	4, 0x90
.LBB159_15:                             # %"$19"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB159_23 Depth 2
	subq	$32, %rsp
	movq	%r15, %rcx
	callq	evList
	addq	$32, %rsp
	cmpq	%r14, %rax
	je	.LBB159_20
# %bb.16:                               # %"$20"
                                        #   in Loop: Header=BB159_15 Depth=1
	subq	$32, %rsp
	movq	%rax, %rcx
	movq	%r14, %rdx
	callq	cons
	addq	$32, %rsp
	testq	%rdi, %rdi
	je	.LBB159_18
# %bb.17:                               # %"$22"
                                        #   in Loop: Header=BB159_15 Depth=1
	movq	%rax, 8(%rdi)
	jmp	.LBB159_19
.LBB159_18:                             # %"$23"
                                        #   in Loop: Header=BB159_15 Depth=1
	movq	%rax, -16(%rbp)
	movq	%rax, %r12
.LBB159_19:                             # %"$21"
                                        #   in Loop: Header=BB159_15 Depth=1
	movq	%rax, %rdi
.LBB159_20:                             # %"$21"
                                        #   in Loop: Header=BB159_15 Depth=1
	movq	(%r13), %rax
	movq	8(%rax), %rax
	movq	%rax, (%r13)
	testb	$15, %al
	jne	.LBB159_27
# %bb.21:                               # %"$25"
                                        #   in Loop: Header=BB159_15 Depth=1
	movq	8(%r15), %rcx
	movq	(%rax), %rax
	movq	%rax, 24(%rcx)
	movq	8(%rcx), %rax
	testb	$15, %al
	jne	.LBB159_15
# %bb.22:                               # %"$28.preheader"
                                        #   in Loop: Header=BB159_15 Depth=1
	movq	%r13, %rcx
	jmp	.LBB159_23
	.p2align	4, 0x90
.LBB159_26:                             # %"$30"
                                        #   in Loop: Header=BB159_23 Depth=2
	movq	%rdx, 24(%rax)
	movq	8(%rax), %rax
	testb	$15, %al
	jne	.LBB159_15
.LBB159_23:                             # %"$28"
                                        #   Parent Loop BB159_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rcx), %rcx
	movq	(%rcx), %rdx
	testb	$15, %dl
	jne	.LBB159_26
# %bb.24:                               # %"$31"
                                        #   in Loop: Header=BB159_23 Depth=2
	movq	8(%rdx), %rdx
	movq	%rdx, (%rcx)
	testb	$15, %dl
	jne	.LBB159_26
# %bb.25:                               # %"$33"
                                        #   in Loop: Header=BB159_23 Depth=2
	movq	(%rdx), %rdx
	jmp	.LBB159_26
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _seek;
	.scl	2;
	.type	32;
	.endef
	.globl	_seek                           # -- Begin function _seek
	.p2align	4, 0x90
_seek:                                  # @_seek
.seh_proc _seek
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rsi
	movq	(%rsi), %rcx
	testb	$6, %cl
	jne	.LBB160_4
# %bb.1:                                # %"$3"
	testb	$8, %cl
	jne	.LBB160_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB160_4
.LBB160_2:                              # %"$6"
	movq	(%rcx), %rcx
.LBB160_4:                              # %"$2"
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rdi, %rax
	orq	$8, %rax
	leaq	SymTab+8(%rip), %r15
	movq	%r15, (%rax)
	movq	$2, 16(%rdi)
	leaq	24(%rdi), %r14
	movq	%rcx, 24(%rdi)
	movq	env(%rip), %rax
	movq	%rax, 32(%rdi)
	movq	%r14, env(%rip)
	movq	%r14, (%rdi)
	movq	8(%rsi), %rbx
	testb	$15, %bl
	je	.LBB160_5
.LBB160_9:                              # %"$15.preheader"
	movq	8(%rdi), %rbx
	testb	$15, 24(%rbx)
	jne	.LBB160_20
# %bb.10:                               # %"$16.preheader"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	leaq	SymTab+8(%rip), %r15
	cmpq	%r15, %rax
	jne	.LBB160_19
	.p2align	4, 0x90
.LBB160_12:                             # %"$21"
                                        # =>This Inner Loop Header: Depth=1
	movq	24(%rbx), %rax
	testb	$15, %al
	jne	.LBB160_14
# %bb.13:                               # %"$22"
                                        #   in Loop: Header=BB160_12 Depth=1
	movq	8(%rax), %rax
	movq	%rax, 24(%rbx)
.LBB160_14:                             # %"$23"
                                        #   in Loop: Header=BB160_12 Depth=1
	movq	8(%rbx), %rbx
	testb	$15, %bl
	je	.LBB160_12
# %bb.15:                               # %"$15.loopexit"
                                        #   in Loop: Header=BB160_12 Depth=1
	movq	8(%rdi), %rbx
	testb	$15, 24(%rbx)
	jne	.LBB160_20
# %bb.16:                               # %"$16"
                                        #   in Loop: Header=BB160_12 Depth=1
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	cmpq	%r15, %rax
	je	.LBB160_12
.LBB160_19:
	addq	$24, %rbx
	movq	%rax, SymTab+456(%rip)
	movq	(%rbx), %r15
.LBB160_20:                             # %"$17"
	movq	8(%r14), %rax
	movq	%rax, env(%rip)
	movq	%r15, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB160_5:
	leaq	SymTab+8(%rip), %r12
	movq	%rdi, %rsi
	jmp	.LBB160_6
.LBB160_17:                             # %"$13"
                                        #   in Loop: Header=BB160_6 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	.p2align	4, 0x90
.LBB160_18:                             # %"$10"
                                        #   in Loop: Header=BB160_6 Depth=1
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%r12, (%rdx)
	movq	$2, 16(%rax)
	leaq	24(%rax), %rdx
	movq	%rcx, 24(%rax)
	movq	%rax, 8(%rsi)
	movq	env(%rip), %rcx
	movq	%rcx, 32(%rax)
	movq	%rdx, env(%rip)
	movq	%rdx, (%rax)
	movq	8(%rbx), %rbx
	testb	$15, %bl
	movq	%rax, %rsi
	jne	.LBB160_9
.LBB160_6:                              # %"$8"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rbx), %rcx
	testb	$6, %cl
	jne	.LBB160_18
# %bb.7:                                # %"$11"
                                        #   in Loop: Header=BB160_6 Depth=1
	testb	$8, %cl
	je	.LBB160_17
# %bb.8:                                # %"$14"
                                        #   in Loop: Header=BB160_6 Depth=1
	movq	(%rcx), %rcx
	jmp	.LBB160_18
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _find;
	.scl	2;
	.type	32;
	.endef
	.globl	_find                           # -- Begin function _find
	.p2align	4, 0x90
_find:                                  # @_find
.seh_proc _find
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	testb	$6, %cl
	jne	.LBB161_4
# %bb.1:                                # %"$3"
	testb	$8, %cl
	jne	.LBB161_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB161_4
.LBB161_2:                              # %"$6"
	movq	(%rcx), %rcx
.LBB161_4:                              # %"$2"
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%r14, %rax
	orq	$8, %rax
	leaq	SymTab+8(%rip), %r13
	movq	%r13, (%rax)
	movq	$2, 16(%r14)
	leaq	24(%r14), %rdx
	movq	%rcx, 24(%r14)
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	env(%rip), %rax
	movq	%rax, 32(%r14)
	movq	%rdx, env(%rip)
	movq	%rdx, (%r14)
	movq	%rdx, (%rbp)                    # 8-byte Spill
	movq	%r14, %r12
	movq	%r15, %rsi
	.p2align	4, 0x90
.LBB161_5:                              # %"$7"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rbx), %rcx
	testb	$6, %cl
	jne	.LBB161_9
# %bb.6:                                # %"$9"
                                        #   in Loop: Header=BB161_5 Depth=1
	testb	$8, %cl
	jne	.LBB161_7
# %bb.8:                                # %"$11"
                                        #   in Loop: Header=BB161_5 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	movq	env(%rip), %rdx
	jmp	.LBB161_9
.LBB161_7:                              # %"$12"
                                        #   in Loop: Header=BB161_5 Depth=1
	movq	(%rcx), %rcx
	.p2align	4, 0x90
.LBB161_9:                              # %"$8"
                                        #   in Loop: Header=BB161_5 Depth=1
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rcx, (%rdi)
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	%rdi, env(%rip)
	movq	%rcx, (%rsi)
	testb	$15, %cl
	jne	.LBB161_11
# %bb.10:                               # %"$13"
                                        #   in Loop: Header=BB161_5 Depth=1
	movq	(%rcx), %rcx
.LBB161_11:                             # %"$14"
                                        #   in Loop: Header=BB161_5 Depth=1
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%r13, (%rax)
	movq	$2, 16(%rdi)
	leaq	24(%rdi), %rdx
	movq	%rcx, 24(%rdi)
	movq	%rdi, 8(%r12)
	movq	env(%rip), %rax
	movq	%rax, 32(%rdi)
	movq	%rdx, env(%rip)
	movq	%rdx, (%rdi)
	movq	8(%rbx), %rbx
	testb	$15, %bl
	jne	.LBB161_13
# %bb.12:                               # %"$15"
                                        #   in Loop: Header=BB161_5 Depth=1
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rax, 8(%rsi)
	movq	%rdi, %r12
	movq	%rax, %rsi
	jmp	.LBB161_5
.LBB161_13:                             # %"$16"
	testb	$15, (%r15)
	jne	.LBB161_20
# %bb.14:                               # %"$20.preheader"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	evList
	addq	$32, %rsp
	leaq	SymTab+8(%rip), %r13
	jmp	.LBB161_15
	.p2align	4, 0x90
.LBB161_18:                             # %"$20.loopexit"
                                        #   in Loop: Header=BB161_15 Depth=1
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	evList
	addq	$32, %rsp
.LBB161_15:                             # %"$20.preheader"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB161_22 Depth 2
	cmpq	%r13, %rax
	jne	.LBB161_19
# %bb.16:                               # %"$21"
                                        #   in Loop: Header=BB161_15 Depth=1
	movq	(%r15), %rax
	movq	8(%rax), %rax
	movq	%rax, (%r15)
	testb	$15, %al
	jne	.LBB161_20
# %bb.17:                               # %"$24"
                                        #   in Loop: Header=BB161_15 Depth=1
	movq	8(%r14), %rcx
	movq	(%rax), %rax
	movq	%rax, 24(%rcx)
	movq	8(%rcx), %rax
	testb	$15, %al
	jne	.LBB161_18
# %bb.21:                               # %"$27.preheader"
                                        #   in Loop: Header=BB161_15 Depth=1
	movq	%r15, %rcx
	jmp	.LBB161_22
	.p2align	4, 0x90
.LBB161_25:                             # %"$29"
                                        #   in Loop: Header=BB161_22 Depth=2
	movq	%rdx, 24(%rax)
	movq	8(%rax), %rax
	testb	$15, %al
	jne	.LBB161_18
.LBB161_22:                             # %"$27"
                                        #   Parent Loop BB161_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rcx), %rcx
	movq	(%rcx), %rdx
	testb	$15, %dl
	jne	.LBB161_25
# %bb.23:                               # %"$30"
                                        #   in Loop: Header=BB161_22 Depth=2
	movq	8(%rdx), %rdx
	movq	%rdx, (%rcx)
	testb	$15, %dl
	jne	.LBB161_25
# %bb.24:                               # %"$32"
                                        #   in Loop: Header=BB161_22 Depth=2
	movq	(%rdx), %rdx
	jmp	.LBB161_25
.LBB161_19:                             # %"$23"
	movq	%rax, SymTab+456(%rip)
	movq	(%r15), %rax
	movq	(%rax), %r13
.LBB161_20:                             # %"$19"
	movq	(%rbp), %rax                    # 8-byte Reload
	movq	8(%rax), %rax
	movq	%rax, env(%rip)
	movq	%r13, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _pick;
	.scl	2;
	.type	32;
	.endef
	.globl	_pick                           # -- Begin function _pick
	.p2align	4, 0x90
_pick:                                  # @_pick
.seh_proc _pick
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	testb	$6, %cl
	jne	.LBB162_4
# %bb.1:                                # %"$3"
	testb	$8, %cl
	jne	.LBB162_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB162_4
.LBB162_2:                              # %"$6"
	movq	(%rcx), %rcx
.LBB162_4:                              # %"$2"
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%r14, %rax
	orq	$8, %rax
	leaq	SymTab+8(%rip), %r13
	movq	%r13, (%rax)
	movq	$2, 16(%r14)
	leaq	24(%r14), %rdx
	movq	%rcx, 24(%r14)
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	env(%rip), %rax
	movq	%rax, 32(%r14)
	movq	%rdx, env(%rip)
	movq	%rdx, (%r14)
	movq	%rdx, (%rbp)                    # 8-byte Spill
	movq	%r14, %r12
	movq	%r15, %rsi
	.p2align	4, 0x90
.LBB162_5:                              # %"$7"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rbx), %rcx
	testb	$6, %cl
	jne	.LBB162_9
# %bb.6:                                # %"$9"
                                        #   in Loop: Header=BB162_5 Depth=1
	testb	$8, %cl
	jne	.LBB162_7
# %bb.8:                                # %"$11"
                                        #   in Loop: Header=BB162_5 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	movq	env(%rip), %rdx
	jmp	.LBB162_9
.LBB162_7:                              # %"$12"
                                        #   in Loop: Header=BB162_5 Depth=1
	movq	(%rcx), %rcx
	.p2align	4, 0x90
.LBB162_9:                              # %"$8"
                                        #   in Loop: Header=BB162_5 Depth=1
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rcx, (%rdi)
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	%rdi, env(%rip)
	movq	%rcx, (%rsi)
	testb	$15, %cl
	jne	.LBB162_11
# %bb.10:                               # %"$13"
                                        #   in Loop: Header=BB162_5 Depth=1
	movq	(%rcx), %rcx
.LBB162_11:                             # %"$14"
                                        #   in Loop: Header=BB162_5 Depth=1
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%r13, (%rax)
	movq	$2, 16(%rdi)
	leaq	24(%rdi), %rdx
	movq	%rcx, 24(%rdi)
	movq	%rdi, 8(%r12)
	movq	env(%rip), %rax
	movq	%rax, 32(%rdi)
	movq	%rdx, env(%rip)
	movq	%rdx, (%rdi)
	movq	8(%rbx), %rbx
	testb	$15, %bl
	jne	.LBB162_13
# %bb.12:                               # %"$15"
                                        #   in Loop: Header=BB162_5 Depth=1
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rax, 8(%rsi)
	movq	%rdi, %r12
	movq	%rax, %rsi
	jmp	.LBB162_5
.LBB162_13:                             # %"$16"
	testb	$15, (%r15)
	jne	.LBB162_19
# %bb.14:                               # %"$20.preheader"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r13
	leaq	SymTab+8(%rip), %rsi
	cmpq	%rsi, %rax
	je	.LBB162_15
	jmp	.LBB162_19
	.p2align	4, 0x90
.LBB162_17:                             # %"$20.loopexit"
                                        #   in Loop: Header=BB162_15 Depth=1
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	evList
	addq	$32, %rsp
	cmpq	%rsi, %rax
	jne	.LBB162_18
.LBB162_15:                             # %"$21"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB162_22 Depth 2
	movq	(%r15), %rax
	movq	8(%rax), %rax
	movq	%rax, (%r15)
	testb	$15, %al
	jne	.LBB162_16
# %bb.20:                               # %"$24"
                                        #   in Loop: Header=BB162_15 Depth=1
	movq	8(%r14), %rcx
	movq	(%rax), %rax
	movq	%rax, 24(%rcx)
	movq	8(%rcx), %rax
	testb	$15, %al
	jne	.LBB162_17
# %bb.21:                               # %"$27.preheader"
                                        #   in Loop: Header=BB162_15 Depth=1
	movq	%r15, %rcx
	jmp	.LBB162_22
	.p2align	4, 0x90
.LBB162_25:                             # %"$29"
                                        #   in Loop: Header=BB162_22 Depth=2
	movq	%rdx, 24(%rax)
	movq	8(%rax), %rax
	testb	$15, %al
	jne	.LBB162_17
.LBB162_22:                             # %"$27"
                                        #   Parent Loop BB162_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rcx), %rcx
	movq	(%rcx), %rdx
	testb	$15, %dl
	jne	.LBB162_25
# %bb.23:                               # %"$30"
                                        #   in Loop: Header=BB162_22 Depth=2
	movq	8(%rdx), %rdx
	movq	%rdx, (%rcx)
	testb	$15, %dl
	jne	.LBB162_25
# %bb.24:                               # %"$32"
                                        #   in Loop: Header=BB162_22 Depth=2
	movq	(%rdx), %rdx
	jmp	.LBB162_25
.LBB162_18:
	movq	%rax, %r13
	jmp	.LBB162_19
.LBB162_16:
	movq	%rsi, %r13
.LBB162_19:                             # %"$19"
	movq	(%rbp), %rax                    # 8-byte Reload
	movq	8(%rax), %rax
	movq	%rax, env(%rip)
	movq	%r13, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _fully;
	.scl	2;
	.type	32;
	.endef
	.globl	_fully                          # -- Begin function _fully
	.p2align	4, 0x90
_fully:                                 # @_fully
.seh_proc _fully
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	testb	$6, %cl
	jne	.LBB163_4
# %bb.1:                                # %"$3"
	testb	$8, %cl
	jne	.LBB163_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB163_4
.LBB163_2:                              # %"$6"
	movq	(%rcx), %rcx
.LBB163_4:                              # %"$2"
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%r14, %rax
	orq	$8, %rax
	leaq	SymTab+8(%rip), %r13
	movq	%r13, (%rax)
	movq	$2, 16(%r14)
	leaq	24(%r14), %rdx
	movq	%rcx, 24(%r14)
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	env(%rip), %rax
	movq	%rax, 32(%r14)
	movq	%rdx, env(%rip)
	movq	%rdx, (%r14)
	movq	%rdx, (%rbp)                    # 8-byte Spill
	movq	%r14, %r12
	movq	%r15, %rdi
	.p2align	4, 0x90
.LBB163_5:                              # %"$7"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rbx), %rcx
	testb	$6, %cl
	jne	.LBB163_9
# %bb.6:                                # %"$9"
                                        #   in Loop: Header=BB163_5 Depth=1
	testb	$8, %cl
	jne	.LBB163_7
# %bb.8:                                # %"$11"
                                        #   in Loop: Header=BB163_5 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	movq	env(%rip), %rdx
	jmp	.LBB163_9
.LBB163_7:                              # %"$12"
                                        #   in Loop: Header=BB163_5 Depth=1
	movq	(%rcx), %rcx
	.p2align	4, 0x90
.LBB163_9:                              # %"$8"
                                        #   in Loop: Header=BB163_5 Depth=1
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rcx, (%rsi)
	movq	%rsi, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	%rsi, env(%rip)
	movq	%rcx, (%rdi)
	testb	$15, %cl
	jne	.LBB163_11
# %bb.10:                               # %"$13"
                                        #   in Loop: Header=BB163_5 Depth=1
	movq	(%rcx), %rcx
.LBB163_11:                             # %"$14"
                                        #   in Loop: Header=BB163_5 Depth=1
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rsi, %rax
	orq	$8, %rax
	movq	%r13, (%rax)
	movq	$2, 16(%rsi)
	leaq	24(%rsi), %rdx
	movq	%rcx, 24(%rsi)
	movq	%rsi, 8(%r12)
	movq	env(%rip), %rax
	movq	%rax, 32(%rsi)
	movq	%rdx, env(%rip)
	movq	%rdx, (%rsi)
	movq	8(%rbx), %rbx
	testb	$15, %bl
	jne	.LBB163_13
# %bb.12:                               # %"$15"
                                        #   in Loop: Header=BB163_5 Depth=1
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rax, 8(%rdi)
	movq	%rsi, %r12
	movq	%rax, %rdi
	jmp	.LBB163_5
.LBB163_13:                             # %"$16"
	leaq	SymTab+280(%rip), %rdi
	testb	$15, (%r15)
	je	.LBB163_16
.LBB163_14:
	movq	%rdi, %r13
	jmp	.LBB163_15
.LBB163_16:                             # %"$20.preheader"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	evList
	addq	$32, %rsp
	cmpq	%r13, %rax
	jne	.LBB163_17
.LBB163_15:                             # %"$19"
	movq	(%rbp), %rax                    # 8-byte Reload
	movq	8(%rax), %rax
	movq	%rax, env(%rip)
	movq	%r13, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB163_17:
	leaq	SymTab+8(%rip), %r13
	jmp	.LBB163_19
	.p2align	4, 0x90
.LBB163_18:                             # %"$20.loopexit"
                                        #   in Loop: Header=BB163_19 Depth=1
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	evList
	addq	$32, %rsp
	cmpq	%r13, %rax
	je	.LBB163_15
.LBB163_19:                             # %"$21"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB163_22 Depth 2
	movq	(%r15), %rax
	movq	8(%rax), %rax
	movq	%rax, (%r15)
	testb	$15, %al
	jne	.LBB163_14
# %bb.20:                               # %"$24"
                                        #   in Loop: Header=BB163_19 Depth=1
	movq	8(%r14), %rcx
	movq	(%rax), %rax
	movq	%rax, 24(%rcx)
	movq	8(%rcx), %rax
	testb	$15, %al
	jne	.LBB163_18
# %bb.21:                               # %"$27.preheader"
                                        #   in Loop: Header=BB163_19 Depth=1
	movq	%r15, %rcx
	jmp	.LBB163_22
	.p2align	4, 0x90
.LBB163_25:                             # %"$29"
                                        #   in Loop: Header=BB163_22 Depth=2
	movq	%rdx, 24(%rax)
	movq	8(%rax), %rax
	testb	$15, %al
	jne	.LBB163_18
.LBB163_22:                             # %"$27"
                                        #   Parent Loop BB163_19 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rcx), %rcx
	movq	(%rcx), %rdx
	testb	$15, %dl
	jne	.LBB163_25
# %bb.23:                               # %"$30"
                                        #   in Loop: Header=BB163_22 Depth=2
	movq	8(%rdx), %rdx
	movq	%rdx, (%rcx)
	testb	$15, %dl
	jne	.LBB163_25
# %bb.24:                               # %"$32"
                                        #   in Loop: Header=BB163_22 Depth=2
	movq	(%rdx), %rdx
	jmp	.LBB163_25
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cnt;
	.scl	2;
	.type	32;
	.endef
	.globl	_cnt                            # -- Begin function _cnt
	.p2align	4, 0x90
_cnt:                                   # @_cnt
.seh_proc _cnt
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rdi
	testb	$6, %cl
	jne	.LBB164_4
# %bb.1:                                # %"$3"
	testb	$8, %cl
	jne	.LBB164_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB164_4
.LBB164_2:                              # %"$6"
	movq	(%rcx), %rcx
.LBB164_4:                              # %"$2"
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%r14, %rax
	orq	$8, %rax
	leaq	SymTab+8(%rip), %r13
	movq	%r13, (%rax)
	movq	$2, 16(%r14)
	leaq	24(%r14), %rdx
	movq	%rcx, 24(%r14)
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	env(%rip), %rax
	movq	%rax, 32(%r14)
	movq	%rdx, env(%rip)
	movq	%rdx, (%r14)
	movq	%rdx, (%rbp)                    # 8-byte Spill
	movq	%r14, %r12
	movq	%r15, %rsi
	.p2align	4, 0x90
.LBB164_5:                              # %"$7"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rcx
	testb	$6, %cl
	jne	.LBB164_9
# %bb.6:                                # %"$9"
                                        #   in Loop: Header=BB164_5 Depth=1
	testb	$8, %cl
	jne	.LBB164_7
# %bb.8:                                # %"$11"
                                        #   in Loop: Header=BB164_5 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	movq	env(%rip), %rdx
	jmp	.LBB164_9
.LBB164_7:                              # %"$12"
                                        #   in Loop: Header=BB164_5 Depth=1
	movq	(%rcx), %rcx
	.p2align	4, 0x90
.LBB164_9:                              # %"$8"
                                        #   in Loop: Header=BB164_5 Depth=1
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rcx, (%rbx)
	movq	%rbx, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	%rbx, env(%rip)
	movq	%rcx, (%rsi)
	testb	$15, %cl
	jne	.LBB164_11
# %bb.10:                               # %"$13"
                                        #   in Loop: Header=BB164_5 Depth=1
	movq	(%rcx), %rcx
.LBB164_11:                             # %"$14"
                                        #   in Loop: Header=BB164_5 Depth=1
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rbx, %rax
	orq	$8, %rax
	movq	%r13, (%rax)
	movq	$2, 16(%rbx)
	leaq	24(%rbx), %rdx
	movq	%rcx, 24(%rbx)
	movq	%rbx, 8(%r12)
	movq	env(%rip), %rax
	movq	%rax, 32(%rbx)
	movq	%rdx, env(%rip)
	movq	%rdx, (%rbx)
	movq	8(%rdi), %rdi
	testb	$15, %dil
	jne	.LBB164_13
# %bb.12:                               # %"$15"
                                        #   in Loop: Header=BB164_5 Depth=1
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rax, 8(%rsi)
	movq	%rbx, %r12
	movq	%rax, %rsi
	jmp	.LBB164_5
.LBB164_13:                             # %"$16"
	movl	$2, %edi
	testb	$15, (%r15)
	je	.LBB164_14
.LBB164_23:                             # %"$18"
	movq	(%rbp), %rax                    # 8-byte Reload
	movq	8(%rax), %rax
	movq	%rax, env(%rip)
	movq	%rdi, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB164_14:                             # %"$19.preheader"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	evList
	addq	$32, %rsp
	xorl	%edi, %edi
	cmpq	%r13, %rax
	setne	%dil
	shlq	$4, %rdi
	orq	$2, %rdi
	jmp	.LBB164_15
	.p2align	4, 0x90
.LBB164_22:                             # %"$19.loopexit"
                                        #   in Loop: Header=BB164_15 Depth=1
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	evList
	addq	$32, %rsp
	leaq	16(%rdi), %rcx
	cmpq	%r13, %rax
	cmovneq	%rcx, %rdi
.LBB164_15:                             # %"$19.preheader"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB164_18 Depth 2
	movq	(%r15), %rax
	movq	8(%rax), %rax
	movq	%rax, (%r15)
	testb	$15, %al
	jne	.LBB164_23
# %bb.16:                               # %"$22"
                                        #   in Loop: Header=BB164_15 Depth=1
	movq	8(%r14), %rcx
	movq	(%rax), %rax
	movq	%rax, 24(%rcx)
	movq	8(%rcx), %rax
	testb	$15, %al
	jne	.LBB164_22
# %bb.17:                               # %"$25.preheader"
                                        #   in Loop: Header=BB164_15 Depth=1
	movq	%r15, %rcx
	jmp	.LBB164_18
	.p2align	4, 0x90
.LBB164_21:                             # %"$27"
                                        #   in Loop: Header=BB164_18 Depth=2
	movq	%rdx, 24(%rax)
	movq	8(%rax), %rax
	testb	$15, %al
	jne	.LBB164_22
.LBB164_18:                             # %"$25"
                                        #   Parent Loop BB164_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rcx), %rcx
	movq	(%rcx), %rdx
	testb	$15, %dl
	jne	.LBB164_21
# %bb.19:                               # %"$28"
                                        #   in Loop: Header=BB164_18 Depth=2
	movq	8(%rdx), %rdx
	movq	%rdx, (%rcx)
	testb	$15, %dl
	jne	.LBB164_21
# %bb.20:                               # %"$30"
                                        #   in Loop: Header=BB164_18 Depth=2
	movq	(%rdx), %rdx
	jmp	.LBB164_21
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _sum;
	.scl	2;
	.type	32;
	.endef
	.globl	_sum                            # -- Begin function _sum
	.p2align	4, 0x90
_sum:                                   # @_sum
.seh_proc _sum
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$24, %rsp
	.seh_stackalloc 24
	leaq	16(%rsp), %rbp
	.seh_setframe %rbp, 16
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	env(%rip), %rcx
	movq	$2, -16(%rbp)
	movq	%rcx, -8(%rbp)
	leaq	-16(%rbp), %rcx
	movq	%rcx, env(%rip)
	movq	(%rax), %rcx
	movq	8(%rax), %rdi
	testb	$6, %cl
	jne	.LBB165_4
# %bb.1:                                # %"$3"
	testb	$8, %cl
	jne	.LBB165_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB165_4
.LBB165_2:                              # %"$6"
	movq	(%rcx), %rcx
.LBB165_4:                              # %"$2"
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%r14, %rax
	orq	$8, %rax
	leaq	SymTab+8(%rip), %r12
	movq	%r12, (%rax)
	movq	$2, 16(%r14)
	leaq	24(%r14), %rdx
	movq	%rcx, 24(%r14)
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	env(%rip), %rax
	movq	%rax, 32(%r14)
	movq	%rdx, env(%rip)
	movq	%rdx, (%r14)
	movq	%r14, %r13
	movq	%r15, %rbx
	.p2align	4, 0x90
.LBB165_5:                              # %"$7"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rcx
	testb	$6, %cl
	jne	.LBB165_9
# %bb.6:                                # %"$9"
                                        #   in Loop: Header=BB165_5 Depth=1
	testb	$8, %cl
	jne	.LBB165_7
# %bb.8:                                # %"$11"
                                        #   in Loop: Header=BB165_5 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	movq	env(%rip), %rdx
	jmp	.LBB165_9
.LBB165_7:                              # %"$12"
                                        #   in Loop: Header=BB165_5 Depth=1
	movq	(%rcx), %rcx
	.p2align	4, 0x90
.LBB165_9:                              # %"$8"
                                        #   in Loop: Header=BB165_5 Depth=1
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rcx, (%rsi)
	movq	%rsi, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	%rsi, env(%rip)
	movq	%rcx, (%rbx)
	testb	$15, %cl
	jne	.LBB165_11
# %bb.10:                               # %"$13"
                                        #   in Loop: Header=BB165_5 Depth=1
	movq	(%rcx), %rcx
.LBB165_11:                             # %"$14"
                                        #   in Loop: Header=BB165_5 Depth=1
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rsi, %rax
	orq	$8, %rax
	movq	%r12, (%rax)
	movq	$2, 16(%rsi)
	leaq	24(%rsi), %rdx
	movq	%rcx, 24(%rsi)
	movq	%rsi, 8(%r13)
	movq	env(%rip), %rax
	movq	%rax, 32(%rsi)
	movq	%rdx, env(%rip)
	movq	%rdx, (%rsi)
	movq	8(%rdi), %rdi
	testb	$15, %dil
	jne	.LBB165_13
# %bb.12:                               # %"$15"
                                        #   in Loop: Header=BB165_5 Depth=1
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rax, 8(%rbx)
	movq	%rsi, %r13
	movq	%rax, %rbx
	jmp	.LBB165_5
.LBB165_13:                             # %"$16"
	movl	$2, %edi
	testb	$15, (%r15)
	je	.LBB165_14
.LBB165_33:                             # %"$18"
	movq	-8(%rbp), %rax
	movq	%rax, env(%rip)
	movq	%rdi, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB165_14:                             # %"$19.preheader"
	movl	$2, %edi
	.p2align	4, 0x90
.LBB165_15:                             # %"$19"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB165_29 Depth 2
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdx
	testb	$6, %dl
	je	.LBB165_26
# %bb.16:                               # %"$20"
                                        #   in Loop: Header=BB165_15 Depth=1
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rdx, (%rsi)
	movq	%rsi, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rsi, env(%rip)
	testb	$8, %dil
	jne	.LBB165_21
# %bb.17:                               # %"$2.i"
                                        #   in Loop: Header=BB165_15 Depth=1
	testb	$8, %dl
	jne	.LBB165_20
# %bb.18:                               # %"$5.i"
                                        #   in Loop: Header=BB165_15 Depth=1
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	addu
	jmp	.LBB165_19
	.p2align	4, 0x90
.LBB165_21:                             # %"$3.i"
                                        #   in Loop: Header=BB165_15 Depth=1
	andq	$-9, %rdi
	testb	$8, %dl
	jne	.LBB165_23
# %bb.22:                               # %"$8.i"
                                        #   in Loop: Header=BB165_15 Depth=1
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	subu
	jmp	.LBB165_24
.LBB165_20:                             # %"$6.i"
                                        #   in Loop: Header=BB165_15 Depth=1
	andq	$-9, %rdx
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	subu
.LBB165_19:                             # %adds.exit
                                        #   in Loop: Header=BB165_15 Depth=1
	addq	$32, %rsp
	movq	%rax, %rdi
	jmp	.LBB165_25
.LBB165_23:                             # %"$9.i"
                                        #   in Loop: Header=BB165_15 Depth=1
	andq	$-9, %rdx
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	addu
.LBB165_24:                             # %"$10.i"
                                        #   in Loop: Header=BB165_15 Depth=1
	addq	$32, %rsp
	movq	%rax, %rdi
	xorq	$8, %rdi
	cmpq	$2, %rax
	cmoveq	%rax, %rdi
.LBB165_25:                             # %adds.exit
                                        #   in Loop: Header=BB165_15 Depth=1
	movq	%rdi, -16(%rbp)
	movq	8(%rsi), %rax
	movq	%rax, env(%rip)
.LBB165_26:                             # %"$21"
                                        #   in Loop: Header=BB165_15 Depth=1
	movq	(%r15), %rax
	movq	8(%rax), %rax
	movq	%rax, (%r15)
	testb	$15, %al
	jne	.LBB165_33
# %bb.27:                               # %"$22"
                                        #   in Loop: Header=BB165_15 Depth=1
	movq	8(%r14), %rcx
	movq	(%rax), %rax
	movq	%rax, 24(%rcx)
	movq	8(%rcx), %rax
	testb	$15, %al
	jne	.LBB165_15
# %bb.28:                               # %"$25.preheader"
                                        #   in Loop: Header=BB165_15 Depth=1
	movq	%r15, %rcx
	jmp	.LBB165_29
	.p2align	4, 0x90
.LBB165_32:                             # %"$27"
                                        #   in Loop: Header=BB165_29 Depth=2
	movq	%rdx, 24(%rax)
	movq	8(%rax), %rax
	testb	$15, %al
	jne	.LBB165_15
.LBB165_29:                             # %"$25"
                                        #   Parent Loop BB165_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rcx), %rcx
	movq	(%rcx), %rdx
	testb	$15, %dl
	jne	.LBB165_32
# %bb.30:                               # %"$28"
                                        #   in Loop: Header=BB165_29 Depth=2
	movq	8(%rdx), %rdx
	movq	%rdx, (%rcx)
	testb	$15, %dl
	jne	.LBB165_32
# %bb.31:                               # %"$30"
                                        #   in Loop: Header=BB165_29 Depth=2
	movq	(%rdx), %rdx
	jmp	.LBB165_32
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _maxi;
	.scl	2;
	.type	32;
	.endef
	.globl	_maxi                           # -- Begin function _maxi
	.p2align	4, 0x90
_maxi:                                  # @_maxi
.seh_proc _maxi
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$24, %rsp
	.seh_stackalloc 24
	leaq	16(%rsp), %rbp
	.seh_setframe %rbp, 16
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	env(%rip), %rcx
	leaq	SymTab+8(%rip), %r12
	movq	%r12, -16(%rbp)
	movq	%rcx, -8(%rbp)
	leaq	-16(%rbp), %rcx
	movq	%rcx, env(%rip)
	movq	(%rax), %rcx
	movq	8(%rax), %rsi
	testb	$6, %cl
	jne	.LBB166_4
# %bb.1:                                # %"$3"
	testb	$8, %cl
	jne	.LBB166_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB166_4
.LBB166_2:                              # %"$6"
	movq	(%rcx), %rcx
.LBB166_4:                              # %"$2"
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%r14, %rax
	orq	$8, %rax
	movq	%r12, (%rax)
	movq	$2, 16(%r14)
	leaq	24(%r14), %rdx
	movq	%rcx, 24(%r14)
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	env(%rip), %rax
	movq	%rax, 32(%r14)
	movq	%rdx, env(%rip)
	movq	%rdx, (%r14)
	movq	%r14, %r13
	movq	%r15, %rbx
	.p2align	4, 0x90
.LBB166_5:                              # %"$7"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rcx
	testb	$6, %cl
	jne	.LBB166_9
# %bb.6:                                # %"$9"
                                        #   in Loop: Header=BB166_5 Depth=1
	testb	$8, %cl
	jne	.LBB166_7
# %bb.8:                                # %"$11"
                                        #   in Loop: Header=BB166_5 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	movq	env(%rip), %rdx
	jmp	.LBB166_9
.LBB166_7:                              # %"$12"
                                        #   in Loop: Header=BB166_5 Depth=1
	movq	(%rcx), %rcx
	.p2align	4, 0x90
.LBB166_9:                              # %"$8"
                                        #   in Loop: Header=BB166_5 Depth=1
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rcx, (%rdi)
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	%rdi, env(%rip)
	movq	%rcx, (%rbx)
	testb	$15, %cl
	jne	.LBB166_11
# %bb.10:                               # %"$13"
                                        #   in Loop: Header=BB166_5 Depth=1
	movq	(%rcx), %rcx
.LBB166_11:                             # %"$14"
                                        #   in Loop: Header=BB166_5 Depth=1
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%r12, (%rax)
	movq	$2, 16(%rdi)
	leaq	24(%rdi), %rdx
	movq	%rcx, 24(%rdi)
	movq	%rdi, 8(%r13)
	movq	env(%rip), %rax
	movq	%rax, 32(%rdi)
	movq	%rdx, env(%rip)
	movq	%rdx, (%rdi)
	movq	8(%rsi), %rsi
	testb	$15, %sil
	jne	.LBB166_13
# %bb.12:                               # %"$15"
                                        #   in Loop: Header=BB166_5 Depth=1
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rax, 8(%rbx)
	movq	%rdi, %r13
	movq	%rax, %rbx
	jmp	.LBB166_5
.LBB166_13:                             # %"$16"
	testb	$15, (%r15)
	movq	%r12, %rsi
	je	.LBB166_14
.LBB166_24:                             # %"$18"
	movq	%rsi, SymTab+456(%rip)
	movq	-8(%rbp), %rax
	movq	%rax, env(%rip)
	movq	%r12, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB166_14:                             # %"$19.preheader"
	leaq	SymTab+8(%rip), %r12
	movq	%r12, %rsi
	.p2align	4, 0x90
.LBB166_15:                             # %"$19"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB166_20 Depth 2
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rbx
	subq	$32, %rsp
	movq	%rax, %rcx
	movq	%rsi, %rdx
	callq	compare
	addq	$32, %rsp
	testq	%rax, %rax
	movq	(%r15), %rax
	jle	.LBB166_17
# %bb.16:                               # %"$20"
                                        #   in Loop: Header=BB166_15 Depth=1
	movq	(%rax), %r12
	movq	%rbx, -16(%rbp)
	movq	%rbx, %rsi
.LBB166_17:                             # %"$21"
                                        #   in Loop: Header=BB166_15 Depth=1
	movq	8(%rax), %rax
	movq	%rax, (%r15)
	testb	$15, %al
	jne	.LBB166_24
# %bb.18:                               # %"$22"
                                        #   in Loop: Header=BB166_15 Depth=1
	movq	8(%r14), %rcx
	movq	(%rax), %rax
	movq	%rax, 24(%rcx)
	movq	8(%rcx), %rax
	testb	$15, %al
	jne	.LBB166_15
# %bb.19:                               # %"$25.preheader"
                                        #   in Loop: Header=BB166_15 Depth=1
	movq	%r15, %rcx
	jmp	.LBB166_20
	.p2align	4, 0x90
.LBB166_23:                             # %"$27"
                                        #   in Loop: Header=BB166_20 Depth=2
	movq	%rdx, 24(%rax)
	movq	8(%rax), %rax
	testb	$15, %al
	jne	.LBB166_15
.LBB166_20:                             # %"$25"
                                        #   Parent Loop BB166_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rcx), %rcx
	movq	(%rcx), %rdx
	testb	$15, %dl
	jne	.LBB166_23
# %bb.21:                               # %"$28"
                                        #   in Loop: Header=BB166_20 Depth=2
	movq	8(%rdx), %rdx
	movq	%rdx, (%rcx)
	testb	$15, %dl
	jne	.LBB166_23
# %bb.22:                               # %"$30"
                                        #   in Loop: Header=BB166_20 Depth=2
	movq	(%rdx), %rdx
	jmp	.LBB166_23
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _mini;
	.scl	2;
	.type	32;
	.endef
	.globl	_mini                           # -- Begin function _mini
	.p2align	4, 0x90
_mini:                                  # @_mini
.seh_proc _mini
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$24, %rsp
	.seh_stackalloc 24
	leaq	16(%rsp), %rbp
	.seh_setframe %rbp, 16
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	env(%rip), %rcx
	leaq	SymTab+280(%rip), %rdx
	movq	%rdx, -16(%rbp)
	movq	%rcx, -8(%rbp)
	leaq	-16(%rbp), %rcx
	movq	%rcx, env(%rip)
	movq	(%rax), %rcx
	movq	8(%rax), %rsi
	testb	$6, %cl
	jne	.LBB167_4
# %bb.1:                                # %"$3"
	testb	$8, %cl
	jne	.LBB167_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB167_4
.LBB167_2:                              # %"$6"
	movq	(%rcx), %rcx
.LBB167_4:                              # %"$2"
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%r14, %rax
	orq	$8, %rax
	leaq	SymTab+8(%rip), %r13
	movq	%r13, (%rax)
	movq	$2, 16(%r14)
	leaq	24(%r14), %rdx
	movq	%rcx, 24(%r14)
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r12
	movq	env(%rip), %rax
	movq	%rax, 32(%r14)
	movq	%rdx, env(%rip)
	movq	%rdx, (%r14)
	movq	%r14, %r15
	movq	%r12, %rbx
	.p2align	4, 0x90
.LBB167_5:                              # %"$7"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rcx
	testb	$6, %cl
	jne	.LBB167_9
# %bb.6:                                # %"$9"
                                        #   in Loop: Header=BB167_5 Depth=1
	testb	$8, %cl
	jne	.LBB167_7
# %bb.8:                                # %"$11"
                                        #   in Loop: Header=BB167_5 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	movq	env(%rip), %rdx
	jmp	.LBB167_9
.LBB167_7:                              # %"$12"
                                        #   in Loop: Header=BB167_5 Depth=1
	movq	(%rcx), %rcx
	.p2align	4, 0x90
.LBB167_9:                              # %"$8"
                                        #   in Loop: Header=BB167_5 Depth=1
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rcx, (%rdi)
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	%rdi, env(%rip)
	movq	%rcx, (%rbx)
	testb	$15, %cl
	jne	.LBB167_11
# %bb.10:                               # %"$13"
                                        #   in Loop: Header=BB167_5 Depth=1
	movq	(%rcx), %rcx
.LBB167_11:                             # %"$14"
                                        #   in Loop: Header=BB167_5 Depth=1
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%r13, (%rax)
	movq	$2, 16(%rdi)
	leaq	24(%rdi), %rdx
	movq	%rcx, 24(%rdi)
	movq	%rdi, 8(%r15)
	movq	env(%rip), %rax
	movq	%rax, 32(%rdi)
	movq	%rdx, env(%rip)
	movq	%rdx, (%rdi)
	movq	8(%rsi), %rsi
	testb	$15, %sil
	jne	.LBB167_13
# %bb.12:                               # %"$15"
                                        #   in Loop: Header=BB167_5 Depth=1
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rax, 8(%rbx)
	movq	%rdi, %r15
	movq	%rax, %rbx
	jmp	.LBB167_5
.LBB167_13:                             # %"$16"
	testb	$15, (%r12)
	leaq	SymTab+280(%rip), %rdi
	je	.LBB167_14
.LBB167_24:                             # %"$18"
	movq	%rdi, SymTab+456(%rip)
	movq	-8(%rbp), %rax
	movq	%rax, env(%rip)
	movq	%r13, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB167_14:                             # %"$19.preheader"
	leaq	SymTab+280(%rip), %rdi
	leaq	SymTab+8(%rip), %r13
	.p2align	4, 0x90
.LBB167_15:                             # %"$19"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB167_20 Depth 2
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	subq	$32, %rsp
	movq	%rax, %rcx
	movq	%rdi, %rdx
	callq	compare
	addq	$32, %rsp
	testq	%rax, %rax
	movq	(%r12), %rax
	jns	.LBB167_17
# %bb.16:                               # %"$20"
                                        #   in Loop: Header=BB167_15 Depth=1
	movq	(%rax), %r13
	movq	%rsi, -16(%rbp)
	movq	%rsi, %rdi
.LBB167_17:                             # %"$21"
                                        #   in Loop: Header=BB167_15 Depth=1
	movq	8(%rax), %rax
	movq	%rax, (%r12)
	testb	$15, %al
	jne	.LBB167_24
# %bb.18:                               # %"$22"
                                        #   in Loop: Header=BB167_15 Depth=1
	movq	8(%r14), %rcx
	movq	(%rax), %rax
	movq	%rax, 24(%rcx)
	movq	8(%rcx), %rax
	testb	$15, %al
	jne	.LBB167_15
# %bb.19:                               # %"$25.preheader"
                                        #   in Loop: Header=BB167_15 Depth=1
	movq	%r12, %rcx
	jmp	.LBB167_20
	.p2align	4, 0x90
.LBB167_23:                             # %"$27"
                                        #   in Loop: Header=BB167_20 Depth=2
	movq	%rdx, 24(%rax)
	movq	8(%rax), %rax
	testb	$15, %al
	jne	.LBB167_15
.LBB167_20:                             # %"$25"
                                        #   Parent Loop BB167_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rcx), %rcx
	movq	(%rcx), %rdx
	testb	$15, %dl
	jne	.LBB167_23
# %bb.21:                               # %"$28"
                                        #   in Loop: Header=BB167_20 Depth=2
	movq	8(%rdx), %rdx
	movq	%rdx, (%rcx)
	testb	$15, %dl
	jne	.LBB167_23
# %bb.22:                               # %"$30"
                                        #   in Loop: Header=BB167_20 Depth=2
	movq	(%rdx), %rdx
	jmp	.LBB167_23
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _fish;
	.scl	2;
	.type	32;
	.endef
	.globl	_fish                           # -- Begin function _fish
	.p2align	4, 0x90
_fish:                                  # @_fish
.seh_proc _fish
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$56, %rsp
	.seh_stackalloc 56
	leaq	48(%rsp), %rbp
	.seh_setframe %rbp, 48
	.seh_endprologue
	movq	8(%rcx), %rax
	leaq	SymTab+8(%rip), %r12
	movq	%r12, -16(%rbp)
	movq	env(%rip), %rcx
	movq	%rcx, -8(%rbp)
	leaq	-16(%rbp), %rcx
	movq	%rcx, env(%rip)
	movq	%r12, -40(%rbp)
	movq	$2, -32(%rbp)
	movq	(%rax), %rcx
	movq	8(%rax), %rdi
	testb	$6, %cl
	jne	.LBB168_4
# %bb.1:                                # %"$3"
	testb	$8, %cl
	jne	.LBB168_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB168_4
.LBB168_2:                              # %"$6"
	movq	(%rcx), %rcx
.LBB168_4:                              # %"$2"
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rsi, %rax
	orq	$8, %rax
	leaq	-48(%rbp), %rbx
	movq	%rbx, (%rax)
	movq	$2, 16(%rsi)
	leaq	24(%rsi), %rdx
	movq	%rcx, 24(%rsi)
	leaq	-24(%rbp), %rax
	movq	%rax, -48(%rbp)
	movq	env(%rip), %rax
	movq	%rax, 32(%rsi)
	movq	%rdx, env(%rip)
	movq	%rdx, (%rsi)
	movq	(%rdi), %r15
	movq	8(%rdi), %r13
	testb	$6, %r15b
	jne	.LBB168_8
# %bb.5:                                # %"$8"
	testb	$8, %r15b
	jne	.LBB168_6
# %bb.7:                                # %"$10"
	subq	$32, %rsp
	movq	%r15, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r15
	movq	env(%rip), %rdx
	jmp	.LBB168_8
.LBB168_6:                              # %"$11"
	movq	(%r15), %r15
.LBB168_8:                              # %"$7"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rcx
	movq	%r15, (%rcx)
	movq	%rcx, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	%rcx, env(%rip)
	movq	(%r13), %r14
	testb	$6, %r14b
	jne	.LBB168_12
# %bb.9:                                # %"$13"
	testb	$8, %r14b
	jne	.LBB168_10
# %bb.11:                               # %"$15"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r14
	movq	env(%rip), %rcx
	jmp	.LBB168_12
.LBB168_10:                             # %"$16"
	movq	(%r14), %r14
.LBB168_12:                             # %"$12"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%r14, (%rax)
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%rcx, (%rdx)
	movq	%rax, env(%rip)
	movq	8(%r13), %rdi
	testb	$15, %dil
	je	.LBB168_13
.LBB168_18:                             # %"$19"
	subq	$48, %rsp
	movq	%r14, 32(%rsp)
	leaq	-16(%rbp), %r9
	movq	%rsi, %rcx
	movq	%r15, %rdx
	leaq	-24(%rbp), %r8
	callq	fish
	addq	$48, %rsp
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rcx, env(%rip)
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB168_16:                             # %"$23"
                                        #   in Loop: Header=BB168_13 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	.p2align	4, 0x90
.LBB168_17:                             # %"$20"
                                        #   in Loop: Header=BB168_13 Depth=1
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%r12, (%rdx)
	movq	$2, 16(%rax)
	leaq	24(%rax), %rdx
	movq	%rcx, 24(%rax)
	movq	%rax, 8(%rbx)
	movq	env(%rip), %rcx
	movq	%rcx, 32(%rax)
	movq	%rdx, env(%rip)
	movq	%rdx, (%rax)
	movq	8(%rdi), %rdi
	testb	$15, %dil
	movq	%rax, %rbx
	jne	.LBB168_18
.LBB168_13:                             # %"$18"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rcx
	testb	$6, %cl
	jne	.LBB168_17
# %bb.14:                               # %"$21"
                                        #   in Loop: Header=BB168_13 Depth=1
	testb	$8, %cl
	je	.LBB168_16
# %bb.15:                               # %"$24"
                                        #   in Loop: Header=BB168_13 Depth=1
	movq	(%rcx), %rcx
	jmp	.LBB168_17
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _by;
	.scl	2;
	.type	32;
	.endef
	.globl	_by                             # -- Begin function _by
	.p2align	4, 0x90
_by:                                    # @_by
.seh_proc _by
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	leaq	32(%rsp), %rbp
	.seh_setframe %rbp, 32
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	env(%rip), %rcx
	leaq	SymTab+8(%rip), %r12
	movq	%r12, -16(%rbp)
	movq	%rcx, -8(%rbp)
	leaq	-16(%rbp), %rcx
	movq	%rcx, env(%rip)
	movq	(%rax), %rcx
	movq	8(%rax), %rsi
	testb	$6, %cl
	jne	.LBB169_4
# %bb.1:                                # %"$3"
	testb	$8, %cl
	jne	.LBB169_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB169_4
.LBB169_2:                              # %"$6"
	movq	(%rcx), %rcx
.LBB169_4:                              # %"$2"
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%r14, %rax
	orq	$8, %rax
	movq	%r12, (%rax)
	movq	$2, 16(%r14)
	movq	%rcx, 24(%r14)
	movq	%r14, %rbx
	addq	$24, %rbx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r13
	movq	(%rsi), %rdx
	movq	8(%rsi), %rsi
	testb	$6, %dl
	jne	.LBB169_8
# %bb.5:                                # %"$8"
	testb	$8, %dl
	jne	.LBB169_6
# %bb.7:                                # %"$10"
	subq	$32, %rsp
	movq	%rdx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdx
	jmp	.LBB169_8
.LBB169_6:                              # %"$11"
	movq	(%rdx), %rdx
.LBB169_8:                              # %"$7"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rdx, -24(%rbp)                 # 8-byte Spill
	movq	%rdx, (%rax)
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%rcx, (%rdx)
	movq	%rax, 32(%r14)
	movq	%rbx, env(%rip)
	movq	%rbx, (%r14)
	movq	%r14, %r15
	movq	%r13, %rdi
	.p2align	4, 0x90
.LBB169_9:                              # %"$12"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rcx
	testb	$6, %cl
	jne	.LBB169_13
# %bb.10:                               # %"$14"
                                        #   in Loop: Header=BB169_9 Depth=1
	testb	$8, %cl
	jne	.LBB169_11
# %bb.12:                               # %"$16"
                                        #   in Loop: Header=BB169_9 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	movq	env(%rip), %rbx
	jmp	.LBB169_13
.LBB169_11:                             # %"$17"
                                        #   in Loop: Header=BB169_9 Depth=1
	movq	(%rcx), %rcx
	.p2align	4, 0x90
.LBB169_13:                             # %"$13"
                                        #   in Loop: Header=BB169_9 Depth=1
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rcx, (%rax)
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%rbx, (%rdx)
	movq	%rax, env(%rip)
	movq	%rcx, (%rdi)
	testb	$15, %cl
	jne	.LBB169_15
# %bb.14:                               # %"$18"
                                        #   in Loop: Header=BB169_9 Depth=1
	movq	(%rcx), %rcx
.LBB169_15:                             # %"$19"
                                        #   in Loop: Header=BB169_9 Depth=1
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdx
	movq	%rdx, %rax
	orq	$8, %rax
	movq	%r12, (%rax)
	movq	$2, 16(%rdx)
	leaq	24(%rdx), %rbx
	movq	%rcx, 24(%rdx)
	movq	%rdx, 8(%r15)
	movq	env(%rip), %rax
	movq	%rax, 32(%rdx)
	movq	%rbx, env(%rip)
	movq	%rbx, (%rdx)
	movq	8(%rsi), %rsi
	testb	$15, %sil
	jne	.LBB169_17
# %bb.16:                               # %"$20"
                                        #   in Loop: Header=BB169_9 Depth=1
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rax, 8(%rdi)
	movq	%rdx, %r15
	movq	%rax, %rdi
	jmp	.LBB169_9
.LBB169_17:                             # %"$21"
	testb	$15, (%r13)
	jne	.LBB169_32
# %bb.18:                               # %"$24.preheader"
	leaq	SymTab+8(%rip), %rbx
	xorl	%edi, %edi
	movq	%rbx, %rsi
	movq	-24(%rbp), %r15                 # 8-byte Reload
	jmp	.LBB169_19
	.p2align	4, 0x90
.LBB169_29:                             #   in Loop: Header=BB169_19 Depth=1
	movq	%rax, %rdi
.LBB169_19:                             # %"$24"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB169_25 Depth 2
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	evList
	addq	$32, %rsp
	movq	(%r13), %rcx
	movq	(%rcx), %rdx
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	cons
	movq	%rax, %rcx
	movq	%rbx, %rdx
	callq	cons
	addq	$32, %rsp
	testq	%rdi, %rdi
	je	.LBB169_21
# %bb.20:                               # %"$25"
                                        #   in Loop: Header=BB169_19 Depth=1
	movq	%rax, 8(%rdi)
	jmp	.LBB169_22
	.p2align	4, 0x90
.LBB169_21:                             # %"$26"
                                        #   in Loop: Header=BB169_19 Depth=1
	movq	%rax, -16(%rbp)
	movq	%rax, %rsi
.LBB169_22:                             # %"$27"
                                        #   in Loop: Header=BB169_19 Depth=1
	movq	(%r13), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, (%r13)
	testb	$15, %cl
	jne	.LBB169_30
# %bb.23:                               # %"$28"
                                        #   in Loop: Header=BB169_19 Depth=1
	movq	8(%r14), %rdx
	movq	(%rcx), %rcx
	movq	%rcx, 24(%rdx)
	movq	8(%rdx), %rcx
	testb	$15, %cl
	movq	%rax, %rdi
	jne	.LBB169_19
# %bb.24:                               # %"$31.preheader"
                                        #   in Loop: Header=BB169_19 Depth=1
	movq	%r13, %rdx
	jmp	.LBB169_25
	.p2align	4, 0x90
.LBB169_28:                             # %"$33"
                                        #   in Loop: Header=BB169_25 Depth=2
	movq	%rdi, 24(%rcx)
	movq	8(%rcx), %rcx
	testb	$15, %cl
	jne	.LBB169_29
.LBB169_25:                             # %"$31"
                                        #   Parent Loop BB169_19 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rdx), %rdx
	movq	(%rdx), %rdi
	testb	$15, %dil
	jne	.LBB169_28
# %bb.26:                               # %"$34"
                                        #   in Loop: Header=BB169_25 Depth=2
	movq	8(%rdi), %rdi
	movq	%rdi, (%rdx)
	testb	$15, %dil
	jne	.LBB169_28
# %bb.27:                               # %"$36"
                                        #   in Loop: Header=BB169_25 Depth=2
	movq	(%rdi), %rdi
	jmp	.LBB169_28
.LBB169_30:                             # %"$29"
	movq	%r15, 24(%r14)
	movq	8(%r14), %rax
	movq	%rsi, 24(%rax)
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r12
	movq	%rax, -16(%rbp)
	.p2align	4, 0x90
.LBB169_31:                             # %"$38"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rax), %rcx
	movq	8(%rax), %rdx
	movq	8(%rcx), %rcx
	movq	%rcx, (%rax)
	testb	$15, %dl
	movq	%rdx, %rax
	je	.LBB169_31
.LBB169_32:                             # %"$23"
	movq	-8(%rbp), %rax
	movq	%rax, env(%rip)
	movq	%r12, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _as;
	.scl	2;
	.type	32;
	.endef
	.globl	_as                             # -- Begin function _as
	.p2align	4, 0x90
_as:                                    # @_as
.seh_proc _as
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	8(%rcx), %rsi
	movq	(%rsi), %rax
	testb	$6, %al
	jne	.LBB170_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB170_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB170_4
.LBB170_2:                              # %"$6"
	movq	(%rax), %rax
.LBB170_4:                              # %"$2"
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB170_6
# %bb.5:                                # %"$8"
	movq	8(%rsi), %rcx
.LBB170_6:                              # %"$9"
	movq	%rcx, %rax
	addq	$32, %rsp
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _lit;
	.scl	2;
	.type	32;
	.endef
	.globl	_lit                            # -- Begin function _lit
	.p2align	4, 0x90
_lit:                                   # @_lit
.seh_proc _lit
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB171_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB171_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB171_4
.LBB171_2:                              # %"$6"
	movq	(%rax), %rax
.LBB171_4:                              # %"$2"
	leaq	SymTab+280(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB171_9
# %bb.5:                                # %"$2"
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB171_9
# %bb.6:                                # %"$2"
	movl	%eax, %ecx
	andl	$6, %ecx
	testq	%rcx, %rcx
	jne	.LBB171_9
# %bb.7:                                # %"$10"
	testb	$15, %al
	jne	.LBB171_10
# %bb.8:                                # %"$12"
	testb	$6, (%rax)
	je	.LBB171_10
.LBB171_9:                              # %"$15"
	addq	$40, %rsp
	retq
.LBB171_10:                             # %"$14"
	leaq	SymTab+264(%rip), %rcx
	movq	%rax, %rdx
	addq	$40, %rsp
	jmp	cons                            # TAILCALL
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _eval;
	.scl	2;
	.type	32;
	.endef
	.globl	_eval                           # -- Begin function _eval
	.p2align	4, 0x90
_eval:                                  # @_eval
.seh_proc _eval
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %r14
	movq	8(%rcx), %rdi
	movq	(%rdi), %rsi
	testb	$6, %sil
	jne	.LBB172_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB172_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB172_4
.LBB172_2:                              # %"$6"
	movq	(%rsi), %rsi
.LBB172_4:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rsi, (%rbx)
	movq	%rbx, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rbx, env(%rip)
	movq	8(%rdi), %rax
	testb	$15, %al
	je	.LBB172_5
.LBB172_16:                             # %"$8"
	testb	$6, %sil
	jne	.LBB172_20
# %bb.17:                               # %"$25"
	testb	$8, %sil
	jne	.LBB172_18
# %bb.19:                               # %"$27"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB172_20
.LBB172_5:                              # %"$7"
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB172_9
# %bb.6:                                # %"$10"
	testb	$8, %al
	jne	.LBB172_7
# %bb.8:                                # %"$12"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB172_9
.LBB172_18:                             # %"$28"
	movq	(%rsi), %rsi
.LBB172_20:                             # %"$24"
	movq	8(%rbx), %rax
	movq	%rax, env(%rip)
	movq	%rsi, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	retq
.LBB172_7:                              # %"$13"
	movq	(%rax), %rax
.LBB172_9:                              # %"$9"
	testb	$2, %al
	je	.LBB172_21
# %bb.10:                               # %"$15"
	shrq	$4, %rax
	je	.LBB172_16
# %bb.11:                               # %"$18.preheader"
	movq	env+8(%rip), %rcx
	testq	%rcx, %rcx
	je	.LBB172_16
# %bb.12:                               # %"$19.preheader"
	leaq	SymTab+440(%rip), %rdx
	jmp	.LBB172_13
	.p2align	4, 0x90
.LBB172_15:                             # %"$23"
                                        #   in Loop: Header=BB172_13 Depth=1
	movq	16(%rcx), %rcx
	testq	%rcx, %rcx
	je	.LBB172_16
.LBB172_13:                             # %"$19"
                                        # =>This Inner Loop Header: Depth=1
	cmpq	%rdx, 8(%rcx)
	jne	.LBB172_15
# %bb.14:                               # %"$21"
                                        #   in Loop: Header=BB172_13 Depth=1
	movq	(%rcx), %rdi
	movq	%rdi, SymTab+440(%rip)
	decq	%rax
	jne	.LBB172_15
	jmp	.LBB172_16
.LBB172_21:                             # %"$14"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rax, %rdx
	callq	cntErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _run;
	.scl	2;
	.type	32;
	.endef
	.globl	_run                            # -- Begin function _run
	.p2align	4, 0x90
_run:                                   # @_run
.seh_proc _run
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$16, %rsp
	.seh_stackalloc 16
	leaq	16(%rsp), %rbp
	.seh_setframe %rbp, 16
	.seh_endprologue
	movq	%rcx, %rdi
	movq	8(%rcx), %rbx
	movq	(%rbx), %rsi
	testb	$6, %sil
	jne	.LBB173_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB173_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
.LBB173_4:                              # %"$2"
	testb	$6, %sil
	jne	.LBB173_28
.LBB173_5:                              # %"$8"
	testb	$8, %sil
	jne	.LBB173_6
# %bb.7:                                # %"$10"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%rsi, (%r14)
	movq	%r14, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r14, env(%rip)
	movq	8(%rbx), %rax
	testb	$15, %al
	je	.LBB173_8
.LBB173_19:                             # %"$13"
	movq	SymTab+440(%rip), %rdi
	movq	env(%rip), %rax
	movq	%rdi, -16(%rbp)
	movq	%rax, -8(%rbp)
	leaq	-16(%rbp), %rax
	movq	%rax, env(%rip)
	.p2align	4, 0x90
.LBB173_20:                             # %"$13"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rcx
	movq	8(%rsi), %rsi
	testb	$15, %sil
	jne	.LBB173_21
# %bb.24:                               # %"$3.i"
                                        #   in Loop: Header=BB173_20 Depth=1
	testb	$15, %cl
	jne	.LBB173_20
# %bb.25:                               # %"$12.i"
                                        #   in Loop: Header=BB173_20 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	jmp	.LBB173_20
.LBB173_2:                              # %"$6"
	movq	(%rsi), %rsi
	testb	$6, %sil
	jne	.LBB173_28
	jmp	.LBB173_5
.LBB173_6:                              # %"$11"
	movq	(%rsi), %rsi
	jmp	.LBB173_28
.LBB173_21:                             # %"$5.i"
	testb	$6, %cl
	jne	.LBB173_27
# %bb.22:                               # %"$7.i"
	testb	$8, %cl
	jne	.LBB173_23
# %bb.26:                               # %"$9.i"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB173_27
.LBB173_8:                              # %"$12"
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB173_12
# %bb.9:                                # %"$15"
	testb	$8, %al
	jne	.LBB173_10
# %bb.11:                               # %"$17"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB173_12
.LBB173_23:                             # %"$10.i"
	movq	(%rcx), %rcx
.LBB173_27:                             # %runAt.exit
	movq	%rdi, SymTab+440(%rip)
	movq	8(%r14), %rax
	movq	%rax, env(%rip)
	movq	%rcx, %rsi
.LBB173_28:                             # %"$7"
	movq	%rsi, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	retq
.LBB173_10:                             # %"$18"
	movq	(%rax), %rax
.LBB173_12:                             # %"$14"
	testb	$2, %al
	je	.LBB173_29
# %bb.13:                               # %"$20"
	shrq	$4, %rax
	je	.LBB173_19
# %bb.14:                               # %"$23.preheader"
	movq	env+8(%rip), %rcx
	testq	%rcx, %rcx
	je	.LBB173_19
# %bb.15:                               # %"$24.preheader"
	leaq	SymTab+440(%rip), %rdx
	jmp	.LBB173_16
	.p2align	4, 0x90
.LBB173_18:                             # %"$28"
                                        #   in Loop: Header=BB173_16 Depth=1
	movq	16(%rcx), %rcx
	testq	%rcx, %rcx
	je	.LBB173_19
.LBB173_16:                             # %"$24"
                                        # =>This Inner Loop Header: Depth=1
	cmpq	%rdx, 8(%rcx)
	jne	.LBB173_18
# %bb.17:                               # %"$26"
                                        #   in Loop: Header=BB173_16 Depth=1
	movq	(%rcx), %rbx
	movq	%rbx, SymTab+440(%rip)
	decq	%rax
	jne	.LBB173_18
	jmp	.LBB173_19
.LBB173_29:                             # %"$19"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	cntErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _def;
	.scl	2;
	.type	32;
	.endef
	.globl	_def                            # -- Begin function _def
	.p2align	4, 0x90
_def:                                   # @_def
.seh_proc _def
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %r14
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rbx
	testb	$6, %sil
	jne	.LBB174_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB174_3
# %bb.2:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB174_4
.LBB174_3:                              # %"$6"
	movq	(%rsi), %rsi
.LBB174_4:                              # %"$2"
	movl	%esi, %eax
	andl	$14, %eax
	cmpl	$8, %eax
	jne	.LBB174_49
# %bb.5:                                # %"$8"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r12
	movq	%rsi, (%r12)
	movq	%r12, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r12, env(%rip)
	movq	(%rbx), %rdi
	movq	8(%rbx), %rbx
	testb	$6, %dil
	jne	.LBB174_10
# %bb.7:                                # %"$10"
	testb	$8, %dil
	jne	.LBB174_9
# %bb.8:                                # %"$12"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdi
	movq	env(%rip), %rdx
	jmp	.LBB174_11
.LBB174_9:                              # %"$13"
	movq	(%rdi), %rdi
.LBB174_10:                             # %"$9"
	movq	%r12, %rdx
.LBB174_11:                             # %"$9"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rcx
	movq	%rdi, (%rcx)
	movq	%rcx, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	%rcx, env(%rip)
	testb	$15, %bl
	je	.LBB174_17
# %bb.12:                               # %"$15"
	leaq	SymTab+8(%rip), %r15
	cmpq	%r15, %rsi
	jb	.LBB174_14
# %bb.13:                               # %"$15"
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, %rsi
	jbe	.LBB174_50
.LBB174_14:                             # %"$34"
	movq	-8(%rsi), %rax
	testb	$8, %al
	je	.LBB174_25
# %bb.15:                               # %"$35"
	testb	$6, %al
	je	.LBB174_20
# %bb.16:
	leaq	-8(%rsi), %rcx
	addq	%rax, %rax
	jae	.LBB174_23
	jmp	.LBB174_25
.LBB174_17:                             # %"$14"
	movq	(%rbx), %r15
	testb	$6, %r15b
	jne	.LBB174_31
# %bb.18:                               # %"$18"
	testb	$8, %r15b
	jne	.LBB174_30
# %bb.19:                               # %"$20"
	subq	$32, %rsp
	movq	%r15, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r15
	movq	env(%rip), %rcx
	jmp	.LBB174_31
.LBB174_20:                             # %"$2.i17"
	andq	$-9, %rax
	.p2align	4, 0x90
.LBB174_21:                             # %"$4.i19"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rcx
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB174_21
# %bb.22:
	addq	$8, %rcx
	addq	%rax, %rax
	jb	.LBB174_25
.LBB174_23:                             # %"$7.i21"
	leaq	(%rax,%rax), %rdx
	movl	$2, %r8d
	shldq	$62, %rdx, %r8
	addq	%rax, %rax
	movq	%r8, (%rcx)
	jb	.LBB174_25
# %bb.24:                               # %"$9.i22"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rsi, %rdx
	callq	db
	addq	$32, %rsp
.LBB174_25:                             # %"$36"
	movq	(%rsi), %rcx
	cmpq	%r15, %rcx
	je	.LBB174_29
# %bb.26:                               # %"$36"
	cmpq	%rsi, %rcx
	je	.LBB174_29
# %bb.27:                               # %"$39"
	subq	$32, %rsp
	movq	%rdi, %rdx
	callq	equal
	addq	$32, %rsp
	testb	$1, %al
	jne	.LBB174_29
# %bb.28:                               # %"$40"
	subq	$32, %rsp
	movq	%rsi, %rcx
	xorl	%edx, %edx
	callq	redefMsg
	addq	$32, %rsp
.LBB174_29:                             # %"$41"
	movq	%rdi, (%rsi)
	xorl	%edi, %edi
	jmp	.LBB174_36
.LBB174_30:                             # %"$21"
	movq	(%r15), %r15
.LBB174_31:                             # %"$17"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%r15, (%rax)
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%rcx, (%rdx)
	movq	%rax, env(%rip)
	movq	-8(%rsi), %rax
	testb	$8, %al
	jne	.LBB174_37
.LBB174_32:                             # %"$23"
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rdi, %rdx
	callq	get
	addq	$32, %rsp
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB174_35
# %bb.33:                               # %"$28"
	subq	$32, %rsp
	movq	%rax, %rcx
	movq	%r15, %rdx
	callq	equal
	addq	$32, %rsp
	testb	$1, %al
	jne	.LBB174_35
# %bb.34:                               # %"$29"
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rdi, %rdx
	callq	redefMsg
	addq	$32, %rsp
.LBB174_35:                             # %"$30"
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rdi, %rdx
	movq	%r15, %r8
	callq	put
	addq	$32, %rsp
.LBB174_36:                             # %"$16"
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rdi, %rdx
	callq	putSrc
	addq	$32, %rsp
	movq	8(%r12), %rax
	movq	%rax, env(%rip)
	movq	%rsi, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB174_37:                             # %"$22"
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rdi
	jne	.LBB174_42
# %bb.38:                               # %"$24"
	testb	$6, %al
	je	.LBB174_32
# %bb.39:                               # %"$3.i"
	addq	%rax, %rax
	jb	.LBB174_32
# %bb.40:                               # %"$2.i"
	addq	%rax, %rax
	jb	.LBB174_32
# %bb.41:                               # %"$5.i"
	movl	$1, %r8d
	shldq	$62, %rax, %r8
	movq	%r8, -8(%rsi)
	jmp	.LBB174_48
.LBB174_42:                             # %"$25"
	testb	$6, %al
	je	.LBB174_44
# %bb.43:
	leaq	-8(%rsi), %rcx
	addq	%rax, %rax
	jb	.LBB174_32
	jmp	.LBB174_47
.LBB174_44:                             # %"$2.i14"
	andq	$-9, %rax
	.p2align	4, 0x90
.LBB174_45:                             # %"$4.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rcx
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB174_45
# %bb.46:
	addq	$8, %rcx
	addq	%rax, %rax
	jb	.LBB174_32
.LBB174_47:                             # %"$7.i"
	leaq	(%rax,%rax), %rdx
	movl	$2, %r8d
	shldq	$62, %rdx, %r8
	addq	%rax, %rax
	movq	%r8, (%rcx)
	jb	.LBB174_32
.LBB174_48:                             # %"$9.i"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rsi, %rdx
	callq	db
	addq	$32, %rsp
	jmp	.LBB174_32
.LBB174_49:                             # %"$7"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rsi, %rdx
	callq	symErr
.LBB174_50:                             # %"$33"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rsi, %rdx
	callq	protErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _de;
	.scl	2;
	.type	32;
	.endef
	.globl	_de                             # -- Begin function _de
	.p2align	4, 0x90
_de:                                    # @_de
.seh_proc _de
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	testb	$6, %sil
	jne	.LBB175_8
# %bb.1:                                # %"$3.i"
	movq	8(%rax), %rdi
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rsi
	jb	.LBB175_3
# %bb.2:                                # %"$3.i"
	leaq	SymTab+280(%rip), %rdx
	cmpq	%rdx, %rsi
	jbe	.LBB175_9
.LBB175_3:                              # %"$7.i"
	movq	(%rsi), %rcx
	cmpq	%rax, %rcx
	je	.LBB175_7
# %bb.4:                                # %"$7.i"
	cmpq	%rsi, %rcx
	je	.LBB175_7
# %bb.5:                                # %"$10.i"
	movq	%rdi, %rdx
	callq	equal
	testb	$1, %al
	jne	.LBB175_7
# %bb.6:                                # %"$11.i"
	movq	%rsi, %rcx
	xorl	%edx, %edx
	callq	redefMsg
.LBB175_7:                              # %redefine.exit
	movq	%rdi, (%rsi)
	movq	%rsi, %rcx
	xorl	%edx, %edx
	callq	putSrc
	movq	%rsi, %rax
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
.LBB175_8:                              # %"$2.i"
	movq	%rsi, %rdx
	callq	varErr
.LBB175_9:                              # %"$6.i"
	movq	%rsi, %rdx
	callq	protErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _dm;
	.scl	2;
	.type	32;
	.endef
	.globl	_dm                             # -- Begin function _dm
	.p2align	4, 0x90
_dm:                                    # @_dm
.seh_proc _dm
# %bb.0:                                # %"$1"
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rcx, %r15
	movq	8(%rcx), %rbx
	movq	(%rbx), %rax
	movq	8(%rbx), %r14
	testb	$15, %al
	je	.LBB176_2
# %bb.1:                                # %"$7"
	movq	SymTab+584(%rip), %r12
	movq	%rax, %rsi
	jmp	.LBB176_6
.LBB176_2:                              # %"$6"
	movq	(%rax), %rsi
	movq	8(%rax), %r12
	testb	$15, %r12b
	jne	.LBB176_6
# %bb.3:                                # %"$8"
	movq	(%r12), %rdx
	movq	8(%r12), %rcx
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rcx
	jne	.LBB176_5
# %bb.4:                                # %"$8"
	movq	SymTab+584(%rip), %rcx
.LBB176_5:                              # %"$8"
	callq	get
	movq	%rax, %r12
.LBB176_6:                              # %"$5"
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, %rsi
	je	.LBB176_15
# %bb.7:                                # %"$13"
	testb	$6, %sil
	jne	.LBB176_34
# %bb.8:                                # %"$3.i"
	movq	SymTab+248(%rip), %rdi
	leaq	SymTab+8(%rip), %rdx
	cmpq	%rdx, %rsi
	jb	.LBB176_10
# %bb.9:                                # %"$3.i"
	cmpq	%rax, %rsi
	jbe	.LBB176_35
.LBB176_10:                             # %"$7.i"
	movq	(%rsi), %rcx
	cmpq	%rdx, %rcx
	je	.LBB176_14
# %bb.11:                               # %"$7.i"
	cmpq	%rsi, %rcx
	je	.LBB176_14
# %bb.12:                               # %"$10.i"
	movq	%rdi, %rdx
	callq	equal
	testb	$1, %al
	jne	.LBB176_14
# %bb.13:                               # %"$11.i"
	movq	%rsi, %rcx
	xorl	%edx, %edx
	callq	redefMsg
.LBB176_14:                             # %redefine.exit
	movq	%rdi, (%rsi)
	movq	%rsi, %rcx
	xorl	%edx, %edx
	callq	putSrc
.LBB176_15:                             # %"$14"
	movl	%r14d, %eax
	andl	$14, %eax
	cmpl	$8, %eax
	jne	.LBB176_23
# %bb.16:                               # %"$15"
	movq	(%r14), %rax
	testb	$15, %al
	jne	.LBB176_18
	.p2align	4, 0x90
.LBB176_20:                             # %"$19"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rax), %rbx
	testb	$15, %bl
	jne	.LBB176_18
# %bb.21:                               # %"$21"
                                        #   in Loop: Header=BB176_20 Depth=1
	cmpq	(%rbx), %rsi
	je	.LBB176_22
# %bb.19:                               # %"$17"
                                        #   in Loop: Header=BB176_20 Depth=1
	movq	8(%rax), %rax
	testb	$15, %al
	je	.LBB176_20
.LBB176_18:                             # %"$20"
	leaq	.L$70(%rip), %r8
	movq	%r15, %rcx
	movq	%rsi, %rdx
	xorl	%r9d, %r9d
	callq	err
.LBB176_22:                             # %"$24"
	movq	8(%rbx), %r14
.LBB176_23:                             # %"$16"
	movq	(%r12), %r15
	testb	$15, %r15b
	je	.LBB176_24
.LBB176_26:                             # %"$30"
	testb	$15, (%rbx)
	jne	.LBB176_28
# %bb.27:                               # %"$32"
	movq	%rsi, %rcx
	movq	%r14, %rdx
	callq	cons
	movq	%rax, %rbx
.LBB176_28:                             # %"$33"
	movq	%rbx, %rcx
	movq	%r15, %rdx
	callq	cons
	movq	%rax, (%r12)
.LBB176_33:                             # %"$29"
	movq	%r12, %rcx
	movq	%rsi, %rdx
	callq	putSrc
	movq	%rsi, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	retq
.LBB176_24:                             # %"$27.preheader"
	movq	%r15, %rax
	.p2align	4, 0x90
.LBB176_25:                             # %"$27"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, (%rax)
	jne	.LBB176_26
# %bb.29:                               # %"$28"
                                        #   in Loop: Header=BB176_25 Depth=1
	movq	(%rax), %rdi
	cmpq	(%rdi), %rsi
	je	.LBB176_30
# %bb.36:                               # %"$34"
                                        #   in Loop: Header=BB176_25 Depth=1
	movq	8(%rax), %rax
	testb	$15, %al
	je	.LBB176_25
	jmp	.LBB176_26
.LBB176_30:                             # %"$35"
	movq	8(%rdi), %rdx
	movq	%r14, %rcx
	callq	equal
	testb	$1, %al
	jne	.LBB176_32
# %bb.31:                               # %"$36"
	movq	%rsi, %rcx
	movq	%r12, %rdx
	callq	redefMsg
.LBB176_32:                             # %"$37"
	movq	%r14, 8(%rdi)
	jmp	.LBB176_33
.LBB176_34:                             # %"$2.i"
	movq	%r15, %rcx
	movq	%rsi, %rdx
	callq	varErr
.LBB176_35:                             # %"$6.i"
	movq	%r15, %rcx
	movq	%rsi, %rdx
	callq	protErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _box;
	.scl	2;
	.type	32;
	.endef
	.globl	_box                            # -- Begin function _box
	.p2align	4, 0x90
_box:                                   # @_box
.seh_proc _box
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rdx
	testb	$6, %dl
	jne	.LBB177_4
# %bb.1:                                # %"$3"
	testb	$8, %dl
	jne	.LBB177_2
# %bb.3:                                # %"$5"
	movq	%rdx, %rcx
	callq	evList
	movq	%rax, %rdx
	jmp	.LBB177_4
.LBB177_2:                              # %"$6"
	movq	(%rdx), %rdx
.LBB177_4:                              # %"$2"
	movl	$2, %ecx
	addq	$40, %rsp
	jmp	consSym                         # TAILCALL
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _new;
	.scl	2;
	.type	32;
	.endef
	.globl	_new                            # -- Begin function _new
	.p2align	4, 0x90
_new:                                   # @_new
.seh_proc _new
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rdi
	movq	8(%rax), %rbx
	testb	$6, %dil
	jne	.LBB178_4
# %bb.1:                                # %"$3"
	testb	$8, %dil
	jne	.LBB178_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdi
.LBB178_4:                              # %"$2"
	testb	$15, %dil
	je	.LBB178_5
.LBB178_7:                              # %"$8"
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rdi
	jne	.LBB178_9
# %bb.8:                                # %"$11"
	subq	$32, %rsp
	movl	$2, %ecx
	movl	$2, %edx
	jmp	.LBB178_6
.LBB178_9:                              # %"$10"
	movq	%rdi, %rax
	shrq	$4, %rax
	testb	$2, %dil
	movl	$1, %edx
	cmovnel	%eax, %edx
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	newId
	addq	$32, %rsp
	movq	%rax, %r14
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	extern
	addq	$32, %rsp
	movq	%rax, %r15
	addq	%r14, %r14
	movl	$1, %eax
	shldq	$63, %r14, %rax
	orq	$8, %rax
	movq	%rax, -8(%r15)
	jmp	.LBB178_10
.LBB178_2:                              # %"$6"
	movq	(%rdi), %rdi
	testb	$15, %dil
	jne	.LBB178_7
.LBB178_5:                              # %"$9"
	subq	$32, %rsp
	movl	$2, %ecx
	movq	%rdi, %rdx
.LBB178_6:                              # %"$7"
	callq	consSym
	addq	$32, %rsp
	movq	%rax, %r15
.LBB178_10:                             # %"$7"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%r14, %rax
	orq	$8, %rax
	testb	$15, %dil
	movq	%r15, (%r14)
	movq	%rcx, (%rax)
	movq	%r14, env(%rip)
	je	.LBB178_16
# %bb.11:                               # %"$15"
	movq	(%rbx), %rax
	movq	8(%rbx), %rbx
	testb	$6, %al
	jne	.LBB178_15
# %bb.12:                               # %"$18"
	testb	$8, %al
	jne	.LBB178_13
# %bb.14:                               # %"$20"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB178_15
.LBB178_13:                             # %"$21"
	movq	(%rax), %rax
.LBB178_15:                             # %"$17"
	movq	%rax, (%r15)
.LBB178_16:                             # %"$16"
	movq	$0, ($Ret)(%rip)
	subq	$32, %rsp
	leaq	SymTab+280(%rip), %rdx
	movq	%r15, %rcx
	callq	method
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB178_18
# %bb.17:                               # %"$24"
	movq	($Ret)(%rip), %rdx
	subq	$48, %rsp
	movq	%rbx, 32(%rsp)
	leaq	SymTab+280(%rip), %r8
	movq	%r15, %rcx
	movq	%rax, %r9
	callq	evMethod
	addq	$48, %rsp
	jmp	.LBB178_29
.LBB178_18:                             # %"$23"
	testb	$15, %bl
	je	.LBB178_19
.LBB178_29:                             # %"$22"
	movq	8(%r14), %rax
	movq	%rax, env(%rip)
	movq	%r15, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB178_19:                             # %"$26"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	env(%rip), %rax
	movq	%rax, 8(%rsi)
	movq	%rsi, env(%rip)
	jmp	.LBB178_20
.LBB178_27:                             # %"$36"
                                        #   in Loop: Header=BB178_20 Depth=1
	subq	$32, %rsp
	movq	%r8, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r8
	.p2align	4, 0x90
.LBB178_28:                             # %"$33"
                                        #   in Loop: Header=BB178_20 Depth=1
	subq	$32, %rsp
	movq	%r15, %rcx
	movq	%rdi, %rdx
	callq	put
	addq	$32, %rsp
	testb	$15, %bl
	jne	.LBB178_29
.LBB178_20:                             # %"$27"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rbx), %rdi
	movq	8(%rbx), %rbx
	testb	$6, %dil
	jne	.LBB178_24
# %bb.21:                               # %"$29"
                                        #   in Loop: Header=BB178_20 Depth=1
	testb	$8, %dil
	jne	.LBB178_22
# %bb.23:                               # %"$31"
                                        #   in Loop: Header=BB178_20 Depth=1
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdi
	jmp	.LBB178_24
.LBB178_22:                             # %"$32"
                                        #   in Loop: Header=BB178_20 Depth=1
	movq	(%rdi), %rdi
	.p2align	4, 0x90
.LBB178_24:                             # %"$28"
                                        #   in Loop: Header=BB178_20 Depth=1
	movq	%rdi, (%rsi)
	movq	(%rbx), %r8
	movq	8(%rbx), %rbx
	testb	$6, %r8b
	jne	.LBB178_28
# %bb.25:                               # %"$34"
                                        #   in Loop: Header=BB178_20 Depth=1
	testb	$8, %r8b
	je	.LBB178_27
# %bb.26:                               # %"$37"
                                        #   in Loop: Header=BB178_20 Depth=1
	movq	(%r8), %r8
	jmp	.LBB178_28
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _type;
	.scl	2;
	.type	32;
	.endef
	.globl	_type                           # -- Begin function _type
	.p2align	4, 0x90
_type:                                  # @_type
.seh_proc _type
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rcx, %rdi
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	testb	$6, %sil
	jne	.LBB179_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB179_2
# %bb.3:                                # %"$5"
	movq	%rsi, %rcx
	callq	evList
	movq	%rax, %rsi
	jmp	.LBB179_4
.LBB179_2:                              # %"$6"
	movq	(%rsi), %rsi
.LBB179_4:                              # %"$2"
	movl	%esi, %eax
	andl	$14, %eax
	cmpl	$8, %eax
	jne	.LBB179_20
# %bb.5:                                # %"$8"
	movq	-8(%rsi), %rax
	testb	$8, %al
	je	.LBB179_10
# %bb.6:                                # %"$8"
	movl	%eax, %ecx
	andl	$6, %ecx
	testq	%rcx, %rcx
	je	.LBB179_10
# %bb.7:                                # %"$3.i"
	addq	%rax, %rax
	jb	.LBB179_10
# %bb.8:                                # %"$2.i"
	addq	%rax, %rax
	jb	.LBB179_10
# %bb.9:                                # %"$5.i"
	movl	$1, %r8d
	shldq	$62, %rax, %r8
	movq	%r8, -8(%rsi)
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	db
.LBB179_10:                             # %"$11"
	movq	(%rsi), %rcx
	movq	%rcx, %rax
	.p2align	4, 0x90
.LBB179_11:                             # %"$12"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %al
	jne	.LBB179_20
# %bb.12:                               # %"$13"
                                        #   in Loop: Header=BB179_11 Depth=1
	movq	(%rax), %rdx
	testb	$15, %dl
	jne	.LBB179_13
# %bb.19:                               # %"$16"
                                        #   in Loop: Header=BB179_11 Depth=1
	movq	8(%rax), %rax
	cmpq	%rax, %rcx
	jne	.LBB179_11
	jmp	.LBB179_20
.LBB179_13:                             # %"$18.preheader"
	andl	$14, %edx
	cmpl	$8, %edx
	jne	.LBB179_20
# %bb.14:                               # %"$19.preheader"
	movq	%rax, %rdx
	.p2align	4, 0x90
.LBB179_15:                             # %"$19"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rdx), %rdx
	testb	$15, %dl
	jne	.LBB179_16
# %bb.17:                               # %"$22"
                                        #   in Loop: Header=BB179_15 Depth=1
	cmpq	%rdx, %rcx
	je	.LBB179_20
# %bb.18:                               # %"$22.$18_crit_edge"
                                        #   in Loop: Header=BB179_15 Depth=1
	movl	(%rdx), %edi
	andl	$14, %edi
	cmpl	$8, %edi
	je	.LBB179_15
.LBB179_20:                             # %"$9"
	leaq	SymTab+8(%rip), %rax
.LBB179_21:                             # %"$9"
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
.LBB179_16:                             # %"$23"
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rdx
	cmovneq	%rcx, %rax
	jmp	.LBB179_21
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _isa;
	.scl	2;
	.type	32;
	.endef
	.globl	_isa                            # -- Begin function _isa
	.p2align	4, 0x90
_isa:                                   # @_isa
.seh_proc _isa
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %r14
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rbx
	testb	$6, %sil
	jne	.LBB180_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB180_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB180_4
.LBB180_2:                              # %"$6"
	movq	(%rsi), %rsi
.LBB180_4:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rsi, (%rdi)
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rdi, env(%rip)
	movq	(%rbx), %rbx
	testb	$6, %bl
	jne	.LBB180_8
# %bb.5:                                # %"$8"
	testb	$8, %bl
	jne	.LBB180_6
# %bb.7:                                # %"$10"
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rbx
	jmp	.LBB180_8
.LBB180_6:                              # %"$11"
	movq	(%rbx), %rbx
.LBB180_8:                              # %"$7"
	movl	%ebx, %eax
	andl	$14, %eax
	leaq	SymTab+8(%rip), %r15
	cmpl	$8, %eax
	jne	.LBB180_19
# %bb.9:                                # %"$13"
	movq	-8(%rbx), %rax
	testb	$8, %al
	je	.LBB180_14
# %bb.10:                               # %"$13"
	movl	%eax, %ecx
	andl	$6, %ecx
	testq	%rcx, %rcx
	je	.LBB180_14
# %bb.11:                               # %"$3.i"
	addq	%rax, %rax
	jb	.LBB180_14
# %bb.12:                               # %"$2.i"
	addq	%rax, %rax
	jb	.LBB180_14
# %bb.13:                               # %"$5.i"
	movl	$1, %r8d
	shldq	$62, %rax, %r8
	movq	%r8, -8(%rbx)
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rbx, %rdx
	callq	db
	addq	$32, %rsp
.LBB180_14:                             # %"$16"
	testb	$15, %sil
	je	.LBB180_15
# %bb.18:                               # %"$18"
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rbx, %rdx
	callq	isa
	addq	$32, %rsp
	leaq	SymTab+8(%rip), %r15
	testb	$1, %al
	cmovneq	%rbx, %r15
	jmp	.LBB180_19
	.p2align	4, 0x90
.LBB180_16:                             # %"$21"
                                        #   in Loop: Header=BB180_15 Depth=1
	movq	8(%rsi), %rsi
	testb	$15, %sil
	jne	.LBB180_17
.LBB180_15:                             # %"$20"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rcx
	subq	$32, %rsp
	movq	%rbx, %rdx
	callq	isa
	addq	$32, %rsp
	testb	$1, %al
	jne	.LBB180_16
	jmp	.LBB180_19
.LBB180_17:
	movq	%rbx, %r15
.LBB180_19:                             # %"$14"
	movq	8(%rdi), %rax
	movq	%rax, env(%rip)
	movq	%r15, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _method;
	.scl	2;
	.type	32;
	.endef
	.globl	_method                         # -- Begin function _method
	.p2align	4, 0x90
_method:                                # @_method
.seh_proc _method
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %r14
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rbx
	testb	$6, %sil
	jne	.LBB181_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB181_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB181_4
.LBB181_2:                              # %"$6"
	movq	(%rsi), %rsi
.LBB181_4:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rsi, (%rdi)
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rdi, env(%rip)
	movq	(%rbx), %rbx
	testb	$6, %bl
	jne	.LBB181_8
# %bb.5:                                # %"$8"
	testb	$8, %bl
	jne	.LBB181_6
# %bb.7:                                # %"$10"
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rbx
	jmp	.LBB181_8
.LBB181_6:                              # %"$11"
	movq	(%rbx), %rbx
.LBB181_8:                              # %"$7"
	movl	%ebx, %eax
	andl	$14, %eax
	cmpl	$8, %eax
	jne	.LBB181_15
# %bb.9:                                # %"$13"
	movq	-8(%rbx), %rax
	testb	$8, %al
	je	.LBB181_14
# %bb.10:                               # %"$13"
	movl	%eax, %ecx
	andl	$6, %ecx
	testq	%rcx, %rcx
	je	.LBB181_14
# %bb.11:                               # %"$3.i"
	addq	%rax, %rax
	jb	.LBB181_14
# %bb.12:                               # %"$2.i"
	addq	%rax, %rax
	jb	.LBB181_14
# %bb.13:                               # %"$5.i"
	movl	$1, %r8d
	shldq	$62, %rax, %r8
	movq	%r8, -8(%rbx)
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rbx, %rdx
	callq	db
	addq	$32, %rsp
.LBB181_14:                             # %"$15"
	subq	$32, %rsp
	movq	%rbx, %rcx
	movq	%rsi, %rdx
	callq	method
	addq	$32, %rsp
	testq	%rax, %rax
	leaq	SymTab+8(%rip), %rcx
	cmoveq	%rcx, %rax
	movq	8(%rdi), %rcx
	movq	%rcx, env(%rip)
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	retq
.LBB181_15:                             # %"$12"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rbx, %rdx
	callq	symErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _send;
	.scl	2;
	.type	32;
	.endef
	.globl	_send                           # -- Begin function _send
	.p2align	4, 0x90
_send:                                  # @_send
.seh_proc _send
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %r14
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %r15
	testb	$6, %sil
	jne	.LBB182_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB182_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB182_4
.LBB182_2:                              # %"$6"
	movq	(%rsi), %rsi
.LBB182_4:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rsi, (%rdi)
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rdi, env(%rip)
	movq	(%r15), %rbx
	testb	$6, %bl
	jne	.LBB182_8
# %bb.5:                                # %"$8"
	testb	$8, %bl
	jne	.LBB182_6
# %bb.7:                                # %"$10"
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rbx
	jmp	.LBB182_8
.LBB182_6:                              # %"$11"
	movq	(%rbx), %rbx
.LBB182_8:                              # %"$7"
	movl	%ebx, %eax
	andl	$14, %eax
	cmpl	$8, %eax
	jne	.LBB182_16
# %bb.9:                                # %"$13"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rbx, (%rax)
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%rcx, (%rdx)
	movq	%rax, env(%rip)
	movq	-8(%rbx), %rax
	testb	$8, %al
	je	.LBB182_14
# %bb.10:                               # %"$13"
	movl	%eax, %ecx
	andl	$6, %ecx
	testq	%rcx, %rcx
	je	.LBB182_14
# %bb.11:                               # %"$3.i"
	addq	%rax, %rax
	jb	.LBB182_14
# %bb.12:                               # %"$2.i"
	addq	%rax, %rax
	jb	.LBB182_14
# %bb.13:                               # %"$5.i"
	movl	$1, %r8d
	shldq	$62, %rax, %r8
	movq	%r8, -8(%rbx)
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rbx, %rdx
	callq	db
	addq	$32, %rsp
.LBB182_14:                             # %"$15"
	movq	$0, ($Ret)(%rip)
	subq	$32, %rsp
	movq	%rbx, %rcx
	movq	%rsi, %rdx
	callq	method
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB182_15
# %bb.17:                               # %"$16"
	movq	($Ret)(%rip), %rdx
	movq	8(%r15), %rcx
	subq	$48, %rsp
	movq	%rcx, 32(%rsp)
	movq	%rbx, %rcx
	movq	%rsi, %r8
	movq	%rax, %r9
	callq	evMethod
	addq	$48, %rsp
	movq	8(%rdi), %rcx
	movq	%rcx, env(%rip)
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB182_16:                             # %"$12"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rbx, %rdx
	callq	symErr
.LBB182_15:                             # %"$17"
	subq	$32, %rsp
	leaq	.L$70(%rip), %r8
	movq	%r14, %rcx
	movq	%rsi, %rdx
	xorl	%r9d, %r9d
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _try;
	.scl	2;
	.type	32;
	.endef
	.globl	_try                            # -- Begin function _try
	.p2align	4, 0x90
_try:                                   # @_try
.seh_proc _try
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %r14
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %r15
	testb	$6, %sil
	jne	.LBB183_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB183_3
# %bb.2:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB183_4
.LBB183_3:                              # %"$6"
	movq	(%rsi), %rsi
.LBB183_4:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rsi, (%rdi)
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rdi, env(%rip)
	movq	(%r15), %rbx
	testb	$6, %bl
	jne	.LBB183_9
# %bb.6:                                # %"$8"
	testb	$8, %bl
	jne	.LBB183_8
# %bb.7:                                # %"$10"
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rbx
	movq	env(%rip), %rcx
	jmp	.LBB183_10
.LBB183_8:                              # %"$11"
	movq	(%rbx), %rbx
.LBB183_9:                              # %"$7"
	movq	%rdi, %rcx
.LBB183_10:                             # %"$7"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rbx, (%rax)
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%rcx, (%rdx)
	movq	%rax, env(%rip)
	movl	%ebx, %eax
	andl	$14, %eax
	leaq	SymTab+8(%rip), %r12
	cmpl	$8, %eax
	jne	.LBB183_19
# %bb.11:                               # %"$13"
	testb	$8, -8(%rbx)
	jne	.LBB183_14
.LBB183_12:                             # %"$16"
	movq	$0, ($Ret)(%rip)
	subq	$32, %rsp
	movq	%rbx, %rcx
	movq	%rsi, %rdx
	callq	method
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB183_19
# %bb.13:                               # %"$19"
	movq	($Ret)(%rip), %rdx
	movq	8(%r15), %rcx
	subq	$48, %rsp
	movq	%rcx, 32(%rsp)
	movq	%rbx, %rcx
	movq	%rsi, %r8
	movq	%rax, %r9
	callq	evMethod
	addq	$48, %rsp
	movq	%rax, %r12
	jmp	.LBB183_19
.LBB183_14:                             # %"$15"
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	isLife
	addq	$32, %rsp
	testb	$1, %al
	je	.LBB183_19
# %bb.15:                               # %"$18"
	movq	-8(%rbx), %rax
	testb	$6, %al
	je	.LBB183_12
# %bb.16:                               # %"$3.i"
	addq	%rax, %rax
	jb	.LBB183_12
# %bb.17:                               # %"$2.i"
	addq	%rax, %rax
	jb	.LBB183_12
# %bb.18:                               # %"$5.i"
	movl	$1, %r8d
	shldq	$62, %rax, %r8
	movq	%r8, -8(%rbx)
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rbx, %rdx
	callq	db
	addq	$32, %rsp
	jmp	.LBB183_12
.LBB183_19:                             # %"$14"
	movq	8(%rdi), %rax
	movq	%rax, env(%rip)
	movq	%r12, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _super;
	.scl	2;
	.type	32;
	.endef
	.globl	_super                          # -- Begin function _super
	.p2align	4, 0x90
_super:                                 # @_super
.seh_proc _super
# %bb.0:                                # %"$1"
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rcx, %r14
	movq	env+96(%rip), %rax
	testq	%rax, %rax
	leaq	SymTab+488(%rip), %rcx
	cmovneq	%rax, %rcx
	movq	(%rcx), %rax
	movq	env+104(%rip), %rdi
	.p2align	4, 0x90
.LBB184_1:                              # %"$5"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rax), %rbx
	leaq	8(%rbx), %rax
	testb	$15, (%rbx)
	je	.LBB184_1
	jmp	.LBB184_2
	.p2align	4, 0x90
.LBB184_4:                              # %"$11"
                                        #   in Loop: Header=BB184_2 Depth=1
	movq	8(%rbx), %rbx
.LBB184_2:                              # %"$8.preheader"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %bl
	jne	.LBB184_5
# %bb.3:                                # %"$10"
                                        #   in Loop: Header=BB184_2 Depth=1
	movq	%rbx, ($Ret)(%rip)
	movq	(%rbx), %rcx
	movq	%rdi, %rdx
	callq	method
	testq	%rax, %rax
	je	.LBB184_4
# %bb.6:                                # %"$13"
	movq	env+96(%rip), %rbx
	movq	env+104(%rip), %rsi
	movq	($Ret)(%rip), %rcx
	movq	%rcx, env+96(%rip)
	movq	%rdi, env+104(%rip)
	movq	%rax, %rcx
	movq	%r14, %rdx
	callq	evExpr
	movq	%rsi, env+104(%rip)
	movq	%rbx, env+96(%rip)
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq
.LBB184_5:                              # %"$9"
	leaq	.L$71(%rip), %r8
	movq	%r14, %rcx
	movq	%rdi, %rdx
	xorl	%r9d, %r9d
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _extra;
	.scl	2;
	.type	32;
	.endef
	.globl	_extra                          # -- Begin function _extra
	.p2align	4, 0x90
_extra:                                 # @_extra
.seh_proc _extra
# %bb.0:                                # %"$1"
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rcx, %r14
	movq	env+104(%rip), %rdi
	movq	SymTab+488(%rip), %rcx
	movq	%rdi, %rdx
	callq	extra
	testq	%rax, %rax
	jle	.LBB185_2
# %bb.1:                                # %"$3"
	movq	env+96(%rip), %rbx
	movq	env+104(%rip), %rsi
	movq	($Ret)(%rip), %rcx
	movq	%rcx, env+96(%rip)
	movq	%rdi, env+104(%rip)
	movq	%rax, %rcx
	movq	%r14, %rdx
	callq	evExpr
	movq	%rsi, env+104(%rip)
	movq	%rbx, env+96(%rip)
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq
.LBB185_2:                              # %"$2"
	leaq	.L$72(%rip), %r8
	movq	%r14, %rcx
	movq	%rdi, %rdx
	xorl	%r9d, %r9d
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _and;
	.scl	2;
	.type	32;
	.endef
	.globl	_and                            # -- Begin function _and
	.p2align	4, 0x90
_and:                                   # @_and
.seh_proc _and
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rsi
	leaq	SymTab+8(%rip), %rdi
	.p2align	4, 0x90
.LBB186_1:                              # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rax
	testb	$6, %al
	jne	.LBB186_5
# %bb.2:                                # %"$4"
                                        #   in Loop: Header=BB186_1 Depth=1
	testb	$8, %al
	jne	.LBB186_3
# %bb.4:                                # %"$6"
                                        #   in Loop: Header=BB186_1 Depth=1
	movq	%rax, %rcx
	callq	evList
	.p2align	4, 0x90
.LBB186_5:                              # %"$3"
                                        #   in Loop: Header=BB186_1 Depth=1
	cmpq	%rdi, %rax
	je	.LBB186_7
.LBB186_6:                              # %"$8"
                                        #   in Loop: Header=BB186_1 Depth=1
	movq	%rax, SymTab+440(%rip)
	movq	8(%rsi), %rsi
	testb	$15, %sil
	je	.LBB186_1
	jmp	.LBB186_7
.LBB186_3:                              # %"$7"
                                        #   in Loop: Header=BB186_1 Depth=1
	movq	(%rax), %rax
	cmpq	%rdi, %rax
	jne	.LBB186_6
.LBB186_7:                              # %"$9"
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _or;
	.scl	2;
	.type	32;
	.endef
	.globl	_or                             # -- Begin function _or
	.p2align	4, 0x90
_or:                                    # @_or
.seh_proc _or
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rsi
	leaq	SymTab+8(%rip), %rdi
	.p2align	4, 0x90
.LBB187_1:                              # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rax
	testb	$6, %al
	jne	.LBB187_5
# %bb.2:                                # %"$4"
                                        #   in Loop: Header=BB187_1 Depth=1
	testb	$8, %al
	jne	.LBB187_3
# %bb.4:                                # %"$6"
                                        #   in Loop: Header=BB187_1 Depth=1
	movq	%rax, %rcx
	callq	evList
	.p2align	4, 0x90
.LBB187_5:                              # %"$3"
                                        #   in Loop: Header=BB187_1 Depth=1
	cmpq	%rdi, %rax
	jne	.LBB187_6
.LBB187_7:                              # %"$8"
                                        #   in Loop: Header=BB187_1 Depth=1
	movq	8(%rsi), %rsi
	testb	$15, %sil
	je	.LBB187_1
	jmp	.LBB187_8
.LBB187_3:                              # %"$7"
                                        #   in Loop: Header=BB187_1 Depth=1
	movq	(%rax), %rax
	cmpq	%rdi, %rax
	je	.LBB187_7
.LBB187_6:                              # %"$10"
	movq	%rax, SymTab+440(%rip)
.LBB187_8:                              # %"$9"
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _nand;
	.scl	2;
	.type	32;
	.endef
	.globl	_nand                           # -- Begin function _nand
	.p2align	4, 0x90
_nand:                                  # @_nand
.seh_proc _nand
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	8(%rcx), %rdi
	leaq	SymTab+280(%rip), %rsi
	leaq	SymTab+8(%rip), %rbx
	.p2align	4, 0x90
.LBB188_1:                              # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rax
	testb	$6, %al
	jne	.LBB188_5
# %bb.2:                                # %"$4"
                                        #   in Loop: Header=BB188_1 Depth=1
	testb	$8, %al
	jne	.LBB188_3
# %bb.4:                                # %"$6"
                                        #   in Loop: Header=BB188_1 Depth=1
	movq	%rax, %rcx
	callq	evList
	.p2align	4, 0x90
.LBB188_5:                              # %"$3"
                                        #   in Loop: Header=BB188_1 Depth=1
	cmpq	%rbx, %rax
	je	.LBB188_8
.LBB188_6:                              # %"$8"
                                        #   in Loop: Header=BB188_1 Depth=1
	movq	%rax, SymTab+440(%rip)
	movq	8(%rdi), %rdi
	testb	$15, %dil
	je	.LBB188_1
	jmp	.LBB188_7
.LBB188_3:                              # %"$7"
                                        #   in Loop: Header=BB188_1 Depth=1
	movq	(%rax), %rax
	cmpq	%rbx, %rax
	jne	.LBB188_6
	jmp	.LBB188_8
.LBB188_7:
	movq	%rbx, %rsi
.LBB188_8:                              # %"$9"
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _nor;
	.scl	2;
	.type	32;
	.endef
	.globl	_nor                            # -- Begin function _nor
	.p2align	4, 0x90
_nor:                                   # @_nor
.seh_proc _nor
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	8(%rcx), %rdi
	leaq	SymTab+8(%rip), %rsi
	leaq	SymTab+280(%rip), %rbx
	.p2align	4, 0x90
.LBB189_1:                              # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rax
	testb	$6, %al
	jne	.LBB189_5
# %bb.2:                                # %"$4"
                                        #   in Loop: Header=BB189_1 Depth=1
	testb	$8, %al
	jne	.LBB189_3
# %bb.4:                                # %"$6"
                                        #   in Loop: Header=BB189_1 Depth=1
	movq	%rax, %rcx
	callq	evList
	.p2align	4, 0x90
.LBB189_5:                              # %"$3"
                                        #   in Loop: Header=BB189_1 Depth=1
	cmpq	%rsi, %rax
	jne	.LBB189_6
.LBB189_7:                              # %"$8"
                                        #   in Loop: Header=BB189_1 Depth=1
	movq	8(%rdi), %rdi
	testb	$15, %dil
	je	.LBB189_1
	jmp	.LBB189_8
.LBB189_3:                              # %"$7"
                                        #   in Loop: Header=BB189_1 Depth=1
	movq	(%rax), %rax
	cmpq	%rsi, %rax
	je	.LBB189_7
.LBB189_6:                              # %"$10"
	movq	%rax, SymTab+440(%rip)
	jmp	.LBB189_9
.LBB189_8:
	movq	%rbx, %rsi
.LBB189_9:                              # %"$9"
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _xor;
	.scl	2;
	.type	32;
	.endef
	.globl	_xor                            # -- Begin function _xor
	.p2align	4, 0x90
_xor:                                   # @_xor
.seh_proc _xor
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rcx
	movq	(%rcx), %rax
	movq	8(%rcx), %rdi
	testb	$6, %al
	jne	.LBB190_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB190_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB190_4
.LBB190_2:                              # %"$6"
	movq	(%rax), %rax
.LBB190_4:                              # %"$2"
	leaq	SymTab+8(%rip), %rsi
	cmpq	%rsi, %rax
	movq	(%rdi), %rax
	jne	.LBB190_11
# %bb.5:                                # %"$7"
	testb	$6, %al
	jne	.LBB190_9
# %bb.6:                                # %"$11"
	testb	$8, %al
	jne	.LBB190_7
# %bb.8:                                # %"$13"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB190_9
.LBB190_11:                             # %"$8"
	testb	$6, %al
	jne	.LBB190_15
# %bb.12:                               # %"$19"
	testb	$8, %al
	jne	.LBB190_13
# %bb.14:                               # %"$21"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB190_15
.LBB190_7:                              # %"$14"
	movq	(%rax), %rax
.LBB190_9:                              # %"$10"
	cmpq	%rsi, %rax
	leaq	SymTab+280(%rip), %rax
	cmoveq	%rsi, %rax
	jmp	.LBB190_10
.LBB190_13:                             # %"$22"
	movq	(%rax), %rax
.LBB190_15:                             # %"$18"
	cmpq	%rsi, %rax
	leaq	SymTab+280(%rip), %rax
	cmovneq	%rsi, %rax
.LBB190_10:                             # %"$10"
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _bool;
	.scl	2;
	.type	32;
	.endef
	.globl	_bool                           # -- Begin function _bool
	.p2align	4, 0x90
_bool:                                  # @_bool
.seh_proc _bool
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB191_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB191_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB191_4
.LBB191_2:                              # %"$6"
	movq	(%rax), %rax
.LBB191_4:                              # %"$2"
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	leaq	SymTab+280(%rip), %rax
	cmoveq	%rcx, %rax
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _not;
	.scl	2;
	.type	32;
	.endef
	.globl	_not                            # -- Begin function _not
	.p2align	4, 0x90
_not:                                   # @_not
.seh_proc _not
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB192_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB192_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB192_4
.LBB192_2:                              # %"$6"
	movq	(%rax), %rax
.LBB192_4:                              # %"$2"
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	jne	.LBB192_6
# %bb.5:
	leaq	SymTab+280(%rip), %rcx
	jmp	.LBB192_7
.LBB192_6:                              # %"$8"
	movq	%rax, SymTab+440(%rip)
.LBB192_7:                              # %"$9"
	movq	%rcx, %rax
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _nil;
	.scl	2;
	.type	32;
	.endef
	.globl	_nil                            # -- Begin function _nil
	.p2align	4, 0x90
_nil:                                   # @_nil
.seh_proc _nil
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	8(%rcx), %rsi
	jmp	.LBB193_1
	.p2align	4, 0x90
.LBB193_3:                              # %"$4"
                                        #   in Loop: Header=BB193_1 Depth=1
	testb	$15, %sil
	jne	.LBB193_4
.LBB193_1:                              # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rcx
	movq	8(%rsi), %rsi
	testb	$15, %cl
	jne	.LBB193_3
# %bb.2:                                # %"$3"
                                        #   in Loop: Header=BB193_1 Depth=1
	callq	evList
	jmp	.LBB193_3
.LBB193_4:                              # %"$6"
	leaq	SymTab+8(%rip), %rax
	addq	$32, %rsp
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _t;
	.scl	2;
	.type	32;
	.endef
	.globl	_t                              # -- Begin function _t
	.p2align	4, 0x90
_t:                                     # @_t
.seh_proc _t
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	8(%rcx), %rsi
	jmp	.LBB194_1
	.p2align	4, 0x90
.LBB194_3:                              # %"$4"
                                        #   in Loop: Header=BB194_1 Depth=1
	testb	$15, %sil
	jne	.LBB194_4
.LBB194_1:                              # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rcx
	movq	8(%rsi), %rsi
	testb	$15, %cl
	jne	.LBB194_3
# %bb.2:                                # %"$3"
                                        #   in Loop: Header=BB194_1 Depth=1
	callq	evList
	jmp	.LBB194_3
.LBB194_4:                              # %"$6"
	leaq	SymTab+280(%rip), %rax
	addq	$32, %rsp
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _prog;
	.scl	2;
	.type	32;
	.endef
	.globl	_prog                           # -- Begin function _prog
	.p2align	4, 0x90
_prog:                                  # @_prog
.seh_proc _prog
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rsi
	jmp	.LBB195_1
	.p2align	4, 0x90
.LBB195_9:                              # %"$11"
                                        #   in Loop: Header=BB195_1 Depth=1
	movq	(%rsi), %rcx
	movq	8(%rsi), %rsi
.LBB195_1:                              # %"$1"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %sil
	jne	.LBB195_2
# %bb.7:                                # %"$3"
                                        #   in Loop: Header=BB195_1 Depth=1
	testb	$15, %cl
	jne	.LBB195_9
# %bb.8:                                # %"$12"
                                        #   in Loop: Header=BB195_1 Depth=1
	callq	evList
	jmp	.LBB195_9
.LBB195_2:                              # %"$5"
	testb	$6, %cl
	jne	.LBB195_5
# %bb.3:                                # %"$7"
	testb	$8, %cl
	jne	.LBB195_4
# %bb.6:                                # %"$9"
	addq	$32, %rsp
	popq	%rsi
	jmp	evList                          # TAILCALL
.LBB195_4:                              # %"$10"
	movq	(%rcx), %rcx
.LBB195_5:                              # %"$4"
	movq	%rcx, %rax
	addq	$32, %rsp
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _prog1;
	.scl	2;
	.type	32;
	.endef
	.globl	_prog1                          # -- Begin function _prog1
	.p2align	4, 0x90
_prog1:                                 # @_prog1
.seh_proc _prog1
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rdi
	testb	$6, %sil
	jne	.LBB196_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB196_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB196_4
.LBB196_2:                              # %"$6"
	movq	(%rsi), %rsi
.LBB196_4:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rsi, (%rbx)
	movq	%rbx, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rbx, env(%rip)
	movq	%rsi, SymTab+440(%rip)
	jmp	.LBB196_5
	.p2align	4, 0x90
.LBB196_7:                              # %"$9"
                                        #   in Loop: Header=BB196_5 Depth=1
	testb	$15, %dil
	jne	.LBB196_8
.LBB196_5:                              # %"$7"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rcx
	movq	8(%rdi), %rdi
	testb	$15, %cl
	jne	.LBB196_7
# %bb.6:                                # %"$8"
                                        #   in Loop: Header=BB196_5 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	jmp	.LBB196_7
.LBB196_8:                              # %"$11"
	movq	8(%rbx), %rax
	movq	%rax, env(%rip)
	movq	%rsi, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _prog2;
	.scl	2;
	.type	32;
	.endef
	.globl	_prog2                          # -- Begin function _prog2
	.p2align	4, 0x90
_prog2:                                 # @_prog2
.seh_proc _prog2
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rdi
	testb	$14, %cl
	jne	.LBB197_2
# %bb.1:                                # %"$5"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
.LBB197_2:                              # %"$2"
	movq	(%rdi), %rsi
	movq	8(%rdi), %rdi
	testb	$6, %sil
	jne	.LBB197_6
# %bb.3:                                # %"$8"
	testb	$8, %sil
	jne	.LBB197_4
# %bb.5:                                # %"$10"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB197_6
.LBB197_4:                              # %"$11"
	movq	(%rsi), %rsi
.LBB197_6:                              # %"$7"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rsi, (%rbx)
	movq	%rbx, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rbx, env(%rip)
	movq	%rsi, SymTab+440(%rip)
	jmp	.LBB197_7
	.p2align	4, 0x90
.LBB197_9:                              # %"$14"
                                        #   in Loop: Header=BB197_7 Depth=1
	testb	$15, %dil
	jne	.LBB197_10
.LBB197_7:                              # %"$12"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rcx
	movq	8(%rdi), %rdi
	testb	$15, %cl
	jne	.LBB197_9
# %bb.8:                                # %"$13"
                                        #   in Loop: Header=BB197_7 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	jmp	.LBB197_9
.LBB197_10:                             # %"$16"
	movq	8(%rbx), %rax
	movq	%rax, env(%rip)
	movq	%rsi, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _if;
	.scl	2;
	.type	32;
	.endef
	.globl	_if                             # -- Begin function _if
	.p2align	4, 0x90
_if:                                    # @_if
.seh_proc _if
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	8(%rcx), %rcx
	movq	(%rcx), %rax
	movq	8(%rcx), %rsi
	testb	$6, %al
	jne	.LBB198_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB198_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB198_4
.LBB198_2:                              # %"$6"
	movq	(%rax), %rax
.LBB198_4:                              # %"$2"
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	jne	.LBB198_13
# %bb.5:                                # %"$7"
	movq	8(%rsi), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rsi
	jmp	.LBB198_6
	.p2align	4, 0x90
.LBB198_12:                             # %"$19"
                                        #   in Loop: Header=BB198_6 Depth=1
	movq	(%rsi), %rcx
	movq	8(%rsi), %rsi
.LBB198_6:                              # %"$7"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %sil
	jne	.LBB198_7
# %bb.10:                               # %"$11"
                                        #   in Loop: Header=BB198_6 Depth=1
	testb	$15, %cl
	jne	.LBB198_12
# %bb.11:                               # %"$20"
                                        #   in Loop: Header=BB198_6 Depth=1
	callq	evList
	jmp	.LBB198_12
.LBB198_13:                             # %"$8"
	movq	%rax, SymTab+440(%rip)
	movq	(%rsi), %rcx
.LBB198_7:                              # %"$13"
	testb	$6, %cl
	jne	.LBB198_15
# %bb.8:                                # %"$15"
	testb	$8, %cl
	jne	.LBB198_14
# %bb.9:                                # %"$17"
	addq	$32, %rsp
	popq	%rsi
	jmp	evList                          # TAILCALL
.LBB198_14:                             # %"$25"
	movq	(%rcx), %rcx
.LBB198_15:                             # %"$9"
	movq	%rcx, %rax
	addq	$32, %rsp
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _ifn;
	.scl	2;
	.type	32;
	.endef
	.globl	_ifn                            # -- Begin function _ifn
	.p2align	4, 0x90
_ifn:                                   # @_ifn
.seh_proc _ifn
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	8(%rcx), %rcx
	movq	(%rcx), %rax
	movq	8(%rcx), %rsi
	testb	$6, %al
	jne	.LBB199_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB199_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB199_4
.LBB199_2:                              # %"$6"
	movq	(%rax), %rax
.LBB199_4:                              # %"$2"
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	jne	.LBB199_9
# %bb.5:                                # %"$7"
	movq	(%rsi), %rcx
.LBB199_6:                              # %"$7"
	testb	$6, %cl
	jne	.LBB199_15
# %bb.7:                                # %"$11"
	testb	$8, %cl
	jne	.LBB199_14
# %bb.8:                                # %"$13"
	addq	$32, %rsp
	popq	%rsi
	jmp	evList                          # TAILCALL
.LBB199_9:                              # %"$8"
	movq	%rax, SymTab+440(%rip)
	movq	8(%rsi), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rsi
	jmp	.LBB199_10
	.p2align	4, 0x90
.LBB199_13:                             # %"$24"
                                        #   in Loop: Header=BB199_10 Depth=1
	movq	(%rsi), %rcx
	movq	8(%rsi), %rsi
.LBB199_10:                             # %"$8"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %sil
	jne	.LBB199_6
# %bb.11:                               # %"$16"
                                        #   in Loop: Header=BB199_10 Depth=1
	testb	$15, %cl
	jne	.LBB199_13
# %bb.12:                               # %"$25"
                                        #   in Loop: Header=BB199_10 Depth=1
	callq	evList
	jmp	.LBB199_13
.LBB199_14:                             # %"$23"
	movq	(%rcx), %rcx
.LBB199_15:                             # %"$9"
	movq	%rcx, %rax
	addq	$32, %rsp
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _if2;
	.scl	2;
	.type	32;
	.endef
	.globl	_if2                            # -- Begin function _if2
	.p2align	4, 0x90
_if2:                                   # @_if2
.seh_proc _if2
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rcx
	movq	(%rcx), %rax
	movq	8(%rcx), %rdi
	testb	$6, %al
	jne	.LBB200_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB200_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB200_4
.LBB200_2:                              # %"$6"
	movq	(%rax), %rax
.LBB200_4:                              # %"$2"
	leaq	SymTab+8(%rip), %rsi
	cmpq	%rsi, %rax
	jne	.LBB200_19
# %bb.5:                                # %"$7"
	movq	(%rdi), %rax
	movq	8(%rdi), %rdi
	testb	$6, %al
	jne	.LBB200_9
# %bb.6:                                # %"$11"
	testb	$8, %al
	jne	.LBB200_7
# %bb.8:                                # %"$13"
	movq	%rax, %rcx
	callq	evList
.LBB200_9:                              # %"$10"
	cmpq	%rsi, %rax
	jne	.LBB200_18
.LBB200_10:                             # %"$15"
	movq	8(%rdi), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rsi
	jmp	.LBB200_11
	.p2align	4, 0x90
.LBB200_17:                             # %"$27"
                                        #   in Loop: Header=BB200_11 Depth=1
	movq	(%rsi), %rcx
	movq	8(%rsi), %rsi
.LBB200_11:                             # %"$15"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %sil
	jne	.LBB200_12
# %bb.15:                               # %"$19"
                                        #   in Loop: Header=BB200_11 Depth=1
	testb	$15, %cl
	jne	.LBB200_17
# %bb.16:                               # %"$28"
                                        #   in Loop: Header=BB200_11 Depth=1
	callq	evList
	jmp	.LBB200_17
.LBB200_19:                             # %"$8"
	movq	%rax, SymTab+440(%rip)
	movq	(%rdi), %rax
	movq	8(%rdi), %rdi
	testb	$6, %al
	jne	.LBB200_23
# %bb.20:                               # %"$35"
	testb	$8, %al
	jne	.LBB200_21
# %bb.22:                               # %"$37"
	movq	%rax, %rcx
	callq	evList
.LBB200_23:                             # %"$34"
	cmpq	%rsi, %rax
	jne	.LBB200_26
.LBB200_24:                             # %"$39"
	movq	8(%rdi), %rax
	movq	(%rax), %rcx
	testb	$6, %cl
	jne	.LBB200_28
	jmp	.LBB200_13
.LBB200_7:                              # %"$14"
	movq	(%rax), %rax
	cmpq	%rsi, %rax
	je	.LBB200_10
.LBB200_18:                             # %"$16"
	movq	%rax, SymTab+440(%rip)
	movq	8(%rdi), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rcx
.LBB200_12:                             # %"$21"
	testb	$6, %cl
	jne	.LBB200_28
.LBB200_13:                             # %"$23"
	testb	$8, %cl
	jne	.LBB200_27
# %bb.14:                               # %"$25"
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	jmp	evList                          # TAILCALL
.LBB200_27:                             # %"$51"
	movq	(%rcx), %rcx
	jmp	.LBB200_28
.LBB200_21:                             # %"$38"
	movq	(%rax), %rax
	cmpq	%rsi, %rax
	je	.LBB200_24
.LBB200_26:                             # %"$40"
	movq	%rax, SymTab+440(%rip)
	movq	(%rdi), %rcx
	testb	$6, %cl
	je	.LBB200_13
.LBB200_28:                             # %"$9"
	movq	%rcx, %rax
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _when;
	.scl	2;
	.type	32;
	.endef
	.globl	_when                           # -- Begin function _when
	.p2align	4, 0x90
_when:                                  # @_when
.seh_proc _when
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	8(%rcx), %rcx
	movq	(%rcx), %rax
	movq	8(%rcx), %rsi
	testb	$6, %al
	jne	.LBB201_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB201_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB201_4
.LBB201_2:                              # %"$6"
	movq	(%rax), %rax
.LBB201_4:                              # %"$2"
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB201_10
# %bb.5:                                # %"$8"
	movq	%rax, SymTab+440(%rip)
	.p2align	4, 0x90
.LBB201_6:                              # %"$8"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rcx
	movq	8(%rsi), %rsi
	testb	$15, %sil
	jne	.LBB201_7
# %bb.12:                               # %"$11"
                                        #   in Loop: Header=BB201_6 Depth=1
	testb	$15, %cl
	jne	.LBB201_6
# %bb.13:                               # %"$20"
                                        #   in Loop: Header=BB201_6 Depth=1
	callq	evList
	jmp	.LBB201_6
.LBB201_7:                              # %"$13"
	testb	$6, %cl
	jne	.LBB201_10
# %bb.8:                                # %"$15"
	testb	$8, %cl
	jne	.LBB201_9
# %bb.11:                               # %"$17"
	addq	$32, %rsp
	popq	%rsi
	jmp	evList                          # TAILCALL
.LBB201_9:                              # %"$18"
	movq	(%rcx), %rcx
.LBB201_10:                             # %"$9"
	movq	%rcx, %rax
	addq	$32, %rsp
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _unless;
	.scl	2;
	.type	32;
	.endef
	.globl	_unless                         # -- Begin function _unless
	.p2align	4, 0x90
_unless:                                # @_unless
.seh_proc _unless
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	8(%rcx), %rcx
	movq	(%rcx), %rax
	movq	8(%rcx), %rsi
	testb	$6, %al
	jne	.LBB202_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB202_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB202_4
.LBB202_2:                              # %"$6"
	movq	(%rax), %rax
.LBB202_4:                              # %"$2"
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	jne	.LBB202_12
	.p2align	4, 0x90
.LBB202_5:                              # %"$10.preheader"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rcx
	movq	8(%rsi), %rsi
	testb	$15, %sil
	jne	.LBB202_6
# %bb.10:                               # %"$11"
                                        #   in Loop: Header=BB202_5 Depth=1
	testb	$15, %cl
	jne	.LBB202_5
# %bb.11:                               # %"$20"
                                        #   in Loop: Header=BB202_5 Depth=1
	callq	evList
	jmp	.LBB202_5
.LBB202_12:                             # %"$8"
	movq	%rax, SymTab+440(%rip)
	jmp	.LBB202_13
.LBB202_6:                              # %"$13"
	testb	$6, %cl
	jne	.LBB202_13
# %bb.7:                                # %"$15"
	testb	$8, %cl
	jne	.LBB202_8
# %bb.9:                                # %"$17"
	addq	$32, %rsp
	popq	%rsi
	jmp	evList                          # TAILCALL
.LBB202_8:                              # %"$18"
	movq	(%rcx), %rcx
.LBB202_13:                             # %"$9"
	movq	%rcx, %rax
	addq	$32, %rsp
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cond;
	.scl	2;
	.type	32;
	.endef
	.globl	_cond                           # -- Begin function _cond
	.p2align	4, 0x90
_cond:                                  # @_cond
.seh_proc _cond
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rdi
	leaq	SymTab+8(%rip), %rsi
	jmp	.LBB203_1
.LBB203_5:                              # %"$9"
                                        #   in Loop: Header=BB203_1 Depth=1
	movq	%rax, %rcx
	callq	evList
	.p2align	4, 0x90
.LBB203_6:                              # %"$6"
                                        #   in Loop: Header=BB203_1 Depth=1
	cmpq	%rsi, %rax
	jne	.LBB203_7
.LBB203_1:                              # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rdi), %rdi
	testb	$15, %dil
	jne	.LBB203_12
# %bb.2:                                # %"$3"
                                        #   in Loop: Header=BB203_1 Depth=1
	movq	(%rdi), %rbx
	movq	(%rbx), %rax
	testb	$6, %al
	jne	.LBB203_6
# %bb.3:                                # %"$7"
                                        #   in Loop: Header=BB203_1 Depth=1
	testb	$8, %al
	je	.LBB203_5
# %bb.4:                                # %"$10"
                                        #   in Loop: Header=BB203_1 Depth=1
	movq	(%rax), %rax
	jmp	.LBB203_6
.LBB203_7:                              # %"$12"
	movq	%rax, SymTab+440(%rip)
	movq	8(%rbx), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rdi
	jmp	.LBB203_8
	.p2align	4, 0x90
.LBB203_16:                             # %"$22"
                                        #   in Loop: Header=BB203_8 Depth=1
	movq	(%rdi), %rsi
	movq	8(%rdi), %rdi
.LBB203_8:                              # %"$12"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %dil
	jne	.LBB203_9
# %bb.14:                               # %"$14"
                                        #   in Loop: Header=BB203_8 Depth=1
	testb	$15, %sil
	jne	.LBB203_16
# %bb.15:                               # %"$23"
                                        #   in Loop: Header=BB203_8 Depth=1
	movq	%rsi, %rcx
	callq	evList
	jmp	.LBB203_16
.LBB203_9:                              # %"$16"
	testb	$6, %sil
	jne	.LBB203_12
# %bb.10:                               # %"$18"
	testb	$8, %sil
	jne	.LBB203_11
# %bb.13:                               # %"$20"
	movq	%rsi, %rcx
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	jmp	evList                          # TAILCALL
.LBB203_11:                             # %"$21"
	movq	(%rsi), %rsi
.LBB203_12:                             # %"$4"
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _nond;
	.scl	2;
	.type	32;
	.endef
	.globl	_nond                           # -- Begin function _nond
	.p2align	4, 0x90
_nond:                                  # @_nond
.seh_proc _nond
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	8(%rcx), %rdi
	leaq	SymTab+8(%rip), %rsi
	testb	$15, %dil
	jne	.LBB204_12
	.p2align	4, 0x90
.LBB204_2:                              # %"$3"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rbx
	movq	(%rbx), %rax
	testb	$6, %al
	jne	.LBB204_6
# %bb.3:                                # %"$7"
                                        #   in Loop: Header=BB204_2 Depth=1
	testb	$8, %al
	jne	.LBB204_4
# %bb.5:                                # %"$9"
                                        #   in Loop: Header=BB204_2 Depth=1
	movq	%rax, %rcx
	callq	evList
	.p2align	4, 0x90
.LBB204_6:                              # %"$6"
                                        #   in Loop: Header=BB204_2 Depth=1
	cmpq	%rsi, %rax
	je	.LBB204_7
.LBB204_17:                             # %"$11"
                                        #   in Loop: Header=BB204_2 Depth=1
	movq	%rax, SymTab+440(%rip)
	movq	8(%rdi), %rdi
	testb	$15, %dil
	je	.LBB204_2
	jmp	.LBB204_12
.LBB204_4:                              # %"$10"
                                        #   in Loop: Header=BB204_2 Depth=1
	movq	(%rax), %rax
	cmpq	%rsi, %rax
	jne	.LBB204_17
.LBB204_7:                              # %"$12"
	movq	8(%rbx), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rdi
	jmp	.LBB204_8
	.p2align	4, 0x90
.LBB204_16:                             # %"$22"
                                        #   in Loop: Header=BB204_8 Depth=1
	movq	(%rdi), %rsi
	movq	8(%rdi), %rdi
.LBB204_8:                              # %"$12"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %dil
	jne	.LBB204_9
# %bb.14:                               # %"$14"
                                        #   in Loop: Header=BB204_8 Depth=1
	testb	$15, %sil
	jne	.LBB204_16
# %bb.15:                               # %"$23"
                                        #   in Loop: Header=BB204_8 Depth=1
	movq	%rsi, %rcx
	callq	evList
	jmp	.LBB204_16
.LBB204_9:                              # %"$16"
	testb	$6, %sil
	jne	.LBB204_12
# %bb.10:                               # %"$18"
	testb	$8, %sil
	jne	.LBB204_11
# %bb.13:                               # %"$20"
	movq	%rsi, %rcx
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	jmp	evList                          # TAILCALL
.LBB204_11:                             # %"$21"
	movq	(%rsi), %rsi
.LBB204_12:                             # %"$4"
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _case;
	.scl	2;
	.type	32;
	.endef
	.globl	_case                           # -- Begin function _case
	.p2align	4, 0x90
_case:                                  # @_case
.seh_proc _case
# %bb.0:                                # %"$1"
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rsi
	movq	(%rsi), %r14
	testb	$6, %r14b
	jne	.LBB205_4
# %bb.1:                                # %"$3"
	testb	$8, %r14b
	jne	.LBB205_2
# %bb.3:                                # %"$5"
	movq	%r14, %rcx
	callq	evList
	movq	%rax, %r14
	jmp	.LBB205_4
.LBB205_2:                              # %"$6"
	movq	(%r14), %r14
.LBB205_4:                              # %"$2"
	movq	%r14, SymTab+440(%rip)
	movq	8(%rsi), %rdi
	leaq	SymTab+8(%rip), %rsi
	testb	$15, %dil
	jne	.LBB205_17
# %bb.5:                                # %"$8.preheader"
	leaq	SymTab+280(%rip), %r15
.LBB205_6:                              # %"$8"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB205_10 Depth 2
	movq	(%rdi), %r12
	movq	(%r12), %rbx
	cmpq	%r15, %rbx
	je	.LBB205_12
# %bb.7:                                # %"$12"
                                        #   in Loop: Header=BB205_6 Depth=1
	testb	$15, %bl
	je	.LBB205_10
# %bb.8:                                # %"$13"
                                        #   in Loop: Header=BB205_6 Depth=1
	movq	%rbx, %rcx
	movq	%r14, %rdx
	callq	equal
	testb	$1, %al
	je	.LBB205_9
	jmp	.LBB205_12
	.p2align	4, 0x90
.LBB205_10:                             # %"$17"
                                        #   Parent Loop BB205_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rbx), %rdx
	movq	%r14, %rcx
	callq	equal
	testb	$1, %al
	jne	.LBB205_12
# %bb.11:                               # %"$20"
                                        #   in Loop: Header=BB205_10 Depth=2
	movq	8(%rbx), %rbx
	testb	$15, %bl
	je	.LBB205_10
.LBB205_9:                              # %"$7.backedge"
                                        #   in Loop: Header=BB205_6 Depth=1
	movq	8(%rdi), %rdi
	testb	$15, %dil
	je	.LBB205_6
	jmp	.LBB205_17
.LBB205_12:                             # %"$23"
	movq	8(%r12), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rdi
	jmp	.LBB205_13
	.p2align	4, 0x90
.LBB205_21:                             # %"$33"
                                        #   in Loop: Header=BB205_13 Depth=1
	movq	(%rdi), %rsi
	movq	8(%rdi), %rdi
.LBB205_13:                             # %"$23"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %dil
	jne	.LBB205_14
# %bb.19:                               # %"$25"
                                        #   in Loop: Header=BB205_13 Depth=1
	testb	$15, %sil
	jne	.LBB205_21
# %bb.20:                               # %"$34"
                                        #   in Loop: Header=BB205_13 Depth=1
	movq	%rsi, %rcx
	callq	evList
	jmp	.LBB205_21
.LBB205_14:                             # %"$27"
	testb	$6, %sil
	jne	.LBB205_17
# %bb.15:                               # %"$29"
	testb	$8, %sil
	jne	.LBB205_16
# %bb.18:                               # %"$31"
	movq	%rsi, %rcx
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	jmp	evList                          # TAILCALL
.LBB205_16:                             # %"$32"
	movq	(%rsi), %rsi
.LBB205_17:                             # %"$9"
	movq	%rsi, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _casq;
	.scl	2;
	.type	32;
	.endef
	.globl	_casq                           # -- Begin function _casq
	.p2align	4, 0x90
_casq:                                  # @_casq
.seh_proc _casq
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	8(%rcx), %rsi
	movq	(%rsi), %rax
	testb	$6, %al
	jne	.LBB206_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB206_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB206_4
.LBB206_2:                              # %"$6"
	movq	(%rax), %rax
.LBB206_4:                              # %"$2"
	movq	%rax, SymTab+440(%rip)
	movq	8(%rsi), %rdx
	leaq	SymTab+8(%rip), %rcx
	testb	$15, %dl
	jne	.LBB206_17
# %bb.5:
	leaq	SymTab+280(%rip), %r8
	jmp	.LBB206_7
	.p2align	4, 0x90
.LBB206_6:                              # %"$7.loopexit"
                                        #   in Loop: Header=BB206_7 Depth=1
	movq	8(%rdx), %rdx
	testb	$15, %dl
	jne	.LBB206_17
.LBB206_7:                              # %"$8"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB206_10 Depth 2
	movq	(%rdx), %r9
	movq	(%r9), %rsi
	cmpq	%r8, %rsi
	je	.LBB206_12
# %bb.8:                                # %"$8"
                                        #   in Loop: Header=BB206_7 Depth=1
	cmpq	%rax, %rsi
	je	.LBB206_12
	.p2align	4, 0x90
# %bb.9:                                # %"$14.preheader"
                                        #   in Loop: Header=BB206_7 Depth=1
	testb	$15, %sil
	jne	.LBB206_6
.LBB206_10:                             # %"$15"
                                        #   Parent Loop BB206_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpq	(%rsi), %rax
	je	.LBB206_12
# %bb.11:                               # %"$18"
                                        #   in Loop: Header=BB206_10 Depth=2
	movq	8(%rsi), %rsi
	testb	$15, %sil
	je	.LBB206_10
	jmp	.LBB206_6
.LBB206_12:                             # %"$21"
	movq	8(%r9), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rsi
	jmp	.LBB206_13
	.p2align	4, 0x90
.LBB206_21:                             # %"$31"
                                        #   in Loop: Header=BB206_13 Depth=1
	movq	(%rsi), %rcx
	movq	8(%rsi), %rsi
.LBB206_13:                             # %"$21"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %sil
	jne	.LBB206_14
# %bb.19:                               # %"$23"
                                        #   in Loop: Header=BB206_13 Depth=1
	testb	$15, %cl
	jne	.LBB206_21
# %bb.20:                               # %"$32"
                                        #   in Loop: Header=BB206_13 Depth=1
	callq	evList
	jmp	.LBB206_21
.LBB206_14:                             # %"$25"
	testb	$6, %cl
	jne	.LBB206_17
# %bb.15:                               # %"$27"
	testb	$8, %cl
	jne	.LBB206_16
# %bb.18:                               # %"$29"
	addq	$32, %rsp
	popq	%rsi
	jmp	evList                          # TAILCALL
.LBB206_16:                             # %"$30"
	movq	(%rcx), %rcx
.LBB206_17:                             # %"$9"
	movq	%rcx, %rax
	addq	$32, %rsp
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _state;
	.scl	2;
	.type	32;
	.endef
	.globl	_state                          # -- Begin function _state
	.p2align	4, 0x90
_state:                                 # @_state
.seh_proc _state
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %r14
	movq	8(%rcx), %rbx
	movq	(%rbx), %r12
	testb	$6, %r12b
	jne	.LBB207_4
# %bb.1:                                # %"$3"
	testb	$8, %r12b
	jne	.LBB207_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%r12, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r12
	jmp	.LBB207_4
.LBB207_2:                              # %"$6"
	movq	(%r12), %r12
.LBB207_4:                              # %"$2"
	testb	$6, %r12b
	jne	.LBB207_30
# %bb.5:                                # %"$8"
	leaq	SymTab+8(%rip), %rsi
	cmpq	%rsi, %r12
	jb	.LBB207_7
# %bb.6:                                # %"$8"
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, %r12
	jbe	.LBB207_31
.LBB207_7:                              # %"$12"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%r12, (%r14)
	movq	%r14, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r14, env(%rip)
	movq	8(%rbx), %rbx
	testb	$15, %bl
	je	.LBB207_8
.LBB207_25:                             # %"$15"
	movq	8(%r14), %rax
	movq	%rax, env(%rip)
	movq	%rsi, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB207_8:                              # %"$14.lr.ph"
	leaq	SymTab+280(%rip), %r15
	leaq	SymTab+8(%rip), %rsi
	jmp	.LBB207_9
	.p2align	4, 0x90
.LBB207_15:                             # %"$27"
                                        #   in Loop: Header=BB207_9 Depth=1
	movq	8(%rax), %rdi
	movq	(%rdi), %rax
	testb	$6, %al
	je	.LBB207_16
.LBB207_19:                             # %"$29"
                                        #   in Loop: Header=BB207_9 Depth=1
	cmpq	%rsi, %rax
	jne	.LBB207_20
.LBB207_14:                             # %"$28"
                                        #   in Loop: Header=BB207_9 Depth=1
	movq	8(%rbx), %rbx
	testb	$15, %bl
	jne	.LBB207_25
.LBB207_9:                              # %"$14"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB207_12 Depth 2
	movq	(%rbx), %rax
	movq	(%rax), %rcx
	cmpq	%r15, %rcx
	je	.LBB207_15
# %bb.10:                               # %"$18"
                                        #   in Loop: Header=BB207_9 Depth=1
	movq	(%r12), %rdx
	cmpq	%rdx, %rcx
	je	.LBB207_15
	.p2align	4, 0x90
# %bb.11:                               # %"$21.preheader"
                                        #   in Loop: Header=BB207_9 Depth=1
	testb	$15, %cl
	jne	.LBB207_14
.LBB207_12:                             # %"$22"
                                        #   Parent Loop BB207_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpq	(%rcx), %rdx
	je	.LBB207_15
# %bb.13:                               # %"$25"
                                        #   in Loop: Header=BB207_12 Depth=2
	movq	8(%rcx), %rcx
	testb	$15, %cl
	je	.LBB207_12
	jmp	.LBB207_14
	.p2align	4, 0x90
.LBB207_16:                             # %"$30"
                                        #   in Loop: Header=BB207_9 Depth=1
	testb	$8, %al
	jne	.LBB207_17
# %bb.18:                               # %"$32"
                                        #   in Loop: Header=BB207_9 Depth=1
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB207_19
.LBB207_17:                             # %"$33"
                                        #   in Loop: Header=BB207_9 Depth=1
	movq	(%rax), %rax
	jmp	.LBB207_19
.LBB207_20:                             # %"$35"
	movq	%rax, SymTab+440(%rip)
	movq	%rax, (%r12)
	movq	8(%rdi), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rdi
	jmp	.LBB207_21
	.p2align	4, 0x90
.LBB207_29:                             # %"$45"
                                        #   in Loop: Header=BB207_21 Depth=1
	movq	(%rdi), %rsi
	movq	8(%rdi), %rdi
.LBB207_21:                             # %"$35"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %dil
	jne	.LBB207_22
# %bb.27:                               # %"$37"
                                        #   in Loop: Header=BB207_21 Depth=1
	testb	$15, %sil
	jne	.LBB207_29
# %bb.28:                               # %"$46"
                                        #   in Loop: Header=BB207_21 Depth=1
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB207_29
.LBB207_22:                             # %"$39"
	testb	$6, %sil
	jne	.LBB207_25
# %bb.23:                               # %"$41"
	testb	$8, %sil
	jne	.LBB207_24
# %bb.26:                               # %"$43"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB207_25
.LBB207_24:                             # %"$44"
	movq	(%rsi), %rsi
	jmp	.LBB207_25
.LBB207_30:                             # %"$7"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%r12, %rdx
	callq	varErr
.LBB207_31:                             # %"$11"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%r12, %rdx
	callq	protErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _while;
	.scl	2;
	.type	32;
	.endef
	.globl	_while                          # -- Begin function _while
	.p2align	4, 0x90
_while:                                 # @_while
.seh_proc _while
# %bb.0:                                # %"$1"
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$48, %rsp
	.seh_stackalloc 48
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %r15
	movq	env(%rip), %rax
	leaq	SymTab+8(%rip), %rdi
	movq	%rdi, 32(%rsp)
	movq	%rax, 40(%rsp)
	leaq	32(%rsp), %rax
	movq	%rax, env(%rip)
	testb	$6, %sil
	je	.LBB208_3
# %bb.1:                                # %"$2.preheader"
	cmpq	%rdi, %rsi
	jne	.LBB208_16
.LBB208_2:                              # %"$9"
	movq	40(%rsp), %rax
	movq	%rax, env(%rip)
	movq	%rdi, %rax
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	retq
.LBB208_3:                              # %"$2.us.preheader"
	leaq	SymTab+8(%rip), %r14
	movq	%r14, %rdi
	testb	$8, %sil
	je	.LBB208_6
	.p2align	4, 0x90
.LBB208_10:                             # %"$7.us"
	movq	(%rsi), %rax
	cmpq	%r14, %rax
	jne	.LBB208_11
	jmp	.LBB208_2
	.p2align	4, 0x90
.LBB208_4:                              # %"$13.us"
	testb	$6, %dil
	jne	.LBB208_5
# %bb.7:                                # %"$15.us"
	testb	$8, %dil
	jne	.LBB208_9
# %bb.8:                                # %"$17.us"
	movq	%rdi, %rcx
	callq	evList
	movq	%rax, %rdi
	jmp	.LBB208_5
	.p2align	4, 0x90
.LBB208_9:                              # %"$18.us"
	movq	(%rdi), %rdi
	.p2align	4, 0x90
.LBB208_5:                              # %"$12.us"
	movq	%rdi, 32(%rsp)
	testb	$8, %sil
	jne	.LBB208_10
.LBB208_6:                              # %"$6.us"
	movq	%rsi, %rcx
	callq	evList
	cmpq	%r14, %rax
	je	.LBB208_2
.LBB208_11:                             # %"$8.us"
	movq	%rax, SymTab+440(%rip)
	movq	(%r15), %rdi
	movq	8(%r15), %rbx
	jmp	.LBB208_13
	.p2align	4, 0x90
.LBB208_12:                             # %"$19.us"
                                        #   in Loop: Header=BB208_13 Depth=1
	movq	(%rbx), %rdi
	movq	8(%rbx), %rbx
.LBB208_13:                             # %"$8.us"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %bl
	jne	.LBB208_4
# %bb.14:                               # %"$11.us"
                                        #   in Loop: Header=BB208_13 Depth=1
	testb	$15, %dil
	jne	.LBB208_12
# %bb.15:                               # %"$20.us"
                                        #   in Loop: Header=BB208_13 Depth=1
	movq	%rdi, %rcx
	callq	evList
	jmp	.LBB208_12
.LBB208_16:
	leaq	SymTab+8(%rip), %r14
	jmp	.LBB208_19
	.p2align	4, 0x90
.LBB208_17:                             # %"$13"
                                        #   in Loop: Header=BB208_19 Depth=1
	testb	$6, %dil
	je	.LBB208_24
.LBB208_18:                             # %"$12"
                                        #   in Loop: Header=BB208_19 Depth=1
	cmpq	%r14, %rsi
	movq	%rdi, 32(%rsp)
	je	.LBB208_2
.LBB208_19:                             # %"$8"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB208_21 Depth 2
	movq	%rsi, SymTab+440(%rip)
	movq	(%r15), %rdi
	movq	8(%r15), %rbx
	jmp	.LBB208_21
	.p2align	4, 0x90
.LBB208_20:                             # %"$19"
                                        #   in Loop: Header=BB208_21 Depth=2
	movq	(%rbx), %rdi
	movq	8(%rbx), %rbx
.LBB208_21:                             # %"$8"
                                        #   Parent Loop BB208_19 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	testb	$15, %bl
	jne	.LBB208_17
# %bb.22:                               # %"$11"
                                        #   in Loop: Header=BB208_21 Depth=2
	testb	$15, %dil
	jne	.LBB208_20
# %bb.23:                               # %"$20"
                                        #   in Loop: Header=BB208_21 Depth=2
	movq	%rdi, %rcx
	callq	evList
	jmp	.LBB208_20
	.p2align	4, 0x90
.LBB208_24:                             # %"$15"
                                        #   in Loop: Header=BB208_19 Depth=1
	testb	$8, %dil
	jne	.LBB208_26
# %bb.25:                               # %"$17"
                                        #   in Loop: Header=BB208_19 Depth=1
	movq	%rdi, %rcx
	callq	evList
	movq	%rax, %rdi
	jmp	.LBB208_18
.LBB208_26:                             # %"$18"
                                        #   in Loop: Header=BB208_19 Depth=1
	movq	(%rdi), %rdi
	jmp	.LBB208_18
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _until;
	.scl	2;
	.type	32;
	.endef
	.globl	_until                          # -- Begin function _until
	.p2align	4, 0x90
_until:                                 # @_until
.seh_proc _until
# %bb.0:                                # %"$1"
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$48, %rsp
	.seh_stackalloc 48
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %r15
	movq	8(%rax), %rbx
	movq	env(%rip), %rax
	leaq	SymTab+8(%rip), %rdi
	movq	%rdi, 32(%rsp)
	movq	%rax, 40(%rsp)
	leaq	32(%rsp), %rax
	movq	%rax, env(%rip)
	testb	$6, %r15b
	je	.LBB209_15
# %bb.1:                                # %"$2.preheader"
	cmpq	%rdi, %r15
	jne	.LBB209_13
# %bb.2:
	leaq	SymTab+8(%rip), %r14
	jmp	.LBB209_5
	.p2align	4, 0x90
.LBB209_3:                              # %"$13"
                                        #   in Loop: Header=BB209_5 Depth=1
	testb	$6, %dil
	je	.LBB209_10
.LBB209_4:                              # %"$12"
                                        #   in Loop: Header=BB209_5 Depth=1
	cmpq	%r14, %r15
	movq	%rdi, 32(%rsp)
	jne	.LBB209_13
.LBB209_5:                              # %"$10.preheader"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB209_7 Depth 2
	movq	(%rbx), %rdi
	movq	8(%rbx), %rsi
	jmp	.LBB209_7
	.p2align	4, 0x90
.LBB209_6:                              # %"$19"
                                        #   in Loop: Header=BB209_7 Depth=2
	movq	(%rsi), %rdi
	movq	8(%rsi), %rsi
.LBB209_7:                              # %"$10.preheader"
                                        #   Parent Loop BB209_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	testb	$15, %sil
	jne	.LBB209_3
# %bb.8:                                # %"$11"
                                        #   in Loop: Header=BB209_7 Depth=2
	testb	$15, %dil
	jne	.LBB209_6
# %bb.9:                                # %"$20"
                                        #   in Loop: Header=BB209_7 Depth=2
	movq	%rdi, %rcx
	callq	evList
	jmp	.LBB209_6
	.p2align	4, 0x90
.LBB209_10:                             # %"$15"
                                        #   in Loop: Header=BB209_5 Depth=1
	testb	$8, %dil
	jne	.LBB209_12
# %bb.11:                               # %"$17"
                                        #   in Loop: Header=BB209_5 Depth=1
	movq	%rdi, %rcx
	callq	evList
	movq	%rax, %rdi
	jmp	.LBB209_4
.LBB209_12:                             # %"$18"
                                        #   in Loop: Header=BB209_5 Depth=1
	movq	(%rdi), %rdi
	jmp	.LBB209_4
.LBB209_13:
	movq	%r15, %rax
.LBB209_14:                             # %"$9"
	movq	%rax, SymTab+440(%rip)
	movq	40(%rsp), %rax
	movq	%rax, env(%rip)
	movq	%rdi, %rax
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	retq
.LBB209_15:                             # %"$2.us.preheader"
	leaq	SymTab+8(%rip), %r14
	movq	%r14, %rdi
	testb	$8, %r15b
	je	.LBB209_18
	.p2align	4, 0x90
.LBB209_22:                             # %"$7.us"
	movq	(%r15), %rax
	cmpq	%r14, %rax
	je	.LBB209_23
	jmp	.LBB209_14
	.p2align	4, 0x90
.LBB209_16:                             # %"$13.us"
	testb	$6, %dil
	jne	.LBB209_17
# %bb.19:                               # %"$15.us"
	testb	$8, %dil
	jne	.LBB209_21
# %bb.20:                               # %"$17.us"
	movq	%rdi, %rcx
	callq	evList
	movq	%rax, %rdi
	jmp	.LBB209_17
	.p2align	4, 0x90
.LBB209_21:                             # %"$18.us"
	movq	(%rdi), %rdi
	.p2align	4, 0x90
.LBB209_17:                             # %"$12.us"
	movq	%rdi, 32(%rsp)
	testb	$8, %r15b
	jne	.LBB209_22
.LBB209_18:                             # %"$6.us"
	movq	%r15, %rcx
	callq	evList
	cmpq	%r14, %rax
	jne	.LBB209_14
.LBB209_23:                             # %"$10.preheader.us"
	movq	(%rbx), %rdi
	movq	8(%rbx), %rsi
	jmp	.LBB209_25
	.p2align	4, 0x90
.LBB209_24:                             # %"$19.us"
                                        #   in Loop: Header=BB209_25 Depth=1
	movq	(%rsi), %rdi
	movq	8(%rsi), %rsi
.LBB209_25:                             # %"$19.us"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %sil
	jne	.LBB209_16
# %bb.26:                               # %"$11.us"
                                        #   in Loop: Header=BB209_25 Depth=1
	testb	$15, %dil
	jne	.LBB209_24
# %bb.27:                               # %"$20.us"
                                        #   in Loop: Header=BB209_25 Depth=1
	movq	%rdi, %rcx
	callq	evList
	jmp	.LBB209_24
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _at;
	.scl	2;
	.type	32;
	.endef
	.globl	_at                             # -- Begin function _at
	.p2align	4, 0x90
_at:                                    # @_at
.seh_proc _at
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rdi
	movq	(%rdi), %rax
	testb	$6, %al
	jne	.LBB210_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB210_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB210_4
.LBB210_2:                              # %"$6"
	movq	(%rax), %rax
.LBB210_4:                              # %"$2"
	testb	$15, %al
	jne	.LBB210_18
# %bb.5:                                # %"$8"
	movq	8(%rax), %rdx
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rdx
	je	.LBB210_13
# %bb.6:                                # %"$10"
	movq	(%rax), %rsi
	addq	$16, %rsi
	cmpq	%rdx, %rsi
	jae	.LBB210_8
# %bb.7:                                # %"$13"
	movq	%rsi, (%rax)
	jmp	.LBB210_13
.LBB210_8:                              # %"$12"
	movq	$2, (%rax)
	movq	8(%rdi), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rsi
	jmp	.LBB210_9
	.p2align	4, 0x90
.LBB210_17:                             # %"$23"
                                        #   in Loop: Header=BB210_9 Depth=1
	movq	(%rsi), %rcx
	movq	8(%rsi), %rsi
.LBB210_9:                              # %"$12"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %sil
	jne	.LBB210_10
# %bb.15:                               # %"$15"
                                        #   in Loop: Header=BB210_9 Depth=1
	testb	$15, %cl
	jne	.LBB210_17
# %bb.16:                               # %"$24"
                                        #   in Loop: Header=BB210_9 Depth=1
	callq	evList
	jmp	.LBB210_17
.LBB210_10:                             # %"$17"
	testb	$6, %cl
	jne	.LBB210_13
# %bb.11:                               # %"$19"
	testb	$8, %cl
	jne	.LBB210_12
# %bb.14:                               # %"$21"
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	jmp	evList                          # TAILCALL
.LBB210_12:                             # %"$22"
	movq	(%rcx), %rcx
.LBB210_13:                             # %"$9"
	movq	%rcx, %rax
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
.LBB210_18:                             # %"$7"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	pairErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _do;
	.scl	2;
	.type	32;
	.endef
	.globl	_do                             # -- Begin function _do
	.p2align	4, 0x90
_do:                                    # @_do
.seh_proc _do
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rdi
	movq	8(%rax), %rsi
	testb	$6, %dil
	jne	.LBB211_4
# %bb.1:                                # %"$3"
	testb	$8, %dil
	jne	.LBB211_2
# %bb.3:                                # %"$5"
	movq	%rdi, %rcx
	callq	evList
	movq	%rax, %rdi
	jmp	.LBB211_4
.LBB211_2:                              # %"$6"
	movq	(%rdi), %rdi
.LBB211_4:                              # %"$2"
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rdi
	jne	.LBB211_5
.LBB211_11:                             # %"$7"
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
.LBB211_5:                              # %"$8"
	testb	$2, %dil
	jne	.LBB211_6
# %bb.12:                               # %"$10"
	movq	%rsi, %rcx
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	jmp	loop2                           # TAILCALL
.LBB211_6:                              # %"$11"
	testb	$8, %dil
	jne	.LBB211_11
# %bb.7:                                # %"$11"
	shrq	$4, %rdi
	je	.LBB211_11
	.p2align	4, 0x90
.LBB211_8:                              # %"$17"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rsi, %rcx
	callq	loop1
	testb	$1, %al
	je	.LBB211_11
# %bb.9:                                # %"$18"
                                        #   in Loop: Header=BB211_8 Depth=1
	decq	%rdi
	jne	.LBB211_8
# %bb.10:                               # %"$22"
	andq	$-2, %rax
	jmp	.LBB211_11
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _loop;
	.scl	2;
	.type	32;
	.endef
	.globl	_loop                           # -- Begin function _loop
	.p2align	4, 0x90
_loop:                                  # @_loop
# %bb.0:                                # %"$1"
	movq	8(%rcx), %rcx
	jmp	loop2                           # TAILCALL
                                        # -- End function
	.def	 _for;
	.scl	2;
	.type	32;
	.endef
	.globl	_for                            # -- Begin function _for
	.p2align	4, 0x90
_for:                                   # @_for
.seh_proc _for
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$24, %rsp
	.seh_stackalloc 24
	leaq	16(%rsp), %rbp
	.seh_setframe %rbp, 16
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %r14
	testb	$15, %sil
	je	.LBB213_11
# %bb.1:                                # %"$4"
	testb	$6, %sil
	jne	.LBB213_98
# %bb.2:                                # %"$6"
	leaq	SymTab+8(%rip), %rdi
	cmpq	%rdi, %rsi
	jb	.LBB213_4
# %bb.3:                                # %"$6"
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, %rsi
	jbe	.LBB213_99
.LBB213_4:                              # %"$10"
	movq	env+8(%rip), %rcx
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r12
	movq	%rcx, 16(%r12)
	movq	%r12, env+8(%rip)
	movq	(%rsi), %rax
	movq	%rax, (%r12)
	movq	%rsi, 8(%r12)
	movq	(%r14), %rbx
	movq	8(%r14), %r14
	testb	$6, %bl
	je	.LBB213_5
# %bb.7:                                # %"$11"
	testb	$6, %bl
	je	.LBB213_29
.LBB213_8:                              # %"$16"
	testb	$8, %bl
	jne	.LBB213_54
# %bb.9:                                # %"$19"
	movq	$2, (%rsi)
	cmpq	$18, %rbx
	jae	.LBB213_33
# %bb.10:
	leaq	SymTab+8(%rip), %rdi
	andq	$-2, %rdi
	jmp	.LBB213_54
.LBB213_11:                             # %"$3"
	movq	8(%rsi), %r13
	testb	$15, %r13b
	je	.LBB213_21
# %bb.12:                               # %"$32"
	testb	$6, %r13b
	jne	.LBB213_100
# %bb.13:                               # %"$34"
	leaq	SymTab+8(%rip), %rdi
	cmpq	%rdi, %r13
	jb	.LBB213_15
# %bb.14:                               # %"$34"
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, %r13
	jbe	.LBB213_101
.LBB213_15:                             # %"$38"
	movq	(%rsi), %rsi
	testb	$6, %sil
	jne	.LBB213_98
# %bb.16:                               # %"$40"
	cmpq	%rdi, %rsi
	jb	.LBB213_18
# %bb.17:                               # %"$40"
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, %rsi
	jbe	.LBB213_99
.LBB213_18:                             # %"$44"
	movq	env+8(%rip), %rcx
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdx
	movq	%rcx, 16(%rdx)
	movq	%rdx, env+8(%rip)
	movq	(%rsi), %rax
	movq	%rax, (%rdx)
	movq	%rsi, 8(%rdx)
	movq	(%r13), %rcx
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r12
	movq	%rcx, (%r12)
	movq	%r12, %rax
	orq	$8, %rax
	movq	%r13, (%rax)
	movq	%rdx, (%rbp)                    # 8-byte Spill
	movq	%rdx, 16(%r12)
	movq	%r12, env+8(%rip)
	movq	(%r14), %rbx
	movq	8(%r14), %r14
	testb	$6, %bl
	jne	.LBB213_47
# %bb.19:                               # %"$46"
	testb	$8, %bl
	jne	.LBB213_46
# %bb.20:                               # %"$48"
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rbx
	jmp	.LBB213_47
.LBB213_5:                              # %"$12"
	testb	$8, %bl
	jne	.LBB213_28
# %bb.6:                                # %"$14"
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rbx
	testb	$6, %bl
	jne	.LBB213_8
	jmp	.LBB213_29
.LBB213_21:                             # %"$31"
	movq	(%rsi), %rdx
	testb	$15, %dl
	je	.LBB213_37
# %bb.22:                               # %"$56"
	testb	$6, %dl
	jne	.LBB213_102
# %bb.23:                               # %"$58"
	leaq	SymTab+8(%rip), %r12
	cmpq	%r12, %rdx
	jb	.LBB213_25
# %bb.24:                               # %"$58"
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, %rdx
	jbe	.LBB213_103
.LBB213_25:                             # %"$62"
	movq	env+8(%rip), %rcx
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rcx, 16(%rbx)
	movq	%rbx, env+8(%rip)
	movq	(%rdx), %rax
	movq	%rax, (%rbx)
	movq	%rbx, (%rbp)                    # 8-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, 8(%rbx)
	movq	(%r13), %rax
	movq	8(%r13), %rbx
	testb	$6, %al
	jne	.LBB213_57
# %bb.26:                               # %"$64"
	testb	$8, %al
	jne	.LBB213_56
# %bb.27:                               # %"$66"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB213_57
.LBB213_28:                             # %"$15"
	movq	(%rbx), %rbx
	testb	$6, %bl
	jne	.LBB213_8
.LBB213_29:                             # %"$17"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%rbx, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r15, env(%rip)
	testb	$15, %bl
	je	.LBB213_32
# %bb.30:
	leaq	SymTab+8(%rip), %rdi
.LBB213_52:                             # %"$29"
	andq	$-2, %rdi
.LBB213_53:                             # %"$28"
	movq	8(%r15), %rax
	movq	%rax, env(%rip)
	jmp	.LBB213_54
	.p2align	4, 0x90
.LBB213_31:                             # %"$26"
                                        #   in Loop: Header=BB213_32 Depth=1
	testb	$15, %bl
	jne	.LBB213_52
.LBB213_32:                             # %"$27"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rbx), %rax
	movq	8(%rbx), %rbx
	movq	%rax, (%rsi)
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	loop1
	addq	$32, %rsp
	movq	%rax, %rdi
	testb	$1, %dil
	jne	.LBB213_31
	jmp	.LBB213_53
.LBB213_33:                             # %"$22.preheader"
	movl	$18, %eax
	.p2align	4, 0x90
.LBB213_34:                             # %"$22"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, (%rsi)
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	loop1
	addq	$32, %rsp
	movq	%rax, %rdi
	testb	$1, %dil
	je	.LBB213_54
# %bb.35:                               # %"$21"
                                        #   in Loop: Header=BB213_34 Depth=1
	movq	(%rsi), %rax
	addq	$16, %rax
	cmpq	%rbx, %rax
	jbe	.LBB213_34
# %bb.36:                               # %"$24"
	andq	$-2, %rdi
	jmp	.LBB213_54
.LBB213_37:                             # %"$55"
	movq	(%rdx), %r15
	testb	$6, %r15b
	jne	.LBB213_105
# %bb.38:                               # %"$91"
	movq	8(%rdx), %rdi
	leaq	SymTab+8(%rip), %rbx
	cmpq	%rbx, %r15
	jb	.LBB213_40
# %bb.39:                               # %"$91"
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, %r15
	jbe	.LBB213_104
.LBB213_40:                             # %"$95"
	movq	%rdi, %rdx
	testb	$6, %dl
	jne	.LBB213_102
# %bb.41:                               # %"$97"
	cmpq	%rbx, %rdx
	jb	.LBB213_43
# %bb.42:                               # %"$97"
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, %rdx
	jbe	.LBB213_103
.LBB213_43:                             # %"$101"
	movq	env+8(%rip), %rcx
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rcx, 16(%rbx)
	movq	%rbx, env+8(%rip)
	movq	(%r15), %rax
	movq	%rax, (%rbx)
	movq	%rbx, (%rbp)                    # 8-byte Spill
	movq	%r15, 8(%rbx)
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r12
	leaq	SymTab+8(%rip), %rax
	movq	%rax, (%r12)
	movq	%r12, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r12, env(%rip)
	movq	(%rdx), %rcx
	movq	env+8(%rip), %rbx
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rcx, (%rsi)
	movq	%rsi, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	%rbx, 16(%rsi)
	movq	%rsi, -8(%rbp)                  # 8-byte Spill
	movq	%rsi, env+8(%rip)
	movq	(%r13), %rcx
	movq	8(%r13), %rsi
	testb	$6, %cl
	jne	.LBB213_77
# %bb.44:                               # %"$103"
	testb	$8, %cl
	jne	.LBB213_76
# %bb.45:                               # %"$105"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB213_77
.LBB213_46:                             # %"$49"
	movq	(%rbx), %rbx
.LBB213_47:                             # %"$45"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%rbx, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r15, env(%rip)
	movq	$18, (%rsi)
	testb	$15, %bl
	jne	.LBB213_50
	.p2align	4, 0x90
.LBB213_48:                             # %"$51"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rbx), %rax
	movq	8(%rbx), %rbx
	movq	%rax, (%r13)
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	loop1
	addq	$32, %rsp
	movq	%rax, %rdi
	testb	$1, %dil
	je	.LBB213_51
# %bb.49:                               # %"$54"
                                        #   in Loop: Header=BB213_48 Depth=1
	addq	$16, (%rsi)
	testb	$15, %bl
	je	.LBB213_48
.LBB213_50:                             # %"$53"
	andq	$-2, %rdi
.LBB213_51:                             # %"$52"
	movq	(%r12), %rax
	movq	%rax, (%r13)
	movq	8(%r15), %rax
	movq	%rax, env(%rip)
	movq	(%rbp), %r12                    # 8-byte Reload
.LBB213_54:                             # %"$18"
	movq	(%r12), %rax
	movq	%rax, (%rsi)
.LBB213_55:                             # %"$2"
	movq	16(%r12), %rax
	movq	%rax, env+8(%rip)
	movq	%rdi, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB213_56:                             # %"$67"
	movq	(%rax), %rax
.LBB213_57:                             # %"$63"
	movq	%rsi, %r13
	movq	%rax, (%rsi)
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%r12, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r15, env(%rip)
	movq	%r12, %rdi
	jmp	.LBB213_60
	.p2align	4, 0x90
.LBB213_58:                             # %"$82"
                                        #   in Loop: Header=BB213_60 Depth=1
	testb	$6, %cl
	je	.LBB213_72
.LBB213_59:                             # %"$81"
                                        #   in Loop: Header=BB213_60 Depth=1
	movq	%rcx, (%r13)
.LBB213_60:                             # %"$68"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB213_69 Depth 2
	movq	(%rbx), %rax
	testb	$6, %al
	jne	.LBB213_64
# %bb.61:                               # %"$70"
                                        #   in Loop: Header=BB213_60 Depth=1
	testb	$8, %al
	jne	.LBB213_63
# %bb.62:                               # %"$72"
                                        #   in Loop: Header=BB213_60 Depth=1
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB213_64
.LBB213_63:                             # %"$73"
                                        #   in Loop: Header=BB213_60 Depth=1
	movq	(%rax), %rax
	.p2align	4, 0x90
.LBB213_64:                             # %"$69"
                                        #   in Loop: Header=BB213_60 Depth=1
	cmpq	%r12, %rax
	je	.LBB213_75
# %bb.65:                               # %"$74"
                                        #   in Loop: Header=BB213_60 Depth=1
	movq	%rax, SymTab+440(%rip)
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	loop1
	addq	$32, %rsp
	movq	%rax, %rdi
	testb	$1, %dil
	je	.LBB213_75
# %bb.66:                               # %"$76"
                                        #   in Loop: Header=BB213_60 Depth=1
	andq	$-2, %rdi
	movq	%rdi, (%r15)
	movq	8(%rbx), %rax
	testb	$15, %al
	jne	.LBB213_60
# %bb.67:                               # %"$79.preheader"
                                        #   in Loop: Header=BB213_60 Depth=1
	movq	(%rax), %rcx
	movq	8(%rax), %rsi
	jmp	.LBB213_69
	.p2align	4, 0x90
.LBB213_68:                             # %"$88"
                                        #   in Loop: Header=BB213_69 Depth=2
	movq	(%rsi), %rcx
	movq	8(%rsi), %rsi
.LBB213_69:                             # %"$79.preheader"
                                        #   Parent Loop BB213_60 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	testb	$15, %sil
	jne	.LBB213_58
# %bb.70:                               # %"$80"
                                        #   in Loop: Header=BB213_69 Depth=2
	testb	$15, %cl
	jne	.LBB213_68
# %bb.71:                               # %"$89"
                                        #   in Loop: Header=BB213_69 Depth=2
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	jmp	.LBB213_68
.LBB213_72:                             # %"$84"
                                        #   in Loop: Header=BB213_60 Depth=1
	testb	$8, %cl
	jne	.LBB213_74
# %bb.73:                               # %"$86"
                                        #   in Loop: Header=BB213_60 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB213_59
.LBB213_74:                             # %"$87"
                                        #   in Loop: Header=BB213_60 Depth=1
	movq	(%rcx), %rcx
	movq	%rcx, (%r13)
	jmp	.LBB213_60
.LBB213_75:                             # %"$75"
	movq	8(%r15), %rax
	movq	%rax, env(%rip)
	movq	(%rbp), %r12                    # 8-byte Reload
	movq	(%r12), %rax
	movq	%rax, (%r13)
	jmp	.LBB213_55
.LBB213_76:                             # %"$106"
	movq	(%rcx), %rcx
.LBB213_77:                             # %"$102"
	movq	%rdi, %r13
	movq	env(%rip), %rdx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rcx, (%rbx)
	movq	%rbx, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	%rbx, env(%rip)
	movq	%rcx, (%rdi)
	movl	$18, %eax
	leaq	SymTab+8(%rip), %rbx
	movq	%rbx, %rdi
	jmp	.LBB213_82
	.p2align	4, 0x90
.LBB213_78:                             # %"$121"
                                        #   in Loop: Header=BB213_82 Depth=1
	testb	$6, %cl
	je	.LBB213_94
# %bb.79:                               #   in Loop: Header=BB213_82 Depth=1
	leaq	SymTab+8(%rip), %rbx
.LBB213_80:                             # %"$120"
                                        #   in Loop: Header=BB213_82 Depth=1
	movq	%rcx, (%r13)
.LBB213_81:                             # %"$117"
                                        #   in Loop: Header=BB213_82 Depth=1
	movq	(%r15), %rax
	addq	$16, %rax
.LBB213_82:                             # %"$107"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB213_91 Depth 2
	movq	%rax, (%r15)
	movq	(%rsi), %rax
	testb	$6, %al
	jne	.LBB213_86
# %bb.83:                               # %"$109"
                                        #   in Loop: Header=BB213_82 Depth=1
	testb	$8, %al
	jne	.LBB213_85
# %bb.84:                               # %"$111"
                                        #   in Loop: Header=BB213_82 Depth=1
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB213_86
.LBB213_85:                             # %"$112"
                                        #   in Loop: Header=BB213_82 Depth=1
	movq	(%rax), %rax
	.p2align	4, 0x90
.LBB213_86:                             # %"$108"
                                        #   in Loop: Header=BB213_82 Depth=1
	cmpq	%rbx, %rax
	je	.LBB213_97
# %bb.87:                               # %"$113"
                                        #   in Loop: Header=BB213_82 Depth=1
	movq	%rax, SymTab+440(%rip)
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	loop1
	addq	$32, %rsp
	movq	%rax, %rdi
	testb	$1, %dil
	je	.LBB213_97
# %bb.88:                               # %"$115"
                                        #   in Loop: Header=BB213_82 Depth=1
	andq	$-2, %rdi
	movq	%rdi, (%r12)
	movq	8(%rsi), %rax
	testb	$15, %al
	jne	.LBB213_81
# %bb.89:                               # %"$118.preheader"
                                        #   in Loop: Header=BB213_82 Depth=1
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	jmp	.LBB213_91
	.p2align	4, 0x90
.LBB213_90:                             # %"$127"
                                        #   in Loop: Header=BB213_91 Depth=2
	movq	(%rbx), %rcx
	movq	8(%rbx), %rbx
.LBB213_91:                             # %"$118.preheader"
                                        #   Parent Loop BB213_82 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	testb	$15, %bl
	jne	.LBB213_78
# %bb.92:                               # %"$119"
                                        #   in Loop: Header=BB213_91 Depth=2
	testb	$15, %cl
	jne	.LBB213_90
# %bb.93:                               # %"$128"
                                        #   in Loop: Header=BB213_91 Depth=2
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	jmp	.LBB213_90
.LBB213_94:                             # %"$123"
                                        #   in Loop: Header=BB213_82 Depth=1
	testb	$8, %cl
	leaq	SymTab+8(%rip), %rbx
	jne	.LBB213_96
# %bb.95:                               # %"$125"
                                        #   in Loop: Header=BB213_82 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB213_80
.LBB213_96:                             # %"$126"
                                        #   in Loop: Header=BB213_82 Depth=1
	movq	(%rcx), %rcx
	jmp	.LBB213_80
.LBB213_97:                             # %"$114"
	movq	-8(%rbp), %rax                  # 8-byte Reload
	movq	(%rax), %rax
	movq	%rax, (%r13)
	movq	8(%r12), %rax
	movq	%rax, env(%rip)
	movq	(%rbp), %r12                    # 8-byte Reload
	movq	(%r12), %rax
	movq	%rax, (%r15)
	jmp	.LBB213_55
.LBB213_98:                             # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rdx
	callq	varErr
.LBB213_99:                             # %"$9"
	subq	$32, %rsp
	movq	%rsi, %rdx
	callq	protErr
.LBB213_100:                            # %"$33"
	subq	$32, %rsp
	movq	%r13, %rdx
	callq	varErr
.LBB213_101:                            # %"$37"
	subq	$32, %rsp
	movq	%r13, %rdx
	callq	protErr
.LBB213_102:                            # %"$57"
	subq	$32, %rsp
	callq	varErr
.LBB213_103:                            # %"$61"
	subq	$32, %rsp
	callq	protErr
.LBB213_104:                            # %"$94"
	subq	$32, %rsp
	movq	%r15, %rdx
	callq	protErr
.LBB213_105:                            # %"$90"
	subq	$32, %rsp
	movq	%r15, %rdx
	callq	varErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _with;
	.scl	2;
	.type	32;
	.endef
	.globl	_with                           # -- Begin function _with
	.p2align	4, 0x90
_with:                                  # @_with
.seh_proc _with
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rdx
	movq	8(%rax), %rbx
	testb	$6, %dl
	jne	.LBB214_4
# %bb.1:                                # %"$3"
	testb	$8, %dl
	jne	.LBB214_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rdx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdx
	jmp	.LBB214_4
.LBB214_2:                              # %"$6"
	movq	(%rdx), %rdx
.LBB214_4:                              # %"$2"
	testb	$6, %dl
	jne	.LBB214_17
# %bb.5:                                # %"$8"
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rdx
	je	.LBB214_16
# %bb.6:                                # %"$10"
	leaq	SymTab+488(%rip), %r8
	movq	SymTab+488(%rip), %rcx
	movq	env+8(%rip), %rdi
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rcx, (%rsi)
	movq	%rsi, %rax
	orq	$8, %rax
	movq	%r8, (%rax)
	movq	%rdi, 16(%rsi)
	movq	%rsi, env+8(%rip)
	movq	%rdx, SymTab+488(%rip)
	movq	(%rbx), %rcx
	movq	8(%rbx), %rdi
	jmp	.LBB214_7
	.p2align	4, 0x90
.LBB214_13:                             # %"$21"
                                        #   in Loop: Header=BB214_7 Depth=1
	movq	(%rdi), %rcx
	movq	8(%rdi), %rdi
.LBB214_7:                              # %"$10"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %dil
	jne	.LBB214_8
# %bb.11:                               # %"$13"
                                        #   in Loop: Header=BB214_7 Depth=1
	testb	$15, %cl
	jne	.LBB214_13
# %bb.12:                               # %"$22"
                                        #   in Loop: Header=BB214_7 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	jmp	.LBB214_13
.LBB214_8:                              # %"$15"
	testb	$6, %cl
	jne	.LBB214_15
# %bb.9:                                # %"$17"
	testb	$8, %cl
	jne	.LBB214_10
# %bb.14:                               # %"$19"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB214_15
.LBB214_10:                             # %"$20"
	movq	(%rcx), %rcx
.LBB214_15:                             # %"$14"
	movq	(%rsi), %rax
	movq	%rax, SymTab+488(%rip)
	movq	16(%rsi), %rax
	movq	%rax, env+8(%rip)
.LBB214_16:                             # %"$11"
	movq	%rcx, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%rbp
	retq
.LBB214_17:                             # %"$7"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	varErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _bind;
	.scl	2;
	.type	32;
	.endef
	.globl	_bind                           # -- Begin function _bind
	.p2align	4, 0x90
_bind:                                  # @_bind
.seh_proc _bind
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %r13
	movq	8(%rax), %r15
	testb	$6, %r13b
	jne	.LBB215_4
# %bb.1:                                # %"$3"
	testb	$8, %r13b
	jne	.LBB215_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%r13, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r13
	jmp	.LBB215_4
.LBB215_2:                              # %"$6"
	movq	(%r13), %r13
.LBB215_4:                              # %"$2"
	testb	$6, %r13b
	jne	.LBB215_51
# %bb.5:                                # %"$8"
	leaq	SymTab+8(%rip), %r9
	cmpq	%r9, %r13
	jne	.LBB215_15
# %bb.6:                                # %"$12.preheader"
	movq	(%r15), %rcx
	movq	8(%r15), %rsi
	jmp	.LBB215_7
	.p2align	4, 0x90
.LBB215_14:                             # %"$21"
                                        #   in Loop: Header=BB215_7 Depth=1
	movq	(%rsi), %rcx
	movq	8(%rsi), %rsi
.LBB215_7:                              # %"$12.preheader"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %sil
	jne	.LBB215_8
# %bb.12:                               # %"$13"
                                        #   in Loop: Header=BB215_7 Depth=1
	testb	$15, %cl
	jne	.LBB215_14
# %bb.13:                               # %"$22"
                                        #   in Loop: Header=BB215_7 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	jmp	.LBB215_14
.LBB215_15:                             # %"$10"
	testb	$8, %r13b
	jne	.LBB215_16
# %bb.28:                               # %"$23"
	movq	%rsi, %rcx
	movq	env+8(%rip), %r14
	leaq	SymTab+280(%rip), %r8
	movq	%r14, %r12
	jmp	.LBB215_29
	.p2align	4, 0x90
.LBB215_33:                             # %"$49"
                                        #   in Loop: Header=BB215_29 Depth=1
	movq	(%rdx), %rdi
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rdi, (%rbx)
	movq	%rbx, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	%r12, 16(%rbx)
	movq	%rbx, env+8(%rip)
	movq	%rbx, %r12
	testb	$15, %r13b
	jne	.LBB215_39
.LBB215_29:                             # %"$40"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rdx
	movq	8(%r13), %r13
	testb	$6, %dl
	jne	.LBB215_53
# %bb.30:                               # %"$42"
                                        #   in Loop: Header=BB215_29 Depth=1
	testb	$8, %dl
	jne	.LBB215_31
# %bb.34:                               # %"$44"
                                        #   in Loop: Header=BB215_29 Depth=1
	movq	(%rdx), %rdi
	testb	$6, %dil
	jne	.LBB215_55
# %bb.35:                               # %"$51"
                                        #   in Loop: Header=BB215_29 Depth=1
	cmpq	%r9, %rdi
	jb	.LBB215_37
# %bb.36:                               # %"$51"
                                        #   in Loop: Header=BB215_29 Depth=1
	cmpq	%r8, %rdi
	jbe	.LBB215_56
.LBB215_37:                             # %"$55"
                                        #   in Loop: Header=BB215_29 Depth=1
	movq	(%rdi), %rbx
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rbx, (%rsi)
	movq	%rsi, %rax
	orq	$8, %rax
	movq	%rdi, (%rax)
	movq	%r12, 16(%rsi)
	movq	%rsi, env+8(%rip)
	movq	8(%rdx), %rax
	movq	%rax, (%rdi)
	movq	%rsi, %r12
	testb	$15, %r13b
	je	.LBB215_29
	jmp	.LBB215_39
	.p2align	4, 0x90
.LBB215_31:                             # %"$43"
                                        #   in Loop: Header=BB215_29 Depth=1
	cmpq	%r9, %rdx
	jb	.LBB215_33
# %bb.32:                               # %"$43"
                                        #   in Loop: Header=BB215_29 Depth=1
	cmpq	%r8, %rdx
	ja	.LBB215_33
# %bb.54:                               # %"$48"
	subq	$32, %rsp
	callq	protErr
.LBB215_8:                              # %"$15"
	testb	$6, %cl
	jne	.LBB215_50
# %bb.9:                                # %"$17"
	testb	$8, %cl
	jne	.LBB215_10
# %bb.11:                               # %"$19"
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	evList                          # TAILCALL
.LBB215_16:                             # %"$24"
	cmpq	%r9, %r13
	jb	.LBB215_18
# %bb.17:                               # %"$24"
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, %r13
	jbe	.LBB215_52
.LBB215_18:                             # %"$28"
	movq	(%r13), %rcx
	movq	env+8(%rip), %rdx
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rcx, (%rdi)
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%r13, (%rax)
	movq	%rdx, 16(%rdi)
	movq	%rdi, env+8(%rip)
	movq	(%r15), %rcx
	movq	8(%r15), %rbx
	jmp	.LBB215_19
	.p2align	4, 0x90
.LBB215_25:                             # %"$38"
                                        #   in Loop: Header=BB215_19 Depth=1
	movq	(%rbx), %rcx
	movq	8(%rbx), %rbx
.LBB215_19:                             # %"$28"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %bl
	jne	.LBB215_20
# %bb.23:                               # %"$30"
                                        #   in Loop: Header=BB215_19 Depth=1
	testb	$15, %cl
	jne	.LBB215_25
# %bb.24:                               # %"$39"
                                        #   in Loop: Header=BB215_19 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	jmp	.LBB215_25
.LBB215_20:                             # %"$32"
	testb	$6, %cl
	jne	.LBB215_27
# %bb.21:                               # %"$34"
	testb	$8, %cl
	jne	.LBB215_22
# %bb.26:                               # %"$36"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB215_27
.LBB215_39:                             # %"$58.preheader"
	movq	(%r15), %rcx
	movq	8(%r15), %rdi
	jmp	.LBB215_40
	.p2align	4, 0x90
.LBB215_46:                             # %"$67"
                                        #   in Loop: Header=BB215_40 Depth=1
	movq	(%rdi), %rcx
	movq	8(%rdi), %rdi
.LBB215_40:                             # %"$58.preheader"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %dil
	jne	.LBB215_41
# %bb.44:                               # %"$59"
                                        #   in Loop: Header=BB215_40 Depth=1
	testb	$15, %cl
	jne	.LBB215_46
# %bb.45:                               # %"$68"
                                        #   in Loop: Header=BB215_40 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	jmp	.LBB215_46
.LBB215_41:                             # %"$61"
	testb	$6, %cl
	jne	.LBB215_48
# %bb.42:                               # %"$63"
	testb	$8, %cl
	jne	.LBB215_43
# %bb.47:                               # %"$65"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB215_48
.LBB215_10:                             # %"$20"
	movq	(%rcx), %rcx
	jmp	.LBB215_50
.LBB215_22:                             # %"$37"
	movq	(%rcx), %rcx
.LBB215_27:                             # %"$31"
	movq	(%rdi), %rax
	movq	%rax, (%r13)
	movq	16(%rdi), %rax
	movq	%rax, env+8(%rip)
	jmp	.LBB215_50
.LBB215_43:                             # %"$66"
	movq	(%rcx), %rcx
	.p2align	4, 0x90
.LBB215_48:                             # %"$69"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r12), %rax
	movq	8(%r12), %rdx
	movq	%rax, (%rdx)
	movq	16(%r12), %r12
	cmpq	%r12, %r14
	jne	.LBB215_48
# %bb.49:                               # %"$71"
	movq	%r14, env+8(%rip)
.LBB215_50:                             # %"$7"
	movq	%rcx, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB215_53:                             # %"$41"
	subq	$32, %rsp
	movq	%r13, %rdx
	callq	argErr
.LBB215_55:                             # %"$50"
	subq	$32, %rsp
	movq	%rdi, %rdx
	callq	varErr
.LBB215_56:                             # %"$54"
	subq	$32, %rsp
	movq	%rdi, %rdx
	callq	protErr
.LBB215_51:                             # %"$9"
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%r13, %rdx
	callq	argErr
.LBB215_52:                             # %"$27"
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%r13, %rdx
	callq	protErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _job;
	.scl	2;
	.type	32;
	.endef
	.globl	_job                            # -- Begin function _job
	.p2align	4, 0x90
_job:                                   # @_job
.seh_proc _job
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %r14
	movq	8(%rcx), %rax
	movq	(%rax), %r10
	movq	8(%rax), %r15
	testb	$6, %r10b
	jne	.LBB216_4
# %bb.1:                                # %"$3"
	testb	$8, %r10b
	jne	.LBB216_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%r10, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r10
	jmp	.LBB216_4
.LBB216_2:                              # %"$6"
	movq	(%r10), %r10
.LBB216_4:                              # %"$2"
	movq	env(%rip), %rdx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r12
	movq	%r10, (%r12)
	movq	%r12, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	%r12, env(%rip)
	movq	env+8(%rip), %r13
	testb	$15, %r10b
	movq	%r13, %rbx
	je	.LBB216_5
.LBB216_8:                              # %"$16.preheader"
	movq	(%r15), %rcx
	movq	8(%r15), %rsi
	jmp	.LBB216_9
	.p2align	4, 0x90
.LBB216_18:                             # %"$25"
                                        #   in Loop: Header=BB216_9 Depth=1
	movq	(%rsi), %rcx
	movq	8(%rsi), %rsi
.LBB216_9:                              # %"$16.preheader"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %sil
	jne	.LBB216_10
# %bb.16:                               # %"$17"
                                        #   in Loop: Header=BB216_9 Depth=1
	testb	$15, %cl
	jne	.LBB216_18
# %bb.17:                               # %"$26"
                                        #   in Loop: Header=BB216_9 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	jmp	.LBB216_18
.LBB216_10:                             # %"$19"
	testb	$6, %cl
	jne	.LBB216_21
# %bb.11:                               # %"$21"
	testb	$8, %cl
	jne	.LBB216_12
# %bb.19:                               # %"$23"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB216_21
.LBB216_5:
	leaq	SymTab+8(%rip), %r9
	leaq	SymTab+280(%rip), %r8
	movq	%r13, %rsi
	jmp	.LBB216_6
	.p2align	4, 0x90
.LBB216_15:                             # %"$15"
                                        #   in Loop: Header=BB216_6 Depth=1
	movq	(%rdx), %rcx
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rcx, (%rbx)
	movq	%rbx, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	%rsi, 16(%rbx)
	movq	%rdi, 24(%rbx)
	movq	%rbx, env+8(%rip)
	movq	8(%rdi), %rax
	movq	%rax, (%rdx)
	testb	$15, %r10b
	movq	%rbx, %rsi
	jne	.LBB216_8
.LBB216_6:                              # %"$8"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r10), %rdi
	movq	(%rdi), %rdx
	testb	$6, %dl
	jne	.LBB216_7
# %bb.13:                               # %"$11"
                                        #   in Loop: Header=BB216_6 Depth=1
	movq	8(%r10), %r10
	cmpq	%r9, %rdx
	jb	.LBB216_15
# %bb.14:                               # %"$11"
                                        #   in Loop: Header=BB216_6 Depth=1
	cmpq	%r8, %rdx
	ja	.LBB216_15
# %bb.23:                               # %"$14"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	protErr
.LBB216_12:                             # %"$24"
	movq	(%rcx), %rcx
	jmp	.LBB216_21
	.p2align	4, 0x90
.LBB216_20:                             # %"$28"
                                        #   in Loop: Header=BB216_21 Depth=1
	movq	8(%rbx), %rax
	movq	24(%rbx), %rdx
	movq	(%rax), %rdi
	movq	%rdi, 8(%rdx)
	movq	(%rbx), %rdx
	movq	%rdx, (%rax)
	movq	16(%rbx), %rbx
.LBB216_21:                             # %"$28"
                                        # =>This Inner Loop Header: Depth=1
	cmpq	%rbx, %r13
	jne	.LBB216_20
# %bb.22:                               # %"$29"
	movq	%r13, env+8(%rip)
	movq	8(%r12), %rax
	movq	%rax, env(%rip)
	movq	%rcx, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB216_7:                              # %"$10"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	varErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _let;
	.scl	2;
	.type	32;
	.endef
	.globl	_let                            # -- Begin function _let
	.p2align	4, 0x90
_let:                                   # @_let
.seh_proc _let
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$24, %rsp
	.seh_stackalloc 24
	leaq	16(%rsp), %rbp
	.seh_setframe %rbp, 16
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rbx
	movq	8(%rax), %rdi
	testb	$15, %bl
	je	.LBB217_17
# %bb.1:                                # %"$2"
	testb	$6, %bl
	jne	.LBB217_67
# %bb.2:                                # %"$6"
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rbx
	jb	.LBB217_4
# %bb.3:                                # %"$6"
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, %rbx
	jbe	.LBB217_68
.LBB217_4:                              # %"$10"
	movq	(%rbx), %rcx
	movq	env+8(%rip), %rdx
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rcx, (%rsi)
	movq	%rsi, %rax
	orq	$8, %rax
	movq	%rbx, (%rax)
	movq	%rdx, 16(%rsi)
	movq	%rsi, env+8(%rip)
	movq	(%rdi), %rax
	movq	8(%rdi), %rdi
	testb	$6, %al
	jne	.LBB217_8
# %bb.5:                                # %"$12"
	testb	$8, %al
	jne	.LBB217_6
# %bb.7:                                # %"$14"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB217_8
.LBB217_17:                             # %"$3"
	movq	%rdi, -16(%rbp)                 # 8-byte Spill
	movq	%rcx, (%rbp)                    # 8-byte Spill
	movq	env+8(%rip), %r12
	leaq	SymTab+8(%rip), %r13
	leaq	SymTab+280(%rip), %rsi
	movq	%r12, -8(%rbp)                  # 8-byte Spill
	jmp	.LBB217_18
.LBB217_28:                             # %"$40"
                                        #   in Loop: Header=BB217_18 Depth=1
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	.p2align	4, 0x90
.LBB217_29:                             # %"$37"
                                        #   in Loop: Header=BB217_18 Depth=1
	movq	%rax, (%r14)
	movq	%rbx, %r12
.LBB217_54:                             # %"$30"
                                        #   in Loop: Header=BB217_18 Depth=1
	movq	8(%r15), %rbx
	testb	$15, %bl
	jne	.LBB217_55
.LBB217_18:                             # %"$27"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB217_20 Depth 2
                                        #       Child Loop BB217_31 Depth 3
                                        #       Child Loop BB217_39 Depth 3
                                        #         Child Loop BB217_46 Depth 4
	movq	(%rbx), %r14
	movq	8(%rbx), %r15
	testb	$15, %r14b
	je	.LBB217_19
# %bb.22:                               # %"$28"
                                        #   in Loop: Header=BB217_18 Depth=1
	testb	$6, %r14b
	jne	.LBB217_69
# %bb.23:                               # %"$32"
                                        #   in Loop: Header=BB217_18 Depth=1
	cmpq	%r13, %r14
	jb	.LBB217_25
# %bb.24:                               # %"$32"
                                        #   in Loop: Header=BB217_18 Depth=1
	cmpq	%rsi, %r14
	jbe	.LBB217_70
.LBB217_25:                             # %"$36"
                                        #   in Loop: Header=BB217_18 Depth=1
	movq	(%r14), %rcx
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rcx, (%rbx)
	movq	%rbx, %rax
	orq	$8, %rax
	movq	%r14, (%rax)
	movq	%r12, 16(%rbx)
	movq	%rbx, env+8(%rip)
	movq	(%r15), %rax
	testb	$6, %al
	jne	.LBB217_29
# %bb.26:                               # %"$38"
                                        #   in Loop: Header=BB217_18 Depth=1
	testb	$8, %al
	je	.LBB217_28
# %bb.27:                               # %"$41"
                                        #   in Loop: Header=BB217_18 Depth=1
	movq	(%rax), %rax
	jmp	.LBB217_29
	.p2align	4, 0x90
.LBB217_19:                             # %"$42.preheader"
                                        #   in Loop: Header=BB217_18 Depth=1
	xorl	%eax, %eax
.LBB217_20:                             # %"$42"
                                        #   Parent Loop BB217_18 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB217_31 Depth 3
                                        #       Child Loop BB217_39 Depth 3
                                        #         Child Loop BB217_46 Depth 4
	movq	(%r14), %rdx
	testb	$15, %dl
	je	.LBB217_30
# %bb.21:                               #   in Loop: Header=BB217_20 Depth=2
	movq	%rax, %rcx
	jmp	.LBB217_32
	.p2align	4, 0x90
.LBB217_30:                             # %"$44.preheader"
                                        #   in Loop: Header=BB217_20 Depth=2
	movq	%r14, %rdi
	.p2align	4, 0x90
.LBB217_31:                             # %"$44"
                                        #   Parent Loop BB217_18 Depth=1
                                        #     Parent Loop BB217_20 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%r14, %rcx
	movq	%rdx, %r14
	movq	%rax, (%rdi)
	movq	(%rdx), %rdx
	testb	$15, %dl
	movq	%r14, %rdi
	movq	%rcx, %rax
	je	.LBB217_31
.LBB217_32:                             # %"$45"
                                        #   in Loop: Header=BB217_20 Depth=2
	cmpq	%r13, %rdx
	je	.LBB217_37
# %bb.33:                               # %"$46"
                                        #   in Loop: Header=BB217_20 Depth=2
	testb	$6, %dl
	jne	.LBB217_71
# %bb.34:                               # %"$49"
                                        #   in Loop: Header=BB217_20 Depth=2
	cmpq	%r13, %rdx
	jb	.LBB217_36
# %bb.35:                               # %"$49"
                                        #   in Loop: Header=BB217_20 Depth=2
	cmpq	%rsi, %rdx
	jbe	.LBB217_72
.LBB217_36:                             # %"$53"
                                        #   in Loop: Header=BB217_20 Depth=2
	movq	(%rdx), %rbx
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsi, %rdi
	movq	%rsp, %rsi
	movq	%rbx, (%rsi)
	movq	%rsi, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	%r12, 16(%rsi)
	movq	%rsi, env+8(%rip)
	movq	%rsi, %r12
	movq	%rdi, %rsi
.LBB217_37:                             # %"$47"
                                        #   in Loop: Header=BB217_20 Depth=2
	movq	8(%r14), %rdx
	testb	$15, %dl
	je	.LBB217_38
.LBB217_39:                             # %"$55"
                                        #   Parent Loop BB217_18 Depth=1
                                        #     Parent Loop BB217_20 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB217_46 Depth 4
	cmpq	%r13, %rdx
	je	.LBB217_44
# %bb.40:                               # %"$58"
                                        #   in Loop: Header=BB217_39 Depth=3
	testb	$6, %dl
	jne	.LBB217_71
# %bb.41:                               # %"$61"
                                        #   in Loop: Header=BB217_39 Depth=3
	cmpq	%r13, %rdx
	jb	.LBB217_43
# %bb.42:                               # %"$61"
                                        #   in Loop: Header=BB217_39 Depth=3
	cmpq	%rsi, %rdx
	jbe	.LBB217_72
.LBB217_43:                             # %"$65"
                                        #   in Loop: Header=BB217_39 Depth=3
	movq	(%rdx), %rbx
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rbx, (%rdi)
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	%r12, 16(%rdi)
	movq	%rdi, env+8(%rip)
	movq	%rdi, %r12
.LBB217_44:                             # %"$59"
                                        #   in Loop: Header=BB217_39 Depth=3
	testq	%rcx, %rcx
	je	.LBB217_45
	.p2align	4, 0x90
.LBB217_46:                             # %"$68"
                                        #   Parent Loop BB217_18 Depth=1
                                        #     Parent Loop BB217_20 Depth=2
                                        #       Parent Loop BB217_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	testb	$8, %cl
	je	.LBB217_47
# %bb.48:                               # %"$69"
                                        #   in Loop: Header=BB217_46 Depth=4
	movq	%rcx, %rbx
	andq	$-9, %rbx
	movq	8(%rbx), %rcx
	movq	%r14, 8(%rbx)
	testq	%rcx, %rcx
	movq	%rbx, %r14
	jne	.LBB217_46
	jmp	.LBB217_49
	.p2align	4, 0x90
.LBB217_47:                             # %"$71"
                                        #   in Loop: Header=BB217_39 Depth=3
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%r14, (%rcx)
	testb	$15, %dl
	movq	%rcx, %r14
	movq	%rax, %rcx
	jne	.LBB217_39
	.p2align	4, 0x90
.LBB217_38:                             # %"$57"
                                        #   in Loop: Header=BB217_20 Depth=2
	movq	%rcx, 8(%r14)
	movq	%r14, %rax
	orq	$8, %rax
	movq	%rdx, %r14
	jmp	.LBB217_20
.LBB217_45:                             #   in Loop: Header=BB217_18 Depth=1
	movq	%r14, %rbx
	.p2align	4, 0x90
.LBB217_49:                             # %"$-1"
                                        #   in Loop: Header=BB217_18 Depth=1
	movq	(%r15), %rdx
	testb	$6, %dl
	jne	.LBB217_53
# %bb.50:                               # %"$74"
                                        #   in Loop: Header=BB217_18 Depth=1
	testb	$8, %dl
	jne	.LBB217_51
# %bb.52:                               # %"$76"
                                        #   in Loop: Header=BB217_18 Depth=1
	subq	$32, %rsp
	movq	%rdx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdx
	jmp	.LBB217_53
.LBB217_51:                             # %"$77"
                                        #   in Loop: Header=BB217_18 Depth=1
	movq	(%rdx), %rdx
	.p2align	4, 0x90
.LBB217_53:                             # %"$73"
                                        #   in Loop: Header=BB217_18 Depth=1
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	setDestruct
	addq	$32, %rsp
	jmp	.LBB217_54
.LBB217_55:                             # %"$80.preheader"
	movq	-16(%rbp), %rax                 # 8-byte Reload
	movq	(%rax), %rcx
	movq	8(%rax), %rdi
	testb	$15, %dil
	je	.LBB217_60
# %bb.56:
	movq	-8(%rbp), %rsi                  # 8-byte Reload
.LBB217_57:                             # %"$83"
	testb	$6, %cl
	jne	.LBB217_65
# %bb.58:                               # %"$85"
	testb	$8, %cl
	jne	.LBB217_59
# %bb.64:                               # %"$87"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB217_65
.LBB217_60:
	movq	-8(%rbp), %rsi                  # 8-byte Reload
	jmp	.LBB217_61
	.p2align	4, 0x90
.LBB217_63:                             # %"$89"
                                        #   in Loop: Header=BB217_61 Depth=1
	movq	(%rdi), %rcx
	movq	8(%rdi), %rdi
	testb	$15, %dil
	jne	.LBB217_57
.LBB217_61:                             # %"$81"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %cl
	jne	.LBB217_63
# %bb.62:                               # %"$90"
                                        #   in Loop: Header=BB217_61 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	jmp	.LBB217_63
.LBB217_6:                              # %"$15"
	movq	(%rax), %rax
.LBB217_8:                              # %"$11"
	movq	%rax, (%rbx)
	.p2align	4, 0x90
.LBB217_9:                              # %"$11"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rcx
	movq	8(%rdi), %rdi
	testb	$15, %dil
	jne	.LBB217_10
# %bb.13:                               # %"$17"
                                        #   in Loop: Header=BB217_9 Depth=1
	testb	$15, %cl
	jne	.LBB217_9
# %bb.14:                               # %"$26"
                                        #   in Loop: Header=BB217_9 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	jmp	.LBB217_9
.LBB217_10:                             # %"$19"
	testb	$6, %cl
	jne	.LBB217_16
# %bb.11:                               # %"$21"
	testb	$8, %cl
	jne	.LBB217_12
# %bb.15:                               # %"$23"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB217_16
.LBB217_12:                             # %"$24"
	movq	(%rcx), %rcx
.LBB217_16:                             # %"$18"
	movq	(%rsi), %rax
	movq	%rax, (%rbx)
	movq	16(%rsi), %rsi
	jmp	.LBB217_66
.LBB217_59:                             # %"$88"
	movq	(%rcx), %rcx
	.p2align	4, 0x90
.LBB217_65:                             # %"$91"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r12), %rax
	movq	8(%r12), %rdx
	movq	%rax, (%rdx)
	movq	16(%r12), %r12
	cmpq	%r12, %rsi
	jne	.LBB217_65
.LBB217_66:                             # %"$4"
	movq	%rsi, env+8(%rip)
	movq	%rcx, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB217_71:                             # %"$48"
	subq	$32, %rsp
	movq	(%rbp), %rcx                    # 8-byte Reload
	callq	varErr
.LBB217_72:                             # %"$52"
	subq	$32, %rsp
	movq	(%rbp), %rcx                    # 8-byte Reload
	callq	protErr
.LBB217_69:                             # %"$31"
	subq	$32, %rsp
	movq	(%rbp), %rcx                    # 8-byte Reload
	movq	%r14, %rdx
	callq	varErr
.LBB217_70:                             # %"$35"
	subq	$32, %rsp
	movq	(%rbp), %rcx                    # 8-byte Reload
	movq	%r14, %rdx
	callq	protErr
.LBB217_67:                             # %"$5"
	subq	$32, %rsp
	movq	%rbx, %rdx
	callq	varErr
.LBB217_68:                             # %"$9"
	subq	$32, %rsp
	movq	%rbx, %rdx
	callq	protErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _letQ;
	.scl	2;
	.type	32;
	.endef
	.globl	_letQ                           # -- Begin function _letQ
	.p2align	4, 0x90
_letQ:                                  # @_letQ
.seh_proc _letQ
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %r15
	testb	$6, %r15b
	jne	.LBB218_19
# %bb.1:                                # %"$3"
	movq	8(%rax), %r14
	leaq	SymTab+8(%rip), %rdi
	cmpq	%rdi, %r15
	jb	.LBB218_3
# %bb.2:                                # %"$3"
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, %r15
	jbe	.LBB218_20
.LBB218_3:                              # %"$7"
	movq	(%r14), %rcx
	testb	$6, %cl
	jne	.LBB218_7
# %bb.4:                                # %"$9"
	testb	$8, %cl
	jne	.LBB218_5
# %bb.6:                                # %"$11"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
.LBB218_7:                              # %"$8"
	cmpq	%rdi, %rcx
	je	.LBB218_18
.LBB218_8:                              # %"$14"
	movq	(%r15), %rdx
	movq	env+8(%rip), %rdi
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rdx, (%rbx)
	movq	%rbx, %rax
	orq	$8, %rax
	movq	%r15, (%rax)
	movq	%rdi, 16(%rbx)
	movq	%rbx, env+8(%rip)
	movq	%rcx, (%r15)
	movq	8(%r14), %rax
	movq	(%rax), %rdi
	movq	8(%rax), %rsi
	jmp	.LBB218_9
	.p2align	4, 0x90
.LBB218_15:                             # %"$25"
                                        #   in Loop: Header=BB218_9 Depth=1
	movq	(%rsi), %rdi
	movq	8(%rsi), %rsi
.LBB218_9:                              # %"$14"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %sil
	jne	.LBB218_10
# %bb.13:                               # %"$17"
                                        #   in Loop: Header=BB218_9 Depth=1
	testb	$15, %dil
	jne	.LBB218_15
# %bb.14:                               # %"$26"
                                        #   in Loop: Header=BB218_9 Depth=1
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB218_15
.LBB218_10:                             # %"$19"
	testb	$6, %dil
	jne	.LBB218_17
# %bb.11:                               # %"$21"
	testb	$8, %dil
	jne	.LBB218_12
# %bb.16:                               # %"$23"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdi
	jmp	.LBB218_17
.LBB218_5:                              # %"$12"
	movq	(%rcx), %rcx
	cmpq	%rdi, %rcx
	jne	.LBB218_8
	jmp	.LBB218_18
.LBB218_12:                             # %"$24"
	movq	(%rdi), %rdi
.LBB218_17:                             # %"$18"
	movq	(%rbx), %rax
	movq	%rax, (%r15)
	movq	16(%rbx), %rax
	movq	%rax, env+8(%rip)
.LBB218_18:                             # %"$15"
	movq	%rdi, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB218_19:                             # %"$2"
	subq	$32, %rsp
	movq	%r15, %rdx
	callq	varErr
.LBB218_20:                             # %"$6"
	subq	$32, %rsp
	movq	%r15, %rdx
	callq	protErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _use;
	.scl	2;
	.type	32;
	.endef
	.globl	_use                            # -- Begin function _use
	.p2align	4, 0x90
_use:                                   # @_use
.seh_proc _use
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %r8
	testb	$15, %sil
	je	.LBB219_11
# %bb.1:                                # %"$2"
	movq	(%rsi), %rcx
	movq	env+8(%rip), %rbx
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rcx, (%rdi)
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%rsi, (%rax)
	movq	%rbx, 16(%rdi)
	movq	%rdi, env+8(%rip)
	movq	(%r8), %rcx
	movq	8(%r8), %rbx
	jmp	.LBB219_2
	.p2align	4, 0x90
.LBB219_8:                              # %"$14"
                                        #   in Loop: Header=BB219_2 Depth=1
	movq	(%rbx), %rcx
	movq	8(%rbx), %rbx
.LBB219_2:                              # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %bl
	jne	.LBB219_3
# %bb.6:                                # %"$6"
                                        #   in Loop: Header=BB219_2 Depth=1
	testb	$15, %cl
	jne	.LBB219_8
# %bb.7:                                # %"$15"
                                        #   in Loop: Header=BB219_2 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	jmp	.LBB219_8
.LBB219_3:                              # %"$8"
	testb	$6, %cl
	jne	.LBB219_10
# %bb.4:                                # %"$10"
	testb	$8, %cl
	jne	.LBB219_5
# %bb.9:                                # %"$12"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB219_10
.LBB219_11:                             # %"$3"
	movq	env+8(%rip), %r14
	movq	%r14, %rcx
	.p2align	4, 0x90
.LBB219_12:                             # %"$16"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rdx
	movq	(%rdx), %rdi
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rdi, (%rbx)
	movq	%rbx, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	%rcx, 16(%rbx)
	movq	%rbx, env+8(%rip)
	movq	8(%rsi), %rsi
	testb	$15, %sil
	movq	%rbx, %rcx
	je	.LBB219_12
# %bb.13:                               # %"$19.preheader"
	movq	(%r8), %rcx
	movq	8(%r8), %rsi
	jmp	.LBB219_14
	.p2align	4, 0x90
.LBB219_20:                             # %"$28"
                                        #   in Loop: Header=BB219_14 Depth=1
	movq	(%rsi), %rcx
	movq	8(%rsi), %rsi
.LBB219_14:                             # %"$19.preheader"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %sil
	jne	.LBB219_15
# %bb.18:                               # %"$20"
                                        #   in Loop: Header=BB219_14 Depth=1
	testb	$15, %cl
	jne	.LBB219_20
# %bb.19:                               # %"$29"
                                        #   in Loop: Header=BB219_14 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	jmp	.LBB219_20
.LBB219_15:                             # %"$22"
	testb	$6, %cl
	jne	.LBB219_22
# %bb.16:                               # %"$24"
	testb	$8, %cl
	jne	.LBB219_17
# %bb.21:                               # %"$26"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB219_22
.LBB219_5:                              # %"$13"
	movq	(%rcx), %rcx
.LBB219_10:                             # %"$7"
	movq	(%rdi), %rax
	movq	%rax, (%rsi)
	movq	16(%rdi), %r14
	jmp	.LBB219_23
.LBB219_17:                             # %"$27"
	movq	(%rcx), %rcx
	.p2align	4, 0x90
.LBB219_22:                             # %"$30"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rbx), %rax
	movq	8(%rbx), %rdx
	movq	%rax, (%rdx)
	movq	16(%rbx), %rbx
	cmpq	%rbx, %r14
	jne	.LBB219_22
.LBB219_23:                             # %"$4"
	movq	%r14, env+8(%rip)
	movq	%rcx, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _buf;
	.scl	2;
	.type	32;
	.endef
	.globl	_buf                            # -- Begin function _buf
	.p2align	4, 0x90
_buf:                                   # @_buf
.seh_proc _buf
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rdi
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	testb	$6, %sil
	jne	.LBB220_23
# %bb.1:                                # %"$3"
	movq	8(%rax), %rax
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rsi
	jb	.LBB220_3
# %bb.2:                                # %"$3"
	leaq	SymTab+280(%rip), %rcx
	cmpq	%rcx, %rsi
	jbe	.LBB220_24
.LBB220_3:                              # %"$7"
	movq	(%rax), %rdx
	movq	8(%rax), %r14
	testb	$6, %dl
	jne	.LBB220_7
# %bb.4:                                # %"$9"
	testb	$8, %dl
	jne	.LBB220_5
# %bb.6:                                # %"$11"
	subq	$32, %rsp
	movq	%rdx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdx
	jmp	.LBB220_7
.LBB220_5:                              # %"$12"
	movq	(%rdx), %rdx
.LBB220_7:                              # %"$8"
	testb	$2, %dl
	je	.LBB220_25
# %bb.8:                                # %"$14"
	movq	(%rsi), %rcx
	movq	env+8(%rip), %rbx
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rcx, (%rdi)
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%rsi, (%rax)
	movq	%rbx, 16(%rdi)
	movq	%rdi, env+8(%rip)
	shrq	$4, %rdx
	addq	$15, %rdx
	andq	$-16, %rdx
	movq	%rdx, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rbx, %rax
	shrq	$60, %rax
	jne	.LBB220_9
# %bb.12:                               # %"$16"
	shlq	$4, %rbx
	orq	$2, %rbx
	movq	%rbx, %rax
	jmp	.LBB220_13
.LBB220_9:                              # %"$15"
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	jne	.LBB220_11
# %bb.10:                               # %"$2.i"
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rax
.LBB220_11:                             # %boxNum.exit
	movq	(%rax), %rcx
	movq	%rcx, ($Avail)(%rip)
	movq	%rbx, (%rax)
	movq	$2, 8(%rax)
	addq	$4, %rax
.LBB220_13:                             # %"$17"
	movq	%rax, (%rsi)
	movq	(%r14), %rcx
	movq	8(%r14), %rbx
	jmp	.LBB220_14
	.p2align	4, 0x90
.LBB220_20:                             # %"$27"
                                        #   in Loop: Header=BB220_14 Depth=1
	movq	(%rbx), %rcx
	movq	8(%rbx), %rbx
.LBB220_14:                             # %"$17"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %bl
	jne	.LBB220_15
# %bb.18:                               # %"$19"
                                        #   in Loop: Header=BB220_14 Depth=1
	testb	$15, %cl
	jne	.LBB220_20
# %bb.19:                               # %"$28"
                                        #   in Loop: Header=BB220_14 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	jmp	.LBB220_20
.LBB220_15:                             # %"$21"
	testb	$6, %cl
	jne	.LBB220_22
# %bb.16:                               # %"$23"
	testb	$8, %cl
	jne	.LBB220_17
# %bb.21:                               # %"$25"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB220_22
.LBB220_17:                             # %"$26"
	movq	(%rcx), %rcx
.LBB220_22:                             # %"$20"
	movq	(%rdi), %rax
	movq	%rax, (%rsi)
	movq	16(%rdi), %rax
	movq	%rax, env+8(%rip)
	movq	%rcx, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	retq
.LBB220_23:                             # %"$2"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	varErr
.LBB220_24:                             # %"$6"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	protErr
.LBB220_25:                             # %"$13"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	cntErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _catch;
	.scl	2;
	.type	32;
	.endef
	.globl	_catch                          # -- Begin function _catch
	.p2align	4, 0x90
_catch:                                 # @_catch
.seh_proc _catch
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rcx
	movl	$231, %eax
	addq	JmpBufSize(%rip), %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdi
	testb	$6, %al
	jne	.LBB221_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB221_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB221_4
.LBB221_2:                              # %"$6"
	movq	(%rax), %rax
.LBB221_4:                              # %"$2"
	movq	%rax, 8(%rsi)
	leaq	env(%rip), %rdx
	movq	env+24(%rip), %rax
	movq	%rax, (%rsi)
	movq	%rsi, env+24(%rip)
	movq	$2, 16(%rsi)
	movq	($Current)(%rip), %rax
	movq	%rax, 24(%rsi)
	leaq	32(%rsi), %rcx
	subq	$32, %rsp
	movl	$144, %r8d
	callq	memcpy
	addq	$32, %rsp
	movq	gcData(%rip), %rax
	movq	%rax, 176(%rsi)
	movq	gcData+8(%rip), %rax
	movq	%rax, 184(%rsi)
	movq	gcData+16(%rip), %rax
	movq	%rax, 192(%rsi)
	movq	SymTab+112(%rip), %rax
	movq	%rax, 200(%rsi)
	movq	SymTab+120(%rip), %rax
	movq	%rax, 208(%rsi)
	movq	%rsi, %rcx
	addq	$216, %rcx
	subq	$32, %rsp
	callq	setjmp
	addq	$32, %rsp
	testl	%eax, %eax
	je	.LBB221_5
# %bb.12:                               # %"$7"
	movq	($Ret)(%rip), %rcx
	jmp	.LBB221_13
	.p2align	4, 0x90
.LBB221_10:                             # %"$11"
                                        #   in Loop: Header=BB221_5 Depth=1
	testb	$15, %cl
	jne	.LBB221_5
# %bb.11:                               # %"$20"
                                        #   in Loop: Header=BB221_5 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
.LBB221_5:                              # %"$10.preheader"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rcx
	movq	8(%rdi), %rdi
	testb	$15, %dil
	je	.LBB221_10
# %bb.6:                                # %"$13"
	testb	$6, %cl
	jne	.LBB221_13
# %bb.7:                                # %"$15"
	testb	$8, %cl
	jne	.LBB221_8
# %bb.9:                                # %"$17"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB221_13
.LBB221_8:                              # %"$18"
	movq	(%rcx), %rcx
.LBB221_13:                             # %"$9"
	movq	(%rsi), %rax
	movq	%rax, env+24(%rip)
	movq	%rcx, %rax
	movq	%rbp, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _throw;
	.scl	2;
	.type	32;
	.endef
	.globl	_throw                          # -- Begin function _throw
	.p2align	4, 0x90
_throw:                                 # @_throw
.seh_proc _throw
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %r14
	movq	8(%rcx), %rax
	movq	(%rax), %rdi
	movq	8(%rax), %rsi
	testb	$6, %dil
	jne	.LBB222_4
# %bb.1:                                # %"$3"
	testb	$8, %dil
	jne	.LBB222_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdi
	jmp	.LBB222_4
.LBB222_2:                              # %"$6"
	movq	(%rdi), %rdi
.LBB222_4:                              # %"$2"
	movq	env(%rip), %rdx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rcx
	movq	%rdi, (%rcx)
	movq	%rcx, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	%rcx, env(%rip)
	movq	(%rsi), %rbx
	testb	$6, %bl
	jne	.LBB222_8
# %bb.5:                                # %"$8"
	testb	$8, %bl
	jne	.LBB222_6
# %bb.7:                                # %"$10"
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rbx
	movq	env(%rip), %rcx
	jmp	.LBB222_8
.LBB222_6:                              # %"$11"
	movq	(%rbx), %rbx
.LBB222_8:                              # %"$7"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rbx, (%rax)
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%rcx, (%rdx)
	movq	%rax, env(%rip)
	movq	env+24(%rip), %rsi
	testq	%rsi, %rsi
	je	.LBB222_13
# %bb.9:                                # %"$13.preheader"
	leaq	SymTab+280(%rip), %rax
	.p2align	4, 0x90
.LBB222_10:                             # %"$13"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rsi), %rcx
	cmpq	%rax, %rcx
	je	.LBB222_14
# %bb.11:                               # %"$13"
                                        #   in Loop: Header=BB222_10 Depth=1
	cmpq	%rcx, %rdi
	je	.LBB222_14
# %bb.12:                               # %"$18"
                                        #   in Loop: Header=BB222_10 Depth=1
	movq	(%rsi), %rsi
	testq	%rsi, %rsi
	jne	.LBB222_10
.LBB222_13:                             # %"$14"
	subq	$32, %rsp
	leaq	.L$73(%rip), %r8
	movq	%r14, %rcx
	movq	%rdi, %rdx
	xorl	%r9d, %r9d
	callq	err
.LBB222_14:                             # %"$17"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	unwind
	addq	$32, %rsp
	movq	%rbx, ($Ret)(%rip)
	addq	$216, %rsi
	subq	$32, %rsp
	movq	%rsi, %rcx
	movl	$1, %edx
	callq	longjmp
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _finally;
	.scl	2;
	.type	32;
	.endef
	.globl	_finally                        # -- Begin function _finally
	.p2align	4, 0x90
_finally:                               # @_finally
.seh_proc _finally
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rcx
	movl	$231, %eax
	addq	JmpBufSize(%rip), %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	$0, 8(%rdi)
	leaq	env(%rip), %rdx
	movq	env+24(%rip), %rax
	movq	%rax, (%rdi)
	movq	%rdi, env+24(%rip)
	movq	(%rcx), %rax
	movq	8(%rcx), %rbx
	movq	%rax, 16(%rdi)
	movq	($Current)(%rip), %rax
	movq	%rax, 24(%rdi)
	leaq	32(%rdi), %rcx
	subq	$32, %rsp
	movl	$144, %r8d
	callq	memcpy
	addq	$32, %rsp
	movq	gcData(%rip), %rax
	movq	%rax, 176(%rdi)
	movq	gcData+8(%rip), %rax
	movq	%rax, 184(%rdi)
	movq	gcData+16(%rip), %rax
	movq	%rax, 192(%rdi)
	movq	SymTab+112(%rip), %rax
	movq	%rax, 200(%rdi)
	movq	SymTab+120(%rip), %rax
	movq	%rax, 208(%rdi)
	.p2align	4, 0x90
.LBB223_1:                              # %"$1"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rbx), %rsi
	movq	8(%rbx), %rbx
	testb	$15, %bl
	jne	.LBB223_2
# %bb.5:                                # %"$3"
                                        #   in Loop: Header=BB223_1 Depth=1
	testb	$15, %sil
	jne	.LBB223_1
# %bb.6:                                # %"$12"
                                        #   in Loop: Header=BB223_1 Depth=1
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB223_1
.LBB223_2:                              # %"$5"
	testb	$6, %sil
	jne	.LBB223_8
# %bb.3:                                # %"$7"
	testb	$8, %sil
	jne	.LBB223_4
# %bb.7:                                # %"$9"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB223_8
.LBB223_4:                              # %"$10"
	movq	(%rsi), %rsi
.LBB223_8:                              # %"$4"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rsi, (%rbx)
	movq	%rbx, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rbx, env(%rip)
	movq	16(%rdi), %rcx
	testb	$14, %cl
	jne	.LBB223_10
# %bb.9:                                # %"$16"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
.LBB223_10:                             # %"$13"
	movq	(%rdi), %rax
	movq	%rax, env+24(%rip)
	movq	8(%rbx), %rax
	movq	%rax, env(%rip)
	movq	%rsi, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _co;
	.scl	2;
	.type	32;
	.endef
	.globl	_co                             # -- Begin function _co
	.p2align	4, 0x90
_co:                                    # @_co
.seh_proc _co
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$24, %rsp
	.seh_stackalloc 24
	leaq	16(%rsp), %rbp
	.seh_setframe %rbp, 16
	.seh_endprologue
	movq	8(%rcx), %rax
	testb	$15, %al
	je	.LBB224_3
# %bb.1:                                # %"$2"
	movq	($Current)(%rip), %rax
	testq	%rax, %rax
	je	.LBB224_12
# %bb.2:                                # %"$5"
	movq	(%rax), %r12
	jmp	.LBB224_51
.LBB224_3:                              # %"$3"
	movq	%rcx, %r15
	movq	(%rax), %r12
	movq	8(%rax), %rdi
	testb	$6, %r12b
	je	.LBB224_4
# %bb.6:                                # %"$8"
	testb	$15, %dil
	je	.LBB224_54
.LBB224_7:                              # %"$14"
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, %r12
	je	.LBB224_68
# %bb.8:                                # %"$46"
	movq	($Coroutines)(%rip), %rbx
	testq	%rbx, %rbx
	je	.LBB224_12
	.p2align	4, 0x90
.LBB224_9:                              # %"$50"
                                        # =>This Inner Loop Header: Depth=1
	cmpq	(%rbx), %r12
	je	.LBB224_13
# %bb.10:                               # %"$51"
                                        #   in Loop: Header=BB224_9 Depth=1
	movq	16(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.LBB224_9
	jmp	.LBB224_51
.LBB224_12:
	leaq	SymTab+8(%rip), %r12
.LBB224_51:                             # %"$4"
	movq	%r12, %rax
.LBB224_52:                             # %"$4"
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB224_4:                              # %"$9"
	testb	$8, %r12b
	jne	.LBB224_53
# %bb.5:                                # %"$11"
	subq	$32, %rsp
	movq	%r12, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r12
	testb	$15, %dil
	jne	.LBB224_7
	jmp	.LBB224_54
.LBB224_13:                             # %"$53"
	movq	88(%rbx), %rdi
	movq	($Stdout)(%rip), %rax
	cmpq	%rax, %rdi
	je	.LBB224_30
# %bb.14:                               # %"$55.lr.ph"
	movq	%rbp, %r14
	jmp	.LBB224_18
.LBB224_15:                             # %waitFile.exit43
                                        #   in Loop: Header=BB224_18 Depth=1
	movslq	(%rbp), %rax
	shlq	$4, %rax
	orq	$2, %rax
	movq	%rax, SymTab+456(%rip)
.LBB224_16:                             # %"$62"
                                        #   in Loop: Header=BB224_18 Depth=1
	movq	(%rdi), %rdi
	movq	($Stdout)(%rip), %rax
.LBB224_17:                             # %"$60"
                                        #   in Loop: Header=BB224_18 Depth=1
	cmpq	%rax, %rdi
	je	.LBB224_30
.LBB224_18:                             # %"$55"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB224_26 Depth 2
	movq	8(%rdi), %rsi
	movl	(%rsi), %ecx
	testl	%ecx, %ecx
	js	.LBB224_17
# %bb.19:                               # %"$58"
                                        #   in Loop: Header=BB224_18 Depth=1
	cmpl	$0, 24(%rdi)
	je	.LBB224_17
# %bb.20:                               # %"$59"
                                        #   in Loop: Header=BB224_18 Depth=1
	subq	$32, %rsp
	callq	close
	addq	$32, %rsp
	movslq	(%rsi), %rax
	cmpl	%eax, ($OutFDs)(%rip)
	jle	.LBB224_25
# %bb.21:                               # %"$2.i31"
                                        #   in Loop: Header=BB224_18 Depth=1
	movq	($OutFiles)(%rip), %rcx
	movq	(%rcx,%rax,8), %rax
	cmpq	($OutFile)(%rip), %rax
	jne	.LBB224_23
# %bb.22:                               # %"$4.i"
                                        #   in Loop: Header=BB224_18 Depth=1
	movq	8(%rcx), %rcx
	movq	%rcx, ($OutFile)(%rip)
.LBB224_23:                             # %"$5.i33"
                                        #   in Loop: Header=BB224_18 Depth=1
	testq	%rax, %rax
	je	.LBB224_25
# %bb.24:                               # %"$6.i34"
                                        #   in Loop: Header=BB224_18 Depth=1
	movl	$-1, (%rax)
.LBB224_25:                             # %closeOutFile.exit
                                        #   in Loop: Header=BB224_18 Depth=1
	movl	24(%rdi), %esi
	cmpl	$2, %esi
	jl	.LBB224_16
	.p2align	4, 0x90
.LBB224_26:                             # %"$61"
                                        #   Parent Loop BB224_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	subq	$32, %rsp
	movl	%esi, %ecx
	movq	%r14, %rdx
	xorl	%r8d, %r8d
	callq	waitpid
	addq	$32, %rsp
	testl	%eax, %eax
	jns	.LBB224_15
# %bb.27:                               # %"$3.i36"
                                        #   in Loop: Header=BB224_26 Depth=2
	subq	$32, %rsp
	callq	gErrno
	addq	$32, %rsp
	cmpl	$2, %eax
	jne	.LBB224_67
# %bb.28:                               # %"$6.i39"
                                        #   in Loop: Header=BB224_26 Depth=2
	cmpl	$0, ($Signal)(%rip)
	je	.LBB224_26
# %bb.29:                               # %"$7.i40"
                                        #   in Loop: Header=BB224_26 Depth=2
	subq	$32, %rsp
	xorl	%ecx, %ecx
	callq	sighandler
	addq	$32, %rsp
	jmp	.LBB224_26
.LBB224_30:                             # %"$56"
	movq	80(%rbx), %rdi
	movq	($Stdin)(%rip), %rax
	cmpq	%rax, %rdi
	je	.LBB224_47
# %bb.31:                               # %"$64.lr.ph"
	leaq	4(%rbp), %r14
	jmp	.LBB224_35
.LBB224_32:                             # %waitFile.exit
                                        #   in Loop: Header=BB224_35 Depth=1
	movslq	4(%rbp), %rax
	shlq	$4, %rax
	orq	$2, %rax
	movq	%rax, SymTab+456(%rip)
.LBB224_33:                             # %"$71"
                                        #   in Loop: Header=BB224_35 Depth=1
	movq	(%rdi), %rdi
	movq	($Stdin)(%rip), %rax
.LBB224_34:                             # %"$69"
                                        #   in Loop: Header=BB224_35 Depth=1
	cmpq	%rax, %rdi
	je	.LBB224_47
.LBB224_35:                             # %"$64"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB224_43 Depth 2
	movq	8(%rdi), %rsi
	movl	8(%rsi), %ecx
	testl	%ecx, %ecx
	js	.LBB224_34
# %bb.36:                               # %"$67"
                                        #   in Loop: Header=BB224_35 Depth=1
	cmpl	$0, 24(%rdi)
	je	.LBB224_34
# %bb.37:                               # %"$68"
                                        #   in Loop: Header=BB224_35 Depth=1
	subq	$32, %rsp
	callq	close
	addq	$32, %rsp
	movslq	8(%rsi), %rax
	cmpl	%eax, ($InFDs)(%rip)
	jle	.LBB224_42
# %bb.38:                               # %"$2.i44"
                                        #   in Loop: Header=BB224_35 Depth=1
	movq	($InFiles)(%rip), %rcx
	movq	(%rcx,%rax,8), %rsi
	cmpq	($InFile)(%rip), %rsi
	jne	.LBB224_40
# %bb.39:                               # %"$4.i45"
                                        #   in Loop: Header=BB224_35 Depth=1
	movq	(%rcx), %rax
	movq	%rax, ($InFile)(%rip)
	movl	12(%rax), %eax
	movl	%eax, ($Chr)(%rip)
.LBB224_40:                             # %"$5.i47"
                                        #   in Loop: Header=BB224_35 Depth=1
	testq	%rsi, %rsi
	je	.LBB224_42
# %bb.41:                               # %"$6.i48"
                                        #   in Loop: Header=BB224_35 Depth=1
	movq	(%rsi), %rcx
	subq	$32, %rsp
	callq	free
	addq	$32, %rsp
	movq	$0, (%rsi)
	movl	$-1, 8(%rsi)
.LBB224_42:                             # %closeInFile.exit
                                        #   in Loop: Header=BB224_35 Depth=1
	movl	24(%rdi), %esi
	cmpl	$2, %esi
	jl	.LBB224_33
	.p2align	4, 0x90
.LBB224_43:                             # %"$70"
                                        #   Parent Loop BB224_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	subq	$32, %rsp
	movl	%esi, %ecx
	movq	%r14, %rdx
	xorl	%r8d, %r8d
	callq	waitpid
	addq	$32, %rsp
	testl	%eax, %eax
	jns	.LBB224_32
# %bb.44:                               # %"$3.i"
                                        #   in Loop: Header=BB224_43 Depth=2
	subq	$32, %rsp
	callq	gErrno
	addq	$32, %rsp
	cmpl	$2, %eax
	jne	.LBB224_67
# %bb.45:                               # %"$6.i30"
                                        #   in Loop: Header=BB224_43 Depth=2
	cmpl	$0, ($Signal)(%rip)
	je	.LBB224_43
# %bb.46:                               # %"$7.i"
                                        #   in Loop: Header=BB224_43 Depth=2
	subq	$32, %rsp
	xorl	%ecx, %ecx
	callq	sighandler
	addq	$32, %rsp
	jmp	.LBB224_43
.LBB224_47:                             # %"$65"
	movq	$0, (%rbx)
	.p2align	4, 0x90
.LBB224_48:                             # %"$2.i28"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rbx, %rax
	movq	16(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.LBB224_48
	jmp	.LBB224_50
	.p2align	4, 0x90
.LBB224_49:                             # %"$6.i"
                                        #   in Loop: Header=BB224_50 Depth=1
	movq	8(%rax), %rax
	movq	$0, 16(%rax)
.LBB224_50:                             # %"$5.preheader.i"
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, (%rax)
	je	.LBB224_49
	jmp	.LBB224_51
.LBB224_53:                             # %"$12"
	movq	(%r12), %r12
	testb	$15, %dil
	jne	.LBB224_7
.LBB224_54:                             # %"$15"
	movq	($Coroutines)(%rip), %rsi
	testq	%rsi, %rsi
	movq	%rdi, -8(%rbp)                  # 8-byte Spill
	je	.LBB224_56
# %bb.55:                               # %"$15.$17_crit_edge"
	movq	($Current)(%rip), %r13
	jmp	.LBB224_58
.LBB224_56:                             # %"$16"
	movl	$280, %ecx                      # imm = 0x118
	addq	JmpBufSize(%rip), %rcx
	subq	$32, %rsp
	callq	malloc
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB224_71
# %bb.57:                               # %alloc.exit
	movq	%rax, %rsi
	movq	%rsp, %rdi
	leaq	SymTab+280(%rip), %rax
	movq	%rax, (%rsi)
	movq	$0, 8(%rsi)
	movq	$0, 16(%rsi)
	movq	$0, 24(%rsi)
	leaq	SymTab+8(%rip), %rax
	movq	%rax, 32(%rsi)
	movq	($StkSizeT)(%rip), %r8
	movq	%rdi, %rcx
	subq	%r8, %rcx
	movq	%rcx, %rsp
	movq	%rcx, 40(%rsi)
	addq	$-256, %r8
	subq	$32, %rsp
	movb	$7, %dl
	callq	memset
	addq	$32, %rsp
	movq	%rdi, %rsp
	movq	$0, 48(%rsi)
	movq	%rsi, ($Current)(%rip)
	movq	%rsi, ($Coroutines)(%rip)
	movq	%rsi, %r13
.LBB224_58:                             # %"$17"
	leaq	env(%rip), %rdx
	movq	env+40(%rip), %rax
	movq	($Put)(%rip), %rcx
	movq	%rcx, 16(%rax)
	movq	env+32(%rip), %rax
	movq	($Get)(%rip), %rcx
	movq	%rcx, 16(%rax)
	movq	8(%rax), %rax
	movl	($Chr)(%rip), %ecx
	movl	%ecx, 12(%rax)
	movq	SymTab+440(%rip), %rax
	movq	%rax, 48(%r13)
	leaq	96(%r13), %r14
	subq	$32, %rsp
	movl	$144, %r8d
	movq	%r14, %rcx
	callq	memcpy
	addq	$32, %rsp
	movq	gcData(%rip), %rax
	movq	%rax, 240(%r13)
	movq	gcData+8(%rip), %rax
	movq	%rax, 248(%r13)
	movq	gcData+16(%rip), %rax
	movq	%rax, 256(%r13)
	movq	SymTab+112(%rip), %rax
	movq	%rax, 264(%r13)
	movq	SymTab+120(%rip), %rax
	movq	%rax, 272(%r13)
	xorl	%ebx, %ebx
	.p2align	4, 0x90
.LBB224_59:                             # %"$18"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rsi, %rdi
	movq	(%rsi), %rax
	cmpq	%rax, %r12
	je	.LBB224_64
# %bb.60:                               # %"$20"
                                        #   in Loop: Header=BB224_59 Depth=1
	testq	%rax, %rax
	movl	$0, %eax
	cmoveq	%rdi, %rax
	testq	%rbx, %rbx
	cmoveq	%rax, %rbx
	movq	16(%rdi), %rsi
	testq	%rsi, %rsi
	jne	.LBB224_59
# %bb.61:                               # %"$29"
	leaq	280(%r13), %rcx
	subq	$32, %rsp
	callq	setjmp
	addq	$32, %rsp
	testl	%eax, %eax
	jne	.LBB224_66
# %bb.62:                               # %"$31"
	testq	%rbx, %rbx
	jne	.LBB224_72
# %bb.63:                               # %"$33"
	movq	40(%rdi), %rsp
	movl	$295, %eax                      # imm = 0x127
	addq	JmpBufSize(%rip), %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rbx, 16(%rdi)
	movq	%rdi, 8(%rbx)
	movq	$0, 16(%rbx)
	jmp	.LBB224_73
.LBB224_64:                             # %"$19"
	cmpq	$0, 48(%rdi)
	je	.LBB224_69
# %bb.65:                               # %"$22"
	leaq	280(%r13), %rcx
	subq	$32, %rsp
	callq	setjmp
	addq	$32, %rsp
	testl	%eax, %eax
	je	.LBB224_70
.LBB224_66:                             # %"$23"
	movq	%r13, ($Current)(%rip)
	movl	$4096, %eax                     # imm = 0x1000
	addq	40(%r13), %rax
	movq	%rax, ($StkLimit)(%rip)
	subq	$32, %rsp
	leaq	env(%rip), %rcx
	movl	$144, %r8d
	movq	%r14, %rdx
	callq	memcpy
	addq	$32, %rsp
	movq	240(%r13), %rax
	movq	%rax, gcData(%rip)
	movq	248(%r13), %rax
	movq	%rax, gcData+8(%rip)
	movq	256(%r13), %rax
	movq	%rax, gcData+16(%rip)
	movq	264(%r13), %rax
	movq	%rax, SymTab+112(%rip)
	movq	272(%r13), %rax
	movq	%rax, SymTab+120(%rip)
	movq	env+32(%rip), %rax
	movq	8(%rax), %rcx
	movq	%rcx, ($InFile)(%rip)
	movl	12(%rcx), %ecx
	movl	%ecx, ($Chr)(%rip)
	movq	16(%rax), %rax
	movq	%rax, ($Get)(%rip)
	movq	env+40(%rip), %rax
	movq	8(%rax), %rcx
	movq	%rcx, ($OutFile)(%rip)
	movq	16(%rax), %rax
	movq	%rax, ($Put)(%rip)
	movq	48(%r13), %rax
	movq	%rax, SymTab+440(%rip)
	movq	$0, 48(%r13)
	movq	($Ret)(%rip), %rax
	jmp	.LBB224_52
.LBB224_67:                             # %"$5.i37"
	subq	$32, %rsp
	callq	closeErr
.LBB224_68:                             # %"$47"
	subq	$32, %rsp
	leaq	.L$75(%rip), %r8
	movq	%r15, %rcx
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	callq	err
.LBB224_69:                             # %"$21"
	subq	$32, %rsp
	movq	%r15, %rcx
	movq	%r12, %rdx
	callq	reentErr
.LBB224_70:                             # %"$24"
	leaq	SymTab+8(%rip), %rax
	movq	%rax, ($Ret)(%rip)
	addq	$280, %rdi                      # imm = 0x118
	subq	$32, %rsp
	movq	%rdi, %rcx
	movl	$1, %edx
	callq	longjmp
.LBB224_71:                             # %"$2.i"
	subq	$32, %rsp
	leaq	.L$3(%rip), %rcx
	xorl	%edx, %edx
	callq	giveup
.LBB224_72:                             # %"$32"
	movq	%rbx, %rsp
.LBB224_73:                             # %"$34"
	movq	%rsp, %rsi
	movq	%r12, (%rbx)
	movq	($Current)(%rip), %rax
	movq	%rax, 24(%rbx)
	movq	-8(%rbp), %r14                  # 8-byte Reload
	movq	%r14, 32(%rbx)
	movq	($StkSize)(%rip), %r8
	movq	%rbx, %rcx
	subq	%r8, %rcx
	movq	%rcx, %rsp
	movq	%rcx, 40(%rbx)
	addq	$-256, %r8
	subq	$32, %rsp
	movb	$7, %dl
	callq	memset
	addq	$32, %rsp
	movq	%rsi, %rsp
	movq	$0, 48(%rbx)
	leaq	env(%rip), %rdx
	movq	env(%rip), %rax
	movq	%rax, 56(%rbx)
	movq	env+8(%rip), %rcx
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	$2, (%rax)
	movq	%rax, %rdi
	orq	$8, %rdi
	leaq	SymTab+440(%rip), %rsi
	movq	%rsi, (%rdi)
	movq	%rcx, 16(%rax)
	movq	%r15, 24(%rax)
	movq	%rax, env+8(%rip)
	movq	%rax, 64(%rbx)
	movq	env+24(%rip), %rax
	movq	%rax, 72(%rbx)
	movq	env+32(%rip), %rax
	movq	%rax, 80(%rbx)
	movq	env+40(%rip), %rax
	movq	%rax, 88(%rbx)
	leaq	96(%rbx), %rcx
	subq	$32, %rsp
	movl	$144, %r8d
	callq	memcpy
	addq	$32, %rsp
	movq	gcData(%rip), %rax
	movq	%rax, 240(%rbx)
	movq	gcData+8(%rip), %rax
	movq	%rax, 248(%rbx)
	movq	gcData+16(%rip), %rax
	movq	%rax, 256(%rbx)
	movq	SymTab+112(%rip), %rax
	movq	%rax, 264(%rbx)
	movq	SymTab+120(%rip), %rax
	movq	%rax, 272(%rbx)
	leaq	SymTab+8(%rip), %rax
	movq	%rax, env+88(%rip)
	movq	$0, env+112(%rip)
	movq	$0, env+120(%rip)
	movq	%rbx, ($Current)(%rip)
	movl	$4096, %eax                     # imm = 0x1000
	addq	40(%rbx), %rax
	movq	%rax, ($StkLimit)(%rip)
	movq	(%r14), %rcx
	movq	8(%r14), %rsi
	testb	$15, %sil
	jne	.LBB224_77
.LBB224_74:                             # %"$36"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %cl
	jne	.LBB224_76
# %bb.75:                               # %"$45"
                                        #   in Loop: Header=BB224_74 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
.LBB224_76:                             # %"$44"
                                        #   in Loop: Header=BB224_74 Depth=1
	movq	(%rsi), %rcx
	movq	8(%rsi), %rsi
	testb	$15, %sil
	je	.LBB224_74
.LBB224_77:                             # %"$38"
	testb	$6, %cl
	jne	.LBB224_81
# %bb.78:                               # %"$40"
	testb	$8, %cl
	jne	.LBB224_80
# %bb.79:                               # %"$42"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB224_81
.LBB224_80:                             # %"$43"
	movq	(%rcx), %rcx
.LBB224_81:                             # %"$37"
	movq	%rcx, ($Ret)(%rip)
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	stop
	addq	$32, %rsp
	movl	$280, %ecx                      # imm = 0x118
	addq	24(%rbx), %rcx
	subq	$32, %rsp
	movl	$1, %edx
	callq	longjmp
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _yield;
	.scl	2;
	.type	32;
	.endef
	.globl	_yield                          # -- Begin function _yield
	.p2align	4, 0x90
_yield:                                 # @_yield
.seh_proc _yield
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$24, %rsp
	.seh_stackalloc 24
	leaq	16(%rsp), %rbp
	.seh_setframe %rbp, 16
	.seh_endprologue
	movq	%rcx, %rbx
	movq	8(%rcx), %rax
	movq	(%rax), %r12
	movq	8(%rax), %rsi
	testb	$6, %r12b
	jne	.LBB225_4
# %bb.1:                                # %"$3"
	testb	$8, %r12b
	jne	.LBB225_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%r12, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r12
	jmp	.LBB225_4
.LBB225_2:                              # %"$6"
	movq	(%r12), %r12
.LBB225_4:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%r12, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r15, env(%rip)
	movq	(%rsi), %rax
	testb	$6, %al
	jne	.LBB225_8
# %bb.5:                                # %"$8"
	testb	$8, %al
	jne	.LBB225_6
# %bb.7:                                # %"$10"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB225_8
.LBB225_6:                              # %"$11"
	movq	(%rax), %rax
.LBB225_8:                              # %"$7"
	movq	($Coroutines)(%rip), %rdi
	testq	%rdi, %rdi
	je	.LBB225_9
# %bb.11:                               # %"$13"
	movq	($Current)(%rip), %r9
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	jne	.LBB225_12
# %bb.17:                               # %"$15"
	movq	24(%r9), %rdi
	testq	%rdi, %rdi
	jne	.LBB225_19
# %bb.18:                               # %"$25"
	subq	$32, %rsp
	leaq	.L$78(%rip), %r8
	jmp	.LBB225_10
	.p2align	4, 0x90
.LBB225_12:                             # %"$17"
                                        # =>This Inner Loop Header: Depth=1
	cmpq	(%rdi), %rax
	je	.LBB225_13
# %bb.15:                               # %"$18"
                                        #   in Loop: Header=BB225_12 Depth=1
	movq	16(%rdi), %rdi
	testq	%rdi, %rdi
	jne	.LBB225_12
# %bb.16:                               # %"$23"
	subq	$32, %rsp
	leaq	.L$77(%rip), %r8
	movq	%rbx, %rcx
	movq	%rax, %rdx
	xorl	%r9d, %r9d
	callq	err
.LBB225_13:                             # %"$20"
	cmpq	$0, 48(%rdi)
	je	.LBB225_14
.LBB225_19:                             # %"$14"
	movq	($Stdin)(%rip), %r8
	movq	($Stdout)(%rip), %r14
	movq	env+40(%rip), %rcx
	movq	($Put)(%rip), %rdx
	movq	%rdx, 16(%rcx)
	movq	env+32(%rip), %rcx
	movq	($Get)(%rip), %rdx
	movq	%rdx, 16(%rcx)
	movq	8(%rcx), %rcx
	movl	($Chr)(%rip), %edx
	movl	%edx, 12(%rcx)
	xorl	%r13d, %r13d
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, (%r9)
	movq	%r15, -16(%rbp)                 # 8-byte Spill
	movq	%r12, (%rbp)                    # 8-byte Spill
	jne	.LBB225_21
# %bb.20:
	xorl	%esi, %esi
	xorl	%r15d, %r15d
	movq	%r8, %r12
	jmp	.LBB225_40
.LBB225_21:                             # %"$27"
	movq	env(%rip), %rcx
	cmpq	56(%r9), %rcx
	jne	.LBB225_23
# %bb.22:
	xorl	%r13d, %r13d
	jmp	.LBB225_25
.LBB225_23:                             # %"$30.preheader"
	xorl	%edx, %edx
	.p2align	4, 0x90
.LBB225_24:                             # %"$30"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rcx, %r13
	movq	8(%rcx), %rcx
	movq	%rdx, 8(%r13)
	cmpq	56(%r9), %rcx
	movq	%r13, %rdx
	jne	.LBB225_24
.LBB225_25:                             # %"$31"
	movq	env+8(%rip), %rcx
	cmpq	64(%r9), %rcx
	jne	.LBB225_27
# %bb.26:
	xorl	%esi, %esi
	jmp	.LBB225_29
.LBB225_27:                             # %"$33.preheader"
	xorl	%edx, %edx
	.p2align	4, 0x90
.LBB225_28:                             # %"$33"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rcx, %rsi
	movq	(%rcx), %rcx
	movq	8(%rsi), %rax
	movq	(%rax), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, (%rsi)
	movq	16(%rsi), %rcx
	movq	%rdx, 16(%rsi)
	cmpq	64(%r9), %rcx
	movq	%rsi, %rdx
	jne	.LBB225_28
.LBB225_29:                             # %"$34"
	movq	%rsi, 16(%rcx)
	movq	env+24(%rip), %rcx
	cmpq	72(%r9), %rcx
	je	.LBB225_30
# %bb.31:                               # %"$36.preheader"
	xorl	%edx, %edx
	.p2align	4, 0x90
.LBB225_32:                             # %"$36"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rcx, %r15
	movq	(%rcx), %rcx
	movq	%rdx, (%r15)
	cmpq	72(%r9), %rcx
	movq	%r15, %rdx
	jne	.LBB225_32
	jmp	.LBB225_33
.LBB225_30:
	xorl	%r15d, %r15d
.LBB225_33:                             # %"$37"
	movq	env+32(%rip), %rcx
	cmpq	80(%r9), %rcx
	je	.LBB225_34
	.p2align	4, 0x90
.LBB225_35:                             # %"$39"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rcx, %r12
	movq	(%rcx), %rcx
	movq	%r8, (%r12)
	cmpq	80(%r9), %rcx
	movq	%r12, %r8
	jne	.LBB225_35
	jmp	.LBB225_36
.LBB225_34:
	movq	%r8, %r12
.LBB225_36:                             # %"$40"
	movq	%r12, 80(%r9)
	movq	env+40(%rip), %rcx
	cmpq	88(%r9), %rcx
	je	.LBB225_37
	.p2align	4, 0x90
.LBB225_38:                             # %"$42"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rcx, %rax
	movq	(%rcx), %rcx
	movq	%r14, (%rax)
	cmpq	88(%r9), %rcx
	movq	%rax, %r14
	jne	.LBB225_38
	jmp	.LBB225_39
.LBB225_37:
	movq	%r14, %rax
.LBB225_39:                             # %"$43"
	movq	%rax, 88(%r9)
	movq	%rax, %r14
.LBB225_40:                             # %"$28"
	movq	SymTab+440(%rip), %rax
	movq	%rax, 48(%r9)
	leaq	96(%r9), %rcx
	subq	$32, %rsp
	leaq	env(%rip), %rdx
	movl	$144, %r8d
	movq	%rcx, -8(%rbp)                  # 8-byte Spill
	movq	%r9, %rbx
	callq	memcpy
	addq	$32, %rsp
	movq	gcData(%rip), %rax
	movq	%rax, 240(%rbx)
	movq	gcData+8(%rip), %rax
	movq	%rax, 248(%rbx)
	movq	gcData+16(%rip), %rax
	movq	%rax, 256(%rbx)
	movq	SymTab+112(%rip), %rax
	movq	%rax, 264(%rbx)
	movq	SymTab+120(%rip), %rax
	movq	%rax, 272(%rbx)
	leaq	280(%rbx), %rcx
	subq	$32, %rsp
	callq	setjmp
	addq	$32, %rsp
	testl	%eax, %eax
	je	.LBB225_59
# %bb.41:                               # %"$45"
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, (%rbx)
	movq	%rbx, %r9
	movq	-8(%rbp), %rdx                  # 8-byte Reload
	je	.LBB225_58
# %bb.42:                               # %"$46"
	movq	env+40(%rip), %rax
	movq	%rax, 88(%r9)
	cmpq	($Stdout)(%rip), %r14
	je	.LBB225_43
	.p2align	4, 0x90
.LBB225_44:                             # %"$49"
                                        # =>This Inner Loop Header: Depth=1
	movq	%r14, %rcx
	movq	(%r14), %r14
	movq	%rax, (%rcx)
	cmpq	($Stdout)(%rip), %r14
	movq	%rcx, %rax
	jne	.LBB225_44
	jmp	.LBB225_45
.LBB225_43:
	movq	%rax, %rcx
.LBB225_45:                             # %"$50"
	movq	%rcx, 136(%r9)
	movq	env+32(%rip), %rax
	movq	%rax, 80(%r9)
	cmpq	($Stdin)(%rip), %r12
	je	.LBB225_46
	.p2align	4, 0x90
.LBB225_47:                             # %"$52"
                                        # =>This Inner Loop Header: Depth=1
	movq	%r12, %rcx
	movq	(%r12), %r12
	movq	%rax, (%rcx)
	cmpq	($Stdin)(%rip), %r12
	movq	%rcx, %rax
	jne	.LBB225_47
	jmp	.LBB225_48
.LBB225_46:
	movq	%rax, %rcx
.LBB225_48:                             # %"$53"
	movq	%rcx, 128(%r9)
	movq	env+24(%rip), %rax
	movq	%rax, 72(%r9)
	testq	%r15, %r15
	je	.LBB225_49
	.p2align	4, 0x90
.LBB225_50:                             # %"$55"
                                        # =>This Inner Loop Header: Depth=1
	movq	%r15, %rcx
	movq	(%r15), %r15
	movq	%rax, (%rcx)
	testq	%r15, %r15
	movq	%rcx, %rax
	jne	.LBB225_50
	jmp	.LBB225_51
.LBB225_49:
	movq	%rax, %rcx
.LBB225_51:                             # %"$56"
	movq	%rcx, 120(%r9)
	movq	env+8(%rip), %rax
	movq	64(%r9), %rcx
	movq	%rax, 16(%rcx)
	movq	64(%r9), %rax
	testq	%rsi, %rsi
	je	.LBB225_52
	.p2align	4, 0x90
.LBB225_53:                             # %"$58"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rsi, %rcx
	movq	(%rsi), %rsi
	movq	8(%rcx), %rbx
	movq	(%rbx), %rdi
	movq	%rsi, (%rbx)
	movq	%rdi, (%rcx)
	movq	16(%rcx), %rsi
	movq	%rax, 16(%rcx)
	testq	%rsi, %rsi
	movq	%rcx, %rax
	jne	.LBB225_53
	jmp	.LBB225_54
.LBB225_52:
	movq	%rax, %rcx
.LBB225_54:                             # %"$59"
	movq	%rcx, 104(%r9)
	movq	env(%rip), %rax
	movq	%rax, 56(%r9)
	testq	%r13, %r13
	je	.LBB225_55
	.p2align	4, 0x90
.LBB225_56:                             # %"$61"
                                        # =>This Inner Loop Header: Depth=1
	movq	%r13, %rcx
	movq	8(%r13), %r13
	movq	%rax, 8(%rcx)
	testq	%r13, %r13
	movq	%rcx, %rax
	jne	.LBB225_56
	jmp	.LBB225_57
.LBB225_55:
	movq	%rax, %rcx
.LBB225_57:                             # %"$62"
	movq	%rcx, (%rdx)
.LBB225_58:                             # %"$47"
	movq	%r9, ($Current)(%rip)
	movl	$4096, %eax                     # imm = 0x1000
	addq	40(%r9), %rax
	movq	%rax, ($StkLimit)(%rip)
	subq	$32, %rsp
	leaq	env(%rip), %rcx
	movl	$144, %r8d
	movq	%r9, %rsi
	callq	memcpy
	addq	$32, %rsp
	movq	240(%rsi), %rax
	movq	%rax, gcData(%rip)
	movq	248(%rsi), %rax
	movq	%rax, gcData+8(%rip)
	movq	256(%rsi), %rax
	movq	%rax, gcData+16(%rip)
	movq	264(%rsi), %rax
	movq	%rax, SymTab+112(%rip)
	movq	272(%rsi), %rax
	movq	%rax, SymTab+120(%rip)
	movq	env+32(%rip), %rax
	movq	8(%rax), %rcx
	movq	%rcx, ($InFile)(%rip)
	movl	12(%rcx), %ecx
	movl	%ecx, ($Chr)(%rip)
	movq	16(%rax), %rax
	movq	%rax, ($Get)(%rip)
	movq	env+40(%rip), %rax
	movq	8(%rax), %rcx
	movq	%rcx, ($OutFile)(%rip)
	movq	16(%rax), %rax
	movq	%rax, ($Put)(%rip)
	movq	48(%rsi), %rax
	movq	%rax, SymTab+440(%rip)
	movq	$0, 48(%rsi)
	movq	($Ret)(%rip), %rax
	movq	-16(%rbp), %rcx                 # 8-byte Reload
	movq	8(%rcx), %rcx
	movq	%rcx, env(%rip)
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB225_9:                              # %"$12"
	subq	$32, %rsp
	leaq	.L$76(%rip), %r8
.LBB225_10:                             # %"$12"
	movq	%rbx, %rcx
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	callq	err
.LBB225_59:                             # %"$44"
	movq	(%rbp), %rax                    # 8-byte Reload
	movq	%rax, ($Ret)(%rip)
	addq	$280, %rdi                      # imm = 0x118
	subq	$32, %rsp
	movq	%rdi, %rcx
	movl	$1, %edx
	callq	longjmp
.LBB225_14:                             # %"$21"
	subq	$32, %rsp
	movq	%rbx, %rcx
	movq	%rax, %rdx
	callq	reentErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _break;
	.scl	2;
	.type	32;
	.endef
	.globl	_break                          # -- Begin function _break
	.p2align	4, 0x90
_break:                                 # @_break
.seh_proc _break
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, SymTab+824(%rip)
	je	.LBB226_2
# %bb.1:                                # %"$2"
	movq	%rax, %rcx
	callq	brkLoad
.LBB226_2:                              # %"$3"
	testb	$6, %al
	jne	.LBB226_5
# %bb.3:                                # %"$5"
	testb	$8, %al
	jne	.LBB226_4
# %bb.6:                                # %"$7"
	movq	%rax, %rcx
	addq	$40, %rsp
	jmp	evList                          # TAILCALL
.LBB226_4:                              # %"$8"
	movq	(%rax), %rax
.LBB226_5:                              # %"$4"
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _e;
	.scl	2;
	.type	32;
	.endef
	.globl	_e                              # -- Begin function _e
	.p2align	4, 0x90
_e:                                     # @_e
.seh_proc _e
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$24, %rsp
	.seh_stackalloc 24
	leaq	16(%rsp), %rbp
	.seh_setframe %rbp, 16
	.seh_endprologue
	movq	%rcx, %r13
	movq	env+16(%rip), %rcx
	testq	%rcx, %rcx
	je	.LBB227_25
# %bb.1:                                # %"$3"
	movq	SymTab+824(%rip), %rdi
	movq	env(%rip), %rdx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%rdi, %r12
	movq	%rdi, (%r14)
	movq	%r14, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	SymTab+440(%rip), %rdi
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdx
	movq	%rdi, (%rbp)                    # 8-byte Spill
	movq	%rdi, (%rdx)
	movq	%rdx, %rax
	orq	$8, %rax
	movq	%r14, (%rax)
	movq	SymTab+600(%rip), %rdi
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rdi, -8(%rbp)                  # 8-byte Spill
	movq	%rdi, (%rbx)
	movq	%rbx, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	%rbx, env(%rip)
	leaq	SymTab+8(%rip), %rax
	movq	%rax, SymTab+824(%rip)
	movq	(%rcx), %rax
	movq	%rax, SymTab+600(%rip)
	movq	16(%rcx), %rax
	movq	16(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, SymTab+440(%rip)
	movq	env+32(%rip), %r15
	movq	env+40(%rip), %rsi
	subq	$32, %rsp
	callq	popInFiles
	addq	$32, %rsp
	movq	env+32(%rip), %rax
	movq	8(%rax), %rcx
	movq	%rcx, ($InFile)(%rip)
	movl	12(%rcx), %ecx
	movl	%ecx, ($Chr)(%rip)
	movq	16(%rax), %rax
	movq	%rax, ($Get)(%rip)
	subq	$32, %rsp
	callq	popOutFiles
	addq	$32, %rsp
	movq	env+40(%rip), %rax
	movq	8(%rax), %rcx
	movq	%rcx, ($OutFile)(%rip)
	movq	16(%rax), %rax
	movq	%rax, ($Put)(%rip)
	movq	8(%r13), %rax
	testb	$15, %al
	je	.LBB227_2
# %bb.12:                               # %"$5"
	movq	SymTab+728(%rip), %rcx
	testb	$6, %cl
	je	.LBB227_14
# %bb.13:
	movq	%r12, %r13
	jmp	.LBB227_17
.LBB227_2:                              # %"$7.preheader"
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%r12, %r13
	testb	$15, %bl
	je	.LBB227_8
# %bb.3:
	movq	(%rbp), %r12                    # 8-byte Reload
.LBB227_4:                              # %"$10"
	testb	$6, %cl
	jne	.LBB227_18
# %bb.5:                                # %"$12"
	testb	$8, %cl
	jne	.LBB227_6
# %bb.7:                                # %"$14"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB227_18
.LBB227_14:                             # %"$19"
	testb	$8, %cl
	movq	%r12, %r13
	jne	.LBB227_15
# %bb.16:                               # %"$21"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB227_17
.LBB227_8:
	movq	(%rbp), %r12                    # 8-byte Reload
	jmp	.LBB227_9
	.p2align	4, 0x90
.LBB227_11:                             # %"$16"
                                        #   in Loop: Header=BB227_9 Depth=1
	movq	(%rbx), %rcx
	movq	8(%rbx), %rbx
	testb	$15, %bl
	jne	.LBB227_4
.LBB227_9:                              # %"$8"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %cl
	jne	.LBB227_11
# %bb.10:                               # %"$17"
                                        #   in Loop: Header=BB227_9 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	jmp	.LBB227_11
.LBB227_15:                             # %"$22"
	movq	(%rcx), %rcx
.LBB227_17:                             # %"$6"
	movq	(%rbp), %r12                    # 8-byte Reload
.LBB227_18:                             # %"$6"
	movq	8(%rsi), %rax
	movl	24(%rsi), %edx
	movq	env+40(%rip), %rbx
	movq	%rbx, (%rsi)
	testq	%rbx, %rbx
	je	.LBB227_20
# %bb.19:                               # %"$2.i9"
	movq	($Put)(%rip), %rdi
	movq	%rdi, 16(%rbx)
.LBB227_20:                             # %pushOutFile.exit
	leaq	_putStdout(%rip), %rbx
	movq	%rbx, ($Put)(%rip)
	movq	%rax, ($OutFile)(%rip)
	movq	%rax, 8(%rsi)
	movl	%edx, 24(%rsi)
	movq	%rsi, env+40(%rip)
	movq	8(%r15), %rdx
	movl	24(%r15), %eax
	movq	($InFile)(%rip), %rbx
	testq	%rbx, %rbx
	je	.LBB227_22
# %bb.21:                               # %"$2.i"
	movl	($Chr)(%rip), %edi
	movl	%edi, 12(%rbx)
.LBB227_22:                             # %"$3.i"
	movq	env+32(%rip), %rbx
	movq	%rbx, (%r15)
	testq	%rbx, %rbx
	je	.LBB227_24
# %bb.23:                               # %"$4.i"
	movq	($Get)(%rip), %rdi
	movq	%rdi, 16(%rbx)
.LBB227_24:                             # %pushInFile.exit
	leaq	_getStdin(%rip), %rbx
	movq	%rbx, ($Get)(%rip)
	movq	%rdx, ($InFile)(%rip)
	movq	%rdx, 8(%r15)
	movl	12(%rdx), %edx
	movl	%edx, ($Chr)(%rip)
	movl	%eax, 24(%r15)
	movq	%r15, env+32(%rip)
	movq	-8(%rbp), %rax                  # 8-byte Reload
	movq	%rax, SymTab+600(%rip)
	movq	%r12, SymTab+440(%rip)
	movq	%r13, SymTab+824(%rip)
	movq	8(%r14), %rax
	movq	%rax, env(%rip)
	movq	%rcx, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB227_6:                              # %"$15"
	movq	(%rcx), %rcx
	jmp	.LBB227_18
.LBB227_25:                             # %"$2"
	subq	$32, %rsp
	leaq	.L$80(%rip), %r8
	movq	%r13, %rcx
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _trace;
	.scl	2;
	.type	32;
	.endef
	.globl	_trace                          # -- Begin function _trace
	.p2align	4, 0x90
_trace:                                 # @_trace
.seh_proc _trace
# %bb.0:                                # %"$1"
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	leaq	SymTab+8(%rip), %r13
	cmpq	%r13, SymTab+824(%rip)
	jne	.LBB228_10
# %bb.1:                                # %"$2"
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rdi
	movq	8(%rax), %rsi
	jmp	.LBB228_2
	.p2align	4, 0x90
.LBB228_9:                              # %"$14"
                                        #   in Loop: Header=BB228_2 Depth=1
	movq	(%rsi), %rdi
	movq	8(%rsi), %rsi
.LBB228_2:                              # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %sil
	jne	.LBB228_3
# %bb.7:                                # %"$6"
                                        #   in Loop: Header=BB228_2 Depth=1
	testb	$15, %dil
	jne	.LBB228_9
# %bb.8:                                # %"$15"
                                        #   in Loop: Header=BB228_2 Depth=1
	movq	%rdi, %rcx
	callq	evList
	jmp	.LBB228_9
.LBB228_10:                             # %"$3"
	movq	($OutFile)(%rip), %r14
	movq	($Put)(%rip), %r12
	movq	($OutFiles)(%rip), %rcx
	movq	16(%rcx), %rcx
	movq	%rcx, ($OutFile)(%rip)
	leaq	_putStdout(%rip), %rsi
	movq	%rsi, ($Put)(%rip)
	movq	(%rax), %r15
	movq	8(%rax), %rax
	movq	(%rax), %rdi
	movq	8(%rax), %rbx
	movl	env+136(%rip), %eax
	leal	1(%rax), %ecx
	movl	%ecx, env+136(%rip)
	cmpl	$63, %ecx
	movl	$63, %ebp
	cmovlel	%eax, %ebp
	testl	%ebp, %ebp
	js	.LBB228_14
# %bb.11:                               # %"$5.i.preheader"
	movb	$32, %cl
	callq	_putStdout
	testl	%ebp, %ebp
	je	.LBB228_14
# %bb.12:                               # %"$5.i.$5.i_crit_edge.preheader"
	incl	%ebp
	.p2align	4, 0x90
.LBB228_13:                             # %"$5.i.$5.i_crit_edge"
                                        # =>This Inner Loop Header: Depth=1
	movb	$32, %cl
	callq	*($Put)(%rip)
	decl	%ebp
	cmpl	$1, %ebp
	jg	.LBB228_13
.LBB228_14:                             # %"$6.i"
	testb	$15, %r15b
	movq	%r15, %rcx
	jne	.LBB228_16
# %bb.15:                               # %"$8.i"
	movq	(%r15), %rcx
	callq	print
	movb	$32, %cl
	callq	*($Put)(%rip)
	movq	8(%r15), %rcx
	callq	print
	movb	$32, %cl
	callq	*($Put)(%rip)
	movq	SymTab+488(%rip), %rcx
.LBB228_16:                             # %trace.exit
	callq	print
	movb	$32, %cl
	callq	*($Put)(%rip)
	movb	$58, %cl
	callq	*($Put)(%rip)
	testb	$15, %dil
	jne	.LBB228_19
	.p2align	4, 0x90
.LBB228_17:                             # %"$17"
                                        # =>This Inner Loop Header: Depth=1
	movb	$32, %cl
	callq	*($Put)(%rip)
	movq	(%rdi), %rax
	movq	8(%rdi), %rdi
	movq	(%rax), %rcx
	callq	print
	testb	$15, %dil
	je	.LBB228_17
.LBB228_19:                             # %"$18"
	leaq	SymTab+440(%rip), %rax
	cmpq	%rax, %rdi
	jne	.LBB228_23
# %bb.20:                               # %"$22.preheader"
	movq	env+88(%rip), %rdi
	testb	$15, %dil
	jne	.LBB228_25
	.p2align	4, 0x90
.LBB228_22:                             # %"$23"
                                        # =>This Inner Loop Header: Depth=1
	movb	$32, %cl
	callq	*($Put)(%rip)
	movq	8(%rdi), %rcx
	callq	print
	movq	(%rdi), %rdi
	testb	$15, %dil
	je	.LBB228_22
	jmp	.LBB228_25
.LBB228_3:                              # %"$8"
	testb	$6, %dil
	jne	.LBB228_39
# %bb.4:                                # %"$10"
	testb	$8, %dil
	jne	.LBB228_5
# %bb.6:                                # %"$12"
	movq	%rdi, %rcx
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	evList                          # TAILCALL
.LBB228_23:                             # %"$20"
	cmpq	%r13, %rdi
	je	.LBB228_25
# %bb.24:                               # %"$26"
	movb	$32, %cl
	callq	*($Put)(%rip)
	movq	(%rdi), %rcx
	callq	print
.LBB228_25:                             # %"$19"
	movb	$10, %cl
	callq	*($Put)(%rip)
	movq	%r12, ($Put)(%rip)
	movq	%r14, ($OutFile)(%rip)
	.p2align	4, 0x90
.LBB228_26:                             # %"$19"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rbx), %rdi
	movq	8(%rbx), %rbx
	testb	$15, %bl
	jne	.LBB228_27
# %bb.30:                               # %"$28"
                                        #   in Loop: Header=BB228_26 Depth=1
	testb	$15, %dil
	jne	.LBB228_26
# %bb.31:                               # %"$37"
                                        #   in Loop: Header=BB228_26 Depth=1
	movq	%rdi, %rcx
	callq	evList
	jmp	.LBB228_26
.LBB228_27:                             # %"$30"
	testb	$6, %dil
	jne	.LBB228_33
# %bb.28:                               # %"$32"
	testb	$8, %dil
	jne	.LBB228_29
# %bb.32:                               # %"$34"
	movq	%rdi, %rcx
	callq	evList
	movq	%rax, %rdi
	jmp	.LBB228_33
.LBB228_5:                              # %"$13"
	movq	(%rdi), %rdi
	jmp	.LBB228_39
.LBB228_29:                             # %"$35"
	movq	(%rdi), %rdi
.LBB228_33:                             # %"$29"
	movq	($OutFiles)(%rip), %rax
	movq	16(%rax), %rax
	movq	%rax, ($OutFile)(%rip)
	movq	%rsi, ($Put)(%rip)
	movl	env+136(%rip), %ebx
	cmpl	$65, %ebx
	movl	$64, %ebp
	cmovll	%ebx, %ebp
	movl	%ebp, %esi
	decl	%esi
	js	.LBB228_36
# %bb.34:                               # %"$5.i9.preheader"
	movb	$32, %cl
	callq	_putStdout
	testl	%esi, %esi
	je	.LBB228_36
	.p2align	4, 0x90
.LBB228_35:                             # %"$5.i9.$5.i9_crit_edge"
                                        # =>This Inner Loop Header: Depth=1
	movb	$32, %cl
	callq	*($Put)(%rip)
	decl	%ebp
	cmpl	$1, %ebp
	jg	.LBB228_35
.LBB228_36:                             # %"$6.i11"
	testb	$15, %r15b
	jne	.LBB228_38
# %bb.37:                               # %"$8.i13"
	movq	(%r15), %rcx
	callq	print
	movb	$32, %cl
	callq	*($Put)(%rip)
	movq	8(%r15), %rcx
	callq	print
	movb	$32, %cl
	callq	*($Put)(%rip)
	movq	SymTab+488(%rip), %r15
.LBB228_38:                             # %trace.exit14
	movq	%r15, %rcx
	callq	print
	decl	%ebx
	movl	%ebx, env+136(%rip)
	movb	$32, %cl
	callq	*($Put)(%rip)
	movb	$61, %cl
	callq	*($Put)(%rip)
	movb	$32, %cl
	callq	*($Put)(%rip)
	movq	%rdi, %rcx
	callq	print
	movb	$10, %cl
	callq	*($Put)(%rip)
	movq	%r12, ($Put)(%rip)
	movq	%r14, ($OutFile)(%rip)
.LBB228_39:                             # %"$4"
	movq	%rdi, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _exec;
	.scl	2;
	.type	32;
	.endef
	.globl	_exec                           # -- Begin function _exec
	.p2align	4, 0x90
_exec:                                  # @_exec
.seh_proc _exec
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %r14
	movq	8(%rcx), %rdi
	movl	$1, %eax
	testb	$15, %dil
	jne	.LBB229_3
# %bb.1:                                # %"$3.preheader"
	movl	$1, %eax
	movq	%rdi, %rcx
	.p2align	4, 0x90
.LBB229_2:                              # %"$3"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rcx
	incq	%rax
	testb	$15, %cl
	je	.LBB229_2
.LBB229_3:                              # %"$4"
	leaq	15(,%rax,8), %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	(%rdi), %rcx
	testb	$6, %cl
	jne	.LBB229_7
# %bb.4:                                # %"$3.i"
	testb	$8, %cl
	jne	.LBB229_5
# %bb.6:                                # %"$5.i"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB229_7
.LBB229_5:                              # %"$6.i"
	movq	(%rcx), %rcx
.LBB229_7:                              # %evSym.exit
	subq	$32, %rsp
	callq	xSym
	addq	$32, %rsp
	leaq	SymTab+8(%rip), %r12
	cmpq	%r12, %rax
	jne	.LBB229_9
# %bb.8:
	movl	$2, %ecx
	movl	$1, %eax
	jmp	.LBB229_18
.LBB229_9:                              # %"$3.i2"
	movq	-8(%rax), %rcx
	testb	$8, %cl
	jne	.LBB229_37
	.p2align	4, 0x90
# %bb.11:                               # %"$8.i"
	testb	$6, %cl
	jne	.LBB229_12
.LBB229_10:                             # %"$8.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rcx
	testb	$6, %cl
	je	.LBB229_10
.LBB229_12:                             # %xName.exit
	movl	$1, %eax
	testb	$4, %cl
	movq	%rcx, %rdx
	je	.LBB229_15
# %bb.13:                               # %"$3.i.i.preheader"
	movl	$1, %eax
	movq	%rcx, %rdx
	.p2align	4, 0x90
.LBB229_14:                             # %"$3.i.i"
                                        # =>This Inner Loop Header: Depth=1
	addq	$8, %rax
	movq	4(%rdx), %rdx
	testb	$4, %dl
	jne	.LBB229_14
.LBB229_15:                             # %"$4.i.i"
	shrq	$4, %rdx
	je	.LBB229_17
	.p2align	4, 0x90
.LBB229_16:                             # %"$6.i.i"
                                        # =>This Inner Loop Header: Depth=1
	incq	%rax
	shrq	$8, %rdx
	jne	.LBB229_16
.LBB229_17:                             # %bufSize.exit.i
	testb	$2, %cl
	jne	.LBB229_18
# %bb.19:                               # %"$3.i6"
	movq	-4(%rcx), %rdx
	movq	%rdx, %rbx
	shrq	$8, %rbx
	cmpb	$126, %dl
	jne	.LBB229_21
	jmp	.LBB229_26
.LBB229_18:                             # %"$2.i"
	movq	%rcx, %rdx
	shrq	$4, %rdx
	movq	%rcx, %rbx
	shrq	$12, %rbx
	cmpb	$126, %dl
	je	.LBB229_26
.LBB229_21:                             # %"$4.i"
	cmpb	$64, %dl
	je	.LBB229_25
# %bb.22:                               # %"$4.i"
	cmpb	$43, %dl
	jne	.LBB229_28
# %bb.23:                               # %"$9.i"
	cmpb	$126, %bl
	je	.LBB229_26
# %bb.24:                               # %"$9.i"
	cmpb	$64, %bl
	jne	.LBB229_28
.LBB229_25:                             # %"$11.i"
	movq	($PilLen)(%rip), %rdx
	jmp	.LBB229_27
.LBB229_26:                             # %"$17.i"
	movq	($UsrLen)(%rip), %rdx
.LBB229_27:                             # %pathSize.exit
	leaq	-1(%rax,%rdx), %rax
.LBB229_28:                             # %pathSize.exit
	addq	$15, %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	subq	$32, %rsp
	movq	%rbx, %rdx
	callq	pathString
	addq	$32, %rsp
	movq	%rbx, (%r15)
	movq	8(%rdi), %rdi
	testb	$15, %dil
	movq	%r15, %rbx
	jne	.LBB229_50
# %bb.29:                               # %"$6.preheader"
	movq	%r15, %rbx
	jmp	.LBB229_30
	.p2align	4, 0x90
.LBB229_48:                             # %symByte.exit.thread.i
                                        #   in Loop: Header=BB229_30 Depth=1
	movb	$0, (%rdx)
.LBB229_49:                             # %bufString.exit
                                        #   in Loop: Header=BB229_30 Depth=1
	movq	%rax, (%rbx)
	movq	8(%rdi), %rdi
	testb	$15, %dil
	jne	.LBB229_50
.LBB229_30:                             # %"$6"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB229_39 Depth 2
                                        #     Child Loop BB229_42 Depth 2
                                        #     Child Loop BB229_44 Depth 2
                                        #     Child Loop BB229_54 Depth 2
	movq	(%rdi), %rcx
	testb	$6, %cl
	jne	.LBB229_34
# %bb.31:                               # %"$3.i10"
                                        #   in Loop: Header=BB229_30 Depth=1
	testb	$8, %cl
	jne	.LBB229_32
# %bb.33:                               # %"$5.i12"
                                        #   in Loop: Header=BB229_30 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB229_34
.LBB229_32:                             # %"$6.i11"
                                        #   in Loop: Header=BB229_30 Depth=1
	movq	(%rcx), %rcx
	.p2align	4, 0x90
.LBB229_34:                             # %evSym.exit14
                                        #   in Loop: Header=BB229_30 Depth=1
	subq	$32, %rsp
	callq	xSym
	addq	$32, %rsp
	cmpq	%r12, %rax
	jne	.LBB229_36
# %bb.35:                               # %"$4.i26.thread"
                                        #   in Loop: Header=BB229_30 Depth=1
	addq	$8, %rbx
	movl	$1, %eax
	movl	$2, %esi
	jmp	.LBB229_45
	.p2align	4, 0x90
.LBB229_36:                             # %"$3.i16"
                                        #   in Loop: Header=BB229_30 Depth=1
	movq	-8(%rax), %rsi
	testb	$8, %sil
	je	.LBB229_39
	jmp	.LBB229_37
	.p2align	4, 0x90
.LBB229_38:                             # %"$8.i21"
                                        #   in Loop: Header=BB229_39 Depth=2
	movq	8(%rsi), %rsi
.LBB229_39:                             # %"$8.i21"
                                        #   Parent Loop BB229_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	testb	$6, %sil
	je	.LBB229_38
# %bb.40:                               # %xName.exit23
                                        #   in Loop: Header=BB229_30 Depth=1
	movl	$1, %eax
	testb	$4, %sil
	movq	%rsi, %rdx
	je	.LBB229_43
# %bb.41:                               # %"$3.i25.preheader"
                                        #   in Loop: Header=BB229_30 Depth=1
	movl	$1, %eax
	movq	%rsi, %rdx
	.p2align	4, 0x90
.LBB229_42:                             # %"$3.i25"
                                        #   Parent Loop BB229_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addq	$8, %rax
	movq	4(%rdx), %rdx
	testb	$4, %dl
	jne	.LBB229_42
.LBB229_43:                             # %"$4.i26"
                                        #   in Loop: Header=BB229_30 Depth=1
	addq	$8, %rbx
	shrq	$4, %rdx
	je	.LBB229_45
	.p2align	4, 0x90
.LBB229_44:                             # %"$6.i28"
                                        #   Parent Loop BB229_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	incq	%rax
	shrq	$8, %rdx
	jne	.LBB229_44
.LBB229_45:                             # %bufSize.exit
                                        #   in Loop: Header=BB229_30 Depth=1
	addq	$15, %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	xorl	%ecx, %ecx
	movq	%rax, %rdx
	testq	%rcx, %rcx
	jne	.LBB229_54
	.p2align	4, 0x90
.LBB229_47:                             # %"$2.i.i"
                                        #   in Loop: Header=BB229_30 Depth=1
	cmpq	$2, %rsi
	je	.LBB229_48
# %bb.51:                               # %"$5.i.i"
                                        #   in Loop: Header=BB229_30 Depth=1
	testb	$2, %sil
	jne	.LBB229_52
# %bb.53:                               # %"$7.i.i"
                                        #   in Loop: Header=BB229_30 Depth=1
	movq	-4(%rsi), %rcx
	movq	4(%rsi), %rsi
	jmp	.LBB229_54
	.p2align	4, 0x90
.LBB229_52:                             # %"$8.i.i"
                                        #   in Loop: Header=BB229_30 Depth=1
	movq	%rsi, %rcx
	shrq	$4, %rcx
	movl	$2, %esi
	.p2align	4, 0x90
.LBB229_54:                             # %symByte.exit.i
                                        #   Parent Loop BB229_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movb	%cl, (%rdx)
	testb	%cl, %cl
	je	.LBB229_49
# %bb.55:                               # %"$3.i32"
                                        #   in Loop: Header=BB229_54 Depth=2
	shrq	$8, %rcx
	incq	%rdx
	testq	%rcx, %rcx
	jne	.LBB229_54
	jmp	.LBB229_47
.LBB229_50:                             # %"$7"
	movq	$0, 8(%rbx)
	subq	$32, %rsp
	callq	flushAll
	addq	$32, %rsp
	movq	(%r15), %rcx
	subq	$32, %rsp
	movq	%r15, %rdx
	callq	execvp
	addq	$32, %rsp
	movq	(%r15), %rcx
	subq	$32, %rsp
	callq	execErr
.LBB229_37:                             # %"$6.i3"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rax, %rdx
	callq	nameErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _call;
	.scl	2;
	.type	32;
	.endef
	.globl	_call                           # -- Begin function _call
	.p2align	4, 0x90
_call:                                  # @_call
.seh_proc _call
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %r15
	movq	8(%rcx), %rbx
	movl	$1, %eax
	testb	$15, %bl
	jne	.LBB230_3
# %bb.1:                                # %"$3.preheader"
	movl	$1, %eax
	movq	%rbx, %rcx
	.p2align	4, 0x90
.LBB230_2:                              # %"$3"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rcx
	incq	%rax
	testb	$15, %cl
	je	.LBB230_2
.LBB230_3:                              # %"$4"
	leaq	15(,%rax,8), %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	(%rbx), %rcx
	testb	$6, %cl
	jne	.LBB230_7
# %bb.4:                                # %"$3.i"
	testb	$8, %cl
	jne	.LBB230_5
# %bb.6:                                # %"$5.i"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB230_7
.LBB230_5:                              # %"$6.i"
	movq	(%rcx), %rcx
.LBB230_7:                              # %evSym.exit
	subq	$32, %rsp
	callq	xSym
	addq	$32, %rsp
	leaq	SymTab+8(%rip), %r13
	cmpq	%r13, %rax
	jne	.LBB230_9
# %bb.8:
	movl	$2, %ecx
	movl	$1, %eax
	jmp	.LBB230_18
.LBB230_9:                              # %"$3.i3"
	movq	-8(%rax), %rcx
	testb	$8, %cl
	jne	.LBB230_37
	.p2align	4, 0x90
# %bb.11:                               # %"$8.i"
	testb	$6, %cl
	jne	.LBB230_12
.LBB230_10:                             # %"$8.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rcx
	testb	$6, %cl
	je	.LBB230_10
.LBB230_12:                             # %xName.exit
	movl	$1, %eax
	testb	$4, %cl
	movq	%rcx, %rdx
	je	.LBB230_15
# %bb.13:                               # %"$3.i.i.preheader"
	movl	$1, %eax
	movq	%rcx, %rdx
	.p2align	4, 0x90
.LBB230_14:                             # %"$3.i.i"
                                        # =>This Inner Loop Header: Depth=1
	addq	$8, %rax
	movq	4(%rdx), %rdx
	testb	$4, %dl
	jne	.LBB230_14
.LBB230_15:                             # %"$4.i.i"
	shrq	$4, %rdx
	je	.LBB230_17
	.p2align	4, 0x90
.LBB230_16:                             # %"$6.i.i"
                                        # =>This Inner Loop Header: Depth=1
	incq	%rax
	shrq	$8, %rdx
	jne	.LBB230_16
.LBB230_17:                             # %bufSize.exit.i
	testb	$2, %cl
	jne	.LBB230_18
# %bb.19:                               # %"$3.i7"
	movq	-4(%rcx), %rdx
	movq	%rdx, %rdi
	shrq	$8, %rdi
	cmpb	$126, %dl
	jne	.LBB230_21
	jmp	.LBB230_26
.LBB230_18:                             # %"$2.i"
	movq	%rcx, %rdx
	shrq	$4, %rdx
	movq	%rcx, %rdi
	shrq	$12, %rdi
	cmpb	$126, %dl
	je	.LBB230_26
.LBB230_21:                             # %"$4.i"
	cmpb	$64, %dl
	je	.LBB230_25
# %bb.22:                               # %"$4.i"
	cmpb	$43, %dl
	jne	.LBB230_28
# %bb.23:                               # %"$9.i"
	cmpb	$126, %dil
	je	.LBB230_26
# %bb.24:                               # %"$9.i"
	cmpb	$64, %dil
	jne	.LBB230_28
.LBB230_25:                             # %"$11.i"
	movq	($PilLen)(%rip), %rdx
	jmp	.LBB230_27
.LBB230_26:                             # %"$17.i"
	movq	($UsrLen)(%rip), %rdx
.LBB230_27:                             # %pathSize.exit
	leaq	-1(%rax,%rdx), %rax
.LBB230_28:                             # %pathSize.exit
	addq	$15, %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	subq	$32, %rsp
	movq	%rdi, %rdx
	callq	pathString
	addq	$32, %rsp
	movq	%rdi, (%r14)
	movq	8(%rbx), %rdi
	testb	$15, %dil
	movq	%r14, %r12
	je	.LBB230_29
.LBB230_50:                             # %"$7"
	movq	$0, 8(%r12)
	movl	($OutFDs)(%rip), %edi
	testl	%edi, %edi
	jle	.LBB230_56
# %bb.51:                               # %"$3.i36.preheader"
	movq	($OutFiles)(%rip), %rbx
	xorl	%esi, %esi
	jmp	.LBB230_52
	.p2align	4, 0x90
.LBB230_55:                             # %flush.exit.i
                                        #   in Loop: Header=BB230_52 Depth=1
	incq	%rsi
	cmpl	%esi, %edi
	jle	.LBB230_56
.LBB230_52:                             # %"$3.i36"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rbx,%rsi,8), %rdx
	testq	%rdx, %rdx
	je	.LBB230_55
# %bb.53:                               # %"$3.i.i38"
                                        #   in Loop: Header=BB230_52 Depth=1
	movl	4(%rdx), %r8d
	testl	%r8d, %r8d
	je	.LBB230_55
# %bb.54:                               # %"$6.i.i39"
                                        #   in Loop: Header=BB230_52 Depth=1
	movl	$0, 4(%rdx)
	movl	(%rdx), %ecx
	addq	$8, %rdx
	subq	$32, %rsp
	callq	wrBytes
	addq	$32, %rsp
	jmp	.LBB230_55
.LBB230_56:                             # %flushAll.exit
	movq	%r13, %rsi
	subq	$32, %rsp
	xorl	%r13d, %r13d
	xorl	%ecx, %ecx
	callq	tcgetpgrp
	addq	$32, %rsp
	movl	%eax, %r12d
	cmpb	$1, Tio(%rip)
	jne	.LBB230_58
# %bb.57:                               # %"$9"
	subq	$32, %rsp
	callq	getpgrp
	addq	$32, %rsp
	cmpl	%eax, %r12d
	sete	%r13b
.LBB230_58:                             # %"$8"
	subq	$32, %rsp
	callq	fork
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB230_59
# %bb.65:                               # %"$11"
	je	.LBB230_66
# %bb.69:                               # %"$10"
	movl	%eax, %ebx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	subq	$32, %rsp
	movl	%ebx, %ecx
	xorl	%edx, %edx
	callq	setpgid
	addq	$32, %rsp
	testb	%r13b, %r13b
	je	.LBB230_70
# %bb.74:                               # %"$17"
	subq	$32, %rsp
	xorl	%ecx, %ecx
	movl	%ebx, %edx
	callq	tcsetpgrp
	addq	$32, %rsp
	leaq	.L$84(%rip), %r14
	leaq	SymTab+8(%rip), %r13
	.p2align	4, 0x90
.LBB230_75:                             # %"$19.us"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	movl	%ebx, %ecx
	movq	%rdi, %rdx
	callq	waitWuntraced
	addq	$32, %rsp
	subq	$32, %rsp
	testl	%eax, %eax
	jns	.LBB230_76
# %bb.78:                               # %"$21.us"
                                        #   in Loop: Header=BB230_75 Depth=1
	callq	gErrno
	addq	$32, %rsp
	cmpl	$2, %eax
	jne	.LBB230_73
# %bb.79:                               # %"$24.us"
                                        #   in Loop: Header=BB230_75 Depth=1
	cmpl	$0, ($Signal)(%rip)
	je	.LBB230_75
# %bb.80:                               # %"$25.us"
                                        #   in Loop: Header=BB230_75 Depth=1
	subq	$32, %rsp
	movq	%r15, %rcx
	callq	sighandler
	addq	$32, %rsp
	jmp	.LBB230_75
.LBB230_76:                             # %"$27.us"
                                        #   in Loop: Header=BB230_75 Depth=1
	xorl	%ecx, %ecx
	movl	%r12d, %edx
	callq	tcsetpgrp
	movq	%rdi, %rcx
	callq	wifStopped
	addq	$32, %rsp
	testl	%eax, %eax
	je	.LBB230_84
# %bb.77:                               # %"$29.us"
                                        #   in Loop: Header=BB230_75 Depth=1
	subq	$32, %rsp
	xorl	%ecx, %ecx
	movq	%r14, %rdx
	movq	%r13, %r8
	callq	repl
	xorl	%ecx, %ecx
	movl	%ebx, %edx
	callq	tcsetpgrp
	addq	$32, %rsp
	movl	Sig+32(%rip), %edx
	subq	$32, %rsp
	movl	%ebx, %ecx
	callq	kill
	addq	$32, %rsp
	jmp	.LBB230_75
.LBB230_70:
	leaq	.L$84(%rip), %r14
	leaq	SymTab+8(%rip), %r12
	.p2align	4, 0x90
.LBB230_71:                             # %"$19"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	movl	%ebx, %ecx
	movq	%rdi, %rdx
	callq	waitWuntraced
	addq	$32, %rsp
	subq	$32, %rsp
	testl	%eax, %eax
	jns	.LBB230_83
# %bb.72:                               # %"$21"
                                        #   in Loop: Header=BB230_71 Depth=1
	callq	gErrno
	addq	$32, %rsp
	cmpl	$2, %eax
	jne	.LBB230_73
# %bb.81:                               # %"$24"
                                        #   in Loop: Header=BB230_71 Depth=1
	cmpl	$0, ($Signal)(%rip)
	je	.LBB230_71
# %bb.82:                               # %"$25"
                                        #   in Loop: Header=BB230_71 Depth=1
	subq	$32, %rsp
	movq	%r15, %rcx
	callq	sighandler
	addq	$32, %rsp
	jmp	.LBB230_71
.LBB230_83:                             # %"$28"
                                        #   in Loop: Header=BB230_71 Depth=1
	movq	%rdi, %rcx
	callq	wifStopped
	addq	$32, %rsp
	testl	%eax, %eax
	je	.LBB230_84
# %bb.85:                               # %"$29"
                                        #   in Loop: Header=BB230_71 Depth=1
	subq	$32, %rsp
	xorl	%ecx, %ecx
	movq	%r14, %rdx
	movq	%r12, %r8
	callq	repl
	addq	$32, %rsp
	movl	Sig+32(%rip), %edx
	subq	$32, %rsp
	movl	%ebx, %ecx
	callq	kill
	addq	$32, %rsp
	jmp	.LBB230_71
.LBB230_84:                             # %"$31"
	movslq	(%rdi), %rax
	movq	%rax, %rcx
	shlq	$4, %rcx
	orq	$2, %rcx
	testq	%rax, %rax
	movq	%rcx, SymTab+456(%rip)
	leaq	SymTab+280(%rip), %rcx
	movq	%rsi, %rax
	cmoveq	%rcx, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB230_29:                             # %"$6.preheader"
	movq	%r14, %r12
	jmp	.LBB230_30
	.p2align	4, 0x90
.LBB230_48:                             # %symByte.exit.thread.i
                                        #   in Loop: Header=BB230_30 Depth=1
	movb	$0, (%rdx)
.LBB230_49:                             # %bufString.exit
                                        #   in Loop: Header=BB230_30 Depth=1
	movq	%rax, (%r12)
	movq	8(%rdi), %rdi
	testb	$15, %dil
	jne	.LBB230_50
.LBB230_30:                             # %"$6"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB230_38 Depth 2
                                        #     Child Loop BB230_42 Depth 2
                                        #     Child Loop BB230_44 Depth 2
                                        #     Child Loop BB230_63 Depth 2
	movq	(%rdi), %rcx
	testb	$6, %cl
	jne	.LBB230_34
# %bb.31:                               # %"$3.i11"
                                        #   in Loop: Header=BB230_30 Depth=1
	testb	$8, %cl
	jne	.LBB230_32
# %bb.33:                               # %"$5.i13"
                                        #   in Loop: Header=BB230_30 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB230_34
.LBB230_32:                             # %"$6.i12"
                                        #   in Loop: Header=BB230_30 Depth=1
	movq	(%rcx), %rcx
	.p2align	4, 0x90
.LBB230_34:                             # %evSym.exit15
                                        #   in Loop: Header=BB230_30 Depth=1
	subq	$32, %rsp
	callq	xSym
	addq	$32, %rsp
	cmpq	%r13, %rax
	jne	.LBB230_36
# %bb.35:                               # %"$4.i27.thread"
                                        #   in Loop: Header=BB230_30 Depth=1
	addq	$8, %r12
	movl	$1, %eax
	movl	$2, %ebx
	jmp	.LBB230_45
	.p2align	4, 0x90
.LBB230_36:                             # %"$3.i17"
                                        #   in Loop: Header=BB230_30 Depth=1
	movq	-8(%rax), %rbx
	testb	$8, %bl
	jne	.LBB230_37
	.p2align	4, 0x90
# %bb.39:                               # %"$8.i22"
                                        #   in Loop: Header=BB230_30 Depth=1
	testb	$6, %bl
	jne	.LBB230_40
.LBB230_38:                             # %"$8.i22"
                                        #   Parent Loop BB230_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rbx), %rbx
	testb	$6, %bl
	je	.LBB230_38
.LBB230_40:                             # %xName.exit24
                                        #   in Loop: Header=BB230_30 Depth=1
	movl	$1, %eax
	testb	$4, %bl
	movq	%rbx, %rdx
	je	.LBB230_43
# %bb.41:                               # %"$3.i26.preheader"
                                        #   in Loop: Header=BB230_30 Depth=1
	movl	$1, %eax
	movq	%rbx, %rdx
	.p2align	4, 0x90
.LBB230_42:                             # %"$3.i26"
                                        #   Parent Loop BB230_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addq	$8, %rax
	movq	4(%rdx), %rdx
	testb	$4, %dl
	jne	.LBB230_42
.LBB230_43:                             # %"$4.i27"
                                        #   in Loop: Header=BB230_30 Depth=1
	addq	$8, %r12
	shrq	$4, %rdx
	je	.LBB230_45
	.p2align	4, 0x90
.LBB230_44:                             # %"$6.i29"
                                        #   Parent Loop BB230_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	incq	%rax
	shrq	$8, %rdx
	jne	.LBB230_44
.LBB230_45:                             # %bufSize.exit
                                        #   in Loop: Header=BB230_30 Depth=1
	addq	$15, %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	xorl	%ecx, %ecx
	movq	%rax, %rdx
	testq	%rcx, %rcx
	jne	.LBB230_63
	.p2align	4, 0x90
.LBB230_47:                             # %"$2.i.i"
                                        #   in Loop: Header=BB230_30 Depth=1
	cmpq	$2, %rbx
	je	.LBB230_48
# %bb.60:                               # %"$5.i.i"
                                        #   in Loop: Header=BB230_30 Depth=1
	testb	$2, %bl
	jne	.LBB230_61
# %bb.62:                               # %"$7.i.i"
                                        #   in Loop: Header=BB230_30 Depth=1
	movq	-4(%rbx), %rcx
	movq	4(%rbx), %rbx
	jmp	.LBB230_63
	.p2align	4, 0x90
.LBB230_61:                             # %"$8.i.i"
                                        #   in Loop: Header=BB230_30 Depth=1
	movq	%rbx, %rcx
	shrq	$4, %rcx
	movl	$2, %ebx
	.p2align	4, 0x90
.LBB230_63:                             # %symByte.exit.i
                                        #   Parent Loop BB230_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movb	%cl, (%rdx)
	testb	%cl, %cl
	je	.LBB230_49
# %bb.64:                               # %"$3.i33"
                                        #   in Loop: Header=BB230_63 Depth=2
	shrq	$8, %rcx
	incq	%rdx
	testq	%rcx, %rcx
	jne	.LBB230_63
	jmp	.LBB230_47
.LBB230_73:                             # %"$23"
	subq	$32, %rsp
	leaq	.L$83(%rip), %r8
	movq	%r15, %rcx
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	callq	err
.LBB230_37:                             # %"$6.i4"
	subq	$32, %rsp
	movq	%r15, %rcx
	movq	%rax, %rdx
	callq	nameErr
.LBB230_59:                             # %"$12"
	subq	$32, %rsp
	movq	%r15, %rcx
	callq	forkErr
.LBB230_66:                             # %"$14"
	subq	$32, %rsp
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	callq	setpgid
	addq	$32, %rsp
	testb	%r13b, %r13b
	je	.LBB230_68
# %bb.67:                               # %"$15"
	subq	$32, %rsp
	callq	getpid
	xorl	%ecx, %ecx
	movl	%eax, %edx
	callq	tcsetpgrp
	addq	$32, %rsp
.LBB230_68:                             # %"$16"
	movq	(%r14), %rcx
	subq	$32, %rsp
	movq	%r14, %rdx
	callq	execvp
	addq	$32, %rsp
	movq	(%r14), %rcx
	subq	$32, %rsp
	callq	execErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _ipid;
	.scl	2;
	.type	32;
	.endef
	.globl	_ipid                           # -- Begin function _ipid
	.p2align	4, 0x90
_ipid:                                  # @_ipid
# %bb.0:                                # %"$1"
	movq	env+32(%rip), %rcx
	leaq	SymTab+8(%rip), %rax
	testq	%rcx, %rcx
	je	.LBB231_3
# %bb.1:                                # %"$3"
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	jl	.LBB231_3
# %bb.2:                                # %"$4"
	shlq	$4, %rcx
	orq	$2, %rcx
	movq	%rcx, %rax
.LBB231_3:                              # %"$6"
	retq
                                        # -- End function
	.def	 _opid;
	.scl	2;
	.type	32;
	.endef
	.globl	_opid                           # -- Begin function _opid
	.p2align	4, 0x90
_opid:                                  # @_opid
# %bb.0:                                # %"$1"
	movq	env+40(%rip), %rcx
	leaq	SymTab+8(%rip), %rax
	testq	%rcx, %rcx
	je	.LBB232_3
# %bb.1:                                # %"$3"
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	jl	.LBB232_3
# %bb.2:                                # %"$4"
	shlq	$4, %rcx
	orq	$2, %rcx
	movq	%rcx, %rax
.LBB232_3:                              # %"$6"
	retq
                                        # -- End function
	.def	 _kill;
	.scl	2;
	.type	32;
	.endef
	.globl	_kill                           # -- Begin function _kill
	.p2align	4, 0x90
_kill:                                  # @_kill
.seh_proc _kill
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rdi
	movq	8(%rcx), %rbx
	movq	(%rbx), %rsi
	testb	$6, %sil
	jne	.LBB233_4
# %bb.1:                                # %"$3.i"
	testb	$8, %sil
	jne	.LBB233_2
# %bb.3:                                # %"$5.i"
	movq	%rsi, %rcx
	callq	evList
	movq	%rax, %rsi
	jmp	.LBB233_4
.LBB233_2:                              # %"$6.i"
	movq	(%rsi), %rsi
.LBB233_4:                              # %"$2.i"
	testb	$2, %sil
	je	.LBB233_14
# %bb.5:                                # %evCnt.exit
	movq	8(%rbx), %rax
	testb	$15, %al
	je	.LBB233_7
# %bb.6:                                # %"$2"
	movl	Sig+24(%rip), %edx
	jmp	.LBB233_13
.LBB233_7:                              # %"$3"
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB233_11
# %bb.8:                                # %"$3.i4"
	testb	$8, %al
	jne	.LBB233_9
# %bb.10:                               # %"$5.i6"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB233_11
.LBB233_9:                              # %"$6.i5"
	movq	(%rax), %rax
.LBB233_11:                             # %"$2.i8"
	testb	$2, %al
	je	.LBB233_15
# %bb.12:                               # %evCnt.exit11
	movq	%rax, %rcx
	shrq	$4, %rcx
	movl	%ecx, %edx
	negl	%edx
	testb	$8, %al
	cmovel	%ecx, %edx
.LBB233_13:                             # %"$4"
	movq	%rsi, %rax
	shrq	$4, %rax
	movl	%eax, %ecx
	negl	%ecx
	testb	$8, %sil
	cmovel	%eax, %ecx
	callq	kill
	testl	%eax, %eax
	leaq	SymTab+280(%rip), %rcx
	leaq	SymTab+8(%rip), %rax
	cmoveq	%rcx, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
.LBB233_14:                             # %"$2.i.i"
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	cntErr
.LBB233_15:                             # %"$2.i.i9"
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	cntErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _fork;
	.scl	2;
	.type	32;
	.endef
	.globl	_fork                           # -- Begin function _fork
	.p2align	4, 0x90
_fork:                                  # @_fork
.seh_proc _fork
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	callq	forkLisp
	cltq
	movq	%rax, %rcx
	shlq	$4, %rcx
	orq	$2, %rcx
	testl	%eax, %eax
	leaq	SymTab+8(%rip), %rax
	cmovneq	%rcx, %rax
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _detach;
	.scl	2;
	.type	32;
	.endef
	.globl	_detach                         # -- Begin function _detach
	.p2align	4, 0x90
_detach:                                # @_detach
.seh_proc _detach
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	SymTab+216(%rip), %rsi
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rsi
	je	.LBB235_12
# %bb.1:                                # %"$2"
	movq	%rax, SymTab+216(%rip)
	movl	($Tell)(%rip), %ecx
	callq	close
	movl	$0, ($Tell)(%rip)
	movl	($Hear)(%rip), %ebp
	movslq	%ebp, %rdi
	movl	%edi, %ecx
	callq	close
	cmpl	%edi, ($InFDs)(%rip)
	jle	.LBB235_6
# %bb.2:                                # %"$2.i"
	movq	($InFiles)(%rip), %rax
	movq	(%rax,%rdi,8), %rbx
	cmpq	($InFile)(%rip), %rbx
	jne	.LBB235_4
# %bb.3:                                # %"$4.i"
	movq	(%rax), %rax
	movq	%rax, ($InFile)(%rip)
	movl	12(%rax), %eax
	movl	%eax, ($Chr)(%rip)
.LBB235_4:                              # %"$5.i"
	testq	%rbx, %rbx
	je	.LBB235_6
# %bb.5:                                # %"$6.i"
	movq	(%rbx), %rcx
	callq	free
	movq	$0, (%rbx)
	movl	$-1, 8(%rbx)
.LBB235_6:                              # %closeInFile.exit
	cmpl	%ebp, ($OutFDs)(%rip)
	jle	.LBB235_11
# %bb.7:                                # %"$2.i1"
	movq	($OutFiles)(%rip), %rcx
	movq	(%rcx,%rdi,8), %rax
	cmpq	($OutFile)(%rip), %rax
	jne	.LBB235_9
# %bb.8:                                # %"$4.i2"
	movq	8(%rcx), %rcx
	movq	%rcx, ($OutFile)(%rip)
.LBB235_9:                              # %"$5.i4"
	testq	%rax, %rax
	je	.LBB235_11
# %bb.10:                               # %"$6.i5"
	movl	$-1, (%rax)
.LBB235_11:                             # %closeOutFile.exit
	movl	$0, ($Hear)(%rip)
	movl	($Mic)(%rip), %ecx
	callq	close
	movl	$0, ($Mic)(%rip)
	movl	$0, ($Slot)(%rip)
	callq	setsid
.LBB235_12:                             # %"$3"
	movq	%rsi, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _bye;
	.scl	2;
	.type	32;
	.endef
	.globl	_bye                            # -- Begin function _bye
	.p2align	4, 0x90
_bye:                                   # @_bye
.seh_proc _bye
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB236_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB236_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB236_4
.LBB236_2:                              # %"$6"
	movq	(%rax), %rax
.LBB236_4:                              # %"$2"
	xorl	%ecx, %ecx
	leaq	SymTab+8(%rip), %rdx
	cmpq	%rdx, %rax
	je	.LBB236_7
# %bb.5:                                # %"$8"
	testb	$2, %al
	jne	.LBB236_6
# %bb.8:                                # %"$2.i"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	cntErr
.LBB236_6:                              # %xCnt.exit
	movq	%rax, %rdx
	shrq	$4, %rdx
	movl	%edx, %ecx
	negl	%ecx
	testb	$8, %al
	cmovel	%edx, %ecx
.LBB236_7:                              # %"$9"
	callq	bye
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _car;
	.scl	2;
	.type	32;
	.endef
	.globl	_car                            # -- Begin function _car
	.p2align	4, 0x90
_car:                                   # @_car
.seh_proc _car
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB237_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB237_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB237_4
.LBB237_2:                              # %"$6"
	movq	(%rax), %rax
.LBB237_4:                              # %"$2"
	testb	$6, %al
	jne	.LBB237_6
# %bb.5:                                # %"$8"
	movq	(%rax), %rax
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB237_6:                              # %"$7"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	varErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cdr;
	.scl	2;
	.type	32;
	.endef
	.globl	_cdr                            # -- Begin function _cdr
	.p2align	4, 0x90
_cdr:                                   # @_cdr
.seh_proc _cdr
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB238_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB238_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB238_4
.LBB238_2:                              # %"$6"
	movq	(%rax), %rax
.LBB238_4:                              # %"$2"
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB238_6
# %bb.5:                                # %"$2"
	movl	%eax, %ecx
	andl	$15, %ecx
	testq	%rcx, %rcx
	jne	.LBB238_7
.LBB238_6:                              # %"$10"
	movq	8(%rax), %rax
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB238_7:                              # %"$9"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	lstErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _caar;
	.scl	2;
	.type	32;
	.endef
	.globl	_caar                           # -- Begin function _caar
	.p2align	4, 0x90
_caar:                                  # @_caar
.seh_proc _caar
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB239_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB239_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB239_4
.LBB239_2:                              # %"$6"
	movq	(%rax), %rax
.LBB239_4:                              # %"$2"
	testb	$6, %al
	jne	.LBB239_7
# %bb.5:                                # %"$8"
	movq	(%rax), %rdx
	testb	$6, %dl
	jne	.LBB239_8
# %bb.6:                                # %"$10"
	movq	(%rdx), %rax
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB239_7:                              # %"$7"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	varErr
.LBB239_8:                              # %"$9"
	movq	%rsi, %rcx
	callq	varErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cadr;
	.scl	2;
	.type	32;
	.endef
	.globl	_cadr                           # -- Begin function _cadr
	.p2align	4, 0x90
_cadr:                                  # @_cadr
.seh_proc _cadr
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB240_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB240_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB240_4
.LBB240_2:                              # %"$6"
	movq	(%rax), %rax
.LBB240_4:                              # %"$2"
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB240_6
# %bb.5:                                # %"$2"
	movl	%eax, %ecx
	andl	$15, %ecx
	testq	%rcx, %rcx
	jne	.LBB240_8
.LBB240_6:                              # %"$10"
	movq	8(%rax), %rdx
	testb	$6, %dl
	jne	.LBB240_9
# %bb.7:                                # %"$12"
	movq	(%rdx), %rax
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB240_8:                              # %"$9"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	lstErr
.LBB240_9:                              # %"$11"
	movq	%rsi, %rcx
	callq	varErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cdar;
	.scl	2;
	.type	32;
	.endef
	.globl	_cdar                           # -- Begin function _cdar
	.p2align	4, 0x90
_cdar:                                  # @_cdar
.seh_proc _cdar
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB241_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB241_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB241_4
.LBB241_2:                              # %"$6"
	movq	(%rax), %rax
.LBB241_4:                              # %"$2"
	testb	$6, %al
	jne	.LBB241_8
# %bb.5:                                # %"$8"
	movq	(%rax), %rdx
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rdx
	je	.LBB241_7
# %bb.6:                                # %"$8"
	movl	%edx, %eax
	andl	$15, %eax
	testq	%rax, %rax
	jne	.LBB241_9
.LBB241_7:                              # %"$12"
	movq	8(%rdx), %rax
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB241_8:                              # %"$7"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	varErr
.LBB241_9:                              # %"$11"
	movq	%rsi, %rcx
	callq	lstErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cddr;
	.scl	2;
	.type	32;
	.endef
	.globl	_cddr                           # -- Begin function _cddr
	.p2align	4, 0x90
_cddr:                                  # @_cddr
.seh_proc _cddr
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB242_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB242_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB242_4
.LBB242_2:                              # %"$6"
	movq	(%rax), %rax
.LBB242_4:                              # %"$2"
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB242_6
# %bb.5:                                # %"$2"
	movl	%eax, %edx
	andl	$15, %edx
	testq	%rdx, %rdx
	jne	.LBB242_9
.LBB242_6:                              # %"$10"
	movq	8(%rax), %rdx
	cmpq	%rcx, %rdx
	je	.LBB242_8
# %bb.7:                                # %"$10"
	movl	%edx, %eax
	andl	$15, %eax
	testq	%rax, %rax
	jne	.LBB242_10
.LBB242_8:                              # %"$14"
	movq	8(%rdx), %rax
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB242_9:                              # %"$9"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	lstErr
.LBB242_10:                             # %"$13"
	movq	%rsi, %rcx
	callq	lstErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _caaar;
	.scl	2;
	.type	32;
	.endef
	.globl	_caaar                          # -- Begin function _caaar
	.p2align	4, 0x90
_caaar:                                 # @_caaar
.seh_proc _caaar
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB243_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB243_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB243_4
.LBB243_2:                              # %"$6"
	movq	(%rax), %rax
.LBB243_4:                              # %"$2"
	testb	$6, %al
	jne	.LBB243_8
# %bb.5:                                # %"$8"
	movq	(%rax), %rdx
	testb	$6, %dl
	jne	.LBB243_9
# %bb.6:                                # %"$10"
	movq	(%rdx), %rdx
	testb	$6, %dl
	jne	.LBB243_9
# %bb.7:                                # %"$12"
	movq	(%rdx), %rax
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB243_9:                              # %"$9"
	movq	%rsi, %rcx
	callq	varErr
.LBB243_8:                              # %"$7"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	varErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _caadr;
	.scl	2;
	.type	32;
	.endef
	.globl	_caadr                          # -- Begin function _caadr
	.p2align	4, 0x90
_caadr:                                 # @_caadr
.seh_proc _caadr
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB244_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB244_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB244_4
.LBB244_2:                              # %"$6"
	movq	(%rax), %rax
.LBB244_4:                              # %"$2"
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB244_6
# %bb.5:                                # %"$2"
	movl	%eax, %ecx
	andl	$15, %ecx
	testq	%rcx, %rcx
	jne	.LBB244_9
.LBB244_6:                              # %"$10"
	movq	8(%rax), %rdx
	testb	$6, %dl
	jne	.LBB244_10
# %bb.7:                                # %"$12"
	movq	(%rdx), %rdx
	testb	$6, %dl
	jne	.LBB244_10
# %bb.8:                                # %"$14"
	movq	(%rdx), %rax
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB244_10:                             # %"$11"
	movq	%rsi, %rcx
	callq	varErr
.LBB244_9:                              # %"$9"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	lstErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cadar;
	.scl	2;
	.type	32;
	.endef
	.globl	_cadar                          # -- Begin function _cadar
	.p2align	4, 0x90
_cadar:                                 # @_cadar
.seh_proc _cadar
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB245_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB245_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB245_4
.LBB245_2:                              # %"$6"
	movq	(%rax), %rax
.LBB245_4:                              # %"$2"
	testb	$6, %al
	jne	.LBB245_9
# %bb.5:                                # %"$8"
	movq	(%rax), %rdx
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rdx
	je	.LBB245_7
# %bb.6:                                # %"$8"
	movl	%edx, %eax
	andl	$15, %eax
	testq	%rax, %rax
	jne	.LBB245_10
.LBB245_7:                              # %"$12"
	movq	8(%rdx), %rdx
	testb	$6, %dl
	jne	.LBB245_11
# %bb.8:                                # %"$14"
	movq	(%rdx), %rax
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB245_9:                              # %"$7"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	varErr
.LBB245_10:                             # %"$11"
	movq	%rsi, %rcx
	callq	lstErr
.LBB245_11:                             # %"$13"
	movq	%rsi, %rcx
	callq	varErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _caddr;
	.scl	2;
	.type	32;
	.endef
	.globl	_caddr                          # -- Begin function _caddr
	.p2align	4, 0x90
_caddr:                                 # @_caddr
.seh_proc _caddr
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB246_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB246_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB246_4
.LBB246_2:                              # %"$6"
	movq	(%rax), %rax
.LBB246_4:                              # %"$2"
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB246_6
# %bb.5:                                # %"$2"
	movl	%eax, %edx
	andl	$15, %edx
	testq	%rdx, %rdx
	jne	.LBB246_10
.LBB246_6:                              # %"$10"
	movq	8(%rax), %rdx
	cmpq	%rcx, %rdx
	je	.LBB246_8
# %bb.7:                                # %"$10"
	movl	%edx, %eax
	andl	$15, %eax
	testq	%rax, %rax
	jne	.LBB246_11
.LBB246_8:                              # %"$14"
	movq	8(%rdx), %rdx
	testb	$6, %dl
	jne	.LBB246_12
# %bb.9:                                # %"$16"
	movq	(%rdx), %rax
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB246_10:                             # %"$9"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	lstErr
.LBB246_11:                             # %"$13"
	movq	%rsi, %rcx
	callq	lstErr
.LBB246_12:                             # %"$15"
	movq	%rsi, %rcx
	callq	varErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cdaar;
	.scl	2;
	.type	32;
	.endef
	.globl	_cdaar                          # -- Begin function _cdaar
	.p2align	4, 0x90
_cdaar:                                 # @_cdaar
.seh_proc _cdaar
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB247_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB247_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB247_4
.LBB247_2:                              # %"$6"
	movq	(%rax), %rax
.LBB247_4:                              # %"$2"
	testb	$6, %al
	jne	.LBB247_9
# %bb.5:                                # %"$8"
	movq	(%rax), %rdx
	testb	$6, %dl
	jne	.LBB247_10
# %bb.6:                                # %"$10"
	movq	(%rdx), %rdx
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rdx
	je	.LBB247_8
# %bb.7:                                # %"$10"
	movl	%edx, %eax
	andl	$15, %eax
	testq	%rax, %rax
	jne	.LBB247_11
.LBB247_8:                              # %"$14"
	movq	8(%rdx), %rax
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB247_9:                              # %"$7"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	varErr
.LBB247_10:                             # %"$9"
	movq	%rsi, %rcx
	callq	varErr
.LBB247_11:                             # %"$13"
	movq	%rsi, %rcx
	callq	lstErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cdadr;
	.scl	2;
	.type	32;
	.endef
	.globl	_cdadr                          # -- Begin function _cdadr
	.p2align	4, 0x90
_cdadr:                                 # @_cdadr
.seh_proc _cdadr
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB248_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB248_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB248_4
.LBB248_2:                              # %"$6"
	movq	(%rax), %rax
.LBB248_4:                              # %"$2"
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB248_6
# %bb.5:                                # %"$2"
	movl	%eax, %edx
	andl	$15, %edx
	testq	%rdx, %rdx
	jne	.LBB248_10
.LBB248_6:                              # %"$10"
	movq	8(%rax), %rdx
	testb	$6, %dl
	jne	.LBB248_11
# %bb.7:                                # %"$12"
	movq	(%rdx), %rdx
	cmpq	%rcx, %rdx
	je	.LBB248_9
# %bb.8:                                # %"$12"
	movl	%edx, %eax
	andl	$15, %eax
	testq	%rax, %rax
	jne	.LBB248_12
.LBB248_9:                              # %"$16"
	movq	8(%rdx), %rax
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB248_10:                             # %"$9"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	lstErr
.LBB248_11:                             # %"$11"
	movq	%rsi, %rcx
	callq	varErr
.LBB248_12:                             # %"$15"
	movq	%rsi, %rcx
	callq	lstErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cddar;
	.scl	2;
	.type	32;
	.endef
	.globl	_cddar                          # -- Begin function _cddar
	.p2align	4, 0x90
_cddar:                                 # @_cddar
.seh_proc _cddar
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB249_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB249_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB249_4
.LBB249_2:                              # %"$6"
	movq	(%rax), %rax
.LBB249_4:                              # %"$2"
	testb	$6, %al
	jne	.LBB249_10
# %bb.5:                                # %"$8"
	movq	(%rax), %rdx
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rdx
	je	.LBB249_7
# %bb.6:                                # %"$8"
	movl	%edx, %ecx
	andl	$15, %ecx
	testq	%rcx, %rcx
	jne	.LBB249_11
.LBB249_7:                              # %"$12"
	movq	8(%rdx), %rdx
	cmpq	%rax, %rdx
	je	.LBB249_9
# %bb.8:                                # %"$12"
	movl	%edx, %eax
	andl	$15, %eax
	testq	%rax, %rax
	jne	.LBB249_11
.LBB249_9:                              # %"$16"
	movq	8(%rdx), %rax
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB249_11:                             # %"$11"
	movq	%rsi, %rcx
	callq	lstErr
.LBB249_10:                             # %"$7"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	varErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cdddr;
	.scl	2;
	.type	32;
	.endef
	.globl	_cdddr                          # -- Begin function _cdddr
	.p2align	4, 0x90
_cdddr:                                 # @_cdddr
.seh_proc _cdddr
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB250_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB250_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB250_4
.LBB250_2:                              # %"$6"
	movq	(%rax), %rax
.LBB250_4:                              # %"$2"
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB250_6
# %bb.5:                                # %"$2"
	movl	%eax, %edx
	andl	$15, %edx
	testq	%rdx, %rdx
	jne	.LBB250_11
.LBB250_6:                              # %"$10"
	movq	8(%rax), %rdx
	cmpq	%rcx, %rdx
	je	.LBB250_8
# %bb.7:                                # %"$10"
	movl	%edx, %eax
	andl	$15, %eax
	testq	%rax, %rax
	jne	.LBB250_12
.LBB250_8:                              # %"$14"
	movq	8(%rdx), %rdx
	cmpq	%rcx, %rdx
	je	.LBB250_10
# %bb.9:                                # %"$14"
	movl	%edx, %eax
	andl	$15, %eax
	testq	%rax, %rax
	jne	.LBB250_12
.LBB250_10:                             # %"$18"
	movq	8(%rdx), %rax
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB250_12:                             # %"$13"
	movq	%rsi, %rcx
	callq	lstErr
.LBB250_11:                             # %"$9"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	lstErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _caaaar;
	.scl	2;
	.type	32;
	.endef
	.globl	_caaaar                         # -- Begin function _caaaar
	.p2align	4, 0x90
_caaaar:                                # @_caaaar
.seh_proc _caaaar
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB251_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB251_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB251_4
.LBB251_2:                              # %"$6"
	movq	(%rax), %rax
.LBB251_4:                              # %"$2"
	testb	$6, %al
	jne	.LBB251_9
# %bb.5:                                # %"$8"
	movq	(%rax), %rdx
	testb	$6, %dl
	jne	.LBB251_10
# %bb.6:                                # %"$10"
	movq	(%rdx), %rdx
	testb	$6, %dl
	jne	.LBB251_10
# %bb.7:                                # %"$12"
	movq	(%rdx), %rdx
	testb	$6, %dl
	jne	.LBB251_10
# %bb.8:                                # %"$14"
	movq	(%rdx), %rax
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB251_10:                             # %"$9"
	movq	%rsi, %rcx
	callq	varErr
.LBB251_9:                              # %"$7"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	varErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _caaadr;
	.scl	2;
	.type	32;
	.endef
	.globl	_caaadr                         # -- Begin function _caaadr
	.p2align	4, 0x90
_caaadr:                                # @_caaadr
.seh_proc _caaadr
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB252_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB252_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB252_4
.LBB252_2:                              # %"$6"
	movq	(%rax), %rax
.LBB252_4:                              # %"$2"
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB252_6
# %bb.5:                                # %"$2"
	movl	%eax, %ecx
	andl	$15, %ecx
	testq	%rcx, %rcx
	jne	.LBB252_10
.LBB252_6:                              # %"$10"
	movq	8(%rax), %rdx
	testb	$6, %dl
	jne	.LBB252_11
# %bb.7:                                # %"$12"
	movq	(%rdx), %rdx
	testb	$6, %dl
	jne	.LBB252_11
# %bb.8:                                # %"$14"
	movq	(%rdx), %rdx
	testb	$6, %dl
	jne	.LBB252_11
# %bb.9:                                # %"$16"
	movq	(%rdx), %rax
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB252_11:                             # %"$11"
	movq	%rsi, %rcx
	callq	varErr
.LBB252_10:                             # %"$9"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	lstErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _caadar;
	.scl	2;
	.type	32;
	.endef
	.globl	_caadar                         # -- Begin function _caadar
	.p2align	4, 0x90
_caadar:                                # @_caadar
.seh_proc _caadar
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB253_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB253_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB253_4
.LBB253_2:                              # %"$6"
	movq	(%rax), %rax
.LBB253_4:                              # %"$2"
	testb	$6, %al
	jne	.LBB253_10
# %bb.5:                                # %"$8"
	movq	(%rax), %rdx
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rdx
	je	.LBB253_7
# %bb.6:                                # %"$8"
	movl	%edx, %eax
	andl	$15, %eax
	testq	%rax, %rax
	jne	.LBB253_11
.LBB253_7:                              # %"$12"
	movq	8(%rdx), %rdx
	testb	$6, %dl
	jne	.LBB253_12
# %bb.8:                                # %"$14"
	movq	(%rdx), %rdx
	testb	$6, %dl
	jne	.LBB253_12
# %bb.9:                                # %"$16"
	movq	(%rdx), %rax
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB253_12:                             # %"$13"
	movq	%rsi, %rcx
	callq	varErr
.LBB253_10:                             # %"$7"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	varErr
.LBB253_11:                             # %"$11"
	movq	%rsi, %rcx
	callq	lstErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _caaddr;
	.scl	2;
	.type	32;
	.endef
	.globl	_caaddr                         # -- Begin function _caaddr
	.p2align	4, 0x90
_caaddr:                                # @_caaddr
.seh_proc _caaddr
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB254_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB254_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB254_4
.LBB254_2:                              # %"$6"
	movq	(%rax), %rax
.LBB254_4:                              # %"$2"
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB254_6
# %bb.5:                                # %"$2"
	movl	%eax, %edx
	andl	$15, %edx
	testq	%rdx, %rdx
	jne	.LBB254_11
.LBB254_6:                              # %"$10"
	movq	8(%rax), %rdx
	cmpq	%rcx, %rdx
	je	.LBB254_8
# %bb.7:                                # %"$10"
	movl	%edx, %eax
	andl	$15, %eax
	testq	%rax, %rax
	jne	.LBB254_12
.LBB254_8:                              # %"$14"
	movq	8(%rdx), %rdx
	testb	$6, %dl
	jne	.LBB254_13
# %bb.9:                                # %"$16"
	movq	(%rdx), %rdx
	testb	$6, %dl
	jne	.LBB254_13
# %bb.10:                               # %"$18"
	movq	(%rdx), %rax
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB254_13:                             # %"$15"
	movq	%rsi, %rcx
	callq	varErr
.LBB254_11:                             # %"$9"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	lstErr
.LBB254_12:                             # %"$13"
	movq	%rsi, %rcx
	callq	lstErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cadaar;
	.scl	2;
	.type	32;
	.endef
	.globl	_cadaar                         # -- Begin function _cadaar
	.p2align	4, 0x90
_cadaar:                                # @_cadaar
.seh_proc _cadaar
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB255_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB255_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB255_4
.LBB255_2:                              # %"$6"
	movq	(%rax), %rax
.LBB255_4:                              # %"$2"
	testb	$6, %al
	jne	.LBB255_10
# %bb.5:                                # %"$8"
	movq	(%rax), %rdx
	testb	$6, %dl
	jne	.LBB255_11
# %bb.6:                                # %"$10"
	movq	(%rdx), %rdx
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rdx
	je	.LBB255_8
# %bb.7:                                # %"$10"
	movl	%edx, %eax
	andl	$15, %eax
	testq	%rax, %rax
	jne	.LBB255_12
.LBB255_8:                              # %"$14"
	movq	8(%rdx), %rdx
	testb	$6, %dl
	jne	.LBB255_11
# %bb.9:                                # %"$16"
	movq	(%rdx), %rax
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB255_11:                             # %"$9"
	movq	%rsi, %rcx
	callq	varErr
.LBB255_10:                             # %"$7"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	varErr
.LBB255_12:                             # %"$13"
	movq	%rsi, %rcx
	callq	lstErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cadadr;
	.scl	2;
	.type	32;
	.endef
	.globl	_cadadr                         # -- Begin function _cadadr
	.p2align	4, 0x90
_cadadr:                                # @_cadadr
.seh_proc _cadadr
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB256_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB256_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB256_4
.LBB256_2:                              # %"$6"
	movq	(%rax), %rax
.LBB256_4:                              # %"$2"
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB256_6
# %bb.5:                                # %"$2"
	movl	%eax, %edx
	andl	$15, %edx
	testq	%rdx, %rdx
	jne	.LBB256_11
.LBB256_6:                              # %"$10"
	movq	8(%rax), %rdx
	testb	$6, %dl
	jne	.LBB256_12
# %bb.7:                                # %"$12"
	movq	(%rdx), %rdx
	cmpq	%rcx, %rdx
	je	.LBB256_9
# %bb.8:                                # %"$12"
	movl	%edx, %eax
	andl	$15, %eax
	testq	%rax, %rax
	jne	.LBB256_13
.LBB256_9:                              # %"$16"
	movq	8(%rdx), %rdx
	testb	$6, %dl
	jne	.LBB256_12
# %bb.10:                               # %"$18"
	movq	(%rdx), %rax
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB256_12:                             # %"$11"
	movq	%rsi, %rcx
	callq	varErr
.LBB256_11:                             # %"$9"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	lstErr
.LBB256_13:                             # %"$15"
	movq	%rsi, %rcx
	callq	lstErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _caddar;
	.scl	2;
	.type	32;
	.endef
	.globl	_caddar                         # -- Begin function _caddar
	.p2align	4, 0x90
_caddar:                                # @_caddar
.seh_proc _caddar
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB257_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB257_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB257_4
.LBB257_2:                              # %"$6"
	movq	(%rax), %rax
.LBB257_4:                              # %"$2"
	testb	$6, %al
	jne	.LBB257_11
# %bb.5:                                # %"$8"
	movq	(%rax), %rdx
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rdx
	je	.LBB257_7
# %bb.6:                                # %"$8"
	movl	%edx, %ecx
	andl	$15, %ecx
	testq	%rcx, %rcx
	jne	.LBB257_12
.LBB257_7:                              # %"$12"
	movq	8(%rdx), %rdx
	cmpq	%rax, %rdx
	je	.LBB257_9
# %bb.8:                                # %"$12"
	movl	%edx, %eax
	andl	$15, %eax
	testq	%rax, %rax
	jne	.LBB257_12
.LBB257_9:                              # %"$16"
	movq	8(%rdx), %rdx
	testb	$6, %dl
	jne	.LBB257_13
# %bb.10:                               # %"$18"
	movq	(%rdx), %rax
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB257_12:                             # %"$11"
	movq	%rsi, %rcx
	callq	lstErr
.LBB257_11:                             # %"$7"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	varErr
.LBB257_13:                             # %"$17"
	movq	%rsi, %rcx
	callq	varErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cadddr;
	.scl	2;
	.type	32;
	.endef
	.globl	_cadddr                         # -- Begin function _cadddr
	.p2align	4, 0x90
_cadddr:                                # @_cadddr
.seh_proc _cadddr
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB258_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB258_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB258_4
.LBB258_2:                              # %"$6"
	movq	(%rax), %rax
.LBB258_4:                              # %"$2"
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB258_6
# %bb.5:                                # %"$2"
	movl	%eax, %edx
	andl	$15, %edx
	testq	%rdx, %rdx
	jne	.LBB258_12
.LBB258_6:                              # %"$10"
	movq	8(%rax), %rdx
	cmpq	%rcx, %rdx
	je	.LBB258_8
# %bb.7:                                # %"$10"
	movl	%edx, %eax
	andl	$15, %eax
	testq	%rax, %rax
	jne	.LBB258_13
.LBB258_8:                              # %"$14"
	movq	8(%rdx), %rdx
	cmpq	%rcx, %rdx
	je	.LBB258_10
# %bb.9:                                # %"$14"
	movl	%edx, %eax
	andl	$15, %eax
	testq	%rax, %rax
	jne	.LBB258_13
.LBB258_10:                             # %"$18"
	movq	8(%rdx), %rdx
	testb	$6, %dl
	jne	.LBB258_14
# %bb.11:                               # %"$20"
	movq	(%rdx), %rax
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB258_13:                             # %"$13"
	movq	%rsi, %rcx
	callq	lstErr
.LBB258_12:                             # %"$9"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	lstErr
.LBB258_14:                             # %"$19"
	movq	%rsi, %rcx
	callq	varErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cdaaar;
	.scl	2;
	.type	32;
	.endef
	.globl	_cdaaar                         # -- Begin function _cdaaar
	.p2align	4, 0x90
_cdaaar:                                # @_cdaaar
.seh_proc _cdaaar
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB259_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB259_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB259_4
.LBB259_2:                              # %"$6"
	movq	(%rax), %rax
.LBB259_4:                              # %"$2"
	testb	$6, %al
	jne	.LBB259_10
# %bb.5:                                # %"$8"
	movq	(%rax), %rdx
	testb	$6, %dl
	jne	.LBB259_11
# %bb.6:                                # %"$10"
	movq	(%rdx), %rdx
	testb	$6, %dl
	jne	.LBB259_11
# %bb.7:                                # %"$12"
	movq	(%rdx), %rdx
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rdx
	je	.LBB259_9
# %bb.8:                                # %"$12"
	movl	%edx, %eax
	andl	$15, %eax
	testq	%rax, %rax
	jne	.LBB259_12
.LBB259_9:                              # %"$16"
	movq	8(%rdx), %rax
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB259_11:                             # %"$9"
	movq	%rsi, %rcx
	callq	varErr
.LBB259_10:                             # %"$7"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	varErr
.LBB259_12:                             # %"$15"
	movq	%rsi, %rcx
	callq	lstErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cdaadr;
	.scl	2;
	.type	32;
	.endef
	.globl	_cdaadr                         # -- Begin function _cdaadr
	.p2align	4, 0x90
_cdaadr:                                # @_cdaadr
.seh_proc _cdaadr
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB260_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB260_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB260_4
.LBB260_2:                              # %"$6"
	movq	(%rax), %rax
.LBB260_4:                              # %"$2"
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB260_6
# %bb.5:                                # %"$2"
	movl	%eax, %edx
	andl	$15, %edx
	testq	%rdx, %rdx
	jne	.LBB260_11
.LBB260_6:                              # %"$10"
	movq	8(%rax), %rdx
	testb	$6, %dl
	jne	.LBB260_12
# %bb.7:                                # %"$12"
	movq	(%rdx), %rdx
	testb	$6, %dl
	jne	.LBB260_12
# %bb.8:                                # %"$14"
	movq	(%rdx), %rdx
	cmpq	%rcx, %rdx
	je	.LBB260_10
# %bb.9:                                # %"$14"
	movl	%edx, %eax
	andl	$15, %eax
	testq	%rax, %rax
	jne	.LBB260_13
.LBB260_10:                             # %"$18"
	movq	8(%rdx), %rax
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB260_12:                             # %"$11"
	movq	%rsi, %rcx
	callq	varErr
.LBB260_11:                             # %"$9"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	lstErr
.LBB260_13:                             # %"$17"
	movq	%rsi, %rcx
	callq	lstErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cdadar;
	.scl	2;
	.type	32;
	.endef
	.globl	_cdadar                         # -- Begin function _cdadar
	.p2align	4, 0x90
_cdadar:                                # @_cdadar
.seh_proc _cdadar
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB261_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB261_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB261_4
.LBB261_2:                              # %"$6"
	movq	(%rax), %rax
.LBB261_4:                              # %"$2"
	testb	$6, %al
	jne	.LBB261_11
# %bb.5:                                # %"$8"
	movq	(%rax), %rdx
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rdx
	je	.LBB261_7
# %bb.6:                                # %"$8"
	movl	%edx, %ecx
	andl	$15, %ecx
	testq	%rcx, %rcx
	jne	.LBB261_12
.LBB261_7:                              # %"$12"
	movq	8(%rdx), %rdx
	testb	$6, %dl
	jne	.LBB261_13
# %bb.8:                                # %"$14"
	movq	(%rdx), %rdx
	cmpq	%rax, %rdx
	je	.LBB261_10
# %bb.9:                                # %"$14"
	movl	%edx, %eax
	andl	$15, %eax
	testq	%rax, %rax
	jne	.LBB261_12
.LBB261_10:                             # %"$18"
	movq	8(%rdx), %rax
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB261_12:                             # %"$11"
	movq	%rsi, %rcx
	callq	lstErr
.LBB261_11:                             # %"$7"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	varErr
.LBB261_13:                             # %"$13"
	movq	%rsi, %rcx
	callq	varErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cdaddr;
	.scl	2;
	.type	32;
	.endef
	.globl	_cdaddr                         # -- Begin function _cdaddr
	.p2align	4, 0x90
_cdaddr:                                # @_cdaddr
.seh_proc _cdaddr
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB262_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB262_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB262_4
.LBB262_2:                              # %"$6"
	movq	(%rax), %rax
.LBB262_4:                              # %"$2"
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB262_6
# %bb.5:                                # %"$2"
	movl	%eax, %edx
	andl	$15, %edx
	testq	%rdx, %rdx
	jne	.LBB262_12
.LBB262_6:                              # %"$10"
	movq	8(%rax), %rdx
	cmpq	%rcx, %rdx
	je	.LBB262_8
# %bb.7:                                # %"$10"
	movl	%edx, %eax
	andl	$15, %eax
	testq	%rax, %rax
	jne	.LBB262_13
.LBB262_8:                              # %"$14"
	movq	8(%rdx), %rdx
	testb	$6, %dl
	jne	.LBB262_14
# %bb.9:                                # %"$16"
	movq	(%rdx), %rdx
	cmpq	%rcx, %rdx
	je	.LBB262_11
# %bb.10:                               # %"$16"
	movl	%edx, %eax
	andl	$15, %eax
	testq	%rax, %rax
	jne	.LBB262_13
.LBB262_11:                             # %"$20"
	movq	8(%rdx), %rax
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB262_13:                             # %"$13"
	movq	%rsi, %rcx
	callq	lstErr
.LBB262_12:                             # %"$9"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	lstErr
.LBB262_14:                             # %"$15"
	movq	%rsi, %rcx
	callq	varErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cddaar;
	.scl	2;
	.type	32;
	.endef
	.globl	_cddaar                         # -- Begin function _cddaar
	.p2align	4, 0x90
_cddaar:                                # @_cddaar
.seh_proc _cddaar
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB263_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB263_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB263_4
.LBB263_2:                              # %"$6"
	movq	(%rax), %rax
.LBB263_4:                              # %"$2"
	testb	$6, %al
	jne	.LBB263_11
# %bb.5:                                # %"$8"
	movq	(%rax), %rdx
	testb	$6, %dl
	jne	.LBB263_12
# %bb.6:                                # %"$10"
	movq	(%rdx), %rdx
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rdx
	je	.LBB263_8
# %bb.7:                                # %"$10"
	movl	%edx, %ecx
	andl	$15, %ecx
	testq	%rcx, %rcx
	jne	.LBB263_13
.LBB263_8:                              # %"$14"
	movq	8(%rdx), %rdx
	cmpq	%rax, %rdx
	je	.LBB263_10
# %bb.9:                                # %"$14"
	movl	%edx, %eax
	andl	$15, %eax
	testq	%rax, %rax
	jne	.LBB263_13
.LBB263_10:                             # %"$18"
	movq	8(%rdx), %rax
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB263_13:                             # %"$13"
	movq	%rsi, %rcx
	callq	lstErr
.LBB263_11:                             # %"$7"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	varErr
.LBB263_12:                             # %"$9"
	movq	%rsi, %rcx
	callq	varErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cddadr;
	.scl	2;
	.type	32;
	.endef
	.globl	_cddadr                         # -- Begin function _cddadr
	.p2align	4, 0x90
_cddadr:                                # @_cddadr
.seh_proc _cddadr
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB264_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB264_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB264_4
.LBB264_2:                              # %"$6"
	movq	(%rax), %rax
.LBB264_4:                              # %"$2"
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB264_6
# %bb.5:                                # %"$2"
	movl	%eax, %edx
	andl	$15, %edx
	testq	%rdx, %rdx
	jne	.LBB264_12
.LBB264_6:                              # %"$10"
	movq	8(%rax), %rdx
	testb	$6, %dl
	jne	.LBB264_13
# %bb.7:                                # %"$12"
	movq	(%rdx), %rdx
	cmpq	%rcx, %rdx
	je	.LBB264_9
# %bb.8:                                # %"$12"
	movl	%edx, %eax
	andl	$15, %eax
	testq	%rax, %rax
	jne	.LBB264_14
.LBB264_9:                              # %"$16"
	movq	8(%rdx), %rdx
	cmpq	%rcx, %rdx
	je	.LBB264_11
# %bb.10:                               # %"$16"
	movl	%edx, %eax
	andl	$15, %eax
	testq	%rax, %rax
	jne	.LBB264_14
.LBB264_11:                             # %"$20"
	movq	8(%rdx), %rax
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB264_14:                             # %"$15"
	movq	%rsi, %rcx
	callq	lstErr
.LBB264_12:                             # %"$9"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	lstErr
.LBB264_13:                             # %"$11"
	movq	%rsi, %rcx
	callq	varErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cdddar;
	.scl	2;
	.type	32;
	.endef
	.globl	_cdddar                         # -- Begin function _cdddar
	.p2align	4, 0x90
_cdddar:                                # @_cdddar
.seh_proc _cdddar
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB265_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB265_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB265_4
.LBB265_2:                              # %"$6"
	movq	(%rax), %rax
.LBB265_4:                              # %"$2"
	testb	$6, %al
	jne	.LBB265_12
# %bb.5:                                # %"$8"
	movq	(%rax), %rdx
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rdx
	je	.LBB265_7
# %bb.6:                                # %"$8"
	movl	%edx, %ecx
	andl	$15, %ecx
	testq	%rcx, %rcx
	jne	.LBB265_13
.LBB265_7:                              # %"$12"
	movq	8(%rdx), %rdx
	cmpq	%rax, %rdx
	je	.LBB265_9
# %bb.8:                                # %"$12"
	movl	%edx, %ecx
	andl	$15, %ecx
	testq	%rcx, %rcx
	jne	.LBB265_13
.LBB265_9:                              # %"$16"
	movq	8(%rdx), %rdx
	cmpq	%rax, %rdx
	je	.LBB265_11
# %bb.10:                               # %"$16"
	movl	%edx, %eax
	andl	$15, %eax
	testq	%rax, %rax
	jne	.LBB265_13
.LBB265_11:                             # %"$20"
	movq	8(%rdx), %rax
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB265_13:                             # %"$11"
	movq	%rsi, %rcx
	callq	lstErr
.LBB265_12:                             # %"$7"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	varErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cddddr;
	.scl	2;
	.type	32;
	.endef
	.globl	_cddddr                         # -- Begin function _cddddr
	.p2align	4, 0x90
_cddddr:                                # @_cddddr
.seh_proc _cddddr
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB266_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB266_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB266_4
.LBB266_2:                              # %"$6"
	movq	(%rax), %rax
.LBB266_4:                              # %"$2"
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB266_6
# %bb.5:                                # %"$2"
	movl	%eax, %edx
	andl	$15, %edx
	testq	%rdx, %rdx
	jne	.LBB266_13
.LBB266_6:                              # %"$10"
	movq	8(%rax), %rdx
	cmpq	%rcx, %rdx
	je	.LBB266_8
# %bb.7:                                # %"$10"
	movl	%edx, %eax
	andl	$15, %eax
	testq	%rax, %rax
	jne	.LBB266_14
.LBB266_8:                              # %"$14"
	movq	8(%rdx), %rdx
	cmpq	%rcx, %rdx
	je	.LBB266_10
# %bb.9:                                # %"$14"
	movl	%edx, %eax
	andl	$15, %eax
	testq	%rax, %rax
	jne	.LBB266_14
.LBB266_10:                             # %"$18"
	movq	8(%rdx), %rdx
	cmpq	%rcx, %rdx
	je	.LBB266_12
# %bb.11:                               # %"$18"
	movl	%edx, %eax
	andl	$15, %eax
	testq	%rax, %rax
	jne	.LBB266_14
.LBB266_12:                             # %"$22"
	movq	8(%rdx), %rax
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB266_14:                             # %"$13"
	movq	%rsi, %rcx
	callq	lstErr
.LBB266_13:                             # %"$9"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	lstErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _nth;
	.scl	2;
	.type	32;
	.endef
	.globl	_nth                            # -- Begin function _nth
	.p2align	4, 0x90
_nth:                                   # @_nth
.seh_proc _nth
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %r14
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rbx
	testb	$6, %sil
	jne	.LBB267_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB267_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB267_4
.LBB267_2:                              # %"$6"
	movq	(%rsi), %rsi
.LBB267_4:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rsi, (%rdi)
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rdi, env(%rip)
	testb	$15, %sil
	je	.LBB267_5
.LBB267_18:                             # %"$9"
	movq	8(%rdi), %rax
	movq	%rax, env(%rip)
	movq	%rsi, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB267_5:                              # %"$8.preheader"
	leaq	SymTab+8(%rip), %r15
	.p2align	4, 0x90
.LBB267_6:                              # %"$8"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB267_15 Depth 2
	movq	(%rbx), %rax
	testb	$6, %al
	jne	.LBB267_10
# %bb.7:                                # %"$3.i"
                                        #   in Loop: Header=BB267_6 Depth=1
	testb	$8, %al
	jne	.LBB267_8
# %bb.9:                                # %"$5.i"
                                        #   in Loop: Header=BB267_6 Depth=1
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB267_10
.LBB267_8:                              # %"$6.i"
                                        #   in Loop: Header=BB267_6 Depth=1
	movq	(%rax), %rax
	.p2align	4, 0x90
.LBB267_10:                             # %"$2.i"
                                        #   in Loop: Header=BB267_6 Depth=1
	testb	$2, %al
	je	.LBB267_19
# %bb.11:                               # %evCnt.exit
                                        #   in Loop: Header=BB267_6 Depth=1
	movq	%rax, %rdx
	shrq	$4, %rdx
	movq	%rdx, %rcx
	negq	%rcx
	testb	$8, %al
	cmoveq	%rdx, %rcx
	testq	%rcx, %rcx
	jle	.LBB267_12
# %bb.13:                               # %"$13.preheader"
                                        #   in Loop: Header=BB267_6 Depth=1
	cmpq	$1, %rcx
	je	.LBB267_16
# %bb.14:                               # %"$14.preheader"
                                        #   in Loop: Header=BB267_6 Depth=1
	decq	%rcx
	.p2align	4, 0x90
.LBB267_15:                             # %"$14"
                                        #   Parent Loop BB267_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rsi), %rsi
	decq	%rcx
	jg	.LBB267_15
.LBB267_16:                             # %"$15"
                                        #   in Loop: Header=BB267_6 Depth=1
	movq	8(%rbx), %rbx
	testb	$15, %bl
	jne	.LBB267_18
# %bb.17:                               # %"$16"
                                        #   in Loop: Header=BB267_6 Depth=1
	movq	(%rsi), %rsi
	testb	$15, %sil
	je	.LBB267_6
	jmp	.LBB267_18
.LBB267_12:
	movq	%r15, %rsi
	jmp	.LBB267_18
.LBB267_19:                             # %"$2.i.i"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rax, %rdx
	callq	cntErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _con;
	.scl	2;
	.type	32;
	.endef
	.globl	_con                            # -- Begin function _con
	.p2align	4, 0x90
_con:                                   # @_con
.seh_proc _con
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rdi
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rbx
	testb	$6, %sil
	jne	.LBB268_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB268_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB268_4
.LBB268_2:                              # %"$6"
	movq	(%rsi), %rsi
.LBB268_4:                              # %"$2"
	testb	$15, %sil
	jne	.LBB268_10
# %bb.5:                                # %"$8"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rsi, (%rdi)
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rdi, env(%rip)
	movq	(%rbx), %rax
	testb	$6, %al
	jne	.LBB268_9
# %bb.6:                                # %"$10"
	testb	$8, %al
	jne	.LBB268_7
# %bb.8:                                # %"$12"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB268_9
.LBB268_7:                              # %"$13"
	movq	(%rax), %rax
.LBB268_9:                              # %"$9"
	movq	%rax, 8(%rsi)
	movq	8(%rdi), %rcx
	movq	%rcx, env(%rip)
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%rbp
	retq
.LBB268_10:                             # %"$7"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	pairErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cons;
	.scl	2;
	.type	32;
	.endef
	.globl	_cons                           # -- Begin function _cons
	.p2align	4, 0x90
_cons:                                  # @_cons
.seh_proc _cons
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rsi
	movq	(%rsi), %rcx
	testb	$6, %cl
	jne	.LBB269_4
# %bb.1:                                # %"$3"
	testb	$8, %cl
	jne	.LBB269_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB269_4
.LBB269_2:                              # %"$6"
	movq	(%rcx), %rcx
.LBB269_4:                              # %"$2"
	subq	$32, %rsp
	leaq	SymTab+8(%rip), %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %r14
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%r14, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r15, env(%rip)
	movq	8(%rsi), %rsi
	movq	(%rsi), %rcx
	testb	$6, %cl
	sete	%al
	testb	$15, 8(%rsi)
	je	.LBB269_6
# %bb.5:
	movq	%r14, %rbx
.LBB269_12:                             # %"$9"
	testb	%al, %al
	je	.LBB269_16
# %bb.13:                               # %"$16"
	testb	$8, %cl
	jne	.LBB269_14
# %bb.15:                               # %"$18"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB269_16
.LBB269_6:                              # %"$8.preheader"
	leaq	SymTab+8(%rip), %r12
	movq	%r14, %rdi
	jmp	.LBB269_7
	.p2align	4, 0x90
.LBB269_10:                             # %"$13"
                                        #   in Loop: Header=BB269_7 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
.LBB269_11:                             # %"$10"
                                        #   in Loop: Header=BB269_7 Depth=1
	subq	$32, %rsp
	movq	%r12, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rbx
	movq	%rax, 8(%rdi)
	movq	8(%rsi), %rsi
	movq	(%rsi), %rcx
	testb	$6, %cl
	sete	%al
	testb	$15, 8(%rsi)
	movq	%rbx, %rdi
	jne	.LBB269_12
.LBB269_7:                              # %"$8"
                                        # =>This Inner Loop Header: Depth=1
	testb	$1, %al
	je	.LBB269_11
# %bb.8:                                # %"$11"
                                        #   in Loop: Header=BB269_7 Depth=1
	testb	$8, %cl
	je	.LBB269_10
# %bb.9:                                # %"$14"
                                        #   in Loop: Header=BB269_7 Depth=1
	movq	(%rcx), %rcx
	jmp	.LBB269_11
.LBB269_14:                             # %"$19"
	movq	(%rcx), %rcx
.LBB269_16:                             # %"$15"
	movq	%rcx, 8(%rbx)
	movq	8(%r15), %rax
	movq	%rax, env(%rip)
	movq	%r14, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _conc;
	.scl	2;
	.type	32;
	.endef
	.globl	_conc                           # -- Begin function _conc
	.p2align	4, 0x90
_conc:                                  # @_conc
.seh_proc _conc
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rsi
	movq	(%rsi), %r14
	testb	$6, %r14b
	jne	.LBB270_4
# %bb.1:                                # %"$3"
	testb	$8, %r14b
	jne	.LBB270_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r14
	jmp	.LBB270_4
.LBB270_2:                              # %"$6"
	movq	(%r14), %r14
.LBB270_4:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%r14, (%rdi)
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rdi, env(%rip)
	movq	8(%rsi), %rbx
	testb	$15, %bl
	je	.LBB270_5
.LBB270_15:                             # %"$9"
	movq	8(%rdi), %rax
	movq	%rax, env(%rip)
	movq	%r14, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	retq
.LBB270_5:                              # %"$8.preheader"
	movq	%r14, %rsi
	jmp	.LBB270_6
	.p2align	4, 0x90
.LBB270_11:                             # %"$15"
                                        #   in Loop: Header=BB270_6 Depth=1
	movq	%rax, (%rdi)
	movq	%rax, %r14
.LBB270_14:                             # %"$17"
                                        #   in Loop: Header=BB270_6 Depth=1
	movq	8(%rbx), %rbx
	testb	$15, %bl
	movq	%rax, %rsi
	jne	.LBB270_15
.LBB270_6:                              # %"$8"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB270_12 Depth 2
	movq	(%rbx), %rax
	testb	$6, %al
	jne	.LBB270_10
# %bb.7:                                # %"$11"
                                        #   in Loop: Header=BB270_6 Depth=1
	testb	$8, %al
	jne	.LBB270_8
# %bb.9:                                # %"$13"
                                        #   in Loop: Header=BB270_6 Depth=1
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	.p2align	4, 0x90
.LBB270_10:                             # %"$10"
                                        #   in Loop: Header=BB270_6 Depth=1
	testb	$15, %sil
	jne	.LBB270_11
	.p2align	4, 0x90
.LBB270_12:                             # %"$18"
                                        #   Parent Loop BB270_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rsi, %rcx
	movq	8(%rsi), %rsi
	testb	$15, %sil
	je	.LBB270_12
# %bb.13:                               # %"$20"
                                        #   in Loop: Header=BB270_6 Depth=1
	movq	%rax, 8(%rcx)
	movq	%rcx, %rax
	jmp	.LBB270_14
.LBB270_8:                              # %"$14"
                                        #   in Loop: Header=BB270_6 Depth=1
	movq	(%rax), %rax
	testb	$15, %sil
	jne	.LBB270_11
	jmp	.LBB270_12
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _circ;
	.scl	2;
	.type	32;
	.endef
	.globl	_circ                           # -- Begin function _circ
	.p2align	4, 0x90
_circ:                                  # @_circ
.seh_proc _circ
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rsi
	movq	(%rsi), %rcx
	testb	$6, %cl
	jne	.LBB271_4
# %bb.1:                                # %"$3"
	testb	$8, %cl
	jne	.LBB271_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB271_4
.LBB271_2:                              # %"$6"
	movq	(%rcx), %rcx
.LBB271_4:                              # %"$2"
	subq	$32, %rsp
	leaq	SymTab+8(%rip), %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %r14
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%r14, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r15, env(%rip)
	movq	8(%rsi), %rsi
	testb	$15, %sil
	movq	%r14, %rax
	je	.LBB271_5
.LBB271_11:                             # %"$9"
	movq	%r14, 8(%rax)
	movq	8(%r15), %rax
	movq	%rax, env(%rip)
	movq	%r14, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB271_5:                              # %"$8.preheader"
	leaq	SymTab+8(%rip), %rdi
	movq	%r14, %rbx
	jmp	.LBB271_6
.LBB271_9:                              # %"$13"
                                        #   in Loop: Header=BB271_6 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	.p2align	4, 0x90
.LBB271_10:                             # %"$10"
                                        #   in Loop: Header=BB271_6 Depth=1
	subq	$32, %rsp
	movq	%rdi, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, 8(%rbx)
	movq	8(%rsi), %rsi
	testb	$15, %sil
	movq	%rax, %rbx
	jne	.LBB271_11
.LBB271_6:                              # %"$8"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rcx
	testb	$6, %cl
	jne	.LBB271_10
# %bb.7:                                # %"$11"
                                        #   in Loop: Header=BB271_6 Depth=1
	testb	$8, %cl
	je	.LBB271_9
# %bb.8:                                # %"$14"
                                        #   in Loop: Header=BB271_6 Depth=1
	movq	(%rcx), %rcx
	jmp	.LBB271_10
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _rot;
	.scl	2;
	.type	32;
	.endef
	.globl	_rot                            # -- Begin function _rot
	.p2align	4, 0x90
_rot:                                   # @_rot
.seh_proc _rot
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %r14
	movq	8(%rcx), %r15
	movq	(%r15), %rsi
	testb	$6, %sil
	je	.LBB272_1
# %bb.3:                                # %"$2"
	testb	$15, %sil
	jne	.LBB272_21
.LBB272_4:                              # %"$7"
	movq	(%rsi), %rbx
	movq	8(%rsi), %rdi
	movq	8(%r15), %rcx
	testb	$15, %cl
	je	.LBB272_8
	.p2align	4, 0x90
.LBB272_5:                              # %"$18"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %dil
	jne	.LBB272_19
# %bb.6:                                # %"$19"
                                        #   in Loop: Header=BB272_5 Depth=1
	movq	(%rdi), %rax
	movq	8(%rdi), %rcx
	movq	%rbx, (%rdi)
	cmpq	%rcx, %rsi
	movq	%rcx, %rdi
	movq	%rax, %rbx
	jne	.LBB272_5
	jmp	.LBB272_20
.LBB272_1:                              # %"$3"
	testb	$8, %sil
	jne	.LBB272_7
# %bb.2:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	testb	$15, %sil
	jne	.LBB272_21
	jmp	.LBB272_4
.LBB272_7:                              # %"$6"
	movq	(%rsi), %rsi
	testb	$15, %sil
	jne	.LBB272_21
	jmp	.LBB272_4
.LBB272_8:                              # %"$9"
	movq	env(%rip), %rdx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%rsi, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	%r15, env(%rip)
	movq	(%rcx), %rax
	testb	$6, %al
	jne	.LBB272_13
# %bb.9:                                # %"$3.i"
	testb	$8, %al
	jne	.LBB272_12
# %bb.10:                               # %"$5.i"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB272_13
.LBB272_12:                             # %"$6.i"
	movq	(%rax), %rax
.LBB272_13:                             # %"$2.i"
	testb	$2, %al
	je	.LBB272_22
# %bb.14:                               # %evCnt.exit
	movq	%rax, %rdx
	shrq	$4, %rdx
	movq	%rdx, %rcx
	negq	%rcx
	testb	$8, %al
	cmoveq	%rdx, %rcx
	movq	8(%r15), %rax
	movq	%rax, env(%rip)
	.p2align	4, 0x90
.LBB272_15:                             # %"$12"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %dil
	jne	.LBB272_19
# %bb.16:                               # %"$12"
                                        #   in Loop: Header=BB272_15 Depth=1
	cmpq	$2, %rcx
	jl	.LBB272_19
# %bb.17:                               # %"$15"
                                        #   in Loop: Header=BB272_15 Depth=1
	decq	%rcx
	movq	(%rdi), %rax
	movq	8(%rdi), %rdx
	movq	%rbx, (%rdi)
	cmpq	%rdx, %rsi
	movq	%rdx, %rdi
	movq	%rax, %rbx
	jne	.LBB272_15
	jmp	.LBB272_20
.LBB272_19:
	movq	%rbx, %rax
.LBB272_20:                             # %"$8.sink.split"
	movq	%rax, (%rsi)
.LBB272_21:                             # %"$8"
	movq	%rsi, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB272_22:                             # %"$2.i.i"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rax, %rdx
	callq	cntErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _list;
	.scl	2;
	.type	32;
	.endef
	.globl	_list                           # -- Begin function _list
	.p2align	4, 0x90
_list:                                  # @_list
.seh_proc _list
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rsi
	movq	(%rsi), %rcx
	testb	$6, %cl
	jne	.LBB273_4
# %bb.1:                                # %"$3"
	testb	$8, %cl
	jne	.LBB273_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB273_4
.LBB273_2:                              # %"$6"
	movq	(%rcx), %rcx
.LBB273_4:                              # %"$2"
	subq	$32, %rsp
	leaq	SymTab+8(%rip), %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %r14
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%r14, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r15, env(%rip)
	movq	8(%rsi), %rsi
	testb	$15, %sil
	je	.LBB273_5
.LBB273_11:                             # %"$9"
	movq	8(%r15), %rax
	movq	%rax, env(%rip)
	movq	%r14, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB273_5:                              # %"$8.preheader"
	leaq	SymTab+8(%rip), %rdi
	movq	%r14, %rbx
	jmp	.LBB273_6
.LBB273_9:                              # %"$13"
                                        #   in Loop: Header=BB273_6 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	.p2align	4, 0x90
.LBB273_10:                             # %"$10"
                                        #   in Loop: Header=BB273_6 Depth=1
	subq	$32, %rsp
	movq	%rdi, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, 8(%rbx)
	movq	8(%rsi), %rsi
	testb	$15, %sil
	movq	%rax, %rbx
	jne	.LBB273_11
.LBB273_6:                              # %"$8"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rcx
	testb	$6, %cl
	jne	.LBB273_10
# %bb.7:                                # %"$11"
                                        #   in Loop: Header=BB273_6 Depth=1
	testb	$8, %cl
	je	.LBB273_9
# %bb.8:                                # %"$14"
                                        #   in Loop: Header=BB273_6 Depth=1
	movq	(%rcx), %rcx
	jmp	.LBB273_10
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _need;
	.scl	2;
	.type	32;
	.endef
	.globl	_need                           # -- Begin function _need
	.p2align	4, 0x90
_need:                                  # @_need
.seh_proc _need
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rdi
	movq	(%rdi), %rax
	testb	$6, %al
	jne	.LBB274_4
# %bb.1:                                # %"$3.i"
	testb	$8, %al
	jne	.LBB274_3
# %bb.2:                                # %"$5.i"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB274_4
.LBB274_3:                              # %"$6.i"
	movq	(%rax), %rax
.LBB274_4:                              # %"$2.i"
	testb	$2, %al
	je	.LBB274_34
# %bb.5:                                # %evCnt.exit
	movq	%rax, %rcx
	shrq	$4, %rcx
	movq	%rcx, %rbx
	negq	%rbx
	testb	$8, %al
	cmoveq	%rcx, %rbx
	movq	8(%rdi), %rdi
	movq	(%rdi), %r14
	testb	$6, %r14b
	jne	.LBB274_9
# %bb.6:                                # %"$3"
	testb	$8, %r14b
	jne	.LBB274_8
# %bb.7:                                # %"$5"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r14
	jmp	.LBB274_9
.LBB274_8:                              # %"$6"
	movq	(%r14), %r14
.LBB274_9:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%r14, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r15, env(%rip)
	leaq	SymTab+8(%rip), %rsi
	cmpq	%rsi, %r14
	je	.LBB274_12
# %bb.10:                               # %"$2"
	movl	%r14d, %eax
	andl	$15, %eax
	testq	%rax, %rax
	je	.LBB274_12
# %bb.11:
	movq	%r15, %rcx
	movq	%r14, %r12
	jmp	.LBB274_19
.LBB274_12:                             # %"$9"
	movq	8(%rdi), %rax
	movq	(%rax), %r12
	testb	$6, %r12b
	jne	.LBB274_17
# %bb.14:                               # %"$13"
	testb	$8, %r12b
	jne	.LBB274_16
# %bb.15:                               # %"$15"
	subq	$32, %rsp
	movq	%r12, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r12
	movq	env(%rip), %rcx
	jmp	.LBB274_18
.LBB274_16:                             # %"$16"
	movq	(%r12), %r12
.LBB274_17:                             # %"$11"
	movq	%r15, %rcx
.LBB274_18:                             # %"$11"
	movq	%r14, %rsi
.LBB274_19:                             # %"$11"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%r12, (%rax)
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%rcx, (%rdx)
	movq	%rax, env(%rip)
	testq	%rbx, %rbx
	je	.LBB274_33
# %bb.20:                               # %"$17"
	jle	.LBB274_26
# %bb.21:                               # %"$22.preheader"
	testb	$15, %sil
	jne	.LBB274_24
# %bb.22:
	movq	%rsi, %rax
	.p2align	4, 0x90
.LBB274_23:                             # %"$23"
                                        # =>This Inner Loop Header: Depth=1
	decq	%rbx
	movq	8(%rax), %rax
	testb	$15, %al
	je	.LBB274_23
.LBB274_24:                             # %"$25.preheader"
	movq	%rbx, %rax
	decq	%rax
	js	.LBB274_33
	.p2align	4, 0x90
.LBB274_25:                             # %"$26"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	movq	%r12, %rcx
	movq	%rsi, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rsi
	movq	%rax, (%r15)
	decq	%rbx
	testq	%rbx, %rbx
	jg	.LBB274_25
	jmp	.LBB274_33
.LBB274_26:                             # %"$20"
	testb	$15, %sil
	je	.LBB274_28
# %bb.27:                               # %"$28"
	subq	$32, %rsp
	leaq	SymTab+8(%rip), %rdx
	movq	%r12, %rcx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rsi
	movq	%rax, (%r15)
	incq	%rbx
	movq	%rax, %rdi
	jmp	.LBB274_30
.LBB274_28:
	movq	%rsi, %rax
	.p2align	4, 0x90
.LBB274_29:                             # %"$31"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rdi
	movq	8(%rax), %rax
	incq	%rbx
	testb	$15, %al
	je	.LBB274_29
.LBB274_30:                             # %"$30"
	testq	%rbx, %rbx
	jns	.LBB274_33
# %bb.31:                               # %"$35.preheader"
	decq	%rbx
	leaq	SymTab+8(%rip), %r14
	.p2align	4, 0x90
.LBB274_32:                             # %"$35"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	movq	%r12, %rcx
	movq	%r14, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, 8(%rdi)
	incq	%rbx
	cmpq	$-1, %rbx
	movq	%rax, %rdi
	jl	.LBB274_32
.LBB274_33:                             # %"$18"
	movq	8(%r15), %rax
	movq	%rax, env(%rip)
	movq	%rsi, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB274_34:                             # %"$2.i.i"
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	cntErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _range;
	.scl	2;
	.type	32;
	.endef
	.globl	_range                          # -- Begin function _range
	.p2align	4, 0x90
_range:                                 # @_range
.seh_proc _range
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$24, %rsp
	.seh_stackalloc 24
	leaq	16(%rsp), %rbp
	.seh_setframe %rbp, 16
	.seh_endprologue
	movq	%rcx, %r15
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rdi
	testb	$6, %sil
	jne	.LBB275_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB275_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB275_4
.LBB275_2:                              # %"$6"
	movq	(%rsi), %rsi
.LBB275_4:                              # %"$2"
	subq	$32, %rsp
	testb	$6, %sil
	je	.LBB275_49
# %bb.5:                                # %"$8"
	leaq	SymTab+8(%rip), %r12
	movq	%rsi, %rcx
	movq	%r12, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rdx
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%rdx, (%rbp)                    # 8-byte Spill
	movq	%rdx, (%r14)
	movq	%r14, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r14, env(%rip)
	movq	(%rdi), %rbx
	movq	8(%rdi), %rdi
	testb	$6, %bl
	jne	.LBB275_9
# %bb.6:                                # %"$10"
	testb	$8, %bl
	jne	.LBB275_7
# %bb.8:                                # %"$12"
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rbx
	jmp	.LBB275_9
.LBB275_7:                              # %"$13"
	movq	(%rbx), %rbx
.LBB275_9:                              # %"$9"
	testb	$6, %bl
	je	.LBB275_50
# %bb.10:                               # %"$15"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rbx, (%rax)
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%rcx, (%rdx)
	movq	%rax, env(%rip)
	movq	(%rdi), %rdx
	testb	$6, %dl
	jne	.LBB275_14
# %bb.11:                               # %"$17"
	testb	$8, %dl
	jne	.LBB275_12
# %bb.13:                               # %"$19"
	subq	$32, %rsp
	movq	%rdx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdx
	jmp	.LBB275_14
.LBB275_12:                             # %"$20"
	movq	(%rdx), %rdx
.LBB275_14:                             # %"$16"
	movl	$18, %r13d
	cmpq	%r12, %rdx
	je	.LBB275_19
# %bb.15:                               # %"$22"
	testb	$6, %dl
	je	.LBB275_51
# %bb.16:                               # %"$23"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rdx, (%rdi)
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rdi, env(%rip)
	cmpq	$2, %rdx
	je	.LBB275_52
# %bb.17:                               # %"$23"
	movl	%edx, %eax
	andl	$8, %eax
	testq	%rax, %rax
	jne	.LBB275_52
# %bb.18:
	movq	%rdx, %r13
.LBB275_19:                             # %"$29"
	testb	$8, %sil
	movq	%r14, -8(%rbp)                  # 8-byte Spill
	jne	.LBB275_23
# %bb.20:                               # %"$2.i"
	testb	$8, %bl
	jne	.LBB275_21
# %bb.22:                               # %"$5.i"
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rbx, %rdx
	jmp	.LBB275_25
.LBB275_23:                             # %"$3.i"
	movq	%rbx, %r15
	andq	$-9, %r15
	testb	$8, %bl
	je	.LBB275_37
# %bb.24:                               # %"$9.i"
	movq	%rsi, %rdx
	andq	$-9, %rdx
	subq	$32, %rsp
	movq	%r15, %rcx
.LBB275_25:                             # %cmpNum.exit
	callq	cmpu
	addq	$32, %rsp
	movq	%rbx, %r15
	andq	$-9, %r15
	testq	%rax, %rax
	jg	.LBB275_26
.LBB275_37:                             # %"$33.us.preheader"
	leaq	SymTab+8(%rip), %r12
	movq	(%rbp), %rdi                    # 8-byte Reload
	jmp	.LBB275_38
	.p2align	4, 0x90
.LBB275_46:                             # %cmpNum.exit24.us
                                        #   in Loop: Header=BB275_38 Depth=1
	callq	cmpu
	addq	$32, %rsp
	testq	%rax, %rax
	jg	.LBB275_48
.LBB275_47:                             # %"$34.us"
                                        #   in Loop: Header=BB275_38 Depth=1
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%r12, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, 8(%rdi)
	movq	%rax, %rdi
.LBB275_38:                             # %"$33.us"
                                        # =>This Inner Loop Header: Depth=1
	testb	$8, %sil
	jne	.LBB275_39
# %bb.40:                               # %"$5.i15.us"
                                        #   in Loop: Header=BB275_38 Depth=1
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%r13, %rdx
	callq	addu
	addq	$32, %rsp
	movq	%rax, %rsi
	testb	$8, %sil
	je	.LBB275_44
.LBB275_42:                             # %"$3.i22.us"
                                        #   in Loop: Header=BB275_38 Depth=1
	testb	$8, %bl
	je	.LBB275_47
# %bb.43:                               # %"$9.i23.us"
                                        #   in Loop: Header=BB275_38 Depth=1
	movq	%rsi, %rdx
	andq	$-9, %rdx
	subq	$32, %rsp
	movq	%r15, %rcx
	jmp	.LBB275_46
	.p2align	4, 0x90
.LBB275_39:                             # %"$3.i16.us"
                                        #   in Loop: Header=BB275_38 Depth=1
	andq	$-9, %rsi
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%r13, %rdx
	callq	subu
	addq	$32, %rsp
	movq	%rax, %rsi
	xorq	$8, %rsi
	cmpq	$2, %rax
	cmoveq	%rax, %rsi
	testb	$8, %sil
	jne	.LBB275_42
.LBB275_44:                             # %"$2.i20.us"
                                        #   in Loop: Header=BB275_38 Depth=1
	testb	$8, %bl
	jne	.LBB275_48
# %bb.45:                               # %"$5.i21.us"
                                        #   in Loop: Header=BB275_38 Depth=1
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rbx, %rdx
	jmp	.LBB275_46
.LBB275_21:                             # %cmpNum.exit.thread86
	movq	%rbx, %r15
	andq	$-9, %r15
.LBB275_26:                             # %"$36.us.preheader"
	leaq	SymTab+8(%rip), %r12
	movq	(%rbp), %r14                    # 8-byte Reload
	jmp	.LBB275_27
	.p2align	4, 0x90
.LBB275_35:                             # %cmpNum.exit40.us
                                        #   in Loop: Header=BB275_27 Depth=1
	callq	cmpu
	addq	$32, %rsp
	testq	%rax, %rax
	js	.LBB275_48
.LBB275_36:                             # %"$37.us"
                                        #   in Loop: Header=BB275_27 Depth=1
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%r12, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, 8(%r14)
	movq	%rax, %r14
.LBB275_27:                             # %"$36.us"
                                        # =>This Inner Loop Header: Depth=1
	testb	$8, %sil
	jne	.LBB275_28
# %bb.29:                               # %"$5.i28.us"
                                        #   in Loop: Header=BB275_27 Depth=1
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%r13, %rdx
	callq	subu
	addq	$32, %rsp
	movq	%rax, %rsi
	testb	$8, %sil
	je	.LBB275_33
.LBB275_31:                             # %"$3.i38.us"
                                        #   in Loop: Header=BB275_27 Depth=1
	testb	$8, %bl
	je	.LBB275_48
# %bb.32:                               # %"$9.i39.us"
                                        #   in Loop: Header=BB275_27 Depth=1
	movq	%rsi, %rdx
	andq	$-9, %rdx
	subq	$32, %rsp
	movq	%r15, %rcx
	jmp	.LBB275_35
	.p2align	4, 0x90
.LBB275_28:                             # %"$3.i30.us"
                                        #   in Loop: Header=BB275_27 Depth=1
	andq	$-9, %rsi
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%r13, %rdx
	callq	addu
	addq	$32, %rsp
	movq	%rax, %rsi
	xorq	$8, %rsi
	cmpq	$2, %rax
	cmoveq	%rax, %rsi
	testb	$8, %sil
	jne	.LBB275_31
.LBB275_33:                             # %"$2.i36.us"
                                        #   in Loop: Header=BB275_27 Depth=1
	testb	$8, %bl
	jne	.LBB275_36
# %bb.34:                               # %"$5.i37.us"
                                        #   in Loop: Header=BB275_27 Depth=1
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rbx, %rdx
	jmp	.LBB275_35
.LBB275_48:                             # %"$32"
	movq	-8(%rbp), %rax                  # 8-byte Reload
	movq	8(%rax), %rax
	movq	%rax, env(%rip)
	movq	(%rbp), %rax                    # 8-byte Reload
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB275_49:                             # %"$7"
	movq	%r15, %rcx
	movq	%rsi, %rdx
	callq	numErr
.LBB275_50:                             # %"$14"
	subq	$32, %rsp
	movq	%r15, %rcx
	movq	%rbx, %rdx
	callq	numErr
.LBB275_52:                             # %"$28"
	subq	$32, %rsp
	movq	%r15, %rcx
	callq	argErr
.LBB275_51:                             # %"$24"
	subq	$32, %rsp
	movq	%r15, %rcx
	callq	numErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _full;
	.scl	2;
	.type	32;
	.endef
	.globl	_full                           # -- Begin function _full
	.p2align	4, 0x90
_full:                                  # @_full
.seh_proc _full
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB276_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB276_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB276_4
.LBB276_2:                              # %"$6"
	movq	(%rax), %rax
.LBB276_4:                              # %"$2"
	leaq	SymTab+280(%rip), %rcx
	testb	$15, %al
	jne	.LBB276_9
# %bb.5:                                # %"$8.preheader"
	leaq	SymTab+8(%rip), %rdx
	.p2align	4, 0x90
.LBB276_6:                              # %"$8"
                                        # =>This Inner Loop Header: Depth=1
	cmpq	%rdx, (%rax)
	je	.LBB276_7
# %bb.8:                                # %"$11"
                                        #   in Loop: Header=BB276_6 Depth=1
	movq	8(%rax), %rax
	testb	$15, %al
	je	.LBB276_6
	jmp	.LBB276_9
.LBB276_7:
	movq	%rdx, %rcx
.LBB276_9:                              # %"$9"
	movq	%rcx, %rax
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _make;
	.scl	2;
	.type	32;
	.endef
	.globl	_make                           # -- Begin function _make
	.p2align	4, 0x90
_make:                                  # @_make
.seh_proc _make
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$48, %rsp
	.seh_stackalloc 48
	.seh_endprologue
	movq	env+112(%rip), %rsi
	movq	env+120(%rip), %rdi
	leaq	SymTab+8(%rip), %rax
	movq	%rax, 32(%rsp)
	movq	env(%rip), %rax
	movq	%rax, 40(%rsp)
	leaq	32(%rsp), %rax
	movq	%rax, env(%rip)
	movq	%rax, env+120(%rip)
	movq	%rax, env+112(%rip)
	movq	8(%rcx), %rbx
	jmp	.LBB277_1
	.p2align	4, 0x90
.LBB277_3:                              # %"$4"
                                        #   in Loop: Header=BB277_1 Depth=1
	testb	$15, %bl
	jne	.LBB277_4
.LBB277_1:                              # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rbx), %rcx
	movq	8(%rbx), %rbx
	testb	$15, %cl
	jne	.LBB277_3
# %bb.2:                                # %"$3"
                                        #   in Loop: Header=BB277_1 Depth=1
	callq	evList
	jmp	.LBB277_3
.LBB277_4:                              # %"$6"
	movq	%rsi, env+112(%rip)
	movq	%rdi, env+120(%rip)
	movq	32(%rsp), %rax
	movq	40(%rsp), %rcx
	movq	%rcx, env(%rip)
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _made;
	.scl	2;
	.type	32;
	.endef
	.globl	_made                           # -- Begin function _made
	.p2align	4, 0x90
_made:                                  # @_made
.seh_proc _made
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	cmpq	$0, env+112(%rip)
	je	.LBB278_15
# %bb.1:                                # %"$3"
	movq	8(%rcx), %rcx
	testb	$15, %cl
	jne	.LBB278_14
# %bb.2:                                # %"$4"
	movq	env+120(%rip), %rsi
	movq	(%rcx), %rax
	movq	8(%rcx), %rdi
	testb	$6, %al
	jne	.LBB278_6
# %bb.3:                                # %"$7"
	testb	$8, %al
	jne	.LBB278_4
# %bb.5:                                # %"$9"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB278_6
.LBB278_4:                              # %"$10"
	movq	(%rax), %rax
.LBB278_6:                              # %"$6"
	movq	%rax, (%rsi)
	movq	(%rdi), %rax
	testb	$6, %al
	jne	.LBB278_10
# %bb.7:                                # %"$12"
	testb	$8, %al
	jne	.LBB278_8
# %bb.9:                                # %"$14"
	movq	%rax, %rcx
	callq	evList
.LBB278_10:                             # %"$11"
	testb	$15, %al
	je	.LBB278_13
.LBB278_11:                             # %"$16"
	movq	env+120(%rip), %rax
	movq	(%rax), %rcx
	.p2align	4, 0x90
.LBB278_12:                             # %"$18"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rcx, %rax
	movq	8(%rcx), %rcx
	testb	$15, %cl
	je	.LBB278_12
.LBB278_13:                             # %"$17"
	addq	$8, %rax
	movq	%rax, env+112(%rip)
.LBB278_14:                             # %"$5"
	movq	env+120(%rip), %rax
	movq	(%rax), %rax
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
.LBB278_8:                              # %"$15"
	movq	(%rax), %rax
	testb	$15, %al
	jne	.LBB278_11
	jmp	.LBB278_13
.LBB278_15:                             # %"$2"
	callq	makeErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _chain;
	.scl	2;
	.type	32;
	.endef
	.globl	_chain                          # -- Begin function _chain
	.p2align	4, 0x90
_chain:                                 # @_chain
.seh_proc _chain
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	env+112(%rip), %rdi
	testq	%rdi, %rdi
	je	.LBB279_13
# %bb.1:                                # %"$4.preheader"
	movq	8(%rcx), %rsi
	.p2align	4, 0x90
.LBB279_2:                              # %"$4"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB279_8 Depth 2
	movq	(%rsi), %rax
	movq	8(%rsi), %rsi
	testb	$6, %al
	jne	.LBB279_6
# %bb.3:                                # %"$6"
                                        #   in Loop: Header=BB279_2 Depth=1
	testb	$8, %al
	jne	.LBB279_4
# %bb.5:                                # %"$8"
                                        #   in Loop: Header=BB279_2 Depth=1
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB279_6
.LBB279_4:                              # %"$9"
                                        #   in Loop: Header=BB279_2 Depth=1
	movq	(%rax), %rax
	.p2align	4, 0x90
.LBB279_6:                              # %"$5"
                                        #   in Loop: Header=BB279_2 Depth=1
	movq	%rax, (%rdi)
	testb	$15, %al
	jne	.LBB279_10
# %bb.7:                                # %"$12.preheader"
                                        #   in Loop: Header=BB279_2 Depth=1
	movq	%rax, %rdx
	.p2align	4, 0x90
.LBB279_8:                              # %"$12"
                                        #   Parent Loop BB279_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rdx, %rcx
	movq	8(%rdx), %rdx
	testb	$15, %dl
	je	.LBB279_8
# %bb.9:                                # %"$14"
                                        #   in Loop: Header=BB279_2 Depth=1
	addq	$8, %rcx
	movq	%rcx, env+112(%rip)
.LBB279_10:                             # %"$11"
                                        #   in Loop: Header=BB279_2 Depth=1
	testb	$15, %sil
	jne	.LBB279_12
# %bb.11:                               # %"$11.$4_crit_edge"
                                        #   in Loop: Header=BB279_2 Depth=1
	movq	env+112(%rip), %rdi
	jmp	.LBB279_2
.LBB279_12:                             # %"$16"
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
.LBB279_13:                             # %"$2"
	callq	makeErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _link;
	.scl	2;
	.type	32;
	.endef
	.globl	_link                           # -- Begin function _link
	.p2align	4, 0x90
_link:                                  # @_link
.seh_proc _link
# %bb.0:                                # %"$1"
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	env+112(%rip), %rsi
	testq	%rsi, %rsi
	je	.LBB280_8
# %bb.1:                                # %"$4.preheader"
	movq	8(%rcx), %rbx
	leaq	SymTab+8(%rip), %r14
	jmp	.LBB280_2
.LBB280_5:                              # %"$8"
                                        #   in Loop: Header=BB280_2 Depth=1
	movq	%rdi, %rcx
	callq	evList
	movq	%rax, %rdi
	movq	env+112(%rip), %rsi
	.p2align	4, 0x90
.LBB280_6:                              # %"$5"
                                        #   in Loop: Header=BB280_2 Depth=1
	movq	%rdi, %rcx
	movq	%r14, %rdx
	callq	cons
	movq	%rax, (%rsi)
	addq	$8, %rax
	movq	%rax, env+112(%rip)
	testb	$15, %bl
	movq	%rax, %rsi
	jne	.LBB280_7
.LBB280_2:                              # %"$4"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rbx), %rdi
	movq	8(%rbx), %rbx
	testb	$6, %dil
	jne	.LBB280_6
# %bb.3:                                # %"$6"
                                        #   in Loop: Header=BB280_2 Depth=1
	testb	$8, %dil
	je	.LBB280_5
# %bb.4:                                # %"$9"
                                        #   in Loop: Header=BB280_2 Depth=1
	movq	(%rdi), %rdi
	jmp	.LBB280_6
.LBB280_7:                              # %"$11"
	movq	%rdi, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq
.LBB280_8:                              # %"$2"
	callq	makeErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _yoke;
	.scl	2;
	.type	32;
	.endef
	.globl	_yoke                           # -- Begin function _yoke
	.p2align	4, 0x90
_yoke:                                  # @_yoke
.seh_proc _yoke
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	cmpq	$0, env+112(%rip)
	je	.LBB281_10
# %bb.1:                                # %"$4.preheader"
	movq	8(%rcx), %rdi
	jmp	.LBB281_2
.LBB281_5:                              # %"$8"
                                        #   in Loop: Header=BB281_2 Depth=1
	movq	%rsi, %rcx
	callq	evList
	movq	%rax, %rsi
	.p2align	4, 0x90
.LBB281_6:                              # %"$5"
                                        #   in Loop: Header=BB281_2 Depth=1
	movq	env+120(%rip), %rbx
	movq	(%rbx), %rdx
	movq	%rsi, %rcx
	callq	cons
	movq	%rax, (%rbx)
	testb	$15, %dil
	jne	.LBB281_7
.LBB281_2:                              # %"$4"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rsi
	movq	8(%rdi), %rdi
	testb	$6, %sil
	jne	.LBB281_6
# %bb.3:                                # %"$6"
                                        #   in Loop: Header=BB281_2 Depth=1
	testb	$8, %sil
	je	.LBB281_5
# %bb.4:                                # %"$9"
                                        #   in Loop: Header=BB281_2 Depth=1
	movq	(%rsi), %rsi
	jmp	.LBB281_6
.LBB281_7:                              # %"$12"
	movq	env+112(%rip), %rcx
	.p2align	4, 0x90
.LBB281_8:                              # %"$13"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rcx, %rax
	movq	(%rcx), %rdx
	movq	%rdx, %rcx
	addq	$8, %rcx
	testb	$15, %dl
	je	.LBB281_8
# %bb.9:                                # %"$15"
	movq	%rax, env+112(%rip)
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
.LBB281_10:                             # %"$2"
	callq	makeErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _copy;
	.scl	2;
	.type	32;
	.endef
	.globl	_copy                           # -- Begin function _copy
	.p2align	4, 0x90
_copy:                                  # @_copy
.seh_proc _copy
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	testb	$6, %sil
	jne	.LBB282_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB282_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
.LBB282_4:                              # %"$2"
	testb	$15, %sil
	je	.LBB282_6
.LBB282_5:
	movq	%rsi, %rbx
	jmp	.LBB282_12
.LBB282_2:                              # %"$6"
	movq	(%rsi), %rsi
	testb	$15, %sil
	jne	.LBB282_5
.LBB282_6:                              # %"$8"
	movq	(%rsi), %rcx
	movq	8(%rsi), %rdx
	subq	$32, %rsp
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rbx
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%rbx, (%r14)
	movq	%r14, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r14, env(%rip)
	movq	8(%rbx), %rdx
	testb	$15, %dl
	jne	.LBB282_11
# %bb.7:                                # %"$11.preheader"
	movq	%rbx, %rdi
	addq	$8, %rdi
	.p2align	4, 0x90
.LBB282_8:                              # %"$11"
                                        # =>This Inner Loop Header: Depth=1
	cmpq	%rsi, %rdx
	je	.LBB282_9
# %bb.10:                               # %"$13"
                                        #   in Loop: Header=BB282_8 Depth=1
	movq	(%rdx), %rcx
	movq	8(%rdx), %rdx
	subq	$32, %rsp
	callq	cons
	addq	$32, %rsp
	movq	%rax, (%rdi)
	movq	8(%rax), %rdx
	addq	$8, %rax
	testb	$15, %dl
	movq	%rax, %rdi
	je	.LBB282_8
	jmp	.LBB282_11
.LBB282_9:                              # %"$14"
	movq	%rbx, (%rdi)
.LBB282_11:                             # %"$12"
	movq	8(%r14), %rax
	movq	%rax, env(%rip)
.LBB282_12:                             # %"$9"
	movq	%rbx, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _mix;
	.scl	2;
	.type	32;
	.endef
	.globl	_mix                            # -- Begin function _mix
	.p2align	4, 0x90
_mix:                                   # @_mix
.seh_proc _mix
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rdi
	movq	(%rdi), %rsi
	testb	$6, %sil
	jne	.LBB283_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB283_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB283_4
.LBB283_2:                              # %"$6"
	movq	(%rsi), %rsi
.LBB283_4:                              # %"$2"
	leaq	SymTab+8(%rip), %r12
	cmpq	%r12, %rsi
	je	.LBB283_7
# %bb.5:                                # %"$2"
	movl	%esi, %eax
	andl	$15, %eax
	testq	%rax, %rax
	je	.LBB283_7
# %bb.6:
	movq	%rsi, %r12
	jmp	.LBB283_34
.LBB283_7:                              # %"$10"
	movq	8(%rdi), %rbx
	testb	$15, %bl
	jne	.LBB283_34
# %bb.8:                                # %"$12"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%rsi, (%r14)
	movq	%r14, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r14, env(%rip)
	movq	(%rbx), %rcx
	testb	$2, %cl
	jne	.LBB283_9
# %bb.15:                               # %"$15"
	testb	$6, %cl
	jne	.LBB283_19
# %bb.16:                               # %"$24"
	testb	$8, %cl
	jne	.LBB283_17
# %bb.18:                               # %"$26"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB283_19
.LBB283_9:                              # %"$14"
	movq	%rcx, %rdx
	shrq	$4, %rdx
	decq	%rdx
	movq	%rsi, %rax
	je	.LBB283_12
# %bb.10:                               # %"$18.preheader"
	movq	%rsi, %rax
	.p2align	4, 0x90
.LBB283_11:                             # %"$18"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rax), %rax
	decq	%rdx
	jne	.LBB283_11
.LBB283_12:                             # %"$19"
	testb	$8, %cl
	jne	.LBB283_13
# %bb.14:                               # %"$21"
	movq	(%rax), %rcx
	jmp	.LBB283_19
.LBB283_13:                             # %"$20"
	movq	8(%rax), %rcx
	jmp	.LBB283_19
.LBB283_17:                             # %"$27"
	movq	(%rcx), %rcx
.LBB283_19:                             # %"$16"
	subq	$32, %rsp
	leaq	SymTab+8(%rip), %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %r12
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%r12, (%rax)
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%rcx, (%rdx)
	movq	%rax, env(%rip)
	movq	8(%rbx), %rbx
	testb	$15, %bl
	je	.LBB283_20
.LBB283_33:                             # %"$30"
	movq	8(%r14), %rax
	movq	%rax, env(%rip)
.LBB283_34:                             # %"$7"
	movq	%r12, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB283_20:                             # %"$29.preheader"
	leaq	SymTab+8(%rip), %r15
	movq	%r12, %rdi
	jmp	.LBB283_21
	.p2align	4, 0x90
.LBB283_26:                             # %"$37"
                                        #   in Loop: Header=BB283_21 Depth=1
	movq	8(%rax), %rcx
.LBB283_32:                             # %"$33"
                                        #   in Loop: Header=BB283_21 Depth=1
	subq	$32, %rsp
	movq	%r15, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, 8(%rdi)
	movq	8(%rbx), %rbx
	testb	$15, %bl
	movq	%rax, %rdi
	jne	.LBB283_33
.LBB283_21:                             # %"$29"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB283_24 Depth 2
	movq	(%rbx), %rcx
	testb	$2, %cl
	jne	.LBB283_22
# %bb.28:                               # %"$32"
                                        #   in Loop: Header=BB283_21 Depth=1
	testb	$6, %cl
	jne	.LBB283_32
# %bb.29:                               # %"$41"
                                        #   in Loop: Header=BB283_21 Depth=1
	testb	$8, %cl
	jne	.LBB283_30
# %bb.31:                               # %"$43"
                                        #   in Loop: Header=BB283_21 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB283_32
	.p2align	4, 0x90
.LBB283_22:                             # %"$31"
                                        #   in Loop: Header=BB283_21 Depth=1
	movq	%rcx, %rdx
	shrq	$4, %rdx
	decq	%rdx
	movq	%rsi, %rax
	je	.LBB283_25
# %bb.23:                               # %"$35.preheader"
                                        #   in Loop: Header=BB283_21 Depth=1
	movq	%rsi, %rax
	.p2align	4, 0x90
.LBB283_24:                             # %"$35"
                                        #   Parent Loop BB283_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rax), %rax
	decq	%rdx
	jne	.LBB283_24
.LBB283_25:                             # %"$36"
                                        #   in Loop: Header=BB283_21 Depth=1
	testb	$8, %cl
	jne	.LBB283_26
# %bb.27:                               # %"$38"
                                        #   in Loop: Header=BB283_21 Depth=1
	movq	(%rax), %rcx
	jmp	.LBB283_32
.LBB283_30:                             # %"$44"
                                        #   in Loop: Header=BB283_21 Depth=1
	movq	(%rcx), %rcx
	jmp	.LBB283_32
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _append;
	.scl	2;
	.type	32;
	.endef
	.globl	_append                         # -- Begin function _append
	.p2align	4, 0x90
_append:                                # @_append
.seh_proc _append
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rdi
	jmp	.LBB284_1
.LBB284_9:                              # %"$14"
                                        #   in Loop: Header=BB284_1 Depth=1
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r14
	.p2align	4, 0x90
.LBB284_10:                             # %"$11"
                                        #   in Loop: Header=BB284_1 Depth=1
	testb	$15, %r14b
	je	.LBB284_11
.LBB284_1:                              # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rdi), %rdi
	testb	$15, 8(%rdi)
	movq	(%rdi), %r14
	jne	.LBB284_2
# %bb.6:                                # %"$3"
                                        #   in Loop: Header=BB284_1 Depth=1
	testb	$6, %r14b
	jne	.LBB284_10
# %bb.7:                                # %"$12"
                                        #   in Loop: Header=BB284_1 Depth=1
	testb	$8, %r14b
	je	.LBB284_9
# %bb.8:                                # %"$15"
                                        #   in Loop: Header=BB284_1 Depth=1
	movq	(%r14), %r14
	jmp	.LBB284_10
.LBB284_2:                              # %"$5"
	testb	$6, %r14b
	jne	.LBB284_29
# %bb.3:                                # %"$7"
	testb	$8, %r14b
	jne	.LBB284_4
# %bb.5:                                # %"$9"
	movq	%r14, %rcx
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	evList                          # TAILCALL
.LBB284_11:                             # %"$17"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%r14, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r15, env(%rip)
	movq	(%r14), %rcx
	movq	8(%r14), %rbx
	subq	$32, %rsp
	movq	%rbx, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %r14
	movq	%rax, (%r15)
	testb	$15, %bl
	movq	%rax, %rsi
	jne	.LBB284_14
# %bb.12:
	movq	%r14, %r12
	.p2align	4, 0x90
.LBB284_13:                             # %"$19"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rbx), %rcx
	movq	8(%rbx), %rbx
	subq	$32, %rsp
	movq	%rbx, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rsi
	movq	%rax, 8(%r12)
	testb	$15, %bl
	movq	%rax, %r12
	je	.LBB284_13
.LBB284_14:                             # %"$21.preheader"
	movq	8(%rdi), %r12
	movq	(%r12), %rdi
	testb	$6, %dil
	sete	%al
	testb	$15, 8(%r12)
	je	.LBB284_16
# %bb.15:
	movq	%rsi, %rbx
.LBB284_24:                             # %"$23"
	testb	%al, %al
	je	.LBB284_28
# %bb.25:                               # %"$33"
	testb	$8, %dil
	jne	.LBB284_26
# %bb.27:                               # %"$35"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdi
	jmp	.LBB284_28
	.p2align	4, 0x90
.LBB284_19:                             # %"$27"
                                        #   in Loop: Header=BB284_16 Depth=1
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdi
.LBB284_20:                             # %"$24"
                                        #   in Loop: Header=BB284_16 Depth=1
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r13
	movq	%rdi, (%r13)
	movq	%r13, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r13, env(%rip)
	testb	$15, %dil
	je	.LBB284_22
# %bb.21:                               #   in Loop: Header=BB284_16 Depth=1
	movq	%rsi, %rbx
.LBB284_23:                             # %"$31"
                                        #   in Loop: Header=BB284_16 Depth=1
	movq	8(%r13), %rax
	movq	%rax, env(%rip)
	movq	8(%r12), %r12
	movq	(%r12), %rdi
	testb	$6, %dil
	sete	%al
	testb	$15, 8(%r12)
	movq	%rbx, %rsi
	jne	.LBB284_24
.LBB284_16:                             # %"$22"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB284_22 Depth 2
	testb	$1, %al
	je	.LBB284_20
# %bb.17:                               # %"$25"
                                        #   in Loop: Header=BB284_16 Depth=1
	testb	$8, %dil
	je	.LBB284_19
# %bb.18:                               # %"$28"
                                        #   in Loop: Header=BB284_16 Depth=1
	movq	(%rdi), %rdi
	jmp	.LBB284_20
	.p2align	4, 0x90
.LBB284_22:                             # %"$30"
                                        #   Parent Loop BB284_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rdi), %rcx
	movq	8(%rdi), %rdi
	subq	$32, %rsp
	movq	%rdi, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rbx
	movq	%rax, 8(%rsi)
	testb	$15, %dil
	movq	%rax, %rsi
	je	.LBB284_22
	jmp	.LBB284_23
.LBB284_26:                             # %"$36"
	movq	(%rdi), %rdi
.LBB284_28:                             # %"$32"
	movq	%rdi, 8(%rbx)
	movq	8(%r15), %rax
	movq	%rax, env(%rip)
.LBB284_29:                             # %"$4"
	movq	%r14, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB284_4:                              # %"$10"
	movq	(%r14), %r14
	jmp	.LBB284_29
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _delete;
	.scl	2;
	.type	32;
	.endef
	.globl	_delete                         # -- Begin function _delete
	.p2align	4, 0x90
_delete:                                # @_delete
.seh_proc _delete
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %r12
	movq	8(%rax), %rsi
	testb	$6, %r12b
	jne	.LBB285_4
# %bb.1:                                # %"$3"
	testb	$8, %r12b
	jne	.LBB285_3
# %bb.2:                                # %"$5"
	subq	$32, %rsp
	movq	%r12, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r12
	jmp	.LBB285_4
.LBB285_3:                              # %"$6"
	movq	(%r12), %r12
.LBB285_4:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%r12, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r15, env(%rip)
	movq	(%rsi), %rdi
	movq	8(%rsi), %rsi
	testb	$6, %dil
	jne	.LBB285_9
# %bb.6:                                # %"$8"
	testb	$8, %dil
	jne	.LBB285_8
# %bb.7:                                # %"$10"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdi
	movq	env(%rip), %rcx
	jmp	.LBB285_10
.LBB285_8:                              # %"$11"
	movq	(%rdi), %rdi
.LBB285_9:                              # %"$7"
	movq	%r15, %rcx
.LBB285_10:                             # %"$7"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rdi, (%rax)
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%rcx, (%rdx)
	movq	%rax, env(%rip)
	movq	(%rsi), %rbx
	testb	$6, %bl
	jne	.LBB285_14
# %bb.11:                               # %"$13"
	testb	$8, %bl
	jne	.LBB285_13
# %bb.12:                               # %"$15"
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rbx
	jmp	.LBB285_14
.LBB285_13:                             # %"$16"
	movq	(%rbx), %rbx
.LBB285_14:                             # %"$12"
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rbx
	jne	.LBB285_18
# %bb.15:                               # %"$17.us"
	testb	$15, %dil
	jne	.LBB285_34
# %bb.16:                               # %"$18.us"
	movq	(%rdi), %rdx
	subq	$32, %rsp
	movq	%r12, %rcx
	callq	equal
	addq	$32, %rsp
	testb	$1, %al
	movq	%rdi, %rsi
	je	.LBB285_22
# %bb.17:                               # %"$21.us"
	movq	8(%rdi), %rdi
	jmp	.LBB285_34
	.p2align	4, 0x90
.LBB285_18:                             # %"$17.preheader"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %dil
	jne	.LBB285_34
# %bb.19:                               # %"$18"
                                        #   in Loop: Header=BB285_18 Depth=1
	movq	(%rdi), %rdx
	subq	$32, %rsp
	movq	%r12, %rcx
	callq	equal
	addq	$32, %rsp
	testb	$1, %al
	je	.LBB285_21
# %bb.20:                               # %"$21"
                                        #   in Loop: Header=BB285_18 Depth=1
	movq	8(%rdi), %rdi
	jmp	.LBB285_18
.LBB285_21:
	movq	%rdi, %rsi
.LBB285_22:                             # %"$22"
	movq	(%rsi), %rcx
	subq	$32, %rsp
	leaq	SymTab+8(%rip), %r14
	movq	%r14, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rdi
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rdi, (%rax)
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%rcx, (%rdx)
	movq	%rax, env(%rip)
	movq	8(%rsi), %rsi
	testb	$15, %sil
	je	.LBB285_24
# %bb.23:
	movq	%rdi, %rbx
	movq	%rsi, 8(%rdi)
	jmp	.LBB285_34
.LBB285_24:                             # %"$24.lr.ph"
	cmpq	%r14, %rbx
	jne	.LBB285_29
# %bb.25:                               # %"$24.us.preheader"
	leaq	SymTab+8(%rip), %r14
	movq	%rdi, %r13
	.p2align	4, 0x90
.LBB285_26:                             # %"$24.us"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rdx
	subq	$32, %rsp
	movq	%r12, %rcx
	callq	equal
	addq	$32, %rsp
	testb	$1, %al
	jne	.LBB285_33
# %bb.27:                               # %"$27.us"
                                        #   in Loop: Header=BB285_26 Depth=1
	movq	(%rsi), %rcx
	subq	$32, %rsp
	movq	%r14, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rbx
	movq	%rax, 8(%r13)
	movq	8(%rsi), %rsi
	testb	$15, %sil
	movq	%rax, %r13
	je	.LBB285_26
.LBB285_28:                             # %"$26"
	movq	%rsi, 8(%rbx)
	jmp	.LBB285_34
.LBB285_29:
	leaq	SymTab+8(%rip), %r14
	movq	%rdi, %rbx
	jmp	.LBB285_31
	.p2align	4, 0x90
.LBB285_30:                             # %"$29"
                                        #   in Loop: Header=BB285_31 Depth=1
	movq	8(%rsi), %rsi
	testb	$15, %sil
	jne	.LBB285_28
.LBB285_31:                             # %"$24"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rdx
	subq	$32, %rsp
	movq	%r12, %rcx
	callq	equal
	addq	$32, %rsp
	testb	$1, %al
	jne	.LBB285_30
# %bb.32:                               # %"$27"
                                        #   in Loop: Header=BB285_31 Depth=1
	movq	(%rsi), %rcx
	subq	$32, %rsp
	movq	%r14, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, 8(%rbx)
	movq	%rax, %rbx
	jmp	.LBB285_30
.LBB285_33:                             # %"$31"
	movq	8(%rsi), %rax
	movq	%rax, 8(%r13)
.LBB285_34:                             # %"$19"
	movq	8(%r15), %rax
	movq	%rax, env(%rip)
	movq	%rdi, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _delq;
	.scl	2;
	.type	32;
	.endef
	.globl	_delq                           # -- Begin function _delq
	.p2align	4, 0x90
_delq:                                  # @_delq
.seh_proc _delq
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %r12
	movq	8(%rax), %rsi
	testb	$6, %r12b
	jne	.LBB286_4
# %bb.1:                                # %"$3"
	testb	$8, %r12b
	jne	.LBB286_3
# %bb.2:                                # %"$5"
	subq	$32, %rsp
	movq	%r12, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r12
	jmp	.LBB286_4
.LBB286_3:                              # %"$6"
	movq	(%r12), %r12
.LBB286_4:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%r12, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r15, env(%rip)
	movq	(%rsi), %rdi
	movq	8(%rsi), %rsi
	testb	$6, %dil
	jne	.LBB286_9
# %bb.6:                                # %"$8"
	testb	$8, %dil
	jne	.LBB286_8
# %bb.7:                                # %"$10"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdi
	movq	env(%rip), %rcx
	jmp	.LBB286_10
.LBB286_8:                              # %"$11"
	movq	(%rdi), %rdi
.LBB286_9:                              # %"$7"
	movq	%r15, %rcx
.LBB286_10:                             # %"$7"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rdi, (%rax)
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%rcx, (%rdx)
	movq	%rax, env(%rip)
	movq	(%rsi), %rbx
	testb	$6, %bl
	jne	.LBB286_14
# %bb.11:                               # %"$13"
	testb	$8, %bl
	jne	.LBB286_13
# %bb.12:                               # %"$15"
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rbx
	jmp	.LBB286_14
.LBB286_13:                             # %"$16"
	movq	(%rbx), %rbx
.LBB286_14:                             # %"$12"
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rbx
	jne	.LBB286_18
# %bb.15:                               # %"$17.us"
	testb	$15, %dil
	jne	.LBB286_34
# %bb.16:                               # %"$18.us"
	movq	(%rdi), %rcx
	cmpq	%rcx, %r12
	movq	%rdi, %rsi
	jne	.LBB286_22
# %bb.17:                               # %"$21.us"
	movq	8(%rdi), %rdi
	jmp	.LBB286_34
	.p2align	4, 0x90
.LBB286_18:                             # %"$17.preheader"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %dil
	jne	.LBB286_34
# %bb.19:                               # %"$18"
                                        #   in Loop: Header=BB286_18 Depth=1
	movq	(%rdi), %rcx
	cmpq	%rcx, %r12
	jne	.LBB286_21
# %bb.20:                               # %"$21"
                                        #   in Loop: Header=BB286_18 Depth=1
	movq	8(%rdi), %rdi
	jmp	.LBB286_18
.LBB286_21:
	movq	%rdi, %rsi
.LBB286_22:                             # %"$22"
	subq	$32, %rsp
	leaq	SymTab+8(%rip), %r14
	movq	%r14, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rdi
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rdi, (%rax)
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%rcx, (%rdx)
	movq	%rax, env(%rip)
	movq	8(%rsi), %rsi
	testb	$15, %sil
	je	.LBB286_24
# %bb.23:
	movq	%rdi, %rbx
	movq	%rsi, 8(%rdi)
	jmp	.LBB286_34
.LBB286_24:                             # %"$24.lr.ph"
	cmpq	%r14, %rbx
	jne	.LBB286_29
# %bb.25:                               # %"$24.us.preheader"
	leaq	SymTab+8(%rip), %r14
	movq	%rdi, %r13
	.p2align	4, 0x90
.LBB286_26:                             # %"$24.us"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rcx
	cmpq	%rcx, %r12
	je	.LBB286_33
# %bb.27:                               # %"$27.us"
                                        #   in Loop: Header=BB286_26 Depth=1
	subq	$32, %rsp
	movq	%r14, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rbx
	movq	%rax, 8(%r13)
	movq	8(%rsi), %rsi
	testb	$15, %sil
	movq	%rax, %r13
	je	.LBB286_26
.LBB286_28:                             # %"$26"
	movq	%rsi, 8(%rbx)
	jmp	.LBB286_34
.LBB286_29:
	leaq	SymTab+8(%rip), %r14
	movq	%rdi, %rbx
	jmp	.LBB286_31
	.p2align	4, 0x90
.LBB286_30:                             # %"$29"
                                        #   in Loop: Header=BB286_31 Depth=1
	movq	8(%rsi), %rsi
	testb	$15, %sil
	jne	.LBB286_28
.LBB286_31:                             # %"$24"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rcx
	cmpq	%rcx, %r12
	je	.LBB286_30
# %bb.32:                               # %"$27"
                                        #   in Loop: Header=BB286_31 Depth=1
	subq	$32, %rsp
	movq	%r14, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, 8(%rbx)
	movq	%rax, %rbx
	jmp	.LBB286_30
.LBB286_33:                             # %"$31"
	movq	8(%rsi), %rax
	movq	%rax, 8(%r13)
.LBB286_34:                             # %"$19"
	movq	8(%r15), %rax
	movq	%rax, env(%rip)
	movq	%rdi, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _replace;
	.scl	2;
	.type	32;
	.endef
	.globl	_replace                        # -- Begin function _replace
	.p2align	4, 0x90
_replace:                               # @_replace
.seh_proc _replace
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$24, %rsp
	.seh_stackalloc 24
	leaq	16(%rsp), %rbp
	.seh_setframe %rbp, 16
	.seh_endprologue
	movq	8(%rcx), %rdi
	movq	(%rdi), %rsi
	testb	$6, %sil
	jne	.LBB287_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB287_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB287_4
.LBB287_2:                              # %"$6"
	movq	(%rsi), %rsi
.LBB287_4:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%rsi, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r15, env(%rip)
	testb	$15, %sil
	jne	.LBB287_29
# %bb.5:                                # %"$8"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, (%rbp)                    # 8-byte Spill
	movq	8(%rdi), %rax
	testb	$15, %al
	je	.LBB287_7
# %bb.6:
	leaq	SymTab+8(%rip), %r14
	xorl	%ebx, %ebx
.LBB287_17:                             # %"$12"
	movq	(%rsi), %r13
	movq	8(%rsi), %r12
	movq	%r14, %rdi
	movq	%rbx, -16(%rbp)                 # 8-byte Spill
	.p2align	4, 0x90
.LBB287_18:                             # %"$23"
                                        # =>This Inner Loop Header: Depth=1
	decq	%rbx
	js	.LBB287_19
# %bb.20:                               # %"$24"
                                        #   in Loop: Header=BB287_18 Depth=1
	movq	(%rdi), %rsi
	movq	8(%rdi), %rax
	movq	(%rax), %rdx
	movq	8(%rax), %rdi
	subq	$32, %rsp
	movq	%r13, %rcx
	callq	equal
	addq	$32, %rsp
	testb	$1, %al
	je	.LBB287_18
	jmp	.LBB287_21
.LBB287_19:
	movq	%r13, %rsi
.LBB287_21:                             # %"$25"
	movq	env(%rip), %rax
	movq	(%rbp), %rdi                    # 8-byte Reload
	movq	%rax, 8(%rdi)
	movq	%rdi, env(%rip)
	subq	$32, %rsp
	leaq	SymTab+8(%rip), %rdx
	movq	%rsi, %rcx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rsi
	movq	%rax, (%rdi)
	testb	$15, %r12b
	jne	.LBB287_29
# %bb.22:                               # %"$29.preheader"
	movq	%r15, -8(%rbp)                  # 8-byte Spill
	jmp	.LBB287_23
	.p2align	4, 0x90
.LBB287_25:                             #   in Loop: Header=BB287_23 Depth=1
	movq	%rdi, %rbx
.LBB287_27:                             # %"$33"
                                        #   in Loop: Header=BB287_23 Depth=1
	subq	$32, %rsp
	movq	%rbx, %rcx
	leaq	SymTab+8(%rip), %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, 8(%rsi)
	testb	$15, %r12b
	movq	%rax, %rsi
	jne	.LBB287_28
.LBB287_23:                             # %"$29"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB287_24 Depth 2
	movq	(%r12), %rdi
	movq	8(%r12), %r12
	movq	%r14, %r15
	movq	-16(%rbp), %r13                 # 8-byte Reload
	.p2align	4, 0x90
.LBB287_24:                             # %"$31"
                                        #   Parent Loop BB287_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	decq	%r13
	js	.LBB287_25
# %bb.26:                               # %"$32"
                                        #   in Loop: Header=BB287_24 Depth=2
	movq	(%r15), %rbx
	movq	8(%r15), %rax
	movq	(%rax), %rdx
	movq	8(%rax), %r15
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	equal
	addq	$32, %rsp
	testb	$1, %al
	je	.LBB287_24
	jmp	.LBB287_27
.LBB287_7:                              # %"$11.preheader"
	xorl	%ebx, %ebx
	movq	%r15, %r14
	jmp	.LBB287_8
.LBB287_15:                             # %"$21"
                                        #   in Loop: Header=BB287_8 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	movq	env(%rip), %rdx
	.p2align	4, 0x90
.LBB287_16:                             # %"$18"
                                        #   in Loop: Header=BB287_8 Depth=1
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%rcx, (%r14)
	movq	%rdx, 8(%r14)
	movq	%r14, env(%rip)
	incq	%rbx
	movq	8(%rdi), %rax
	testb	$15, %al
	jne	.LBB287_17
.LBB287_8:                              # %"$11"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rax), %rcx
	movq	8(%rax), %rdi
	testb	$6, %cl
	jne	.LBB287_12
# %bb.9:                                # %"$14"
                                        #   in Loop: Header=BB287_8 Depth=1
	testb	$8, %cl
	jne	.LBB287_10
# %bb.11:                               # %"$16"
                                        #   in Loop: Header=BB287_8 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	movq	env(%rip), %r14
	jmp	.LBB287_12
.LBB287_10:                             # %"$17"
                                        #   in Loop: Header=BB287_8 Depth=1
	movq	(%rcx), %rcx
	.p2align	4, 0x90
.LBB287_12:                             # %"$13"
                                        #   in Loop: Header=BB287_8 Depth=1
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdx
	movq	%rcx, (%rdx)
	movq	%r14, 8(%rdx)
	movq	%rdx, env(%rip)
	movq	(%rdi), %rcx
	testb	$6, %cl
	jne	.LBB287_16
# %bb.13:                               # %"$19"
                                        #   in Loop: Header=BB287_8 Depth=1
	testb	$8, %cl
	je	.LBB287_15
# %bb.14:                               # %"$22"
                                        #   in Loop: Header=BB287_8 Depth=1
	movq	(%rcx), %rcx
	jmp	.LBB287_16
.LBB287_28:                             # %"$30.loopexit"
	movq	(%rbp), %rax                    # 8-byte Reload
	movq	(%rax), %rsi
	movq	-8(%rbp), %r15                  # 8-byte Reload
.LBB287_29:                             # %"$9"
	movq	8(%r15), %rax
	movq	%rax, env(%rip)
	movq	%rsi, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _insert;
	.scl	2;
	.type	32;
	.endef
	.globl	_insert                         # -- Begin function _insert
	.p2align	4, 0x90
_insert:                                # @_insert
.seh_proc _insert
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rdi
	movq	(%rdi), %rax
	testb	$6, %al
	jne	.LBB288_4
# %bb.1:                                # %"$3.i"
	testb	$8, %al
	jne	.LBB288_3
# %bb.2:                                # %"$5.i"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB288_4
.LBB288_3:                              # %"$6.i"
	movq	(%rax), %rax
.LBB288_4:                              # %"$2.i"
	testb	$2, %al
	je	.LBB288_25
# %bb.5:                                # %evCnt.exit
	movq	%rax, %rcx
	shrq	$4, %rcx
	movq	%rcx, %rsi
	negq	%rsi
	testb	$8, %al
	cmoveq	%rcx, %rsi
	movq	8(%rdi), %rbx
	movq	(%rbx), %rdi
	testb	$6, %dil
	jne	.LBB288_9
# %bb.6:                                # %"$3"
	testb	$8, %dil
	jne	.LBB288_8
# %bb.7:                                # %"$5"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdi
	jmp	.LBB288_9
.LBB288_8:                              # %"$6"
	movq	(%rdi), %rdi
.LBB288_9:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r12
	movq	%rdi, (%r12)
	movq	%r12, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r12, env(%rip)
	movq	8(%rbx), %rax
	movq	(%rax), %r15
	testb	$6, %r15b
	je	.LBB288_10
# %bb.12:                               # %"$7"
	cmpq	$2, %rsi
	jl	.LBB288_20
.LBB288_13:                             # %"$7"
	movl	%edi, %eax
	andl	$15, %eax
	testq	%rax, %rax
	jne	.LBB288_20
# %bb.14:                               # %"$15"
	xorl	%ebx, %ebx
	testb	$15, %dil
	sete	%bl
	movq	%rsi, %r13
	subq	%rbx, %r13
	movq	(%rdi), %rcx
	subq	$32, %rsp
	leaq	SymTab+8(%rip), %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rcx
	movq	env(%rip), %r8
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rcx, (%rax)
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%r8, (%rdx)
	movq	%rax, env(%rip)
	movq	8(%rdi), %rdi
	cmpq	$1, %r13
	movq	%rcx, (%rbp)                    # 8-byte Spill
	je	.LBB288_22
# %bb.15:                               # %"$15"
	movl	%edi, %eax
	andl	$15, %eax
	testq	%rax, %rax
	jne	.LBB288_22
# %bb.16:                               # %"$20.preheader"
	negq	%rbx
	leaq	-2(%rsi,%rbx), %rsi
	leaq	SymTab+8(%rip), %r13
	movq	%rcx, %rbx
	.p2align	4, 0x90
.LBB288_17:                             # %"$20"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rbx, %r14
	movq	(%rdi), %rcx
	subq	$32, %rsp
	movq	%r13, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rbx
	movq	%rax, 8(%r14)
	movq	8(%rdi), %rdi
	addq	$-1, %rsi
	jae	.LBB288_23
# %bb.18:                               # %"$20"
                                        #   in Loop: Header=BB288_17 Depth=1
	movl	%edi, %eax
	andl	$15, %eax
	testq	%rax, %rax
	je	.LBB288_17
	jmp	.LBB288_23
.LBB288_10:                             # %"$8"
	testb	$8, %r15b
	jne	.LBB288_19
# %bb.11:                               # %"$10"
	subq	$32, %rsp
	movq	%r15, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r15
	cmpq	$2, %rsi
	jge	.LBB288_13
	jmp	.LBB288_20
.LBB288_22:
	movq	%rcx, %rbx
.LBB288_23:                             # %"$21"
	subq	$32, %rsp
	movq	%r15, %rcx
	movq	%rdi, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, 8(%rbx)
	movq	(%rbp), %rax                    # 8-byte Reload
	jmp	.LBB288_24
.LBB288_19:                             # %"$11"
	movq	(%r15), %r15
	cmpq	$2, %rsi
	jge	.LBB288_13
.LBB288_20:                             # %"$14"
	subq	$32, %rsp
	movq	%r15, %rcx
	movq	%rdi, %rdx
	callq	cons
	addq	$32, %rsp
.LBB288_24:                             # %"$16"
	movq	8(%r12), %rcx
	movq	%rcx, env(%rip)
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB288_25:                             # %"$2.i.i"
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	cntErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _remove;
	.scl	2;
	.type	32;
	.endef
	.globl	_remove                         # -- Begin function _remove
	.p2align	4, 0x90
_remove:                                # @_remove
.seh_proc _remove
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rdi
	movq	(%rdi), %rax
	testb	$6, %al
	jne	.LBB289_4
# %bb.1:                                # %"$3.i"
	testb	$8, %al
	jne	.LBB289_3
# %bb.2:                                # %"$5.i"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB289_4
.LBB289_3:                              # %"$6.i"
	movq	(%rax), %rax
.LBB289_4:                              # %"$2.i"
	testb	$2, %al
	je	.LBB289_23
# %bb.5:                                # %evCnt.exit
	movq	%rax, %rcx
	shrq	$4, %rcx
	movq	%rcx, %rbx
	negq	%rbx
	testb	$8, %al
	cmoveq	%rcx, %rbx
	movq	8(%rdi), %rax
	movq	(%rax), %rsi
	testb	$6, %sil
	jne	.LBB289_9
# %bb.6:                                # %"$3"
	testb	$8, %sil
	jne	.LBB289_8
# %bb.7:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB289_9
.LBB289_8:                              # %"$6"
	movq	(%rsi), %rsi
.LBB289_9:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r12
	movq	%rsi, (%r12)
	movq	%r12, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r12, env(%rip)
	xorl	%eax, %eax
	movq	%rsi, %rdx
	andq	$15, %rdx
	sete	%cl
	testq	%rbx, %rbx
	jle	.LBB289_15
# %bb.10:                               # %"$2"
	testq	%rdx, %rdx
	jne	.LBB289_15
# %bb.11:                               # %"$10"
	movb	%cl, %al
	subq	%rax, %rbx
	je	.LBB289_16
# %bb.12:                               # %"$12"
	movq	(%rsi), %rcx
	subq	$32, %rsp
	leaq	SymTab+8(%rip), %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %r14
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%r14, (%rax)
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%rcx, (%rdx)
	movq	%rax, env(%rip)
	movq	8(%rsi), %rsi
	testb	$15, %sil
	je	.LBB289_17
# %bb.13:
	movq	%r14, %rax
	jmp	.LBB289_20
.LBB289_15:
	movq	%rsi, %r14
	jmp	.LBB289_21
.LBB289_16:                             # %"$13"
	movq	8(%rsi), %r14
	jmp	.LBB289_21
.LBB289_17:
	leaq	SymTab+8(%rip), %r15
	movq	%r14, %rdi
	.p2align	4, 0x90
.LBB289_18:                             # %"$15"
                                        # =>This Inner Loop Header: Depth=1
	decq	%rbx
	je	.LBB289_22
# %bb.19:                               # %"$18"
                                        #   in Loop: Header=BB289_18 Depth=1
	movq	(%rsi), %rcx
	subq	$32, %rsp
	movq	%r15, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, 8(%rdi)
	movq	8(%rsi), %rsi
	testb	$15, %sil
	movq	%rax, %rdi
	je	.LBB289_18
.LBB289_20:                             # %"$17"
	movq	%rsi, 8(%rax)
.LBB289_21:                             # %"$7"
	movq	8(%r12), %rax
	movq	%rax, env(%rip)
	movq	%r14, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB289_22:                             # %"$19"
	movq	8(%rsi), %rax
	movq	%rax, 8(%rdi)
	jmp	.LBB289_21
.LBB289_23:                             # %"$2.i.i"
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	cntErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _place;
	.scl	2;
	.type	32;
	.endef
	.globl	_place                          # -- Begin function _place
	.p2align	4, 0x90
_place:                                 # @_place
.seh_proc _place
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rdi
	movq	(%rdi), %rax
	testb	$6, %al
	jne	.LBB290_4
# %bb.1:                                # %"$3.i"
	testb	$8, %al
	jne	.LBB290_3
# %bb.2:                                # %"$5.i"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB290_4
.LBB290_3:                              # %"$6.i"
	movq	(%rax), %rax
.LBB290_4:                              # %"$2.i"
	testb	$2, %al
	je	.LBB290_28
# %bb.5:                                # %evCnt.exit
	movq	%rax, %rcx
	shrq	$4, %rcx
	movq	%rcx, %rsi
	negq	%rsi
	testb	$8, %al
	cmoveq	%rcx, %rsi
	movq	8(%rdi), %rbx
	movq	(%rbx), %rdi
	testb	$6, %dil
	jne	.LBB290_9
# %bb.6:                                # %"$3"
	testb	$8, %dil
	jne	.LBB290_8
# %bb.7:                                # %"$5"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdi
	jmp	.LBB290_9
.LBB290_8:                              # %"$6"
	movq	(%rdi), %rdi
.LBB290_9:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r12
	movq	%rdi, (%r12)
	movq	%r12, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r12, env(%rip)
	movq	8(%rbx), %rax
	movq	(%rax), %r13
	testb	$6, %r13b
	jne	.LBB290_14
# %bb.11:                               # %"$8"
	testb	$8, %r13b
	jne	.LBB290_13
# %bb.12:                               # %"$10"
	subq	$32, %rsp
	movq	%r13, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r13
	movq	env(%rip), %rcx
	jmp	.LBB290_15
.LBB290_13:                             # %"$11"
	movq	(%r13), %r13
.LBB290_14:                             # %"$7"
	movq	%r12, %rcx
.LBB290_15:                             # %"$7"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%r13, (%rax)
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%rcx, (%rdx)
	movq	%rax, env(%rip)
	testb	$15, %dil
	je	.LBB290_17
# %bb.16:                               # %"$14"
	subq	$32, %rsp
	leaq	SymTab+8(%rip), %rdx
	jmp	.LBB290_19
.LBB290_17:                             # %"$13"
	cmpq	$1, %rsi
	jg	.LBB290_21
# %bb.18:                               # %"$16"
	movq	8(%rdi), %rdx
	subq	$32, %rsp
.LBB290_19:                             # %"$12"
	movq	%r13, %rcx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %r14
.LBB290_20:                             # %"$12"
	movq	8(%r12), %rax
	movq	%rax, env(%rip)
	movq	%r14, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB290_21:                             # %"$15"
	movq	(%rdi), %rcx
	subq	$32, %rsp
	leaq	SymTab+8(%rip), %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %r14
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%r14, (%rax)
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%rcx, (%rdx)
	movq	%rax, env(%rip)
	movq	8(%rdi), %rdi
	testb	$15, %dil
	je	.LBB290_23
# %bb.22:
	movq	%r14, %rbx
	jmp	.LBB290_26
.LBB290_23:                             # %"$18.preheader"
	decq	%rsi
	movq	%r14, %r15
	.p2align	4, 0x90
.LBB290_24:                             # %"$18"
                                        # =>This Inner Loop Header: Depth=1
	decq	%rsi
	je	.LBB290_27
# %bb.25:                               # %"$21"
                                        #   in Loop: Header=BB290_24 Depth=1
	movq	(%rdi), %rcx
	subq	$32, %rsp
	leaq	SymTab+8(%rip), %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rbx
	movq	%rax, 8(%r15)
	movq	8(%rdi), %rdi
	testb	$15, %dil
	movq	%rax, %r15
	je	.LBB290_24
.LBB290_26:                             # %"$20"
	subq	$32, %rsp
	movq	%r13, %rcx
	movq	%rdi, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, 8(%rbx)
	jmp	.LBB290_20
.LBB290_27:                             # %"$22"
	movq	8(%rdi), %rdx
	subq	$32, %rsp
	movq	%r13, %rcx
	callq	cons
	addq	$32, %rsp
	movq	%rax, 8(%r15)
	jmp	.LBB290_20
.LBB290_28:                             # %"$2.i.i"
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	cntErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _strip;
	.scl	2;
	.type	32;
	.endef
	.globl	_strip                          # -- Begin function _strip
	.p2align	4, 0x90
_strip:                                 # @_strip
.seh_proc _strip
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB291_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB291_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB291_4
.LBB291_2:                              # %"$6"
	movq	(%rax), %rax
.LBB291_4:                              # %"$7.preheader"
	leaq	SymTab+264(%rip), %rdx
	.p2align	4, 0x90
.LBB291_5:                              # %"$7"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rcx
	testb	$15, %cl
	jne	.LBB291_8
# %bb.6:                                # %"$9"
                                        #   in Loop: Header=BB291_5 Depth=1
	cmpq	%rdx, (%rcx)
	jne	.LBB291_8
# %bb.7:                                # %"$10"
                                        #   in Loop: Header=BB291_5 Depth=1
	movq	8(%rcx), %rax
	cmpq	%rcx, %rax
	jne	.LBB291_5
.LBB291_8:                              # %"$11"
	movq	%rcx, %rax
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _split;
	.scl	2;
	.type	32;
	.endef
	.globl	_split                          # -- Begin function _split
	.p2align	4, 0x90
_split:                                 # @_split
.seh_proc _split
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	leaq	32(%rsp), %rbp
	.seh_setframe %rbp, 32
	.seh_endprologue
	movq	8(%rcx), %rdi
	movq	(%rdi), %r14
	testb	$6, %r14b
	jne	.LBB292_4
# %bb.1:                                # %"$3"
	testb	$8, %r14b
	jne	.LBB292_3
# %bb.2:                                # %"$5"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r14
	jmp	.LBB292_4
.LBB292_3:                              # %"$6"
	movq	(%r14), %r14
.LBB292_4:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdx
	movq	%r14, (%rdx)
	movq	%rdx, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rdx, env(%rip)
	testb	$15, %r14b
	jne	.LBB292_23
# %bb.5:                                # %"$10.preheader"
	movq	8(%rdi), %rbx
	leaq	SymTab+8(%rip), %rsi
	testb	$15, %bl
	movq	%rdx, -24(%rbp)                 # 8-byte Spill
	je	.LBB292_24
# %bb.6:
	xorl	%eax, %eax
	movq	%rax, -16(%rbp)                 # 8-byte Spill
	movq	%rsi, %r12
.LBB292_7:                              # %"$12"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rcx
	movq	%rsi, (%rcx)
	movq	%rdx, 8(%rcx)
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rsi, (%rax)
	movq	%rcx, -32(%rbp)                 # 8-byte Spill
	movq	%rcx, 8(%rax)
	movq	%rax, (%rbp)                    # 8-byte Spill
	movq	%rax, env(%rip)
	movq	%rsi, -8(%rbp)                  # 8-byte Spill
	movq	%rsi, %r13
	jmp	.LBB292_11
	.p2align	4, 0x90
.LBB292_8:                              # %"$24"
                                        #   in Loop: Header=BB292_11 Depth=1
	movq	%rax, 8(%r13)
.LBB292_9:                              # %"$21"
                                        #   in Loop: Header=BB292_11 Depth=1
	movq	%rdi, %r12
.LBB292_10:                             # %"$21"
                                        #   in Loop: Header=BB292_11 Depth=1
	testb	$15, %r14b
	movq	%rax, %r13
	jne	.LBB292_20
.LBB292_11:                             # %"$18"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB292_12 Depth 2
	movq	(%r14), %rbx
	movq	8(%r14), %r14
	movq	%r12, %rdi
	movq	-16(%rbp), %r15                 # 8-byte Reload
	.p2align	4, 0x90
.LBB292_12:                             # %"$19"
                                        #   Parent Loop BB292_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	decq	%r15
	js	.LBB292_16
# %bb.13:                               # %"$20"
                                        #   in Loop: Header=BB292_12 Depth=2
	movq	(%r12), %rdx
	movq	8(%r12), %r12
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	equal
	addq	$32, %rsp
	testb	$1, %al
	je	.LBB292_12
# %bb.14:                               # %"$27"
                                        #   in Loop: Header=BB292_11 Depth=1
	movq	(%rbp), %rax                    # 8-byte Reload
	movq	(%rax), %rcx
	subq	$32, %rsp
	movq	%rsi, %rdx
	callq	cons
	addq	$32, %rsp
	movq	-8(%rbp), %rcx                  # 8-byte Reload
	cmpq	%rsi, %rcx
	jne	.LBB292_18
# %bb.15:                               # %"$28"
                                        #   in Loop: Header=BB292_11 Depth=1
	movq	-32(%rbp), %rcx                 # 8-byte Reload
	movq	%rax, (%rcx)
	jmp	.LBB292_19
	.p2align	4, 0x90
.LBB292_16:                             # %"$22"
                                        #   in Loop: Header=BB292_11 Depth=1
	subq	$32, %rsp
	movq	%rbx, %rcx
	movq	%rsi, %rdx
	callq	cons
	addq	$32, %rsp
	cmpq	%rsi, %r13
	jne	.LBB292_8
# %bb.17:                               # %"$23"
                                        #   in Loop: Header=BB292_11 Depth=1
	movq	(%rbp), %rcx                    # 8-byte Reload
	movq	%rax, (%rcx)
	jmp	.LBB292_9
	.p2align	4, 0x90
.LBB292_18:                             # %"$29"
                                        #   in Loop: Header=BB292_11 Depth=1
	movq	%rax, 8(%rcx)
.LBB292_19:                             # %"$30"
                                        #   in Loop: Header=BB292_11 Depth=1
	movq	%rdi, %r12
	movq	(%rbp), %rcx                    # 8-byte Reload
	movq	%rsi, (%rcx)
	movq	%rax, -8(%rbp)                  # 8-byte Spill
	movq	%rsi, %rax
	jmp	.LBB292_10
.LBB292_20:                             # %"$32"
	movq	(%rbp), %rax                    # 8-byte Reload
	movq	(%rax), %rcx
	subq	$32, %rsp
	leaq	SymTab+8(%rip), %rbx
	movq	%rbx, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %r14
	movq	-8(%rbp), %rax                  # 8-byte Reload
	cmpq	%rbx, %rax
	je	.LBB292_22
# %bb.21:                               # %"$34"
	movq	%r14, 8(%rax)
	movq	-32(%rbp), %rax                 # 8-byte Reload
	movq	(%rax), %r14
.LBB292_22:                             # %"$9"
	movq	-24(%rbp), %rdx                 # 8-byte Reload
.LBB292_23:                             # %"$9"
	movq	8(%rdx), %rax
	movq	%rax, env(%rip)
	movq	%r14, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB292_24:                             # %"$11.preheader"
	xorl	%eax, %eax
	movq	%rax, -16(%rbp)                 # 8-byte Spill
	movq	%rdx, %rdi
	jmp	.LBB292_27
.LBB292_25:                             # %"$16"
                                        #   in Loop: Header=BB292_27 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	movq	env(%rip), %rdi
	.p2align	4, 0x90
.LBB292_26:                             # %"$13"
                                        #   in Loop: Header=BB292_27 Depth=1
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdx
	movq	%rcx, (%rdx)
	movq	%rdi, 8(%rdx)
	movq	%rdx, env(%rip)
	incq	-16(%rbp)                       # 8-byte Folded Spill
	movq	8(%rbx), %rbx
	testb	$15, %bl
	movq	%rdx, %rdi
	movq	%rdx, %r12
	jne	.LBB292_7
.LBB292_27:                             # %"$11"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rbx), %rcx
	testb	$6, %cl
	jne	.LBB292_26
# %bb.28:                               # %"$14"
                                        #   in Loop: Header=BB292_27 Depth=1
	testb	$8, %cl
	je	.LBB292_25
# %bb.29:                               # %"$17"
                                        #   in Loop: Header=BB292_27 Depth=1
	movq	(%rcx), %rcx
	jmp	.LBB292_26
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _reverse;
	.scl	2;
	.type	32;
	.endef
	.globl	_reverse                        # -- Begin function _reverse
	.p2align	4, 0x90
_reverse:                               # @_reverse
.seh_proc _reverse
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	testb	$6, %sil
	jne	.LBB293_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB293_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB293_4
.LBB293_2:                              # %"$6"
	movq	(%rsi), %rsi
.LBB293_4:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rsi, (%rdi)
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rdi, env(%rip)
	leaq	SymTab+8(%rip), %rax
	testb	$15, %sil
	jne	.LBB293_7
	.p2align	4, 0x90
.LBB293_5:                              # %"$8"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rcx
	movq	8(%rsi), %rsi
	subq	$32, %rsp
	movq	%rax, %rdx
	callq	cons
	addq	$32, %rsp
	testb	$15, %sil
	je	.LBB293_5
.LBB293_7:                              # %"$9"
	movq	8(%rdi), %rcx
	movq	%rcx, env(%rip)
	movq	%rbp, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _flip;
	.scl	2;
	.type	32;
	.endef
	.globl	_flip                           # -- Begin function _flip
	.p2align	4, 0x90
_flip:                                  # @_flip
.seh_proc _flip
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %r15
	movq	8(%rcx), %rdi
	movq	(%rdi), %rsi
	testb	$6, %sil
	je	.LBB294_1
# %bb.3:                                # %"$2"
	testb	$15, %sil
	jne	.LBB294_4
.LBB294_6:                              # %"$8"
	movq	8(%rsi), %rbx
	testb	$15, %bl
	jne	.LBB294_4
# %bb.8:                                # %"$11"
	movq	8(%rdi), %rcx
	testb	$15, %cl
	je	.LBB294_11
# %bb.9:                                # %"$14"
	leaq	SymTab+8(%rip), %rax
	movq	%rax, 8(%rsi)
	.p2align	4, 0x90
.LBB294_10:                             # %"$15"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rbx, %rax
	movq	8(%rbx), %rbx
	movq	%rsi, 8(%rax)
	testb	$15, %bl
	movq	%rax, %rsi
	je	.LBB294_10
	jmp	.LBB294_23
.LBB294_1:                              # %"$3"
	testb	$8, %sil
	jne	.LBB294_5
# %bb.2:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	testb	$15, %sil
	jne	.LBB294_4
	jmp	.LBB294_6
.LBB294_5:                              # %"$6"
	movq	(%rsi), %rsi
	testb	$15, %sil
	je	.LBB294_6
.LBB294_4:
	movq	%rsi, %rax
.LBB294_23:                             # %"$9"
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB294_11:                             # %"$13"
	movq	env(%rip), %rdx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%rsi, (%r14)
	movq	%r14, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	%r14, env(%rip)
	movq	(%rcx), %rax
	testb	$6, %al
	jne	.LBB294_15
# %bb.12:                               # %"$3.i"
	testb	$8, %al
	jne	.LBB294_14
# %bb.13:                               # %"$5.i"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB294_15
.LBB294_14:                             # %"$6.i"
	movq	(%rax), %rax
.LBB294_15:                             # %"$2.i"
	testb	$2, %al
	je	.LBB294_24
# %bb.16:                               # %evCnt.exit
	movq	%rax, %rdx
	shrq	$4, %rdx
	movq	%rdx, %rcx
	negq	%rcx
	testb	$8, %al
	cmoveq	%rdx, %rcx
	movq	8(%r14), %rax
	movq	%rax, env(%rip)
	cmpq	$2, %rcx
	jl	.LBB294_4
# %bb.18:                               # %"$20"
	movq	8(%rbx), %rax
	movq	%rax, 8(%rsi)
	movq	%rsi, 8(%rbx)
	addq	$-2, %rcx
	je	.LBB294_22
	.p2align	4, 0x90
.LBB294_19:                             # %"$23"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rsi), %rax
	testb	$15, %al
	jne	.LBB294_22
# %bb.20:                               # %"$25"
                                        #   in Loop: Header=BB294_19 Depth=1
	movq	8(%rax), %rdx
	movq	%rdx, 8(%rsi)
	movq	%rbx, 8(%rax)
	decq	%rcx
	movq	%rax, %rbx
	jne	.LBB294_19
	jmp	.LBB294_23
.LBB294_22:
	movq	%rbx, %rax
	jmp	.LBB294_23
.LBB294_24:                             # %"$2.i.i"
	subq	$32, %rsp
	movq	%r15, %rcx
	movq	%rax, %rdx
	callq	cntErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _trim;
	.scl	2;
	.type	32;
	.endef
	.globl	_trim                           # -- Begin function _trim
	.p2align	4, 0x90
_trim:                                  # @_trim
.seh_proc _trim
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rcx
	testb	$6, %cl
	jne	.LBB295_4
# %bb.1:                                # %"$3"
	testb	$8, %cl
	jne	.LBB295_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB295_4
.LBB295_2:                              # %"$6"
	movq	(%rcx), %rcx
.LBB295_4:                              # %"$2"
	movq	env(%rip), %rdx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rcx, (%rsi)
	movq	%rsi, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	%rsi, env(%rip)
	subq	$32, %rsp
	callq	trim
	addq	$32, %rsp
	movq	8(%rsi), %rcx
	movq	%rcx, env(%rip)
	leaq	8(%rbp), %rsp
	popq	%rsi
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _clip;
	.scl	2;
	.type	32;
	.endef
	.globl	_clip                           # -- Begin function _clip
	.p2align	4, 0x90
_clip:                                  # @_clip
.seh_proc _clip
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rcx
	testb	$6, %cl
	jne	.LBB296_4
# %bb.1:                                # %"$3"
	testb	$8, %cl
	jne	.LBB296_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
.LBB296_4:                              # %"$2"
	testb	$15, %cl
	je	.LBB296_5
.LBB296_20:                             # %"$11"
	movq	env(%rip), %rdx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rcx, (%rsi)
	movq	%rsi, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	%rsi, env(%rip)
	subq	$32, %rsp
	callq	trim
	addq	$32, %rsp
	movq	8(%rsi), %rcx
	movq	%rcx, env(%rip)
	leaq	8(%rbp), %rsp
	popq	%rsi
	popq	%rbp
	retq
.LBB296_2:                              # %"$6"
	movq	(%rcx), %rcx
	testb	$15, %cl
	jne	.LBB296_20
.LBB296_5:                              # %"$9.preheader"
	leaq	SymTab+8(%rip), %r8
	jmp	.LBB296_6
	.p2align	4, 0x90
.LBB296_19:                             # %"$10"
                                        #   in Loop: Header=BB296_6 Depth=1
	movq	8(%rcx), %rcx
	testb	$15, %cl
	jne	.LBB296_20
.LBB296_6:                              # %"$9"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB296_9 Depth 2
                                        #     Child Loop BB296_12 Depth 2
	movq	(%rcx), %rax
	cmpq	%r8, %rax
	je	.LBB296_19
# %bb.7:                                # %"$3.i"
                                        #   in Loop: Header=BB296_6 Depth=1
	movl	%eax, %edx
	andl	$14, %edx
	cmpl	$8, %edx
	jne	.LBB296_20
# %bb.8:                                # %"$5.i"
                                        #   in Loop: Header=BB296_6 Depth=1
	movq	-8(%rax), %r9
	testb	$8, %r9b
	jne	.LBB296_20
	.p2align	4, 0x90
# %bb.10:                               # %"$8.i"
                                        #   in Loop: Header=BB296_6 Depth=1
	testb	$6, %r9b
	jne	.LBB296_11
.LBB296_9:                              # %"$8.i"
                                        #   Parent Loop BB296_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%r9), %r9
	testb	$6, %r9b
	je	.LBB296_9
.LBB296_11:                             # %"$10.i.preheader"
                                        #   in Loop: Header=BB296_6 Depth=1
	xorl	%edx, %edx
	.p2align	4, 0x90
.LBB296_12:                             # %"$10.i"
                                        #   Parent Loop BB296_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	testq	%rdx, %rdx
	jne	.LBB296_17
# %bb.13:                               # %"$2.i.i"
                                        #   in Loop: Header=BB296_12 Depth=2
	cmpq	$2, %r9
	je	.LBB296_19
# %bb.14:                               # %"$5.i.i"
                                        #   in Loop: Header=BB296_12 Depth=2
	testb	$2, %r9b
	jne	.LBB296_15
# %bb.16:                               # %"$7.i.i"
                                        #   in Loop: Header=BB296_12 Depth=2
	movq	-4(%r9), %rdx
	movq	4(%r9), %r9
	.p2align	4, 0x90
.LBB296_17:                             # %symByte.exit.i
                                        #   in Loop: Header=BB296_12 Depth=2
	testb	%dl, %dl
	je	.LBB296_19
.LBB296_18:                             # %"$11.i"
                                        #   in Loop: Header=BB296_12 Depth=2
	movq	%rdx, %rax
	shrq	$8, %rax
	cmpb	$32, %dl
	movq	%rax, %rdx
	jbe	.LBB296_12
	jmp	.LBB296_20
.LBB296_15:                             # %"$8.i.i"
                                        #   in Loop: Header=BB296_12 Depth=2
	movq	%r9, %rdx
	shrq	$4, %rdx
	movl	$2, %r9d
	testb	%dl, %dl
	jne	.LBB296_18
	jmp	.LBB296_19
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _head;
	.scl	2;
	.type	32;
	.endef
	.globl	_head                           # -- Begin function _head
	.p2align	4, 0x90
_head:                                  # @_head
.seh_proc _head
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rbx
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %r15
	testb	$6, %sil
	jne	.LBB297_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB297_3
# %bb.2:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB297_4
.LBB297_3:                              # %"$6"
	movq	(%rsi), %rsi
.LBB297_4:                              # %"$2"
	leaq	SymTab+8(%rip), %r12
	cmpq	%r12, %rsi
	je	.LBB297_30
# %bb.5:                                # %"$8"
	testb	$15, %sil
	je	.LBB297_13
# %bb.6:                                # %"$10"
	testb	$2, %sil
	je	.LBB297_36
# %bb.7:                                # %xCnt.exit
	movq	%rsi, %rax
	shrq	$4, %rax
	movq	%rax, %rbx
	negq	%rbx
	testb	$8, %sil
	cmoveq	%rax, %rbx
	testq	%rbx, %rbx
	je	.LBB297_30
# %bb.8:                                # %"$25"
	movq	(%r15), %rdi
	testb	$6, %dil
	je	.LBB297_9
# %bb.11:                               # %"$27"
	testb	$15, %dil
	je	.LBB297_17
.LBB297_12:
	movq	%rdi, %r12
	jmp	.LBB297_30
.LBB297_13:                             # %"$11"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%rsi, (%r14)
	movq	%r14, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r14, env(%rip)
	movq	(%r15), %rbx
	testb	$6, %bl
	jne	.LBB297_27
# %bb.14:                               # %"$13"
	testb	$8, %bl
	jne	.LBB297_26
# %bb.15:                               # %"$15"
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rbx
	jmp	.LBB297_27
.LBB297_9:                              # %"$28"
	testb	$8, %dil
	jne	.LBB297_16
# %bb.10:                               # %"$30"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdi
	testb	$15, %dil
	jne	.LBB297_12
	jmp	.LBB297_17
.LBB297_16:                             # %"$31"
	movq	(%rdi), %rdi
	testb	$15, %dil
	jne	.LBB297_12
.LBB297_17:                             # %"$33"
	testq	%rbx, %rbx
	jns	.LBB297_21
# %bb.18:                               # %"$38.preheader"
	movq	%rdi, %rax
	.p2align	4, 0x90
.LBB297_19:                             # %"$38"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rax), %rax
	incq	%rbx
	testb	$15, %al
	je	.LBB297_19
# %bb.20:                               # %"$35"
	testq	%rbx, %rbx
	jle	.LBB297_30
.LBB297_21:                             # %"$40"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%rdi, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r15, env(%rip)
	movq	(%rdi), %rcx
	subq	$32, %rsp
	leaq	SymTab+8(%rip), %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %r12
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%r12, (%rax)
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%rcx, (%rdx)
	movq	%rax, env(%rip)
	decq	%rbx
	je	.LBB297_25
# %bb.22:                               # %"$43.preheader"
	leaq	SymTab+8(%rip), %r14
	movq	%r12, %rsi
	.p2align	4, 0x90
.LBB297_23:                             # %"$43"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rdi), %rdi
	testb	$15, %dil
	jne	.LBB297_25
# %bb.24:                               # %"$45"
                                        #   in Loop: Header=BB297_23 Depth=1
	movq	(%rdi), %rcx
	subq	$32, %rsp
	movq	%r14, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, 8(%rsi)
	decq	%rbx
	movq	%rax, %rsi
	jne	.LBB297_23
.LBB297_25:                             # %"$46"
	movq	8(%r15), %rax
	jmp	.LBB297_29
.LBB297_26:                             # %"$16"
	movq	(%rbx), %rbx
.LBB297_27:                             # %"$12"
	leaq	SymTab+8(%rip), %r12
	testb	$15, %bl
	je	.LBB297_31
.LBB297_28:                             # %"$21"
	movq	8(%r14), %rax
.LBB297_29:                             # %"$7"
	movq	%rax, env(%rip)
.LBB297_30:                             # %"$7"
	movq	%r12, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB297_31:                             # %"$19.preheader"
	movq	%rsi, %rdi
	.p2align	4, 0x90
.LBB297_32:                             # %"$19"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rcx
	movq	(%rbx), %rdx
	subq	$32, %rsp
	callq	equal
	addq	$32, %rsp
	testb	$1, %al
	je	.LBB297_28
# %bb.33:                               # %"$20"
                                        #   in Loop: Header=BB297_32 Depth=1
	movq	8(%rdi), %rdi
	testb	$15, %dil
	jne	.LBB297_35
# %bb.34:                               # %"$23"
                                        #   in Loop: Header=BB297_32 Depth=1
	movq	8(%rbx), %rbx
	testb	$15, %bl
	je	.LBB297_32
	jmp	.LBB297_28
.LBB297_35:
	movq	%rsi, %r12
	jmp	.LBB297_28
.LBB297_36:                             # %"$2.i"
	subq	$32, %rsp
	movq	%rbx, %rcx
	movq	%rsi, %rdx
	callq	cntErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _tail;
	.scl	2;
	.type	32;
	.endef
	.globl	_tail                           # -- Begin function _tail
	.p2align	4, 0x90
_tail:                                  # @_tail
.seh_proc _tail
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rbx
	movq	8(%rcx), %rax
	movq	(%rax), %rdi
	movq	8(%rax), %r14
	testb	$6, %dil
	jne	.LBB298_4
# %bb.1:                                # %"$3"
	testb	$8, %dil
	jne	.LBB298_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdi
	jmp	.LBB298_4
.LBB298_2:                              # %"$6"
	movq	(%rdi), %rdi
.LBB298_4:                              # %"$2"
	leaq	SymTab+8(%rip), %rsi
	cmpq	%rsi, %rdi
	je	.LBB298_29
# %bb.5:                                # %"$8"
	testb	$15, %dil
	je	.LBB298_6
# %bb.16:                               # %"$10"
	testb	$2, %dil
	je	.LBB298_30
# %bb.17:                               # %xCnt.exit
	movq	%rdi, %rax
	shrq	$4, %rax
	movq	%rax, %rbx
	negq	%rbx
	testb	$8, %dil
	cmoveq	%rax, %rbx
	testq	%rbx, %rbx
	je	.LBB298_29
# %bb.18:                               # %"$25"
	movq	(%r14), %rsi
	testb	$6, %sil
	jne	.LBB298_22
# %bb.19:                               # %"$28"
	testb	$8, %sil
	jne	.LBB298_20
# %bb.21:                               # %"$30"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
.LBB298_22:                             # %"$27"
	testb	$15, %sil
	jne	.LBB298_29
.LBB298_23:                             # %"$33"
	testq	%rbx, %rbx
	js	.LBB298_31
# %bb.24:
	movq	%rsi, %rax
	.p2align	4, 0x90
.LBB298_25:                             # %"$41"
                                        # =>This Inner Loop Header: Depth=1
	decq	%rbx
	je	.LBB298_28
# %bb.26:                               # %"$42"
                                        #   in Loop: Header=BB298_25 Depth=1
	movq	8(%rax), %rax
	testb	$15, %al
	je	.LBB298_25
	jmp	.LBB298_28
	.p2align	4, 0x90
.LBB298_31:                             # %"$37"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rsi), %rsi
	incq	%rbx
	jne	.LBB298_31
	jmp	.LBB298_29
	.p2align	4, 0x90
.LBB298_27:                             # %"$46"
                                        #   in Loop: Header=BB298_28 Depth=1
	movq	8(%rsi), %rsi
.LBB298_28:                             # %"$46"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rax), %rax
	testb	$15, %al
	je	.LBB298_27
	jmp	.LBB298_29
.LBB298_6:                              # %"$11"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%rdi, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r15, env(%rip)
	movq	(%r14), %rbx
	testb	$6, %bl
	jne	.LBB298_10
# %bb.7:                                # %"$13"
	testb	$8, %bl
	jne	.LBB298_8
# %bb.9:                                # %"$15"
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rbx
	jmp	.LBB298_10
.LBB298_20:                             # %"$31"
	movq	(%rsi), %rsi
	testb	$15, %sil
	jne	.LBB298_29
	jmp	.LBB298_23
.LBB298_8:                              # %"$16"
	movq	(%rbx), %rbx
.LBB298_10:                             # %"$17.preheader"
	leaq	SymTab+8(%rip), %rsi
	.p2align	4, 0x90
.LBB298_11:                             # %"$17"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %bl
	jne	.LBB298_15
# %bb.12:                               # %"$18"
                                        #   in Loop: Header=BB298_11 Depth=1
	subq	$32, %rsp
	movq	%rbx, %rcx
	movq	%rdi, %rdx
	callq	equal
	addq	$32, %rsp
	testb	$1, %al
	jne	.LBB298_13
# %bb.14:                               # %"$21"
                                        #   in Loop: Header=BB298_11 Depth=1
	movq	8(%rbx), %rbx
	testb	$15, %bl
	je	.LBB298_11
	jmp	.LBB298_15
.LBB298_13:
	movq	%rdi, %rsi
.LBB298_15:                             # %"$19"
	movq	8(%r15), %rax
	movq	%rax, env(%rip)
.LBB298_29:                             # %"$7"
	movq	%rsi, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB298_30:                             # %"$2.i"
	subq	$32, %rsp
	movq	%rbx, %rcx
	movq	%rdi, %rdx
	callq	cntErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _stem;
	.scl	2;
	.type	32;
	.endef
	.globl	_stem                           # -- Begin function _stem
	.p2align	4, 0x90
_stem:                                  # @_stem
.seh_proc _stem
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %r13
	movq	8(%rax), %rdi
	testb	$6, %r13b
	jne	.LBB299_4
# %bb.1:                                # %"$3"
	testb	$8, %r13b
	jne	.LBB299_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%r13, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r13
	jmp	.LBB299_4
.LBB299_2:                              # %"$6"
	movq	(%r13), %r13
.LBB299_4:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%r13, (%r14)
	movq	%r14, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r14, env(%rip)
	testb	$15, %dil
	jne	.LBB299_20
# %bb.5:                                # %"$10.preheader"
	xorl	%r15d, %r15d
	movq	%r14, %rcx
	jmp	.LBB299_6
.LBB299_9:                              # %"$14"
                                        #   in Loop: Header=BB299_6 Depth=1
	subq	$32, %rsp
	movq	%rdx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdx
	movq	env(%rip), %rcx
	.p2align	4, 0x90
.LBB299_10:                             # %"$11"
                                        #   in Loop: Header=BB299_6 Depth=1
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rdx, (%rsi)
	movq	%rcx, 8(%rsi)
	movq	%rsi, env(%rip)
	movq	8(%rdi), %rdi
	decq	%r15
	testb	$15, %dil
	movq	%rsi, %rcx
	jne	.LBB299_11
.LBB299_6:                              # %"$10"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rdx
	testb	$6, %dl
	jne	.LBB299_10
# %bb.7:                                # %"$12"
                                        #   in Loop: Header=BB299_6 Depth=1
	testb	$8, %dl
	je	.LBB299_9
# %bb.8:                                # %"$15"
                                        #   in Loop: Header=BB299_6 Depth=1
	movq	(%rdx), %rdx
	jmp	.LBB299_10
.LBB299_11:                             # %"$18.preheader"
	movq	%r13, %r12
	.p2align	4, 0x90
.LBB299_12:                             # %"$18"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB299_14 Depth 2
	movq	(%r13), %rcx
	subq	$32, %rsp
	callq	equal
	addq	$32, %rsp
	testb	$1, %al
	jne	.LBB299_16
# %bb.13:                               # %"$20.preheader"
                                        #   in Loop: Header=BB299_12 Depth=1
	movq	%r15, %rdi
	movq	%rsi, %rbx
	.p2align	4, 0x90
.LBB299_14:                             # %"$20"
                                        #   Parent Loop BB299_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	incq	%rdi
	je	.LBB299_17
# %bb.15:                               # %"$23"
                                        #   in Loop: Header=BB299_14 Depth=2
	movq	8(%rbx), %rbx
	movq	(%r13), %rcx
	movq	(%rbx), %rdx
	subq	$32, %rsp
	callq	equal
	addq	$32, %rsp
	testb	$1, %al
	je	.LBB299_14
.LBB299_16:                             # %"$22"
                                        #   in Loop: Header=BB299_12 Depth=1
	movq	8(%r13), %r13
	movq	%r13, %r12
	testb	$15, %r13b
	je	.LBB299_21
	jmp	.LBB299_19
	.p2align	4, 0x90
.LBB299_17:                             # %"$21.loopexit"
                                        #   in Loop: Header=BB299_12 Depth=1
	movq	8(%r13), %r13
	testb	$15, %r13b
	jne	.LBB299_19
.LBB299_21:                             # %"$21.$18_crit_edge"
                                        #   in Loop: Header=BB299_12 Depth=1
	movq	(%rsi), %rdx
	jmp	.LBB299_12
.LBB299_19:
	movq	%r12, %r13
.LBB299_20:                             # %"$9"
	movq	8(%r14), %rax
	movq	%rax, env(%rip)
	movq	%r13, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _fin;
	.scl	2;
	.type	32;
	.endef
	.globl	_fin                            # -- Begin function _fin
	.p2align	4, 0x90
_fin:                                   # @_fin
.seh_proc _fin
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB300_5
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB300_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB300_5
.LBB300_2:                              # %"$6"
	movq	(%rax), %rax
	jmp	.LBB300_5
	.p2align	4, 0x90
.LBB300_4:                              # %"$8"
                                        #   in Loop: Header=BB300_5 Depth=1
	movq	8(%rax), %rax
.LBB300_5:                              # %"$8"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %al
	je	.LBB300_4
# %bb.6:                                # %"$9"
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _last;
	.scl	2;
	.type	32;
	.endef
	.globl	_last                           # -- Begin function _last
	.p2align	4, 0x90
_last:                                  # @_last
.seh_proc _last
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB301_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB301_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
.LBB301_4:                              # %"$2"
	testb	$15, %al
	jne	.LBB301_7
	.p2align	4, 0x90
.LBB301_5:                              # %"$10"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rcx
	movq	8(%rax), %rax
	testb	$15, %al
	je	.LBB301_5
# %bb.6:                                # %"$12"
	movq	(%rcx), %rax
	jmp	.LBB301_7
.LBB301_2:                              # %"$6"
	movq	(%rax), %rax
	testb	$15, %al
	je	.LBB301_5
.LBB301_7:                              # %"$9"
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _eq;
	.scl	2;
	.type	32;
	.endef
	.globl	_eq                             # -- Begin function _eq
	.p2align	4, 0x90
_eq:                                    # @_eq
.seh_proc _eq
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rbx
	movq	(%rbx), %rsi
	testb	$6, %sil
	jne	.LBB302_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB302_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB302_4
.LBB302_2:                              # %"$6"
	movq	(%rsi), %rsi
.LBB302_4:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rsi, (%rdi)
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rdi, env(%rip)
	leaq	SymTab+280(%rip), %r14
	leaq	SymTab+8(%rip), %r15
	jmp	.LBB302_5
.LBB302_9:                              # %"$14"
                                        #   in Loop: Header=BB302_5 Depth=1
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	.p2align	4, 0x90
.LBB302_10:                             # %"$11"
                                        #   in Loop: Header=BB302_5 Depth=1
	cmpq	%rax, %rsi
	jne	.LBB302_11
.LBB302_5:                              # %"$7"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rbx), %rbx
	testb	$15, %bl
	jne	.LBB302_12
# %bb.6:                                # %"$8"
                                        #   in Loop: Header=BB302_5 Depth=1
	movq	(%rbx), %rax
	testb	$6, %al
	jne	.LBB302_10
# %bb.7:                                # %"$12"
                                        #   in Loop: Header=BB302_5 Depth=1
	testb	$8, %al
	je	.LBB302_9
# %bb.8:                                # %"$15"
                                        #   in Loop: Header=BB302_5 Depth=1
	movq	(%rax), %rax
	jmp	.LBB302_10
.LBB302_11:
	movq	%r15, %r14
.LBB302_12:                             # %"$9"
	movq	8(%rdi), %rax
	movq	%rax, env(%rip)
	movq	%r14, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _neq;
	.scl	2;
	.type	32;
	.endef
	.globl	_neq                            # -- Begin function _neq
	.p2align	4, 0x90
_neq:                                   # @_neq
.seh_proc _neq
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rbx
	movq	(%rbx), %rsi
	testb	$6, %sil
	jne	.LBB303_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB303_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB303_4
.LBB303_2:                              # %"$6"
	movq	(%rsi), %rsi
.LBB303_4:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rsi, (%rdi)
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rdi, env(%rip)
	leaq	SymTab+8(%rip), %r14
	leaq	SymTab+280(%rip), %r15
	jmp	.LBB303_5
.LBB303_9:                              # %"$14"
                                        #   in Loop: Header=BB303_5 Depth=1
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	.p2align	4, 0x90
.LBB303_10:                             # %"$11"
                                        #   in Loop: Header=BB303_5 Depth=1
	cmpq	%rax, %rsi
	jne	.LBB303_11
.LBB303_5:                              # %"$7"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rbx), %rbx
	testb	$15, %bl
	jne	.LBB303_12
# %bb.6:                                # %"$8"
                                        #   in Loop: Header=BB303_5 Depth=1
	movq	(%rbx), %rax
	testb	$6, %al
	jne	.LBB303_10
# %bb.7:                                # %"$12"
                                        #   in Loop: Header=BB303_5 Depth=1
	testb	$8, %al
	je	.LBB303_9
# %bb.8:                                # %"$15"
                                        #   in Loop: Header=BB303_5 Depth=1
	movq	(%rax), %rax
	jmp	.LBB303_10
.LBB303_11:
	movq	%r15, %r14
.LBB303_12:                             # %"$9"
	movq	8(%rdi), %rax
	movq	%rax, env(%rip)
	movq	%r14, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _equal;
	.scl	2;
	.type	32;
	.endef
	.globl	_equal                          # -- Begin function _equal
	.p2align	4, 0x90
_equal:                                 # @_equal
.seh_proc _equal
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rbx
	movq	(%rbx), %rsi
	testb	$6, %sil
	jne	.LBB304_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB304_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB304_4
.LBB304_2:                              # %"$6"
	movq	(%rsi), %rsi
.LBB304_4:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rsi, (%rdi)
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rdi, env(%rip)
	leaq	SymTab+280(%rip), %r14
	leaq	SymTab+8(%rip), %r15
	jmp	.LBB304_5
.LBB304_9:                              # %"$14"
                                        #   in Loop: Header=BB304_5 Depth=1
	subq	$32, %rsp
	movq	%rdx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdx
	.p2align	4, 0x90
.LBB304_10:                             # %"$11"
                                        #   in Loop: Header=BB304_5 Depth=1
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	equal
	addq	$32, %rsp
	testb	$1, %al
	je	.LBB304_11
.LBB304_5:                              # %"$7"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rbx), %rbx
	testb	$15, %bl
	jne	.LBB304_12
# %bb.6:                                # %"$8"
                                        #   in Loop: Header=BB304_5 Depth=1
	movq	(%rbx), %rdx
	testb	$6, %dl
	jne	.LBB304_10
# %bb.7:                                # %"$12"
                                        #   in Loop: Header=BB304_5 Depth=1
	testb	$8, %dl
	je	.LBB304_9
# %bb.8:                                # %"$15"
                                        #   in Loop: Header=BB304_5 Depth=1
	movq	(%rdx), %rdx
	jmp	.LBB304_10
.LBB304_11:
	movq	%r15, %r14
.LBB304_12:                             # %"$9"
	movq	8(%rdi), %rax
	movq	%rax, env(%rip)
	movq	%r14, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _nequal;
	.scl	2;
	.type	32;
	.endef
	.globl	_nequal                         # -- Begin function _nequal
	.p2align	4, 0x90
_nequal:                                # @_nequal
.seh_proc _nequal
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rbx
	movq	(%rbx), %rsi
	testb	$6, %sil
	jne	.LBB305_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB305_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB305_4
.LBB305_2:                              # %"$6"
	movq	(%rsi), %rsi
.LBB305_4:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rsi, (%rdi)
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rdi, env(%rip)
	leaq	SymTab+8(%rip), %r14
	leaq	SymTab+280(%rip), %r15
	jmp	.LBB305_5
.LBB305_9:                              # %"$14"
                                        #   in Loop: Header=BB305_5 Depth=1
	subq	$32, %rsp
	movq	%rdx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdx
	.p2align	4, 0x90
.LBB305_10:                             # %"$11"
                                        #   in Loop: Header=BB305_5 Depth=1
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	equal
	addq	$32, %rsp
	testb	$1, %al
	je	.LBB305_11
.LBB305_5:                              # %"$7"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rbx), %rbx
	testb	$15, %bl
	jne	.LBB305_12
# %bb.6:                                # %"$8"
                                        #   in Loop: Header=BB305_5 Depth=1
	movq	(%rbx), %rdx
	testb	$6, %dl
	jne	.LBB305_10
# %bb.7:                                # %"$12"
                                        #   in Loop: Header=BB305_5 Depth=1
	testb	$8, %dl
	je	.LBB305_9
# %bb.8:                                # %"$15"
                                        #   in Loop: Header=BB305_5 Depth=1
	movq	(%rdx), %rdx
	jmp	.LBB305_10
.LBB305_11:
	movq	%r15, %r14
.LBB305_12:                             # %"$9"
	movq	8(%rdi), %rax
	movq	%rax, env(%rip)
	movq	%r14, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _eq0;
	.scl	2;
	.type	32;
	.endef
	.globl	_eq0                            # -- Begin function _eq0
	.p2align	4, 0x90
_eq0:                                   # @_eq0
.seh_proc _eq0
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB306_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB306_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB306_4
.LBB306_2:                              # %"$6"
	movq	(%rax), %rax
.LBB306_4:                              # %"$2"
	cmpq	$2, %rax
	leaq	SymTab+8(%rip), %rcx
	cmoveq	%rax, %rcx
	movq	%rcx, %rax
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _eq1;
	.scl	2;
	.type	32;
	.endef
	.globl	_eq1                            # -- Begin function _eq1
	.p2align	4, 0x90
_eq1:                                   # @_eq1
.seh_proc _eq1
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB307_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB307_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB307_4
.LBB307_2:                              # %"$6"
	movq	(%rax), %rax
.LBB307_4:                              # %"$2"
	cmpq	$18, %rax
	leaq	SymTab+8(%rip), %rcx
	cmoveq	%rax, %rcx
	movq	%rcx, %rax
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _eqT;
	.scl	2;
	.type	32;
	.endef
	.globl	_eqT                            # -- Begin function _eqT
	.p2align	4, 0x90
_eqT:                                   # @_eqT
.seh_proc _eqT
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB308_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB308_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB308_4
.LBB308_2:                              # %"$6"
	movq	(%rax), %rax
.LBB308_4:                              # %"$2"
	leaq	SymTab+280(%rip), %rcx
	cmpq	%rcx, %rax
	leaq	SymTab+8(%rip), %rax
	cmoveq	%rcx, %rax
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _neq0;
	.scl	2;
	.type	32;
	.endef
	.globl	_neq0                           # -- Begin function _neq0
	.p2align	4, 0x90
_neq0:                                  # @_neq0
.seh_proc _neq0
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB309_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB309_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB309_4
.LBB309_2:                              # %"$6"
	movq	(%rax), %rax
.LBB309_4:                              # %"$2"
	cmpq	$2, %rax
	leaq	SymTab+8(%rip), %rcx
	leaq	SymTab+280(%rip), %rax
	cmoveq	%rcx, %rax
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _neqT;
	.scl	2;
	.type	32;
	.endef
	.globl	_neqT                           # -- Begin function _neqT
	.p2align	4, 0x90
_neqT:                                  # @_neqT
.seh_proc _neqT
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB310_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB310_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB310_4
.LBB310_2:                              # %"$6"
	movq	(%rax), %rax
.LBB310_4:                              # %"$2"
	leaq	SymTab+280(%rip), %rcx
	cmpq	%rcx, %rax
	leaq	SymTab+8(%rip), %rax
	cmovneq	%rcx, %rax
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _lt;
	.scl	2;
	.type	32;
	.endef
	.globl	_lt                             # -- Begin function _lt
	.p2align	4, 0x90
_lt:                                    # @_lt
.seh_proc _lt
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rdi
	movq	(%rdi), %rsi
	testb	$6, %sil
	jne	.LBB311_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB311_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB311_4
.LBB311_2:                              # %"$6"
	movq	(%rsi), %rsi
.LBB311_4:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%rsi, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r15, env(%rip)
	movq	8(%rdi), %rdi
	leaq	SymTab+280(%rip), %r14
	testb	$15, %dil
	jne	.LBB311_13
# %bb.5:                                # %"$8.preheader"
	leaq	SymTab+8(%rip), %r12
	.p2align	4, 0x90
.LBB311_6:                              # %"$8"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rbx
	testb	$6, %bl
	jne	.LBB311_10
# %bb.7:                                # %"$12"
                                        #   in Loop: Header=BB311_6 Depth=1
	testb	$8, %bl
	jne	.LBB311_8
# %bb.9:                                # %"$14"
                                        #   in Loop: Header=BB311_6 Depth=1
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rbx
	jmp	.LBB311_10
.LBB311_8:                              # %"$15"
                                        #   in Loop: Header=BB311_6 Depth=1
	movq	(%rbx), %rbx
	.p2align	4, 0x90
.LBB311_10:                             # %"$11"
                                        #   in Loop: Header=BB311_6 Depth=1
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rbx, %rdx
	callq	compare
	addq	$32, %rsp
	testq	%rax, %rax
	jns	.LBB311_11
# %bb.12:                               # %"$16"
                                        #   in Loop: Header=BB311_6 Depth=1
	movq	%rbx, (%r15)
	movq	8(%rdi), %rdi
	testb	$15, %dil
	movq	%rbx, %rsi
	je	.LBB311_6
	jmp	.LBB311_13
.LBB311_11:
	movq	%r12, %r14
.LBB311_13:                             # %"$9"
	movq	8(%r15), %rax
	movq	%rax, env(%rip)
	movq	%r14, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _le;
	.scl	2;
	.type	32;
	.endef
	.globl	_le                             # -- Begin function _le
	.p2align	4, 0x90
_le:                                    # @_le
.seh_proc _le
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rdi
	movq	(%rdi), %rsi
	testb	$6, %sil
	jne	.LBB312_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB312_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB312_4
.LBB312_2:                              # %"$6"
	movq	(%rsi), %rsi
.LBB312_4:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%rsi, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r15, env(%rip)
	movq	8(%rdi), %rdi
	leaq	SymTab+280(%rip), %r14
	testb	$15, %dil
	jne	.LBB312_13
# %bb.5:                                # %"$8.preheader"
	leaq	SymTab+8(%rip), %r12
	.p2align	4, 0x90
.LBB312_6:                              # %"$8"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rbx
	testb	$6, %bl
	jne	.LBB312_10
# %bb.7:                                # %"$12"
                                        #   in Loop: Header=BB312_6 Depth=1
	testb	$8, %bl
	jne	.LBB312_8
# %bb.9:                                # %"$14"
                                        #   in Loop: Header=BB312_6 Depth=1
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rbx
	jmp	.LBB312_10
.LBB312_8:                              # %"$15"
                                        #   in Loop: Header=BB312_6 Depth=1
	movq	(%rbx), %rbx
	.p2align	4, 0x90
.LBB312_10:                             # %"$11"
                                        #   in Loop: Header=BB312_6 Depth=1
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rbx, %rdx
	callq	compare
	addq	$32, %rsp
	testq	%rax, %rax
	jg	.LBB312_11
# %bb.12:                               # %"$16"
                                        #   in Loop: Header=BB312_6 Depth=1
	movq	%rbx, (%r15)
	movq	8(%rdi), %rdi
	testb	$15, %dil
	movq	%rbx, %rsi
	je	.LBB312_6
	jmp	.LBB312_13
.LBB312_11:
	movq	%r12, %r14
.LBB312_13:                             # %"$9"
	movq	8(%r15), %rax
	movq	%rax, env(%rip)
	movq	%r14, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _gt;
	.scl	2;
	.type	32;
	.endef
	.globl	_gt                             # -- Begin function _gt
	.p2align	4, 0x90
_gt:                                    # @_gt
.seh_proc _gt
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rdi
	movq	(%rdi), %rsi
	testb	$6, %sil
	jne	.LBB313_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB313_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB313_4
.LBB313_2:                              # %"$6"
	movq	(%rsi), %rsi
.LBB313_4:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%rsi, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r15, env(%rip)
	movq	8(%rdi), %rdi
	leaq	SymTab+280(%rip), %r14
	testb	$15, %dil
	jne	.LBB313_13
# %bb.5:                                # %"$8.preheader"
	leaq	SymTab+8(%rip), %r12
	.p2align	4, 0x90
.LBB313_6:                              # %"$8"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rbx
	testb	$6, %bl
	jne	.LBB313_10
# %bb.7:                                # %"$12"
                                        #   in Loop: Header=BB313_6 Depth=1
	testb	$8, %bl
	jne	.LBB313_8
# %bb.9:                                # %"$14"
                                        #   in Loop: Header=BB313_6 Depth=1
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rbx
	jmp	.LBB313_10
.LBB313_8:                              # %"$15"
                                        #   in Loop: Header=BB313_6 Depth=1
	movq	(%rbx), %rbx
	.p2align	4, 0x90
.LBB313_10:                             # %"$11"
                                        #   in Loop: Header=BB313_6 Depth=1
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rbx, %rdx
	callq	compare
	addq	$32, %rsp
	testq	%rax, %rax
	jle	.LBB313_11
# %bb.12:                               # %"$16"
                                        #   in Loop: Header=BB313_6 Depth=1
	movq	%rbx, (%r15)
	movq	8(%rdi), %rdi
	testb	$15, %dil
	movq	%rbx, %rsi
	je	.LBB313_6
	jmp	.LBB313_13
.LBB313_11:
	movq	%r12, %r14
.LBB313_13:                             # %"$9"
	movq	8(%r15), %rax
	movq	%rax, env(%rip)
	movq	%r14, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _ge;
	.scl	2;
	.type	32;
	.endef
	.globl	_ge                             # -- Begin function _ge
	.p2align	4, 0x90
_ge:                                    # @_ge
.seh_proc _ge
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rdi
	movq	(%rdi), %rsi
	testb	$6, %sil
	jne	.LBB314_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB314_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB314_4
.LBB314_2:                              # %"$6"
	movq	(%rsi), %rsi
.LBB314_4:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%rsi, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r15, env(%rip)
	movq	8(%rdi), %rdi
	leaq	SymTab+280(%rip), %r14
	testb	$15, %dil
	jne	.LBB314_13
# %bb.5:                                # %"$8.preheader"
	leaq	SymTab+8(%rip), %r12
	.p2align	4, 0x90
.LBB314_6:                              # %"$8"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rbx
	testb	$6, %bl
	jne	.LBB314_10
# %bb.7:                                # %"$12"
                                        #   in Loop: Header=BB314_6 Depth=1
	testb	$8, %bl
	jne	.LBB314_8
# %bb.9:                                # %"$14"
                                        #   in Loop: Header=BB314_6 Depth=1
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rbx
	jmp	.LBB314_10
.LBB314_8:                              # %"$15"
                                        #   in Loop: Header=BB314_6 Depth=1
	movq	(%rbx), %rbx
	.p2align	4, 0x90
.LBB314_10:                             # %"$11"
                                        #   in Loop: Header=BB314_6 Depth=1
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rbx, %rdx
	callq	compare
	addq	$32, %rsp
	testq	%rax, %rax
	js	.LBB314_11
# %bb.12:                               # %"$16"
                                        #   in Loop: Header=BB314_6 Depth=1
	movq	%rbx, (%r15)
	movq	8(%rdi), %rdi
	testb	$15, %dil
	movq	%rbx, %rsi
	je	.LBB314_6
	jmp	.LBB314_13
.LBB314_11:
	movq	%r12, %r14
.LBB314_13:                             # %"$9"
	movq	8(%r15), %rax
	movq	%rax, env(%rip)
	movq	%r14, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _max;
	.scl	2;
	.type	32;
	.endef
	.globl	_max                            # -- Begin function _max
	.p2align	4, 0x90
_max:                                   # @_max
.seh_proc _max
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rdi
	movq	(%rdi), %rsi
	testb	$6, %sil
	jne	.LBB315_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB315_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB315_4
.LBB315_2:                              # %"$6"
	movq	(%rsi), %rsi
.LBB315_4:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%rsi, (%r14)
	movq	%r14, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r14, env(%rip)
	movq	8(%rdi), %rbx
	jmp	.LBB315_5
	.p2align	4, 0x90
.LBB315_12:                             # %"$16"
                                        #   in Loop: Header=BB315_5 Depth=1
	movq	8(%rbx), %rbx
.LBB315_5:                              # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %bl
	jne	.LBB315_13
# %bb.6:                                # %"$8"
                                        #   in Loop: Header=BB315_5 Depth=1
	movq	(%rbx), %rdi
	testb	$6, %dil
	jne	.LBB315_10
# %bb.7:                                # %"$11"
                                        #   in Loop: Header=BB315_5 Depth=1
	testb	$8, %dil
	jne	.LBB315_8
# %bb.9:                                # %"$13"
                                        #   in Loop: Header=BB315_5 Depth=1
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdi
	jmp	.LBB315_10
.LBB315_8:                              # %"$14"
                                        #   in Loop: Header=BB315_5 Depth=1
	movq	(%rdi), %rdi
	.p2align	4, 0x90
.LBB315_10:                             # %"$10"
                                        #   in Loop: Header=BB315_5 Depth=1
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	compare
	addq	$32, %rsp
	testq	%rax, %rax
	jle	.LBB315_12
# %bb.11:                               # %"$15"
                                        #   in Loop: Header=BB315_5 Depth=1
	movq	%rdi, (%r14)
	movq	%rdi, %rsi
	jmp	.LBB315_12
.LBB315_13:                             # %"$9"
	movq	8(%r14), %rax
	movq	%rax, env(%rip)
	movq	%rsi, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _min;
	.scl	2;
	.type	32;
	.endef
	.globl	_min                            # -- Begin function _min
	.p2align	4, 0x90
_min:                                   # @_min
.seh_proc _min
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rdi
	movq	(%rdi), %rsi
	testb	$6, %sil
	jne	.LBB316_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB316_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB316_4
.LBB316_2:                              # %"$6"
	movq	(%rsi), %rsi
.LBB316_4:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%rsi, (%r14)
	movq	%r14, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r14, env(%rip)
	movq	8(%rdi), %rbx
	jmp	.LBB316_5
	.p2align	4, 0x90
.LBB316_12:                             # %"$16"
                                        #   in Loop: Header=BB316_5 Depth=1
	movq	8(%rbx), %rbx
.LBB316_5:                              # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %bl
	jne	.LBB316_13
# %bb.6:                                # %"$8"
                                        #   in Loop: Header=BB316_5 Depth=1
	movq	(%rbx), %rdi
	testb	$6, %dil
	jne	.LBB316_10
# %bb.7:                                # %"$11"
                                        #   in Loop: Header=BB316_5 Depth=1
	testb	$8, %dil
	jne	.LBB316_8
# %bb.9:                                # %"$13"
                                        #   in Loop: Header=BB316_5 Depth=1
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdi
	jmp	.LBB316_10
.LBB316_8:                              # %"$14"
                                        #   in Loop: Header=BB316_5 Depth=1
	movq	(%rdi), %rdi
	.p2align	4, 0x90
.LBB316_10:                             # %"$10"
                                        #   in Loop: Header=BB316_5 Depth=1
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	compare
	addq	$32, %rsp
	testq	%rax, %rax
	jns	.LBB316_12
# %bb.11:                               # %"$15"
                                        #   in Loop: Header=BB316_5 Depth=1
	movq	%rdi, (%r14)
	movq	%rdi, %rsi
	jmp	.LBB316_12
.LBB316_13:                             # %"$9"
	movq	8(%r14), %rax
	movq	%rax, env(%rip)
	movq	%rsi, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _atom;
	.scl	2;
	.type	32;
	.endef
	.globl	_atom                           # -- Begin function _atom
	.p2align	4, 0x90
_atom:                                  # @_atom
.seh_proc _atom
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB317_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB317_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB317_4
.LBB317_2:                              # %"$6"
	movq	(%rax), %rax
.LBB317_4:                              # %"$2"
	testb	$15, %al
	leaq	SymTab+8(%rip), %rcx
	leaq	SymTab+280(%rip), %rax
	cmoveq	%rcx, %rax
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _pair;
	.scl	2;
	.type	32;
	.endef
	.globl	_pair                           # -- Begin function _pair
	.p2align	4, 0x90
_pair:                                  # @_pair
.seh_proc _pair
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB318_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB318_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB318_4
.LBB318_2:                              # %"$6"
	movq	(%rax), %rax
.LBB318_4:                              # %"$2"
	testb	$15, %al
	leaq	SymTab+8(%rip), %rcx
	cmoveq	%rax, %rcx
	movq	%rcx, %rax
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _circQ;
	.scl	2;
	.type	32;
	.endef
	.globl	_circQ                          # -- Begin function _circQ
	.p2align	4, 0x90
_circQ:                                 # @_circQ
.seh_proc _circQ
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB319_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB319_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
.LBB319_4:                              # %"$2"
	testb	$15, %al
	jne	.LBB319_8
.LBB319_5:                              # %"$5.preheader.i"
	movq	(%rax), %rdx
	movq	%rax, %rcx
	.p2align	4, 0x90
.LBB319_6:                              # %"$5.i"
                                        # =>This Inner Loop Header: Depth=1
	orq	$1, %rdx
	movq	%rdx, (%rcx)
	movq	8(%rcx), %rcx
	testb	$15, %cl
	jne	.LBB319_7
# %bb.9:                                # %"$6.i"
                                        #   in Loop: Header=BB319_6 Depth=1
	movq	(%rcx), %rdx
	testb	$1, %dl
	je	.LBB319_6
# %bb.10:                               # %"$14.preheader.i"
	cmpq	%rax, %rcx
	je	.LBB319_11
	.p2align	4, 0x90
.LBB319_15:                             # %"$15.i"
                                        # =>This Inner Loop Header: Depth=1
	andb	$-2, (%rax)
	movq	8(%rax), %rax
	cmpq	%rcx, %rax
	jne	.LBB319_15
# %bb.16:
	movq	%rcx, %rax
.LBB319_11:                             # %"$17.preheader.i"
	movq	%rax, %rcx
	.p2align	4, 0x90
.LBB319_12:                             # %"$17.i"
                                        # =>This Inner Loop Header: Depth=1
	andb	$-2, (%rcx)
	movq	8(%rcx), %rcx
	cmpq	%rcx, %rax
	jne	.LBB319_12
# %bb.13:                               # %circ.exit
	testq	%rax, %rax
	jne	.LBB319_14
	jmp	.LBB319_8
	.p2align	4, 0x90
.LBB319_7:                              # %"$9.i"
                                        # =>This Inner Loop Header: Depth=1
	andb	$-2, (%rax)
	movq	8(%rax), %rax
	testb	$15, %al
	je	.LBB319_7
	jmp	.LBB319_8
.LBB319_2:                              # %"$6"
	movq	(%rax), %rax
	testb	$15, %al
	je	.LBB319_5
.LBB319_8:                              # %circ.exit.thread
	leaq	SymTab+8(%rip), %rax
.LBB319_14:
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _lstQ;
	.scl	2;
	.type	32;
	.endef
	.globl	_lstQ                           # -- Begin function _lstQ
	.p2align	4, 0x90
_lstQ:                                  # @_lstQ
.seh_proc _lstQ
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB320_4
# %bb.1:                                # %"$4"
	testb	$8, %al
	jne	.LBB320_2
# %bb.3:                                # %"$6"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB320_4
.LBB320_2:                              # %"$7"
	movq	(%rax), %rax
.LBB320_4:                              # %"$3"
	testb	$15, %al
	leaq	SymTab+8(%rip), %rdx
	leaq	SymTab+280(%rip), %r8
	movq	%rdx, %rcx
	cmoveq	%r8, %rcx
	cmpq	%rdx, %rax
	cmoveq	%r8, %rcx
	movq	%rcx, %rax
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _numQ;
	.scl	2;
	.type	32;
	.endef
	.globl	_numQ                           # -- Begin function _numQ
	.p2align	4, 0x90
_numQ:                                  # @_numQ
.seh_proc _numQ
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB321_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB321_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB321_4
.LBB321_2:                              # %"$6"
	movq	(%rax), %rax
.LBB321_4:                              # %"$2"
	testb	$6, %al
	leaq	SymTab+8(%rip), %rcx
	cmovneq	%rax, %rcx
	movq	%rcx, %rax
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _symQ;
	.scl	2;
	.type	32;
	.endef
	.globl	_symQ                           # -- Begin function _symQ
	.p2align	4, 0x90
_symQ:                                  # @_symQ
.seh_proc _symQ
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB322_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB322_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB322_4
.LBB322_2:                              # %"$6"
	movq	(%rax), %rax
.LBB322_4:                              # %"$2"
	andl	$14, %eax
	cmpl	$8, %eax
	leaq	SymTab+280(%rip), %rcx
	leaq	SymTab+8(%rip), %rax
	cmoveq	%rcx, %rax
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _flgQ;
	.scl	2;
	.type	32;
	.endef
	.globl	_flgQ                           # -- Begin function _flgQ
	.p2align	4, 0x90
_flgQ:                                  # @_flgQ
.seh_proc _flgQ
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB323_4
# %bb.1:                                # %"$4"
	testb	$8, %al
	jne	.LBB323_2
# %bb.3:                                # %"$6"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB323_4
.LBB323_2:                              # %"$7"
	movq	(%rax), %rax
.LBB323_4:                              # %"$3"
	leaq	SymTab+280(%rip), %rdx
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	cmoveq	%rdx, %rcx
	cmpq	%rdx, %rax
	cmoveq	%rdx, %rcx
	movq	%rcx, %rax
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _member;
	.scl	2;
	.type	32;
	.endef
	.globl	_member                         # -- Begin function _member
	.p2align	4, 0x90
_member:                                # @_member
.seh_proc _member
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rdi
	testb	$6, %sil
	jne	.LBB324_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB324_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB324_4
.LBB324_2:                              # %"$6"
	movq	(%rsi), %rsi
.LBB324_4:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%rsi, (%r14)
	movq	%r14, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r14, env(%rip)
	movq	(%rdi), %rdi
	testb	$6, %dil
	jne	.LBB324_8
# %bb.5:                                # %"$8"
	testb	$8, %dil
	jne	.LBB324_6
# %bb.7:                                # %"$10"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdi
	jmp	.LBB324_8
.LBB324_6:                              # %"$11"
	movq	(%rdi), %rdi
.LBB324_8:                              # %"$7"
	leaq	SymTab+8(%rip), %r15
	movq	%rdi, %rbx
	.p2align	4, 0x90
.LBB324_9:                              # %"$12"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %bl
	jne	.LBB324_10
# %bb.11:                               # %"$13"
                                        #   in Loop: Header=BB324_9 Depth=1
	movq	(%rbx), %rdx
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	equal
	addq	$32, %rsp
	testb	$1, %al
	jne	.LBB324_14
# %bb.12:                               # %"$19"
                                        #   in Loop: Header=BB324_9 Depth=1
	movq	8(%rbx), %rbx
	cmpq	%rbx, %rdi
	jne	.LBB324_9
# %bb.13:
	movq	%r15, %rbx
	jmp	.LBB324_14
.LBB324_10:                             # %"$15"
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rbx, %rdx
	callq	equal
	addq	$32, %rsp
	leaq	SymTab+8(%rip), %rcx
	testb	$1, %al
	cmoveq	%rcx, %rbx
.LBB324_14:                             # %"$14"
	movq	8(%r14), %rax
	movq	%rax, env(%rip)
	movq	%rbx, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _memq;
	.scl	2;
	.type	32;
	.endef
	.globl	_memq                           # -- Begin function _memq
	.p2align	4, 0x90
_memq:                                  # @_memq
.seh_proc _memq
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rbx
	testb	$6, %sil
	jne	.LBB325_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB325_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB325_4
.LBB325_2:                              # %"$6"
	movq	(%rsi), %rsi
.LBB325_4:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rsi, (%rdi)
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rdi, env(%rip)
	movq	(%rbx), %rax
	testb	$6, %al
	jne	.LBB325_8
# %bb.5:                                # %"$8"
	testb	$8, %al
	jne	.LBB325_6
# %bb.7:                                # %"$10"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB325_8
.LBB325_6:                              # %"$11"
	movq	(%rax), %rax
.LBB325_8:                              # %"$7"
	leaq	SymTab+8(%rip), %rdx
	movq	%rax, %rcx
	.p2align	4, 0x90
.LBB325_9:                              # %"$12"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %cl
	jne	.LBB325_10
# %bb.11:                               # %"$13"
                                        #   in Loop: Header=BB325_9 Depth=1
	cmpq	(%rcx), %rsi
	je	.LBB325_14
# %bb.12:                               # %"$19"
                                        #   in Loop: Header=BB325_9 Depth=1
	movq	8(%rcx), %rcx
	cmpq	%rcx, %rax
	jne	.LBB325_9
# %bb.13:
	movq	%rdx, %rcx
	jmp	.LBB325_14
.LBB325_10:                             # %"$15"
	cmpq	%rcx, %rsi
	leaq	SymTab+8(%rip), %rax
	cmovneq	%rax, %rcx
.LBB325_14:                             # %"$14"
	movq	8(%rdi), %rax
	movq	%rax, env(%rip)
	movq	%rcx, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _mmeq;
	.scl	2;
	.type	32;
	.endef
	.globl	_mmeq                           # -- Begin function _mmeq
	.p2align	4, 0x90
_mmeq:                                  # @_mmeq
.seh_proc _mmeq
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rbx
	testb	$6, %sil
	jne	.LBB326_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB326_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB326_4
.LBB326_2:                              # %"$6"
	movq	(%rsi), %rsi
.LBB326_4:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rsi, (%rdi)
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rdi, env(%rip)
	movq	(%rbx), %rax
	testb	$6, %al
	jne	.LBB326_8
# %bb.5:                                # %"$8"
	testb	$8, %al
	jne	.LBB326_6
# %bb.7:                                # %"$10"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB326_8
.LBB326_6:                              # %"$11"
	movq	(%rax), %rax
	.p2align	4, 0x90
.LBB326_8:                              # %"$12"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB326_10 Depth 2
	testb	$15, %sil
	jne	.LBB326_15
# %bb.9:                                # %"$13"
                                        #   in Loop: Header=BB326_8 Depth=1
	movq	(%rsi), %rdx
	movq	8(%rsi), %rsi
	movq	%rax, %rcx
	.p2align	4, 0x90
.LBB326_10:                             # %"$15"
                                        #   Parent Loop BB326_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	testb	$15, %cl
	jne	.LBB326_16
# %bb.11:                               # %"$16"
                                        #   in Loop: Header=BB326_10 Depth=2
	cmpq	(%rcx), %rdx
	je	.LBB326_12
# %bb.14:                               # %"$19"
                                        #   in Loop: Header=BB326_10 Depth=2
	movq	8(%rcx), %rcx
	cmpq	%rcx, %rax
	jne	.LBB326_10
	jmp	.LBB326_15
	.p2align	4, 0x90
.LBB326_16:                             # %"$17"
                                        #   in Loop: Header=BB326_8 Depth=1
	cmpq	%rcx, %rdx
	jne	.LBB326_8
.LBB326_15:                             # %"$20"
	movq	8(%rdi), %rax
	movq	%rax, env(%rip)
	leaq	SymTab+8(%rip), %rax
	jmp	.LBB326_13
.LBB326_12:                             # %"$18"
	movq	8(%rdi), %rax
	movq	%rax, env(%rip)
	movq	%rcx, %rax
.LBB326_13:                             # %"$18"
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _sect;
	.scl	2;
	.type	32;
	.endef
	.globl	_sect                           # -- Begin function _sect
	.p2align	4, 0x90
_sect:                                  # @_sect
.seh_proc _sect
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rdi
	testb	$6, %sil
	jne	.LBB327_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB327_3
# %bb.2:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB327_4
.LBB327_3:                              # %"$6"
	movq	(%rsi), %rsi
.LBB327_4:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%rsi, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r15, env(%rip)
	movq	(%rdi), %r14
	testb	$6, %r14b
	jne	.LBB327_9
# %bb.6:                                # %"$8"
	testb	$8, %r14b
	jne	.LBB327_8
# %bb.7:                                # %"$10"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r14
	movq	env(%rip), %rcx
	jmp	.LBB327_10
.LBB327_8:                              # %"$11"
	movq	(%r14), %r14
.LBB327_9:                              # %"$7"
	movq	%r15, %rcx
.LBB327_10:                             # %"$7"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdx
	movq	%r14, (%rdx)
	movq	%rdx, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r12
	leaq	SymTab+8(%rip), %rax
	movq	%rax, (%r12)
	movq	%rdx, 8(%r12)
	movq	%r12, env(%rip)
	testb	$15, %sil
	jne	.LBB327_23
# %bb.11:                               # %"$13.lr.ph"
	testb	$15, %r14b
	je	.LBB327_13
	.p2align	4, 0x90
.LBB327_12:                             # %"$13"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rsi), %rsi
	testb	$15, %sil
	je	.LBB327_12
	jmp	.LBB327_23
.LBB327_13:                             # %"$13.us.preheader"
	xorl	%edi, %edi
	jmp	.LBB327_16
.LBB327_14:                             # %"$24.us"
                                        #   in Loop: Header=BB327_16 Depth=1
	movq	%rax, (%r12)
	.p2align	4, 0x90
.LBB327_15:                             # %"$22.us"
                                        #   in Loop: Header=BB327_16 Depth=1
	testb	$15, %sil
	movq	%rax, %rdi
	jne	.LBB327_22
.LBB327_16:                             # %"$13.us"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB327_17 Depth 2
	movq	(%rsi), %rbx
	movq	8(%rsi), %rsi
	movq	%r14, %r13
	.p2align	4, 0x90
.LBB327_17:                             # %"$16.us"
                                        #   Parent Loop BB327_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%r13), %rdx
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	equal
	addq	$32, %rsp
	testb	$1, %al
	jne	.LBB327_20
# %bb.18:                               # %"$19.us"
                                        #   in Loop: Header=BB327_17 Depth=2
	movq	8(%r13), %r13
	testb	$15, %r13b
	je	.LBB327_17
# %bb.19:                               #   in Loop: Header=BB327_16 Depth=1
	movq	%rdi, %rax
	jmp	.LBB327_15
	.p2align	4, 0x90
.LBB327_20:                             # %"$21.us"
                                        #   in Loop: Header=BB327_16 Depth=1
	subq	$32, %rsp
	movq	%rbx, %rcx
	leaq	SymTab+8(%rip), %rdx
	callq	cons
	addq	$32, %rsp
	testq	%rdi, %rdi
	je	.LBB327_14
# %bb.21:                               # %"$23.us"
                                        #   in Loop: Header=BB327_16 Depth=1
	movq	%rax, 8(%rdi)
	jmp	.LBB327_15
.LBB327_22:                             # %"$14.loopexit"
	movq	(%r12), %rax
.LBB327_23:                             # %"$14"
	movq	8(%r15), %rcx
	movq	%rcx, env(%rip)
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _diff;
	.scl	2;
	.type	32;
	.endef
	.globl	_diff                           # -- Begin function _diff
	.p2align	4, 0x90
_diff:                                  # @_diff
.seh_proc _diff
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rdi
	testb	$6, %sil
	jne	.LBB328_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB328_3
# %bb.2:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB328_4
.LBB328_3:                              # %"$6"
	movq	(%rsi), %rsi
.LBB328_4:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%rsi, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r15, env(%rip)
	movq	(%rdi), %r14
	testb	$6, %r14b
	jne	.LBB328_9
# %bb.6:                                # %"$8"
	testb	$8, %r14b
	jne	.LBB328_8
# %bb.7:                                # %"$10"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r14
	movq	env(%rip), %rcx
	jmp	.LBB328_10
.LBB328_8:                              # %"$11"
	movq	(%r14), %r14
.LBB328_9:                              # %"$7"
	movq	%r15, %rcx
.LBB328_10:                             # %"$7"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdx
	movq	%r14, (%rdx)
	movq	%rdx, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r12
	leaq	SymTab+8(%rip), %rax
	movq	%rax, (%r12)
	movq	%rdx, 8(%r12)
	movq	%r12, env(%rip)
	testb	$15, %sil
	je	.LBB328_12
.LBB328_11:                             # %"$14"
	movq	(%r12), %rax
	movq	8(%r15), %rcx
	movq	%rcx, env(%rip)
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB328_12:                             # %"$13.lr.ph"
	testb	$15, %r14b
	je	.LBB328_18
# %bb.13:                               # %"$13.preheader"
	xorl	%ebx, %ebx
	leaq	SymTab+8(%rip), %rdi
	jmp	.LBB328_16
	.p2align	4, 0x90
.LBB328_14:                             # %"$24"
                                        #   in Loop: Header=BB328_16 Depth=1
	movq	%rax, (%r12)
.LBB328_15:                             # %"$22"
                                        #   in Loop: Header=BB328_16 Depth=1
	testb	$15, %sil
	movq	%rax, %rbx
	jne	.LBB328_11
.LBB328_16:                             # %"$13"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rcx
	movq	8(%rsi), %rsi
	subq	$32, %rsp
	movq	%rdi, %rdx
	callq	cons
	addq	$32, %rsp
	testq	%rbx, %rbx
	je	.LBB328_14
# %bb.17:                               # %"$23"
                                        #   in Loop: Header=BB328_16 Depth=1
	movq	%rax, 8(%rbx)
	jmp	.LBB328_15
.LBB328_18:                             # %"$13.us.preheader"
	xorl	%edi, %edi
	jmp	.LBB328_21
	.p2align	4, 0x90
.LBB328_19:                             #   in Loop: Header=BB328_21 Depth=1
	movq	%rdi, %rax
.LBB328_20:                             # %"$22.us"
                                        #   in Loop: Header=BB328_21 Depth=1
	testb	$15, %sil
	movq	%rax, %rdi
	jne	.LBB328_11
.LBB328_21:                             # %"$13.us"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB328_22 Depth 2
	movq	(%rsi), %rbx
	movq	8(%rsi), %rsi
	movq	%r14, %r13
	.p2align	4, 0x90
.LBB328_22:                             # %"$16.us"
                                        #   Parent Loop BB328_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%r13), %rdx
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	equal
	addq	$32, %rsp
	testb	$1, %al
	jne	.LBB328_19
# %bb.23:                               # %"$19.us"
                                        #   in Loop: Header=BB328_22 Depth=2
	movq	8(%r13), %r13
	testb	$15, %r13b
	je	.LBB328_22
# %bb.24:                               # %"$15.$21.critedge_crit_edge.us"
                                        #   in Loop: Header=BB328_21 Depth=1
	subq	$32, %rsp
	movq	%rbx, %rcx
	leaq	SymTab+8(%rip), %rdx
	callq	cons
	addq	$32, %rsp
	testq	%rdi, %rdi
	je	.LBB328_26
# %bb.25:                               # %"$23.us"
                                        #   in Loop: Header=BB328_21 Depth=1
	movq	%rax, 8(%rdi)
	jmp	.LBB328_20
.LBB328_26:                             # %"$24.us"
                                        #   in Loop: Header=BB328_21 Depth=1
	movq	%rax, (%r12)
	jmp	.LBB328_20
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _index;
	.scl	2;
	.type	32;
	.endef
	.globl	_index                          # -- Begin function _index
	.p2align	4, 0x90
_index:                                 # @_index
.seh_proc _index
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %r12
	movq	8(%rax), %rdi
	testb	$6, %r12b
	jne	.LBB329_4
# %bb.1:                                # %"$3"
	testb	$8, %r12b
	jne	.LBB329_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%r12, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r12
	jmp	.LBB329_4
.LBB329_2:                              # %"$6"
	movq	(%r12), %r12
.LBB329_4:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%r12, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r15, env(%rip)
	movq	(%rdi), %rsi
	testb	$6, %sil
	jne	.LBB329_8
# %bb.5:                                # %"$8"
	testb	$8, %sil
	jne	.LBB329_6
# %bb.7:                                # %"$10"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB329_8
.LBB329_6:                              # %"$11"
	movq	(%rsi), %rsi
.LBB329_8:                              # %"$7"
	movl	$18, %ebx
	leaq	SymTab+8(%rip), %r14
	movq	%rsi, %rdi
	.p2align	4, 0x90
.LBB329_9:                              # %"$12"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %dil
	jne	.LBB329_13
# %bb.10:                               # %"$13"
                                        #   in Loop: Header=BB329_9 Depth=1
	movq	(%rdi), %rdx
	subq	$32, %rsp
	movq	%r12, %rcx
	callq	equal
	addq	$32, %rsp
	testb	$1, %al
	jne	.LBB329_11
# %bb.12:                               # %"$16"
                                        #   in Loop: Header=BB329_9 Depth=1
	movq	8(%rdi), %rdi
	addq	$16, %rbx
	cmpq	%rdi, %rsi
	jne	.LBB329_9
	jmp	.LBB329_13
.LBB329_11:
	movq	%rbx, %r14
.LBB329_13:                             # %"$14"
	movq	8(%r15), %rax
	movq	%rax, env(%rip)
	movq	%r14, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _offset;
	.scl	2;
	.type	32;
	.endef
	.globl	_offset                         # -- Begin function _offset
	.p2align	4, 0x90
_offset:                                # @_offset
.seh_proc _offset
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rdi
	testb	$6, %sil
	jne	.LBB330_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB330_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB330_4
.LBB330_2:                              # %"$6"
	movq	(%rsi), %rsi
.LBB330_4:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%rsi, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r15, env(%rip)
	movq	(%rdi), %rdi
	testb	$6, %dil
	jne	.LBB330_8
# %bb.5:                                # %"$8"
	testb	$8, %dil
	jne	.LBB330_6
# %bb.7:                                # %"$10"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdi
	jmp	.LBB330_8
.LBB330_6:                              # %"$11"
	movq	(%rdi), %rdi
.LBB330_8:                              # %"$7"
	leaq	SymTab+8(%rip), %r14
	testb	$15, %dil
	jne	.LBB330_13
# %bb.9:                                # %"$13.preheader"
	movl	$18, %ebx
	.p2align	4, 0x90
.LBB330_10:                             # %"$13"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rdi, %rdx
	callq	equal
	addq	$32, %rsp
	testb	$1, %al
	jne	.LBB330_11
# %bb.12:                               # %"$16"
                                        #   in Loop: Header=BB330_10 Depth=1
	movq	8(%rdi), %rdi
	addq	$16, %rbx
	testb	$15, %dil
	je	.LBB330_10
	jmp	.LBB330_13
.LBB330_11:
	movq	%rbx, %r14
.LBB330_13:                             # %"$14"
	movq	8(%r15), %rax
	movq	%rax, env(%rip)
	movq	%r14, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _prior;
	.scl	2;
	.type	32;
	.endef
	.globl	_prior                          # -- Begin function _prior
	.p2align	4, 0x90
_prior:                                 # @_prior
.seh_proc _prior
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rbx
	testb	$6, %sil
	jne	.LBB331_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB331_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB331_4
.LBB331_2:                              # %"$6"
	movq	(%rsi), %rsi
.LBB331_4:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rsi, (%rdi)
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rdi, env(%rip)
	movq	(%rbx), %rax
	testb	$6, %al
	jne	.LBB331_8
# %bb.5:                                # %"$8"
	testb	$8, %al
	jne	.LBB331_6
# %bb.7:                                # %"$10"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
.LBB331_8:                              # %"$7"
	testb	$15, %sil
	jne	.LBB331_14
.LBB331_9:                              # %"$7"
	cmpq	%rax, %rsi
	je	.LBB331_14
	.p2align	4, 0x90
.LBB331_10:                             # %"$16"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rcx
	testb	$15, %cl
	jne	.LBB331_14
# %bb.11:                               # %"$17"
                                        #   in Loop: Header=BB331_10 Depth=1
	movq	8(%rcx), %rax
	cmpq	%rsi, %rax
	jne	.LBB331_10
# %bb.12:                               # %"$19"
	movq	8(%rdi), %rax
	movq	%rax, env(%rip)
	movq	%rcx, %rax
	jmp	.LBB331_13
.LBB331_6:                              # %"$11"
	movq	(%rax), %rax
	testb	$15, %sil
	je	.LBB331_9
.LBB331_14:                             # %"$15"
	movq	8(%rdi), %rax
	movq	%rax, env(%rip)
	leaq	SymTab+8(%rip), %rax
.LBB331_13:                             # %"$19"
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _length;
	.scl	2;
	.type	32;
	.endef
	.globl	_length                         # -- Begin function _length
	.p2align	4, 0x90
_length:                                # @_length
.seh_proc _length
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rcx
	testb	$6, %cl
	jne	.LBB332_4
# %bb.1:                                # %"$3"
	testb	$8, %cl
	jne	.LBB332_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
.LBB332_4:                              # %"$2"
	testb	$6, %cl
	je	.LBB332_6
.LBB332_5:                              # %"$9"
	subq	$48, %rsp
	movq	$0, 32(%rsp)
	movq	$-2, %rdx
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	callq	fmtNum
	jmp	.LBB332_24
.LBB332_2:                              # %"$6"
	movq	(%rcx), %rcx
	testb	$6, %cl
	jne	.LBB332_5
.LBB332_6:                              # %"$8"
	testb	$15, %cl
	je	.LBB332_7
# %bb.17:                               # %"$10"
	movl	$2, %esi
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rcx
	je	.LBB332_23
# %bb.18:                               # %"$27"
	movq	-8(%rcx), %rcx
	testb	$8, %cl
	jne	.LBB332_23
	.p2align	4, 0x90
# %bb.20:                               # %"$32"
	testb	$6, %cl
	jne	.LBB332_21
.LBB332_19:                             # %"$32"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rcx
	testb	$6, %cl
	je	.LBB332_19
.LBB332_21:                             # %"$33"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	$0, (%rdi)
	movq	%rcx, 8(%rdi)
	movq	$-14, %rsi
	.p2align	4, 0x90
.LBB332_22:                             # %"$34"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	symChar
	addq	$32, %rsp
	addq	$16, %rsi
	testl	%eax, %eax
	jne	.LBB332_22
	jmp	.LBB332_23
.LBB332_7:                              # %"$12.preheader"
	orb	$1, (%rcx)
	movq	8(%rcx), %rax
	movl	$18, %esi
	testb	$15, %al
	jne	.LBB332_16
# %bb.8:                                # %"$13.preheader"
	movl	$18, %esi
	.p2align	4, 0x90
.LBB332_9:                              # %"$13"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rax), %rdx
	testb	$1, %dl
	jne	.LBB332_10
# %bb.15:                               # %"$19"
                                        #   in Loop: Header=BB332_9 Depth=1
	addq	$16, %rsi
	orq	$1, %rdx
	movq	%rdx, (%rax)
	movq	8(%rax), %rax
	testb	$15, %al
	je	.LBB332_9
	.p2align	4, 0x90
.LBB332_16:                             # %"$16"
                                        # =>This Inner Loop Header: Depth=1
	andb	$-2, (%rcx)
	movq	8(%rcx), %rcx
	cmpq	%rcx, %rax
	jne	.LBB332_16
.LBB332_23:                             # %"$7"
	movq	%rsi, %rax
.LBB332_24:                             # %"$7"
	movq	%rbp, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	retq
.LBB332_10:                             # %"$21.preheader"
	cmpq	%rcx, %rax
	je	.LBB332_13
	.p2align	4, 0x90
.LBB332_11:                             # %"$22"
                                        # =>This Inner Loop Header: Depth=1
	andb	$-2, (%rcx)
	movq	8(%rcx), %rcx
	cmpq	%rcx, %rax
	jne	.LBB332_11
# %bb.12:
	movq	%rax, %rcx
.LBB332_13:                             # %"$24.preheader"
	leaq	SymTab+280(%rip), %rsi
	movq	%rcx, %rax
	.p2align	4, 0x90
.LBB332_14:                             # %"$24"
                                        # =>This Inner Loop Header: Depth=1
	andb	$-2, (%rax)
	movq	8(%rax), %rax
	cmpq	%rax, %rcx
	jne	.LBB332_14
	jmp	.LBB332_23
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _size;
	.scl	2;
	.type	32;
	.endef
	.globl	_size                           # -- Begin function _size
	.p2align	4, 0x90
_size:                                  # @_size
.seh_proc _size
# %bb.0:                                # %"$1"
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rcx, %r14
	movq	8(%rcx), %rax
	movq	(%rax), %rdi
	testb	$6, %dil
	jne	.LBB333_4
# %bb.1:                                # %"$3"
	testb	$8, %dil
	jne	.LBB333_2
# %bb.3:                                # %"$5"
	movq	%rdi, %rcx
	callq	evList
	movq	%rax, %rdi
.LBB333_4:                              # %"$2"
	testb	$2, %dil
	jne	.LBB333_5
.LBB333_7:                              # %"$8"
	testb	$4, %dil
	jne	.LBB333_8
# %bb.12:                               # %"$13"
	testb	$15, %dil
	je	.LBB333_13
# %bb.14:                               # %"$23"
	movl	$2, %esi
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rdi
	je	.LBB333_36
# %bb.15:                               # %"$25"
	movq	-8(%rdi), %rbx
	testb	$8, %bl
	jne	.LBB333_16
	.p2align	4, 0x90
# %bb.27:                               # %"$36"
	testb	$6, %bl
	jne	.LBB333_28
.LBB333_26:                             # %"$36"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rbx), %rbx
	testb	$6, %bl
	je	.LBB333_26
.LBB333_28:                             # %"$37"
	cmpq	$2, %rbx
	je	.LBB333_36
# %bb.29:                               # %"$38"
	testb	$2, %bl
	jne	.LBB333_34
# %bb.30:                               # %"$45.preheader"
	movl	$2, %esi
	.p2align	4, 0x90
.LBB333_31:                             # %"$45"
                                        # =>This Inner Loop Header: Depth=1
	movq	4(%rbx), %rbx
	subq	$-128, %rsi
	testb	$2, %bl
	je	.LBB333_31
# %bb.32:                               # %"$47"
	shrq	$4, %rbx
	je	.LBB333_36
.LBB333_33:                             # %"$50"
                                        # =>This Inner Loop Header: Depth=1
	addq	$16, %rsi
	shrq	$8, %rbx
	jne	.LBB333_33
	jmp	.LBB333_36
.LBB333_8:                              # %"$14"
	andq	$-9, %rdi
	movl	$2, %esi
	.p2align	4, 0x90
.LBB333_9:                              # %"$15"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rdi, %rax
	movq	4(%rdi), %rdi
	subq	$-128, %rsi
	testb	$2, %dil
	je	.LBB333_9
# %bb.10:                               # %"$17"
	movq	-4(%rax), %rax
	shrq	$3, %rdi
	andq	$-2, %rdi
	addq	%rax, %rax
	adcq	$0, %rdi
	je	.LBB333_36
	.p2align	4, 0x90
.LBB333_11:                             # %"$20"
                                        # =>This Inner Loop Header: Depth=1
	addq	$16, %rsi
	shrq	$8, %rdi
	jne	.LBB333_11
	jmp	.LBB333_36
.LBB333_2:                              # %"$6"
	movq	(%rdi), %rdi
	testb	$2, %dil
	je	.LBB333_7
.LBB333_5:                              # %"$9"
	shrq	$3, %rdi
	movl	$2, %esi
	.p2align	4, 0x90
.LBB333_6:                              # %"$10"
                                        # =>This Inner Loop Header: Depth=1
	shrq	$8, %rdi
	addq	$16, %rsi
	testq	%rdi, %rdi
	jne	.LBB333_6
	jmp	.LBB333_36
.LBB333_13:                             # %"$24"
	movq	%rdi, %rcx
	callq	size
	movq	%rax, %rsi
	jmp	.LBB333_25
.LBB333_16:                             # %"$28"
	testb	$6, %bl
	je	.LBB333_20
# %bb.17:                               # %"$3.i"
	movq	%rbx, %rax
	addq	%rbx, %rax
	jb	.LBB333_20
# %bb.18:                               # %"$2.i"
	addq	%rax, %rax
	jb	.LBB333_20
# %bb.19:                               # %"$5.i"
	movl	$1, %r8d
	shldq	$62, %rax, %r8
	movq	%r8, -8(%rdi)
	movq	%r14, %rcx
	movq	%rdi, %rdx
	callq	db
	movq	-8(%rdi), %rbx
.LBB333_20:                             # %dbFetch.exit
	movq	(%rdi), %rcx
	callq	binSize
	movq	%rax, %rsi
	addq	$7, %rsi
	testb	$7, %bl
	je	.LBB333_21
.LBB333_25:                             # %"$31"
	shlq	$4, %rsi
	orq	$2, %rsi
.LBB333_36:                             # %"$7"
	movq	%rsi, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq
.LBB333_21:                             # %"$30.preheader"
	andq	$-9, %rbx
	jmp	.LBB333_22
	.p2align	4, 0x90
.LBB333_24:                             # %"$34"
                                        #   in Loop: Header=BB333_22 Depth=1
	movq	%rdi, %rcx
	callq	binSize
	addq	%r14, %rax
	addq	%rax, %rsi
	testb	$15, %bl
	jne	.LBB333_25
.LBB333_22:                             # %"$30"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rbx), %rdi
	movq	8(%rbx), %rbx
	movl	$2, %r14d
	testb	$15, %dil
	jne	.LBB333_24
# %bb.23:                               # %"$33"
                                        #   in Loop: Header=BB333_22 Depth=1
	movq	(%rdi), %rcx
	callq	binSize
	movq	%rax, %r14
	movq	8(%rdi), %rdi
	jmp	.LBB333_24
.LBB333_34:                             # %"$41"
	shrq	$4, %rbx
	movl	$2, %esi
	.p2align	4, 0x90
.LBB333_35:                             # %"$42"
                                        # =>This Inner Loop Header: Depth=1
	shrq	$8, %rbx
	addq	$16, %rsi
	testq	%rbx, %rbx
	jne	.LBB333_35
	jmp	.LBB333_36
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _bytes;
	.scl	2;
	.type	32;
	.endef
	.globl	_bytes                          # -- Begin function _bytes
	.p2align	4, 0x90
_bytes:                                 # @_bytes
.seh_proc _bytes
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rcx
	testb	$6, %cl
	jne	.LBB334_4
# %bb.1:                                # %"$3"
	testb	$8, %cl
	jne	.LBB334_2
# %bb.3:                                # %"$5"
	callq	evList
	movq	%rax, %rcx
	jmp	.LBB334_4
.LBB334_2:                              # %"$6"
	movq	(%rcx), %rcx
.LBB334_4:                              # %"$2"
	callq	binSize
	shlq	$4, %rax
	orq	$2, %rax
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _assoc;
	.scl	2;
	.type	32;
	.endef
	.globl	_assoc                          # -- Begin function _assoc
	.p2align	4, 0x90
_assoc:                                 # @_assoc
.seh_proc _assoc
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %r12
	movq	8(%rax), %rdi
	testb	$6, %r12b
	jne	.LBB335_4
# %bb.1:                                # %"$3"
	testb	$8, %r12b
	jne	.LBB335_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%r12, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r12
	jmp	.LBB335_4
.LBB335_2:                              # %"$6"
	movq	(%r12), %r12
.LBB335_4:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%r12, (%r14)
	movq	%r14, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r14, env(%rip)
	movq	(%rdi), %rsi
	testb	$6, %sil
	jne	.LBB335_8
# %bb.5:                                # %"$8"
	testb	$8, %sil
	jne	.LBB335_6
# %bb.7:                                # %"$10"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB335_8
.LBB335_6:                              # %"$11"
	movq	(%rsi), %rsi
.LBB335_8:                              # %"$7"
	leaq	SymTab+8(%rip), %r15
	movq	%rsi, %rdi
	jmp	.LBB335_9
	.p2align	4, 0x90
.LBB335_12:                             # %"$18"
                                        #   in Loop: Header=BB335_9 Depth=1
	movq	8(%rdi), %rdi
	cmpq	%rdi, %rsi
	je	.LBB335_13
.LBB335_9:                              # %"$12"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %dil
	jne	.LBB335_13
# %bb.10:                               # %"$13"
                                        #   in Loop: Header=BB335_9 Depth=1
	movq	(%rdi), %rbx
	testb	$15, %bl
	jne	.LBB335_12
# %bb.11:                               # %"$17"
                                        #   in Loop: Header=BB335_9 Depth=1
	movq	(%rbx), %rdx
	subq	$32, %rsp
	movq	%r12, %rcx
	callq	equal
	addq	$32, %rsp
	testb	$1, %al
	je	.LBB335_12
	jmp	.LBB335_14
.LBB335_13:
	movq	%r15, %rbx
.LBB335_14:                             # %"$14"
	movq	8(%r14), %rax
	movq	%rax, env(%rip)
	movq	%rbx, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _rassoc;
	.scl	2;
	.type	32;
	.endef
	.globl	_rassoc                         # -- Begin function _rassoc
	.p2align	4, 0x90
_rassoc:                                # @_rassoc
.seh_proc _rassoc
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %r12
	movq	8(%rax), %rdi
	testb	$6, %r12b
	jne	.LBB336_4
# %bb.1:                                # %"$3"
	testb	$8, %r12b
	jne	.LBB336_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%r12, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r12
	jmp	.LBB336_4
.LBB336_2:                              # %"$6"
	movq	(%r12), %r12
.LBB336_4:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%r12, (%r14)
	movq	%r14, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r14, env(%rip)
	movq	(%rdi), %rsi
	testb	$6, %sil
	jne	.LBB336_8
# %bb.5:                                # %"$8"
	testb	$8, %sil
	jne	.LBB336_6
# %bb.7:                                # %"$10"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB336_8
.LBB336_6:                              # %"$11"
	movq	(%rsi), %rsi
.LBB336_8:                              # %"$7"
	leaq	SymTab+8(%rip), %r15
	movq	%rsi, %rdi
	jmp	.LBB336_9
	.p2align	4, 0x90
.LBB336_12:                             # %"$18"
                                        #   in Loop: Header=BB336_9 Depth=1
	movq	8(%rdi), %rdi
	cmpq	%rdi, %rsi
	je	.LBB336_13
.LBB336_9:                              # %"$12"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %dil
	jne	.LBB336_13
# %bb.10:                               # %"$13"
                                        #   in Loop: Header=BB336_9 Depth=1
	movq	(%rdi), %rbx
	testb	$15, %bl
	jne	.LBB336_12
# %bb.11:                               # %"$17"
                                        #   in Loop: Header=BB336_9 Depth=1
	movq	8(%rbx), %rdx
	subq	$32, %rsp
	movq	%r12, %rcx
	callq	equal
	addq	$32, %rsp
	testb	$1, %al
	je	.LBB336_12
	jmp	.LBB336_14
.LBB336_13:
	movq	%r15, %rbx
.LBB336_14:                             # %"$14"
	movq	8(%r14), %rax
	movq	%rax, env(%rip)
	movq	%rbx, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _asoq;
	.scl	2;
	.type	32;
	.endef
	.globl	_asoq                           # -- Begin function _asoq
	.p2align	4, 0x90
_asoq:                                  # @_asoq
.seh_proc _asoq
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rbx
	testb	$6, %sil
	jne	.LBB337_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB337_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB337_4
.LBB337_2:                              # %"$6"
	movq	(%rsi), %rsi
.LBB337_4:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rsi, (%rdi)
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rdi, env(%rip)
	movq	(%rbx), %rax
	testb	$6, %al
	jne	.LBB337_8
# %bb.5:                                # %"$8"
	testb	$8, %al
	jne	.LBB337_6
# %bb.7:                                # %"$10"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB337_8
.LBB337_6:                              # %"$11"
	movq	(%rax), %rax
.LBB337_8:                              # %"$7"
	leaq	SymTab+8(%rip), %rdx
	movq	%rax, %rbx
	jmp	.LBB337_9
	.p2align	4, 0x90
.LBB337_12:                             # %"$18"
                                        #   in Loop: Header=BB337_9 Depth=1
	movq	8(%rbx), %rbx
	cmpq	%rbx, %rax
	je	.LBB337_13
.LBB337_9:                              # %"$12"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %bl
	jne	.LBB337_13
# %bb.10:                               # %"$13"
                                        #   in Loop: Header=BB337_9 Depth=1
	movq	(%rbx), %rcx
	testb	$15, %cl
	jne	.LBB337_12
# %bb.11:                               # %"$17"
                                        #   in Loop: Header=BB337_9 Depth=1
	cmpq	(%rcx), %rsi
	jne	.LBB337_12
	jmp	.LBB337_14
.LBB337_13:
	movq	%rdx, %rcx
.LBB337_14:                             # %"$14"
	movq	8(%rdi), %rax
	movq	%rax, env(%rip)
	movq	%rcx, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _rasoq;
	.scl	2;
	.type	32;
	.endef
	.globl	_rasoq                          # -- Begin function _rasoq
	.p2align	4, 0x90
_rasoq:                                 # @_rasoq
.seh_proc _rasoq
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rbx
	testb	$6, %sil
	jne	.LBB338_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB338_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB338_4
.LBB338_2:                              # %"$6"
	movq	(%rsi), %rsi
.LBB338_4:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rsi, (%rdi)
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rdi, env(%rip)
	movq	(%rbx), %rax
	testb	$6, %al
	jne	.LBB338_8
# %bb.5:                                # %"$8"
	testb	$8, %al
	jne	.LBB338_6
# %bb.7:                                # %"$10"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB338_8
.LBB338_6:                              # %"$11"
	movq	(%rax), %rax
.LBB338_8:                              # %"$7"
	leaq	SymTab+8(%rip), %rdx
	movq	%rax, %rbx
	jmp	.LBB338_9
	.p2align	4, 0x90
.LBB338_12:                             # %"$18"
                                        #   in Loop: Header=BB338_9 Depth=1
	movq	8(%rbx), %rbx
	cmpq	%rbx, %rax
	je	.LBB338_13
.LBB338_9:                              # %"$12"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %bl
	jne	.LBB338_13
# %bb.10:                               # %"$13"
                                        #   in Loop: Header=BB338_9 Depth=1
	movq	(%rbx), %rcx
	testb	$15, %cl
	jne	.LBB338_12
# %bb.11:                               # %"$17"
                                        #   in Loop: Header=BB338_9 Depth=1
	cmpq	8(%rcx), %rsi
	jne	.LBB338_12
	jmp	.LBB338_14
.LBB338_13:
	movq	%rdx, %rcx
.LBB338_14:                             # %"$14"
	movq	8(%rdi), %rax
	movq	%rax, env(%rip)
	movq	%rcx, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _rank;
	.scl	2;
	.type	32;
	.endef
	.globl	_rank                           # -- Begin function _rank
	.p2align	4, 0x90
_rank:                                  # @_rank
.seh_proc _rank
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %r15
	movq	8(%rax), %rdi
	testb	$6, %r15b
	jne	.LBB339_4
# %bb.1:                                # %"$3"
	testb	$8, %r15b
	jne	.LBB339_3
# %bb.2:                                # %"$5"
	subq	$32, %rsp
	movq	%r15, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r15
	jmp	.LBB339_4
.LBB339_3:                              # %"$6"
	movq	(%r15), %r15
.LBB339_4:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%r15, (%r14)
	movq	%r14, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r14, env(%rip)
	movq	(%rdi), %rsi
	movq	8(%rdi), %rdi
	testb	$6, %sil
	jne	.LBB339_9
# %bb.6:                                # %"$8"
	testb	$8, %sil
	jne	.LBB339_8
# %bb.7:                                # %"$10"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	movq	env(%rip), %rcx
	jmp	.LBB339_10
.LBB339_8:                              # %"$11"
	movq	(%rsi), %rsi
.LBB339_9:                              # %"$7"
	movq	%r14, %rcx
.LBB339_10:                             # %"$7"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rsi, (%rax)
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%rcx, (%rdx)
	movq	%rax, env(%rip)
	movq	(%rdi), %rbx
	testb	$6, %bl
	jne	.LBB339_14
# %bb.11:                               # %"$13"
	testb	$8, %bl
	jne	.LBB339_13
# %bb.12:                               # %"$15"
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rbx
	jmp	.LBB339_14
.LBB339_13:                             # %"$16"
	movq	(%rbx), %rbx
.LBB339_14:                             # %"$12"
	leaq	SymTab+8(%rip), %rdi
	movq	(%rsi), %rax
	movq	(%rax), %rcx
	subq	$32, %rsp
	movq	%r15, %rdx
	callq	compare
	addq	$32, %rsp
	cmpq	%rdi, %rbx
	jne	.LBB339_19
	.p2align	4, 0x90
# %bb.15:                               # %"$20"
	testq	%rax, %rax
	jg	.LBB339_18
.LBB339_16:                             # %"$21"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rsi, %rdi
	movq	8(%rsi), %rsi
	testb	$15, %sil
	jne	.LBB339_18
# %bb.17:                               # %"$20"
                                        #   in Loop: Header=BB339_16 Depth=1
	movq	(%rsi), %rax
	movq	(%rax), %rcx
	subq	$32, %rsp
	movq	%r15, %rdx
	callq	compare
	addq	$32, %rsp
	testq	%rax, %rax
	jle	.LBB339_16
.LBB339_18:                             # %"$19"
	movq	(%rdi), %rax
	movq	8(%r14), %rcx
	movq	%rcx, env(%rip)
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.p2align	4, 0x90
.LBB339_19:                             # %"$24"
                                        # =>This Inner Loop Header: Depth=1
	testq	%rax, %rax
	js	.LBB339_18
# %bb.20:                               # %"$25"
                                        #   in Loop: Header=BB339_19 Depth=1
	movq	%rsi, %rdi
	movq	8(%rsi), %rsi
	testb	$15, %sil
	jne	.LBB339_18
# %bb.21:                               # %"$24"
                                        #   in Loop: Header=BB339_19 Depth=1
	movq	(%rsi), %rax
	movq	(%rax), %rcx
	subq	$32, %rsp
	movq	%r15, %rdx
	callq	compare
	addq	$32, %rsp
	jmp	.LBB339_19
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _match;
	.scl	2;
	.type	32;
	.endef
	.globl	_match                          # -- Begin function _match
	.p2align	4, 0x90
_match:                                 # @_match
.seh_proc _match
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rbx
	testb	$6, %sil
	jne	.LBB340_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB340_3
# %bb.2:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB340_4
.LBB340_3:                              # %"$6"
	movq	(%rsi), %rsi
.LBB340_4:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rsi, (%rdi)
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rdi, env(%rip)
	movq	(%rbx), %rdx
	testb	$6, %dl
	jne	.LBB340_9
# %bb.6:                                # %"$8"
	testb	$8, %dl
	jne	.LBB340_8
# %bb.7:                                # %"$10"
	subq	$32, %rsp
	movq	%rdx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdx
	movq	env(%rip), %rcx
	jmp	.LBB340_10
.LBB340_8:                              # %"$11"
	movq	(%rdx), %rdx
.LBB340_9:                              # %"$7"
	movq	%rdi, %rcx
.LBB340_10:                             # %"$7"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rdx, (%rbx)
	movq	%rbx, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rbx, env(%rip)
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	match
	addq	$32, %rsp
	leaq	SymTab+280(%rip), %rdx
	leaq	SymTab+8(%rip), %rcx
	testb	$1, %al
	cmovneq	%rdx, %rcx
	movq	8(%rdi), %rax
	movq	%rax, env(%rip)
	movq	%rcx, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _fill;
	.scl	2;
	.type	32;
	.endef
	.globl	_fill                           # -- Begin function _fill
	.p2align	4, 0x90
_fill:                                  # @_fill
.seh_proc _fill
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rbx
	testb	$6, %sil
	jne	.LBB341_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB341_3
# %bb.2:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB341_4
.LBB341_3:                              # %"$6"
	movq	(%rsi), %rsi
.LBB341_4:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%rsi, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r15, env(%rip)
	movq	(%rbx), %rdi
	movq	8(%rbx), %r14
	testb	$6, %dil
	jne	.LBB341_9
# %bb.6:                                # %"$8"
	testb	$8, %dil
	jne	.LBB341_8
# %bb.7:                                # %"$10"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdi
	movq	env(%rip), %rdx
	jmp	.LBB341_10
.LBB341_8:                              # %"$11"
	movq	(%rdi), %rdi
.LBB341_9:                              # %"$7"
	movq	%r15, %rdx
.LBB341_10:                             # %"$7"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rcx
	movq	%rdi, (%rcx)
	movq	%rcx, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	%rcx, env(%rip)
	testb	$15, %r14b
	je	.LBB341_12
# %bb.11:                               # %"$13"
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rdi, %rdx
	callq	fill2
	jmp	.LBB341_17
.LBB341_12:                             # %"$12"
	movq	(%r14), %r8
	testb	$6, %r8b
	jne	.LBB341_16
# %bb.13:                               # %"$16"
	testb	$8, %r8b
	jne	.LBB341_15
# %bb.14:                               # %"$18"
	subq	$32, %rsp
	movq	%r8, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r8
	movq	env(%rip), %rcx
	jmp	.LBB341_16
.LBB341_15:                             # %"$19"
	movq	(%r8), %r8
.LBB341_16:                             # %"$15"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%r8, (%rax)
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%rcx, (%rdx)
	movq	%rax, env(%rip)
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rdi, %rdx
	callq	fill3
.LBB341_17:                             # %"$14"
	addq	$32, %rsp
	testq	%rax, %rax
	cmovneq	%rax, %rsi
	movq	8(%r15), %rax
	movq	%rax, env(%rip)
	movq	%rsi, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _prove;
	.scl	2;
	.type	32;
	.endef
	.globl	_prove                          # -- Begin function _prove
	.p2align	4, 0x90
_prove:                                 # @_prove
.seh_proc _prove
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$88, %rsp
	.seh_stackalloc 88
	leaq	80(%rsp), %rbp
	.seh_setframe %rbp, 80
	.seh_endprologue
	movq	%rcx, %r12
	movq	8(%rcx), %rsi
	movq	(%rsi), %rdx
	testb	$6, %dl
	jne	.LBB342_4
# %bb.1:                                # %"$3"
	testb	$8, %dl
	jne	.LBB342_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rdx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdx
.LBB342_4:                              # %"$2"
	testb	$15, %dl
	je	.LBB342_6
.LBB342_5:
	leaq	SymTab+8(%rip), %r14
	jmp	.LBB342_69
.LBB342_2:                              # %"$6"
	movq	(%rdx), %rdx
	testb	$15, %dl
	jne	.LBB342_5
.LBB342_6:                              # %"$8"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rdx, (%rdi)
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rdi, env(%rip)
	movq	8(%rsi), %rax
	movq	(%rax), %rcx
	testb	$6, %cl
	movq	%rdx, (%rbp)                    # 8-byte Spill
	jne	.LBB342_10
# %bb.7:                                # %"$11"
	testb	$8, %cl
	jne	.LBB342_8
# %bb.9:                                # %"$13"
	subq	$32, %rsp
	callq	evList
	movq	(%rbp), %rdx                    # 8-byte Reload
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB342_10
.LBB342_8:                              # %"$14"
	movq	(%rcx), %rcx
.LBB342_10:                             # %"$10"
	leaq	SymTab+8(%rip), %r14
	cmpq	%r14, %rcx
	movq	%rdi, -72(%rbp)                 # 8-byte Spill
	jne	.LBB342_12
# %bb.11:
	xorl	%eax, %eax
	movq	%rax, -32(%rbp)                 # 8-byte Spill
	jmp	.LBB342_13
.LBB342_12:                             # %"$16"
	movq	env(%rip), %rbx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rcx, -32(%rbp)                 # 8-byte Spill
	movq	%rcx, (%rax)
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%rbx, (%rdx)
	movq	(%rbp), %rdx                    # 8-byte Reload
	movq	%rax, env(%rip)
.LBB342_13:                             # %"$17"
	movq	(%rdx), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rax
	movq	%rax, (%rdx)
	movq	(%rcx), %rax
	movq	%rax, -8(%rbp)                  # 8-byte Spill
	movq	8(%rcx), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rdx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r13
	movq	%rcx, (%r13)
	movq	env(%rip), %rax
	movq	%rax, 8(%r13)
	movq	%r13, env(%rip)
	movq	(%rdx), %rcx
	movq	8(%rdx), %rdx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%rcx, (%r15)
	movq	%r13, 8(%r15)
	movq	%r15, env(%rip)
	movq	(%rdx), %rcx
	movq	8(%rdx), %rdx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rcx, (%rsi)
	movq	%r15, 8(%rsi)
	movq	%rsi, env(%rip)
	movq	(%rdx), %rcx
	movq	8(%rdx), %rdx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rcx, (%rbx)
	movq	%rsi, 8(%rbx)
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rdx, (%rdi)
	movq	%rbx, 8(%rdi)
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdx
	movq	%r14, (%rdx)
	movq	%rdi, 8(%rdx)
	movq	SymTab+440(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rcx, -64(%rbp)                 # 8-byte Spill
	movq	%rcx, (%rax)
	movq	%rax, %rcx
	orq	$8, %rcx
	movq	%rdx, -16(%rbp)                 # 8-byte Spill
	movq	%rdx, (%rcx)
	movq	%rax, env(%rip)
	movq	($Penv)(%rip), %rax
	movq	%rax, -56(%rbp)                 # 8-byte Spill
	movq	($Pnl)(%rip), %rax
	movq	%rax, -48(%rbp)                 # 8-byte Spill
	movq	%rdi, -24(%rbp)                 # 8-byte Spill
	movq	%rdi, ($Penv)(%rip)
	movq	%r13, ($Pnl)(%rip)
	testb	$15, (%rsi)
	je	.LBB342_16
# %bb.14:                               # %"$17"
	movq	(%rbx), %rax
	andl	$15, %eax
.LBB342_15:                             # %"$17"
	testq	%rax, %rax
	jne	.LBB342_52
.LBB342_16:                             # %"$21"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB342_38 Depth 2
                                        #     Child Loop BB342_42 Depth 2
                                        #     Child Loop BB342_24 Depth 2
                                        #     Child Loop BB342_28 Depth 2
	cmpl	$0, ($Signal)(%rip)
	je	.LBB342_18
# %bb.17:                               # %"$23"
                                        #   in Loop: Header=BB342_16 Depth=1
	subq	$32, %rsp
	movq	%r12, %rcx
	callq	sighandler
	addq	$32, %rsp
.LBB342_18:                             # %"$24"
                                        #   in Loop: Header=BB342_16 Depth=1
	movq	(%r15), %rax
	testb	$15, %al
	je	.LBB342_19
# %bb.33:                               # %"$26"
                                        #   in Loop: Header=BB342_16 Depth=1
	movq	(%rsi), %rdi
	testb	$15, %dil
	je	.LBB342_35
# %bb.34:                               # %"$49"
                                        #   in Loop: Header=BB342_16 Depth=1
	movq	(%rbx), %rax
	movq	(%rax), %rcx
	movq	%rcx, (%rsi)
	movq	8(%rax), %rax
	movq	%rax, (%rbx)
	movq	(%r13), %rax
	movq	8(%rax), %rax
	movq	%rax, (%r13)
	jmp	.LBB342_51
	.p2align	4, 0x90
.LBB342_19:                             # %"$27"
                                        #   in Loop: Header=BB342_16 Depth=1
	movq	-24(%rbp), %rcx                 # 8-byte Reload
	movq	(%rcx), %rcx
	movq	-16(%rbp), %rdx                 # 8-byte Reload
	movq	%rcx, (%rdx)
	movq	(%r13), %rcx
	movq	(%rcx), %rcx
	movq	(%rsi), %rdx
	movq	(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	(%rax), %rax
	movq	(%rax), %r9
	subq	$32, %rsp
	movq	-8(%rbp), %r8                   # 8-byte Reload
	callq	unify
	addq	$32, %rsp
	testb	$1, %al
	je	.LBB342_20
# %bb.21:                               # %"$29"
                                        #   in Loop: Header=BB342_16 Depth=1
	cmpq	$0, -32(%rbp)                   # 8-byte Folded Reload
	je	.LBB342_30
# %bb.22:                               # %"$33"
                                        #   in Loop: Header=BB342_16 Depth=1
	testb	$15, -32(%rbp)                  # 1-byte Folded Reload
	jne	.LBB342_30
# %bb.23:                               # %"$36.preheader"
                                        #   in Loop: Header=BB342_16 Depth=1
	movq	(%rsi), %rax
	movq	(%rax), %rdi
	movq	(%rdi), %rcx
	movq	-32(%rbp), %rax                 # 8-byte Reload
	.p2align	4, 0x90
.LBB342_24:                             # %"$36"
                                        #   Parent Loop BB342_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpq	(%rax), %rcx
	je	.LBB342_26
# %bb.25:                               # %"$39"
                                        #   in Loop: Header=BB342_24 Depth=2
	movq	8(%rax), %rax
	testb	$15, %al
	je	.LBB342_24
	jmp	.LBB342_30
	.p2align	4, 0x90
.LBB342_35:                             # %"$48"
                                        #   in Loop: Header=BB342_16 Depth=1
	movq	(%rdi), %rax
	testb	$15, %al
	je	.LBB342_40
# %bb.36:                               # %"$52.preheader"
                                        #   in Loop: Header=BB342_16 Depth=1
	movq	(%rbp), %rdx                    # 8-byte Reload
	movq	(%rdx), %rax
	testb	$15, %al
	jne	.LBB342_47
	.p2align	4, 0x90
.LBB342_38:                             # %"$54"
                                        #   Parent Loop BB342_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%r13), %rcx
	cmpq	(%rcx), %rax
	jb	.LBB342_47
# %bb.39:                               # %"$55"
                                        #   in Loop: Header=BB342_38 Depth=2
	movq	(%rdx), %rax
	movq	8(%rax), %rax
	movq	%rax, (%rdx)
	testb	$15, %al
	je	.LBB342_38
.LBB342_47:                             # %"$56"
                                        #   in Loop: Header=BB342_16 Depth=1
	movq	8(%rdi), %rax
	movq	%rax, (%rsi)
	jmp	.LBB342_51
.LBB342_20:                             # %"$28"
                                        #   in Loop: Header=BB342_16 Depth=1
	movq	(%r15), %rax
	movq	8(%rax), %rax
.LBB342_49:                             # %"$62"
                                        #   in Loop: Header=BB342_16 Depth=1
	movq	%rax, (%r15)
	testb	$15, %al
	je	.LBB342_51
.LBB342_50:                             # %"$70"
                                        #   in Loop: Header=BB342_16 Depth=1
	movq	(%rbp), %rdx                    # 8-byte Reload
	movq	(%rdx), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rax
	movq	%rax, (%rdx)
	movq	(%rcx), %rax
	movq	%rax, -8(%rbp)                  # 8-byte Spill
	movq	8(%rcx), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rax
	movq	%rcx, (%r13)
	movq	(%rax), %rcx
	movq	8(%rax), %rax
	movq	%rcx, (%r15)
	movq	(%rax), %rcx
	movq	8(%rax), %rax
	movq	%rcx, (%rsi)
	movq	(%rax), %rcx
	movq	8(%rax), %rax
	movq	%rcx, (%rbx)
	movq	-24(%rbp), %rcx                 # 8-byte Reload
	movq	%rax, (%rcx)
	jmp	.LBB342_51
.LBB342_40:                             # %"$50"
                                        #   in Loop: Header=BB342_16 Depth=1
	movq	(%rax), %rcx
	testb	$2, %cl
	jne	.LBB342_41
# %bb.44:                               # %"$57"
                                        #   in Loop: Header=BB342_16 Depth=1
	leaq	SymTab+728(%rip), %rdx
	cmpq	%rdx, %rcx
	jne	.LBB342_48
# %bb.45:                               # %"$63"
                                        #   in Loop: Header=BB342_16 Depth=1
	movq	8(%rax), %rax
	movq	8(%rax), %rcx
	subq	$32, %rsp
	callq	uniRun
	addq	$32, %rsp
	movq	-16(%rbp), %rcx                 # 8-byte Reload
	movq	%rax, (%rcx)
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB342_50
# %bb.46:                               # %"$65"
                                        #   in Loop: Header=BB342_16 Depth=1
	movq	(%r13), %rcx
	movq	(%rcx), %rcx
	movq	(%rdi), %rdx
	movq	8(%rdx), %rdx
	movq	(%rdx), %rdx
	subq	$32, %rsp
	movq	%rcx, %r8
	movq	%rax, %r9
	callq	unify
	addq	$32, %rsp
	testb	$1, %al
	jne	.LBB342_47
	jmp	.LBB342_50
.LBB342_41:                             # %"$58"
                                        #   in Loop: Header=BB342_16 Depth=1
	movq	8(%rax), %rcx
	subq	$32, %rsp
	callq	uniRun
	addq	$32, %rsp
	movq	-16(%rbp), %rcx                 # 8-byte Reload
	movq	%rax, (%rcx)
	movq	(%rdi), %rax
	movq	(%rax), %rax
	shrq	$4, %rax
	incq	%rax
	movq	%r13, %rcx
	.p2align	4, 0x90
.LBB342_42:                             # %"$59"
                                        #   Parent Loop BB342_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rcx), %rdx
	leaq	8(%rdx), %rcx
	decq	%rax
	cmpq	$1, %rax
	jg	.LBB342_42
# %bb.43:                               # %"$61"
                                        #   in Loop: Header=BB342_16 Depth=1
	movq	(%rdx), %rcx
	movq	(%r13), %rdx
	subq	$32, %rsp
	callq	cons
	addq	$32, %rsp
	movq	%rax, (%r13)
	movq	8(%rdi), %rcx
	movq	(%rbx), %rdx
	subq	$32, %rsp
	callq	cons
	addq	$32, %rsp
	movq	%rax, (%rbx)
	movq	-16(%rbp), %rax                 # 8-byte Reload
	movq	(%rax), %rax
	movq	%rax, (%rsi)
	jmp	.LBB342_51
.LBB342_26:                             # %"$41"
                                        #   in Loop: Header=BB342_16 Depth=1
	movq	%r12, -40(%rbp)                 # 8-byte Spill
	subq	$32, %rsp
	leaq	SymTab+280(%rip), %rdx
	callq	get
	addq	$32, %rsp
	movq	%rax, %r12
	movq	(%r15), %rax
	movq	(%rax), %rcx
	movq	(%r12), %rdx
	subq	$32, %rsp
	callq	equal
	addq	$32, %rsp
	movl	$1, %r14d
	testb	$1, %al
	jne	.LBB342_29
# %bb.27:                               # %"$44.preheader"
                                        #   in Loop: Header=BB342_16 Depth=1
	movl	$1, %r14d
	.p2align	4, 0x90
.LBB342_28:                             # %"$44"
                                        #   Parent Loop BB342_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	incq	%r14
	movq	8(%r12), %r12
	movq	(%r15), %rax
	movq	(%rax), %rcx
	movq	(%r12), %rdx
	subq	$32, %rsp
	callq	equal
	addq	$32, %rsp
	testb	$1, %al
	je	.LBB342_28
.LBB342_29:                             # %"$45"
                                        #   in Loop: Header=BB342_16 Depth=1
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	outWord
	movb	$32, %cl
	callq	*($Put)(%rip)
	movq	%rdi, %rcx
	callq	uniFill
	movq	%rax, %rcx
	callq	print
	movb	$10, %cl
	callq	*($Put)(%rip)
	addq	$32, %rsp
	leaq	SymTab+8(%rip), %r14
	movq	-40(%rbp), %r12                 # 8-byte Reload
.LBB342_30:                             # %"$34"
                                        #   in Loop: Header=BB342_16 Depth=1
	movq	(%r15), %rax
	movq	8(%rax), %rdi
	testb	$15, %dil
	jne	.LBB342_32
# %bb.31:                               # %"$46"
                                        #   in Loop: Header=BB342_16 Depth=1
	movq	(%r13), %rax
	movq	%rax, -40(%rbp)                 # 8-byte Spill
	movq	%r12, %r14
	movq	(%rsi), %r12
	movq	(%rbx), %rcx
	movq	-16(%rbp), %rax                 # 8-byte Reload
	movq	(%rax), %rdx
	subq	$32, %rsp
	callq	cons
	movq	%r12, %rcx
	movq	%r14, %r12
	movq	%rax, %rdx
	callq	cons
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	cons
	movq	-40(%rbp), %rcx                 # 8-byte Reload
	leaq	SymTab+8(%rip), %r14
	movq	%rax, %rdx
	callq	cons
	movq	-8(%rbp), %rcx                  # 8-byte Reload
	movq	%rax, %rdx
	callq	cons
	addq	$32, %rsp
	movq	(%rbp), %rdi                    # 8-byte Reload
	movq	(%rdi), %rdx
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	cons
	addq	$32, %rsp
	movq	%rax, (%rdi)
.LBB342_32:                             # %"$47"
                                        #   in Loop: Header=BB342_16 Depth=1
	movq	(%r13), %rdx
	subq	$32, %rsp
	movq	-8(%rbp), %rdi                  # 8-byte Reload
	movq	%rdi, %rcx
	callq	cons
	addq	$32, %rsp
	movq	%rax, (%r13)
	movq	(%rsi), %rax
	movq	8(%rax), %rcx
	movq	(%rbx), %rdx
	subq	$32, %rsp
	callq	cons
	addq	$32, %rsp
	movq	%rax, (%rbx)
	movq	(%r15), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, (%rsi)
	leaq	SymTab+8(%rip), %rax
	movq	%rax, (%r15)
	addq	$16, %rdi
	movq	%rdi, -8(%rbp)                  # 8-byte Spill
	.p2align	4, 0x90
.LBB342_51:                             # %"$25"
                                        #   in Loop: Header=BB342_16 Depth=1
	movq	(%rbx), %rax
	andl	$15, %eax
	testb	$15, (%rsi)
	jne	.LBB342_15
	jmp	.LBB342_16
.LBB342_48:                             # %"$62"
                                        #   in Loop: Header=BB342_16 Depth=1
	subq	$32, %rsp
	leaq	SymTab+280(%rip), %rdx
	callq	get
	addq	$32, %rsp
	jmp	.LBB342_49
.LBB342_52:                             # %"$22"
	movq	-16(%rbp), %rbx                 # 8-byte Reload
	movq	%r14, (%rbx)
	movq	-24(%rbp), %r15                 # 8-byte Reload
	movq	(%r15), %rcx
	testb	$15, 8(%rcx)
	je	.LBB342_54
# %bb.53:
	movq	%r14, %rax
	jmp	.LBB342_68
.LBB342_54:                             # %"$72.preheader"
	movq	%rcx, %rdi
	addq	$8, %rdi
	leaq	SymTab+8(%rip), %r12
	movq	%r12, %rax
	jmp	.LBB342_55
.LBB342_63:                             # %"$10.i.i"
                                        #   in Loop: Header=BB342_55 Depth=1
	movb	-4(%rcx), %cl
.LBB342_64:                             # %"$2.i"
                                        #   in Loop: Header=BB342_55 Depth=1
	cmpb	$64, %cl
	cmoveq	%r12, %rax
.LBB342_65:                             # %lookup.exit
                                        #   in Loop: Header=BB342_55 Depth=1
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	cons
	addq	$32, %rsp
	movq	(%rbx), %rdx
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	cons
	addq	$32, %rsp
	movq	%rax, (%rbx)
.LBB342_66:                             # %"$75"
                                        #   in Loop: Header=BB342_55 Depth=1
	movq	(%rdi), %rcx
	leaq	8(%rcx), %rdi
	testb	$15, 8(%rcx)
	jne	.LBB342_67
.LBB342_55:                             # %"$72"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB342_59 Depth 2
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	cmpq	$2, (%rcx)
	jne	.LBB342_66
# %bb.56:                               # %"$74"
                                        #   in Loop: Header=BB342_55 Depth=1
	movq	8(%rcx), %rsi
	subq	$32, %rsp
	movl	$2, %ecx
	movq	%rsi, %rdx
	callq	lup
	addq	$32, %rsp
	cmpq	%r12, %rax
	je	.LBB342_65
# %bb.57:                               # %"$74"
                                        #   in Loop: Header=BB342_55 Depth=1
	movl	%eax, %ecx
	andl	$14, %ecx
	cmpl	$8, %ecx
	jne	.LBB342_65
# %bb.58:                               # %"$3.i.i"
                                        #   in Loop: Header=BB342_55 Depth=1
	movq	-8(%rax), %rcx
	testb	$8, %cl
	jne	.LBB342_65
	.p2align	4, 0x90
# %bb.60:                               # %"$8.i.i"
                                        #   in Loop: Header=BB342_55 Depth=1
	testb	$6, %cl
	jne	.LBB342_61
.LBB342_59:                             # %"$8.i.i"
                                        #   Parent Loop BB342_55 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rcx), %rcx
	testb	$6, %cl
	je	.LBB342_59
.LBB342_61:                             # %"$9.i.i"
                                        #   in Loop: Header=BB342_55 Depth=1
	testb	$2, %cl
	je	.LBB342_63
# %bb.62:                               # %"$11.i.i"
                                        #   in Loop: Header=BB342_55 Depth=1
	shrq	$4, %rcx
	jmp	.LBB342_64
.LBB342_67:                             # %"$73.loopexit"
	movq	(%r15), %rcx
.LBB342_68:                             # %"$73"
	movq	-72(%rbp), %rdx                 # 8-byte Reload
	movq	-64(%rbp), %rbx                 # 8-byte Reload
	movq	-56(%rbp), %rdi                 # 8-byte Reload
	movq	-48(%rbp), %rsi                 # 8-byte Reload
	movq	%rsi, ($Pnl)(%rip)
	movq	%rdi, ($Penv)(%rip)
	movq	%rbx, SymTab+440(%rip)
	testb	$15, %cl
	leaq	SymTab+280(%rip), %rcx
	cmoveq	%rcx, %r14
	testb	$15, %al
	cmoveq	%rax, %r14
	movq	8(%rdx), %rax
	movq	%rax, env(%rip)
.LBB342_69:                             # %"$9"
	movq	%r14, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _arrow;
	.scl	2;
	.type	32;
	.endef
	.globl	_arrow                          # -- Begin function _arrow
	.p2align	4, 0x90
_arrow:                                 # @_arrow
.seh_proc _arrow
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	($Pnl)(%rip), %rcx
	movq	(%rcx), %rcx
	movq	8(%rax), %rdx
	movq	(%rdx), %rdx
	testb	$2, %dl
	je	.LBB343_4
# %bb.1:                                # %"$1"
	cmpq	$32, %rdx
	jb	.LBB343_4
# %bb.2:                                # %"$5.preheader"
	shrq	$4, %rdx
	incq	%rdx
	.p2align	4, 0x90
.LBB343_3:                              # %"$5"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rcx
	decq	%rdx
	cmpq	$2, %rdx
	jg	.LBB343_3
.LBB343_4:                              # %"$3"
	movq	(%rcx), %rcx
	movq	(%rax), %rdx
	callq	lup
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB343_13
# %bb.5:                                # %"$3"
	movl	%eax, %edx
	andl	$14, %edx
	cmpl	$8, %edx
	jne	.LBB343_13
# %bb.6:                                # %"$3.i.i"
	movq	-8(%rax), %rdx
	testb	$8, %dl
	jne	.LBB343_13
	.p2align	4, 0x90
# %bb.8:                                # %"$8.i.i"
	testb	$6, %dl
	jne	.LBB343_9
.LBB343_7:                              # %"$8.i.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rdx), %rdx
	testb	$6, %dl
	je	.LBB343_7
.LBB343_9:                              # %"$9.i.i"
	testb	$2, %dl
	jne	.LBB343_10
# %bb.11:                               # %"$10.i.i"
	movb	-4(%rdx), %dl
	jmp	.LBB343_12
.LBB343_10:                             # %"$11.i.i"
	shrq	$4, %rdx
.LBB343_12:                             # %"$2.i"
	cmpb	$64, %dl
	cmoveq	%rcx, %rax
.LBB343_13:                             # %lookup.exit
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _unify;
	.scl	2;
	.type	32;
	.endef
	.globl	_unify                          # -- Begin function _unify
	.p2align	4, 0x90
_unify:                                 # @_unify
.seh_proc _unify
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	testb	$6, %sil
	jne	.LBB344_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB344_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB344_4
.LBB344_2:                              # %"$6"
	movq	(%rsi), %rsi
.LBB344_4:                              # %"$2"
	movq	($Pnl)(%rip), %rax
	movq	(%rax), %rcx
	movq	(%rcx), %r14
	testb	$2, %sil
	jne	.LBB344_10
# %bb.5:                                # %"$7"
	movq	env(%rip), %rdx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rsi, (%rdi)
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	%rdi, env(%rip)
	movq	8(%rcx), %rax
	movq	(%rax), %rcx
	subq	$32, %rsp
	movq	%rsi, %rdx
	movq	%r14, %r8
	movq	%rsi, %r9
	callq	unify
	addq	$32, %rsp
	testb	$1, %al
	je	.LBB344_6
# %bb.7:                                # %"$10"
	movq	($Penv)(%rip), %rax
	movq	(%rax), %rsi
	jmp	.LBB344_8
.LBB344_10:                             # %"$8"
	movq	($Penv)(%rip), %rax
	movq	(%rax), %rdi
	cmpq	$32, %rsi
	movq	%r14, %rbx
	jb	.LBB344_14
# %bb.11:                               # %"$14.preheader"
	movq	%rsi, %rax
	shrq	$4, %rax
	incq	%rax
	.p2align	4, 0x90
.LBB344_12:                             # %"$14"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rcx
	decq	%rax
	cmpq	$2, %rax
	jg	.LBB344_12
# %bb.13:                               # %"$15.loopexit"
	movq	(%rcx), %rbx
	jmp	.LBB344_14
	.p2align	4, 0x90
.LBB344_17:                             # %"$20"
                                        #   in Loop: Header=BB344_14 Depth=1
	movq	8(%rdi), %rdi
.LBB344_14:                             # %"$15"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rax
	testb	$15, %al
	jne	.LBB344_9
# %bb.15:                               # %"$17"
                                        #   in Loop: Header=BB344_14 Depth=1
	movq	(%rax), %rax
	cmpq	%rbx, (%rax)
	jne	.LBB344_17
# %bb.16:                               # %"$19"
                                        #   in Loop: Header=BB344_14 Depth=1
	movq	8(%rax), %rdx
	subq	$32, %rsp
	movq	%rbx, %rcx
	movq	%r14, %r8
	movq	%rdx, %r9
	callq	unify
	addq	$32, %rsp
	jmp	.LBB344_17
.LBB344_6:
	leaq	SymTab+8(%rip), %rsi
.LBB344_8:                              # %"$12"
	movq	8(%rdi), %rax
	movq	%rax, env(%rip)
.LBB344_9:                              # %"$9"
	movq	%rsi, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _group;
	.scl	2;
	.type	32;
	.endef
	.globl	_group                          # -- Begin function _group
	.p2align	4, 0x90
_group:                                 # @_group
.seh_proc _group
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rdi
	testb	$6, %dil
	jne	.LBB345_4
# %bb.1:                                # %"$3"
	testb	$8, %dil
	jne	.LBB345_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdi
	jmp	.LBB345_4
.LBB345_2:                              # %"$6"
	movq	(%rdi), %rdi
.LBB345_4:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdx
	movq	%rdi, (%rdx)
	movq	%rdx, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rdx, env(%rip)
	testb	$15, %dil
	je	.LBB345_6
# %bb.5:
	leaq	SymTab+8(%rip), %r12
	jmp	.LBB345_17
.LBB345_6:                              # %"$8"
	movq	%rdx, (%rbp)                    # 8-byte Spill
	movq	(%rdi), %rax
	movq	8(%rax), %rcx
	subq	$32, %rsp
	leaq	SymTab+8(%rip), %rsi
	movq	%rsi, %rdx
	callq	cons
	addq	$32, %rsp
	movq	(%rdi), %rcx
	movq	(%rcx), %rbx
	subq	$32, %rsp
	movq	%rax, %rcx
	movq	%rax, %rdx
	callq	cons
	movq	%rbx, %rcx
	movq	%rax, %rdx
	callq	cons
	movq	%rax, %rcx
	movq	%rsi, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %r12
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%r12, (%rax)
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%rcx, (%rdx)
	movq	%rax, env(%rip)
	movq	8(%rdi), %rsi
	testb	$15, %sil
	je	.LBB345_7
.LBB345_14:                             # %"$19.preheader"
	movq	%r12, %rax
	.p2align	4, 0x90
.LBB345_15:                             # %"$19"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rax), %rcx
	movq	8(%rcx), %rdx
	movq	8(%rdx), %rdx
	movq	%rdx, 8(%rcx)
	movq	8(%rax), %rax
	testb	$15, %al
	je	.LBB345_15
# %bb.16:
	movq	(%rbp), %rdx                    # 8-byte Reload
.LBB345_17:                             # %"$9"
	movq	8(%rdx), %rax
	movq	%rax, env(%rip)
	movq	%r12, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB345_7:                              # %"$11.preheader"
	leaq	SymTab+8(%rip), %r14
	jmp	.LBB345_8
	.p2align	4, 0x90
.LBB345_10:                             # %"$16"
                                        #   in Loop: Header=BB345_8 Depth=1
	movq	8(%r15), %rax
	movq	(%rax), %rcx
	movq	%r13, 8(%rcx)
	movq	%r13, (%rax)
.LBB345_13:                             # %"$15"
                                        #   in Loop: Header=BB345_8 Depth=1
	movq	8(%rsi), %rsi
	testb	$15, %sil
	jne	.LBB345_14
.LBB345_8:                              # %"$11"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB345_9 Depth 2
	movq	(%rsi), %rax
	movq	(%rax), %rbx
	movq	8(%rax), %rcx
	subq	$32, %rsp
	movq	%r14, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %r13
	movq	%r12, %rax
	.p2align	4, 0x90
.LBB345_9:                              # %"$13"
                                        #   Parent Loop BB345_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rax, %rdi
	movq	(%rax), %r15
	movq	(%r15), %rdx
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	equal
	addq	$32, %rsp
	testb	$1, %al
	jne	.LBB345_10
# %bb.11:                               # %"$14"
                                        #   in Loop: Header=BB345_9 Depth=2
	movq	8(%rdi), %rax
	testb	$15, %al
	je	.LBB345_9
# %bb.12:                               # %"$18"
                                        #   in Loop: Header=BB345_8 Depth=1
	subq	$32, %rsp
	movq	%r13, %rcx
	movq	%r13, %rdx
	callq	cons
	movq	%rbx, %rcx
	movq	%rax, %rdx
	callq	cons
	movq	%rax, %rcx
	movq	%r14, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, 8(%rdi)
	jmp	.LBB345_13
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _sort;
	.scl	2;
	.type	32;
	.endef
	.globl	_sort                           # -- Begin function _sort
	.p2align	4, 0x90
_sort:                                  # @_sort
.seh_proc _sort
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$72, %rsp
	.seh_stackalloc 72
	leaq	64(%rsp), %rbp
	.seh_setframe %rbp, 64
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rbx
	movq	8(%rax), %r14
	testb	$6, %bl
	je	.LBB346_1
# %bb.3:                                # %"$2"
	testb	$15, %bl
	je	.LBB346_6
.LBB346_4:                              # %"$7"
	movq	%rbx, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB346_1:                              # %"$3"
	testb	$8, %bl
	jne	.LBB346_5
# %bb.2:                                # %"$5"
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rbx
	testb	$15, %bl
	jne	.LBB346_4
	jmp	.LBB346_6
.LBB346_5:                              # %"$6"
	movq	(%rbx), %rbx
	testb	$15, %bl
	jne	.LBB346_4
.LBB346_6:                              # %"$8"
	testb	$15, %r14b
	je	.LBB346_39
# %bb.7:                                # %"$12.preheader"
	leaq	SymTab+8(%rip), %r12
	jmp	.LBB346_9
	.p2align	4, 0x90
.LBB346_8:                              # %"$22"
                                        #   in Loop: Header=BB346_9 Depth=1
	testb	$15, %r12b
	movq	-8(%rbp), %rbx                  # 8-byte Reload
	jne	.LBB346_4
.LBB346_9:                              # %"$12"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB346_16 Depth 2
	movq	%r12, %rdi
	andq	$15, %rdi
	je	.LBB346_11
.LBB346_10:                             # %"$16"
                                        #   in Loop: Header=BB346_9 Depth=1
	movq	8(%rbx), %r15
	movq	%rbx, -8(%rbp)                  # 8-byte Spill
	movq	%rbx, %rax
	movq	%r12, %rsi
	jmp	.LBB346_13
	.p2align	4, 0x90
.LBB346_11:                             # %"$14"
                                        #   in Loop: Header=BB346_9 Depth=1
	movq	(%rbx), %rcx
	movq	(%r12), %rdx
	subq	$32, %rsp
	callq	compare
	addq	$32, %rsp
	testq	%rax, %rax
	js	.LBB346_10
# %bb.12:                               # %"$15"
                                        #   in Loop: Header=BB346_9 Depth=1
	movq	8(%r12), %rsi
	movl	%esi, %edi
	andl	$15, %edi
	movq	%r12, %rax
	movq	%rbx, %r15
	movq	%r12, -8(%rbp)                  # 8-byte Spill
.LBB346_13:                             # %"$17"
                                        #   in Loop: Header=BB346_9 Depth=1
	movq	(%rax), %rdx
	leaq	SymTab+8(%rip), %rcx
	movq	%rcx, 8(%rax)
	testq	%rdi, %rdi
	sete	%cl
	testb	$15, %r15b
	sete	%r8b
	je	.LBB346_15
# %bb.14:                               # %"$17"
                                        #   in Loop: Header=BB346_9 Depth=1
	testq	%rdi, %rdi
	leaq	SymTab+8(%rip), %r12
	jne	.LBB346_8
.LBB346_15:                             # %"$21.preheader"
                                        #   in Loop: Header=BB346_9 Depth=1
	movq	-8(%rbp), %rax                  # 8-byte Reload
	xorl	%ebx, %ebx
	movq	%rbx, (%rbp)                    # 8-byte Spill
	leaq	SymTab+8(%rip), %rdi
	.p2align	4, 0x90
.LBB346_16:                             # %"$21"
                                        #   Parent Loop BB346_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rax, %r12
	addq	$8, %r12
	testb	$1, %cl
	je	.LBB346_22
# %bb.17:                               # %"$24"
                                        #   in Loop: Header=BB346_16 Depth=2
	testb	$1, %r8b
	je	.LBB346_23
# %bb.18:                               # %"$28"
                                        #   in Loop: Header=BB346_16 Depth=2
	movq	(%r15), %rcx
	subq	$32, %rsp
	movq	%rsi, %rbx
	movq	%rdx, %rsi
	callq	compare
	addq	$32, %rsp
	movq	%rax, %r14
	movq	%rbx, %r13
	movq	(%rbx), %rcx
	subq	$32, %rsp
	movq	%rsi, %rdx
	callq	compare
	addq	$32, %rsp
	testq	%r14, %r14
	js	.LBB346_24
# %bb.19:                               # %"$32"
                                        #   in Loop: Header=BB346_16 Depth=2
	testq	%rax, %rax
	js	.LBB346_26
# %bb.20:                               # %"$40"
                                        #   in Loop: Header=BB346_16 Depth=2
	movq	(%r15), %rcx
	movq	%r13, %rsi
	movq	(%r13), %rdx
	subq	$32, %rsp
	callq	compare
	addq	$32, %rsp
	testq	%rax, %rax
	js	.LBB346_27
# %bb.21:                               # %"$42"
                                        #   in Loop: Header=BB346_16 Depth=2
	movq	8(%rsi), %r13
	movq	%r15, %r14
	movq	%rsi, %rax
	jmp	.LBB346_29
	.p2align	4, 0x90
.LBB346_22:                             # %"$25"
                                        #   in Loop: Header=BB346_16 Depth=2
	movq	(%r15), %rcx
	movq	8(%r15), %r14
	subq	$32, %rsp
	movq	%rsi, %r13
	callq	compare
	movq	%rdi, %rdx
	addq	$32, %rsp
	testq	%rax, %rax
	movq	%r12, %rcx
	movq	(%rbp), %rax                    # 8-byte Reload
	cmovsq	%rax, %rcx
	cmovsq	%r12, %rax
	movq	%rax, (%rbp)                    # 8-byte Spill
	movq	%r15, %rax
	jmp	.LBB346_31
	.p2align	4, 0x90
.LBB346_23:                             # %"$29"
                                        #   in Loop: Header=BB346_16 Depth=2
	movq	(%rsi), %rcx
	movq	8(%rsi), %r13
	subq	$32, %rsp
	callq	compare
	addq	$32, %rsp
	testq	%rax, %rax
	movq	%r12, %rcx
	movq	(%rbp), %rax                    # 8-byte Reload
	cmovsq	%rax, %rcx
	cmovsq	%r12, %rax
	movq	%rax, (%rbp)                    # 8-byte Spill
	movq	%r15, %r14
	movq	%rsi, %rax
	jmp	.LBB346_30
.LBB346_24:                             # %"$33"
                                        #   in Loop: Header=BB346_16 Depth=2
	testq	%rax, %rax
	js	.LBB346_35
# %bb.25:                               # %"$34"
                                        #   in Loop: Header=BB346_16 Depth=2
	movq	%r13, %rax
	movq	8(%r13), %r13
	movq	%r15, %r14
	jmp	.LBB346_29
.LBB346_26:                             # %"$41"
                                        #   in Loop: Header=BB346_16 Depth=2
	movq	8(%r15), %r14
	jmp	.LBB346_28
.LBB346_27:                             # %"$43"
                                        #   in Loop: Header=BB346_16 Depth=2
	movq	8(%r15), %r14
	movq	%rsi, %r13
.LBB346_28:                             # %"$23"
                                        #   in Loop: Header=BB346_16 Depth=2
	movq	%r15, %rax
.LBB346_29:                             # %"$23"
                                        #   in Loop: Header=BB346_16 Depth=2
	movq	%r12, %rcx
.LBB346_30:                             # %"$23"
                                        #   in Loop: Header=BB346_16 Depth=2
	movq	%rdi, %rdx
.LBB346_31:                             # %"$23"
                                        #   in Loop: Header=BB346_16 Depth=2
	testq	%rcx, %rcx
	movq	%rax, %r12
	je	.LBB346_33
# %bb.32:                               # %"$44"
                                        #   in Loop: Header=BB346_16 Depth=2
	movq	%rax, (%rcx)
	movq	%rdx, %r12
.LBB346_33:                             # %"$46"
                                        #   in Loop: Header=BB346_16 Depth=2
	leaq	SymTab+8(%rip), %rcx
	movq	%rcx, 8(%rax)
	movq	(%rax), %rdx
	movq	%r13, %rbx
	andq	$15, %rbx
	sete	%cl
	testb	$15, %r14b
	sete	%r8b
	movq	%r13, %rsi
	movq	%r14, %r15
	movq	%r12, %rdi
	je	.LBB346_16
# %bb.34:                               # %"$46"
                                        #   in Loop: Header=BB346_16 Depth=2
	testq	%rbx, %rbx
	movq	%r13, %rsi
	movq	%r14, %r15
	movq	%r12, %rdi
	je	.LBB346_16
	jmp	.LBB346_8
.LBB346_35:                             # %"$35"
                                        #   in Loop: Header=BB346_16 Depth=2
	movq	(%r15), %rcx
	movq	%r13, %rsi
	movq	(%r13), %rdx
	subq	$32, %rsp
	callq	compare
	addq	$32, %rsp
	testq	%rax, %rax
	js	.LBB346_37
# %bb.36:                               # %"$38"
                                        #   in Loop: Header=BB346_16 Depth=2
	movq	8(%rsi), %r13
	movq	%r15, %r14
	movq	%rsi, %rax
	jmp	.LBB346_38
.LBB346_37:                             # %"$37"
                                        #   in Loop: Header=BB346_16 Depth=2
	movq	8(%r15), %r14
	movq	%rsi, %r13
	movq	%r15, %rax
.LBB346_38:                             # %"$23"
                                        #   in Loop: Header=BB346_16 Depth=2
	movq	(%rbp), %rcx                    # 8-byte Reload
	movq	%r12, (%rbp)                    # 8-byte Spill
	jmp	.LBB346_30
.LBB346_39:                             # %"$10"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rbx, (%rsi)
	movq	env(%rip), %rax
	movq	%rax, 8(%rsi)
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rcx
	leaq	SymTab+8(%rip), %rdx
	movq	%rdx, (%rcx)
	movq	%rsi, 8(%rcx)
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	$10, (%rdi)
	movq	%rcx, -48(%rbp)                 # 8-byte Spill
	movq	%rcx, 8(%rdi)
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	$10, (%rax)
	movq	%rdi, 8(%rax)
	movq	%rax, -40(%rbp)                 # 8-byte Spill
	movq	%rax, env(%rip)
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rcx
	movq	%rcx, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	$2, 16(%rcx)
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdx
	movq	%rdx, %rax
	orq	$8, %rax
	movq	%rcx, -8(%rbp)                  # 8-byte Spill
	movq	%rcx, (%rax)
	movq	%rdx, -24(%rbp)                 # 8-byte Spill
	movq	$2, 16(%rdx)
	movq	(%r14), %rcx
	testb	$6, %cl
	jne	.LBB346_43
# %bb.40:                               # %"$51"
	testb	$8, %cl
	jne	.LBB346_42
# %bb.41:                               # %"$53"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB346_43
.LBB346_42:                             # %"$54"
	movq	(%rcx), %rcx
.LBB346_43:                             # %"$50"
	movq	-40(%rbp), %r14                 # 8-byte Reload
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rbx, %rax
	orq	$8, %rax
	movq	-24(%rbp), %rdx                 # 8-byte Reload
	movq	%rdx, (%rax)
	movq	$2, 16(%rbx)
	leaq	24(%rbx), %r8
	movq	%rcx, 24(%rbx)
	movq	-8(%rbp), %rax                  # 8-byte Reload
	movq	%rax, %rcx
	addq	$24, %rcx
	movq	%rcx, (%rax)
	movq	%rdx, %rcx
	addq	$24, %rcx
	movq	%rcx, (%rdx)
	movq	env(%rip), %rcx
	movq	%rcx, 32(%rbx)
	movq	%r8, env(%rip)
	movq	%rbx, -32(%rbp)                 # 8-byte Spill
	movq	%r8, (%rbx)
	movq	-48(%rbp), %rax                 # 8-byte Reload
	movq	(%rax), %rcx
	movq	%rsi, -56(%rbp)                 # 8-byte Spill
	movq	%rdi, -16(%rbp)                 # 8-byte Spill
	jmp	.LBB346_45
	.p2align	4, 0x90
.LBB346_44:                             # %"$68"
                                        #   in Loop: Header=BB346_45 Depth=1
	movq	-48(%rbp), %rax                 # 8-byte Reload
	movq	(%rax), %rcx
	testb	$15, %cl
	movq	-56(%rbp), %rsi                 # 8-byte Reload
	movq	-16(%rbp), %rdi                 # 8-byte Reload
	jne	.LBB346_74
.LBB346_45:                             # %"$55"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB346_53 Depth 2
	movq	(%rsi), %rax
	movq	%rax, (%rdi)
	movq	%rcx, (%r14)
	testb	$15, %cl
	jne	.LBB346_49
# %bb.46:                               # %"$57"
                                        #   in Loop: Header=BB346_45 Depth=1
	movq	(%rax), %rax
	movq	(%rcx), %rcx
	movq	-24(%rbp), %rdx                 # 8-byte Reload
	movq	%rax, 24(%rdx)
	movq	-8(%rbp), %rax                  # 8-byte Reload
	movq	%rcx, 24(%rax)
	subq	$32, %rsp
	movq	-32(%rbp), %rcx                 # 8-byte Reload
	callq	evList
	addq	$32, %rsp
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	jne	.LBB346_48
# %bb.47:                               # %"$61"
                                        #   in Loop: Header=BB346_45 Depth=1
	movq	(%r14), %rax
	movq	8(%rax), %rcx
	movq	%rcx, (%r14)
	jmp	.LBB346_50
.LBB346_48:                             # %"$57.$62_crit_edge"
                                        #   in Loop: Header=BB346_45 Depth=1
	movq	(%rdi), %rax
.LBB346_49:                             # %"$62"
                                        #   in Loop: Header=BB346_45 Depth=1
	movq	8(%rax), %rcx
	movq	%rcx, (%rdi)
.LBB346_50:                             # %"$63"
                                        #   in Loop: Header=BB346_45 Depth=1
	movq	(%rax), %r15
	movq	%rax, (%rsi)
	movq	-48(%rbp), %rcx                 # 8-byte Reload
	leaq	SymTab+8(%rip), %rdx
	movq	%rdx, (%rcx)
	movq	%rdx, 8(%rax)
	movq	(%rdi), %rdi
	movq	(%r14), %r13
	movq	%r13, %rbx
	andq	$15, %rbx
	sete	%cl
	testb	$15, %dil
	sete	%dl
	je	.LBB346_52
# %bb.51:                               # %"$63"
                                        #   in Loop: Header=BB346_45 Depth=1
	testq	%rbx, %rbx
	jne	.LBB346_44
.LBB346_52:                             # %"$67.preheader"
                                        #   in Loop: Header=BB346_45 Depth=1
	xorl	%ebx, %ebx
	movq	%rbx, (%rbp)                    # 8-byte Spill
	.p2align	4, 0x90
.LBB346_53:                             # %"$67"
                                        #   Parent Loop BB346_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rax, %r12
	addq	$8, %r12
	testb	$1, %cl
	je	.LBB346_59
# %bb.54:                               # %"$70"
                                        #   in Loop: Header=BB346_53 Depth=2
	testb	$1, %dl
	je	.LBB346_60
# %bb.55:                               # %"$77"
                                        #   in Loop: Header=BB346_53 Depth=2
	movq	(%rdi), %rax
	movq	-24(%rbp), %rsi                 # 8-byte Reload
	movq	%rax, 24(%rsi)
	movq	-8(%rbp), %rbx                  # 8-byte Reload
	movq	%r15, 24(%rbx)
	subq	$32, %rsp
	movq	-32(%rbp), %rdi                 # 8-byte Reload
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r13
	movq	(%r14), %rax
	movq	(%rax), %rax
	movq	%rax, 24(%rsi)
	movq	%r15, 24(%rbx)
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	leaq	SymTab+8(%rip), %rbx
	cmpq	%rbx, %r13
	jne	.LBB346_61
# %bb.56:                               # %"$87"
                                        #   in Loop: Header=BB346_53 Depth=2
	cmpq	%rbx, %rax
	jne	.LBB346_64
# %bb.57:                               # %"$104"
                                        #   in Loop: Header=BB346_53 Depth=2
	movq	-16(%rbp), %rsi                 # 8-byte Reload
	movq	(%rsi), %rax
	movq	(%rax), %rax
	movq	-40(%rbp), %rdi                 # 8-byte Reload
	movq	(%rdi), %rcx
	movq	(%rcx), %rcx
	movq	-24(%rbp), %rdx                 # 8-byte Reload
	movq	%rax, 24(%rdx)
	movq	-8(%rbp), %rax                  # 8-byte Reload
	movq	%rcx, 24(%rax)
	subq	$32, %rsp
	movq	-32(%rbp), %rcx                 # 8-byte Reload
	callq	evList
	addq	$32, %rsp
	cmpq	%rbx, %rax
	jne	.LBB346_65
# %bb.58:                               # %"$109"
                                        #   in Loop: Header=BB346_53 Depth=2
	movq	(%rdi), %rax
	movq	8(%rax), %rcx
	movq	%rcx, (%rdi)
	jmp	.LBB346_66
	.p2align	4, 0x90
.LBB346_59:                             # %"$71"
                                        #   in Loop: Header=BB346_53 Depth=2
	movq	8(%rdi), %rax
	movq	-16(%rbp), %rsi                 # 8-byte Reload
	movq	%rax, (%rsi)
	movq	(%rdi), %rax
	movq	-24(%rbp), %rcx                 # 8-byte Reload
	movq	%rax, 24(%rcx)
	movq	-8(%rbp), %rax                  # 8-byte Reload
	movq	%r15, 24(%rax)
	subq	$32, %rsp
	movq	-32(%rbp), %rcx                 # 8-byte Reload
	callq	evList
	addq	$32, %rsp
	leaq	SymTab+8(%rip), %rbx
	cmpq	%rbx, %rax
	movq	(%rbp), %rax                    # 8-byte Reload
	movq	%rax, %rcx
	cmoveq	%r12, %rcx
	cmovneq	%r12, %rax
	movq	%rax, (%rbp)                    # 8-byte Spill
	movq	%rdi, %rax
	testq	%rcx, %rcx
	jne	.LBB346_68
.LBB346_67:                             # %"$112"
                                        #   in Loop: Header=BB346_53 Depth=2
	movq	-48(%rbp), %rcx                 # 8-byte Reload
.LBB346_68:                             # %"$113"
                                        #   in Loop: Header=BB346_53 Depth=2
	movq	%rax, (%rcx)
	movq	%rbx, 8(%rax)
	movq	(%rax), %r15
	movq	(%rsi), %rdi
	movq	-40(%rbp), %r14                 # 8-byte Reload
	movq	(%r14), %r13
	movq	%r13, %rbx
	andq	$15, %rbx
	sete	%cl
	testb	$15, %dil
	sete	%dl
	je	.LBB346_53
# %bb.69:                               # %"$113"
                                        #   in Loop: Header=BB346_53 Depth=2
	testq	%rbx, %rbx
	je	.LBB346_53
	jmp	.LBB346_44
	.p2align	4, 0x90
.LBB346_60:                             # %"$78"
                                        #   in Loop: Header=BB346_53 Depth=2
	movq	8(%r13), %rax
	movq	%rax, (%r14)
	movq	(%r13), %rax
	movq	-24(%rbp), %rcx                 # 8-byte Reload
	movq	%rax, 24(%rcx)
	movq	-8(%rbp), %rax                  # 8-byte Reload
	movq	%r15, 24(%rax)
	subq	$32, %rsp
	movq	-32(%rbp), %rcx                 # 8-byte Reload
	callq	evList
	addq	$32, %rsp
	leaq	SymTab+8(%rip), %rbx
	cmpq	%rbx, %rax
	movq	(%rbp), %rax                    # 8-byte Reload
	movq	%rax, %rcx
	cmoveq	%r12, %rcx
	cmovneq	%r12, %rax
	movq	%rax, (%rbp)                    # 8-byte Spill
	movq	%r13, %rax
.LBB346_63:                             # %"$92"
                                        #   in Loop: Header=BB346_53 Depth=2
	movq	-16(%rbp), %rsi                 # 8-byte Reload
	testq	%rcx, %rcx
	jne	.LBB346_68
	jmp	.LBB346_67
.LBB346_61:                             # %"$88"
                                        #   in Loop: Header=BB346_53 Depth=2
	cmpq	%rbx, %rax
	jne	.LBB346_70
# %bb.62:                               # %"$92"
                                        #   in Loop: Header=BB346_53 Depth=2
	movq	(%r14), %rax
	movq	8(%rax), %rcx
	movq	%rcx, (%r14)
	movq	%r12, %rcx
	jmp	.LBB346_63
.LBB346_64:                             # %"$105"
                                        #   in Loop: Header=BB346_53 Depth=2
	movq	-16(%rbp), %rsi                 # 8-byte Reload
.LBB346_65:                             # %"$110"
                                        #   in Loop: Header=BB346_53 Depth=2
	movq	(%rsi), %rax
	movq	8(%rax), %rcx
	movq	%rcx, (%rsi)
.LBB346_66:                             # %"$69"
                                        #   in Loop: Header=BB346_53 Depth=2
	movq	%r12, %rcx
	testq	%rcx, %rcx
	jne	.LBB346_68
	jmp	.LBB346_67
.LBB346_70:                             # %"$93"
                                        #   in Loop: Header=BB346_53 Depth=2
	movq	-16(%rbp), %rsi                 # 8-byte Reload
	movq	(%rsi), %rax
	movq	(%rax), %rax
	movq	(%r14), %rcx
	movq	(%rcx), %rcx
	movq	-24(%rbp), %rdx                 # 8-byte Reload
	movq	%rax, 24(%rdx)
	movq	-8(%rbp), %rax                  # 8-byte Reload
	movq	%rcx, 24(%rax)
	subq	$32, %rsp
	movq	-32(%rbp), %rcx                 # 8-byte Reload
	callq	evList
	addq	$32, %rsp
	cmpq	%rbx, %rax
	jne	.LBB346_72
# %bb.71:                               # %"$99"
                                        #   in Loop: Header=BB346_53 Depth=2
	movq	(%r14), %rax
	movq	8(%rax), %rcx
	movq	%rcx, (%r14)
	jmp	.LBB346_73
.LBB346_72:                             # %"$98"
                                        #   in Loop: Header=BB346_53 Depth=2
	movq	(%rsi), %rax
	movq	8(%rax), %rcx
	movq	%rcx, (%rsi)
.LBB346_73:                             # %"$69"
                                        #   in Loop: Header=BB346_53 Depth=2
	movq	(%rbp), %rcx                    # 8-byte Reload
	movq	%r12, (%rbp)                    # 8-byte Spill
	testq	%rcx, %rcx
	jne	.LBB346_68
	jmp	.LBB346_67
.LBB346_74:                             # %"$116"
	movq	(%rsi), %rbx
	movq	8(%rsi), %rax
	movq	%rax, env(%rip)
	jmp	.LBB346_4
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _tty;
	.scl	2;
	.type	32;
	.endef
	.globl	_tty                            # -- Begin function _tty
	.p2align	4, 0x90
_tty:                                   # @_tty
.seh_proc _tty
# %bb.0:                                # %"$1"
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rcx, %rsi
	movq	($OutFile)(%rip), %r14
	movq	($Put)(%rip), %rbx
	movq	($OutFiles)(%rip), %rax
	movq	16(%rax), %rax
	movq	%rax, ($OutFile)(%rip)
	leaq	_putStdout(%rip), %rax
	movq	%rax, ($Put)(%rip)
	callq	rlHide
	movq	8(%rsi), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rdi
	jmp	.LBB347_1
	.p2align	4, 0x90
.LBB347_7:                              # %"$11"
                                        #   in Loop: Header=BB347_1 Depth=1
	movq	(%rdi), %rsi
	movq	8(%rdi), %rdi
.LBB347_1:                              # %"$1"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %dil
	jne	.LBB347_2
# %bb.5:                                # %"$3"
                                        #   in Loop: Header=BB347_1 Depth=1
	testb	$15, %sil
	jne	.LBB347_7
# %bb.6:                                # %"$12"
                                        #   in Loop: Header=BB347_1 Depth=1
	movq	%rsi, %rcx
	callq	evList
	jmp	.LBB347_7
.LBB347_2:                              # %"$5"
	testb	$6, %sil
	jne	.LBB347_9
# %bb.3:                                # %"$7"
	testb	$8, %sil
	jne	.LBB347_4
# %bb.8:                                # %"$9"
	movq	%rsi, %rcx
	callq	evList
	movq	%rax, %rsi
	jmp	.LBB347_9
.LBB347_4:                              # %"$10"
	movq	(%rsi), %rsi
.LBB347_9:                              # %"$4"
	movq	($OutFile)(%rip), %rdx
	testq	%rdx, %rdx
	je	.LBB347_12
# %bb.10:                               # %"$3.i"
	movl	4(%rdx), %r8d
	testl	%r8d, %r8d
	je	.LBB347_12
# %bb.11:                               # %"$6.i"
	movl	$0, 4(%rdx)
	movl	(%rdx), %ecx
	addq	$8, %rdx
	callq	wrBytes
.LBB347_12:                             # %flush.exit
	callq	rlShow
	movq	%rbx, ($Put)(%rip)
	movq	%r14, ($OutFile)(%rip)
	movq	%rsi, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _raw;
	.scl	2;
	.type	32;
	.endef
	.globl	_raw                            # -- Begin function _raw
	.p2align	4, 0x90
_raw:                                   # @_raw
.seh_proc _raw
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	testb	$15, %al
	je	.LBB348_2
# %bb.1:                                # %"$4"
	cmpq	$0, Termio(%rip)
	leaq	SymTab+8(%rip), %rax
	leaq	SymTab+280(%rip), %rdi
	cmoveq	%rax, %rdi
	jmp	.LBB348_9
.LBB348_2:                              # %"$3"
	movq	(%rax), %rsi
	testb	$6, %sil
	jne	.LBB348_6
# %bb.3:                                # %"$9"
	testb	$8, %sil
	jne	.LBB348_4
# %bb.5:                                # %"$11"
	movq	%rsi, %rcx
	callq	evList
	movq	%rax, %rsi
	jmp	.LBB348_6
.LBB348_4:                              # %"$12"
	movq	(%rsi), %rsi
.LBB348_6:                              # %"$8"
	leaq	SymTab+8(%rip), %rdi
	cmpq	%rdi, %rsi
	jne	.LBB348_8
# %bb.7:                                # %"$14"
	callq	setCooked
	jmp	.LBB348_9
.LBB348_8:                              # %"$13"
	callq	setRaw
	movq	%rsi, %rdi
.LBB348_9:                              # %"$2"
	movq	%rdi, %rax
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _alarm;
	.scl	2;
	.type	32;
	.endef
	.globl	_alarm                          # -- Begin function _alarm
	.p2align	4, 0x90
_alarm:                                 # @_alarm
.seh_proc _alarm
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rdi
	movq	(%rdi), %rax
	testb	$6, %al
	jne	.LBB349_4
# %bb.1:                                # %"$3.i"
	testb	$8, %al
	jne	.LBB349_2
# %bb.3:                                # %"$5.i"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB349_4
.LBB349_2:                              # %"$6.i"
	movq	(%rax), %rax
.LBB349_4:                              # %"$2.i"
	testb	$2, %al
	je	.LBB349_6
# %bb.5:                                # %evCnt.exit
	movq	%rax, %rdx
	shrq	$4, %rdx
	movl	%edx, %ecx
	negl	%ecx
	testb	$8, %al
	cmovel	%edx, %ecx
	callq	alarm
	cltq
	shlq	$4, %rax
	orq	$2, %rax
	movq	8(%rdi), %rcx
	movq	%rcx, gcData+24(%rip)
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
.LBB349_6:                              # %"$2.i.i"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	cntErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _sigio;
	.scl	2;
	.type	32;
	.endef
	.globl	_sigio                          # -- Begin function _sigio
	.p2align	4, 0x90
_sigio:                                 # @_sigio
.seh_proc _sigio
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rdi
	movq	(%rdi), %rax
	testb	$6, %al
	jne	.LBB350_4
# %bb.1:                                # %"$3.i"
	testb	$8, %al
	jne	.LBB350_2
# %bb.3:                                # %"$5.i"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB350_4
.LBB350_2:                              # %"$6.i"
	movq	(%rax), %rax
.LBB350_4:                              # %"$2.i"
	testb	$2, %al
	je	.LBB350_6
# %bb.5:                                # %evCnt.exit
	movq	%rax, %rcx
	shrq	$4, %rcx
	movq	%rcx, %rsi
	negq	%rsi
	testb	$8, %al
	cmoveq	%rcx, %rsi
	movq	8(%rdi), %rax
	movq	%rax, gcData+32(%rip)
	movq	SymTab+200(%rip), %rdx
	shrq	$4, %rdx
	movl	%esi, %ecx
                                        # kill: def $edx killed $edx killed $rdx
	callq	fcntlSetOwn
	shlq	$4, %rsi
	orq	$2, %rsi
	movq	%rsi, %rax
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
.LBB350_6:                              # %"$2.i.i"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	cntErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _kids;
	.scl	2;
	.type	32;
	.endef
	.globl	_kids                           # -- Begin function _kids
	.p2align	4, 0x90
_kids:                                  # @_kids
.seh_proc _kids
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movl	($Children)(%rip), %eax
	leal	(%rax,%rax,8), %ecx
	leal	(%rcx,%rcx,2), %ecx
	addl	%eax, %ecx
	movslq	%ecx, %rsi
	testq	%rsi, %rsi
	je	.LBB351_1
# %bb.2:                                # %"$3.preheader"
	movq	($Child)(%rip), %rdi
	addq	$16, %rdi
	leaq	SymTab+8(%rip), %rax
	jmp	.LBB351_3
	.p2align	4, 0x90
.LBB351_5:                              # %"$6"
                                        #   in Loop: Header=BB351_3 Depth=1
	addq	$28, %rdi
	addq	$-28, %rsi
	je	.LBB351_6
.LBB351_3:                              # %"$3"
                                        # =>This Inner Loop Header: Depth=1
	movslq	(%rdi), %rcx
	testq	%rcx, %rcx
	je	.LBB351_5
# %bb.4:                                # %"$5"
                                        #   in Loop: Header=BB351_3 Depth=1
	shlq	$4, %rcx
	orq	$2, %rcx
	movq	%rax, %rdx
	callq	cons
	jmp	.LBB351_5
.LBB351_1:
	leaq	SymTab+8(%rip), %rax
.LBB351_6:                              # %"$4"
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _protect;
	.scl	2;
	.type	32;
	.endef
	.globl	_protect                        # -- Begin function _protect
	.p2align	4, 0x90
_protect:                               # @_protect
.seh_proc _protect
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	8(%rcx), %rax
	incl	env+128(%rip)
	movq	(%rax), %rcx
	movq	8(%rax), %rsi
	jmp	.LBB352_1
	.p2align	4, 0x90
.LBB352_7:                              # %"$11"
                                        #   in Loop: Header=BB352_1 Depth=1
	movq	(%rsi), %rcx
	movq	8(%rsi), %rsi
.LBB352_1:                              # %"$1"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %sil
	jne	.LBB352_2
# %bb.5:                                # %"$3"
                                        #   in Loop: Header=BB352_1 Depth=1
	testb	$15, %cl
	jne	.LBB352_7
# %bb.6:                                # %"$12"
                                        #   in Loop: Header=BB352_1 Depth=1
	callq	evList
	jmp	.LBB352_7
.LBB352_2:                              # %"$5"
	testb	$6, %cl
	jne	.LBB352_9
# %bb.3:                                # %"$7"
	testb	$8, %cl
	jne	.LBB352_4
# %bb.8:                                # %"$9"
	callq	evList
	movq	%rax, %rcx
	jmp	.LBB352_9
.LBB352_4:                              # %"$10"
	movq	(%rcx), %rcx
.LBB352_9:                              # %"$4"
	decl	env+128(%rip)
	movq	%rcx, %rax
	addq	$32, %rsp
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _heap;
	.scl	2;
	.type	32;
	.endef
	.globl	_heap                           # -- Begin function _heap
	.p2align	4, 0x90
_heap:                                  # @_heap
.seh_proc _heap
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB353_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB353_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB353_4
.LBB353_2:                              # %"$6"
	movq	(%rax), %rax
.LBB353_4:                              # %"$2"
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	jne	.LBB353_5
# %bb.8:                                # %"$7"
	movq	($Heaps)(%rip), %rcx
	xorl	%eax, %eax
	.p2align	4, 0x90
.LBB353_9:                              # %"$10"
                                        # =>This Inner Loop Header: Depth=1
	movq	1048576(%rcx), %rcx
	incq	%rax
	testq	%rcx, %rcx
	jne	.LBB353_9
	jmp	.LBB353_10
.LBB353_5:                              # %"$13.preheader"
	movq	($Avail)(%rip), %rcx
	xorl	%eax, %eax
	testq	%rcx, %rcx
	je	.LBB353_10
	.p2align	4, 0x90
.LBB353_6:                              # %"$14"
                                        # =>This Inner Loop Header: Depth=1
	incq	%rax
	movq	(%rcx), %rcx
	testq	%rcx, %rcx
	jne	.LBB353_6
# %bb.7:                                # %"$15.loopexit"
	shrq	$16, %rax
.LBB353_10:                             # %"$9"
	shlq	$4, %rax
	orq	$2, %rax
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _stack;
	.scl	2;
	.type	32;
	.endef
	.globl	_stack                          # -- Begin function _stack
	.p2align	4, 0x90
_stack:                                 # @_stack
.seh_proc _stack
# %bb.0:                                # %"$1"
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rdi
	movq	($Coroutines)(%rip), %rbx
	testb	$15, %dil
	je	.LBB354_1
# %bb.4:                                # %"$6"
	movq	($StkSize)(%rip), %rsi
	shrq	$6, %rsi
	andq	$-16, %rsi
	orq	$2, %rsi
	testq	%rbx, %rbx
	jne	.LBB354_6
	jmp	.LBB354_26
.LBB354_1:                              # %"$3"
	movq	%rcx, %r14
	testq	%rbx, %rbx
	je	.LBB354_11
# %bb.2:                                # %"$2"
	cmpq	$0, 16(%rbx)
	je	.LBB354_11
# %bb.3:                                # %"$6.thread"
	movq	($StkSize)(%rip), %rsi
	shrq	$6, %rsi
	andq	$-16, %rsi
	orq	$2, %rsi
	jmp	.LBB354_6
.LBB354_11:                             # %"$7"
	movq	(%rdi), %rax
	testb	$6, %al
	jne	.LBB354_15
# %bb.12:                               # %"$3.i"
	testb	$8, %al
	jne	.LBB354_13
# %bb.14:                               # %"$5.i"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB354_15
.LBB354_13:                             # %"$6.i"
	movq	(%rax), %rax
.LBB354_15:                             # %"$2.i"
	testb	$2, %al
	je	.LBB354_27
# %bb.16:                               # %evCnt.exit
	movq	%rax, %rcx
	shrq	$4, %rcx
	movq	%rcx, %rsi
	negq	%rsi
	testb	$8, %al
	cmoveq	%rcx, %rsi
	movq	%rsi, %rax
	shlq	$10, %rax
	movq	%rax, ($StkSize)(%rip)
	movq	8(%rdi), %rax
	testb	$15, %al
	jne	.LBB354_23
# %bb.17:                               # %"$17"
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB354_21
# %bb.18:                               # %"$3.i9"
	testb	$8, %al
	jne	.LBB354_19
# %bb.20:                               # %"$5.i11"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB354_21
.LBB354_19:                             # %"$6.i10"
	movq	(%rax), %rax
.LBB354_21:                             # %"$2.i13"
	testb	$2, %al
	je	.LBB354_27
# %bb.22:                               # %evCnt.exit16
	movq	%rax, %rcx
	shrq	$4, %rcx
	movq	%rcx, %rdx
	negq	%rdx
	testb	$8, %al
	cmoveq	%rcx, %rdx
	shlq	$10, %rdx
	movq	%rdx, ($StkSizeT)(%rip)
.LBB354_23:                             # %"$18"
	testq	%rbx, %rbx
	je	.LBB354_25
# %bb.24:                               # %"$19"
	movq	%rsp, %rdi
	movq	($StkSizeT)(%rip), %r8
	movq	%rdi, %rcx
	subq	%r8, %rcx
	movq	%rcx, %rsp
	movq	%rcx, 40(%rbx)
	addq	$-256, %r8
	movb	$7, %dl
	callq	memset
	movq	%rdi, %rsp
.LBB354_25:                             # %"$20"
	shlq	$4, %rsi
	orq	$2, %rsi
	jmp	.LBB354_26
.LBB354_27:                             # %"$2.i.i"
	movq	%r14, %rcx
	movq	%rax, %rdx
	callq	cntErr
.LBB354_6:                              # %"$10"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB354_8 Depth 2
	movq	(%rbx), %rcx
	testq	%rcx, %rcx
	je	.LBB354_10
# %bb.7:                                # %"$12"
                                        #   in Loop: Header=BB354_6 Depth=1
	movq	40(%rbx), %rax
	leaq	-1(%rax), %rdx
	.p2align	4, 0x90
.LBB354_8:                              # %"$14"
                                        #   Parent Loop BB354_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpb	$7, 1(%rdx)
	leaq	1(%rdx), %rdx
	je	.LBB354_8
# %bb.9:                                # %"$16"
                                        #   in Loop: Header=BB354_6 Depth=1
	subq	%rax, %rdx
	shrq	$6, %rdx
	andq	$-16, %rdx
	orq	$2, %rdx
	movq	%rsi, %r8
	callq	cons2
	movq	%rax, %rsi
.LBB354_10:                             # %"$13"
                                        #   in Loop: Header=BB354_6 Depth=1
	movq	16(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.LBB354_6
.LBB354_26:                             # %"$8"
	movq	%rsi, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _byte;
	.scl	2;
	.type	32;
	.endef
	.globl	_byte                           # -- Begin function _byte
	.p2align	4, 0x90
_byte:                                  # @_byte
.seh_proc _byte
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rdi
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rbx
	testb	$6, %sil
	jne	.LBB355_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB355_2
# %bb.3:                                # %"$5"
	movq	%rsi, %rcx
	callq	evList
	movq	%rax, %rsi
	jmp	.LBB355_4
.LBB355_2:                              # %"$6"
	movq	(%rsi), %rsi
.LBB355_4:                              # %"$2"
	testb	$6, %sil
	je	.LBB355_17
# %bb.5:                                # %"$8"
	testb	$2, %sil
	jne	.LBB355_6
# %bb.7:                                # %"$10"
	movq	-4(%rsi), %rsi
	testb	$15, %bl
	je	.LBB355_10
.LBB355_9:                              # %"$12"
	movzbl	(%rsi), %eax
	shlq	$4, %rax
	orq	$2, %rax
	jmp	.LBB355_16
.LBB355_6:                              # %"$9"
	shrq	$4, %rsi
	testb	$15, %bl
	jne	.LBB355_9
.LBB355_10:                             # %"$13"
	movq	(%rbx), %rax
	testb	$6, %al
	jne	.LBB355_14
# %bb.11:                               # %"$16"
	testb	$8, %al
	jne	.LBB355_12
# %bb.13:                               # %"$18"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB355_14
.LBB355_12:                             # %"$19"
	movq	(%rax), %rax
.LBB355_14:                             # %"$15"
	testb	$2, %al
	je	.LBB355_18
# %bb.15:                               # %"$21"
	movq	%rax, %rcx
	shrq	$4, %rcx
	movl	%ecx, %edx
	negb	%dl
	testb	$8, %al
	movzbl	%dl, %edx
	cmovel	%ecx, %edx
	movb	%dl, (%rsi)
.LBB355_16:                             # %"$14"
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
.LBB355_17:                             # %"$7"
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	numErr
.LBB355_18:                             # %"$20"
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	cntErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _env;
	.scl	2;
	.type	32;
	.endef
	.globl	_env                            # -- Begin function _env
	.p2align	4, 0x90
_env:                                   # @_env
.seh_proc _env
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$24, %rsp
	.seh_stackalloc 24
	leaq	16(%rsp), %rbp
	.seh_setframe %rbp, 16
	.seh_endprologue
	movq	8(%rcx), %rbx
	movq	env(%rip), %rax
	leaq	SymTab+8(%rip), %rsi
	movq	%rsi, -16(%rbp)
	movq	%rax, -8(%rbp)
	leaq	-16(%rbp), %rcx
	movq	%rcx, env(%rip)
	testb	$15, %bl
	je	.LBB356_8
# %bb.1:                                # %"$5.preheader"
	movq	env+8(%rip), %rdi
	testq	%rdi, %rdi
	je	.LBB356_25
# %bb.2:                                # %"$6.preheader"
	leaq	SymTab+8(%rip), %rsi
	jmp	.LBB356_3
	.p2align	4, 0x90
.LBB356_4:                              # %"$11"
                                        #   in Loop: Header=BB356_3 Depth=1
	movq	(%rcx), %rdx
	subq	$32, %rsp
	callq	cons
	movq	%rax, %rcx
	movq	%rsi, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rsi
	movq	%rax, -16(%rbp)
.LBB356_5:                              # %"$10"
                                        #   in Loop: Header=BB356_3 Depth=1
	movq	16(%rdi), %rdi
	testq	%rdi, %rdi
	je	.LBB356_25
.LBB356_3:                              # %"$6"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB356_6 Depth 2
	movq	8(%rdi), %rcx
	testb	$15, %sil
	movq	%rsi, %rax
	jne	.LBB356_4
	.p2align	4, 0x90
.LBB356_6:                              # %"$9"
                                        #   Parent Loop BB356_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rax), %rdx
	cmpq	(%rdx), %rcx
	je	.LBB356_5
# %bb.7:                                # %"$12"
                                        #   in Loop: Header=BB356_6 Depth=2
	movq	8(%rax), %rax
	testb	$15, %al
	je	.LBB356_6
	jmp	.LBB356_4
.LBB356_8:                              # %"$3"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	leaq	SymTab+8(%rip), %r15
	movq	%r15, (%r14)
	movq	%rcx, 8(%r14)
	movq	%r14, env(%rip)
	movq	%r15, %rsi
	jmp	.LBB356_9
.LBB356_22:                             # %"$33"
                                        #   in Loop: Header=BB356_9 Depth=1
	subq	$32, %rsp
	movq	%rdx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdx
	.p2align	4, 0x90
.LBB356_23:                             # %"$30"
                                        #   in Loop: Header=BB356_9 Depth=1
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	cons
	movq	%rax, %rcx
	movq	%rsi, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rsi
	movq	%rax, -16(%rbp)
.LBB356_24:                             # %"$19"
                                        #   in Loop: Header=BB356_9 Depth=1
	testb	$15, %bl
	jne	.LBB356_25
.LBB356_9:                              # %"$13"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB356_14 Depth 2
	movq	(%rbx), %rdi
	movq	8(%rbx), %rbx
	testb	$6, %dil
	jne	.LBB356_13
# %bb.10:                               # %"$15"
                                        #   in Loop: Header=BB356_9 Depth=1
	testb	$8, %dil
	jne	.LBB356_11
# %bb.12:                               # %"$17"
                                        #   in Loop: Header=BB356_9 Depth=1
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdi
	jmp	.LBB356_13
.LBB356_11:                             # %"$18"
                                        #   in Loop: Header=BB356_9 Depth=1
	movq	(%rdi), %rdi
	.p2align	4, 0x90
.LBB356_13:                             # %"$14"
                                        #   in Loop: Header=BB356_9 Depth=1
	movq	%rdi, (%r14)
	testb	$15, %dil
	je	.LBB356_14
# %bb.18:                               # %"$20"
                                        #   in Loop: Header=BB356_9 Depth=1
	cmpq	%r15, %rdi
	je	.LBB356_24
# %bb.19:                               # %"$29"
                                        #   in Loop: Header=BB356_9 Depth=1
	movq	(%rbx), %rdx
	movq	8(%rbx), %rbx
	testb	$6, %dl
	jne	.LBB356_23
# %bb.20:                               # %"$31"
                                        #   in Loop: Header=BB356_9 Depth=1
	testb	$8, %dl
	je	.LBB356_22
# %bb.21:                               # %"$34"
                                        #   in Loop: Header=BB356_9 Depth=1
	movq	(%rdx), %rdx
	jmp	.LBB356_23
	.p2align	4, 0x90
.LBB356_16:                             # %"$24"
                                        #   in Loop: Header=BB356_14 Depth=2
	subq	$32, %rsp
.LBB356_17:                             # %"$25"
                                        #   in Loop: Header=BB356_14 Depth=2
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rcx
	subq	$32, %rsp
	movq	%rsi, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rsi
	movq	%rax, -16(%rbp)
	testb	$15, %dil
	jne	.LBB356_24
.LBB356_14:                             # %"$22"
                                        #   Parent Loop BB356_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rdi), %rcx
	movq	8(%rdi), %rdi
	testb	$15, %cl
	movq	(%rcx), %rdx
	jne	.LBB356_16
# %bb.15:                               # %"$23"
                                        #   in Loop: Header=BB356_14 Depth=2
	movq	8(%rcx), %rax
	subq	$32, %rsp
	movq	%rdx, %rcx
	movq	%rax, %rdx
	jmp	.LBB356_17
.LBB356_25:                             # %"$4"
	movq	-8(%rbp), %rax
	movq	%rax, env(%rip)
	movq	%rsi, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _date;
	.scl	2;
	.type	32;
	.endef
	.globl	_date                           # -- Begin function _date
	.p2align	4, 0x90
_date:                                  # @_date
.seh_proc _date
# %bb.0:                                # %"$1"
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rbx
	testb	$15, %bl
	je	.LBB357_12
# %bb.1:                                # %"$4"
	callq	getDate
	jmp	.LBB357_2
.LBB357_12:                             # %"$3"
	movq	%rcx, %rdi
	movq	(%rbx), %rax
	testb	$6, %al
	jne	.LBB357_16
# %bb.13:                               # %"$6"
	testb	$8, %al
	jne	.LBB357_14
# %bb.15:                               # %"$8"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB357_16
.LBB357_14:                             # %"$9"
	movq	(%rax), %rax
.LBB357_16:                             # %"$5"
	leaq	SymTab+280(%rip), %rcx
	cmpq	%rcx, %rax
	jne	.LBB357_18
# %bb.17:                               # %"$11"
	callq	getGmDate
.LBB357_2:                              # %"$4"
	movl	%eax, %ecx
	shrl	$24, %ecx
	leaq	SymTab+8(%rip), %r12
	je	.LBB357_59
# %bb.3:                                # %"$4"
	movzwl	%ax, %edx
	testq	%rdx, %rdx
	je	.LBB357_59
# %bb.4:                                # %"$4"
	movl	%eax, %ebx
	shrl	$16, %ebx
	movzbl	%bl, %esi
	leaq	-1(%rsi), %rdi
	cmpq	$11, %rdi
	ja	.LBB357_59
# %bb.5:                                # %"$6.i"
	leaq	($Month)(%rip), %rdi
	movzbl	(%rsi,%rdi), %edi
	cmpq	%rdi, %rcx
	jbe	.LBB357_11
# %bb.6:                                # %"$8.i"
	testb	$3, %al
	jne	.LBB357_59
# %bb.7:                                # %"$8.i"
	cmpl	$2, %esi
	jne	.LBB357_59
# %bb.8:                                # %"$8.i"
	cmpl	$29, %ecx
	jne	.LBB357_59
# %bb.9:                                # %"$12.i"
	imull	$23593, %eax, %edi              # imm = 0x5C29
	rorw	$2, %di
	movzwl	%di, %edi
	cmpl	$655, %edi                      # imm = 0x28F
	ja	.LBB357_11
# %bb.10:                               # %"$12.i"
	movzwl	%ax, %edi
	shrl	$4, %edi
	imull	$2622, %edi, %edi               # imm = 0xA3E
	shrl	$16, %edi
	imull	$400, %edi, %edi                # imm = 0x190
	subl	%edi, %eax
	testw	%ax, %ax
	jne	.LBB357_59
.LBB357_11:                             # %"$15.i"
	leal	(%rdx,%rdx,2), %eax
	leal	-3(%rsi,%rax,4), %eax
	movl	$2863311531, %r8d               # imm = 0xAAAAAAAB
	imulq	$458129845, %rax, %rbx          # imm = 0x1B4E81B5
	imulq	%r8, %rax
	movq	%rax, %rdi
	shrq	$34, %rdi
	andl	$-2, %edi
	imull	$4404, %edx, %r9d               # imm = 0x1134
	imull	$367, %esi, %esi                # imm = 0x16F
	movl	$4294966202, %edx               # imm = 0xFFFFFBBA
	addl	%r9d, %edx
	addl	%esi, %edx
	imulq	%r8, %rdx
	shrq	$35, %rdx
	shrq	$37, %rax
	movq	%rbx, %rsi
	shrq	$41, %rsi
	shrq	$39, %rbx
	addq	%rax, %rcx
	addq	%rdx, %rcx
	addq	%rsi, %rcx
	subq	%rbx, %rcx
	subq	%rdi, %rcx
	shlq	$4, %rcx
	orq	$2, %rcx
	movq	%rcx, %r12
	jmp	.LBB357_59
.LBB357_18:                             # %"$10"
	leaq	SymTab+8(%rip), %r12
	cmpq	%r12, %rax
	jne	.LBB357_19
.LBB357_59:                             # %"$2"
	movq	%r12, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	retq
.LBB357_19:                             # %"$12"
	testb	$15, %al
	je	.LBB357_20
# %bb.35:                               # %"$14"
	testb	$2, %al
	je	.LBB357_61
# %bb.36:                               # %xCnt.exit41
	movq	8(%rbx), %r15
	movq	%rax, %rcx
	shrq	$4, %rcx
	movq	%rcx, %rbx
	negq	%rbx
	testb	$8, %al
	cmoveq	%rcx, %rbx
	testb	$15, %r15b
	je	.LBB357_37
# %bb.58:                               # %"$17"
	testq	%rbx, %rbx
	js	.LBB357_59
# %bb.62:                               # %"$19"
	imulq	$100, %rbx, %rax
	addq	$-20, %rax
	movabsq	$-7854979361862454525, %rcx     # imm = 0x92FD81E34A29F303
	mulq	%rcx
	movq	%rdx, %xmm0
	shrq	$21, %rdx
	movq	%rdx, %xmm1
	psrlq	$23, %xmm0
	psubq	%xmm0, %xmm1
	movq	%xmm1, %rcx
	addq	%rbx, %rcx
	imulq	$100, %rcx, %rax
	addq	$-20, %rax
	movabsq	$-1897451539628385637, %rdx     # imm = 0xE5AAE5E0B9EE9A9B
	mulq	%rdx
	movq	%rdx, %r8
	shrq	$15, %r8
	imulq	$36525, %r8, %rax               # imm = 0x8EAD
	shrq	$2, %rax
	movabsq	$2951479051793528259, %rdx      # imm = 0x28F5C28F5C28F5C3
	mulq	%rdx
	shrq	$2, %rdx
	subq	%rdx, %rcx
	addq	%rcx, %rcx
	leaq	(%rcx,%rcx,4), %rbx
	leaq	-5(%rcx,%rcx,4), %rdi
	movabsq	$3858142551364089227, %rcx      # imm = 0x358AE0358AE0358B
	movq	%rdi, %rax
	mulq	%rcx
	movq	%rdx, %rcx
	shrq	$6, %rcx
	imulq	$-306, %rcx, %rax               # imm = 0xFECE
	leaq	5(%rax,%rbx), %rax
	movabsq	$-3689348814741910323, %rdx     # imm = 0xCCCCCCCCCCCCCCCD
	mulq	%rdx
	andq	$-8, %rdx
	xorl	%esi, %esi
	cmpq	$3059, %rdi                     # imm = 0xBF3
	seta	%sil
	addq	%r8, %rsi
	cmpq	$3060, %rdi                     # imm = 0xBF4
	movl	$3, %eax
	movq	$-9, %rdi
	cmovbq	%rax, %rdi
	addq	%rcx, %rdi
	shlq	$4, %rsi
	orq	$2, %rsi
	shlq	$4, %rdi
	orq	$2, %rdi
	leaq	2(%rdx,%rdx), %rcx
	leaq	SymTab+8(%rip), %rdx
	callq	cons
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	cons
	movq	%rsi, %rcx
	movq	%rax, %rdx
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	jmp	cons                            # TAILCALL
.LBB357_20:                             # %"$15"
	movq	(%rax), %rdx
	testb	$2, %dl
	je	.LBB357_60
# %bb.21:                               # %xCnt.exit
	movq	8(%rax), %rax
	movq	%rdx, %rcx
	shrq	$4, %rcx
	movq	%rcx, %rbx
	negq	%rbx
	testb	$8, %dl
	cmoveq	%rcx, %rbx
	movq	(%rax), %rdx
	testb	$2, %dl
	je	.LBB357_60
# %bb.22:                               # %xCnt.exit21
	movq	8(%rax), %rax
	movq	%rdx, %rcx
	shrq	$4, %rcx
	movq	%rcx, %rsi
	negq	%rsi
	testb	$8, %dl
	cmoveq	%rcx, %rsi
	movq	(%rax), %rdx
	testb	$2, %dl
	je	.LBB357_60
# %bb.23:                               # %xCnt.exit25
	movq	%rdx, %rax
	shrq	$4, %rax
	movq	%rax, %rdi
	negq	%rdi
	testb	$8, %dl
	cmoveq	%rax, %rdi
	cmpq	$12, %rsi
	ja	.LBB357_59
# %bb.24:                               # %xCnt.exit25
	testq	%rbx, %rbx
	jle	.LBB357_59
# %bb.25:                               # %xCnt.exit25
	testq	%rsi, %rsi
	jle	.LBB357_59
# %bb.26:                               # %xCnt.exit25
	testq	%rdi, %rdi
	jle	.LBB357_59
# %bb.27:                               # %"$6.i30"
	leaq	($Month)(%rip), %rax
	movzbl	(%rsi,%rax), %eax
	cmpq	%rax, %rdi
	jbe	.LBB357_33
# %bb.28:                               # %"$8.i33"
	testb	$3, %bl
	jne	.LBB357_59
# %bb.29:                               # %"$8.i33"
	cmpq	$2, %rsi
	jne	.LBB357_59
# %bb.30:                               # %"$8.i33"
	cmpq	$29, %rdi
	jne	.LBB357_59
# %bb.31:                               # %"$12.i35"
	movabsq	$-8116567392432202711, %rcx     # imm = 0x8F5C28F5C28F5C29
	imulq	%rbx, %rcx
	rorq	$2, %rcx
	movq	%rbx, %rax
	shrq	$4, %rax
	movabsq	$737869762948382065, %rdx       # imm = 0xA3D70A3D70A3D71
	mulq	%rdx
	movabsq	$184467440737095516, %rax       # imm = 0x28F5C28F5C28F5C
	cmpq	%rax, %rcx
	ja	.LBB357_33
# %bb.32:                               # %"$12.i35"
	imulq	$400, %rdx, %rax                # imm = 0x190
	movq	%rbx, %rcx
	subq	%rax, %rcx
	jne	.LBB357_59
.LBB357_33:                             # %"$15.i36"
	leaq	(%rbx,%rbx,2), %rax
	leaq	-3(%rsi,%rax,4), %r10
	movabsq	$-6148914691236517205, %r9      # imm = 0xAAAAAAAAAAAAAAAB
	movq	%r10, %rax
	mulq	%r9
	movq	%rdx, %r8
	movq	%rdx, %rax
	shrq	$2, %rax
	movabsq	$1152921504606846974, %rcx      # imm = 0xFFFFFFFFFFFFFFE
	andq	%rax, %rcx
	imulq	$4404, %rbx, %rax               # imm = 0x1134
	imulq	$367, %rsi, %rdx                # imm = 0x16F
	leaq	-1094(%rax,%rdx), %rax
	mulq	%r9
	shrq	$3, %rdx
	shrq	$5, %r8
	addq	%rdx, %r8
	movabsq	$7870610804782742023, %rdx      # imm = 0x6D3A06D3A06D3A07
	movq	%r10, %rax
	mulq	%rdx
	movq	%rdx, %r12
	shrq	$11, %r12
	addq	%r8, %r12
	shrq	$9, %rdx
	subq	%rdx, %r12
	subq	%rcx, %r12
	addq	%rdi, %r12
	jmp	.LBB357_34
.LBB357_37:                             # %"$18"
	movq	(%r15), %rax
	testb	$6, %al
	jne	.LBB357_41
# %bb.38:                               # %"$3.i"
	testb	$8, %al
	jne	.LBB357_39
# %bb.40:                               # %"$5.i"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB357_41
.LBB357_39:                             # %"$6.i44"
	movq	(%rax), %rax
.LBB357_41:                             # %"$2.i45"
	testb	$2, %al
	je	.LBB357_61
# %bb.42:                               # %evCnt.exit
	movq	%rax, %rcx
	shrq	$4, %rcx
	movq	%rcx, %r14
	negq	%r14
	testb	$8, %al
	cmoveq	%rcx, %r14
	movq	8(%r15), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB357_46
# %bb.43:                               # %"$3.i48"
	testb	$8, %al
	jne	.LBB357_44
# %bb.45:                               # %"$5.i50"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB357_46
.LBB357_44:                             # %"$6.i49"
	movq	(%rax), %rax
.LBB357_46:                             # %"$2.i52"
	testb	$2, %al
	je	.LBB357_61
# %bb.47:                               # %evCnt.exit55
	movq	%rax, %rdx
	shrq	$4, %rdx
	movq	%rdx, %rcx
	negq	%rcx
	testb	$8, %al
	cmoveq	%rdx, %rcx
	cmpq	$12, %r14
	ja	.LBB357_59
# %bb.48:                               # %evCnt.exit55
	testq	%rbx, %rbx
	jle	.LBB357_59
# %bb.49:                               # %evCnt.exit55
	testq	%r14, %r14
	jle	.LBB357_59
# %bb.50:                               # %evCnt.exit55
	testq	%rcx, %rcx
	jle	.LBB357_59
# %bb.51:                               # %"$6.i60"
	leaq	($Month)(%rip), %rax
	movzbl	(%r14,%rax), %eax
	cmpq	%rax, %rcx
	jbe	.LBB357_57
# %bb.52:                               # %"$8.i63"
	testb	$3, %bl
	jne	.LBB357_59
# %bb.53:                               # %"$8.i63"
	cmpq	$2, %r14
	jne	.LBB357_59
# %bb.54:                               # %"$8.i63"
	cmpq	$29, %rcx
	jne	.LBB357_59
# %bb.55:                               # %"$12.i65"
	movabsq	$-8116567392432202711, %rdi     # imm = 0x8F5C28F5C28F5C29
	imulq	%rbx, %rdi
	rorq	$2, %rdi
	movq	%rbx, %rax
	shrq	$4, %rax
	movabsq	$737869762948382065, %rdx       # imm = 0xA3D70A3D70A3D71
	mulq	%rdx
	movabsq	$184467440737095516, %rax       # imm = 0x28F5C28F5C28F5C
	cmpq	%rax, %rdi
	ja	.LBB357_57
# %bb.56:                               # %"$12.i65"
	imulq	$400, %rdx, %rax                # imm = 0x190
	movq	%rbx, %rdx
	subq	%rax, %rdx
	jne	.LBB357_59
.LBB357_57:                             # %"$15.i66"
	leaq	(%rbx,%rbx,2), %rax
	leaq	-3(%r14,%rax,4), %r9
	movabsq	$-6148914691236517205, %r8      # imm = 0xAAAAAAAAAAAAAAAB
	movq	%r9, %rax
	mulq	%r8
	movq	%rdx, %rdi
	movq	%rdx, %rax
	shrq	$2, %rax
	movabsq	$1152921504606846974, %rsi      # imm = 0xFFFFFFFFFFFFFFE
	andq	%rax, %rsi
	imulq	$4404, %rbx, %rax               # imm = 0x1134
	imulq	$367, %r14, %rdx                # imm = 0x16F
	leaq	-1094(%rax,%rdx), %rax
	mulq	%r8
	shrq	$3, %rdx
	shrq	$5, %rdi
	addq	%rdx, %rdi
	movabsq	$7870610804782742023, %rdx      # imm = 0x6D3A06D3A06D3A07
	movq	%r9, %rax
	mulq	%rdx
	movq	%rdx, %r12
	shrq	$11, %r12
	addq	%rdi, %r12
	shrq	$9, %rdx
	subq	%rdx, %r12
	subq	%rsi, %r12
	addq	%rcx, %r12
.LBB357_34:                             # %"$2"
	shlq	$4, %r12
	orq	$2, %r12
	jmp	.LBB357_59
.LBB357_60:                             # %"$2.i"
	movq	%rdi, %rcx
	callq	cntErr
.LBB357_61:                             # %"$2.i39"
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	cntErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _time;
	.scl	2;
	.type	32;
	.endef
	.globl	_time                           # -- Begin function _time
	.p2align	4, 0x90
_time:                                  # @_time
.seh_proc _time
# %bb.0:                                # %"$1"
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	8(%rcx), %rbx
	testb	$15, %bl
	je	.LBB358_4
# %bb.1:                                # %"$4"
	callq	getTime
.LBB358_2:                              # %"$13"
	movq	%rax, %rsi
.LBB358_3:                              # %"$2"
	shlq	$4, %rsi
	orq	$2, %rsi
.LBB358_43:                             # %"$2"
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	retq
.LBB358_4:                              # %"$3"
	movq	%rcx, %rdi
	movq	(%rbx), %rax
	testb	$6, %al
	jne	.LBB358_8
# %bb.5:                                # %"$6"
	testb	$8, %al
	jne	.LBB358_6
# %bb.7:                                # %"$8"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB358_8
.LBB358_6:                              # %"$9"
	movq	(%rax), %rax
.LBB358_8:                              # %"$5"
	leaq	SymTab+280(%rip), %rcx
	cmpq	%rcx, %rax
	jne	.LBB358_11
# %bb.9:                                # %"$11"
	callq	getGmTime
	testq	%rax, %rax
	jns	.LBB358_2
# %bb.10:
	leaq	SymTab+8(%rip), %rsi
	jmp	.LBB358_43
.LBB358_11:                             # %"$10"
	leaq	SymTab+8(%rip), %rsi
	cmpq	%rsi, %rax
	je	.LBB358_43
# %bb.12:                               # %"$15"
	testb	$15, %al
	je	.LBB358_13
# %bb.23:                               # %"$17"
	testb	$2, %al
	je	.LBB358_45
# %bb.24:                               # %xCnt.exit16
	movq	8(%rbx), %r15
	movq	%rax, %rcx
	shrq	$4, %rcx
	movq	%rcx, %rbx
	negq	%rbx
	testb	$8, %al
	cmoveq	%rcx, %rbx
	testb	$15, %r15b
	je	.LBB358_25
# %bb.42:                               # %"$23"
	testq	%rbx, %rbx
	js	.LBB358_43
# %bb.46:                               # %"$28"
	movq	%rbx, %rax
	shrq	$4, %rax
	movabsq	$655884233731895169, %rcx       # imm = 0x91A2B3C4D5E6F81
	mulq	%rcx
	andq	$-8, %rdx
	leaq	2(%rdx,%rdx), %rsi
	movabsq	$-8608480567731124087, %rdi     # imm = 0x8888888888888889
	movq	%rbx, %rax
	mulq	%rdi
	movq	%rdx, %rcx
	shrq	$5, %rcx
	movq	%rcx, %rax
	mulq	%rdi
	shrq	$5, %rdx
	imulq	$60, %rdx, %rax
	imulq	$60, %rcx, %rdx
	subq	%rax, %rcx
	shlq	$4, %rcx
	leaq	2(%rcx), %rdi
	subq	%rdx, %rbx
	shlq	$4, %rbx
	orq	$2, %rbx
	leaq	SymTab+8(%rip), %rdx
	movq	%rbx, %rcx
	callq	cons
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	cons
	movq	%rsi, %rcx
	movq	%rax, %rdx
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	jmp	cons                            # TAILCALL
.LBB358_13:                             # %"$18"
	movq	(%rax), %rdx
	testb	$2, %dl
	je	.LBB358_44
# %bb.14:                               # %xCnt.exit
	movq	8(%rax), %rcx
	movq	%rdx, %rax
	shrq	$4, %rax
	movq	%rax, %r8
	negq	%r8
	testb	$8, %dl
	cmoveq	%rax, %r8
	movq	(%rcx), %rdx
	testb	$2, %dl
	je	.LBB358_44
# %bb.15:                               # %xCnt.exit8
	movq	8(%rcx), %rbx
	movq	%rdx, %rax
	shrq	$4, %rax
	movq	%rax, %rcx
	negq	%rcx
	testb	$8, %dl
	cmoveq	%rax, %rcx
	testb	$15, %bl
	je	.LBB358_17
# %bb.16:
	xorl	%ebx, %ebx
	jmp	.LBB358_19
.LBB358_25:                             # %"$24"
	movq	(%r15), %rax
	testb	$6, %al
	jne	.LBB358_29
# %bb.26:                               # %"$3.i"
	testb	$8, %al
	jne	.LBB358_27
# %bb.28:                               # %"$5.i"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB358_29
.LBB358_17:                             # %"$19"
	movq	(%rbx), %rdx
	testb	$2, %dl
	je	.LBB358_44
# %bb.18:                               # %xCnt.exit12
	movq	%rdx, %rax
	shrq	$4, %rax
	movq	%rax, %rbx
	negq	%rbx
	testb	$8, %dl
	cmoveq	%rax, %rbx
.LBB358_19:                             # %"$21"
	cmpq	$59, %rbx
	ja	.LBB358_43
# %bb.20:                               # %"$21"
	cmpq	$59, %rcx
	ja	.LBB358_43
# %bb.21:                               # %"$21"
	movq	%rcx, %rax
	orq	%r8, %rax
	orq	%rbx, %rax
	js	.LBB358_43
# %bb.22:                               # %"$7.i"
	imulq	$3600, %r8, %rax                # imm = 0xE10
	imulq	$60, %rcx, %rsi
	addq	%rax, %rsi
	addq	%rbx, %rsi
	jmp	.LBB358_3
.LBB358_27:                             # %"$6.i"
	movq	(%rax), %rax
.LBB358_29:                             # %"$2.i19"
	testb	$2, %al
	je	.LBB358_45
# %bb.30:                               # %evCnt.exit
	movq	%rax, %rcx
	shrq	$4, %rcx
	movq	%rcx, %r14
	negq	%r14
	testb	$8, %al
	cmoveq	%rcx, %r14
	movq	8(%r15), %rax
	testb	$15, %al
	je	.LBB358_32
# %bb.31:
	xorl	%ecx, %ecx
	jmp	.LBB358_38
.LBB358_32:                             # %"$25"
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB358_36
# %bb.33:                               # %"$3.i22"
	testb	$8, %al
	jne	.LBB358_34
# %bb.35:                               # %"$5.i24"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB358_36
.LBB358_34:                             # %"$6.i23"
	movq	(%rax), %rax
.LBB358_36:                             # %"$2.i26"
	testb	$2, %al
	je	.LBB358_45
# %bb.37:                               # %evCnt.exit29
	movq	%rax, %rdx
	shrq	$4, %rdx
	movq	%rdx, %rcx
	negq	%rcx
	testb	$8, %al
	cmoveq	%rdx, %rcx
.LBB358_38:                             # %"$27"
	cmpq	$59, %rcx
	ja	.LBB358_43
# %bb.39:                               # %"$27"
	cmpq	$59, %r14
	ja	.LBB358_43
# %bb.40:                               # %"$27"
	movq	%r14, %rax
	orq	%rbx, %rax
	orq	%rcx, %rax
	js	.LBB358_43
# %bb.41:                               # %"$7.i31"
	imulq	$3600, %rbx, %rax               # imm = 0xE10
	imulq	$60, %r14, %rsi
	addq	%rax, %rsi
	addq	%rcx, %rsi
	jmp	.LBB358_3
.LBB358_44:                             # %"$2.i"
	movq	%rdi, %rcx
	callq	cntErr
.LBB358_45:                             # %"$2.i14"
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	cntErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _usec;
	.scl	2;
	.type	32;
	.endef
	.globl	_usec                           # -- Begin function _usec
	.p2align	4, 0x90
_usec:                                  # @_usec
.seh_proc _usec
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB359_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB359_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB359_4
.LBB359_2:                              # %"$6"
	movq	(%rax), %rax
.LBB359_4:                              # %"$2"
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	jne	.LBB359_6
# %bb.5:                                # %"$7"
	movb	$1, %cl
	callq	getUsec
	subq	($USec)(%rip), %rax
	jmp	.LBB359_7
.LBB359_6:                              # %"$8"
	xorl	%ecx, %ecx
	callq	getUsec
.LBB359_7:                              # %"$9"
	shlq	$4, %rax
	orq	$2, %rax
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _quit;
	.scl	2;
	.type	32;
	.endef
	.globl	_quit                           # -- Begin function _quit
	.p2align	4, 0x90
_quit:                                  # @_quit
.seh_proc _quit
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rdi
	movq	(%rdi), %rcx
	testb	$6, %cl
	jne	.LBB360_4
# %bb.1:                                # %"$3.i"
	testb	$8, %cl
	jne	.LBB360_2
# %bb.3:                                # %"$5.i"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB360_4
.LBB360_2:                              # %"$6.i"
	movq	(%rcx), %rcx
.LBB360_4:                              # %evSym.exit
	subq	$32, %rsp
	callq	xSym
	addq	$32, %rsp
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	jne	.LBB360_6
# %bb.5:
	movl	$1, %eax
	movl	$2, %ecx
.LBB360_15:                             # %bufSize.exit
	addq	$15, %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	xorl	%edx, %edx
	movq	%rsi, %rax
	testq	%rdx, %rdx
	jne	.LBB360_24
.LBB360_17:                             # %"$2.i.i"
	cmpq	$2, %rcx
	je	.LBB360_18
# %bb.21:                               # %"$5.i.i"
	testb	$2, %cl
	jne	.LBB360_22
# %bb.23:                               # %"$7.i.i"
	movq	-4(%rcx), %rdx
	movq	4(%rcx), %rcx
	jmp	.LBB360_24
.LBB360_22:                             # %"$8.i.i"
	movq	%rcx, %rdx
	shrq	$4, %rdx
	movl	$2, %ecx
	.p2align	4, 0x90
.LBB360_24:                             # %symByte.exit.i
                                        # =>This Inner Loop Header: Depth=1
	movb	%dl, (%rax)
	testb	%dl, %dl
	je	.LBB360_19
# %bb.25:                               # %"$3.i12"
                                        #   in Loop: Header=BB360_24 Depth=1
	shrq	$8, %rdx
	incq	%rax
	testq	%rdx, %rdx
	je	.LBB360_17
	jmp	.LBB360_24
.LBB360_6:                              # %"$3.i4"
	movq	-8(%rax), %rcx
	testb	$8, %cl
	jne	.LBB360_7
# %bb.9:                                # %"$8.i"
	testb	$6, %cl
	jne	.LBB360_10
.LBB360_8:                              # %"$8.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rcx
	testb	$6, %cl
	je	.LBB360_8
.LBB360_10:                             # %xName.exit
	movl	$1, %eax
	testb	$4, %cl
	movq	%rcx, %rdx
	je	.LBB360_13
# %bb.11:                               # %"$3.i8.preheader"
	movl	$1, %eax
	movq	%rcx, %rdx
.LBB360_12:                             # %"$3.i8"
                                        # =>This Inner Loop Header: Depth=1
	addq	$8, %rax
	movq	4(%rdx), %rdx
	testb	$4, %dl
	jne	.LBB360_12
.LBB360_13:                             # %"$4.i"
	shrq	$4, %rdx
	je	.LBB360_15
.LBB360_14:                             # %"$6.i10"
                                        # =>This Inner Loop Header: Depth=1
	incq	%rax
	shrq	$8, %rdx
	jne	.LBB360_14
	jmp	.LBB360_15
.LBB360_18:                             # %symByte.exit.thread.i
	movb	$0, (%rax)
.LBB360_19:                             # %bufString.exit
	movq	8(%rdi), %rax
	testb	$15, %al
	jne	.LBB360_20
# %bb.26:                               # %"$3"
	movq	(%rax), %rdx
	testb	$6, %dl
	jne	.LBB360_30
# %bb.27:                               # %"$6"
	testb	$8, %dl
	jne	.LBB360_28
# %bb.29:                               # %"$8"
	subq	$32, %rsp
	movq	%rdx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdx
	jmp	.LBB360_30
.LBB360_20:
	xorl	%edx, %edx
	jmp	.LBB360_30
.LBB360_7:                              # %"$6.i5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	nameErr
.LBB360_28:                             # %"$9"
	movq	(%rdx), %rdx
.LBB360_30:                             # %"$4"
	subq	$32, %rsp
	leaq	.L$86(%rip), %r8
	xorl	%ecx, %ecx
	movq	%rsi, %r9
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _sys;
	.scl	2;
	.type	32;
	.endef
	.globl	_sys                            # -- Begin function _sys
	.p2align	4, 0x90
_sys:                                   # @_sys
.seh_proc _sys
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %r15
	movq	8(%rcx), %rbx
	movq	(%rbx), %rcx
	testb	$6, %cl
	jne	.LBB361_4
# %bb.1:                                # %"$3.i"
	testb	$8, %cl
	jne	.LBB361_2
# %bb.3:                                # %"$5.i"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB361_4
.LBB361_2:                              # %"$6.i"
	movq	(%rcx), %rcx
.LBB361_4:                              # %evSym.exit
	subq	$32, %rsp
	callq	xSym
	addq	$32, %rsp
	leaq	SymTab+8(%rip), %rsi
	cmpq	%rsi, %rax
	jne	.LBB361_6
# %bb.5:
	movl	$1, %eax
	movl	$2, %ecx
	jmp	.LBB361_15
.LBB361_6:                              # %"$3.i3"
	movq	-8(%rax), %rcx
	testb	$8, %cl
	je	.LBB361_9
# %bb.7:                                # %"$6.i4"
	subq	$32, %rsp
	movq	%r15, %rcx
	movq	%rax, %rdx
	callq	nameErr
	.p2align	4, 0x90
.LBB361_8:                              # %"$8.i"
                                        #   in Loop: Header=BB361_9 Depth=1
	movq	8(%rcx), %rcx
.LBB361_9:                              # %"$8.i"
                                        # =>This Inner Loop Header: Depth=1
	testb	$6, %cl
	je	.LBB361_8
# %bb.10:                               # %xName.exit
	movl	$1, %eax
	testb	$4, %cl
	movq	%rcx, %rdx
	je	.LBB361_13
# %bb.11:                               # %"$3.i7.preheader"
	movl	$1, %eax
	movq	%rcx, %rdx
	.p2align	4, 0x90
.LBB361_12:                             # %"$3.i7"
                                        # =>This Inner Loop Header: Depth=1
	addq	$8, %rax
	movq	4(%rdx), %rdx
	testb	$4, %dl
	jne	.LBB361_12
.LBB361_13:                             # %"$4.i"
	shrq	$4, %rdx
	je	.LBB361_15
	.p2align	4, 0x90
.LBB361_14:                             # %"$6.i9"
                                        # =>This Inner Loop Header: Depth=1
	incq	%rax
	shrq	$8, %rdx
	jne	.LBB361_14
.LBB361_15:                             # %bufSize.exit
	addq	$15, %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	xorl	%edx, %edx
	movq	%rdi, %rax
	testq	%rdx, %rdx
	jne	.LBB361_24
	.p2align	4, 0x90
.LBB361_17:                             # %"$2.i.i"
	cmpq	$2, %rcx
	je	.LBB361_18
# %bb.21:                               # %"$5.i.i"
	testb	$2, %cl
	jne	.LBB361_22
# %bb.23:                               # %"$7.i.i"
	movq	-4(%rcx), %rdx
	movq	4(%rcx), %rcx
	jmp	.LBB361_24
	.p2align	4, 0x90
.LBB361_22:                             # %"$8.i.i"
	movq	%rcx, %rdx
	shrq	$4, %rdx
	movl	$2, %ecx
	.p2align	4, 0x90
.LBB361_24:                             # %symByte.exit.i
                                        # =>This Inner Loop Header: Depth=1
	movb	%dl, (%rax)
	testb	%dl, %dl
	je	.LBB361_19
# %bb.25:                               # %"$3.i11"
                                        #   in Loop: Header=BB361_24 Depth=1
	shrq	$8, %rdx
	incq	%rax
	testq	%rdx, %rdx
	jne	.LBB361_24
	jmp	.LBB361_17
.LBB361_18:                             # %symByte.exit.thread.i
	movb	$0, (%rax)
.LBB361_19:                             # %bufString.exit
	movq	8(%rbx), %rax
	testb	$15, %al
	je	.LBB361_26
# %bb.20:                               # %"$2"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	getenv
	addq	$32, %rsp
	movq	%rax, %rcx
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	mkStr                           # TAILCALL
.LBB361_26:                             # %"$3"
	movq	(%rax), %rcx
	testb	$6, %cl
	jne	.LBB361_30
# %bb.27:                               # %"$3.i51"
	testb	$8, %cl
	jne	.LBB361_28
# %bb.29:                               # %"$5.i53"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB361_30
.LBB361_28:                             # %"$6.i52"
	movq	(%rcx), %rcx
.LBB361_30:                             # %evSym.exit55
	subq	$32, %rsp
	callq	xSym
	addq	$32, %rsp
	movq	%rax, %r14
	cmpq	%rsi, %rax
	jne	.LBB361_32
# %bb.31:
	movl	$1, %eax
	movl	$2, %ebx
	jmp	.LBB361_41
.LBB361_32:                             # %"$3.i41"
	movq	-8(%r14), %rbx
	testb	$8, %bl
	jne	.LBB361_33
	.p2align	4, 0x90
# %bb.35:                               # %"$8.i46"
	testb	$6, %bl
	jne	.LBB361_36
.LBB361_34:                             # %"$8.i46"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rbx), %rbx
	testb	$6, %bl
	je	.LBB361_34
.LBB361_36:                             # %xName.exit48
	movl	$1, %eax
	testb	$4, %bl
	movq	%rbx, %rcx
	je	.LBB361_39
# %bb.37:                               # %"$3.i31.preheader"
	movl	$1, %eax
	movq	%rbx, %rcx
	.p2align	4, 0x90
.LBB361_38:                             # %"$3.i31"
                                        # =>This Inner Loop Header: Depth=1
	addq	$8, %rax
	movq	4(%rcx), %rcx
	testb	$4, %cl
	jne	.LBB361_38
.LBB361_39:                             # %"$4.i35"
	shrq	$4, %rcx
	je	.LBB361_41
	.p2align	4, 0x90
.LBB361_40:                             # %"$6.i37"
                                        # =>This Inner Loop Header: Depth=1
	incq	%rax
	shrq	$8, %rcx
	jne	.LBB361_40
.LBB361_41:                             # %bufSize.exit39
	addq	$15, %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdx
	xorl	%ecx, %ecx
	movq	%rdx, %rax
	testq	%rcx, %rcx
	jne	.LBB361_49
	.p2align	4, 0x90
.LBB361_43:                             # %"$2.i.i17"
	cmpq	$2, %rbx
	je	.LBB361_44
# %bb.46:                               # %"$5.i.i20"
	testb	$2, %bl
	jne	.LBB361_47
# %bb.48:                               # %"$7.i.i22"
	movq	-4(%rbx), %rcx
	movq	4(%rbx), %rbx
	jmp	.LBB361_49
	.p2align	4, 0x90
.LBB361_47:                             # %"$8.i.i21"
	movq	%rbx, %rcx
	shrq	$4, %rcx
	movl	$2, %ebx
	.p2align	4, 0x90
.LBB361_49:                             # %symByte.exit.i25
                                        # =>This Inner Loop Header: Depth=1
	movb	%cl, (%rax)
	testb	%cl, %cl
	je	.LBB361_45
# %bb.50:                               # %"$3.i26"
                                        #   in Loop: Header=BB361_49 Depth=1
	shrq	$8, %rcx
	incq	%rax
	testq	%rcx, %rcx
	jne	.LBB361_49
	jmp	.LBB361_43
.LBB361_44:                             # %symByte.exit.thread.i18
	movb	$0, (%rax)
.LBB361_45:                             # %bufString.exit28
	subq	$32, %rsp
	movq	%rdi, %rcx
	movl	$1, %r8d
	callq	setenv
	addq	$32, %rsp
	testl	%eax, %eax
	cmoveq	%r14, %rsi
	movq	%rsi, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB361_33:                             # %"$6.i44"
	subq	$32, %rsp
	movq	%r15, %rcx
	movq	%r14, %rdx
	callq	nameErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _pwd;
	.scl	2;
	.type	32;
	.endef
	.globl	_pwd                            # -- Begin function _pwd
	.p2align	4, 0x90
_pwd:                                   # @_pwd
.seh_proc _pwd
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	callq	getcwd
	testq	%rax, %rax
	je	.LBB362_2
# %bb.1:                                # %"$2"
	movq	%rax, %rsi
	movq	%rax, %rcx
	callq	mkStr
	movq	%rax, %rdi
	movq	%rsi, %rcx
	callq	free
	movq	%rdi, %rax
	jmp	.LBB362_3
.LBB362_2:                              # %"$4"
	leaq	SymTab+8(%rip), %rax
.LBB362_3:                              # %"$4"
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cd;
	.scl	2;
	.type	32;
	.endef
	.globl	_cd                             # -- Begin function _cd
	.p2align	4, 0x90
_cd:                                    # @_cd
.seh_proc _cd
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rdi
	movq	8(%rcx), %rax
	movq	(%rax), %rcx
	testb	$6, %cl
	jne	.LBB363_4
# %bb.1:                                # %"$3.i"
	testb	$8, %cl
	jne	.LBB363_2
# %bb.3:                                # %"$5.i"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB363_4
.LBB363_2:                              # %"$6.i"
	movq	(%rcx), %rcx
.LBB363_4:                              # %evSym.exit
	subq	$32, %rsp
	callq	xSym
	addq	$32, %rsp
	movl	$2, %esi
	leaq	SymTab+8(%rip), %rbx
	cmpq	%rbx, %rax
	jne	.LBB363_5
.LBB363_9:                              # %xName.exit
	subq	$32, %rsp
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	callq	getcwd
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB363_30
# %bb.10:                               # %"$2"
	movq	%rax, %rdi
	movl	$1, %eax
	testb	$4, %sil
	movq	%rsi, %rcx
	je	.LBB363_13
# %bb.11:                               # %"$3.i.i.preheader"
	movl	$1, %eax
	movq	%rsi, %rcx
	.p2align	4, 0x90
.LBB363_12:                             # %"$3.i.i"
                                        # =>This Inner Loop Header: Depth=1
	addq	$8, %rax
	movq	4(%rcx), %rcx
	testb	$4, %cl
	jne	.LBB363_12
.LBB363_13:                             # %"$4.i.i"
	shrq	$4, %rcx
	je	.LBB363_15
	.p2align	4, 0x90
.LBB363_14:                             # %"$6.i.i"
                                        # =>This Inner Loop Header: Depth=1
	incq	%rax
	shrq	$8, %rcx
	jne	.LBB363_14
.LBB363_15:                             # %bufSize.exit.i
	testb	$2, %sil
	jne	.LBB363_16
# %bb.17:                               # %"$3.i6"
	movq	-4(%rsi), %rdx
	movq	%rdx, %rcx
	shrq	$8, %rcx
	cmpb	$126, %dl
	jne	.LBB363_19
	jmp	.LBB363_24
.LBB363_5:                              # %"$3.i2"
	movq	-8(%rax), %rsi
	testb	$8, %sil
	jne	.LBB363_6
	.p2align	4, 0x90
# %bb.8:                                # %"$8.i"
	testb	$6, %sil
	jne	.LBB363_9
.LBB363_7:                              # %"$8.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rsi), %rsi
	testb	$6, %sil
	je	.LBB363_7
	jmp	.LBB363_9
.LBB363_16:                             # %"$2.i"
	movq	%rsi, %rdx
	shrq	$4, %rdx
	movq	%rsi, %rcx
	shrq	$12, %rcx
	cmpb	$126, %dl
	je	.LBB363_24
.LBB363_19:                             # %"$4.i"
	cmpb	$64, %dl
	je	.LBB363_23
# %bb.20:                               # %"$4.i"
	cmpb	$43, %dl
	jne	.LBB363_26
# %bb.21:                               # %"$9.i"
	cmpb	$126, %cl
	je	.LBB363_24
# %bb.22:                               # %"$9.i"
	cmpb	$64, %cl
	jne	.LBB363_26
.LBB363_23:                             # %"$11.i"
	movq	($PilLen)(%rip), %rcx
	jmp	.LBB363_25
.LBB363_24:                             # %"$17.i"
	movq	($UsrLen)(%rip), %rcx
.LBB363_25:                             # %pathSize.exit
	leaq	-1(%rax,%rcx), %rax
.LBB363_26:                             # %pathSize.exit
	addq	$15, %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rbx, %rdx
	callq	pathString
	movq	%rbx, %rcx
	callq	chdir
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB363_27
# %bb.28:                               # %"$6"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	mkStr
	addq	$32, %rsp
	movq	%rax, %rbx
	jmp	.LBB363_29
.LBB363_27:
	leaq	SymTab+8(%rip), %rbx
.LBB363_29:                             # %"$7"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	free
	addq	$32, %rsp
.LBB363_30:                             # %"$4"
	movq	%rbx, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%rbp
	retq
.LBB363_6:                              # %"$6.i3"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	nameErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _ctty;
	.scl	2;
	.type	32;
	.endef
	.globl	_ctty                           # -- Begin function _ctty
	.p2align	4, 0x90
_ctty:                                  # @_ctty
.seh_proc _ctty
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rbx
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	testb	$6, %sil
	je	.LBB364_1
# %bb.3:                                # %"$2"
	testb	$2, %sil
	jne	.LBB364_12
.LBB364_4:                              # %"$8"
	leaq	SymTab+8(%rip), %r14
	cmpq	%r14, %rsi
	jne	.LBB364_9
# %bb.5:                                # %"$11"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	leaq	4(%rsi), %rdx
	subq	$48, %rsp
	movq	$0, 32(%rsp)
	movq	%rsi, %rcx
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	callq	openpty
	addq	$48, %rsp
	subq	$32, %rsp
	testl	%eax, %eax
	js	.LBB364_33
# %bb.6:                                # %"$13"
	callq	fork
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB364_34
# %bb.7:                                # %"$15"
	je	.LBB364_35
# %bb.8:                                # %"$14"
	movl	(%rsi), %ecx
	subq	$32, %rsp
	callq	close
	addq	$32, %rsp
	movl	4(%rsi), %ecx
	subq	$32, %rsp
	callq	login_tty
	addq	$32, %rsp
	movl	Sig+4(%rip), %ecx
	movq	SigIgn(%rip), %rdx
	subq	$32, %rsp
	callq	signal
	addq	$32, %rsp
	movq	($InFiles)(%rip), %rax
	movq	(%rax), %rax
	movb	$1, 4128(%rax)
	movq	($OutFiles)(%rip), %rax
	movq	8(%rax), %rax
	movb	$1, 4104(%rax)
	movq	($OutFiles)(%rip), %rax
	movq	16(%rax), %rax
	movb	$1, 4104(%rax)
	subq	$32, %rsp
	leaq	OrgTermio(%rip), %rdx
	xorl	%ecx, %ecx
	callq	tcgetattr
	addq	$32, %rsp
	testl	%eax, %eax
	sete	Tio(%rip)
	leaq	SymTab+280(%rip), %r14
	jmp	.LBB364_14
.LBB364_1:                              # %"$3"
	testb	$8, %sil
	jne	.LBB364_11
# %bb.2:                                # %"$5"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	testb	$2, %sil
	jne	.LBB364_12
	jmp	.LBB364_4
.LBB364_9:                              # %"$10"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	xSym
	addq	$32, %rsp
	cmpq	%r14, %rax
	jne	.LBB364_15
# %bb.10:
	movl	$1, %eax
	movl	$2, %edi
	jmp	.LBB364_23
.LBB364_11:                             # %"$6"
	movq	(%rsi), %rsi
	testb	$2, %sil
	je	.LBB364_4
.LBB364_12:                             # %"$9"
	movq	%rsi, %rax
	shrq	$4, %rax
	movl	%eax, ($TtyPid)(%rip)
.LBB364_13:                             # %"$7"
	movq	%rsi, %r14
.LBB364_14:                             # %"$7"
	movq	%r14, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	retq
.LBB364_15:                             # %"$3.i"
	movq	-8(%rax), %rdi
	testb	$8, %dil
	jne	.LBB364_45
	.p2align	4, 0x90
# %bb.16:                               # %"$8.i"
	testb	$6, %dil
	jne	.LBB364_18
.LBB364_17:                             # %"$8.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rdi), %rdi
	testb	$6, %dil
	je	.LBB364_17
.LBB364_18:                             # %xName.exit
	movl	$1, %eax
	testb	$4, %dil
	movq	%rdi, %rcx
	je	.LBB364_21
# %bb.19:                               # %"$3.i10.preheader"
	movl	$1, %eax
	movq	%rdi, %rcx
	.p2align	4, 0x90
.LBB364_20:                             # %"$3.i10"
                                        # =>This Inner Loop Header: Depth=1
	addq	$8, %rax
	movq	4(%rcx), %rcx
	testb	$4, %cl
	jne	.LBB364_20
.LBB364_21:                             # %"$4.i"
	shrq	$4, %rcx
	je	.LBB364_23
	.p2align	4, 0x90
.LBB364_22:                             # %"$6.i12"
                                        # =>This Inner Loop Header: Depth=1
	incq	%rax
	shrq	$8, %rcx
	jne	.LBB364_22
.LBB364_23:                             # %bufSize.exit
	addq	$15, %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rcx
	xorl	%edx, %edx
	movq	%rcx, %rax
	testq	%rdx, %rdx
	jne	.LBB364_28
	jmp	.LBB364_24
	.p2align	4, 0x90
.LBB364_29:                             # %"$3.i14"
                                        #   in Loop: Header=BB364_28 Depth=1
	shrq	$8, %rdx
	incq	%rax
	testq	%rdx, %rdx
	jne	.LBB364_28
.LBB364_24:                             # %"$2.i.i"
	cmpq	$2, %rdi
	je	.LBB364_30
# %bb.25:                               # %"$5.i.i"
	testb	$2, %dil
	jne	.LBB364_27
# %bb.26:                               # %"$7.i.i"
	movq	-4(%rdi), %rdx
	movq	4(%rdi), %rdi
	jmp	.LBB364_28
	.p2align	4, 0x90
.LBB364_27:                             # %"$8.i.i"
	movq	%rdi, %rdx
	shrq	$4, %rdx
	movl	$2, %edi
	.p2align	4, 0x90
.LBB364_28:                             # %symByte.exit.i
                                        # =>This Inner Loop Header: Depth=1
	movb	%dl, (%rax)
	testb	%dl, %dl
	jne	.LBB364_29
	jmp	.LBB364_31
.LBB364_30:                             # %symByte.exit.thread.i
	movb	$0, (%rax)
.LBB364_31:                             # %bufString.exit
	subq	$32, %rsp
	callq	reopenTty
	addq	$32, %rsp
	testb	$1, %al
	je	.LBB364_14
# %bb.32:                               # %"$31"
	movq	($InFiles)(%rip), %rax
	movq	(%rax), %rax
	movq	($OutFiles)(%rip), %rcx
	movq	8(%rcx), %rdi
	movl	$0, 12(%rax)
	movq	$0, 24(%rax)
	movb	$1, 4128(%rax)
	subq	$32, %rsp
	leaq	OrgTermio(%rip), %rdx
	xorl	%ecx, %ecx
	callq	tcgetattr
	addq	$32, %rsp
	testl	%eax, %eax
	sete	Tio(%rip)
	movl	$0, 4(%rdi)
	movb	$1, 4104(%rdi)
	movq	($OutFiles)(%rip), %rax
	movq	16(%rax), %rax
	movb	$1, 4104(%rax)
	jmp	.LBB364_13
.LBB364_33:                             # %"$12"
	callq	strErrno
	leaq	.L$87(%rip), %r8
	movq	%rbx, %rcx
	xorl	%edx, %edx
	movq	%rax, %r9
	callq	err
.LBB364_34:                             # %"$16"
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	forkErr
.LBB364_35:                             # %"$18"
	movl	4(%rsi), %ecx
	subq	$32, %rsp
	callq	close
	addq	$32, %rsp
	movl	(%rsi), %esi
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movl	$4096, %eax                     # imm = 0x1000
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%rdi, %rbx
	addq	$8, %rbx
.LBB364_36:                             # %"$19"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	xorl	%ecx, %ecx
	movq	%rdi, %rdx
	callq	pollIn
	movl	%esi, %ecx
	movq	%rbx, %rdx
	callq	pollIn
	movq	%rdi, %rcx
	movl	$2, %edx
	movq	$-1, %r8
	callq	poll
	addq	$32, %rsp
	subq	$32, %rsp
	testl	%eax, %eax
	jns	.LBB364_38
# %bb.37:                               # %"$20"
                                        #   in Loop: Header=BB364_36 Depth=1
	callq	gErrno
	addq	$32, %rsp
	cmpl	$2, %eax
	je	.LBB364_36
	jmp	.LBB364_44
.LBB364_38:                             # %"$21"
                                        #   in Loop: Header=BB364_36 Depth=1
	movq	%rdi, %rcx
	callq	readyIn
	addq	$32, %rsp
	testb	$1, %al
	je	.LBB364_41
# %bb.39:                               # %"$25"
                                        #   in Loop: Header=BB364_36 Depth=1
	subq	$32, %rsp
	movl	$4096, %r8d                     # imm = 0x1000
	xorl	%ecx, %ecx
	movq	%r14, %rdx
	callq	read
	addq	$32, %rsp
	testq	%rax, %rax
	jle	.LBB364_44
# %bb.40:                               # %"$27"
                                        #   in Loop: Header=BB364_36 Depth=1
	subq	$32, %rsp
	movl	%esi, %ecx
	movq	%r14, %rdx
	movq	%rax, %r8
	callq	write
	addq	$32, %rsp
.LBB364_41:                             # %"$26"
                                        #   in Loop: Header=BB364_36 Depth=1
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	readyIn
	addq	$32, %rsp
	testb	$1, %al
	je	.LBB364_36
# %bb.42:                               # %"$28"
                                        #   in Loop: Header=BB364_36 Depth=1
	subq	$32, %rsp
	movl	$4096, %r8d                     # imm = 0x1000
	movl	%esi, %ecx
	movq	%r14, %rdx
	callq	read
	addq	$32, %rsp
	testq	%rax, %rax
	jle	.LBB364_44
# %bb.43:                               # %"$30"
                                        #   in Loop: Header=BB364_36 Depth=1
	subq	$32, %rsp
	movl	$1, %ecx
	movq	%r14, %rdx
	movq	%rax, %r8
	callq	write
	addq	$32, %rsp
	jmp	.LBB364_36
.LBB364_44:                             # %"$24"
	subq	$32, %rsp
	xorl	%ecx, %ecx
	callq	exit
.LBB364_45:                             # %"$6.i"
	subq	$32, %rsp
	movq	%rbx, %rcx
	movq	%rax, %rdx
	callq	nameErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cmd;
	.scl	2;
	.type	32;
	.endef
	.globl	_cmd                            # -- Begin function _cmd
	.p2align	4, 0x90
_cmd:                                   # @_cmd
.seh_proc _cmd
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rcx, %rdi
	movq	8(%rcx), %rax
	movq	(%rax), %rcx
	testb	$6, %cl
	jne	.LBB365_4
# %bb.1:                                # %"$3.i"
	testb	$8, %cl
	jne	.LBB365_2
# %bb.3:                                # %"$5.i"
	callq	evList
	movq	%rax, %rcx
	jmp	.LBB365_4
.LBB365_2:                              # %"$6.i"
	movq	(%rcx), %rcx
.LBB365_4:                              # %evSym.exit
	callq	xSym
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	jne	.LBB365_5
# %bb.19:                               # %"$2"
	movq	($AV0)(%rip), %rcx
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	jmp	mkStr                           # TAILCALL
.LBB365_5:                              # %"$3.i2"
	movq	-8(%rax), %rsi
	testb	$8, %sil
	jne	.LBB365_6
	.p2align	4, 0x90
# %bb.8:                                # %"$8.i"
	testb	$6, %sil
	jne	.LBB365_9
.LBB365_7:                              # %"$8.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rsi), %rsi
	testb	$6, %sil
	je	.LBB365_7
.LBB365_9:                              # %xName.exit
	movq	($AV0)(%rip), %rdx
	xorl	%ecx, %ecx
	testq	%rcx, %rcx
	jne	.LBB365_17
	.p2align	4, 0x90
.LBB365_11:                             # %"$2.i.i"
	cmpq	$2, %rsi
	je	.LBB365_12
# %bb.14:                               # %"$5.i.i"
	testb	$2, %sil
	jne	.LBB365_15
# %bb.16:                               # %"$7.i.i"
	movq	-4(%rsi), %rcx
	movq	4(%rsi), %rsi
	jmp	.LBB365_17
	.p2align	4, 0x90
.LBB365_15:                             # %"$8.i.i"
	movq	%rsi, %rcx
	shrq	$4, %rcx
	movl	$2, %esi
	.p2align	4, 0x90
.LBB365_17:                             # %symByte.exit.i
                                        # =>This Inner Loop Header: Depth=1
	movb	%cl, (%rdx)
	testb	%cl, %cl
	je	.LBB365_13
# %bb.18:                               # %"$3.i6"
                                        #   in Loop: Header=BB365_17 Depth=1
	shrq	$8, %rcx
	incq	%rdx
	testq	%rcx, %rcx
	jne	.LBB365_17
	jmp	.LBB365_11
.LBB365_12:                             # %symByte.exit.thread.i
	movb	$0, (%rdx)
.LBB365_13:                             # %"$4"
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
.LBB365_6:                              # %"$6.i3"
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	nameErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _dir;
	.scl	2;
	.type	32;
	.endef
	.globl	_dir                            # -- Begin function _dir
	.p2align	4, 0x90
_dir:                                   # @_dir
.seh_proc _dir
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rdi
	movq	8(%rcx), %r14
	movq	(%r14), %rcx
	testb	$6, %cl
	jne	.LBB366_4
# %bb.1:                                # %"$3.i"
	testb	$8, %cl
	jne	.LBB366_2
# %bb.3:                                # %"$5.i"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB366_4
.LBB366_2:                              # %"$6.i"
	movq	(%rcx), %rcx
.LBB366_4:                              # %evSym.exit
	subq	$32, %rsp
	callq	xSym
	addq	$32, %rsp
	leaq	SymTab+8(%rip), %r15
	cmpq	%r15, %rax
	jne	.LBB366_6
# %bb.5:
	leaq	.L$88(%rip), %rdi
	jmp	.LBB366_27
.LBB366_6:                              # %"$3.i9"
	movq	-8(%rax), %rcx
	testb	$8, %cl
	jne	.LBB366_7
	.p2align	4, 0x90
# %bb.9:                                # %"$8.i"
	testb	$6, %cl
	jne	.LBB366_10
.LBB366_8:                              # %"$8.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rcx
	testb	$6, %cl
	je	.LBB366_8
.LBB366_10:                             # %xName.exit
	movl	$1, %eax
	testb	$4, %cl
	movq	%rcx, %rdx
	je	.LBB366_13
# %bb.11:                               # %"$3.i.i.preheader"
	movl	$1, %eax
	movq	%rcx, %rdx
	.p2align	4, 0x90
.LBB366_12:                             # %"$3.i.i"
                                        # =>This Inner Loop Header: Depth=1
	addq	$8, %rax
	movq	4(%rdx), %rdx
	testb	$4, %dl
	jne	.LBB366_12
.LBB366_13:                             # %"$4.i.i"
	shrq	$4, %rdx
	je	.LBB366_15
	.p2align	4, 0x90
.LBB366_14:                             # %"$6.i.i"
                                        # =>This Inner Loop Header: Depth=1
	incq	%rax
	shrq	$8, %rdx
	jne	.LBB366_14
.LBB366_15:                             # %bufSize.exit.i
	testb	$2, %cl
	jne	.LBB366_16
# %bb.17:                               # %"$3.i13"
	movq	-4(%rcx), %rdx
	movq	%rdx, %rbx
	shrq	$8, %rbx
	cmpb	$126, %dl
	jne	.LBB366_19
	jmp	.LBB366_24
.LBB366_16:                             # %"$2.i"
	movq	%rcx, %rdx
	shrq	$4, %rdx
	movq	%rcx, %rbx
	shrq	$12, %rbx
	cmpb	$126, %dl
	je	.LBB366_24
.LBB366_19:                             # %"$4.i"
	cmpb	$64, %dl
	je	.LBB366_23
# %bb.20:                               # %"$4.i"
	cmpb	$43, %dl
	jne	.LBB366_26
# %bb.21:                               # %"$9.i"
	cmpb	$126, %bl
	je	.LBB366_24
# %bb.22:                               # %"$9.i"
	cmpb	$64, %bl
	jne	.LBB366_26
.LBB366_23:                             # %"$11.i"
	movq	($PilLen)(%rip), %rdx
	jmp	.LBB366_25
.LBB366_24:                             # %"$17.i"
	movq	($UsrLen)(%rip), %rdx
.LBB366_25:                             # %pathSize.exit
	leaq	-1(%rax,%rdx), %rax
.LBB366_26:                             # %pathSize.exit
	addq	$15, %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	subq	$32, %rsp
	movq	%rdi, %rdx
	callq	pathString
	addq	$32, %rsp
.LBB366_27:                             # %"$4"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	getDir
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB366_35
# %bb.28:                               # %"$5"
	movq	%rax, %rbx
	movq	8(%r14), %rax
	movq	(%rax), %rdi
	testb	$6, %dil
	jne	.LBB366_32
# %bb.29:                               # %"$9"
	testb	$8, %dil
	jne	.LBB366_30
# %bb.31:                               # %"$11"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdi
	jmp	.LBB366_32
.LBB366_30:                             # %"$12"
	movq	(%rdi), %rdi
.LBB366_32:                             # %"$8"
	leaq	SymTab+8(%rip), %r15
	cmpq	%r15, %rdi
	jne	.LBB366_36
	.p2align	4, 0x90
.LBB366_33:                             # %"$15"
                                        # =>This Inner Loop Header: Depth=1
	cmpb	$46, (%rbx)
	jne	.LBB366_36
# %bb.34:                               # %"$16"
                                        #   in Loop: Header=BB366_33 Depth=1
	subq	$32, %rsp
	xorl	%ecx, %ecx
	callq	getDir
	addq	$32, %rsp
	movq	%rax, %rbx
	testq	%rax, %rax
	jne	.LBB366_33
	jmp	.LBB366_35
.LBB366_36:                             # %"$14"
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	mkStr
	leaq	SymTab+8(%rip), %rbx
	movq	%rax, %rcx
	movq	%rbx, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %r15
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%r15, (%r14)
	movq	%r14, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r14, env(%rip)
	subq	$32, %rsp
	xorl	%ecx, %ecx
	callq	getDir
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB366_44
# %bb.37:                               # %"$21.lr.ph"
	cmpq	%rbx, %rdi
	jne	.LBB366_38
# %bb.40:                               # %"$21.us.preheader"
	leaq	SymTab+8(%rip), %rdi
	movq	%r15, %rbx
	jmp	.LBB366_41
	.p2align	4, 0x90
.LBB366_43:                             # %"$26.us"
                                        #   in Loop: Header=BB366_41 Depth=1
	subq	$32, %rsp
	xorl	%ecx, %ecx
	callq	getDir
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB366_44
.LBB366_41:                             # %"$21.us"
                                        # =>This Inner Loop Header: Depth=1
	cmpb	$46, (%rax)
	je	.LBB366_43
# %bb.42:                               # %"$25.us"
                                        #   in Loop: Header=BB366_41 Depth=1
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	mkStr
	movq	%rax, %rcx
	movq	%rdi, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, 8(%rbx)
	movq	%rax, %rbx
	jmp	.LBB366_43
.LBB366_38:
	leaq	SymTab+8(%rip), %rdi
	movq	%r15, %rbx
	.p2align	4, 0x90
.LBB366_39:                             # %"$21"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	mkStr
	movq	%rax, %rcx
	movq	%rdi, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rsi
	movq	%rax, 8(%rbx)
	subq	$32, %rsp
	xorl	%ecx, %ecx
	callq	getDir
	addq	$32, %rsp
	testq	%rax, %rax
	movq	%rsi, %rbx
	jne	.LBB366_39
.LBB366_44:                             # %"$22"
	movq	8(%r14), %rax
	movq	%rax, env(%rip)
.LBB366_35:                             # %"$18"
	movq	%r15, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB366_7:                              # %"$6.i10"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	nameErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _info;
	.scl	2;
	.type	32;
	.endef
	.globl	_info                           # -- Begin function _info
	.p2align	4, 0x90
_info:                                  # @_info
.seh_proc _info
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rbx
	movq	8(%rcx), %rsi
	movq	(%rsi), %rcx
	testb	$6, %cl
	jne	.LBB367_4
# %bb.1:                                # %"$3.i"
	testb	$8, %cl
	jne	.LBB367_2
# %bb.3:                                # %"$5.i"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB367_4
.LBB367_2:                              # %"$6.i"
	movq	(%rcx), %rcx
.LBB367_4:                              # %evSym.exit
	subq	$32, %rsp
	callq	xSym
	addq	$32, %rsp
	movq	%rax, SymTab+456(%rip)
	movl	$2, %edi
	leaq	SymTab+8(%rip), %r15
	cmpq	%r15, %rax
	jne	.LBB367_5
.LBB367_9:                              # %xName.exit
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	8(%rsi), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB367_13
# %bb.10:                               # %"$3"
	testb	$8, %al
	jne	.LBB367_11
# %bb.12:                               # %"$5"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	jmp	.LBB367_13
.LBB367_5:                              # %"$3.i4"
	movq	-8(%rax), %rdi
	testb	$8, %dil
	jne	.LBB367_6
	.p2align	4, 0x90
# %bb.8:                                # %"$8.i"
	testb	$6, %dil
	jne	.LBB367_9
.LBB367_7:                              # %"$8.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rdi), %rdi
	testb	$6, %dil
	je	.LBB367_7
	jmp	.LBB367_9
.LBB367_11:                             # %"$6"
	movq	(%rax), %rax
.LBB367_13:                             # %"$2"
	movl	$1, %ecx
	testb	$4, %dil
	movq	%rdi, %rdx
	je	.LBB367_16
# %bb.14:                               # %"$3.i.i.preheader"
	movl	$1, %ecx
	movq	%rdi, %rdx
	.p2align	4, 0x90
.LBB367_15:                             # %"$3.i.i"
                                        # =>This Inner Loop Header: Depth=1
	addq	$8, %rcx
	movq	4(%rdx), %rdx
	testb	$4, %dl
	jne	.LBB367_15
.LBB367_16:                             # %"$4.i.i"
	shrq	$4, %rdx
	je	.LBB367_18
	.p2align	4, 0x90
.LBB367_17:                             # %"$6.i.i"
                                        # =>This Inner Loop Header: Depth=1
	incq	%rcx
	shrq	$8, %rdx
	jne	.LBB367_17
.LBB367_18:                             # %bufSize.exit.i
	testb	$2, %dil
	jne	.LBB367_19
# %bb.20:                               # %"$3.i8"
	movq	-4(%rdi), %rdx
	movq	%rdx, %rbx
	shrq	$8, %rbx
	cmpb	$126, %dl
	jne	.LBB367_22
	jmp	.LBB367_27
.LBB367_19:                             # %"$2.i"
	movq	%rdi, %rdx
	shrq	$4, %rdx
	movq	%rdi, %rbx
	shrq	$12, %rbx
	cmpb	$126, %dl
	je	.LBB367_27
.LBB367_22:                             # %"$4.i"
	cmpb	$64, %dl
	je	.LBB367_26
# %bb.23:                               # %"$4.i"
	cmpb	$43, %dl
	jne	.LBB367_29
# %bb.24:                               # %"$9.i"
	cmpb	$126, %bl
	je	.LBB367_27
# %bb.25:                               # %"$9.i"
	cmpb	$64, %bl
	jne	.LBB367_29
.LBB367_26:                             # %"$11.i"
	movq	($PilLen)(%rip), %rdx
	jmp	.LBB367_28
.LBB367_27:                             # %"$17.i"
	movq	($UsrLen)(%rip), %rdx
.LBB367_28:                             # %pathSize.exit
	leaq	-1(%rcx,%rdx), %rcx
.LBB367_29:                             # %pathSize.exit
	cmpq	%r15, %rax
	sete	%bl
	addq	$15, %rcx
	andq	$-16, %rcx
	movq	%rcx, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	pathString
	movl	%ebx, %ecx
	movq	%rsi, %rdx
	movq	%r14, %r8
	callq	fileInfo
	addq	$32, %rsp
	testq	%rax, %rax
	js	.LBB367_50
# %bb.30:                               # %"$8"
	movq	%rax, %rdi
	andb	$3, %al
	cmpb	$1, %al
	je	.LBB367_31
# %bb.32:                               # %"$8"
	cmpb	$2, %al
	jne	.LBB367_34
# %bb.33:                               # %"$13"
	leaq	SymTab+8(%rip), %r14
	jmp	.LBB367_39
.LBB367_31:
	leaq	SymTab+280(%rip), %r14
	jmp	.LBB367_39
.LBB367_34:                             # %"$10"
	movq	(%r14), %rsi
	movq	%rsi, %rax
	shrq	$60, %rax
	jne	.LBB367_35
# %bb.38:                               # %"$15"
	shlq	$4, %rsi
	orq	$2, %rsi
	movq	%rsi, %r14
	jmp	.LBB367_39
.LBB367_35:                             # %"$14"
	movq	($Avail)(%rip), %r14
	testq	%r14, %r14
	jne	.LBB367_37
# %bb.36:                               # %"$2.i11"
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %r14
.LBB367_37:                             # %boxNum.exit
	movq	(%r14), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%rsi, (%r14)
	movq	$2, 8(%r14)
	addq	$4, %r14
.LBB367_39:                             # %"$11"
	movq	%rdi, %rax
	shrq	$26, %rax
	andq	$255, %rax
	leaq	SymTab+8(%rip), %rcx
	je	.LBB367_49
# %bb.40:                               # %"$11"
	movq	%rdi, %rsi
	shrq	$2, %rsi
	movzwl	%si, %r8d
	testq	%r8, %r8
	je	.LBB367_49
# %bb.41:                               # %"$11"
	movl	%edi, %ebx
	shrl	$18, %ebx
	movzbl	%bl, %r10d
	leaq	-1(%r10), %rdx
	cmpq	$11, %rdx
	ja	.LBB367_49
# %bb.42:                               # %"$6.i14"
	leaq	($Month)(%rip), %rdx
	movzbl	(%r10,%rdx), %edx
	cmpq	%rdx, %rax
	jbe	.LBB367_48
# %bb.43:                               # %"$8.i15"
	testb	$12, %dil
	jne	.LBB367_49
# %bb.44:                               # %"$8.i15"
	cmpl	$2, %r10d
	jne	.LBB367_49
# %bb.45:                               # %"$8.i15"
	cmpq	$29, %rax
	jne	.LBB367_49
# %bb.46:                               # %"$12.i"
	imull	$23593, %esi, %edx              # imm = 0x5C29
	rorw	$2, %dx
	movzwl	%dx, %edx
	cmpl	$655, %edx                      # imm = 0x28F
	ja	.LBB367_48
# %bb.47:                               # %"$12.i"
	movzwl	%si, %edx
	shrl	$4, %edx
	imull	$2622, %edx, %edx               # imm = 0xA3E
	shrl	$16, %edx
	imull	$400, %edx, %edx                # imm = 0x190
	subl	%edx, %esi
	testw	%si, %si
	jne	.LBB367_49
.LBB367_48:                             # %"$15.i"
	leal	(%r8,%r8,2), %ecx
	leal	-3(%r10,%rcx,4), %ecx
	movl	$2863311531, %r9d               # imm = 0xAAAAAAAB
	imulq	$458129845, %rcx, %rsi          # imm = 0x1B4E81B5
	imulq	%r9, %rcx
	movq	%rcx, %rdx
	shrq	$34, %rdx
	andl	$-2, %edx
	imull	$4404, %r8d, %r11d              # imm = 0x1134
	imull	$367, %r10d, %r8d               # imm = 0x16F
	movl	$4294966202, %ebx               # imm = 0xFFFFFBBA
	addl	%r11d, %ebx
	addl	%r8d, %ebx
	imulq	%r9, %rbx
	shrq	$35, %rbx
	shrq	$37, %rcx
	movq	%rsi, %r8
	shrq	$41, %r8
	shrq	$39, %rsi
	addq	%rcx, %rax
	addq	%r8, %rax
	addq	%rbx, %rax
	addl	%edx, %esi
	subq	%rsi, %rax
	shlq	$4, %rax
	orq	$2, %rax
	movq	%rax, %rcx
.LBB367_49:                             # %tmDate.exit
	shrq	$30, %rdi
	andq	$-16, %rdi
	orq	$2, %rdi
	subq	$32, %rsp
	movq	%rdi, %rdx
	callq	cons
	movq	%r14, %rcx
	movq	%rax, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %r15
.LBB367_50:                             # %"$9"
	movq	%r15, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB367_6:                              # %"$6.i5"
	subq	$32, %rsp
	movq	%rbx, %rcx
	movq	%rax, %rdx
	callq	nameErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _file;
	.scl	2;
	.type	32;
	.endef
	.globl	_file                           # -- Begin function _file
	.p2align	4, 0x90
_file:                                  # @_file
.seh_proc _file
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	leaq	32(%rsp), %rbp
	.seh_setframe %rbp, 32
	.seh_endprologue
	movq	($InFile)(%rip), %rcx
	leaq	SymTab+8(%rip), %rax
	testq	%rcx, %rcx
	je	.LBB368_10
# %bb.1:                                # %"$3"
	movq	(%rcx), %rbx
	testq	%rbx, %rbx
	je	.LBB368_10
# %bb.2:                                # %"$5"
	movslq	20(%rcx), %r15
	shlq	$4, %r15
	orq	$2, %r15
	subq	$32, %rsp
	movq	%rbx, %rcx
	movl	$47, %edx
	callq	strrchr
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB368_11
# %bb.3:                                # %"$7"
	movq	%rax, %rdi
	incq	%rdi
	movq	$4, -32(%rbp)
	leaq	-16(%rbp), %rax
	movq	$2, -16(%rbp)
	movq	env(%rip), %rcx
	movq	%rcx, -8(%rbp)
	movq	%rax, env(%rip)
	leaq	SymTab+8(%rip), %r14
	cmpq	%rdi, %rbx
	je	.LBB368_9
# %bb.4:                                # %"$3.i.preheader"
	leaq	-32(%rbp), %rsi
	.p2align	4, 0x90
.LBB368_5:                              # %"$3.i"
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%rbx), %ecx
	testb	%cl, %cl
	je	.LBB368_7
# %bb.6:                                # %"$5.i"
                                        #   in Loop: Header=BB368_5 Depth=1
	subq	$32, %rsp
	movq	%rsi, %rdx
	callq	byteSym
	addq	$32, %rsp
	incq	%rbx
	cmpq	%rbx, %rdi
	jne	.LBB368_5
.LBB368_7:                              # %"$4.i"
	movq	-16(%rbp), %rcx
	cmpq	$2, %rcx
	je	.LBB368_9
# %bb.8:                                # %"$3.i.i"
	subq	$32, %rsp
	xorl	%edx, %edx
	callq	consSym
	addq	$32, %rsp
	movq	%rax, %r14
.LBB368_9:                              # %mkStrE.exit
	movq	-8(%rbp), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%r14, (%rsi)
	movq	%rsi, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rsi, env(%rip)
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	mkStr
	movq	%rax, %rcx
	movq	%r15, %rdx
	callq	cons
	movq	%r14, %rcx
	movq	%rax, %rdx
	callq	cons
	addq	$32, %rsp
	movq	8(%rsi), %rcx
	movq	%rcx, env(%rip)
.LBB368_10:                             # %"$6"
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB368_11:                             # %"$8"
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	mkStr
	movq	%rax, %rcx
	movq	%r15, %rdx
	callq	cons
	addq	$32, %rsp
	leaq	SymTab+8(%rip), %rcx
	movq	%rax, %rdx
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	cons                            # TAILCALL
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _argv;
	.scl	2;
	.type	32;
	.endef
	.globl	_argv                           # -- Begin function _argv
	.p2align	4, 0x90
_argv:                                  # @_argv
.seh_proc _argv
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %r14
	movq	8(%rcx), %rsi
	movq	($AV)(%rip), %rbx
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.LBB369_3
# %bb.1:                                # %"$3"
	cmpb	$45, (%rax)
	jne	.LBB369_3
# %bb.2:                                # %"$2"
	leaq	8(%rbx), %rcx
	cmpb	$0, 1(%rax)
	cmoveq	%rcx, %rbx
.LBB369_3:                              # %"$2.thread"
	leaq	SymTab+8(%rip), %rdi
	cmpq	%rdi, %rsi
	jne	.LBB369_4
# %bb.8:                                # %"$7"
	movq	(%rbx), %rcx
	testq	%rcx, %rcx
	je	.LBB369_9
# %bb.10:                               # %"$10"
	subq	$32, %rsp
	callq	mkStr
	leaq	SymTab+8(%rip), %rdx
	movq	%rax, %rcx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %r12
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%r12, (%r14)
	movq	%r14, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r14, env(%rip)
	movq	8(%rbx), %rcx
	testq	%rcx, %rcx
	je	.LBB369_13
# %bb.11:                               # %"$14.preheader"
	addq	$16, %rbx
	leaq	SymTab+8(%rip), %rsi
	movq	%r12, %rdi
	.p2align	4, 0x90
.LBB369_12:                             # %"$14"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	callq	mkStr
	movq	%rax, %rcx
	movq	%rsi, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, 8(%rdi)
	movq	(%rbx), %rcx
	addq	$8, %rbx
	testq	%rcx, %rcx
	movq	%rax, %rdi
	jne	.LBB369_12
.LBB369_13:                             # %"$15"
	movq	8(%r14), %rax
	movq	%rax, env(%rip)
	jmp	.LBB369_29
.LBB369_4:
	leaq	SymTab+280(%rip), %r15
	jmp	.LBB369_5
	.p2align	4, 0x90
.LBB369_28:                             # %"$40"
                                        #   in Loop: Header=BB369_5 Depth=1
	movq	%r12, (%rdx)
	cmpq	%rdi, %rsi
	je	.LBB369_29
.LBB369_5:                              # %"$16"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %sil
	jne	.LBB369_6
# %bb.22:                               # %"$17"
                                        #   in Loop: Header=BB369_5 Depth=1
	movq	(%rbx), %rcx
	testq	%rcx, %rcx
	je	.LBB369_23
# %bb.24:                               # %"$33"
                                        #   in Loop: Header=BB369_5 Depth=1
	addq	$8, %rbx
	subq	$32, %rsp
	callq	mkStr
	addq	$32, %rsp
	movq	%rax, %r12
	jmp	.LBB369_25
	.p2align	4, 0x90
.LBB369_23:                             #   in Loop: Header=BB369_5 Depth=1
	movq	%rdi, %r12
.LBB369_25:                             # %"$34"
                                        #   in Loop: Header=BB369_5 Depth=1
	movq	(%rsi), %rdx
	testb	$6, %dl
	jne	.LBB369_31
# %bb.26:                               # %"$36"
                                        #   in Loop: Header=BB369_5 Depth=1
	movq	8(%rsi), %rsi
	cmpq	%rdi, %rdx
	jb	.LBB369_28
# %bb.27:                               # %"$36"
                                        #   in Loop: Header=BB369_5 Depth=1
	cmpq	%r15, %rdx
	ja	.LBB369_28
# %bb.32:                               # %"$39"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	protErr
.LBB369_6:                              # %"$19"
	testb	$6, %sil
	jne	.LBB369_7
# %bb.14:                               # %"$21"
	leaq	SymTab+8(%rip), %r12
	cmpq	%r12, %rsi
	jb	.LBB369_16
# %bb.15:                               # %"$21"
	cmpq	%r15, %rsi
	jbe	.LBB369_30
.LBB369_16:                             # %"$25"
	movq	(%rbx), %rcx
	testq	%rcx, %rcx
	je	.LBB369_21
# %bb.17:                               # %"$26"
	subq	$32, %rsp
	callq	mkStr
	leaq	SymTab+8(%rip), %rdx
	movq	%rax, %rcx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %r12
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%r12, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r15, env(%rip)
	movq	8(%rbx), %rcx
	testq	%rcx, %rcx
	je	.LBB369_20
# %bb.18:                               # %"$30.preheader"
	addq	$16, %rbx
	leaq	SymTab+8(%rip), %r14
	movq	%r12, %rdi
	.p2align	4, 0x90
.LBB369_19:                             # %"$30"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	callq	mkStr
	movq	%rax, %rcx
	movq	%r14, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, 8(%rdi)
	movq	(%rbx), %rcx
	addq	$8, %rbx
	testq	%rcx, %rcx
	movq	%rax, %rdi
	jne	.LBB369_19
.LBB369_20:                             # %"$31"
	movq	8(%r15), %rax
	movq	%rax, env(%rip)
.LBB369_21:                             # %"$28"
	movq	%r12, (%rsi)
	jmp	.LBB369_29
.LBB369_9:
	leaq	SymTab+8(%rip), %r12
.LBB369_29:                             # %"$9"
	movq	%r12, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB369_31:                             # %"$35"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	varErr
.LBB369_7:                              # %"$20"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rsi, %rdx
	callq	varErr
.LBB369_30:                             # %"$24"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rsi, %rdx
	callq	protErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _opt;
	.scl	2;
	.type	32;
	.endef
	.globl	_opt                            # -- Begin function _opt
	.p2align	4, 0x90
_opt:                                   # @_opt
# %bb.0:                                # %"$1"
	movq	($AV)(%rip), %rax
	movq	(%rax), %rcx
	testq	%rcx, %rcx
	je	.LBB370_3
# %bb.1:                                # %"$3"
	cmpb	$45, (%rcx)
	jne	.LBB370_4
# %bb.2:                                # %"$5"
	cmpb	$0, 1(%rcx)
	je	.LBB370_3
.LBB370_4:                              # %"$7"
	addq	$8, %rax
	movq	%rax, ($AV)(%rip)
	jmp	mkStr                           # TAILCALL
.LBB370_3:                              # %"$8"
	leaq	SymTab+8(%rip), %rax
	retq
                                        # -- End function
	.def	 _errno;
	.scl	2;
	.type	32;
	.endef
	.globl	_errno                          # -- Begin function _errno
	.p2align	4, 0x90
_errno:                                 # @_errno
.seh_proc _errno
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	callq	nErrno
	cltq
	shlq	$4, %rax
	orq	$2, %rax
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _nat;
	.scl	2;
	.type	32;
	.endef
	.globl	_nat                            # -- Begin function _nat
	.p2align	4, 0x90
_nat:                                   # @_nat
.seh_proc _nat
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %r15
	movq	8(%rax), %rsi
	testb	$6, %r15b
	movq	%rcx, (%rbp)                    # 8-byte Spill
	jne	.LBB372_4
# %bb.1:                                # %"$3"
	testb	$8, %r15b
	jne	.LBB372_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%r15, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r15
	jmp	.LBB372_4
.LBB372_2:                              # %"$6"
	movq	(%r15), %r15
.LBB372_4:                              # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r13
	movq	%r15, (%r13)
	movq	%r13, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r13, env(%rip)
	movq	(%rsi), %rcx
	movq	8(%rsi), %rbx
	testb	$6, %cl
	jne	.LBB372_8
# %bb.5:                                # %"$8"
	testb	$8, %cl
	jne	.LBB372_6
# %bb.7:                                # %"$10"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB372_8
.LBB372_6:                              # %"$11"
	movq	(%rcx), %rcx
.LBB372_8:                              # %"$7"
	subq	$32, %rsp
	leaq	SymTab+8(%rip), %r14
	movq	%r14, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %r12
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%r12, (%rax)
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%rcx, (%rdx)
	movq	%rax, env(%rip)
	testb	$15, %bl
	je	.LBB372_9
.LBB372_15:                             # %"$14"
	subq	$32, %rsp
	movq	(%rbp), %rcx                    # 8-byte Reload
	xorl	%edx, %edx
	movq	%r15, %r8
	movq	%r12, %r9
	callq	ffi
	addq	$32, %rsp
	movq	8(%r13), %rcx
	movq	%rcx, env(%rip)
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB372_9:                              # %"$13.preheader"
	movq	%r12, %rdi
	jmp	.LBB372_10
.LBB372_13:                             # %"$18"
                                        #   in Loop: Header=BB372_10 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	.p2align	4, 0x90
.LBB372_14:                             # %"$15"
                                        #   in Loop: Header=BB372_10 Depth=1
	movq	env(%rip), %rdx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rcx, (%rsi)
	movq	%rsi, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	%rsi, env(%rip)
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rcx, (%rax)
	movq	%rax, %rcx
	orq	$8, %rcx
	movq	%r14, (%rcx)
	movq	%rax, 8(%rdi)
	testb	$15, %bl
	movq	%rax, %rdi
	jne	.LBB372_15
.LBB372_10:                             # %"$13"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rbx), %rcx
	movq	8(%rbx), %rbx
	testb	$6, %cl
	jne	.LBB372_14
# %bb.11:                               # %"$16"
                                        #   in Loop: Header=BB372_10 Depth=1
	testb	$8, %cl
	je	.LBB372_13
# %bb.12:                               # %"$19"
                                        #   in Loop: Header=BB372_10 Depth=1
	movq	(%rcx), %rcx
	jmp	.LBB372_14
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _native;
	.scl	2;
	.type	32;
	.endef
	.globl	_native                         # -- Begin function _native
	.p2align	4, 0x90
_native:                                # @_native
.seh_proc _native
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$24, %rsp
	.seh_stackalloc 24
	leaq	16(%rsp), %rbp
	.seh_setframe %rbp, 16
	.seh_endprologue
	movq	%rcx, %r14
	movq	8(%rcx), %rax
	movq	(%rax), %rbx
	movq	8(%rax), %r15
	testb	$6, %bl
	jne	.LBB373_4
# %bb.1:                                # %"$3"
	testb	$8, %bl
	jne	.LBB373_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rbx
.LBB373_4:                              # %"$2"
	testb	$2, %bl
	jne	.LBB373_5
.LBB373_6:                              # %"$8"
	testb	$4, %bl
	jne	.LBB373_7
# %bb.8:                                # %"$10"
	testb	$15, %bl
	je	.LBB373_56
# %bb.9:                                # %"$12"
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rbx
	jne	.LBB373_11
# %bb.10:
	movl	$2, %ecx
	movl	$1, %eax
.LBB373_23:                             # %"$2.i"
	movq	%rcx, %rdx
	shrq	$4, %rdx
	movq	%rcx, %rsi
	shrq	$12, %rsi
	cmpb	$126, %dl
	je	.LBB373_31
.LBB373_26:                             # %"$4.i"
	cmpb	$64, %dl
	je	.LBB373_30
# %bb.27:                               # %"$4.i"
	cmpb	$43, %dl
	jne	.LBB373_33
# %bb.28:                               # %"$9.i"
	cmpb	$126, %sil
	je	.LBB373_31
# %bb.29:                               # %"$9.i"
	cmpb	$64, %sil
	jne	.LBB373_33
.LBB373_30:                             # %"$11.i"
	movq	($PilLen)(%rip), %rdx
	jmp	.LBB373_32
.LBB373_7:                              # %"$11"
	movq	-4(%rbx), %rdi
	jmp	.LBB373_40
.LBB373_2:                              # %"$6"
	movq	(%rbx), %rbx
	testb	$2, %bl
	je	.LBB373_6
.LBB373_5:                              # %"$9"
	shrq	$4, %rbx
	movq	%rbx, %rdi
	jmp	.LBB373_40
.LBB373_11:                             # %"$3.i"
	movq	-8(%rbx), %rcx
	testb	$8, %cl
	jne	.LBB373_12
	.p2align	4, 0x90
# %bb.14:                               # %"$8.i"
	testb	$6, %cl
	jne	.LBB373_15
.LBB373_13:                             # %"$8.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rcx
	testb	$6, %cl
	je	.LBB373_13
.LBB373_15:                             # %xName.exit
	cmpq	$1026, %rcx                     # imm = 0x402
	jne	.LBB373_17
# %bb.16:                               # %"$15"
	movq	$2, (%rbx)
	xorl	%edi, %edi
	jmp	.LBB373_40
.LBB373_17:                             # %"$14"
	movl	$1, %eax
	testb	$4, %cl
	movq	%rcx, %rdx
	je	.LBB373_20
# %bb.18:                               # %"$3.i.i.preheader"
	movl	$1, %eax
	movq	%rcx, %rdx
	.p2align	4, 0x90
.LBB373_19:                             # %"$3.i.i"
                                        # =>This Inner Loop Header: Depth=1
	addq	$8, %rax
	movq	4(%rdx), %rdx
	testb	$4, %dl
	jne	.LBB373_19
.LBB373_20:                             # %"$4.i.i"
	shrq	$4, %rdx
	je	.LBB373_22
	.p2align	4, 0x90
.LBB373_21:                             # %"$6.i.i"
                                        # =>This Inner Loop Header: Depth=1
	incq	%rax
	shrq	$8, %rdx
	jne	.LBB373_21
.LBB373_22:                             # %bufSize.exit.i
	testb	$2, %cl
	jne	.LBB373_23
# %bb.24:                               # %"$3.i17"
	movq	-4(%rcx), %rdx
	movq	%rdx, %rsi
	shrq	$8, %rsi
	cmpb	$126, %dl
	jne	.LBB373_26
.LBB373_31:                             # %"$17.i"
	movq	($UsrLen)(%rip), %rdx
.LBB373_32:                             # %pathSize.exit
	leaq	-1(%rax,%rdx), %rax
.LBB373_33:                             # %pathSize.exit
	addq	$15, %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	subq	$32, %rsp
	movq	%rsi, %rdx
	callq	pathString
	movq	%rsi, %rcx
	callq	dlOpen
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB373_57
# %bb.34:                               # %"$17"
	movq	%rax, %rdi
	shrq	$60, %rax
	jne	.LBB373_35
# %bb.38:                               # %"$19"
	movq	%rdi, %rax
	shlq	$4, %rax
	orq	$2, %rax
	jmp	.LBB373_39
.LBB373_35:                             # %"$18"
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	jne	.LBB373_37
# %bb.36:                               # %"$2.i19"
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rax
.LBB373_37:                             # %boxNum.exit
	movq	(%rax), %rcx
	movq	%rcx, ($Avail)(%rip)
	movq	%rdi, (%rax)
	movq	$2, 8(%rax)
	addq	$4, %rax
.LBB373_39:                             # %"$20"
	movq	%rax, (%rbx)
.LBB373_40:                             # %"$7"
	movq	(%r15), %r12
	movq	8(%r15), %rsi
	testb	$6, %r12b
	movq	%rdi, (%rbp)                    # 8-byte Spill
	jne	.LBB373_44
# %bb.41:                               # %"$22"
	testb	$8, %r12b
	jne	.LBB373_42
# %bb.43:                               # %"$24"
	subq	$32, %rsp
	movq	%r12, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r12
	jmp	.LBB373_44
.LBB373_42:                             # %"$25"
	movq	(%r12), %r12
.LBB373_44:                             # %"$21"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%r12, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r15, env(%rip)
	movq	(%rsi), %rcx
	movq	8(%rsi), %rsi
	testb	$6, %cl
	movq	%r14, -8(%rbp)                  # 8-byte Spill
	jne	.LBB373_48
# %bb.45:                               # %"$27"
	testb	$8, %cl
	jne	.LBB373_46
# %bb.47:                               # %"$29"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB373_48
.LBB373_46:                             # %"$30"
	movq	(%rcx), %rcx
.LBB373_48:                             # %"$26"
	subq	$32, %rsp
	leaq	SymTab+8(%rip), %rbx
	movq	%rbx, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %r14
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%r14, (%rax)
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%rcx, (%rdx)
	movq	%rax, env(%rip)
	testb	$15, %sil
	je	.LBB373_49
.LBB373_55:                             # %"$33"
	subq	$32, %rsp
	movq	-8(%rbp), %rcx                  # 8-byte Reload
	movq	(%rbp), %rdx                    # 8-byte Reload
	movq	%r12, %r8
	movq	%r14, %r9
	callq	ffi
	addq	$32, %rsp
	movq	8(%r15), %rcx
	movq	%rcx, env(%rip)
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB373_49:                             # %"$32.preheader"
	movq	%r14, %r13
	jmp	.LBB373_50
.LBB373_53:                             # %"$37"
                                        #   in Loop: Header=BB373_50 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	.p2align	4, 0x90
.LBB373_54:                             # %"$34"
                                        #   in Loop: Header=BB373_50 Depth=1
	movq	env(%rip), %rdx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rcx, (%rdi)
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	%rdi, env(%rip)
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rcx, (%rax)
	movq	%rax, %rcx
	orq	$8, %rcx
	movq	%rbx, (%rcx)
	movq	%rax, 8(%r13)
	testb	$15, %sil
	movq	%rax, %r13
	jne	.LBB373_55
.LBB373_50:                             # %"$32"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rcx
	movq	8(%rsi), %rsi
	testb	$6, %cl
	jne	.LBB373_54
# %bb.51:                               # %"$35"
                                        #   in Loop: Header=BB373_50 Depth=1
	testb	$8, %cl
	je	.LBB373_53
# %bb.52:                               # %"$38"
                                        #   in Loop: Header=BB373_50 Depth=1
	movq	(%rcx), %rcx
	jmp	.LBB373_54
.LBB373_56:                             # %"$13"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rbx, %rdx
	callq	argErr
.LBB373_57:                             # %"$16"
	subq	$32, %rsp
	callq	dlerror
	leaq	.L$91(%rip), %r8
	movq	%r14, %rcx
	movq	%rbx, %rdx
	movq	%rax, %r9
	callq	err
.LBB373_12:                             # %"$6.i"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rbx, %rdx
	callq	nameErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _struct;
	.scl	2;
	.type	32;
	.endef
	.globl	_struct                         # -- Begin function _struct
	.p2align	4, 0x90
_struct:                                # @_struct
.seh_proc _struct
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rdi
	movq	8(%rcx), %rax
	movq	(%rax), %r15
	movq	8(%rax), %rbx
	testb	$6, %r15b
	jne	.LBB374_4
# %bb.1:                                # %"$3"
	testb	$8, %r15b
	jne	.LBB374_2
# %bb.3:                                # %"$5"
	subq	$32, %rsp
	movq	%r15, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r15
	jmp	.LBB374_4
.LBB374_2:                              # %"$6"
	movq	(%r15), %r15
.LBB374_4:                              # %"$2"
	testb	$6, %r15b
	je	.LBB374_25
# %bb.5:                                # %"$8"
	testb	$2, %r15b
	jne	.LBB374_6
# %bb.7:                                # %"$10"
	movq	-4(%r15), %r15
	jmp	.LBB374_8
.LBB374_6:                              # %"$9"
	shrq	$4, %r15
.LBB374_8:                              # %"$11"
	movq	(%rbx), %rdi
	testb	$6, %dil
	jne	.LBB374_12
# %bb.9:                                # %"$13"
	testb	$8, %dil
	jne	.LBB374_10
# %bb.11:                               # %"$15"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdi
	jmp	.LBB374_12
.LBB374_10:                             # %"$16"
	movq	(%rdi), %rdi
.LBB374_12:                             # %"$12"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%rdi, (%r14)
	movq	%r14, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r14, env(%rip)
	movq	8(%rbx), %rsi
	testb	$15, %sil
	je	.LBB374_13
.LBB374_19:                             # %"$19"
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rdi
	je	.LBB374_24
# %bb.20:                               # %"$26"
	leaq	SymTab+328(%rip), %rax
	cmpq	%rax, %rdi
	jne	.LBB374_22
# %bb.21:                               # %"$29"
	subq	$32, %rsp
	movq	%r15, %rcx
	callq	mkStr
	jmp	.LBB374_23
.LBB374_13:                             # %"$18.preheader"
	movq	%r15, %rbx
	jmp	.LBB374_14
.LBB374_17:                             # %"$23"
                                        #   in Loop: Header=BB374_14 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	.p2align	4, 0x90
.LBB374_18:                             # %"$20"
                                        #   in Loop: Header=BB374_14 Depth=1
	subq	$32, %rsp
	movq	%rbx, %rdx
	callq	natBuf
	addq	$32, %rsp
	addq	%rax, %rbx
	movq	8(%rsi), %rsi
	testb	$15, %sil
	jne	.LBB374_19
.LBB374_14:                             # %"$18"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rcx
	testb	$6, %cl
	jne	.LBB374_18
# %bb.15:                               # %"$21"
                                        #   in Loop: Header=BB374_14 Depth=1
	testb	$8, %cl
	je	.LBB374_17
# %bb.16:                               # %"$24"
                                        #   in Loop: Header=BB374_14 Depth=1
	movq	(%rcx), %rcx
	jmp	.LBB374_18
.LBB374_22:                             # %"$28"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdx
	movq	%r15, (%rdx)
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	natRetBuf
.LBB374_23:                             # %"$25"
	addq	$32, %rsp
.LBB374_24:                             # %"$25"
	movq	8(%r14), %rcx
	movq	%rcx, env(%rip)
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB374_25:                             # %"$7"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%r15, %rdx
	callq	numErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _lisp;
	.scl	2;
	.type	32;
	.endef
	.globl	_lisp                           # -- Begin function _lisp
	.p2align	4, 0x90
_lisp:                                  # @_lisp
.seh_proc _lisp
# %bb.0:                                # %"$1"
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rcx, %r14
	movq	8(%rcx), %rdi
	movq	(%rdi), %rcx
	testb	$6, %cl
	jne	.LBB375_4
# %bb.1:                                # %"$3.i"
	testb	$8, %cl
	jne	.LBB375_2
# %bb.3:                                # %"$5.i"
	callq	evList
	movq	%rax, %rcx
	jmp	.LBB375_4
.LBB375_2:                              # %"$6.i"
	movq	(%rcx), %rcx
.LBB375_4:                              # %evSym.exit
	callq	xSym
	leaq	cbFuns(%rip), %rbx
	leaq	gcData+40(%rip), %rsi
	leaq	gcData+416(%rip), %rcx
	.p2align	4, 0x90
.LBB375_5:                              # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	cmpq	(%rsi), %rax
	je	.LBB375_12
# %bb.6:                                # %"$3"
                                        #   in Loop: Header=BB375_5 Depth=1
	addq	$16, %rsi
	addq	$8, %rbx
	cmpq	%rcx, %rsi
	jbe	.LBB375_5
# %bb.7:                                # %"$7.preheader"
	leaq	cbFuns(%rip), %rbx
	leaq	gcData+40(%rip), %rsi
	leaq	SymTab+8(%rip), %rdx
	.p2align	4, 0x90
.LBB375_8:                              # %"$7"
                                        # =>This Inner Loop Header: Depth=1
	cmpq	%rdx, 8(%rsi)
	je	.LBB375_11
# %bb.9:                                # %"$8"
                                        #   in Loop: Header=BB375_8 Depth=1
	addq	$16, %rsi
	addq	$8, %rbx
	cmpq	%rcx, %rsi
	jbe	.LBB375_8
# %bb.10:                               # %"$10"
	leaq	.L$92(%rip), %r8
	movq	%r14, %rcx
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	callq	err
.LBB375_11:                             # %"$9"
	movq	%rax, (%rsi)
.LBB375_12:                             # %"$4"
	movq	8(%rdi), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB375_16
# %bb.13:                               # %"$13"
	testb	$8, %al
	jne	.LBB375_14
# %bb.15:                               # %"$15"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB375_16
.LBB375_14:                             # %"$16"
	movq	(%rax), %rax
.LBB375_16:                             # %"$12"
	movq	%rax, 8(%rsi)
	movq	(%rbx), %rsi
	movq	%rsi, %rax
	shrq	$60, %rax
	jne	.LBB375_17
# %bb.20:                               # %"$18"
	shlq	$4, %rsi
	orq	$2, %rsi
	movq	%rsi, %rax
	jmp	.LBB375_21
.LBB375_17:                             # %"$17"
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	jne	.LBB375_19
# %bb.18:                               # %"$2.i"
	callq	gc
	movq	($Avail)(%rip), %rax
.LBB375_19:                             # %boxNum.exit
	movq	(%rax), %rcx
	movq	%rcx, ($Avail)(%rip)
	movq	%rsi, (%rax)
	movq	$2, 8(%rax)
	addq	$4, %rax
.LBB375_21:                             # %"$19"
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _args;
	.scl	2;
	.type	32;
	.endef
	.globl	_args                           # -- Begin function _args
	.p2align	4, 0x90
_args:                                  # @_args
# %bb.0:                                # %"$1"
	testb	$15, env+88(%rip)
	leaq	SymTab+280(%rip), %rcx
	leaq	SymTab+8(%rip), %rax
	cmoveq	%rcx, %rax
	retq
                                        # -- End function
	.def	 _next;
	.scl	2;
	.type	32;
	.endef
	.globl	_next                           # -- Begin function _next
	.p2align	4, 0x90
_next:                                  # @_next
# %bb.0:                                # %"$1"
	movq	env+88(%rip), %rax
	movq	(%rax), %rcx
	movq	%rcx, env+88(%rip)
	movq	8(%rax), %rax
	retq
                                        # -- End function
	.def	 _arg;
	.scl	2;
	.type	32;
	.endef
	.globl	_arg                            # -- Begin function _arg
	.p2align	4, 0x90
_arg:                                   # @_arg
.seh_proc _arg
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB378_4
# %bb.1:                                # %"$3.i"
	testb	$8, %al
	jne	.LBB378_2
# %bb.3:                                # %"$5.i"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB378_4
.LBB378_2:                              # %"$6.i"
	movq	(%rax), %rax
.LBB378_4:                              # %"$2.i"
	testb	$2, %al
	je	.LBB378_11
# %bb.5:                                # %evCnt.exit
	movq	%rax, %rdx
	shrq	$4, %rdx
	movq	%rdx, %rcx
	negq	%rcx
	testb	$8, %al
	cmoveq	%rdx, %rcx
	testq	%rcx, %rcx
	jle	.LBB378_6
# %bb.7:                                # %"$5.preheader"
	incq	%rcx
	leaq	env+88(%rip), %rax
	.p2align	4, 0x90
.LBB378_8:                              # %"$5"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rax), %rax
	decq	%rcx
	cmpq	$1, %rcx
	jg	.LBB378_8
# %bb.9:                                # %"$7"
	movq	8(%rax), %rax
	jmp	.LBB378_10
.LBB378_6:
	leaq	SymTab+8(%rip), %rax
.LBB378_10:                             # %"$4"
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB378_11:                             # %"$2.i.i"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	cntErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _rest;
	.scl	2;
	.type	32;
	.endef
	.globl	_rest                           # -- Begin function _rest
	.p2align	4, 0x90
_rest:                                  # @_rest
.seh_proc _rest
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	env+88(%rip), %rdi
	testb	$15, %dil
	je	.LBB379_2
# %bb.1:
	movq	%rdi, %r15
	jmp	.LBB379_6
.LBB379_2:                              # %"$3"
	movq	8(%rdi), %rcx
	subq	$32, %rsp
	leaq	SymTab+8(%rip), %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %r15
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%r15, (%r14)
	movq	%r14, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r14, env(%rip)
	movq	(%rdi), %rbx
	testb	$15, %bl
	jne	.LBB379_5
# %bb.3:                                # %"$6.preheader"
	leaq	SymTab+8(%rip), %rdi
	movq	%r15, %rsi
	.p2align	4, 0x90
.LBB379_4:                              # %"$6"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rbx), %rcx
	subq	$32, %rsp
	movq	%rdi, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, 8(%rsi)
	movq	(%rbx), %rbx
	testb	$15, %bl
	movq	%rax, %rsi
	je	.LBB379_4
.LBB379_5:                              # %"$7"
	movq	8(%r14), %rax
	movq	%rax, env(%rip)
.LBB379_6:                              # %"$4"
	movq	%r15, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _adr;
	.scl	2;
	.type	32;
	.endef
	.globl	_adr                            # -- Begin function _adr
	.p2align	4, 0x90
_adr:                                   # @_adr
.seh_proc _adr
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	testb	$6, %sil
	jne	.LBB380_4
# %bb.1:                                # %"$4"
	testb	$8, %sil
	jne	.LBB380_2
# %bb.3:                                # %"$6"
	movq	%rsi, %rcx
	callq	evList
	movq	%rax, %rsi
.LBB380_4:                              # %"$3"
	testb	$2, %sil
	jne	.LBB380_5
.LBB380_6:                              # %"$8"
	testb	$4, %sil
	jne	.LBB380_7
# %bb.8:                                # %"$10"
	movq	%rsi, %rax
	shrq	$60, %rax
	jne	.LBB380_9
# %bb.12:                               # %"$13"
	shlq	$4, %rsi
	orq	$2, %rsi
	jmp	.LBB380_13
.LBB380_7:                              # %"$11"
	movq	-4(%rsi), %rax
	jmp	.LBB380_14
.LBB380_2:                              # %"$7"
	movq	(%rsi), %rsi
	testb	$2, %sil
	je	.LBB380_6
.LBB380_5:                              # %"$9"
	shrq	$4, %rsi
.LBB380_13:                             # %"$2"
	movq	%rsi, %rax
.LBB380_14:                             # %"$2"
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB380_9:                              # %"$12"
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	jne	.LBB380_11
# %bb.10:                               # %"$2.i"
	callq	gc
	movq	($Avail)(%rip), %rax
.LBB380_11:                             # %boxNum.exit
	movq	(%rax), %rcx
	movq	%rcx, ($Avail)(%rip)
	movq	%rsi, (%rax)
	movq	$2, 8(%rax)
	addq	$4, %rax
	jmp	.LBB380_14
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _trail;
	.scl	2;
	.type	32;
	.endef
	.globl	_trail                          # -- Begin function _trail
	.p2align	4, 0x90
_trail:                                 # @_trail
.seh_proc _trail
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rcx
	testb	$6, %cl
	jne	.LBB381_4
# %bb.1:                                # %"$3"
	testb	$8, %cl
	jne	.LBB381_2
# %bb.3:                                # %"$5"
	callq	evList
	movq	%rax, %rcx
	jmp	.LBB381_4
.LBB381_2:                              # %"$6"
	movq	(%rcx), %rcx
.LBB381_4:                              # %"$2"
	movq	env+8(%rip), %rdi
	leaq	SymTab+8(%rip), %rax
	testq	%rdi, %rdi
	je	.LBB381_15
# %bb.5:                                # %"$8.lr.ph"
	cmpq	%rax, %rcx
	jne	.LBB381_6
# %bb.10:                               # %"$8.us.preheader"
	leaq	SymTab+8(%rip), %rax
	leaq	SymTab+440(%rip), %rsi
	jmp	.LBB381_11
	.p2align	4, 0x90
.LBB381_14:                             # %"$10.us"
                                        #   in Loop: Header=BB381_11 Depth=1
	movq	16(%rdi), %rdi
	testq	%rdi, %rdi
	je	.LBB381_15
.LBB381_11:                             # %"$8.us"
                                        # =>This Inner Loop Header: Depth=1
	cmpq	%rsi, 8(%rdi)
	jne	.LBB381_14
# %bb.12:                               # %"$12.us"
                                        #   in Loop: Header=BB381_11 Depth=1
	movq	24(%rdi), %rcx
	testq	%rcx, %rcx
	je	.LBB381_14
# %bb.13:                               # %"$13.us"
                                        #   in Loop: Header=BB381_11 Depth=1
	movq	%rax, %rdx
	callq	cons
	jmp	.LBB381_14
.LBB381_6:                              # %"$8.preheader"
	leaq	SymTab+440(%rip), %rbx
	jmp	.LBB381_7
	.p2align	4, 0x90
.LBB381_21:                             # %"$16"
                                        #   in Loop: Header=BB381_7 Depth=1
	movq	(%rsi), %rcx
	movq	%rax, %rdx
	callq	cons
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	cons
	movq	(%rdi), %rcx
	movq	%rcx, (%rsi)
.LBB381_22:                             # %"$10"
                                        #   in Loop: Header=BB381_7 Depth=1
	movq	16(%rdi), %rdi
	testq	%rdi, %rdi
	je	.LBB381_15
.LBB381_7:                              # %"$8"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rdi), %rsi
	cmpq	%rbx, %rsi
	jne	.LBB381_21
# %bb.8:                                # %"$12"
                                        #   in Loop: Header=BB381_7 Depth=1
	movq	24(%rdi), %rcx
	testq	%rcx, %rcx
	je	.LBB381_22
# %bb.9:                                # %"$13"
                                        #   in Loop: Header=BB381_7 Depth=1
	movq	%rax, %rdx
	callq	cons
	jmp	.LBB381_22
.LBB381_15:                             # %"$17.preheader"
	testb	$15, %al
	je	.LBB381_16
.LBB381_20:                             # %"$19"
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
.LBB381_16:
	movq	%rax, %rcx
	jmp	.LBB381_17
	.p2align	4, 0x90
.LBB381_19:                             # %"$21"
                                        #   in Loop: Header=BB381_17 Depth=1
	testb	$15, %cl
	jne	.LBB381_20
.LBB381_17:                             # %"$18"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rcx), %rdx
	movq	8(%rcx), %rcx
	testb	$15, %dl
	je	.LBB381_19
# %bb.18:                               # %"$20"
                                        #   in Loop: Header=BB381_17 Depth=1
	movq	(%rcx), %rbx
	movq	8(%rcx), %rcx
	movq	%rbx, (%rdx)
	jmp	.LBB381_19
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _up;
	.scl	2;
	.type	32;
	.endef
	.globl	_up                             # -- Begin function _up
	.p2align	4, 0x90
_up:                                    # @_up
.seh_proc _up
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	8(%rcx), %r8
	movq	(%r8), %rsi
	movq	env+8(%rip), %rcx
	testb	$6, %sil
	je	.LBB382_1
# %bb.2:                                # %"$2"
	movq	%rsi, %rdx
	shrq	$4, %rdx
	movq	8(%r8), %r8
	movq	(%r8), %rsi
	jmp	.LBB382_3
.LBB382_1:
	movl	$1, %edx
.LBB382_3:                              # %"$3"
	leaq	SymTab+8(%rip), %rax
	testq	%rdx, %rdx
	sete	%r9b
	testq	%rcx, %rcx
	sete	%bl
	orb	%r9b, %bl
	cmpq	%rax, %rsi
	jne	.LBB382_10
# %bb.4:                                # %"$4"
	testb	%bl, %bl
	jne	.LBB382_23
# %bb.5:                                # %"$11.preheader"
	leaq	SymTab+440(%rip), %r8
	jmp	.LBB382_6
	.p2align	4, 0x90
.LBB382_9:                              # %"$16"
                                        #   in Loop: Header=BB382_6 Depth=1
	cmpq	%r8, %rdi
	cmoveq	%rsi, %rdx
	movq	16(%rcx), %rcx
	testq	%rcx, %rcx
	je	.LBB382_23
.LBB382_6:                              # %"$11"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rdi
	movq	%rdx, %rsi
	decq	%rsi
	jne	.LBB382_9
# %bb.7:                                # %"$11"
                                        #   in Loop: Header=BB382_6 Depth=1
	cmpq	%r8, %rdi
	jne	.LBB382_9
# %bb.8:                                # %"$17"
	movq	24(%rcx), %rcx
	testq	%rcx, %rcx
	leaq	SymTab+8(%rip), %rax
	cmovneq	%rcx, %rax
	jmp	.LBB382_23
.LBB382_10:                             # %"$5"
	testb	%bl, %bl
	je	.LBB382_12
# %bb.11:
	movq	%rsi, %rbx
	jmp	.LBB382_16
.LBB382_12:                             # %"$24.preheader"
	movq	%rsi, %rbx
	jmp	.LBB382_13
	.p2align	4, 0x90
.LBB382_15:                             # %"$28"
                                        #   in Loop: Header=BB382_13 Depth=1
	cmpq	%rax, %rsi
	cmoveq	%rdi, %rdx
	movq	16(%rcx), %rcx
	testq	%rcx, %rcx
	je	.LBB382_16
.LBB382_13:                             # %"$24"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rax
	cmpq	%rax, %rsi
	cmoveq	%rcx, %rbx
	movq	%rdx, %rdi
	decq	%rdi
	jne	.LBB382_15
# %bb.14:                               # %"$24"
                                        #   in Loop: Header=BB382_13 Depth=1
	cmpq	%rax, %rsi
	jne	.LBB382_15
.LBB382_16:                             # %"$22"
	movq	8(%r8), %rax
	testb	$15, %al
	je	.LBB382_18
# %bb.17:                               # %"$29"
	movq	(%rbx), %rax
	jmp	.LBB382_23
.LBB382_18:                             # %"$30"
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB382_22
# %bb.19:                               # %"$33"
	testb	$8, %al
	jne	.LBB382_20
# %bb.21:                               # %"$35"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB382_22
.LBB382_20:                             # %"$36"
	movq	(%rax), %rax
.LBB382_22:                             # %"$32"
	movq	%rax, (%rbx)
.LBB382_23:                             # %"$6"
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _history;
	.scl	2;
	.type	32;
	.endef
	.globl	_history                        # -- Begin function _history
	.p2align	4, 0x90
_history:                               # @_history
.seh_proc _history
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	8(%rcx), %rax
	testb	$15, %al
	je	.LBB383_8
# %bb.1:                                # %"$2"
	subq	$32, %rsp
	callq	history_list
	addq	$32, %rsp
	leaq	SymTab+8(%rip), %r14
	testq	%rax, %rax
	je	.LBB383_7
# %bb.2:                                # %"$6"
	movq	%rax, %rdi
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.LBB383_7
# %bb.3:                                # %"$7"
	movq	(%rax), %rcx
	subq	$32, %rsp
	callq	mkStr
	leaq	SymTab+8(%rip), %rdx
	movq	%rax, %rcx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %r14
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%r14, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r15, env(%rip)
	movq	8(%rdi), %rcx
	testq	%rcx, %rcx
	je	.LBB383_6
# %bb.4:                                # %"$11.preheader"
	addq	$16, %rdi
	leaq	SymTab+8(%rip), %rbx
	movq	%r14, %rsi
	.p2align	4, 0x90
.LBB383_5:                              # %"$11"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rcx), %rcx
	subq	$32, %rsp
	callq	mkStr
	movq	%rax, %rcx
	movq	%rbx, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, 8(%rsi)
	movq	(%rdi), %rcx
	addq	$8, %rdi
	testq	%rcx, %rcx
	movq	%rax, %rsi
	jne	.LBB383_5
.LBB383_6:                              # %"$12"
	movq	8(%r15), %rax
	movq	%rax, env(%rip)
	jmp	.LBB383_7
.LBB383_8:                              # %"$3"
	movq	%rcx, %r15
	movq	(%rax), %r14
	testb	$6, %r14b
	jne	.LBB383_12
# %bb.9:                                # %"$14"
	testb	$8, %r14b
	jne	.LBB383_10
# %bb.11:                               # %"$16"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r14
	jmp	.LBB383_12
.LBB383_10:                             # %"$17"
	movq	(%r14), %r14
.LBB383_12:                             # %"$13"
	leaq	SymTab+8(%rip), %r12
	cmpq	%r12, %r14
	je	.LBB383_14
# %bb.13:                               # %"$13"
	movl	%r14d, %eax
	andl	$15, %eax
	testq	%rax, %rax
	jne	.LBB383_38
.LBB383_14:                             # %"$21"
	subq	$32, %rsp
	callq	clear_history
	addq	$32, %rsp
	testb	$15, %r14b
	je	.LBB383_15
.LBB383_7:                              # %"$4"
	movq	%r14, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB383_15:                             # %"$23.preheader"
	movq	%r14, %rsi
	jmp	.LBB383_16
	.p2align	4, 0x90
.LBB383_31:                             # %symByte.exit.thread.i
                                        #   in Loop: Header=BB383_16 Depth=1
	movb	$0, (%rax)
.LBB383_32:                             # %bufString.exit
                                        #   in Loop: Header=BB383_16 Depth=1
	subq	$32, %rsp
	callq	add_history
	addq	$32, %rsp
	movq	%rdi, %rsp
	testb	$15, %sil
	jne	.LBB383_7
.LBB383_16:                             # %"$23"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB383_20 Depth 2
                                        #     Child Loop BB383_24 Depth 2
                                        #     Child Loop BB383_26 Depth 2
                                        #     Child Loop BB383_36 Depth 2
	movq	(%rsi), %rcx
	movq	8(%rsi), %rsi
	subq	$32, %rsp
	callq	xSym
	addq	$32, %rsp
	cmpq	%r12, %rax
	jne	.LBB383_18
# %bb.17:                               # %"$4.i.thread"
                                        #   in Loop: Header=BB383_16 Depth=1
	movq	%rsp, %rdi
	movl	$1, %eax
	movl	$2, %ebx
	jmp	.LBB383_28
	.p2align	4, 0x90
.LBB383_18:                             # %"$3.i"
                                        #   in Loop: Header=BB383_16 Depth=1
	movq	-8(%rax), %rbx
	testb	$8, %bl
	jne	.LBB383_19
	.p2align	4, 0x90
# %bb.21:                               # %"$8.i"
                                        #   in Loop: Header=BB383_16 Depth=1
	testb	$6, %bl
	jne	.LBB383_22
.LBB383_20:                             # %"$8.i"
                                        #   Parent Loop BB383_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rbx), %rbx
	testb	$6, %bl
	je	.LBB383_20
.LBB383_22:                             # %xName.exit
                                        #   in Loop: Header=BB383_16 Depth=1
	movl	$1, %eax
	testb	$4, %bl
	movq	%rbx, %rcx
	je	.LBB383_25
# %bb.23:                               # %"$3.i9.preheader"
                                        #   in Loop: Header=BB383_16 Depth=1
	movl	$1, %eax
	movq	%rbx, %rcx
	.p2align	4, 0x90
.LBB383_24:                             # %"$3.i9"
                                        #   Parent Loop BB383_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addq	$8, %rax
	movq	4(%rcx), %rcx
	testb	$4, %cl
	jne	.LBB383_24
.LBB383_25:                             # %"$4.i"
                                        #   in Loop: Header=BB383_16 Depth=1
	shrq	$4, %rcx
	je	.LBB383_27
	.p2align	4, 0x90
.LBB383_26:                             # %"$6.i11"
                                        #   Parent Loop BB383_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	incq	%rax
	shrq	$8, %rcx
	jne	.LBB383_26
.LBB383_27:                             #   in Loop: Header=BB383_16 Depth=1
	movq	%rsp, %rdi
.LBB383_28:                             # %bufSize.exit
                                        #   in Loop: Header=BB383_16 Depth=1
	addq	$15, %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rcx
	xorl	%edx, %edx
	movq	%rcx, %rax
	testq	%rdx, %rdx
	jne	.LBB383_36
	.p2align	4, 0x90
.LBB383_30:                             # %"$2.i.i"
                                        #   in Loop: Header=BB383_16 Depth=1
	cmpq	$2, %rbx
	je	.LBB383_31
# %bb.33:                               # %"$5.i.i"
                                        #   in Loop: Header=BB383_16 Depth=1
	testb	$2, %bl
	jne	.LBB383_34
# %bb.35:                               # %"$7.i.i"
                                        #   in Loop: Header=BB383_16 Depth=1
	movq	-4(%rbx), %rdx
	movq	4(%rbx), %rbx
	jmp	.LBB383_36
	.p2align	4, 0x90
.LBB383_34:                             # %"$8.i.i"
                                        #   in Loop: Header=BB383_16 Depth=1
	movq	%rbx, %rdx
	shrq	$4, %rdx
	movl	$2, %ebx
	.p2align	4, 0x90
.LBB383_36:                             # %symByte.exit.i
                                        #   Parent Loop BB383_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movb	%dl, (%rax)
	testb	%dl, %dl
	je	.LBB383_32
# %bb.37:                               # %"$3.i13"
                                        #   in Loop: Header=BB383_36 Depth=2
	shrq	$8, %rdx
	incq	%rax
	testq	%rdx, %rdx
	jne	.LBB383_36
	jmp	.LBB383_30
.LBB383_19:                             # %"$6.i"
	subq	$32, %rsp
	movq	%r15, %rcx
	movq	%rax, %rdx
	callq	nameErr
.LBB383_38:                             # %"$20"
	subq	$32, %rsp
	movq	%r15, %rcx
	movq	%r14, %rdx
	callq	lstErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _version;
	.scl	2;
	.type	32;
	.endef
	.globl	_version                        # -- Begin function _version
	.p2align	4, 0x90
_version:                               # @_version
.seh_proc _version
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %rax
	movq	(%rax), %rax
	testb	$6, %al
	jne	.LBB384_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB384_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB384_4
.LBB384_2:                              # %"$6"
	movq	(%rax), %rax
.LBB384_4:                              # %"$2"
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	jne	.LBB384_6
# %bb.5:                                # %"$7"
	movq	($Version)(%rip), %rcx
	shrq	$4, %rcx
	callq	outWord
	movb	$46, %cl
	callq	*($Put)(%rip)
	movq	($Version)+8(%rip), %rcx
	shrq	$4, %rcx
	callq	outWord
	movb	$46, %cl
	callq	*($Put)(%rip)
	movq	($Version)+16(%rip), %rcx
	shrq	$4, %rcx
	callq	outWord
	movb	$10, %cl
	callq	*($Put)(%rip)
.LBB384_6:                              # %"$8"
	movq	($Version)(%rip), %rsi
	movq	($Version)+8(%rip), %rdi
	movq	($Version)+16(%rip), %rcx
	leaq	SymTab+8(%rip), %rdx
	callq	cons
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	cons
	movq	%rsi, %rcx
	movq	%rax, %rdx
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	jmp	cons                            # TAILCALL
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 evList;
	.scl	2;
	.type	32;
	.endef
	.globl	evList                          # -- Begin function evList
	.p2align	4, 0x90
evList:                                 # @evList
.seh_proc evList
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rsi
	movq	(%rcx), %rcx
	testb	$6, %cl
	jne	.LBB385_20
# %bb.1:                                # %"$3"
	testb	$8, %cl
	jne	.LBB385_2
# %bb.11:                               # %"$5"
	cmpq	%rsp, ($StkLimit)(%rip)
	ja	.LBB385_26
# %bb.12:                               # %"$21"
	subq	$32, %rsp
	movq	%rcx, %rbx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	movq	env(%rip), %rdx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%rcx, (%r14)
	movq	%r14, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	%r14, env(%rip)
	.p2align	4, 0x90
.LBB385_13:                             # %"$22"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rcx, %rdi
	cmpl	$0, ($Signal)(%rip)
	je	.LBB385_15
# %bb.14:                               # %"$23"
                                        #   in Loop: Header=BB385_13 Depth=1
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	sighandler
	addq	$32, %rsp
.LBB385_15:                             # %"$24"
                                        #   in Loop: Header=BB385_13 Depth=1
	testb	$6, %dil
	jne	.LBB385_16
# %bb.17:                               # %"$25"
                                        #   in Loop: Header=BB385_13 Depth=1
	testb	$15, %dil
	je	.LBB385_18
# %bb.21:                               # %"$28"
                                        #   in Loop: Header=BB385_13 Depth=1
	movq	(%rdi), %rcx
	cmpq	(%rcx), %rcx
	movq	%rdi, %rbx
	jne	.LBB385_13
# %bb.22:                               # %"$31"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	sharedLib
	addq	$32, %rsp
	testb	$1, %al
	je	.LBB385_24
# %bb.23:                               # %"$32"
	movq	(%rdi), %r8
	andq	$-3, %r8
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rdi, %rdx
	callq	*%r8
	jmp	.LBB385_19
	.p2align	4, 0x90
.LBB385_2:                              # %"$7"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rcx, %rdi
	cmpl	$0, ($Signal)(%rip)
	je	.LBB385_4
# %bb.3:                                # %"$8"
                                        #   in Loop: Header=BB385_2 Depth=1
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	sighandler
	addq	$32, %rsp
.LBB385_4:                              # %"$9"
                                        #   in Loop: Header=BB385_2 Depth=1
	movq	(%rdi), %rcx
	testb	$6, %cl
	jne	.LBB385_5
# %bb.7:                                # %"$10"
                                        #   in Loop: Header=BB385_2 Depth=1
	testb	$15, %cl
	je	.LBB385_25
# %bb.8:                                # %"$13"
                                        #   in Loop: Header=BB385_2 Depth=1
	cmpq	(%rcx), %rcx
	jne	.LBB385_2
# %bb.9:                                # %"$16"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	sharedLib
	addq	$32, %rsp
	testb	$1, %al
	je	.LBB385_24
# %bb.10:                               # %"$17"
	movq	(%rdi), %rax
	andq	$-3, %rax
	jmp	.LBB385_6
.LBB385_5:                              # %"$12"
	andq	$-3, %rcx
	movq	%rcx, %rax
.LBB385_6:                              # %"$12"
	movq	%rsi, %rcx
	movq	%rdi, %rdx
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	rex64 jmpq	*%rax                   # TAILCALL
.LBB385_16:                             # %"$27"
	andq	$-3, %rdi
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rbx, %rdx
	callq	*%rdi
	jmp	.LBB385_19
.LBB385_25:                             # %"$14"
	movq	%rsi, %rdx
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	jmp	evExpr                          # TAILCALL
.LBB385_18:                             # %"$29"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	evExpr
.LBB385_19:                             # %"$26"
	addq	$32, %rsp
	movq	%rax, %rsi
	movq	8(%r14), %rax
	movq	%rax, env(%rip)
.LBB385_20:                             # %"$2"
	movq	%rsi, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	retq
.LBB385_26:                             # %"$20"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	stkErr
.LBB385_24:                             # %"$18"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	undefined
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 outWord;
	.scl	2;
	.type	32;
	.endef
	.globl	outWord                         # -- Begin function outWord
	.p2align	4, 0x90
outWord:                                # @outWord
.seh_proc outWord
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rcx, %rsi
	cmpq	$10, %rcx
	jb	.LBB386_2
# %bb.1:                                # %"$2"
	movabsq	$-3689348814741910323, %rcx     # imm = 0xCCCCCCCCCCCCCCCD
	movq	%rsi, %rax
	mulq	%rcx
	movq	%rdx, %rdi
	shrq	$3, %rdi
	movq	%rdi, %rcx
	callq	outWord
	addl	%edi, %edi
	leal	(%rdi,%rdi,4), %eax
	subl	%eax, %esi
.LBB386_2:                              # %"$3"
	addb	$48, %sil
	movl	%esi, %ecx
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	rex64 jmpq	*($Put)(%rip)           # TAILCALL
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 cons;
	.scl	2;
	.type	32;
	.endef
	.globl	cons                            # -- Begin function cons
	.p2align	4, 0x90
cons:                                   # @cons
.seh_proc cons
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rdx, %rsi
	movq	%rcx, %rdi
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	jne	.LBB387_2
# %bb.1:                                # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rdi, (%rbx)
	movq	%rbx, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rsi, (%rax)
	movq	%rax, %rcx
	orq	$8, %rcx
	movq	%rbx, (%rcx)
	movq	%rax, env(%rip)
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	8(%rbx), %rax
	movq	%rax, env(%rip)
	movq	($Avail)(%rip), %rax
.LBB387_2:                              # %"$3"
	movq	(%rax), %rcx
	movq	%rcx, ($Avail)(%rip)
	movq	%rdi, (%rax)
	movq	%rsi, 8(%rax)
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 gc;
	.scl	2;
	.type	32;
	.endef
	.globl	gc                              # -- Begin function gc
	.p2align	4, 0x90
gc:                                     # @gc
.seh_proc gc
# %bb.0:                                # %"$1"
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	$10, SymTab+232(%rip)
	orb	$1, SymTab+8(%rip)
	leaq	SymTab+40(%rip), %rax
	leaq	SymTab(%rip), %rcx
	negq	%rcx
	.p2align	4, 0x90
.LBB388_1:                              # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	orb	$1, (%rax)
	leaq	16(%rax,%rcx), %rdx
	addq	$16, %rax
	cmpq	$7016, %rdx                     # imm = 0x1B68
	jne	.LBB388_1
# %bb.2:                                # %"$4"
	movl	$65536, %ecx                    # imm = 0x10000
	movq	($Heaps)(%rip), %rax
	.p2align	4, 0x90
.LBB388_3:                              # %"$6"
                                        # =>This Inner Loop Header: Depth=1
	orb	$1, 8(%rax)
	addq	$16, %rax
	decq	%rcx
	jne	.LBB388_3
# %bb.4:                                # %"$8"
                                        #   in Loop: Header=BB388_3 Depth=1
	movq	(%rax), %rax
	testq	%rax, %rax
	movl	$65536, %ecx                    # imm = 0x10000
	jne	.LBB388_3
# %bb.5:                                # %"$11.preheader"
	leaq	gcData(%rip), %rax
	leaq	gcData+416(%rip), %r8
	jmp	.LBB388_7
	.p2align	4, 0x90
.LBB388_6:                              # %mark.exit
                                        #   in Loop: Header=BB388_7 Depth=1
	cmpq	%r8, %rax
	leaq	8(%rax), %rax
	je	.LBB388_21
.LBB388_7:                              # %"$11"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB388_8 Depth 2
                                        #     Child Loop BB388_13 Depth 2
                                        #     Child Loop BB388_18 Depth 2
	movq	(%rax), %rcx
	xorl	%esi, %esi
	testb	$2, %cl
	jne	.LBB388_16
	.p2align	4, 0x90
.LBB388_8:                              # %"$4.i"
                                        #   Parent Loop BB388_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rcx, %rdi
	movq	%rcx, %rbx
	andq	$-16, %rbx
	movq	8(%rbx), %rcx
	testb	$1, %cl
	je	.LBB388_15
# %bb.9:                                # %"$6.i"
                                        #   in Loop: Header=BB388_8 Depth=2
	movq	%rcx, %rdx
	andq	$-2, %rdx
	movq	%rdx, 8(%rbx)
	testb	$4, %dil
	jne	.LBB388_12
# %bb.10:                               # %"$7.i"
                                        #   in Loop: Header=BB388_8 Depth=2
	movq	(%rbx), %rcx
	orq	$1, %rsi
	movq	%rsi, (%rbx)
	testb	$2, %cl
	movq	%rdi, %rsi
	je	.LBB388_8
	jmp	.LBB388_17
.LBB388_12:                             # %"$9.preheader.i"
                                        #   in Loop: Header=BB388_7 Depth=1
	testb	$2, %cl
	jne	.LBB388_15
	.p2align	4, 0x90
.LBB388_13:                             # %"$10.i"
                                        #   Parent Loop BB388_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	4(%rdx), %rcx
	testb	$1, %cl
	je	.LBB388_15
# %bb.14:                               # %"$12.i"
                                        #   in Loop: Header=BB388_13 Depth=2
	movq	%rcx, %rbx
	andq	$-2, %rbx
	movq	%rbx, 4(%rdx)
	testb	$2, %cl
	movq	%rbx, %rdx
	je	.LBB388_13
.LBB388_15:                             #   in Loop: Header=BB388_7 Depth=1
	movq	%rdi, %rcx
.LBB388_16:                             # %"$5.i"
                                        #   in Loop: Header=BB388_7 Depth=1
	movq	%rsi, %rdi
.LBB388_17:                             # %"$5.i"
                                        #   in Loop: Header=BB388_7 Depth=1
	movq	%rdi, %rdx
	andq	$-16, %rdx
	je	.LBB388_6
	.p2align	4, 0x90
.LBB388_18:                             # %"$15.i"
                                        #   Parent Loop BB388_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rdi, %rsi
	movq	(%rdx), %rbx
	testb	$1, %bl
	jne	.LBB388_20
# %bb.19:                               # %"$16.i"
                                        #   in Loop: Header=BB388_18 Depth=2
	movq	8(%rdx), %rdi
	movq	%rcx, 8(%rdx)
	movq	%rdi, %rdx
	andq	$-16, %rdx
	movq	%rsi, %rcx
	jne	.LBB388_18
	jmp	.LBB388_6
.LBB388_20:                             # %"$18.i"
                                        #   in Loop: Header=BB388_7 Depth=1
	movq	%rcx, (%rdx)
	movq	8(%rdx), %rcx
	andq	$-2, %rbx
	movq	%rbx, 8(%rdx)
	testb	$2, %cl
	je	.LBB388_8
	jmp	.LBB388_16
.LBB388_21:                             # %"$14.preheader"
	movq	env(%rip), %rax
	jmp	.LBB388_23
	.p2align	4, 0x90
.LBB388_22:                             # %mark.exit85
                                        #   in Loop: Header=BB388_23 Depth=1
	movq	8(%rax), %rax
.LBB388_23:                             # %"$14.preheader"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB388_25 Depth 2
                                        #     Child Loop BB388_30 Depth 2
                                        #     Child Loop BB388_35 Depth 2
	testq	%rax, %rax
	je	.LBB388_38
# %bb.24:                               # %"$15"
                                        #   in Loop: Header=BB388_23 Depth=1
	movq	(%rax), %rsi
	xorl	%edi, %edi
	testb	$2, %sil
	jne	.LBB388_33
	.p2align	4, 0x90
.LBB388_25:                             # %"$4.i68"
                                        #   Parent Loop BB388_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rsi, %rbx
	movq	%rsi, %rcx
	andq	$-16, %rcx
	movq	8(%rcx), %rsi
	testb	$1, %sil
	je	.LBB388_32
# %bb.26:                               # %"$6.i70"
                                        #   in Loop: Header=BB388_25 Depth=2
	movq	%rsi, %rdx
	andq	$-2, %rdx
	movq	%rdx, 8(%rcx)
	testb	$4, %bl
	jne	.LBB388_29
# %bb.27:                               # %"$7.i77"
                                        #   in Loop: Header=BB388_25 Depth=2
	movq	(%rcx), %rsi
	orq	$1, %rdi
	movq	%rdi, (%rcx)
	testb	$2, %sil
	movq	%rbx, %rdi
	je	.LBB388_25
	jmp	.LBB388_34
.LBB388_29:                             # %"$9.preheader.i72"
                                        #   in Loop: Header=BB388_23 Depth=1
	testb	$2, %sil
	jne	.LBB388_32
	.p2align	4, 0x90
.LBB388_30:                             # %"$10.i73"
                                        #   Parent Loop BB388_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	4(%rdx), %rcx
	testb	$1, %cl
	je	.LBB388_32
# %bb.31:                               # %"$12.i75"
                                        #   in Loop: Header=BB388_30 Depth=2
	movq	%rcx, %rsi
	andq	$-2, %rsi
	movq	%rsi, 4(%rdx)
	testb	$2, %cl
	movq	%rsi, %rdx
	je	.LBB388_30
.LBB388_32:                             #   in Loop: Header=BB388_23 Depth=1
	movq	%rbx, %rsi
.LBB388_33:                             # %"$5.i79"
                                        #   in Loop: Header=BB388_23 Depth=1
	movq	%rdi, %rbx
.LBB388_34:                             # %"$5.i79"
                                        #   in Loop: Header=BB388_23 Depth=1
	movq	%rbx, %rdx
	andq	$-16, %rdx
	je	.LBB388_22
	.p2align	4, 0x90
.LBB388_35:                             # %"$15.i81"
                                        #   Parent Loop BB388_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rbx, %rdi
	movq	(%rdx), %rcx
	testb	$1, %cl
	jne	.LBB388_37
# %bb.36:                               # %"$16.i84"
                                        #   in Loop: Header=BB388_35 Depth=2
	movq	8(%rdx), %rbx
	movq	%rsi, 8(%rdx)
	movq	%rbx, %rdx
	andq	$-16, %rdx
	movq	%rdi, %rsi
	jne	.LBB388_35
	jmp	.LBB388_22
.LBB388_37:                             # %"$18.i82"
                                        #   in Loop: Header=BB388_23 Depth=1
	movq	%rsi, (%rdx)
	movq	8(%rdx), %rsi
	andq	$-2, %rcx
	movq	%rcx, 8(%rdx)
	testb	$2, %sil
	je	.LBB388_25
	jmp	.LBB388_33
.LBB388_38:                             # %"$17.preheader"
	movq	env+8(%rip), %rax
	jmp	.LBB388_40
	.p2align	4, 0x90
.LBB388_39:                             # %mark.exit665
                                        #   in Loop: Header=BB388_40 Depth=1
	movq	16(%rax), %rax
.LBB388_40:                             # %"$17.preheader"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB388_42 Depth 2
                                        #     Child Loop BB388_47 Depth 2
                                        #     Child Loop BB388_52 Depth 2
                                        #     Child Loop BB388_56 Depth 2
                                        #     Child Loop BB388_61 Depth 2
                                        #     Child Loop BB388_66 Depth 2
	testq	%rax, %rax
	je	.LBB388_69
# %bb.41:                               # %"$18"
                                        #   in Loop: Header=BB388_40 Depth=1
	movq	(%rax), %rsi
	xorl	%edi, %edi
	testb	$2, %sil
	jne	.LBB388_50
	.p2align	4, 0x90
.LBB388_42:                             # %"$4.i88"
                                        #   Parent Loop BB388_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rsi, %rbx
	movq	%rsi, %rcx
	andq	$-16, %rcx
	movq	8(%rcx), %rsi
	testb	$1, %sil
	je	.LBB388_49
# %bb.43:                               # %"$6.i90"
                                        #   in Loop: Header=BB388_42 Depth=2
	movq	%rsi, %rdx
	andq	$-2, %rdx
	movq	%rdx, 8(%rcx)
	testb	$4, %bl
	jne	.LBB388_46
# %bb.44:                               # %"$7.i97"
                                        #   in Loop: Header=BB388_42 Depth=2
	movq	(%rcx), %rsi
	orq	$1, %rdi
	movq	%rdi, (%rcx)
	testb	$2, %sil
	movq	%rbx, %rdi
	je	.LBB388_42
	jmp	.LBB388_51
.LBB388_46:                             # %"$9.preheader.i92"
                                        #   in Loop: Header=BB388_40 Depth=1
	testb	$2, %sil
	jne	.LBB388_49
	.p2align	4, 0x90
.LBB388_47:                             # %"$10.i93"
                                        #   Parent Loop BB388_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	4(%rdx), %rcx
	testb	$1, %cl
	je	.LBB388_49
# %bb.48:                               # %"$12.i95"
                                        #   in Loop: Header=BB388_47 Depth=2
	movq	%rcx, %rsi
	andq	$-2, %rsi
	movq	%rsi, 4(%rdx)
	testb	$2, %cl
	movq	%rsi, %rdx
	je	.LBB388_47
.LBB388_49:                             #   in Loop: Header=BB388_40 Depth=1
	movq	%rbx, %rsi
.LBB388_50:                             # %"$5.i99"
                                        #   in Loop: Header=BB388_40 Depth=1
	movq	%rdi, %rbx
.LBB388_51:                             # %"$5.i99"
                                        #   in Loop: Header=BB388_40 Depth=1
	movq	%rbx, %rdx
	andq	$-16, %rdx
	je	.LBB388_55
	.p2align	4, 0x90
.LBB388_52:                             # %"$15.i101"
                                        #   Parent Loop BB388_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rbx, %rdi
	movq	(%rdx), %rcx
	testb	$1, %cl
	jne	.LBB388_54
# %bb.53:                               # %"$16.i104"
                                        #   in Loop: Header=BB388_52 Depth=2
	movq	8(%rdx), %rbx
	movq	%rsi, 8(%rdx)
	movq	%rbx, %rdx
	andq	$-16, %rdx
	movq	%rdi, %rsi
	jne	.LBB388_52
	jmp	.LBB388_55
.LBB388_54:                             # %"$18.i102"
                                        #   in Loop: Header=BB388_40 Depth=1
	movq	%rsi, (%rdx)
	movq	8(%rdx), %rsi
	andq	$-2, %rcx
	movq	%rcx, 8(%rdx)
	testb	$2, %sil
	je	.LBB388_42
	jmp	.LBB388_50
	.p2align	4, 0x90
.LBB388_55:                             # %mark.exit105
                                        #   in Loop: Header=BB388_40 Depth=1
	movq	8(%rax), %rsi
	xorl	%edi, %edi
	testb	$2, %sil
	jne	.LBB388_64
	.p2align	4, 0x90
.LBB388_56:                             # %"$4.i648"
                                        #   Parent Loop BB388_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rsi, %rbx
	movq	%rsi, %rcx
	andq	$-16, %rcx
	movq	8(%rcx), %rsi
	testb	$1, %sil
	je	.LBB388_63
# %bb.57:                               # %"$6.i650"
                                        #   in Loop: Header=BB388_56 Depth=2
	movq	%rsi, %rdx
	andq	$-2, %rdx
	movq	%rdx, 8(%rcx)
	testb	$4, %bl
	jne	.LBB388_60
# %bb.58:                               # %"$7.i657"
                                        #   in Loop: Header=BB388_56 Depth=2
	movq	(%rcx), %rsi
	orq	$1, %rdi
	movq	%rdi, (%rcx)
	testb	$2, %sil
	movq	%rbx, %rdi
	je	.LBB388_56
	jmp	.LBB388_65
.LBB388_60:                             # %"$9.preheader.i652"
                                        #   in Loop: Header=BB388_40 Depth=1
	testb	$2, %sil
	jne	.LBB388_63
	.p2align	4, 0x90
.LBB388_61:                             # %"$10.i653"
                                        #   Parent Loop BB388_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	4(%rdx), %rcx
	testb	$1, %cl
	je	.LBB388_63
# %bb.62:                               # %"$12.i655"
                                        #   in Loop: Header=BB388_61 Depth=2
	movq	%rcx, %rsi
	andq	$-2, %rsi
	movq	%rsi, 4(%rdx)
	testb	$2, %cl
	movq	%rsi, %rdx
	je	.LBB388_61
.LBB388_63:                             #   in Loop: Header=BB388_40 Depth=1
	movq	%rbx, %rsi
.LBB388_64:                             # %"$5.i659"
                                        #   in Loop: Header=BB388_40 Depth=1
	movq	%rdi, %rbx
.LBB388_65:                             # %"$5.i659"
                                        #   in Loop: Header=BB388_40 Depth=1
	movq	%rbx, %rdx
	andq	$-16, %rdx
	je	.LBB388_39
	.p2align	4, 0x90
.LBB388_66:                             # %"$15.i661"
                                        #   Parent Loop BB388_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rbx, %rdi
	movq	(%rdx), %rcx
	testb	$1, %cl
	jne	.LBB388_68
# %bb.67:                               # %"$16.i664"
                                        #   in Loop: Header=BB388_66 Depth=2
	movq	8(%rdx), %rbx
	movq	%rsi, 8(%rdx)
	movq	%rbx, %rdx
	andq	$-16, %rdx
	movq	%rdi, %rsi
	jne	.LBB388_66
	jmp	.LBB388_39
.LBB388_68:                             # %"$18.i662"
                                        #   in Loop: Header=BB388_40 Depth=1
	movq	%rsi, (%rdx)
	movq	8(%rdx), %rsi
	andq	$-2, %rcx
	movq	%rcx, 8(%rdx)
	testb	$2, %sil
	je	.LBB388_56
	jmp	.LBB388_64
.LBB388_69:                             # %"$20.preheader"
	movq	env+24(%rip), %rax
	jmp	.LBB388_71
	.p2align	4, 0x90
.LBB388_70:                             # %mark.exit525
                                        #   in Loop: Header=BB388_71 Depth=1
	movq	(%rax), %rax
.LBB388_71:                             # %"$20.preheader"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB388_74 Depth 2
                                        #     Child Loop BB388_79 Depth 2
                                        #     Child Loop BB388_84 Depth 2
                                        #     Child Loop BB388_88 Depth 2
                                        #     Child Loop BB388_93 Depth 2
                                        #     Child Loop BB388_98 Depth 2
                                        #     Child Loop BB388_102 Depth 2
                                        #     Child Loop BB388_107 Depth 2
                                        #     Child Loop BB388_112 Depth 2
                                        #     Child Loop BB388_116 Depth 2
                                        #     Child Loop BB388_121 Depth 2
                                        #     Child Loop BB388_126 Depth 2
                                        #     Child Loop BB388_130 Depth 2
                                        #     Child Loop BB388_135 Depth 2
                                        #     Child Loop BB388_140 Depth 2
                                        #     Child Loop BB388_144 Depth 2
                                        #     Child Loop BB388_149 Depth 2
                                        #     Child Loop BB388_154 Depth 2
                                        #     Child Loop BB388_158 Depth 2
                                        #     Child Loop BB388_163 Depth 2
                                        #     Child Loop BB388_168 Depth 2
	testq	%rax, %rax
	je	.LBB388_171
# %bb.72:                               # %"$21"
                                        #   in Loop: Header=BB388_71 Depth=1
	movq	8(%rax), %rsi
	testq	%rsi, %rsi
	je	.LBB388_87
# %bb.73:                               # %"$2.i627.preheader"
                                        #   in Loop: Header=BB388_71 Depth=1
	xorl	%edi, %edi
	testb	$2, %sil
	jne	.LBB388_82
	.p2align	4, 0x90
.LBB388_74:                             # %"$4.i628"
                                        #   Parent Loop BB388_71 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rsi, %rbx
	movq	%rsi, %rcx
	andq	$-16, %rcx
	movq	8(%rcx), %rsi
	testb	$1, %sil
	je	.LBB388_81
# %bb.75:                               # %"$6.i630"
                                        #   in Loop: Header=BB388_74 Depth=2
	movq	%rsi, %rdx
	andq	$-2, %rdx
	movq	%rdx, 8(%rcx)
	testb	$4, %bl
	jne	.LBB388_78
# %bb.76:                               # %"$7.i637"
                                        #   in Loop: Header=BB388_74 Depth=2
	movq	(%rcx), %rsi
	orq	$1, %rdi
	movq	%rdi, (%rcx)
	testb	$2, %sil
	movq	%rbx, %rdi
	je	.LBB388_74
	jmp	.LBB388_83
.LBB388_78:                             # %"$9.preheader.i632"
                                        #   in Loop: Header=BB388_71 Depth=1
	testb	$2, %sil
	jne	.LBB388_81
	.p2align	4, 0x90
.LBB388_79:                             # %"$10.i633"
                                        #   Parent Loop BB388_71 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	4(%rdx), %rcx
	testb	$1, %cl
	je	.LBB388_81
# %bb.80:                               # %"$12.i635"
                                        #   in Loop: Header=BB388_79 Depth=2
	movq	%rcx, %rsi
	andq	$-2, %rsi
	movq	%rsi, 4(%rdx)
	testb	$2, %cl
	movq	%rsi, %rdx
	je	.LBB388_79
.LBB388_81:                             #   in Loop: Header=BB388_71 Depth=1
	movq	%rbx, %rsi
.LBB388_82:                             # %"$5.i639"
                                        #   in Loop: Header=BB388_71 Depth=1
	movq	%rdi, %rbx
.LBB388_83:                             # %"$5.i639"
                                        #   in Loop: Header=BB388_71 Depth=1
	movq	%rbx, %rdx
	andq	$-16, %rdx
	je	.LBB388_87
	.p2align	4, 0x90
.LBB388_84:                             # %"$15.i641"
                                        #   Parent Loop BB388_71 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rbx, %rdi
	movq	(%rdx), %rcx
	testb	$1, %cl
	jne	.LBB388_86
# %bb.85:                               # %"$16.i644"
                                        #   in Loop: Header=BB388_84 Depth=2
	movq	8(%rdx), %rbx
	movq	%rsi, 8(%rdx)
	movq	%rbx, %rdx
	andq	$-16, %rdx
	movq	%rdi, %rsi
	jne	.LBB388_84
	jmp	.LBB388_87
.LBB388_86:                             # %"$18.i642"
                                        #   in Loop: Header=BB388_71 Depth=1
	movq	%rsi, (%rdx)
	movq	8(%rdx), %rsi
	andq	$-2, %rcx
	movq	%rcx, 8(%rdx)
	testb	$2, %sil
	je	.LBB388_74
	jmp	.LBB388_82
	.p2align	4, 0x90
.LBB388_87:                             # %"$24"
                                        #   in Loop: Header=BB388_71 Depth=1
	movq	16(%rax), %rsi
	xorl	%edi, %edi
	testb	$2, %sil
	jne	.LBB388_96
	.p2align	4, 0x90
.LBB388_88:                             # %"$4.i608"
                                        #   Parent Loop BB388_71 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rsi, %rbx
	movq	%rsi, %rcx
	andq	$-16, %rcx
	movq	8(%rcx), %rsi
	testb	$1, %sil
	je	.LBB388_95
# %bb.89:                               # %"$6.i610"
                                        #   in Loop: Header=BB388_88 Depth=2
	movq	%rsi, %rdx
	andq	$-2, %rdx
	movq	%rdx, 8(%rcx)
	testb	$4, %bl
	jne	.LBB388_92
# %bb.90:                               # %"$7.i617"
                                        #   in Loop: Header=BB388_88 Depth=2
	movq	(%rcx), %rsi
	orq	$1, %rdi
	movq	%rdi, (%rcx)
	testb	$2, %sil
	movq	%rbx, %rdi
	je	.LBB388_88
	jmp	.LBB388_97
.LBB388_92:                             # %"$9.preheader.i612"
                                        #   in Loop: Header=BB388_71 Depth=1
	testb	$2, %sil
	jne	.LBB388_95
	.p2align	4, 0x90
.LBB388_93:                             # %"$10.i613"
                                        #   Parent Loop BB388_71 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	4(%rdx), %rcx
	testb	$1, %cl
	je	.LBB388_95
# %bb.94:                               # %"$12.i615"
                                        #   in Loop: Header=BB388_93 Depth=2
	movq	%rcx, %rsi
	andq	$-2, %rsi
	movq	%rsi, 4(%rdx)
	testb	$2, %cl
	movq	%rsi, %rdx
	je	.LBB388_93
.LBB388_95:                             #   in Loop: Header=BB388_71 Depth=1
	movq	%rbx, %rsi
.LBB388_96:                             # %"$5.i619"
                                        #   in Loop: Header=BB388_71 Depth=1
	movq	%rdi, %rbx
.LBB388_97:                             # %"$5.i619"
                                        #   in Loop: Header=BB388_71 Depth=1
	movq	%rbx, %rdx
	andq	$-16, %rdx
	je	.LBB388_101
	.p2align	4, 0x90
.LBB388_98:                             # %"$15.i621"
                                        #   Parent Loop BB388_71 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rbx, %rdi
	movq	(%rdx), %rcx
	testb	$1, %cl
	jne	.LBB388_100
# %bb.99:                               # %"$16.i624"
                                        #   in Loop: Header=BB388_98 Depth=2
	movq	8(%rdx), %rbx
	movq	%rsi, 8(%rdx)
	movq	%rbx, %rdx
	andq	$-16, %rdx
	movq	%rdi, %rsi
	jne	.LBB388_98
	jmp	.LBB388_101
.LBB388_100:                            # %"$18.i622"
                                        #   in Loop: Header=BB388_71 Depth=1
	movq	%rsi, (%rdx)
	movq	8(%rdx), %rsi
	andq	$-2, %rcx
	movq	%rcx, 8(%rdx)
	testb	$2, %sil
	je	.LBB388_88
	jmp	.LBB388_96
	.p2align	4, 0x90
.LBB388_101:                            # %mark.exit625
                                        #   in Loop: Header=BB388_71 Depth=1
	movq	176(%rax), %rsi
	xorl	%edi, %edi
	testb	$2, %sil
	jne	.LBB388_110
	.p2align	4, 0x90
.LBB388_102:                            # %"$4.i588"
                                        #   Parent Loop BB388_71 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rsi, %rbx
	movq	%rsi, %rcx
	andq	$-16, %rcx
	movq	8(%rcx), %rsi
	testb	$1, %sil
	je	.LBB388_109
# %bb.103:                              # %"$6.i590"
                                        #   in Loop: Header=BB388_102 Depth=2
	movq	%rsi, %rdx
	andq	$-2, %rdx
	movq	%rdx, 8(%rcx)
	testb	$4, %bl
	jne	.LBB388_106
# %bb.104:                              # %"$7.i597"
                                        #   in Loop: Header=BB388_102 Depth=2
	movq	(%rcx), %rsi
	orq	$1, %rdi
	movq	%rdi, (%rcx)
	testb	$2, %sil
	movq	%rbx, %rdi
	je	.LBB388_102
	jmp	.LBB388_111
.LBB388_106:                            # %"$9.preheader.i592"
                                        #   in Loop: Header=BB388_71 Depth=1
	testb	$2, %sil
	jne	.LBB388_109
	.p2align	4, 0x90
.LBB388_107:                            # %"$10.i593"
                                        #   Parent Loop BB388_71 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	4(%rdx), %rcx
	testb	$1, %cl
	je	.LBB388_109
# %bb.108:                              # %"$12.i595"
                                        #   in Loop: Header=BB388_107 Depth=2
	movq	%rcx, %rsi
	andq	$-2, %rsi
	movq	%rsi, 4(%rdx)
	testb	$2, %cl
	movq	%rsi, %rdx
	je	.LBB388_107
.LBB388_109:                            #   in Loop: Header=BB388_71 Depth=1
	movq	%rbx, %rsi
.LBB388_110:                            # %"$5.i599"
                                        #   in Loop: Header=BB388_71 Depth=1
	movq	%rdi, %rbx
.LBB388_111:                            # %"$5.i599"
                                        #   in Loop: Header=BB388_71 Depth=1
	movq	%rbx, %rdx
	andq	$-16, %rdx
	je	.LBB388_115
	.p2align	4, 0x90
.LBB388_112:                            # %"$15.i601"
                                        #   Parent Loop BB388_71 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rbx, %rdi
	movq	(%rdx), %rcx
	testb	$1, %cl
	jne	.LBB388_114
# %bb.113:                              # %"$16.i604"
                                        #   in Loop: Header=BB388_112 Depth=2
	movq	8(%rdx), %rbx
	movq	%rsi, 8(%rdx)
	movq	%rbx, %rdx
	andq	$-16, %rdx
	movq	%rdi, %rsi
	jne	.LBB388_112
	jmp	.LBB388_115
.LBB388_114:                            # %"$18.i602"
                                        #   in Loop: Header=BB388_71 Depth=1
	movq	%rsi, (%rdx)
	movq	8(%rdx), %rsi
	andq	$-2, %rcx
	movq	%rcx, 8(%rdx)
	testb	$2, %sil
	je	.LBB388_102
	jmp	.LBB388_110
	.p2align	4, 0x90
.LBB388_115:                            # %mark.exit605
                                        #   in Loop: Header=BB388_71 Depth=1
	movq	184(%rax), %rsi
	xorl	%edi, %edi
	testb	$2, %sil
	jne	.LBB388_124
	.p2align	4, 0x90
.LBB388_116:                            # %"$4.i568"
                                        #   Parent Loop BB388_71 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rsi, %rbx
	movq	%rsi, %rcx
	andq	$-16, %rcx
	movq	8(%rcx), %rsi
	testb	$1, %sil
	je	.LBB388_123
# %bb.117:                              # %"$6.i570"
                                        #   in Loop: Header=BB388_116 Depth=2
	movq	%rsi, %rdx
	andq	$-2, %rdx
	movq	%rdx, 8(%rcx)
	testb	$4, %bl
	jne	.LBB388_120
# %bb.118:                              # %"$7.i577"
                                        #   in Loop: Header=BB388_116 Depth=2
	movq	(%rcx), %rsi
	orq	$1, %rdi
	movq	%rdi, (%rcx)
	testb	$2, %sil
	movq	%rbx, %rdi
	je	.LBB388_116
	jmp	.LBB388_125
.LBB388_120:                            # %"$9.preheader.i572"
                                        #   in Loop: Header=BB388_71 Depth=1
	testb	$2, %sil
	jne	.LBB388_123
	.p2align	4, 0x90
.LBB388_121:                            # %"$10.i573"
                                        #   Parent Loop BB388_71 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	4(%rdx), %rcx
	testb	$1, %cl
	je	.LBB388_123
# %bb.122:                              # %"$12.i575"
                                        #   in Loop: Header=BB388_121 Depth=2
	movq	%rcx, %rsi
	andq	$-2, %rsi
	movq	%rsi, 4(%rdx)
	testb	$2, %cl
	movq	%rsi, %rdx
	je	.LBB388_121
.LBB388_123:                            #   in Loop: Header=BB388_71 Depth=1
	movq	%rbx, %rsi
.LBB388_124:                            # %"$5.i579"
                                        #   in Loop: Header=BB388_71 Depth=1
	movq	%rdi, %rbx
.LBB388_125:                            # %"$5.i579"
                                        #   in Loop: Header=BB388_71 Depth=1
	movq	%rbx, %rdx
	andq	$-16, %rdx
	je	.LBB388_129
	.p2align	4, 0x90
.LBB388_126:                            # %"$15.i581"
                                        #   Parent Loop BB388_71 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rbx, %rdi
	movq	(%rdx), %rcx
	testb	$1, %cl
	jne	.LBB388_128
# %bb.127:                              # %"$16.i584"
                                        #   in Loop: Header=BB388_126 Depth=2
	movq	8(%rdx), %rbx
	movq	%rsi, 8(%rdx)
	movq	%rbx, %rdx
	andq	$-16, %rdx
	movq	%rdi, %rsi
	jne	.LBB388_126
	jmp	.LBB388_129
.LBB388_128:                            # %"$18.i582"
                                        #   in Loop: Header=BB388_71 Depth=1
	movq	%rsi, (%rdx)
	movq	8(%rdx), %rsi
	andq	$-2, %rcx
	movq	%rcx, 8(%rdx)
	testb	$2, %sil
	je	.LBB388_116
	jmp	.LBB388_124
	.p2align	4, 0x90
.LBB388_129:                            # %mark.exit585
                                        #   in Loop: Header=BB388_71 Depth=1
	movq	192(%rax), %rsi
	xorl	%edi, %edi
	testb	$2, %sil
	jne	.LBB388_138
	.p2align	4, 0x90
.LBB388_130:                            # %"$4.i548"
                                        #   Parent Loop BB388_71 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rsi, %rbx
	movq	%rsi, %rcx
	andq	$-16, %rcx
	movq	8(%rcx), %rsi
	testb	$1, %sil
	je	.LBB388_137
# %bb.131:                              # %"$6.i550"
                                        #   in Loop: Header=BB388_130 Depth=2
	movq	%rsi, %rdx
	andq	$-2, %rdx
	movq	%rdx, 8(%rcx)
	testb	$4, %bl
	jne	.LBB388_134
# %bb.132:                              # %"$7.i557"
                                        #   in Loop: Header=BB388_130 Depth=2
	movq	(%rcx), %rsi
	orq	$1, %rdi
	movq	%rdi, (%rcx)
	testb	$2, %sil
	movq	%rbx, %rdi
	je	.LBB388_130
	jmp	.LBB388_139
.LBB388_134:                            # %"$9.preheader.i552"
                                        #   in Loop: Header=BB388_71 Depth=1
	testb	$2, %sil
	jne	.LBB388_137
	.p2align	4, 0x90
.LBB388_135:                            # %"$10.i553"
                                        #   Parent Loop BB388_71 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	4(%rdx), %rcx
	testb	$1, %cl
	je	.LBB388_137
# %bb.136:                              # %"$12.i555"
                                        #   in Loop: Header=BB388_135 Depth=2
	movq	%rcx, %rsi
	andq	$-2, %rsi
	movq	%rsi, 4(%rdx)
	testb	$2, %cl
	movq	%rsi, %rdx
	je	.LBB388_135
.LBB388_137:                            #   in Loop: Header=BB388_71 Depth=1
	movq	%rbx, %rsi
.LBB388_138:                            # %"$5.i559"
                                        #   in Loop: Header=BB388_71 Depth=1
	movq	%rdi, %rbx
.LBB388_139:                            # %"$5.i559"
                                        #   in Loop: Header=BB388_71 Depth=1
	movq	%rbx, %rdx
	andq	$-16, %rdx
	je	.LBB388_143
	.p2align	4, 0x90
.LBB388_140:                            # %"$15.i561"
                                        #   Parent Loop BB388_71 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rbx, %rdi
	movq	(%rdx), %rcx
	testb	$1, %cl
	jne	.LBB388_142
# %bb.141:                              # %"$16.i564"
                                        #   in Loop: Header=BB388_140 Depth=2
	movq	8(%rdx), %rbx
	movq	%rsi, 8(%rdx)
	movq	%rbx, %rdx
	andq	$-16, %rdx
	movq	%rdi, %rsi
	jne	.LBB388_140
	jmp	.LBB388_143
.LBB388_142:                            # %"$18.i562"
                                        #   in Loop: Header=BB388_71 Depth=1
	movq	%rsi, (%rdx)
	movq	8(%rdx), %rsi
	andq	$-2, %rcx
	movq	%rcx, 8(%rdx)
	testb	$2, %sil
	je	.LBB388_130
	jmp	.LBB388_138
	.p2align	4, 0x90
.LBB388_143:                            # %mark.exit565
                                        #   in Loop: Header=BB388_71 Depth=1
	movq	200(%rax), %rsi
	xorl	%edi, %edi
	testb	$2, %sil
	jne	.LBB388_152
	.p2align	4, 0x90
.LBB388_144:                            # %"$4.i528"
                                        #   Parent Loop BB388_71 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rsi, %rbx
	movq	%rsi, %rcx
	andq	$-16, %rcx
	movq	8(%rcx), %rsi
	testb	$1, %sil
	je	.LBB388_151
# %bb.145:                              # %"$6.i530"
                                        #   in Loop: Header=BB388_144 Depth=2
	movq	%rsi, %rdx
	andq	$-2, %rdx
	movq	%rdx, 8(%rcx)
	testb	$4, %bl
	jne	.LBB388_148
# %bb.146:                              # %"$7.i537"
                                        #   in Loop: Header=BB388_144 Depth=2
	movq	(%rcx), %rsi
	orq	$1, %rdi
	movq	%rdi, (%rcx)
	testb	$2, %sil
	movq	%rbx, %rdi
	je	.LBB388_144
	jmp	.LBB388_153
.LBB388_148:                            # %"$9.preheader.i532"
                                        #   in Loop: Header=BB388_71 Depth=1
	testb	$2, %sil
	jne	.LBB388_151
	.p2align	4, 0x90
.LBB388_149:                            # %"$10.i533"
                                        #   Parent Loop BB388_71 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	4(%rdx), %rcx
	testb	$1, %cl
	je	.LBB388_151
# %bb.150:                              # %"$12.i535"
                                        #   in Loop: Header=BB388_149 Depth=2
	movq	%rcx, %rsi
	andq	$-2, %rsi
	movq	%rsi, 4(%rdx)
	testb	$2, %cl
	movq	%rsi, %rdx
	je	.LBB388_149
.LBB388_151:                            #   in Loop: Header=BB388_71 Depth=1
	movq	%rbx, %rsi
.LBB388_152:                            # %"$5.i539"
                                        #   in Loop: Header=BB388_71 Depth=1
	movq	%rdi, %rbx
.LBB388_153:                            # %"$5.i539"
                                        #   in Loop: Header=BB388_71 Depth=1
	movq	%rbx, %rdx
	andq	$-16, %rdx
	je	.LBB388_157
	.p2align	4, 0x90
.LBB388_154:                            # %"$15.i541"
                                        #   Parent Loop BB388_71 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rbx, %rdi
	movq	(%rdx), %rcx
	testb	$1, %cl
	jne	.LBB388_156
# %bb.155:                              # %"$16.i544"
                                        #   in Loop: Header=BB388_154 Depth=2
	movq	8(%rdx), %rbx
	movq	%rsi, 8(%rdx)
	movq	%rbx, %rdx
	andq	$-16, %rdx
	movq	%rdi, %rsi
	jne	.LBB388_154
	jmp	.LBB388_157
.LBB388_156:                            # %"$18.i542"
                                        #   in Loop: Header=BB388_71 Depth=1
	movq	%rsi, (%rdx)
	movq	8(%rdx), %rsi
	andq	$-2, %rcx
	movq	%rcx, 8(%rdx)
	testb	$2, %sil
	je	.LBB388_144
	jmp	.LBB388_152
	.p2align	4, 0x90
.LBB388_157:                            # %mark.exit545
                                        #   in Loop: Header=BB388_71 Depth=1
	movq	208(%rax), %rsi
	xorl	%edi, %edi
	testb	$2, %sil
	jne	.LBB388_166
	.p2align	4, 0x90
.LBB388_158:                            # %"$4.i508"
                                        #   Parent Loop BB388_71 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rsi, %rbx
	movq	%rsi, %rcx
	andq	$-16, %rcx
	movq	8(%rcx), %rsi
	testb	$1, %sil
	je	.LBB388_165
# %bb.159:                              # %"$6.i510"
                                        #   in Loop: Header=BB388_158 Depth=2
	movq	%rsi, %rdx
	andq	$-2, %rdx
	movq	%rdx, 8(%rcx)
	testb	$4, %bl
	jne	.LBB388_162
# %bb.160:                              # %"$7.i517"
                                        #   in Loop: Header=BB388_158 Depth=2
	movq	(%rcx), %rsi
	orq	$1, %rdi
	movq	%rdi, (%rcx)
	testb	$2, %sil
	movq	%rbx, %rdi
	je	.LBB388_158
	jmp	.LBB388_167
.LBB388_162:                            # %"$9.preheader.i512"
                                        #   in Loop: Header=BB388_71 Depth=1
	testb	$2, %sil
	jne	.LBB388_165
	.p2align	4, 0x90
.LBB388_163:                            # %"$10.i513"
                                        #   Parent Loop BB388_71 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	4(%rdx), %rcx
	testb	$1, %cl
	je	.LBB388_165
# %bb.164:                              # %"$12.i515"
                                        #   in Loop: Header=BB388_163 Depth=2
	movq	%rcx, %rsi
	andq	$-2, %rsi
	movq	%rsi, 4(%rdx)
	testb	$2, %cl
	movq	%rsi, %rdx
	je	.LBB388_163
.LBB388_165:                            #   in Loop: Header=BB388_71 Depth=1
	movq	%rbx, %rsi
.LBB388_166:                            # %"$5.i519"
                                        #   in Loop: Header=BB388_71 Depth=1
	movq	%rdi, %rbx
.LBB388_167:                            # %"$5.i519"
                                        #   in Loop: Header=BB388_71 Depth=1
	movq	%rbx, %rdx
	andq	$-16, %rdx
	je	.LBB388_70
	.p2align	4, 0x90
.LBB388_168:                            # %"$15.i521"
                                        #   Parent Loop BB388_71 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rbx, %rdi
	movq	(%rdx), %rcx
	testb	$1, %cl
	jne	.LBB388_170
# %bb.169:                              # %"$16.i524"
                                        #   in Loop: Header=BB388_168 Depth=2
	movq	8(%rdx), %rbx
	movq	%rsi, 8(%rdx)
	movq	%rbx, %rdx
	andq	$-16, %rdx
	movq	%rdi, %rsi
	jne	.LBB388_168
	jmp	.LBB388_70
.LBB388_170:                            # %"$18.i522"
                                        #   in Loop: Header=BB388_71 Depth=1
	movq	%rsi, (%rdx)
	movq	8(%rdx), %rsi
	andq	$-2, %rcx
	movq	%rcx, 8(%rdx)
	testb	$2, %sil
	je	.LBB388_158
	jmp	.LBB388_166
.LBB388_171:                            # %"$25.preheader"
	movq	env+72(%rip), %rax
	jmp	.LBB388_173
	.p2align	4, 0x90
.LBB388_172:                            # %"$29"
                                        #   in Loop: Header=BB388_173 Depth=1
	movq	(%rax), %rax
.LBB388_173:                            # %"$25.preheader"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB388_176 Depth 2
                                        #     Child Loop BB388_181 Depth 2
                                        #     Child Loop BB388_186 Depth 2
	testq	%rax, %rax
	je	.LBB388_189
# %bb.174:                              # %"$26"
                                        #   in Loop: Header=BB388_173 Depth=1
	movq	24(%rax), %rsi
	testq	%rsi, %rsi
	je	.LBB388_172
# %bb.175:                              # %"$2.i487.preheader"
                                        #   in Loop: Header=BB388_173 Depth=1
	xorl	%edi, %edi
	testb	$2, %sil
	jne	.LBB388_184
	.p2align	4, 0x90
.LBB388_176:                            # %"$4.i488"
                                        #   Parent Loop BB388_173 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rsi, %rbx
	movq	%rsi, %rcx
	andq	$-16, %rcx
	movq	8(%rcx), %rsi
	testb	$1, %sil
	je	.LBB388_183
# %bb.177:                              # %"$6.i490"
                                        #   in Loop: Header=BB388_176 Depth=2
	movq	%rsi, %rdx
	andq	$-2, %rdx
	movq	%rdx, 8(%rcx)
	testb	$4, %bl
	jne	.LBB388_180
# %bb.178:                              # %"$7.i497"
                                        #   in Loop: Header=BB388_176 Depth=2
	movq	(%rcx), %rsi
	orq	$1, %rdi
	movq	%rdi, (%rcx)
	testb	$2, %sil
	movq	%rbx, %rdi
	je	.LBB388_176
	jmp	.LBB388_185
.LBB388_180:                            # %"$9.preheader.i492"
                                        #   in Loop: Header=BB388_173 Depth=1
	testb	$2, %sil
	jne	.LBB388_183
	.p2align	4, 0x90
.LBB388_181:                            # %"$10.i493"
                                        #   Parent Loop BB388_173 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	4(%rdx), %rcx
	testb	$1, %cl
	je	.LBB388_183
# %bb.182:                              # %"$12.i495"
                                        #   in Loop: Header=BB388_181 Depth=2
	movq	%rcx, %rsi
	andq	$-2, %rsi
	movq	%rsi, 4(%rdx)
	testb	$2, %cl
	movq	%rsi, %rdx
	je	.LBB388_181
.LBB388_183:                            #   in Loop: Header=BB388_173 Depth=1
	movq	%rbx, %rsi
.LBB388_184:                            # %"$5.i499"
                                        #   in Loop: Header=BB388_173 Depth=1
	movq	%rdi, %rbx
.LBB388_185:                            # %"$5.i499"
                                        #   in Loop: Header=BB388_173 Depth=1
	movq	%rbx, %rdx
	andq	$-16, %rdx
	je	.LBB388_172
	.p2align	4, 0x90
.LBB388_186:                            # %"$15.i501"
                                        #   Parent Loop BB388_173 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rbx, %rdi
	movq	(%rdx), %rcx
	testb	$1, %cl
	jne	.LBB388_188
# %bb.187:                              # %"$16.i504"
                                        #   in Loop: Header=BB388_186 Depth=2
	movq	8(%rdx), %rbx
	movq	%rsi, 8(%rdx)
	movq	%rbx, %rdx
	andq	$-16, %rdx
	movq	%rdi, %rsi
	jne	.LBB388_186
	jmp	.LBB388_172
.LBB388_188:                            # %"$18.i502"
                                        #   in Loop: Header=BB388_173 Depth=1
	movq	%rsi, (%rdx)
	movq	8(%rdx), %rsi
	andq	$-2, %rcx
	movq	%rcx, 8(%rdx)
	testb	$2, %sil
	je	.LBB388_176
	jmp	.LBB388_184
.LBB388_189:                            # %"$30.preheader"
	movq	($Coroutines)(%rip), %r8
	jmp	.LBB388_191
	.p2align	4, 0x90
.LBB388_190:                            # %"$36"
                                        #   in Loop: Header=BB388_191 Depth=1
	movq	16(%r8), %r8
.LBB388_191:                            # %"$30.preheader"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB388_195 Depth 2
                                        #     Child Loop BB388_200 Depth 2
                                        #     Child Loop BB388_205 Depth 2
                                        #     Child Loop BB388_209 Depth 2
                                        #     Child Loop BB388_214 Depth 2
                                        #     Child Loop BB388_219 Depth 2
                                        #     Child Loop BB388_223 Depth 2
                                        #     Child Loop BB388_228 Depth 2
                                        #     Child Loop BB388_233 Depth 2
                                        #     Child Loop BB388_237 Depth 2
                                        #     Child Loop BB388_242 Depth 2
                                        #     Child Loop BB388_247 Depth 2
                                        #     Child Loop BB388_251 Depth 2
                                        #     Child Loop BB388_256 Depth 2
                                        #     Child Loop BB388_261 Depth 2
                                        #     Child Loop BB388_265 Depth 2
                                        #     Child Loop BB388_270 Depth 2
                                        #     Child Loop BB388_275 Depth 2
                                        #     Child Loop BB388_279 Depth 2
                                        #     Child Loop BB388_284 Depth 2
                                        #     Child Loop BB388_289 Depth 2
                                        #     Child Loop BB388_293 Depth 2
                                        #     Child Loop BB388_298 Depth 2
                                        #     Child Loop BB388_303 Depth 2
                                        #     Child Loop BB388_308 Depth 2
                                        #       Child Loop BB388_310 Depth 3
                                        #       Child Loop BB388_315 Depth 3
                                        #       Child Loop BB388_320 Depth 3
                                        #     Child Loop BB388_325 Depth 2
                                        #       Child Loop BB388_327 Depth 3
                                        #       Child Loop BB388_332 Depth 3
                                        #       Child Loop BB388_337 Depth 3
                                        #       Child Loop BB388_341 Depth 3
                                        #       Child Loop BB388_346 Depth 3
                                        #       Child Loop BB388_351 Depth 3
                                        #     Child Loop BB388_356 Depth 2
                                        #       Child Loop BB388_359 Depth 3
                                        #       Child Loop BB388_364 Depth 3
                                        #       Child Loop BB388_369 Depth 3
                                        #       Child Loop BB388_373 Depth 3
                                        #       Child Loop BB388_378 Depth 3
                                        #       Child Loop BB388_383 Depth 3
                                        #       Child Loop BB388_387 Depth 3
                                        #       Child Loop BB388_392 Depth 3
                                        #       Child Loop BB388_397 Depth 3
                                        #       Child Loop BB388_401 Depth 3
                                        #       Child Loop BB388_406 Depth 3
                                        #       Child Loop BB388_411 Depth 3
                                        #       Child Loop BB388_415 Depth 3
                                        #       Child Loop BB388_420 Depth 3
                                        #       Child Loop BB388_425 Depth 3
                                        #       Child Loop BB388_429 Depth 3
                                        #       Child Loop BB388_434 Depth 3
                                        #       Child Loop BB388_439 Depth 3
                                        #       Child Loop BB388_443 Depth 3
                                        #       Child Loop BB388_448 Depth 3
                                        #       Child Loop BB388_453 Depth 3
	testq	%r8, %r8
	je	.LBB388_456
# %bb.192:                              # %"$31"
                                        #   in Loop: Header=BB388_191 Depth=1
	movq	(%r8), %rsi
	testq	%rsi, %rsi
	je	.LBB388_190
# %bb.193:                              # %"$34"
                                        #   in Loop: Header=BB388_191 Depth=1
	cmpq	$0, 48(%r8)
	je	.LBB388_190
# %bb.194:                              # %"$2.i467.preheader"
                                        #   in Loop: Header=BB388_191 Depth=1
	xorl	%edi, %edi
	testb	$2, %sil
	jne	.LBB388_203
	.p2align	4, 0x90
.LBB388_195:                            # %"$4.i468"
                                        #   Parent Loop BB388_191 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rsi, %rbx
	movq	%rsi, %rcx
	andq	$-16, %rcx
	movq	8(%rcx), %rax
	testb	$1, %al
	je	.LBB388_202
# %bb.196:                              # %"$6.i470"
                                        #   in Loop: Header=BB388_195 Depth=2
	movq	%rax, %rdx
	andq	$-2, %rdx
	movq	%rdx, 8(%rcx)
	testb	$4, %bl
	jne	.LBB388_199
# %bb.197:                              # %"$7.i477"
                                        #   in Loop: Header=BB388_195 Depth=2
	movq	(%rcx), %rsi
	orq	$1, %rdi
	movq	%rdi, (%rcx)
	testb	$2, %sil
	movq	%rbx, %rdi
	je	.LBB388_195
	jmp	.LBB388_204
.LBB388_199:                            # %"$9.preheader.i472"
                                        #   in Loop: Header=BB388_191 Depth=1
	testb	$2, %al
	jne	.LBB388_202
	.p2align	4, 0x90
.LBB388_200:                            # %"$10.i473"
                                        #   Parent Loop BB388_191 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	4(%rdx), %rax
	testb	$1, %al
	je	.LBB388_202
# %bb.201:                              # %"$12.i475"
                                        #   in Loop: Header=BB388_200 Depth=2
	movq	%rax, %rcx
	andq	$-2, %rcx
	movq	%rcx, 4(%rdx)
	testb	$2, %al
	movq	%rcx, %rdx
	je	.LBB388_200
.LBB388_202:                            #   in Loop: Header=BB388_191 Depth=1
	movq	%rbx, %rsi
.LBB388_203:                            # %"$5.i479"
                                        #   in Loop: Header=BB388_191 Depth=1
	movq	%rdi, %rbx
.LBB388_204:                            # %"$5.i479"
                                        #   in Loop: Header=BB388_191 Depth=1
	movq	%rbx, %rdx
	andq	$-16, %rdx
	je	.LBB388_208
	.p2align	4, 0x90
.LBB388_205:                            # %"$15.i481"
                                        #   Parent Loop BB388_191 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rbx, %rdi
	movq	(%rdx), %rax
	testb	$1, %al
	jne	.LBB388_207
# %bb.206:                              # %"$16.i484"
                                        #   in Loop: Header=BB388_205 Depth=2
	movq	8(%rdx), %rbx
	movq	%rsi, 8(%rdx)
	movq	%rbx, %rdx
	andq	$-16, %rdx
	movq	%rdi, %rsi
	jne	.LBB388_205
	jmp	.LBB388_208
.LBB388_207:                            # %"$18.i482"
                                        #   in Loop: Header=BB388_191 Depth=1
	movq	%rsi, (%rdx)
	movq	8(%rdx), %rsi
	andq	$-2, %rax
	movq	%rax, 8(%rdx)
	testb	$2, %sil
	je	.LBB388_195
	jmp	.LBB388_203
	.p2align	4, 0x90
.LBB388_208:                            # %mark.exit485
                                        #   in Loop: Header=BB388_191 Depth=1
	movq	32(%r8), %rsi
	xorl	%edi, %edi
	testb	$2, %sil
	jne	.LBB388_217
	.p2align	4, 0x90
.LBB388_209:                            # %"$4.i448"
                                        #   Parent Loop BB388_191 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rsi, %rbx
	movq	%rsi, %rcx
	andq	$-16, %rcx
	movq	8(%rcx), %rax
	testb	$1, %al
	je	.LBB388_216
# %bb.210:                              # %"$6.i450"
                                        #   in Loop: Header=BB388_209 Depth=2
	movq	%rax, %rdx
	andq	$-2, %rdx
	movq	%rdx, 8(%rcx)
	testb	$4, %bl
	jne	.LBB388_213
# %bb.211:                              # %"$7.i457"
                                        #   in Loop: Header=BB388_209 Depth=2
	movq	(%rcx), %rsi
	orq	$1, %rdi
	movq	%rdi, (%rcx)
	testb	$2, %sil
	movq	%rbx, %rdi
	je	.LBB388_209
	jmp	.LBB388_218
.LBB388_213:                            # %"$9.preheader.i452"
                                        #   in Loop: Header=BB388_191 Depth=1
	testb	$2, %al
	jne	.LBB388_216
	.p2align	4, 0x90
.LBB388_214:                            # %"$10.i453"
                                        #   Parent Loop BB388_191 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	4(%rdx), %rax
	testb	$1, %al
	je	.LBB388_216
# %bb.215:                              # %"$12.i455"
                                        #   in Loop: Header=BB388_214 Depth=2
	movq	%rax, %rcx
	andq	$-2, %rcx
	movq	%rcx, 4(%rdx)
	testb	$2, %al
	movq	%rcx, %rdx
	je	.LBB388_214
.LBB388_216:                            #   in Loop: Header=BB388_191 Depth=1
	movq	%rbx, %rsi
.LBB388_217:                            # %"$5.i459"
                                        #   in Loop: Header=BB388_191 Depth=1
	movq	%rdi, %rbx
.LBB388_218:                            # %"$5.i459"
                                        #   in Loop: Header=BB388_191 Depth=1
	movq	%rbx, %rdx
	andq	$-16, %rdx
	je	.LBB388_222
	.p2align	4, 0x90
.LBB388_219:                            # %"$15.i461"
                                        #   Parent Loop BB388_191 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rbx, %rdi
	movq	(%rdx), %rax
	testb	$1, %al
	jne	.LBB388_221
# %bb.220:                              # %"$16.i464"
                                        #   in Loop: Header=BB388_219 Depth=2
	movq	8(%rdx), %rbx
	movq	%rsi, 8(%rdx)
	movq	%rbx, %rdx
	andq	$-16, %rdx
	movq	%rdi, %rsi
	jne	.LBB388_219
	jmp	.LBB388_222
.LBB388_221:                            # %"$18.i462"
                                        #   in Loop: Header=BB388_191 Depth=1
	movq	%rsi, (%rdx)
	movq	8(%rdx), %rsi
	andq	$-2, %rax
	movq	%rax, 8(%rdx)
	testb	$2, %sil
	je	.LBB388_209
	jmp	.LBB388_217
	.p2align	4, 0x90
.LBB388_222:                            # %mark.exit465
                                        #   in Loop: Header=BB388_191 Depth=1
	movq	48(%r8), %rsi
	xorl	%edi, %edi
	testb	$2, %sil
	jne	.LBB388_231
	.p2align	4, 0x90
.LBB388_223:                            # %"$4.i428"
                                        #   Parent Loop BB388_191 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rsi, %rbx
	movq	%rsi, %rcx
	andq	$-16, %rcx
	movq	8(%rcx), %rax
	testb	$1, %al
	je	.LBB388_230
# %bb.224:                              # %"$6.i430"
                                        #   in Loop: Header=BB388_223 Depth=2
	movq	%rax, %rdx
	andq	$-2, %rdx
	movq	%rdx, 8(%rcx)
	testb	$4, %bl
	jne	.LBB388_227
# %bb.225:                              # %"$7.i437"
                                        #   in Loop: Header=BB388_223 Depth=2
	movq	(%rcx), %rsi
	orq	$1, %rdi
	movq	%rdi, (%rcx)
	testb	$2, %sil
	movq	%rbx, %rdi
	je	.LBB388_223
	jmp	.LBB388_232
.LBB388_227:                            # %"$9.preheader.i432"
                                        #   in Loop: Header=BB388_191 Depth=1
	testb	$2, %al
	jne	.LBB388_230
	.p2align	4, 0x90
.LBB388_228:                            # %"$10.i433"
                                        #   Parent Loop BB388_191 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	4(%rdx), %rax
	testb	$1, %al
	je	.LBB388_230
# %bb.229:                              # %"$12.i435"
                                        #   in Loop: Header=BB388_228 Depth=2
	movq	%rax, %rcx
	andq	$-2, %rcx
	movq	%rcx, 4(%rdx)
	testb	$2, %al
	movq	%rcx, %rdx
	je	.LBB388_228
.LBB388_230:                            #   in Loop: Header=BB388_191 Depth=1
	movq	%rbx, %rsi
.LBB388_231:                            # %"$5.i439"
                                        #   in Loop: Header=BB388_191 Depth=1
	movq	%rdi, %rbx
.LBB388_232:                            # %"$5.i439"
                                        #   in Loop: Header=BB388_191 Depth=1
	movq	%rbx, %rdx
	andq	$-16, %rdx
	je	.LBB388_236
	.p2align	4, 0x90
.LBB388_233:                            # %"$15.i441"
                                        #   Parent Loop BB388_191 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rbx, %rdi
	movq	(%rdx), %rax
	testb	$1, %al
	jne	.LBB388_235
# %bb.234:                              # %"$16.i444"
                                        #   in Loop: Header=BB388_233 Depth=2
	movq	8(%rdx), %rbx
	movq	%rsi, 8(%rdx)
	movq	%rbx, %rdx
	andq	$-16, %rdx
	movq	%rdi, %rsi
	jne	.LBB388_233
	jmp	.LBB388_236
.LBB388_235:                            # %"$18.i442"
                                        #   in Loop: Header=BB388_191 Depth=1
	movq	%rsi, (%rdx)
	movq	8(%rdx), %rsi
	andq	$-2, %rax
	movq	%rax, 8(%rdx)
	testb	$2, %sil
	je	.LBB388_223
	jmp	.LBB388_231
	.p2align	4, 0x90
.LBB388_236:                            # %mark.exit445
                                        #   in Loop: Header=BB388_191 Depth=1
	movq	240(%r8), %rsi
	xorl	%edi, %edi
	testb	$2, %sil
	jne	.LBB388_245
	.p2align	4, 0x90
.LBB388_237:                            # %"$4.i408"
                                        #   Parent Loop BB388_191 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rsi, %rbx
	movq	%rsi, %rcx
	andq	$-16, %rcx
	movq	8(%rcx), %rax
	testb	$1, %al
	je	.LBB388_244
# %bb.238:                              # %"$6.i410"
                                        #   in Loop: Header=BB388_237 Depth=2
	movq	%rax, %rdx
	andq	$-2, %rdx
	movq	%rdx, 8(%rcx)
	testb	$4, %bl
	jne	.LBB388_241
# %bb.239:                              # %"$7.i417"
                                        #   in Loop: Header=BB388_237 Depth=2
	movq	(%rcx), %rsi
	orq	$1, %rdi
	movq	%rdi, (%rcx)
	testb	$2, %sil
	movq	%rbx, %rdi
	je	.LBB388_237
	jmp	.LBB388_246
.LBB388_241:                            # %"$9.preheader.i412"
                                        #   in Loop: Header=BB388_191 Depth=1
	testb	$2, %al
	jne	.LBB388_244
	.p2align	4, 0x90
.LBB388_242:                            # %"$10.i413"
                                        #   Parent Loop BB388_191 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	4(%rdx), %rax
	testb	$1, %al
	je	.LBB388_244
# %bb.243:                              # %"$12.i415"
                                        #   in Loop: Header=BB388_242 Depth=2
	movq	%rax, %rcx
	andq	$-2, %rcx
	movq	%rcx, 4(%rdx)
	testb	$2, %al
	movq	%rcx, %rdx
	je	.LBB388_242
.LBB388_244:                            #   in Loop: Header=BB388_191 Depth=1
	movq	%rbx, %rsi
.LBB388_245:                            # %"$5.i419"
                                        #   in Loop: Header=BB388_191 Depth=1
	movq	%rdi, %rbx
.LBB388_246:                            # %"$5.i419"
                                        #   in Loop: Header=BB388_191 Depth=1
	movq	%rbx, %rdx
	andq	$-16, %rdx
	je	.LBB388_250
	.p2align	4, 0x90
.LBB388_247:                            # %"$15.i421"
                                        #   Parent Loop BB388_191 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rbx, %rdi
	movq	(%rdx), %rax
	testb	$1, %al
	jne	.LBB388_249
# %bb.248:                              # %"$16.i424"
                                        #   in Loop: Header=BB388_247 Depth=2
	movq	8(%rdx), %rbx
	movq	%rsi, 8(%rdx)
	movq	%rbx, %rdx
	andq	$-16, %rdx
	movq	%rdi, %rsi
	jne	.LBB388_247
	jmp	.LBB388_250
.LBB388_249:                            # %"$18.i422"
                                        #   in Loop: Header=BB388_191 Depth=1
	movq	%rsi, (%rdx)
	movq	8(%rdx), %rsi
	andq	$-2, %rax
	movq	%rax, 8(%rdx)
	testb	$2, %sil
	je	.LBB388_237
	jmp	.LBB388_245
	.p2align	4, 0x90
.LBB388_250:                            # %mark.exit425
                                        #   in Loop: Header=BB388_191 Depth=1
	movq	248(%r8), %rsi
	xorl	%edi, %edi
	testb	$2, %sil
	jne	.LBB388_259
	.p2align	4, 0x90
.LBB388_251:                            # %"$4.i388"
                                        #   Parent Loop BB388_191 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rsi, %rbx
	movq	%rsi, %rcx
	andq	$-16, %rcx
	movq	8(%rcx), %rax
	testb	$1, %al
	je	.LBB388_258
# %bb.252:                              # %"$6.i390"
                                        #   in Loop: Header=BB388_251 Depth=2
	movq	%rax, %rdx
	andq	$-2, %rdx
	movq	%rdx, 8(%rcx)
	testb	$4, %bl
	jne	.LBB388_255
# %bb.253:                              # %"$7.i397"
                                        #   in Loop: Header=BB388_251 Depth=2
	movq	(%rcx), %rsi
	orq	$1, %rdi
	movq	%rdi, (%rcx)
	testb	$2, %sil
	movq	%rbx, %rdi
	je	.LBB388_251
	jmp	.LBB388_260
.LBB388_255:                            # %"$9.preheader.i392"
                                        #   in Loop: Header=BB388_191 Depth=1
	testb	$2, %al
	jne	.LBB388_258
	.p2align	4, 0x90
.LBB388_256:                            # %"$10.i393"
                                        #   Parent Loop BB388_191 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	4(%rdx), %rax
	testb	$1, %al
	je	.LBB388_258
# %bb.257:                              # %"$12.i395"
                                        #   in Loop: Header=BB388_256 Depth=2
	movq	%rax, %rcx
	andq	$-2, %rcx
	movq	%rcx, 4(%rdx)
	testb	$2, %al
	movq	%rcx, %rdx
	je	.LBB388_256
.LBB388_258:                            #   in Loop: Header=BB388_191 Depth=1
	movq	%rbx, %rsi
.LBB388_259:                            # %"$5.i399"
                                        #   in Loop: Header=BB388_191 Depth=1
	movq	%rdi, %rbx
.LBB388_260:                            # %"$5.i399"
                                        #   in Loop: Header=BB388_191 Depth=1
	movq	%rbx, %rdx
	andq	$-16, %rdx
	je	.LBB388_264
	.p2align	4, 0x90
.LBB388_261:                            # %"$15.i401"
                                        #   Parent Loop BB388_191 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rbx, %rdi
	movq	(%rdx), %rax
	testb	$1, %al
	jne	.LBB388_263
# %bb.262:                              # %"$16.i404"
                                        #   in Loop: Header=BB388_261 Depth=2
	movq	8(%rdx), %rbx
	movq	%rsi, 8(%rdx)
	movq	%rbx, %rdx
	andq	$-16, %rdx
	movq	%rdi, %rsi
	jne	.LBB388_261
	jmp	.LBB388_264
.LBB388_263:                            # %"$18.i402"
                                        #   in Loop: Header=BB388_191 Depth=1
	movq	%rsi, (%rdx)
	movq	8(%rdx), %rsi
	andq	$-2, %rax
	movq	%rax, 8(%rdx)
	testb	$2, %sil
	je	.LBB388_251
	jmp	.LBB388_259
	.p2align	4, 0x90
.LBB388_264:                            # %mark.exit405
                                        #   in Loop: Header=BB388_191 Depth=1
	movq	256(%r8), %rsi
	xorl	%edi, %edi
	testb	$2, %sil
	jne	.LBB388_273
	.p2align	4, 0x90
.LBB388_265:                            # %"$4.i368"
                                        #   Parent Loop BB388_191 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rsi, %rbx
	movq	%rsi, %rcx
	andq	$-16, %rcx
	movq	8(%rcx), %rax
	testb	$1, %al
	je	.LBB388_272
# %bb.266:                              # %"$6.i370"
                                        #   in Loop: Header=BB388_265 Depth=2
	movq	%rax, %rdx
	andq	$-2, %rdx
	movq	%rdx, 8(%rcx)
	testb	$4, %bl
	jne	.LBB388_269
# %bb.267:                              # %"$7.i377"
                                        #   in Loop: Header=BB388_265 Depth=2
	movq	(%rcx), %rsi
	orq	$1, %rdi
	movq	%rdi, (%rcx)
	testb	$2, %sil
	movq	%rbx, %rdi
	je	.LBB388_265
	jmp	.LBB388_274
.LBB388_269:                            # %"$9.preheader.i372"
                                        #   in Loop: Header=BB388_191 Depth=1
	testb	$2, %al
	jne	.LBB388_272
	.p2align	4, 0x90
.LBB388_270:                            # %"$10.i373"
                                        #   Parent Loop BB388_191 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	4(%rdx), %rax
	testb	$1, %al
	je	.LBB388_272
# %bb.271:                              # %"$12.i375"
                                        #   in Loop: Header=BB388_270 Depth=2
	movq	%rax, %rcx
	andq	$-2, %rcx
	movq	%rcx, 4(%rdx)
	testb	$2, %al
	movq	%rcx, %rdx
	je	.LBB388_270
.LBB388_272:                            #   in Loop: Header=BB388_191 Depth=1
	movq	%rbx, %rsi
.LBB388_273:                            # %"$5.i379"
                                        #   in Loop: Header=BB388_191 Depth=1
	movq	%rdi, %rbx
.LBB388_274:                            # %"$5.i379"
                                        #   in Loop: Header=BB388_191 Depth=1
	movq	%rbx, %rdx
	andq	$-16, %rdx
	je	.LBB388_278
	.p2align	4, 0x90
.LBB388_275:                            # %"$15.i381"
                                        #   Parent Loop BB388_191 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rbx, %rdi
	movq	(%rdx), %rax
	testb	$1, %al
	jne	.LBB388_277
# %bb.276:                              # %"$16.i384"
                                        #   in Loop: Header=BB388_275 Depth=2
	movq	8(%rdx), %rbx
	movq	%rsi, 8(%rdx)
	movq	%rbx, %rdx
	andq	$-16, %rdx
	movq	%rdi, %rsi
	jne	.LBB388_275
	jmp	.LBB388_278
.LBB388_277:                            # %"$18.i382"
                                        #   in Loop: Header=BB388_191 Depth=1
	movq	%rsi, (%rdx)
	movq	8(%rdx), %rsi
	andq	$-2, %rax
	movq	%rax, 8(%rdx)
	testb	$2, %sil
	je	.LBB388_265
	jmp	.LBB388_273
	.p2align	4, 0x90
.LBB388_278:                            # %mark.exit385
                                        #   in Loop: Header=BB388_191 Depth=1
	movq	264(%r8), %rsi
	xorl	%edi, %edi
	testb	$2, %sil
	jne	.LBB388_287
	.p2align	4, 0x90
.LBB388_279:                            # %"$4.i348"
                                        #   Parent Loop BB388_191 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rsi, %rbx
	movq	%rsi, %rcx
	andq	$-16, %rcx
	movq	8(%rcx), %rax
	testb	$1, %al
	je	.LBB388_286
# %bb.280:                              # %"$6.i350"
                                        #   in Loop: Header=BB388_279 Depth=2
	movq	%rax, %rdx
	andq	$-2, %rdx
	movq	%rdx, 8(%rcx)
	testb	$4, %bl
	jne	.LBB388_283
# %bb.281:                              # %"$7.i357"
                                        #   in Loop: Header=BB388_279 Depth=2
	movq	(%rcx), %rsi
	orq	$1, %rdi
	movq	%rdi, (%rcx)
	testb	$2, %sil
	movq	%rbx, %rdi
	je	.LBB388_279
	jmp	.LBB388_288
.LBB388_283:                            # %"$9.preheader.i352"
                                        #   in Loop: Header=BB388_191 Depth=1
	testb	$2, %al
	jne	.LBB388_286
	.p2align	4, 0x90
.LBB388_284:                            # %"$10.i353"
                                        #   Parent Loop BB388_191 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	4(%rdx), %rax
	testb	$1, %al
	je	.LBB388_286
# %bb.285:                              # %"$12.i355"
                                        #   in Loop: Header=BB388_284 Depth=2
	movq	%rax, %rcx
	andq	$-2, %rcx
	movq	%rcx, 4(%rdx)
	testb	$2, %al
	movq	%rcx, %rdx
	je	.LBB388_284
.LBB388_286:                            #   in Loop: Header=BB388_191 Depth=1
	movq	%rbx, %rsi
.LBB388_287:                            # %"$5.i359"
                                        #   in Loop: Header=BB388_191 Depth=1
	movq	%rdi, %rbx
.LBB388_288:                            # %"$5.i359"
                                        #   in Loop: Header=BB388_191 Depth=1
	movq	%rbx, %rdx
	andq	$-16, %rdx
	je	.LBB388_292
	.p2align	4, 0x90
.LBB388_289:                            # %"$15.i361"
                                        #   Parent Loop BB388_191 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rbx, %rdi
	movq	(%rdx), %rax
	testb	$1, %al
	jne	.LBB388_291
# %bb.290:                              # %"$16.i364"
                                        #   in Loop: Header=BB388_289 Depth=2
	movq	8(%rdx), %rbx
	movq	%rsi, 8(%rdx)
	movq	%rbx, %rdx
	andq	$-16, %rdx
	movq	%rdi, %rsi
	jne	.LBB388_289
	jmp	.LBB388_292
.LBB388_291:                            # %"$18.i362"
                                        #   in Loop: Header=BB388_191 Depth=1
	movq	%rsi, (%rdx)
	movq	8(%rdx), %rsi
	andq	$-2, %rax
	movq	%rax, 8(%rdx)
	testb	$2, %sil
	je	.LBB388_279
	jmp	.LBB388_287
	.p2align	4, 0x90
.LBB388_292:                            # %mark.exit365
                                        #   in Loop: Header=BB388_191 Depth=1
	movq	272(%r8), %rsi
	xorl	%edi, %edi
	testb	$2, %sil
	jne	.LBB388_301
	.p2align	4, 0x90
.LBB388_293:                            # %"$4.i328"
                                        #   Parent Loop BB388_191 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rsi, %rbx
	movq	%rsi, %rcx
	andq	$-16, %rcx
	movq	8(%rcx), %rax
	testb	$1, %al
	je	.LBB388_300
# %bb.294:                              # %"$6.i330"
                                        #   in Loop: Header=BB388_293 Depth=2
	movq	%rax, %rdx
	andq	$-2, %rdx
	movq	%rdx, 8(%rcx)
	testb	$4, %bl
	jne	.LBB388_297
# %bb.295:                              # %"$7.i337"
                                        #   in Loop: Header=BB388_293 Depth=2
	movq	(%rcx), %rsi
	orq	$1, %rdi
	movq	%rdi, (%rcx)
	testb	$2, %sil
	movq	%rbx, %rdi
	je	.LBB388_293
	jmp	.LBB388_302
.LBB388_297:                            # %"$9.preheader.i332"
                                        #   in Loop: Header=BB388_191 Depth=1
	testb	$2, %al
	jne	.LBB388_300
	.p2align	4, 0x90
.LBB388_298:                            # %"$10.i333"
                                        #   Parent Loop BB388_191 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	4(%rdx), %rax
	testb	$1, %al
	je	.LBB388_300
# %bb.299:                              # %"$12.i335"
                                        #   in Loop: Header=BB388_298 Depth=2
	movq	%rax, %rcx
	andq	$-2, %rcx
	movq	%rcx, 4(%rdx)
	testb	$2, %al
	movq	%rcx, %rdx
	je	.LBB388_298
.LBB388_300:                            #   in Loop: Header=BB388_191 Depth=1
	movq	%rbx, %rsi
.LBB388_301:                            # %"$5.i339"
                                        #   in Loop: Header=BB388_191 Depth=1
	movq	%rdi, %rbx
.LBB388_302:                            # %"$5.i339"
                                        #   in Loop: Header=BB388_191 Depth=1
	movq	%rbx, %rdx
	andq	$-16, %rdx
	je	.LBB388_306
	.p2align	4, 0x90
.LBB388_303:                            # %"$15.i341"
                                        #   Parent Loop BB388_191 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rbx, %rdi
	movq	(%rdx), %rax
	testb	$1, %al
	jne	.LBB388_305
# %bb.304:                              # %"$16.i344"
                                        #   in Loop: Header=BB388_303 Depth=2
	movq	8(%rdx), %rbx
	movq	%rsi, 8(%rdx)
	movq	%rbx, %rdx
	andq	$-16, %rdx
	movq	%rdi, %rsi
	jne	.LBB388_303
	jmp	.LBB388_306
.LBB388_305:                            # %"$18.i342"
                                        #   in Loop: Header=BB388_191 Depth=1
	movq	%rsi, (%rdx)
	movq	8(%rdx), %rsi
	andq	$-2, %rax
	movq	%rax, 8(%rdx)
	testb	$2, %sil
	je	.LBB388_293
	jmp	.LBB388_301
	.p2align	4, 0x90
.LBB388_306:                            # %mark.exit345
                                        #   in Loop: Header=BB388_191 Depth=1
	movq	96(%r8), %rcx
	jmp	.LBB388_308
	.p2align	4, 0x90
.LBB388_307:                            # %mark.exit325
                                        #   in Loop: Header=BB388_308 Depth=2
	movq	8(%rcx), %rcx
.LBB388_308:                            # %mark.exit345
                                        #   Parent Loop BB388_191 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB388_310 Depth 3
                                        #       Child Loop BB388_315 Depth 3
                                        #       Child Loop BB388_320 Depth 3
	testq	%rcx, %rcx
	je	.LBB388_323
# %bb.309:                              # %"$38"
                                        #   in Loop: Header=BB388_308 Depth=2
	movq	(%rcx), %rax
	xorl	%esi, %esi
	testb	$2, %al
	jne	.LBB388_318
	.p2align	4, 0x90
.LBB388_310:                            # %"$4.i308"
                                        #   Parent Loop BB388_191 Depth=1
                                        #     Parent Loop BB388_308 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rax, %rdi
	movq	%rax, %rbx
	andq	$-16, %rbx
	movq	8(%rbx), %rax
	testb	$1, %al
	je	.LBB388_317
# %bb.311:                              # %"$6.i310"
                                        #   in Loop: Header=BB388_310 Depth=3
	movq	%rax, %rdx
	andq	$-2, %rdx
	movq	%rdx, 8(%rbx)
	testb	$4, %dil
	jne	.LBB388_314
# %bb.312:                              # %"$7.i317"
                                        #   in Loop: Header=BB388_310 Depth=3
	movq	(%rbx), %rax
	orq	$1, %rsi
	movq	%rsi, (%rbx)
	testb	$2, %al
	movq	%rdi, %rsi
	je	.LBB388_310
	jmp	.LBB388_319
.LBB388_314:                            # %"$9.preheader.i312"
                                        #   in Loop: Header=BB388_308 Depth=2
	testb	$2, %al
	jne	.LBB388_317
	.p2align	4, 0x90
.LBB388_315:                            # %"$10.i313"
                                        #   Parent Loop BB388_191 Depth=1
                                        #     Parent Loop BB388_308 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	4(%rdx), %rax
	testb	$1, %al
	je	.LBB388_317
# %bb.316:                              # %"$12.i315"
                                        #   in Loop: Header=BB388_315 Depth=3
	movq	%rax, %rbx
	andq	$-2, %rbx
	movq	%rbx, 4(%rdx)
	testb	$2, %al
	movq	%rbx, %rdx
	je	.LBB388_315
.LBB388_317:                            #   in Loop: Header=BB388_308 Depth=2
	movq	%rdi, %rax
.LBB388_318:                            # %"$5.i319"
                                        #   in Loop: Header=BB388_308 Depth=2
	movq	%rsi, %rdi
.LBB388_319:                            # %"$5.i319"
                                        #   in Loop: Header=BB388_308 Depth=2
	movq	%rdi, %rdx
	andq	$-16, %rdx
	je	.LBB388_307
	.p2align	4, 0x90
.LBB388_320:                            # %"$15.i321"
                                        #   Parent Loop BB388_191 Depth=1
                                        #     Parent Loop BB388_308 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rdi, %rsi
	movq	(%rdx), %rbx
	testb	$1, %bl
	jne	.LBB388_322
# %bb.321:                              # %"$16.i324"
                                        #   in Loop: Header=BB388_320 Depth=3
	movq	8(%rdx), %rdi
	movq	%rax, 8(%rdx)
	movq	%rdi, %rdx
	andq	$-16, %rdx
	movq	%rsi, %rax
	jne	.LBB388_320
	jmp	.LBB388_307
.LBB388_322:                            # %"$18.i322"
                                        #   in Loop: Header=BB388_308 Depth=2
	movq	%rax, (%rdx)
	movq	8(%rdx), %rax
	andq	$-2, %rbx
	movq	%rbx, 8(%rdx)
	testb	$2, %al
	je	.LBB388_310
	jmp	.LBB388_318
	.p2align	4, 0x90
.LBB388_323:                            # %"$39"
                                        #   in Loop: Header=BB388_191 Depth=1
	movq	104(%r8), %rcx
	jmp	.LBB388_325
	.p2align	4, 0x90
.LBB388_324:                            # %mark.exit285
                                        #   in Loop: Header=BB388_325 Depth=2
	movq	16(%rcx), %rcx
.LBB388_325:                            # %"$39"
                                        #   Parent Loop BB388_191 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB388_327 Depth 3
                                        #       Child Loop BB388_332 Depth 3
                                        #       Child Loop BB388_337 Depth 3
                                        #       Child Loop BB388_341 Depth 3
                                        #       Child Loop BB388_346 Depth 3
                                        #       Child Loop BB388_351 Depth 3
	testq	%rcx, %rcx
	je	.LBB388_354
# %bb.326:                              # %"$41"
                                        #   in Loop: Header=BB388_325 Depth=2
	movq	(%rcx), %rsi
	xorl	%edi, %edi
	testb	$2, %sil
	jne	.LBB388_335
	.p2align	4, 0x90
.LBB388_327:                            # %"$4.i288"
                                        #   Parent Loop BB388_191 Depth=1
                                        #     Parent Loop BB388_325 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rsi, %rbx
	movq	%rsi, %rax
	andq	$-16, %rax
	movq	8(%rax), %rsi
	testb	$1, %sil
	je	.LBB388_334
# %bb.328:                              # %"$6.i290"
                                        #   in Loop: Header=BB388_327 Depth=3
	movq	%rsi, %rdx
	andq	$-2, %rdx
	movq	%rdx, 8(%rax)
	testb	$4, %bl
	jne	.LBB388_331
# %bb.329:                              # %"$7.i297"
                                        #   in Loop: Header=BB388_327 Depth=3
	movq	(%rax), %rsi
	orq	$1, %rdi
	movq	%rdi, (%rax)
	testb	$2, %sil
	movq	%rbx, %rdi
	je	.LBB388_327
	jmp	.LBB388_336
.LBB388_331:                            # %"$9.preheader.i292"
                                        #   in Loop: Header=BB388_325 Depth=2
	testb	$2, %sil
	jne	.LBB388_334
	.p2align	4, 0x90
.LBB388_332:                            # %"$10.i293"
                                        #   Parent Loop BB388_191 Depth=1
                                        #     Parent Loop BB388_325 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	4(%rdx), %rax
	testb	$1, %al
	je	.LBB388_334
# %bb.333:                              # %"$12.i295"
                                        #   in Loop: Header=BB388_332 Depth=3
	movq	%rax, %rsi
	andq	$-2, %rsi
	movq	%rsi, 4(%rdx)
	testb	$2, %al
	movq	%rsi, %rdx
	je	.LBB388_332
.LBB388_334:                            #   in Loop: Header=BB388_325 Depth=2
	movq	%rbx, %rsi
.LBB388_335:                            # %"$5.i299"
                                        #   in Loop: Header=BB388_325 Depth=2
	movq	%rdi, %rbx
.LBB388_336:                            # %"$5.i299"
                                        #   in Loop: Header=BB388_325 Depth=2
	movq	%rbx, %rdx
	andq	$-16, %rdx
	je	.LBB388_340
	.p2align	4, 0x90
.LBB388_337:                            # %"$15.i301"
                                        #   Parent Loop BB388_191 Depth=1
                                        #     Parent Loop BB388_325 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rbx, %rdi
	movq	(%rdx), %rax
	testb	$1, %al
	jne	.LBB388_339
# %bb.338:                              # %"$16.i304"
                                        #   in Loop: Header=BB388_337 Depth=3
	movq	8(%rdx), %rbx
	movq	%rsi, 8(%rdx)
	movq	%rbx, %rdx
	andq	$-16, %rdx
	movq	%rdi, %rsi
	jne	.LBB388_337
	jmp	.LBB388_340
.LBB388_339:                            # %"$18.i302"
                                        #   in Loop: Header=BB388_325 Depth=2
	movq	%rsi, (%rdx)
	movq	8(%rdx), %rsi
	andq	$-2, %rax
	movq	%rax, 8(%rdx)
	testb	$2, %sil
	je	.LBB388_327
	jmp	.LBB388_335
	.p2align	4, 0x90
.LBB388_340:                            # %mark.exit305
                                        #   in Loop: Header=BB388_325 Depth=2
	movq	8(%rcx), %rsi
	xorl	%edi, %edi
	testb	$2, %sil
	jne	.LBB388_349
	.p2align	4, 0x90
.LBB388_341:                            # %"$4.i268"
                                        #   Parent Loop BB388_191 Depth=1
                                        #     Parent Loop BB388_325 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rsi, %rbx
	movq	%rsi, %rax
	andq	$-16, %rax
	movq	8(%rax), %rsi
	testb	$1, %sil
	je	.LBB388_348
# %bb.342:                              # %"$6.i270"
                                        #   in Loop: Header=BB388_341 Depth=3
	movq	%rsi, %rdx
	andq	$-2, %rdx
	movq	%rdx, 8(%rax)
	testb	$4, %bl
	jne	.LBB388_345
# %bb.343:                              # %"$7.i277"
                                        #   in Loop: Header=BB388_341 Depth=3
	movq	(%rax), %rsi
	orq	$1, %rdi
	movq	%rdi, (%rax)
	testb	$2, %sil
	movq	%rbx, %rdi
	je	.LBB388_341
	jmp	.LBB388_350
.LBB388_345:                            # %"$9.preheader.i272"
                                        #   in Loop: Header=BB388_325 Depth=2
	testb	$2, %sil
	jne	.LBB388_348
	.p2align	4, 0x90
.LBB388_346:                            # %"$10.i273"
                                        #   Parent Loop BB388_191 Depth=1
                                        #     Parent Loop BB388_325 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	4(%rdx), %rax
	testb	$1, %al
	je	.LBB388_348
# %bb.347:                              # %"$12.i275"
                                        #   in Loop: Header=BB388_346 Depth=3
	movq	%rax, %rsi
	andq	$-2, %rsi
	movq	%rsi, 4(%rdx)
	testb	$2, %al
	movq	%rsi, %rdx
	je	.LBB388_346
.LBB388_348:                            #   in Loop: Header=BB388_325 Depth=2
	movq	%rbx, %rsi
.LBB388_349:                            # %"$5.i279"
                                        #   in Loop: Header=BB388_325 Depth=2
	movq	%rdi, %rbx
.LBB388_350:                            # %"$5.i279"
                                        #   in Loop: Header=BB388_325 Depth=2
	movq	%rbx, %rdx
	andq	$-16, %rdx
	je	.LBB388_324
	.p2align	4, 0x90
.LBB388_351:                            # %"$15.i281"
                                        #   Parent Loop BB388_191 Depth=1
                                        #     Parent Loop BB388_325 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rbx, %rdi
	movq	(%rdx), %rax
	testb	$1, %al
	jne	.LBB388_353
# %bb.352:                              # %"$16.i284"
                                        #   in Loop: Header=BB388_351 Depth=3
	movq	8(%rdx), %rbx
	movq	%rsi, 8(%rdx)
	movq	%rbx, %rdx
	andq	$-16, %rdx
	movq	%rdi, %rsi
	jne	.LBB388_351
	jmp	.LBB388_324
.LBB388_353:                            # %"$18.i282"
                                        #   in Loop: Header=BB388_325 Depth=2
	movq	%rsi, (%rdx)
	movq	8(%rdx), %rsi
	andq	$-2, %rax
	movq	%rax, 8(%rdx)
	testb	$2, %sil
	je	.LBB388_341
	jmp	.LBB388_349
	.p2align	4, 0x90
.LBB388_354:                            # %"$42"
                                        #   in Loop: Header=BB388_191 Depth=1
	movq	120(%r8), %rcx
	jmp	.LBB388_356
	.p2align	4, 0x90
.LBB388_355:                            # %mark.exit145
                                        #   in Loop: Header=BB388_356 Depth=2
	movq	(%rcx), %rcx
.LBB388_356:                            # %"$42"
                                        #   Parent Loop BB388_191 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB388_359 Depth 3
                                        #       Child Loop BB388_364 Depth 3
                                        #       Child Loop BB388_369 Depth 3
                                        #       Child Loop BB388_373 Depth 3
                                        #       Child Loop BB388_378 Depth 3
                                        #       Child Loop BB388_383 Depth 3
                                        #       Child Loop BB388_387 Depth 3
                                        #       Child Loop BB388_392 Depth 3
                                        #       Child Loop BB388_397 Depth 3
                                        #       Child Loop BB388_401 Depth 3
                                        #       Child Loop BB388_406 Depth 3
                                        #       Child Loop BB388_411 Depth 3
                                        #       Child Loop BB388_415 Depth 3
                                        #       Child Loop BB388_420 Depth 3
                                        #       Child Loop BB388_425 Depth 3
                                        #       Child Loop BB388_429 Depth 3
                                        #       Child Loop BB388_434 Depth 3
                                        #       Child Loop BB388_439 Depth 3
                                        #       Child Loop BB388_443 Depth 3
                                        #       Child Loop BB388_448 Depth 3
                                        #       Child Loop BB388_453 Depth 3
	testq	%rcx, %rcx
	je	.LBB388_190
# %bb.357:                              # %"$44"
                                        #   in Loop: Header=BB388_356 Depth=2
	movq	8(%rcx), %rsi
	testq	%rsi, %rsi
	je	.LBB388_372
# %bb.358:                              # %"$2.i247.preheader"
                                        #   in Loop: Header=BB388_356 Depth=2
	xorl	%edi, %edi
	testb	$2, %sil
	jne	.LBB388_367
	.p2align	4, 0x90
.LBB388_359:                            # %"$4.i248"
                                        #   Parent Loop BB388_191 Depth=1
                                        #     Parent Loop BB388_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rsi, %rbx
	movq	%rsi, %rax
	andq	$-16, %rax
	movq	8(%rax), %rsi
	testb	$1, %sil
	je	.LBB388_366
# %bb.360:                              # %"$6.i250"
                                        #   in Loop: Header=BB388_359 Depth=3
	movq	%rsi, %rdx
	andq	$-2, %rdx
	movq	%rdx, 8(%rax)
	testb	$4, %bl
	jne	.LBB388_363
# %bb.361:                              # %"$7.i257"
                                        #   in Loop: Header=BB388_359 Depth=3
	movq	(%rax), %rsi
	orq	$1, %rdi
	movq	%rdi, (%rax)
	testb	$2, %sil
	movq	%rbx, %rdi
	je	.LBB388_359
	jmp	.LBB388_368
.LBB388_363:                            # %"$9.preheader.i252"
                                        #   in Loop: Header=BB388_356 Depth=2
	testb	$2, %sil
	jne	.LBB388_366
	.p2align	4, 0x90
.LBB388_364:                            # %"$10.i253"
                                        #   Parent Loop BB388_191 Depth=1
                                        #     Parent Loop BB388_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	4(%rdx), %rax
	testb	$1, %al
	je	.LBB388_366
# %bb.365:                              # %"$12.i255"
                                        #   in Loop: Header=BB388_364 Depth=3
	movq	%rax, %rsi
	andq	$-2, %rsi
	movq	%rsi, 4(%rdx)
	testb	$2, %al
	movq	%rsi, %rdx
	je	.LBB388_364
.LBB388_366:                            #   in Loop: Header=BB388_356 Depth=2
	movq	%rbx, %rsi
.LBB388_367:                            # %"$5.i259"
                                        #   in Loop: Header=BB388_356 Depth=2
	movq	%rdi, %rbx
.LBB388_368:                            # %"$5.i259"
                                        #   in Loop: Header=BB388_356 Depth=2
	movq	%rbx, %rdx
	andq	$-16, %rdx
	je	.LBB388_372
	.p2align	4, 0x90
.LBB388_369:                            # %"$15.i261"
                                        #   Parent Loop BB388_191 Depth=1
                                        #     Parent Loop BB388_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rbx, %rdi
	movq	(%rdx), %rax
	testb	$1, %al
	jne	.LBB388_371
# %bb.370:                              # %"$16.i264"
                                        #   in Loop: Header=BB388_369 Depth=3
	movq	8(%rdx), %rbx
	movq	%rsi, 8(%rdx)
	movq	%rbx, %rdx
	andq	$-16, %rdx
	movq	%rdi, %rsi
	jne	.LBB388_369
	jmp	.LBB388_372
.LBB388_371:                            # %"$18.i262"
                                        #   in Loop: Header=BB388_356 Depth=2
	movq	%rsi, (%rdx)
	movq	8(%rdx), %rsi
	andq	$-2, %rax
	movq	%rax, 8(%rdx)
	testb	$2, %sil
	je	.LBB388_359
	jmp	.LBB388_367
	.p2align	4, 0x90
.LBB388_372:                            # %"$47"
                                        #   in Loop: Header=BB388_356 Depth=2
	movq	16(%rcx), %rsi
	xorl	%edi, %edi
	testb	$2, %sil
	jne	.LBB388_381
	.p2align	4, 0x90
.LBB388_373:                            # %"$4.i228"
                                        #   Parent Loop BB388_191 Depth=1
                                        #     Parent Loop BB388_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rsi, %rbx
	movq	%rsi, %rax
	andq	$-16, %rax
	movq	8(%rax), %rsi
	testb	$1, %sil
	je	.LBB388_380
# %bb.374:                              # %"$6.i230"
                                        #   in Loop: Header=BB388_373 Depth=3
	movq	%rsi, %rdx
	andq	$-2, %rdx
	movq	%rdx, 8(%rax)
	testb	$4, %bl
	jne	.LBB388_377
# %bb.375:                              # %"$7.i237"
                                        #   in Loop: Header=BB388_373 Depth=3
	movq	(%rax), %rsi
	orq	$1, %rdi
	movq	%rdi, (%rax)
	testb	$2, %sil
	movq	%rbx, %rdi
	je	.LBB388_373
	jmp	.LBB388_382
.LBB388_377:                            # %"$9.preheader.i232"
                                        #   in Loop: Header=BB388_356 Depth=2
	testb	$2, %sil
	jne	.LBB388_380
	.p2align	4, 0x90
.LBB388_378:                            # %"$10.i233"
                                        #   Parent Loop BB388_191 Depth=1
                                        #     Parent Loop BB388_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	4(%rdx), %rax
	testb	$1, %al
	je	.LBB388_380
# %bb.379:                              # %"$12.i235"
                                        #   in Loop: Header=BB388_378 Depth=3
	movq	%rax, %rsi
	andq	$-2, %rsi
	movq	%rsi, 4(%rdx)
	testb	$2, %al
	movq	%rsi, %rdx
	je	.LBB388_378
.LBB388_380:                            #   in Loop: Header=BB388_356 Depth=2
	movq	%rbx, %rsi
.LBB388_381:                            # %"$5.i239"
                                        #   in Loop: Header=BB388_356 Depth=2
	movq	%rdi, %rbx
.LBB388_382:                            # %"$5.i239"
                                        #   in Loop: Header=BB388_356 Depth=2
	movq	%rbx, %rdx
	andq	$-16, %rdx
	je	.LBB388_386
	.p2align	4, 0x90
.LBB388_383:                            # %"$15.i241"
                                        #   Parent Loop BB388_191 Depth=1
                                        #     Parent Loop BB388_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rbx, %rdi
	movq	(%rdx), %rax
	testb	$1, %al
	jne	.LBB388_385
# %bb.384:                              # %"$16.i244"
                                        #   in Loop: Header=BB388_383 Depth=3
	movq	8(%rdx), %rbx
	movq	%rsi, 8(%rdx)
	movq	%rbx, %rdx
	andq	$-16, %rdx
	movq	%rdi, %rsi
	jne	.LBB388_383
	jmp	.LBB388_386
.LBB388_385:                            # %"$18.i242"
                                        #   in Loop: Header=BB388_356 Depth=2
	movq	%rsi, (%rdx)
	movq	8(%rdx), %rsi
	andq	$-2, %rax
	movq	%rax, 8(%rdx)
	testb	$2, %sil
	je	.LBB388_373
	jmp	.LBB388_381
	.p2align	4, 0x90
.LBB388_386:                            # %mark.exit245
                                        #   in Loop: Header=BB388_356 Depth=2
	movq	176(%rcx), %rsi
	xorl	%edi, %edi
	testb	$2, %sil
	jne	.LBB388_395
	.p2align	4, 0x90
.LBB388_387:                            # %"$4.i208"
                                        #   Parent Loop BB388_191 Depth=1
                                        #     Parent Loop BB388_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rsi, %rbx
	movq	%rsi, %rax
	andq	$-16, %rax
	movq	8(%rax), %rsi
	testb	$1, %sil
	je	.LBB388_394
# %bb.388:                              # %"$6.i210"
                                        #   in Loop: Header=BB388_387 Depth=3
	movq	%rsi, %rdx
	andq	$-2, %rdx
	movq	%rdx, 8(%rax)
	testb	$4, %bl
	jne	.LBB388_391
# %bb.389:                              # %"$7.i217"
                                        #   in Loop: Header=BB388_387 Depth=3
	movq	(%rax), %rsi
	orq	$1, %rdi
	movq	%rdi, (%rax)
	testb	$2, %sil
	movq	%rbx, %rdi
	je	.LBB388_387
	jmp	.LBB388_396
.LBB388_391:                            # %"$9.preheader.i212"
                                        #   in Loop: Header=BB388_356 Depth=2
	testb	$2, %sil
	jne	.LBB388_394
	.p2align	4, 0x90
.LBB388_392:                            # %"$10.i213"
                                        #   Parent Loop BB388_191 Depth=1
                                        #     Parent Loop BB388_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	4(%rdx), %rax
	testb	$1, %al
	je	.LBB388_394
# %bb.393:                              # %"$12.i215"
                                        #   in Loop: Header=BB388_392 Depth=3
	movq	%rax, %rsi
	andq	$-2, %rsi
	movq	%rsi, 4(%rdx)
	testb	$2, %al
	movq	%rsi, %rdx
	je	.LBB388_392
.LBB388_394:                            #   in Loop: Header=BB388_356 Depth=2
	movq	%rbx, %rsi
.LBB388_395:                            # %"$5.i219"
                                        #   in Loop: Header=BB388_356 Depth=2
	movq	%rdi, %rbx
.LBB388_396:                            # %"$5.i219"
                                        #   in Loop: Header=BB388_356 Depth=2
	movq	%rbx, %rdx
	andq	$-16, %rdx
	je	.LBB388_400
	.p2align	4, 0x90
.LBB388_397:                            # %"$15.i221"
                                        #   Parent Loop BB388_191 Depth=1
                                        #     Parent Loop BB388_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rbx, %rdi
	movq	(%rdx), %rax
	testb	$1, %al
	jne	.LBB388_399
# %bb.398:                              # %"$16.i224"
                                        #   in Loop: Header=BB388_397 Depth=3
	movq	8(%rdx), %rbx
	movq	%rsi, 8(%rdx)
	movq	%rbx, %rdx
	andq	$-16, %rdx
	movq	%rdi, %rsi
	jne	.LBB388_397
	jmp	.LBB388_400
.LBB388_399:                            # %"$18.i222"
                                        #   in Loop: Header=BB388_356 Depth=2
	movq	%rsi, (%rdx)
	movq	8(%rdx), %rsi
	andq	$-2, %rax
	movq	%rax, 8(%rdx)
	testb	$2, %sil
	je	.LBB388_387
	jmp	.LBB388_395
	.p2align	4, 0x90
.LBB388_400:                            # %mark.exit225
                                        #   in Loop: Header=BB388_356 Depth=2
	movq	184(%rcx), %rsi
	xorl	%edi, %edi
	testb	$2, %sil
	jne	.LBB388_409
	.p2align	4, 0x90
.LBB388_401:                            # %"$4.i188"
                                        #   Parent Loop BB388_191 Depth=1
                                        #     Parent Loop BB388_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rsi, %rbx
	movq	%rsi, %rax
	andq	$-16, %rax
	movq	8(%rax), %rsi
	testb	$1, %sil
	je	.LBB388_408
# %bb.402:                              # %"$6.i190"
                                        #   in Loop: Header=BB388_401 Depth=3
	movq	%rsi, %rdx
	andq	$-2, %rdx
	movq	%rdx, 8(%rax)
	testb	$4, %bl
	jne	.LBB388_405
# %bb.403:                              # %"$7.i197"
                                        #   in Loop: Header=BB388_401 Depth=3
	movq	(%rax), %rsi
	orq	$1, %rdi
	movq	%rdi, (%rax)
	testb	$2, %sil
	movq	%rbx, %rdi
	je	.LBB388_401
	jmp	.LBB388_410
.LBB388_405:                            # %"$9.preheader.i192"
                                        #   in Loop: Header=BB388_356 Depth=2
	testb	$2, %sil
	jne	.LBB388_408
	.p2align	4, 0x90
.LBB388_406:                            # %"$10.i193"
                                        #   Parent Loop BB388_191 Depth=1
                                        #     Parent Loop BB388_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	4(%rdx), %rax
	testb	$1, %al
	je	.LBB388_408
# %bb.407:                              # %"$12.i195"
                                        #   in Loop: Header=BB388_406 Depth=3
	movq	%rax, %rsi
	andq	$-2, %rsi
	movq	%rsi, 4(%rdx)
	testb	$2, %al
	movq	%rsi, %rdx
	je	.LBB388_406
.LBB388_408:                            #   in Loop: Header=BB388_356 Depth=2
	movq	%rbx, %rsi
.LBB388_409:                            # %"$5.i199"
                                        #   in Loop: Header=BB388_356 Depth=2
	movq	%rdi, %rbx
.LBB388_410:                            # %"$5.i199"
                                        #   in Loop: Header=BB388_356 Depth=2
	movq	%rbx, %rdx
	andq	$-16, %rdx
	je	.LBB388_414
	.p2align	4, 0x90
.LBB388_411:                            # %"$15.i201"
                                        #   Parent Loop BB388_191 Depth=1
                                        #     Parent Loop BB388_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rbx, %rdi
	movq	(%rdx), %rax
	testb	$1, %al
	jne	.LBB388_413
# %bb.412:                              # %"$16.i204"
                                        #   in Loop: Header=BB388_411 Depth=3
	movq	8(%rdx), %rbx
	movq	%rsi, 8(%rdx)
	movq	%rbx, %rdx
	andq	$-16, %rdx
	movq	%rdi, %rsi
	jne	.LBB388_411
	jmp	.LBB388_414
.LBB388_413:                            # %"$18.i202"
                                        #   in Loop: Header=BB388_356 Depth=2
	movq	%rsi, (%rdx)
	movq	8(%rdx), %rsi
	andq	$-2, %rax
	movq	%rax, 8(%rdx)
	testb	$2, %sil
	je	.LBB388_401
	jmp	.LBB388_409
	.p2align	4, 0x90
.LBB388_414:                            # %mark.exit205
                                        #   in Loop: Header=BB388_356 Depth=2
	movq	192(%rcx), %rsi
	xorl	%edi, %edi
	testb	$2, %sil
	jne	.LBB388_423
	.p2align	4, 0x90
.LBB388_415:                            # %"$4.i168"
                                        #   Parent Loop BB388_191 Depth=1
                                        #     Parent Loop BB388_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rsi, %rbx
	movq	%rsi, %rax
	andq	$-16, %rax
	movq	8(%rax), %rsi
	testb	$1, %sil
	je	.LBB388_422
# %bb.416:                              # %"$6.i170"
                                        #   in Loop: Header=BB388_415 Depth=3
	movq	%rsi, %rdx
	andq	$-2, %rdx
	movq	%rdx, 8(%rax)
	testb	$4, %bl
	jne	.LBB388_419
# %bb.417:                              # %"$7.i177"
                                        #   in Loop: Header=BB388_415 Depth=3
	movq	(%rax), %rsi
	orq	$1, %rdi
	movq	%rdi, (%rax)
	testb	$2, %sil
	movq	%rbx, %rdi
	je	.LBB388_415
	jmp	.LBB388_424
.LBB388_419:                            # %"$9.preheader.i172"
                                        #   in Loop: Header=BB388_356 Depth=2
	testb	$2, %sil
	jne	.LBB388_422
	.p2align	4, 0x90
.LBB388_420:                            # %"$10.i173"
                                        #   Parent Loop BB388_191 Depth=1
                                        #     Parent Loop BB388_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	4(%rdx), %rax
	testb	$1, %al
	je	.LBB388_422
# %bb.421:                              # %"$12.i175"
                                        #   in Loop: Header=BB388_420 Depth=3
	movq	%rax, %rsi
	andq	$-2, %rsi
	movq	%rsi, 4(%rdx)
	testb	$2, %al
	movq	%rsi, %rdx
	je	.LBB388_420
.LBB388_422:                            #   in Loop: Header=BB388_356 Depth=2
	movq	%rbx, %rsi
.LBB388_423:                            # %"$5.i179"
                                        #   in Loop: Header=BB388_356 Depth=2
	movq	%rdi, %rbx
.LBB388_424:                            # %"$5.i179"
                                        #   in Loop: Header=BB388_356 Depth=2
	movq	%rbx, %rdx
	andq	$-16, %rdx
	je	.LBB388_428
	.p2align	4, 0x90
.LBB388_425:                            # %"$15.i181"
                                        #   Parent Loop BB388_191 Depth=1
                                        #     Parent Loop BB388_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rbx, %rdi
	movq	(%rdx), %rax
	testb	$1, %al
	jne	.LBB388_427
# %bb.426:                              # %"$16.i184"
                                        #   in Loop: Header=BB388_425 Depth=3
	movq	8(%rdx), %rbx
	movq	%rsi, 8(%rdx)
	movq	%rbx, %rdx
	andq	$-16, %rdx
	movq	%rdi, %rsi
	jne	.LBB388_425
	jmp	.LBB388_428
.LBB388_427:                            # %"$18.i182"
                                        #   in Loop: Header=BB388_356 Depth=2
	movq	%rsi, (%rdx)
	movq	8(%rdx), %rsi
	andq	$-2, %rax
	movq	%rax, 8(%rdx)
	testb	$2, %sil
	je	.LBB388_415
	jmp	.LBB388_423
	.p2align	4, 0x90
.LBB388_428:                            # %mark.exit185
                                        #   in Loop: Header=BB388_356 Depth=2
	movq	200(%rcx), %rsi
	xorl	%edi, %edi
	testb	$2, %sil
	jne	.LBB388_437
	.p2align	4, 0x90
.LBB388_429:                            # %"$4.i148"
                                        #   Parent Loop BB388_191 Depth=1
                                        #     Parent Loop BB388_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rsi, %rbx
	movq	%rsi, %rax
	andq	$-16, %rax
	movq	8(%rax), %rsi
	testb	$1, %sil
	je	.LBB388_436
# %bb.430:                              # %"$6.i150"
                                        #   in Loop: Header=BB388_429 Depth=3
	movq	%rsi, %rdx
	andq	$-2, %rdx
	movq	%rdx, 8(%rax)
	testb	$4, %bl
	jne	.LBB388_433
# %bb.431:                              # %"$7.i157"
                                        #   in Loop: Header=BB388_429 Depth=3
	movq	(%rax), %rsi
	orq	$1, %rdi
	movq	%rdi, (%rax)
	testb	$2, %sil
	movq	%rbx, %rdi
	je	.LBB388_429
	jmp	.LBB388_438
.LBB388_433:                            # %"$9.preheader.i152"
                                        #   in Loop: Header=BB388_356 Depth=2
	testb	$2, %sil
	jne	.LBB388_436
	.p2align	4, 0x90
.LBB388_434:                            # %"$10.i153"
                                        #   Parent Loop BB388_191 Depth=1
                                        #     Parent Loop BB388_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	4(%rdx), %rax
	testb	$1, %al
	je	.LBB388_436
# %bb.435:                              # %"$12.i155"
                                        #   in Loop: Header=BB388_434 Depth=3
	movq	%rax, %rsi
	andq	$-2, %rsi
	movq	%rsi, 4(%rdx)
	testb	$2, %al
	movq	%rsi, %rdx
	je	.LBB388_434
.LBB388_436:                            #   in Loop: Header=BB388_356 Depth=2
	movq	%rbx, %rsi
.LBB388_437:                            # %"$5.i159"
                                        #   in Loop: Header=BB388_356 Depth=2
	movq	%rdi, %rbx
.LBB388_438:                            # %"$5.i159"
                                        #   in Loop: Header=BB388_356 Depth=2
	movq	%rbx, %rdx
	andq	$-16, %rdx
	je	.LBB388_442
	.p2align	4, 0x90
.LBB388_439:                            # %"$15.i161"
                                        #   Parent Loop BB388_191 Depth=1
                                        #     Parent Loop BB388_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rbx, %rdi
	movq	(%rdx), %rax
	testb	$1, %al
	jne	.LBB388_441
# %bb.440:                              # %"$16.i164"
                                        #   in Loop: Header=BB388_439 Depth=3
	movq	8(%rdx), %rbx
	movq	%rsi, 8(%rdx)
	movq	%rbx, %rdx
	andq	$-16, %rdx
	movq	%rdi, %rsi
	jne	.LBB388_439
	jmp	.LBB388_442
.LBB388_441:                            # %"$18.i162"
                                        #   in Loop: Header=BB388_356 Depth=2
	movq	%rsi, (%rdx)
	movq	8(%rdx), %rsi
	andq	$-2, %rax
	movq	%rax, 8(%rdx)
	testb	$2, %sil
	je	.LBB388_429
	jmp	.LBB388_437
	.p2align	4, 0x90
.LBB388_442:                            # %mark.exit165
                                        #   in Loop: Header=BB388_356 Depth=2
	movq	208(%rcx), %rsi
	xorl	%edi, %edi
	testb	$2, %sil
	jne	.LBB388_451
	.p2align	4, 0x90
.LBB388_443:                            # %"$4.i128"
                                        #   Parent Loop BB388_191 Depth=1
                                        #     Parent Loop BB388_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rsi, %rbx
	movq	%rsi, %rax
	andq	$-16, %rax
	movq	8(%rax), %rsi
	testb	$1, %sil
	je	.LBB388_450
# %bb.444:                              # %"$6.i130"
                                        #   in Loop: Header=BB388_443 Depth=3
	movq	%rsi, %rdx
	andq	$-2, %rdx
	movq	%rdx, 8(%rax)
	testb	$4, %bl
	jne	.LBB388_447
# %bb.445:                              # %"$7.i137"
                                        #   in Loop: Header=BB388_443 Depth=3
	movq	(%rax), %rsi
	orq	$1, %rdi
	movq	%rdi, (%rax)
	testb	$2, %sil
	movq	%rbx, %rdi
	je	.LBB388_443
	jmp	.LBB388_452
.LBB388_447:                            # %"$9.preheader.i132"
                                        #   in Loop: Header=BB388_356 Depth=2
	testb	$2, %sil
	jne	.LBB388_450
	.p2align	4, 0x90
.LBB388_448:                            # %"$10.i133"
                                        #   Parent Loop BB388_191 Depth=1
                                        #     Parent Loop BB388_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	4(%rdx), %rax
	testb	$1, %al
	je	.LBB388_450
# %bb.449:                              # %"$12.i135"
                                        #   in Loop: Header=BB388_448 Depth=3
	movq	%rax, %rsi
	andq	$-2, %rsi
	movq	%rsi, 4(%rdx)
	testb	$2, %al
	movq	%rsi, %rdx
	je	.LBB388_448
.LBB388_450:                            #   in Loop: Header=BB388_356 Depth=2
	movq	%rbx, %rsi
.LBB388_451:                            # %"$5.i139"
                                        #   in Loop: Header=BB388_356 Depth=2
	movq	%rdi, %rbx
.LBB388_452:                            # %"$5.i139"
                                        #   in Loop: Header=BB388_356 Depth=2
	movq	%rbx, %rdx
	andq	$-16, %rdx
	je	.LBB388_355
	.p2align	4, 0x90
.LBB388_453:                            # %"$15.i141"
                                        #   Parent Loop BB388_191 Depth=1
                                        #     Parent Loop BB388_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rbx, %rdi
	movq	(%rdx), %rax
	testb	$1, %al
	jne	.LBB388_455
# %bb.454:                              # %"$16.i144"
                                        #   in Loop: Header=BB388_453 Depth=3
	movq	8(%rdx), %rbx
	movq	%rsi, 8(%rdx)
	movq	%rbx, %rdx
	andq	$-16, %rdx
	movq	%rdi, %rsi
	jne	.LBB388_453
	jmp	.LBB388_355
.LBB388_455:                            # %"$18.i142"
                                        #   in Loop: Header=BB388_356 Depth=2
	movq	%rsi, (%rdx)
	movq	8(%rdx), %rsi
	andq	$-2, %rax
	movq	%rax, 8(%rdx)
	testb	$2, %sil
	je	.LBB388_443
	jmp	.LBB388_451
.LBB388_456:                            # %"$32"
	movq	($Extern)(%rip), %rcx
	xorl	%eax, %eax
.LBB388_457:                            # %"$48"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB388_460 Depth 2
                                        #     Child Loop BB388_462 Depth 2
                                        #       Child Loop BB388_465 Depth 3
                                        #       Child Loop BB388_468 Depth 3
                                        #       Child Loop BB388_473 Depth 3
                                        #       Child Loop BB388_478 Depth 3
                                        #       Child Loop BB388_483 Depth 3
	movq	8(%rcx), %rbx
	andq	$-2, %rbx
	movq	%rbx, 8(%rcx)
	movq	8(%rbx), %rdi
	movq	%rdi, %rdx
	andq	$-2, %rdx
	movq	%rdx, 8(%rbx)
	testb	$14, %dil
	je	.LBB388_459
# %bb.458:                              #   in Loop: Header=BB388_457 Depth=1
	movq	%rax, %r8
	jmp	.LBB388_462
	.p2align	4, 0x90
.LBB388_459:                            # %"$50.preheader"
                                        #   in Loop: Header=BB388_457 Depth=1
	addq	$8, %rbx
	.p2align	4, 0x90
.LBB388_460:                            # %"$50"
                                        #   Parent Loop BB388_457 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rcx, %r8
	movq	%rdx, %rcx
	movq	%rax, (%rbx)
	movq	8(%rdx), %rax
	andq	$-2, %rax
	movq	%rax, 8(%rdx)
	leaq	8(%rax), %rbx
	movq	8(%rax), %rdi
	movq	%rdi, %rdx
	andq	$-2, %rdx
	movq	%rdx, 8(%rax)
	testb	$14, %dil
	movq	%r8, %rax
	je	.LBB388_460
	jmp	.LBB388_462
	.p2align	4, 0x90
.LBB388_461:                            # %"$70"
                                        #   in Loop: Header=BB388_462 Depth=2
	movq	8(%rcx), %rdx
	movq	8(%rdx), %r8
	movq	%rax, 8(%rdx)
.LBB388_462:                            # %"$52.preheader"
                                        #   Parent Loop BB388_457 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB388_465 Depth 3
                                        #       Child Loop BB388_468 Depth 3
                                        #       Child Loop BB388_473 Depth 3
                                        #       Child Loop BB388_478 Depth 3
                                        #       Child Loop BB388_483 Depth 3
	movq	%rcx, %rax
	movq	(%rcx), %rsi
	testb	$1, (%rsi)
	je	.LBB388_481
# %bb.463:                              # %"$53"
                                        #   in Loop: Header=BB388_462 Depth=2
	movq	-8(%rsi), %rcx
	testb	$6, %cl
	jne	.LBB388_466
# %bb.464:                              # %"$55"
                                        #   in Loop: Header=BB388_462 Depth=2
	andq	$-10, %rcx
	movq	%rcx, %rdx
	.p2align	4, 0x90
.LBB388_465:                            # %"$57"
                                        #   Parent Loop BB388_457 Depth=1
                                        #     Parent Loop BB388_462 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	8(%rdx), %rcx
	movq	%rcx, %rdx
	andq	$-2, %rdx
	testb	$6, %cl
	je	.LBB388_465
.LBB388_466:                            # %"$56"
                                        #   in Loop: Header=BB388_462 Depth=2
	addq	%rcx, %rcx
	jae	.LBB388_481
# %bb.467:                              # %"$2.i107.preheader"
                                        #   in Loop: Header=BB388_462 Depth=2
	xorl	%edi, %edi
	testb	$2, %sil
	jne	.LBB388_476
	.p2align	4, 0x90
.LBB388_468:                            # %"$4.i108"
                                        #   Parent Loop BB388_457 Depth=1
                                        #     Parent Loop BB388_462 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rsi, %rbx
	movq	%rsi, %rdx
	andq	$-16, %rdx
	movq	8(%rdx), %rsi
	testb	$1, %sil
	je	.LBB388_475
# %bb.469:                              # %"$6.i110"
                                        #   in Loop: Header=BB388_468 Depth=3
	movq	%rsi, %rcx
	andq	$-2, %rcx
	movq	%rcx, 8(%rdx)
	testb	$4, %bl
	jne	.LBB388_472
# %bb.470:                              # %"$7.i117"
                                        #   in Loop: Header=BB388_468 Depth=3
	movq	(%rdx), %rsi
	orq	$1, %rdi
	movq	%rdi, (%rdx)
	testb	$2, %sil
	movq	%rbx, %rdi
	je	.LBB388_468
	jmp	.LBB388_477
.LBB388_472:                            # %"$9.preheader.i112"
                                        #   in Loop: Header=BB388_462 Depth=2
	testb	$2, %sil
	jne	.LBB388_475
	.p2align	4, 0x90
.LBB388_473:                            # %"$10.i113"
                                        #   Parent Loop BB388_457 Depth=1
                                        #     Parent Loop BB388_462 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	4(%rcx), %rdx
	testb	$1, %dl
	je	.LBB388_475
# %bb.474:                              # %"$12.i115"
                                        #   in Loop: Header=BB388_473 Depth=3
	movq	%rdx, %rsi
	andq	$-2, %rsi
	movq	%rsi, 4(%rcx)
	testb	$2, %dl
	movq	%rsi, %rcx
	je	.LBB388_473
.LBB388_475:                            #   in Loop: Header=BB388_462 Depth=2
	movq	%rbx, %rsi
.LBB388_476:                            # %"$5.i119"
                                        #   in Loop: Header=BB388_462 Depth=2
	movq	%rdi, %rbx
.LBB388_477:                            # %"$5.i119"
                                        #   in Loop: Header=BB388_462 Depth=2
	movq	%rbx, %rdx
	andq	$-16, %rdx
	je	.LBB388_481
	.p2align	4, 0x90
.LBB388_478:                            # %"$15.i121"
                                        #   Parent Loop BB388_457 Depth=1
                                        #     Parent Loop BB388_462 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rbx, %rdi
	movq	(%rdx), %rcx
	testb	$1, %cl
	jne	.LBB388_480
# %bb.479:                              # %"$16.i124"
                                        #   in Loop: Header=BB388_478 Depth=3
	movq	8(%rdx), %rbx
	movq	%rsi, 8(%rdx)
	movq	%rbx, %rdx
	andq	$-16, %rdx
	movq	%rdi, %rsi
	jne	.LBB388_478
	jmp	.LBB388_481
.LBB388_480:                            # %"$18.i122"
                                        #   in Loop: Header=BB388_462 Depth=2
	movq	%rsi, (%rdx)
	movq	8(%rdx), %rsi
	andq	$-2, %rcx
	movq	%rcx, 8(%rdx)
	testb	$2, %sil
	je	.LBB388_468
	jmp	.LBB388_476
	.p2align	4, 0x90
.LBB388_481:                            # %"$54"
                                        #   in Loop: Header=BB388_462 Depth=2
	movq	8(%rax), %rdx
	movq	(%rdx), %rcx
	testb	$15, %cl
	je	.LBB388_485
# %bb.482:                              # %"$65.preheader"
                                        #   in Loop: Header=BB388_462 Depth=2
	testq	%r8, %r8
	movq	%r8, %rcx
	je	.LBB388_486
	.p2align	4, 0x90
.LBB388_483:                            # %"$67"
                                        #   Parent Loop BB388_457 Depth=1
                                        #     Parent Loop BB388_462 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	testb	$8, %cl
	je	.LBB388_461
# %bb.484:                              # %"$68"
                                        #   in Loop: Header=BB388_483 Depth=3
	andq	$-9, %rcx
	movq	8(%rcx), %rdx
	movq	(%rdx), %rbx
	movq	%rax, (%rdx)
	testq	%rbx, %rbx
	movq	%rcx, %rax
	movq	%rbx, %rcx
	jne	.LBB388_483
	jmp	.LBB388_486
.LBB388_485:                            # %"$64"
                                        #   in Loop: Header=BB388_457 Depth=1
	movq	%r8, (%rdx)
	orq	$8, %rax
	jmp	.LBB388_457
.LBB388_486:                            # %"$-1"
	leaq	SymTab+408(%rip), %rax
	movq	%rax, SymTab+232(%rip)
	testb	$1, SymTab+408(%rip)
	je	.LBB388_488
# %bb.487:                              # %"$72"
	leaq	SymTab+8(%rip), %rax
	movq	%rax, SymTab+408(%rip)
	movq	$26, SymTab+400(%rip)
.LBB388_488:                            # %"$73"
	movq	($Extern)(%rip), %rdi
	xorl	%eax, %eax
.LBB388_489:                            # %"$74"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB388_492 Depth 2
                                        #     Child Loop BB388_494 Depth 2
                                        #       Child Loop BB388_508 Depth 3
                                        #       Child Loop BB388_502 Depth 3
	movq	8(%rdi), %rcx
	movq	8(%rcx), %rdx
	testb	$15, %dl
	je	.LBB388_491
# %bb.490:                              #   in Loop: Header=BB388_489 Depth=1
	movq	%rax, %rbx
	jmp	.LBB388_493
	.p2align	4, 0x90
.LBB388_491:                            # %"$76.preheader"
                                        #   in Loop: Header=BB388_489 Depth=1
	addq	$8, %rcx
	.p2align	4, 0x90
.LBB388_492:                            # %"$76"
                                        #   Parent Loop BB388_489 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rdi, %rbx
	movq	%rdx, %rdi
	movq	%rax, (%rcx)
	movq	8(%rdx), %rcx
	movq	8(%rcx), %rdx
	addq	$8, %rcx
	testb	$15, %dl
	movq	%rbx, %rax
	je	.LBB388_492
.LBB388_493:                            # %"$78.preheader"
                                        #   in Loop: Header=BB388_489 Depth=1
	movq	%rbx, %rax
	movq	%rdi, %rcx
.LBB388_494:                            # %"$78"
                                        #   Parent Loop BB388_489 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB388_508 Depth 3
                                        #       Child Loop BB388_502 Depth 3
	movq	(%rcx), %rdx
	testb	$1, (%rdx)
	jne	.LBB388_497
.LBB388_495:                            # %"$-3"
                                        #   in Loop: Header=BB388_494 Depth=2
	movq	8(%rcx), %rdx
	movq	(%rdx), %rdi
	testb	$15, %dil
	je	.LBB388_511
# %bb.496:                              #   in Loop: Header=BB388_494 Depth=2
	movq	%rcx, %rdx
	testq	%rax, %rax
	jne	.LBB388_501
	jmp	.LBB388_513
	.p2align	4, 0x90
.LBB388_497:                            # %"$79"
                                        #   in Loop: Header=BB388_494 Depth=2
	decq	($ExtCnt)(%rip)
	leaq	8(%rcx), %rbx
	movq	8(%rcx), %rdx
	testb	$15, %dl
	jne	.LBB388_500
# %bb.498:                              # %"$82"
                                        #   in Loop: Header=BB388_494 Depth=2
	testb	$15, (%rdx)
	je	.LBB388_505
# %bb.499:                              # %"$83"
                                        #   in Loop: Header=BB388_494 Depth=2
	movq	%rdx, %rcx
	orq	$1, %rcx
	movq	%rcx, (%rbx)
	movq	%rdx, %rbx
	movq	8(%rdx), %rdx
	addq	$8, %rbx
.LBB388_500:                            # %"$-4.sink.split"
                                        #   in Loop: Header=BB388_494 Depth=2
	movq	%rdx, %rcx
	orq	$1, %rcx
	movq	%rcx, (%rbx)
	testq	%rax, %rax
	je	.LBB388_513
.LBB388_501:                            # %"$98.preheader"
                                        #   in Loop: Header=BB388_494 Depth=2
	movq	%rax, %rcx
	.p2align	4, 0x90
.LBB388_502:                            # %"$98"
                                        #   Parent Loop BB388_489 Depth=1
                                        #     Parent Loop BB388_494 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	testb	$8, %cl
	je	.LBB388_504
# %bb.503:                              # %"$99"
                                        #   in Loop: Header=BB388_502 Depth=3
	movq	%rcx, %rax
	andq	$-9, %rax
	movq	8(%rax), %rbx
	movq	(%rbx), %rcx
	movq	%rdx, (%rbx)
	testq	%rcx, %rcx
	movq	%rax, %rdx
	jne	.LBB388_502
	jmp	.LBB388_514
	.p2align	4, 0x90
.LBB388_504:                            # %"$101"
                                        #   in Loop: Header=BB388_494 Depth=2
	movq	8(%rcx), %rbx
	movq	8(%rbx), %rax
	movq	%rdx, 8(%rbx)
	jmp	.LBB388_494
.LBB388_505:                            # %"$84"
                                        #   in Loop: Header=BB388_494 Depth=2
	movq	8(%rdx), %rdi
	testb	$15, %dil
	jne	.LBB388_512
# %bb.506:                              # %"$86"
                                        #   in Loop: Header=BB388_494 Depth=2
	movq	8(%rdi), %rsi
	movq	(%rsi), %rbx
	testb	$15, %bl
	je	.LBB388_508
# %bb.507:                              # %"$87"
                                        #   in Loop: Header=BB388_494 Depth=2
	addq	$8, %rdx
	movq	(%rdi), %rbx
	movq	%rbx, (%rcx)
	jmp	.LBB388_510
	.p2align	4, 0x90
.LBB388_508:                            # %"$89"
                                        #   Parent Loop BB388_489 Depth=1
                                        #     Parent Loop BB388_494 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rbx, %rsi
	movq	%rdi, %rdx
	movq	8(%rbx), %rbx
	movq	(%rbx), %rbx
	testb	$15, %bl
	movq	%rsi, %rdi
	je	.LBB388_508
# %bb.509:                              # %"$92"
                                        #   in Loop: Header=BB388_494 Depth=2
	movq	(%rsi), %rbx
	movq	%rbx, (%rcx)
	movq	8(%rdx), %rdx
	movq	8(%rsi), %rsi
.LBB388_510:                            # %"$-3.sink.split"
                                        #   in Loop: Header=BB388_494 Depth=2
	movq	8(%rsi), %rbx
	movq	%rbx, (%rdx)
	jmp	.LBB388_495
.LBB388_511:                            # %"$95"
                                        #   in Loop: Header=BB388_489 Depth=1
	movq	%rax, (%rdx)
	orq	$8, %rcx
	movq	%rcx, %rax
	jmp	.LBB388_489
.LBB388_512:                            # %"$85"
                                        #   in Loop: Header=BB388_489 Depth=1
	movq	%rdx, %rcx
	orq	$1, %rcx
	movq	%rcx, (%rbx)
	movq	(%rdx), %rdi
	orb	$1, 8(%rdx)
	jmp	.LBB388_489
.LBB388_513:
	movq	%rdx, %rax
.LBB388_514:                            # %"$-5"
	movq	%rax, ($Extern)(%rip)
	movq	($Heaps)(%rip), %rsi
	movq	($GcCount)(%rip), %rdi
	testq	%rdi, %rdi
	je	.LBB388_526
# %bb.515:                              # %"$117.preheader"
	xorl	%ebx, %ebx
	jmp	.LBB388_517
	.p2align	4, 0x90
.LBB388_516:                            # %"$122"
                                        #   in Loop: Header=BB388_517 Depth=1
	movq	1048576(%rsi), %rsi
	testq	%rsi, %rsi
	je	.LBB388_521
.LBB388_517:                            # %"$117"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB388_519 Depth 2
	leaq	1048560(%rsi), %rax
	movq	$-1048576, %rcx                 # imm = 0xFFF00000
	jmp	.LBB388_519
	.p2align	4, 0x90
.LBB388_518:                            # %"$120"
                                        #   in Loop: Header=BB388_519 Depth=2
	addq	$-16, %rax
	addq	$16, %rcx
	je	.LBB388_516
.LBB388_519:                            # %"$118"
                                        #   Parent Loop BB388_517 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	testb	$1, 8(%rax)
	je	.LBB388_518
# %bb.520:                              # %"$119"
                                        #   in Loop: Header=BB388_519 Depth=2
	movq	%rbx, (%rax)
	decq	%rdi
	movq	%rax, %rbx
	jmp	.LBB388_518
.LBB388_521:                            # %"$124"
	movq	%rbx, ($Avail)(%rip)
	testq	%rdi, %rdi
	js	.LBB388_535
	.p2align	4, 0x90
.LBB388_522:                            # %"$126"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB388_524 Depth 2
	movl	$1048584, %ecx                  # imm = 0x100008
	callq	malloc
	testq	%rax, %rax
	je	.LBB388_536
# %bb.523:                              # %alloc.exit.i
                                        #   in Loop: Header=BB388_522 Depth=1
	movq	($Heaps)(%rip), %rcx
	movq	%rcx, 1048576(%rax)
	movq	%rax, ($Heaps)(%rip)
	movq	%rax, %rdx
	addq	$1048560, %rdx                  # imm = 0xFFFF0
	movq	$-1048576, %rcx                 # imm = 0xFFF00000
	.p2align	4, 0x90
.LBB388_524:                            # %"$2.i64"
                                        #   Parent Loop BB388_522 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rbx, (%rdx)
	movq	%rdx, %rbx
	addq	$-16, %rdx
	addq	$16, %rcx
	jne	.LBB388_524
# %bb.525:                              # %heapAlloc.exit
                                        #   in Loop: Header=BB388_522 Depth=1
	movq	%rax, ($Avail)(%rip)
	cmpq	$65535, %rdi                    # imm = 0xFFFF
	leaq	-65536(%rdi), %rdi
	movq	%rax, %rbx
	jg	.LBB388_522
	jmp	.LBB388_535
.LBB388_526:                            # %"$106.preheader"
	leaq	($Heaps)(%rip), %rdi
	xorl	%r14d, %r14d
	jmp	.LBB388_528
	.p2align	4, 0x90
.LBB388_527:                            # %"$113"
                                        #   in Loop: Header=BB388_528 Depth=1
	movq	1048576(%rsi), %rsi
	movq	(%rdi), %rcx
	callq	free
	movq	%rsi, (%rdi)
	testq	%rsi, %rsi
	je	.LBB388_534
.LBB388_528:                            # %"$106"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB388_530 Depth 2
	leaq	1048560(%rsi), %rdx
	movl	$65536, %ecx                    # imm = 0x10000
	movq	$-1048576, %rbx                 # imm = 0xFFF00000
	movq	%r14, %rax
	jmp	.LBB388_530
	.p2align	4, 0x90
.LBB388_529:                            # %"$109"
                                        #   in Loop: Header=BB388_530 Depth=2
	addq	$-16, %rdx
	addq	$16, %rbx
	je	.LBB388_532
.LBB388_530:                            # %"$107"
                                        #   Parent Loop BB388_528 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	testb	$1, 8(%rdx)
	je	.LBB388_529
# %bb.531:                              # %"$108"
                                        #   in Loop: Header=BB388_530 Depth=2
	movq	%rax, (%rdx)
	decq	%rcx
	movq	%rdx, %rax
	jmp	.LBB388_529
	.p2align	4, 0x90
.LBB388_532:                            # %"$111"
                                        #   in Loop: Header=BB388_528 Depth=1
	testq	%rcx, %rcx
	je	.LBB388_527
# %bb.533:                              # %"$112"
                                        #   in Loop: Header=BB388_528 Depth=1
	movq	%rsi, %rdi
	movq	1048576(%rsi), %rsi
	addq	$1048576, %rdi                  # imm = 0x100000
	movq	%rax, %r14
	testq	%rsi, %rsi
	jne	.LBB388_528
.LBB388_534:                            # %"$116"
	movq	%r14, ($Avail)(%rip)
.LBB388_535:                            # %"$105"
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq
.LBB388_536:                            # %"$2.i.i"
	leaq	.L$3(%rip), %rcx
	xorl	%edx, %edx
	callq	giveup
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 giveup;
	.scl	2;
	.type	32;
	.endef
	.globl	giveup                          # -- Begin function giveup
	.p2align	4, 0x90
giveup:                                 # @giveup
.seh_proc giveup
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	callq	stderrMsg
	movl	$1, %ecx
	callq	finish
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 finish;
	.scl	2;
	.type	32;
	.endef
	.globl	finish                          # -- Begin function finish
	.p2align	4, 0x90
finish:                                 # @finish
.seh_proc finish
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movl	%ecx, %esi
	callq	setCooked
	movl	%esi, %ecx
	callq	exit
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 sighandler;
	.scl	2;
	.type	32;
	.endef
	.globl	sighandler                      # -- Begin function sighandler
	.p2align	4, 0x90
sighandler:                             # @sighandler
.seh_proc sighandler
# %bb.0:                                # %"$1"
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$56, %rsp
	.seh_stackalloc 56
	.seh_endprologue
	cmpl	$0, env+128(%rip)
	jne	.LBB391_68
# %bb.1:                                # %"$2"
	movq	%rcx, %r13
	movl	$1, env+128(%rip)
	leaq	40(%rsp), %rdi
	testq	%rcx, %rcx
	leaq	SymTab+8(%rip), %r12
	cmoveq	%r12, %r13
	leaq	32(%rsp), %rbx
	leaq	sig(%rip), %r14
	leaq	.L$1(%rip), %r15
	.p2align	4, 0x90
.LBB391_2:                              # %"$4"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB391_5 Depth 2
                                        #     Child Loop BB391_10 Depth 2
                                        #     Child Loop BB391_15 Depth 2
                                        #     Child Loop BB391_20 Depth 2
                                        #     Child Loop BB391_25 Depth 2
                                        #     Child Loop BB391_33 Depth 2
                                        #     Child Loop BB391_41 Depth 2
                                        #     Child Loop BB391_45 Depth 2
                                        #     Child Loop BB391_52 Depth 2
	movl	($Signal)+60(%rip), %eax
	testl	%eax, %eax
	je	.LBB391_7
# %bb.3:                                # %"$7"
                                        #   in Loop: Header=BB391_2 Depth=1
	decl	%eax
	movl	%eax, ($Signal)+60(%rip)
	decl	($Signal)(%rip)
	movq	gcData+32(%rip), %rbp
	movq	SymTab+440(%rip), %rsi
	movq	env(%rip), %rax
	movq	%rsi, 32(%rsp)
	movq	%rax, (%rdi)
	movq	%rbx, env(%rip)
	jmp	.LBB391_5
	.p2align	4, 0x90
.LBB391_4:                              # %"$4.i"
                                        #   in Loop: Header=BB391_5 Depth=2
	testb	$15, %bpl
	jne	.LBB391_35
.LBB391_5:                              # %"$2.i"
                                        #   Parent Loop BB391_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rbp), %rcx
	movq	8(%rbp), %rbp
	testb	$15, %cl
	jne	.LBB391_4
# %bb.6:                                # %"$3.i"
                                        #   in Loop: Header=BB391_5 Depth=2
	callq	evList
	jmp	.LBB391_4
	.p2align	4, 0x90
.LBB391_7:                              # %"$6"
                                        #   in Loop: Header=BB391_2 Depth=1
	movl	($Signal)+12(%rip), %eax
	testl	%eax, %eax
	je	.LBB391_12
# %bb.8:                                # %"$9"
                                        #   in Loop: Header=BB391_2 Depth=1
	decl	%eax
	movl	%eax, ($Signal)+12(%rip)
	decl	($Signal)(%rip)
	movq	SymTab+632(%rip), %rbp
	movq	SymTab+440(%rip), %rsi
	movq	env(%rip), %rax
	movq	%rsi, 32(%rsp)
	movq	%rax, (%rdi)
	movq	%rbx, env(%rip)
	jmp	.LBB391_10
	.p2align	4, 0x90
.LBB391_9:                              # %"$4.i30"
                                        #   in Loop: Header=BB391_10 Depth=2
	testb	$15, %bpl
	jne	.LBB391_35
.LBB391_10:                             # %"$2.i27"
                                        #   Parent Loop BB391_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rbp), %rcx
	movq	8(%rbp), %rbp
	testb	$15, %cl
	jne	.LBB391_9
# %bb.11:                               # %"$3.i28"
                                        #   in Loop: Header=BB391_10 Depth=2
	callq	evList
	jmp	.LBB391_9
.LBB391_12:                             # %"$8"
                                        #   in Loop: Header=BB391_2 Depth=1
	movl	($Signal)+16(%rip), %eax
	testl	%eax, %eax
	je	.LBB391_17
# %bb.13:                               # %"$11"
                                        #   in Loop: Header=BB391_2 Depth=1
	decl	%eax
	movl	%eax, ($Signal)+16(%rip)
	decl	($Signal)(%rip)
	movq	SymTab+648(%rip), %rbp
	movq	SymTab+440(%rip), %rsi
	movq	env(%rip), %rax
	movq	%rsi, 32(%rsp)
	movq	%rax, (%rdi)
	movq	%rbx, env(%rip)
	jmp	.LBB391_15
	.p2align	4, 0x90
.LBB391_14:                             # %"$4.i36"
                                        #   in Loop: Header=BB391_15 Depth=2
	testb	$15, %bpl
	jne	.LBB391_35
.LBB391_15:                             # %"$2.i33"
                                        #   Parent Loop BB391_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rbp), %rcx
	movq	8(%rbp), %rbp
	testb	$15, %cl
	jne	.LBB391_14
# %bb.16:                               # %"$3.i34"
                                        #   in Loop: Header=BB391_15 Depth=2
	callq	evList
	jmp	.LBB391_14
.LBB391_17:                             # %"$10"
                                        #   in Loop: Header=BB391_2 Depth=1
	movl	($Signal)+24(%rip), %eax
	testl	%eax, %eax
	je	.LBB391_22
# %bb.18:                               # %"$13"
                                        #   in Loop: Header=BB391_2 Depth=1
	decl	%eax
	movl	%eax, ($Signal)+24(%rip)
	decl	($Signal)(%rip)
	movq	gcData+24(%rip), %rbp
	movq	SymTab+440(%rip), %rsi
	movq	env(%rip), %rax
	movq	%rsi, 32(%rsp)
	movq	%rax, (%rdi)
	movq	%rbx, env(%rip)
	jmp	.LBB391_20
	.p2align	4, 0x90
.LBB391_19:                             # %"$4.i42"
                                        #   in Loop: Header=BB391_20 Depth=2
	testb	$15, %bpl
	jne	.LBB391_35
.LBB391_20:                             # %"$2.i39"
                                        #   Parent Loop BB391_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rbp), %rcx
	movq	8(%rbp), %rbp
	testb	$15, %cl
	jne	.LBB391_19
# %bb.21:                               # %"$3.i40"
                                        #   in Loop: Header=BB391_20 Depth=2
	callq	evList
	jmp	.LBB391_19
.LBB391_22:                             # %"$12"
                                        #   in Loop: Header=BB391_2 Depth=1
	movl	($Signal)+4(%rip), %eax
	testl	%eax, %eax
	je	.LBB391_27
# %bb.23:                               # %"$15"
                                        #   in Loop: Header=BB391_2 Depth=1
	decl	%eax
	movl	%eax, ($Signal)+4(%rip)
	decl	($Signal)(%rip)
	movq	SymTab+616(%rip), %rbp
	movq	SymTab+440(%rip), %rsi
	movq	env(%rip), %rax
	movq	%rsi, 32(%rsp)
	movq	%rax, (%rdi)
	movq	%rbx, env(%rip)
	jmp	.LBB391_25
	.p2align	4, 0x90
.LBB391_24:                             # %"$4.i48"
                                        #   in Loop: Header=BB391_25 Depth=2
	testb	$15, %bpl
	jne	.LBB391_35
.LBB391_25:                             # %"$2.i45"
                                        #   Parent Loop BB391_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rbp), %rcx
	movq	8(%rbp), %rbp
	testb	$15, %cl
	jne	.LBB391_24
# %bb.26:                               # %"$3.i46"
                                        #   in Loop: Header=BB391_25 Depth=2
	callq	evList
	jmp	.LBB391_24
.LBB391_27:                             # %"$14"
                                        #   in Loop: Header=BB391_2 Depth=1
	movl	($Signal)+8(%rip), %eax
	testl	%eax, %eax
	je	.LBB391_30
# %bb.28:                               # %"$17"
                                        #   in Loop: Header=BB391_2 Depth=1
	decl	%eax
	movl	%eax, ($Signal)+8(%rip)
	movl	($Signal)(%rip), %eax
	decl	%eax
	movl	%eax, ($Signal)(%rip)
	cmpb	$0, ($PRepl)(%rip)
	jne	.LBB391_37
# %bb.29:                               # %"$18"
                                        #   in Loop: Header=BB391_2 Depth=1
	movl	$1, %r8d
	movl	$1, %ecx
	movq	%r15, %rdx
	callq	write
	callq	rlSigBeg
	movq	%r13, %rcx
	callq	brkLoad
	jmp	.LBB391_48
.LBB391_30:                             # %"$16"
                                        #   in Loop: Header=BB391_2 Depth=1
	movl	($Signal)+56(%rip), %eax
	testl	%eax, %eax
	je	.LBB391_38
# %bb.31:                               # %"$24"
                                        #   in Loop: Header=BB391_2 Depth=1
	decl	%eax
	movl	%eax, ($Signal)+56(%rip)
	decl	($Signal)(%rip)
	movq	SymTab+664(%rip), %rbp
	movq	SymTab+440(%rip), %rsi
	movq	env(%rip), %rax
	movq	%rsi, 32(%rsp)
	movq	%rax, (%rdi)
	movq	%rbx, env(%rip)
	jmp	.LBB391_33
	.p2align	4, 0x90
.LBB391_32:                             # %"$4.i54"
                                        #   in Loop: Header=BB391_33 Depth=2
	testb	$15, %bpl
	jne	.LBB391_35
.LBB391_33:                             # %"$2.i51"
                                        #   Parent Loop BB391_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rbp), %rcx
	movq	8(%rbp), %rbp
	testb	$15, %cl
	jne	.LBB391_32
# %bb.34:                               # %"$3.i52"
                                        #   in Loop: Header=BB391_33 Depth=2
	callq	evList
	jmp	.LBB391_32
	.p2align	4, 0x90
.LBB391_35:                             # %execAt.exit
                                        #   in Loop: Header=BB391_2 Depth=1
	movq	%rsi, SymTab+440(%rip)
	movq	40(%rsp), %rax
	movq	%rax, env(%rip)
.LBB391_36:                             # %"$5thread-pre-split"
                                        #   in Loop: Header=BB391_2 Depth=1
	movl	($Signal)(%rip), %eax
.LBB391_37:                             # %"$5"
                                        #   in Loop: Header=BB391_2 Depth=1
	testl	%eax, %eax
	jne	.LBB391_2
	jmp	.LBB391_67
.LBB391_38:                             # %"$23"
                                        #   in Loop: Header=BB391_2 Depth=1
	movl	($Signal)+44(%rip), %eax
	testl	%eax, %eax
	je	.LBB391_49
# %bb.39:                               # %"$26"
                                        #   in Loop: Header=BB391_2 Depth=1
	decl	%eax
	movl	%eax, ($Signal)+44(%rip)
	decl	($Signal)(%rip)
	callq	rlSigBeg
	movq	SymTab+680(%rip), %rbp
	movq	SymTab+440(%rip), %rsi
	movq	env(%rip), %rax
	movq	%rsi, 32(%rsp)
	movq	%rax, (%rdi)
	movq	%rbx, env(%rip)
	jmp	.LBB391_41
	.p2align	4, 0x90
.LBB391_40:                             # %"$4.i60"
                                        #   in Loop: Header=BB391_41 Depth=2
	testb	$15, %bpl
	jne	.LBB391_43
.LBB391_41:                             # %"$2.i57"
                                        #   Parent Loop BB391_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rbp), %rcx
	movq	8(%rbp), %rbp
	testb	$15, %cl
	jne	.LBB391_40
# %bb.42:                               # %"$3.i58"
                                        #   in Loop: Header=BB391_41 Depth=2
	callq	evList
	jmp	.LBB391_40
.LBB391_43:                             # %execAt.exit61
                                        #   in Loop: Header=BB391_2 Depth=1
	movq	%rsi, SymTab+440(%rip)
	movq	40(%rsp), %rax
	movq	%rax, env(%rip)
	callq	stopTerm
	movl	Sig+40(%rip), %ecx
	movq	%r14, %rdx
	callq	iSignal
	movq	SymTab+696(%rip), %rbp
	movq	SymTab+440(%rip), %rsi
	movq	env(%rip), %rax
	movq	%rsi, 32(%rsp)
	movq	%rax, (%rdi)
	movq	%rbx, env(%rip)
	jmp	.LBB391_45
	.p2align	4, 0x90
.LBB391_44:                             # %"$4.i66"
                                        #   in Loop: Header=BB391_45 Depth=2
	testb	$15, %bpl
	jne	.LBB391_47
.LBB391_45:                             # %"$2.i63"
                                        #   Parent Loop BB391_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rbp), %rcx
	movq	8(%rbp), %rbp
	testb	$15, %cl
	jne	.LBB391_44
# %bb.46:                               # %"$3.i64"
                                        #   in Loop: Header=BB391_45 Depth=2
	callq	evList
	jmp	.LBB391_44
.LBB391_47:                             # %execAt.exit67
                                        #   in Loop: Header=BB391_2 Depth=1
	movq	%rsi, SymTab+440(%rip)
	movq	40(%rsp), %rax
	movq	%rax, env(%rip)
.LBB391_48:                             # %"$5"
                                        #   in Loop: Header=BB391_2 Depth=1
	callq	rlSigEnd
	jmp	.LBB391_36
.LBB391_49:                             # %"$25"
                                        #   in Loop: Header=BB391_2 Depth=1
	cmpl	$0, ($Signal)+28(%rip)
	je	.LBB391_36
# %bb.50:                               # %"$28"
                                        #   in Loop: Header=BB391_2 Depth=1
	movq	SymTab+712(%rip), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rsi
	jmp	.LBB391_52
.LBB391_51:                             # %"$38"
                                        #   in Loop: Header=BB391_52 Depth=2
	movq	(%rsi), %rcx
	movq	8(%rsi), %rsi
.LBB391_52:                             # %"$28"
                                        #   Parent Loop BB391_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	testb	$15, %sil
	jne	.LBB391_55
# %bb.53:                               # %"$30"
                                        #   in Loop: Header=BB391_52 Depth=2
	testb	$15, %cl
	jne	.LBB391_51
# %bb.54:                               # %"$39"
                                        #   in Loop: Header=BB391_52 Depth=2
	callq	evList
	jmp	.LBB391_51
.LBB391_55:                             # %"$32"
                                        #   in Loop: Header=BB391_2 Depth=1
	testb	$6, %cl
	jne	.LBB391_59
# %bb.56:                               # %"$34"
                                        #   in Loop: Header=BB391_2 Depth=1
	testb	$8, %cl
	jne	.LBB391_58
# %bb.57:                               # %"$36"
                                        #   in Loop: Header=BB391_2 Depth=1
	callq	evList
	movq	%rax, %rcx
	jmp	.LBB391_59
.LBB391_58:                             # %"$37"
                                        #   in Loop: Header=BB391_2 Depth=1
	movq	(%rcx), %rcx
.LBB391_59:                             # %"$31"
                                        #   in Loop: Header=BB391_2 Depth=1
	cmpq	%r12, %rcx
	je	.LBB391_61
# %bb.60:                               # %"$41"
                                        #   in Loop: Header=BB391_2 Depth=1
	decl	($Signal)+28(%rip)
	movl	($Signal)(%rip), %eax
	decl	%eax
	movl	%eax, ($Signal)(%rip)
	jmp	.LBB391_37
.LBB391_61:                             # %"$40"
	movl	($Children)(%rip), %eax
	leal	(%rax,%rax,8), %ecx
	leal	(%rcx,%rcx,2), %ecx
	addl	%eax, %ecx
	movslq	%ecx, %rsi
	testq	%rsi, %rsi
	je	.LBB391_69
# %bb.62:                               # %"$44.preheader"
	movq	($Child)(%rip), %rdi
	addq	$16, %rdi
	xorl	%ebx, %ebx
	jmp	.LBB391_64
.LBB391_63:                             # %"$46.thread"
                                        #   in Loop: Header=BB391_64 Depth=1
	addq	$28, %rdi
	addq	$-28, %rsi
	je	.LBB391_66
.LBB391_64:                             # %"$44"
                                        # =>This Inner Loop Header: Depth=1
	movl	(%rdi), %ecx
	testl	%ecx, %ecx
	je	.LBB391_63
# %bb.65:                               # %"$46"
                                        #   in Loop: Header=BB391_64 Depth=1
	movl	Sig+24(%rip), %edx
	callq	kill
	testl	%eax, %eax
	sete	%al
	orb	%al, %bl
	jmp	.LBB391_63
.LBB391_66:                             # %"$45"
	testb	$1, %bl
	je	.LBB391_69
.LBB391_67:                             # %"$51"
	movl	$0, env+128(%rip)
.LBB391_68:                             # %"$3"
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB391_69:                             # %"$50"
	movl	$0, ($Signal)(%rip)
	callq	rlSigBeg
	xorl	%ecx, %ecx
	callq	bye
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 evExpr;
	.scl	2;
	.type	32;
	.endef
	.globl	evExpr                          # -- Begin function evExpr
	.p2align	4, 0x90
evExpr:                                 # @evExpr
.seh_proc evExpr
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	cmpq	%rsp, ($StkLimit)(%rip)
	ja	.LBB392_84
# %bb.1:                                # %"$3"
	movq	8(%rdx), %r8
	movq	%rcx, (%rbp)                    # 8-byte Spill
	movq	(%rcx), %r13
	leaq	SymTab+440(%rip), %rdi
	movq	SymTab+440(%rip), %rcx
	movq	env+8(%rip), %rbx
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%rcx, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rdi, (%rax)
	movq	%rbx, 16(%r15)
	movq	%rdx, 24(%r15)
	movq	%r15, env+8(%rip)
	testb	$15, %r13b
	je	.LBB392_2
.LBB392_26:                             # %"$6"
	leaq	SymTab+440(%rip), %r12
	cmpq	%r12, %r13
	jne	.LBB392_65
# %bb.27:                               # %"$41"
	testb	$15, %r8b
	je	.LBB392_28
# %bb.52:                               # %"$45"
	movq	env+88(%rip), %rsi
	leaq	SymTab+8(%rip), %rax
	movq	%rax, env+88(%rip)
	.p2align	4, 0x90
.LBB392_54:                             # %"$75"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r15), %rax
	movq	8(%r15), %rcx
	movq	(%rcx), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, (%r15)
	cmpq	%r12, %rcx
	je	.LBB392_55
# %bb.53:                               # %"$75"
                                        #   in Loop: Header=BB392_54 Depth=1
	movq	16(%r15), %r15
	jmp	.LBB392_54
.LBB392_65:                             # %"$42"
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %r13
	je	.LBB392_71
# %bb.66:                               # %"$88"
	testb	$6, %r13b
	jne	.LBB392_89
# %bb.67:                               # %"$91"
	cmpq	%rax, %r13
	jb	.LBB392_69
# %bb.68:                               # %"$91"
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, %r13
	jbe	.LBB392_90
.LBB392_69:                             # %"$95"
	movq	(%r13), %rcx
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rcx, (%rax)
	movq	%rax, %rcx
	orq	$8, %rcx
	movq	%r13, (%rcx)
	movq	%r15, 16(%rax)
	movq	%rax, env+8(%rip)
	movq	%r8, (%r13)
	jmp	.LBB392_71
	.p2align	4, 0x90
.LBB392_70:                             # %"$97"
                                        #   in Loop: Header=BB392_71 Depth=1
	movq	16(%r15), %r15
.LBB392_71:                             # %"$97"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r15), %rax
	movq	8(%r15), %rcx
	movq	(%rcx), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, (%r15)
	cmpq	%r12, %rcx
	jne	.LBB392_70
# %bb.72:                               # %"$98"
	movq	(%rbp), %rax                    # 8-byte Reload
	movq	8(%rax), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rsi
	jmp	.LBB392_73
	.p2align	4, 0x90
.LBB392_79:                             # %"$108"
                                        #   in Loop: Header=BB392_73 Depth=1
	movq	(%rsi), %rcx
	movq	8(%rsi), %rsi
.LBB392_73:                             # %"$98"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %sil
	jne	.LBB392_74
# %bb.77:                               # %"$100"
                                        #   in Loop: Header=BB392_73 Depth=1
	testb	$15, %cl
	jne	.LBB392_79
# %bb.78:                               # %"$109"
                                        #   in Loop: Header=BB392_73 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	jmp	.LBB392_79
.LBB392_74:                             # %"$102"
	testb	$6, %cl
	jne	.LBB392_81
# %bb.75:                               # %"$104"
	testb	$8, %cl
	jne	.LBB392_76
# %bb.80:                               # %"$106"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB392_81
.LBB392_2:                              # %"$5.preheader"
	leaq	SymTab+8(%rip), %r12
	leaq	SymTab+280(%rip), %r14
	jmp	.LBB392_3
	.p2align	4, 0x90
.LBB392_11:                             # %"$20"
                                        #   in Loop: Header=BB392_3 Depth=1
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rcx, (%rax)
.LBB392_24:                             # %"$14.sink.split"
                                        #   in Loop: Header=BB392_3 Depth=1
	movq	%rax, %rcx
	orq	$8, %rcx
	movq	%rdx, (%rcx)
	movq	%r15, 16(%rax)
	movq	%rax, env+8(%rip)
	movq	%rax, %r15
.LBB392_25:                             # %"$14"
                                        #   in Loop: Header=BB392_3 Depth=1
	testb	$15, %r13b
	jne	.LBB392_26
.LBB392_3:                              # %"$5"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB392_12 Depth 2
	movq	(%r8), %rcx
	movq	8(%r8), %r8
	testb	$6, %cl
	jne	.LBB392_7
# %bb.4:                                # %"$8"
                                        #   in Loop: Header=BB392_3 Depth=1
	testb	$8, %cl
	jne	.LBB392_5
# %bb.6:                                # %"$10"
                                        #   in Loop: Header=BB392_3 Depth=1
	subq	$32, %rsp
	movq	%r8, %rsi
	callq	evList
	movq	%rsi, %r8
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB392_7
.LBB392_5:                              # %"$11"
                                        #   in Loop: Header=BB392_3 Depth=1
	movq	(%rcx), %rcx
	.p2align	4, 0x90
.LBB392_7:                              # %"$7"
                                        #   in Loop: Header=BB392_3 Depth=1
	movq	(%r13), %rdx
	movq	8(%r13), %r13
	testb	$15, %dl
	je	.LBB392_12
# %bb.8:                                # %"$12"
                                        #   in Loop: Header=BB392_3 Depth=1
	testb	$6, %dl
	jne	.LBB392_85
# %bb.9:                                # %"$16"
                                        #   in Loop: Header=BB392_3 Depth=1
	cmpq	%r12, %rdx
	jb	.LBB392_11
# %bb.10:                               # %"$16"
                                        #   in Loop: Header=BB392_3 Depth=1
	cmpq	%r14, %rdx
	ja	.LBB392_11
	jmp	.LBB392_86
	.p2align	4, 0x90
.LBB392_18:                             # %"$30"
                                        #   in Loop: Header=BB392_12 Depth=2
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rdi, (%rbx)
	movq	%rbx, %rax
	orq	$8, %rax
	movq	%rsi, (%rax)
	movq	%r15, 16(%rbx)
	movq	%rbx, env+8(%rip)
	testb	$15, %dl
	movq	%rbx, %r15
	jne	.LBB392_19
.LBB392_12:                             # %"$21"
                                        #   Parent Loop BB392_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	testb	$15, %cl
	je	.LBB392_14
# %bb.13:                               #   in Loop: Header=BB392_12 Depth=2
	movq	%r12, %rdi
	jmp	.LBB392_15
	.p2align	4, 0x90
.LBB392_14:                             # %"$22"
                                        #   in Loop: Header=BB392_12 Depth=2
	movq	(%rcx), %rdi
	movq	8(%rcx), %rcx
.LBB392_15:                             # %"$24"
                                        #   in Loop: Header=BB392_12 Depth=2
	movq	(%rdx), %rsi
	testb	$6, %sil
	jne	.LBB392_87
# %bb.16:                               # %"$26"
                                        #   in Loop: Header=BB392_12 Depth=2
	movq	8(%rdx), %rdx
	cmpq	%r12, %rsi
	jb	.LBB392_18
# %bb.17:                               # %"$26"
                                        #   in Loop: Header=BB392_12 Depth=2
	cmpq	%r14, %rsi
	ja	.LBB392_18
	jmp	.LBB392_88
	.p2align	4, 0x90
.LBB392_19:                             # %"$32"
                                        #   in Loop: Header=BB392_3 Depth=1
	cmpq	%r12, %rdx
	movq	%rbx, %r15
	je	.LBB392_25
# %bb.20:                               # %"$33"
                                        #   in Loop: Header=BB392_3 Depth=1
	testb	$6, %dl
	jne	.LBB392_85
# %bb.21:                               # %"$36"
                                        #   in Loop: Header=BB392_3 Depth=1
	cmpq	%r12, %rdx
	jb	.LBB392_23
# %bb.22:                               # %"$36"
                                        #   in Loop: Header=BB392_3 Depth=1
	cmpq	%r14, %rdx
	jbe	.LBB392_86
.LBB392_23:                             # %"$40"
                                        #   in Loop: Header=BB392_3 Depth=1
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rcx, (%rax)
	movq	%rbx, %r15
	jmp	.LBB392_24
.LBB392_55:                             # %"$76"
	movq	(%rbp), %rax                    # 8-byte Reload
	movq	8(%rax), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rdi
	jmp	.LBB392_56
	.p2align	4, 0x90
.LBB392_62:                             # %"$86"
                                        #   in Loop: Header=BB392_56 Depth=1
	movq	(%rdi), %rcx
	movq	8(%rdi), %rdi
.LBB392_56:                             # %"$76"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %dil
	jne	.LBB392_57
# %bb.60:                               # %"$78"
                                        #   in Loop: Header=BB392_56 Depth=1
	testb	$15, %cl
	jne	.LBB392_62
# %bb.61:                               # %"$87"
                                        #   in Loop: Header=BB392_56 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	jmp	.LBB392_62
.LBB392_57:                             # %"$80"
	testb	$6, %cl
	jne	.LBB392_64
# %bb.58:                               # %"$82"
	testb	$8, %cl
	jne	.LBB392_59
# %bb.63:                               # %"$84"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
.LBB392_64:                             # %"$79"
	movq	%rsi, env+88(%rip)
	jmp	.LBB392_81
.LBB392_28:                             # %"$44"
	movq	(%r8), %rcx
	testb	$6, %cl
	jne	.LBB392_32
# %bb.29:                               # %"$48"
	testb	$8, %cl
	jne	.LBB392_30
# %bb.31:                               # %"$50"
	subq	$32, %rsp
	movq	%r8, %rsi
	callq	evList
	movq	%rsi, %r8
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB392_32
.LBB392_76:                             # %"$107"
	movq	(%rcx), %rcx
	jmp	.LBB392_81
.LBB392_59:                             # %"$85"
	movq	(%rcx), %rcx
	movq	%rsi, env+88(%rip)
	jmp	.LBB392_81
.LBB392_30:                             # %"$51"
	movq	(%rcx), %rcx
.LBB392_32:                             # %"$47"
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rsi, %r13
	orq	$8, %r13
	movq	%rcx, (%r13)
	movq	env(%rip), %rax
	movq	%rax, 8(%r13)
	movq	%r13, env(%rip)
	movq	8(%r8), %rdi
	testb	$15, %dil
	movq	%rsi, %rax
	je	.LBB392_33
.LBB392_39:                             # %"$54"
	movq	env+88(%rip), %r14
	leaq	SymTab+8(%rip), %rcx
	movq	%rcx, (%rax)
	movq	%rsi, env+88(%rip)
	.p2align	4, 0x90
.LBB392_41:                             # %"$61"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r15), %rax
	movq	8(%r15), %rcx
	movq	(%rcx), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, (%r15)
	cmpq	%r12, %rcx
	je	.LBB392_42
# %bb.40:                               # %"$61"
                                        #   in Loop: Header=BB392_41 Depth=1
	movq	16(%r15), %r15
	jmp	.LBB392_41
.LBB392_42:                             # %"$62"
	movq	(%rbp), %rax                    # 8-byte Reload
	movq	8(%rax), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rsi
	jmp	.LBB392_43
	.p2align	4, 0x90
.LBB392_49:                             # %"$72"
                                        #   in Loop: Header=BB392_43 Depth=1
	movq	(%rsi), %rcx
	movq	8(%rsi), %rsi
.LBB392_43:                             # %"$62"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %sil
	jne	.LBB392_44
# %bb.47:                               # %"$64"
                                        #   in Loop: Header=BB392_43 Depth=1
	testb	$15, %cl
	jne	.LBB392_49
# %bb.48:                               # %"$73"
                                        #   in Loop: Header=BB392_43 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	jmp	.LBB392_49
.LBB392_44:                             # %"$66"
	testb	$6, %cl
	jne	.LBB392_51
# %bb.45:                               # %"$68"
	testb	$8, %cl
	jne	.LBB392_46
# %bb.50:                               # %"$70"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB392_51
.LBB392_33:                             # %"$53.preheader"
	movq	%rsi, %rbx
	jmp	.LBB392_34
.LBB392_37:                             # %"$58"
                                        #   in Loop: Header=BB392_34 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	.p2align	4, 0x90
.LBB392_38:                             # %"$55"
                                        #   in Loop: Header=BB392_34 Depth=1
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%rcx, (%rdx)
	movq	%rax, (%rbx)
	movq	env(%rip), %rcx
	movq	%rcx, 8(%rdx)
	movq	%rdx, env(%rip)
	movq	8(%rdi), %rdi
	testb	$15, %dil
	movq	%rax, %rbx
	jne	.LBB392_39
.LBB392_34:                             # %"$53"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rcx
	testb	$6, %cl
	jne	.LBB392_38
# %bb.35:                               # %"$56"
                                        #   in Loop: Header=BB392_34 Depth=1
	testb	$8, %cl
	je	.LBB392_37
# %bb.36:                               # %"$59"
                                        #   in Loop: Header=BB392_34 Depth=1
	movq	(%rcx), %rcx
	jmp	.LBB392_38
.LBB392_46:                             # %"$71"
	movq	(%rcx), %rcx
.LBB392_51:                             # %"$65"
	movq	%r14, env+88(%rip)
	movq	8(%r13), %rax
	movq	%rax, env(%rip)
.LBB392_81:                             # %"$43"
	leaq	env+8(%rip), %rax
	.p2align	4, 0x90
.LBB392_82:                             # %"$110"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rax), %rax
	movq	(%rax), %rdx
	movq	8(%rax), %rbx
	movq	%rdx, (%rbx)
	addq	$16, %rax
	cmpq	%r12, %rbx
	jne	.LBB392_82
# %bb.83:                               # %"$112"
	movq	(%rax), %rax
	movq	%rax, env+8(%rip)
	movq	%rcx, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB392_87:                             # %"$25"
	subq	$32, %rsp
	movq	(%rbp), %rcx                    # 8-byte Reload
	movq	%rsi, %rdx
	callq	varErr
.LBB392_88:                             # %"$29"
	subq	$32, %rsp
	movq	(%rbp), %rcx                    # 8-byte Reload
	movq	%rsi, %rdx
	callq	protErr
.LBB392_85:                             # %"$15"
	subq	$32, %rsp
	movq	(%rbp), %rcx                    # 8-byte Reload
	callq	varErr
.LBB392_86:                             # %"$19"
	subq	$32, %rsp
	movq	(%rbp), %rcx                    # 8-byte Reload
	callq	protErr
.LBB392_84:                             # %"$2"
	subq	$32, %rsp
	callq	stkErr
.LBB392_89:                             # %"$90"
	subq	$32, %rsp
	movq	(%rbp), %rcx                    # 8-byte Reload
	movq	%r13, %rdx
	callq	varErr
.LBB392_90:                             # %"$94"
	subq	$32, %rsp
	movq	(%rbp), %rcx                    # 8-byte Reload
	movq	%r13, %rdx
	callq	protErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 sharedLib;
	.scl	2;
	.type	32;
	.endef
	.globl	sharedLib                       # -- Begin function sharedLib
	.p2align	4, 0x90
sharedLib:                              # @sharedLib
.seh_proc sharedLib
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %r14
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rcx
	jne	.LBB393_2
# %bb.1:
	movl	$1, %eax
	movl	$2, %ecx
	jmp	.LBB393_10
.LBB393_2:                              # %"$3.i13"
	movq	-8(%r14), %rcx
	testb	$8, %cl
	jne	.LBB393_33
	.p2align	4, 0x90
# %bb.3:                                # %"$8.i"
	testb	$6, %cl
	jne	.LBB393_5
.LBB393_4:                              # %"$8.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rcx
	testb	$6, %cl
	je	.LBB393_4
.LBB393_5:                              # %xName.exit
	movl	$1, %eax
	testb	$4, %cl
	movq	%rcx, %rdx
	je	.LBB393_8
# %bb.6:                                # %"$3.i.preheader"
	movl	$1, %eax
	movq	%rcx, %rdx
	.p2align	4, 0x90
.LBB393_7:                              # %"$3.i"
                                        # =>This Inner Loop Header: Depth=1
	addq	$8, %rax
	movq	4(%rdx), %rdx
	testb	$4, %dl
	jne	.LBB393_7
.LBB393_8:                              # %"$4.i"
	shrq	$4, %rdx
	je	.LBB393_10
	.p2align	4, 0x90
.LBB393_9:                              # %"$6.i"
                                        # =>This Inner Loop Header: Depth=1
	incq	%rax
	shrq	$8, %rdx
	jne	.LBB393_9
.LBB393_10:                             # %bufSize.exit
	addq	$15, %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	xorl	%edx, %edx
	movq	%rdi, %rax
	testq	%rdx, %rdx
	jne	.LBB393_15
	jmp	.LBB393_11
	.p2align	4, 0x90
.LBB393_16:                             # %"$3.i10"
                                        #   in Loop: Header=BB393_15 Depth=1
	shrq	$8, %rdx
	incq	%rax
	testq	%rdx, %rdx
	jne	.LBB393_15
.LBB393_11:                             # %"$2.i.i"
	cmpq	$2, %rcx
	je	.LBB393_17
# %bb.12:                               # %"$5.i.i"
	testb	$2, %cl
	jne	.LBB393_14
# %bb.13:                               # %"$7.i.i"
	movq	-4(%rcx), %rdx
	movq	4(%rcx), %rcx
	jmp	.LBB393_15
	.p2align	4, 0x90
.LBB393_14:                             # %"$8.i.i"
	movq	%rcx, %rdx
	shrq	$4, %rdx
	movl	$2, %ecx
	.p2align	4, 0x90
.LBB393_15:                             # %symByte.exit.i
                                        # =>This Inner Loop Header: Depth=1
	movb	%dl, (%rax)
	testb	%dl, %dl
	jne	.LBB393_16
	jmp	.LBB393_18
.LBB393_17:                             # %symByte.exit.thread.i
	movb	$0, (%rax)
.LBB393_18:                             # %bufString.exit
	subq	$32, %rsp
	movq	%rdi, %rcx
	movl	$58, %edx
	callq	strchr
	addq	$32, %rsp
	movq	%rax, %rbx
	xorl	%eax, %eax
	testq	%rbx, %rbx
	je	.LBB393_32
# %bb.19:                               # %bufString.exit
	cmpq	%rdi, %rbx
	je	.LBB393_32
# %bb.20:                               # %"$4"
	cmpb	$0, 1(%rbx)
	je	.LBB393_31
# %bb.21:                               # %"$5"
	movq	($PilLen)(%rip), %r12
	movb	$0, (%rbx)
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	strlen
	addq	$32, %rsp
	movq	%rax, %r15
	leaq	23(%rax,%r12), %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	subq	$32, %rsp
	movq	%rdi, %rcx
	movl	$47, %edx
	callq	strchr
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB393_24
# %bb.22:                               # %"$6"
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rdi, %rdx
	callq	strcpy
	addq	$32, %rsp
	jmp	.LBB393_27
.LBB393_24:                             # %"$7"
	addq	%r12, %r15
	testq	%r12, %r12
	je	.LBB393_26
# %bb.25:                               # %"$9"
	movq	($PilHome)(%rip), %rdx
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%r12, %r8
	callq	memcpy
	addq	$32, %rsp
.LBB393_26:                             # %"$10"
	movb	$0, 4(%rsi,%r12)
	movl	$794978668, (%rsi,%r12)         # imm = 0x2F62696C
	leaq	4(%rsi,%r12), %rcx
	subq	$32, %rsp
	movq	%rdi, %rdx
	callq	strcpy
	addq	$32, %rsp
	addq	$4, %r15
.LBB393_27:                             # %"$8"
	movl	$7303982, (%rsi,%r15)           # imm = 0x6F732E
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	dlOpen
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB393_31
# %bb.28:                               # %"$12"
	incq	%rbx
	subq	$32, %rsp
	movq	%rax, %rcx
	movq	%rbx, %rdx
	callq	dlsym
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB393_31
# %bb.29:                               # %"$13"
	orq	$2, %rax
	movq	%rax, (%r14)
	movb	$1, %al
	jmp	.LBB393_32
.LBB393_31:
	xorl	%eax, %eax
.LBB393_32:                             # %"$2"
                                        # kill: def $al killed $al killed $eax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB393_33:                             # %"$6.i14"
	subq	$32, %rsp
	xorl	%ecx, %ecx
	movq	%r14, %rdx
	callq	nameErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 undefined;
	.scl	2;
	.type	32;
	.endef
	.globl	undefined                       # -- Begin function undefined
	.p2align	4, 0x90
undefined:                              # @undefined
.seh_proc undefined
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rcx, %rax
	leaq	.L$27(%rip), %r8
	movq	%rdx, %rcx
	movq	%rax, %rdx
	xorl	%r9d, %r9d
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 stkErr;
	.scl	2;
	.type	32;
	.endef
	.globl	stkErr                          # -- Begin function stkErr
	.p2align	4, 0x90
stkErr:                                 # @stkErr
.seh_proc stkErr
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	$0, ($StkLimit)(%rip)
	leaq	.L$7(%rip), %r8
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 err;
	.scl	2;
	.type	32;
	.endef
	.globl	err                             # -- Begin function err
	.p2align	4, 0x90
err:                                    # @err
.seh_proc err
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$24, %rsp
	.seh_stackalloc 24
	leaq	16(%rsp), %rbp
	.seh_setframe %rbp, 16
	.seh_endprologue
	movq	%rdx, %r14
	movq	%rcx, %r12
	testq	%rcx, %rcx
	leaq	SymTab+8(%rip), %r15
	movq	%rcx, %rax
	cmoveq	%r15, %rax
	movq	%rax, SymTab+728(%rip)
	testq	%rdx, %rdx
	je	.LBB396_2
# %bb.1:                                # %"$5"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%r14, (%rax)
	movq	env(%rip), %rcx
	movq	%rcx, 8(%rax)
	movq	%rax, env(%rip)
.LBB396_2:                              # %"$6"
	movl	$240, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	subq	$32, %rsp
	movq	%rsi, %rcx
	movl	$240, %edx
	callq	gPrintf
	addq	$32, %rsp
	cmpb	$0, (%rsi)
	je	.LBB396_13
# %bb.3:                                # %"$7"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	mkStr
	addq	$32, %rsp
	movq	%rax, SymTab+760(%rip)
	movq	env+24(%rip), %rdi
	jmp	.LBB396_4
	.p2align	4, 0x90
.LBB396_12:                             # %"$13"
                                        #   in Loop: Header=BB396_4 Depth=1
	movq	(%rdi), %rdi
.LBB396_4:                              # %"$7"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB396_7 Depth 2
	testq	%rdi, %rdi
	je	.LBB396_13
# %bb.5:                                # %"$10"
                                        #   in Loop: Header=BB396_4 Depth=1
	movq	8(%rdi), %rbx
	testq	%rbx, %rbx
	je	.LBB396_12
# %bb.6:                                # %"$10"
                                        #   in Loop: Header=BB396_4 Depth=1
	movl	%ebx, %eax
	andl	$15, %eax
	testq	%rax, %rax
	jne	.LBB396_12
	.p2align	4, 0x90
.LBB396_7:                              # %"$15"
                                        #   Parent Loop BB396_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rbx), %rcx
	movq	SymTab+760(%rip), %rdx
	subq	$32, %rsp
	callq	subStr
	addq	$32, %rsp
	testb	$1, %al
	jne	.LBB396_8
# %bb.11:                               # %"$18"
                                        #   in Loop: Header=BB396_7 Depth=2
	movq	8(%rbx), %rbx
	testb	$15, %bl
	je	.LBB396_7
	jmp	.LBB396_12
.LBB396_8:                              # %"$17"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	unwind
	addq	$32, %rsp
	movq	(%rbx), %rax
	cmpq	%r15, %rax
	jne	.LBB396_10
# %bb.9:                                # %"$17"
	movq	SymTab+760(%rip), %rax
.LBB396_10:                             # %"$17"
	movq	%rax, ($Ret)(%rip)
	addq	$216, %rdi
	subq	$32, %rsp
	movq	%rdi, %rcx
	movl	$1, %edx
	callq	longjmp
.LBB396_13:                             # %"$8"
	movq	($OutFiles)(%rip), %r13
	movl	($OutFDs)(%rip), %ebx
	testl	%ebx, %ebx
	jle	.LBB396_20
# %bb.14:                               # %"$3.i30.preheader"
	xorl	%edi, %edi
.LBB396_15:                             # %"$3.i30"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13,%rdi,8), %rdx
	testq	%rdx, %rdx
	je	.LBB396_18
# %bb.16:                               # %"$3.i.i"
                                        #   in Loop: Header=BB396_15 Depth=1
	movl	4(%rdx), %r8d
	testl	%r8d, %r8d
	je	.LBB396_18
# %bb.17:                               # %"$6.i.i"
                                        #   in Loop: Header=BB396_15 Depth=1
	movl	$0, 4(%rdx)
	movl	(%rdx), %ecx
	addq	$8, %rdx
	subq	$32, %rsp
	callq	wrBytes
	addq	$32, %rsp
.LBB396_18:                             # %flush.exit.i
                                        #   in Loop: Header=BB396_15 Depth=1
	incq	%rdi
	cmpl	%edi, %ebx
	jg	.LBB396_15
# %bb.19:                               # %flushAll.exit.loopexit
	movq	($OutFiles)(%rip), %r13
.LBB396_20:                             # %flushAll.exit
	movl	$0, ($ExtN)(%rip)
	movl	$0, ($Chr)(%rip)
	movq	$0, env+16(%rip)
	movq	$0, ($LinePtr)(%rip)
	movq	%r15, gcData+32(%rip)
	movq	%r15, gcData+24(%rip)
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	16(%r13), %rdi
	movq	env+40(%rip), %rcx
	movq	%rcx, (%rax)
	testq	%rcx, %rcx
	je	.LBB396_22
# %bb.21:                               # %"$2.i"
	movq	($Put)(%rip), %rdx
	movq	%rdx, 16(%rcx)
.LBB396_22:                             # %pushOutFile.exit
	leaq	_putStdout(%rip), %rcx
	movq	%rcx, ($Put)(%rip)
	movq	%rdi, ($OutFile)(%rip)
	movq	%rdi, 8(%rax)
	movl	$0, 24(%rax)
	movq	%rax, env+40(%rip)
	movq	($InFile)(%rip), %r13
	testq	%r13, %r13
	je	.LBB396_32
# %bb.23:                               # %"$23"
	movq	(%r13), %rbx
	testq	%rbx, %rbx
	je	.LBB396_32
# %bb.24:                               # %"$24"
	testq	%rdi, %rdi
	je	.LBB396_28
# %bb.25:                               # %"$2.i45"
	movl	4(%rdi), %eax
	cmpl	$4096, %eax                     # imm = 0x1000
	jne	.LBB396_27
# %bb.26:                               # %"$4.i46"
	movl	$0, 4(%rdi)
	movl	(%rdi), %ecx
	leaq	8(%rdi), %rdx
	subq	$32, %rsp
	movl	$4096, %r8d                     # imm = 0x1000
	callq	wrBytes
	addq	$32, %rsp
	xorl	%eax, %eax
.LBB396_27:                             # %"$5.i"
	cltq
	movb	$91, 8(%rdi,%rax)
	incl	%eax
	movl	%eax, 4(%rdi)
	movq	(%r13), %rbx
.LBB396_28:                             # %_putStdout.exit
	movb	(%rbx), %cl
	testb	%cl, %cl
	je	.LBB396_31
# %bb.29:                               # %"$3.i25.preheader"
	incq	%rbx
.LBB396_30:                             # %"$3.i25"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	callq	*($Put)(%rip)
	addq	$32, %rsp
	movzbl	(%rbx), %ecx
	incq	%rbx
	testb	%cl, %cl
	jne	.LBB396_30
.LBB396_31:                             # %outString.exit26
	subq	$32, %rsp
	movb	$58, %cl
	callq	*($Put)(%rip)
	addq	$32, %rsp
	movslq	20(%r13), %rcx
	subq	$32, %rsp
	callq	outWord
	movb	$93, %cl
	callq	*($Put)(%rip)
	movb	$32, %cl
	callq	*($Put)(%rip)
	addq	$32, %rsp
.LBB396_32:                             # %"$25"
	testq	%r12, %r12
	je	.LBB396_34
# %bb.33:                               # %"$3.i21.preheader"
	subq	$32, %rsp
	movb	$33, %cl
	callq	*($Put)(%rip)
	movb	$63, %cl
	callq	*($Put)(%rip)
	movb	$32, %cl
	callq	*($Put)(%rip)
	movq	%r12, %rcx
	callq	print
	movb	$10, %cl
	callq	*($Put)(%rip)
	addq	$32, %rsp
.LBB396_34:                             # %"$27"
	testq	%r14, %r14
	je	.LBB396_36
# %bb.35:                               # %"$28"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	print
	movb	$32, %cl
	callq	*($Put)(%rip)
	movb	$45, %cl
	callq	*($Put)(%rip)
	movb	$45, %cl
	callq	*($Put)(%rip)
	movb	$32, %cl
	callq	*($Put)(%rip)
	addq	$32, %rsp
.LBB396_36:                             # %"$29"
	movb	(%rsi), %cl
	testb	%cl, %cl
	jne	.LBB396_37
.LBB396_49:                             # %"$31"
	subq	$32, %rsp
	xorl	%ecx, %ecx
	callq	unwind
	addq	$32, %rsp
	cmpq	$0, ($StkLimit)(%rip)
	jne	.LBB396_51
# %bb.50:                               # %"$40"
	movq	($StkBrk)(%rip), %rax
	movq	%rax, ($StkLimit)(%rip)
.LBB396_51:                             # %"$41"
	movq	$0, env(%rip)
	movl	$0, env+128(%rip)
	movq	%r15, env+88(%rip)
	movl	$0, env+136(%rip)
	movq	$0, env+112(%rip)
	movq	$0, env+120(%rip)
	leaq	_putStdout(%rip), %rax
	movq	%rax, ($Put)(%rip)
	leaq	_getStdin(%rip), %rax
	movq	%rax, ($Get)(%rip)
	subq	$32, %rsp
	leaq	QuitRst(%rip), %rcx
	movl	$1, %edx
	callq	longjmp
.LBB396_37:                             # %"$3.i.preheader"
	incq	%rsi
.LBB396_38:                             # %"$3.i"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	callq	*($Put)(%rip)
	addq	$32, %rsp
	movzbl	(%rsi), %ecx
	incq	%rsi
	testb	%cl, %cl
	jne	.LBB396_38
# %bb.39:                               # %outString.exit
	subq	$32, %rsp
	movb	$10, %cl
	callq	*($Put)(%rip)
	addq	$32, %rsp
	movq	SymTab+744(%rip), %rsi
	cmpq	%r15, %rsi
	je	.LBB396_46
# %bb.40:                               # %outString.exit
	testb	$1, ($Jam)(%rip)
	jne	.LBB396_46
# %bb.41:                               # %"$34"
	movb	$1, ($Jam)(%rip)
	movq	SymTab+440(%rip), %rdi
	movq	env(%rip), %rax
	movq	%rdi, -16(%rbp)
	movq	%rax, -8(%rbp)
	leaq	-16(%rbp), %rax
	movq	%rax, env(%rip)
.LBB396_42:                             # %"$2.i31"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rcx
	movq	8(%rsi), %rsi
	testb	$15, %cl
	jne	.LBB396_44
# %bb.43:                               # %"$3.i32"
                                        #   in Loop: Header=BB396_42 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
.LBB396_44:                             # %"$4.i"
                                        #   in Loop: Header=BB396_42 Depth=1
	testb	$15, %sil
	je	.LBB396_42
# %bb.45:                               # %execAt.exit
	movq	%rdi, SymTab+440(%rip)
	movq	-8(%rbp), %rax
	movq	%rax, env(%rip)
	movb	$0, ($Jam)(%rip)
.LBB396_46:                             # %"$35"
	movq	($InFiles)(%rip), %rax
	movq	(%rax), %rax
	cmpb	$1, 4128(%rax)
	jne	.LBB396_52
# %bb.47:                               # %"$37"
	movq	($OutFiles)(%rip), %rax
	movq	8(%rax), %rax
	cmpb	$0, 4104(%rax)
	je	.LBB396_52
# %bb.48:                               # %"$39"
	subq	$32, %rsp
	leaq	.L$6(%rip), %rdx
	leaq	SymTab+8(%rip), %r8
	xorl	%ecx, %ecx
	callq	repl
	addq	$32, %rsp
	jmp	.LBB396_49
.LBB396_52:                             # %"$38"
	subq	$32, %rsp
	movl	$1, %ecx
	callq	bye
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 mkStr;
	.scl	2;
	.type	32;
	.endef
	.globl	mkStr                           # -- Begin function mkStr
	.p2align	4, 0x90
mkStr:                                  # @mkStr
.seh_proc mkStr
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	testq	%rcx, %rcx
	je	.LBB397_1
# %bb.2:                                # %"$2"
	movq	%rcx, %rbx
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	$4, (%rsi)
	leaq	16(%rsi), %r14
	movq	$2, 16(%rsi)
	movq	env(%rip), %rax
	movq	%rax, 24(%rsi)
	movq	%r14, env(%rip)
	movb	(%rcx), %cl
	leaq	SymTab+8(%rip), %rdi
	testb	%cl, %cl
	je	.LBB397_7
# %bb.3:                                # %"$6.preheader"
	incq	%rbx
	.p2align	4, 0x90
.LBB397_4:                              # %"$6"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	movq	%rsi, %rdx
	callq	byteSym
	addq	$32, %rsp
	movzbl	(%rbx), %ecx
	incq	%rbx
	testb	%cl, %cl
	jne	.LBB397_4
# %bb.5:                                # %"$7"
	movq	(%r14), %rcx
	cmpq	$2, %rcx
	je	.LBB397_7
# %bb.6:                                # %"$3.i"
	subq	$32, %rsp
	xorl	%edx, %edx
	callq	consSym
	addq	$32, %rsp
	movq	%rax, %rdi
.LBB397_7:                              # %consStr.exit
	movq	24(%rsi), %rax
	movq	%rax, env(%rip)
	jmp	.LBB397_8
.LBB397_1:
	leaq	SymTab+8(%rip), %rdi
.LBB397_8:                              # %"$4"
	movq	%rdi, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 subStr;
	.scl	2;
	.type	32;
	.endef
	.globl	subStr                          # -- Begin function subStr
	.p2align	4, 0x90
subStr:                                 # @subStr
.seh_proc subStr
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %r8
	movb	$1, %al
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %r8
	je	.LBB398_17
# %bb.1:                                # %"$3.i8"
	movq	-8(%r8), %rdi
	testb	$8, %dil
	jne	.LBB398_2
	.p2align	4, 0x90
# %bb.4:                                # %"$8.i11"
	testb	$6, %dil
	jne	.LBB398_5
.LBB398_3:                              # %"$8.i11"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rdi), %rdi
	testb	$6, %dil
	je	.LBB398_3
.LBB398_5:                              # %xName.exit
	cmpq	$2, %rdi
	jne	.LBB398_6
.LBB398_17:                             # %"$2"
                                        # kill: def $al killed $al killed $eax
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
.LBB398_6:                              # %"$4"
	movl	$2, %r8d
	cmpq	%rcx, %rdx
	jne	.LBB398_7
.LBB398_11:                             # %xName.exit20
	testb	$2, %dil
	jne	.LBB398_36
# %bb.12:                               # %"$5.us.preheader"
	xorl	%r9d, %r9d
.LBB398_13:                             # %"$5.us"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB398_23 Depth 2
	testq	%r9, %r9
	je	.LBB398_15
# %bb.14:                               #   in Loop: Header=BB398_13 Depth=1
	movq	%r9, %rcx
	jmp	.LBB398_21
.LBB398_15:                             # %"$2.i4.us"
                                        #   in Loop: Header=BB398_13 Depth=1
	cmpq	$2, %r8
	je	.LBB398_16
# %bb.18:                               # %"$5.i.us"
                                        #   in Loop: Header=BB398_13 Depth=1
	testb	$2, %r8b
	jne	.LBB398_19
# %bb.20:                               # %"$7.i.us"
                                        #   in Loop: Header=BB398_13 Depth=1
	movq	-4(%r8), %rcx
	movq	4(%r8), %r8
	jmp	.LBB398_21
.LBB398_19:                             # %"$8.i.us"
                                        #   in Loop: Header=BB398_13 Depth=1
	movq	%r8, %rcx
	shrq	$4, %rcx
	movl	$2, %r8d
	.p2align	4, 0x90
.LBB398_21:                             # %symByte.exit.us
                                        #   in Loop: Header=BB398_13 Depth=1
	testb	%cl, %cl
	je	.LBB398_16
# %bb.22:                               # %"$5.i.i.us"
                                        #   in Loop: Header=BB398_13 Depth=1
	movq	%rcx, %r9
	shrq	$8, %r9
	movq	-4(%rdi), %rdx
	movq	4(%rdi), %r11
	movq	%r8, %r10
	movq	%r9, %rsi
	movl	%edx, %ebx
	jmp	.LBB398_23
.LBB398_34:                             # %"$7.i8.i.us"
                                        #   in Loop: Header=BB398_23 Depth=2
	movq	-4(%r10), %rsi
	movq	4(%r10), %r10
	.p2align	4, 0x90
.LBB398_35:                             # %symByte.exit10.i.us
                                        #   in Loop: Header=BB398_23 Depth=2
	movl	%esi, %ecx
	shrq	$8, %rsi
	testb	%cl, %cl
	movl	%edx, %ebx
	je	.LBB398_13
.LBB398_23:                             # %"$2.i.us"
                                        #   Parent Loop BB398_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	shrq	$8, %rdx
	cmpb	%bl, %cl
	jne	.LBB398_13
# %bb.24:                               # %"$3.i.us"
                                        #   in Loop: Header=BB398_23 Depth=2
	testq	%rdx, %rdx
	jne	.LBB398_29
# %bb.25:                               # %"$2.i12.i.us"
                                        #   in Loop: Header=BB398_23 Depth=2
	cmpq	$2, %r11
	je	.LBB398_17
# %bb.26:                               # %"$5.i15.i.us"
                                        #   in Loop: Header=BB398_23 Depth=2
	testb	$2, %r11b
	jne	.LBB398_27
# %bb.28:                               # %"$7.i17.i.us"
                                        #   in Loop: Header=BB398_23 Depth=2
	movq	-4(%r11), %rdx
	movq	4(%r11), %r11
	jmp	.LBB398_29
.LBB398_27:                             # %"$8.i16.i.us"
                                        #   in Loop: Header=BB398_23 Depth=2
	movq	%r11, %rdx
	shrq	$4, %rdx
	movl	$2, %r11d
	.p2align	4, 0x90
.LBB398_29:                             # %symByte.exit19.i.us
                                        #   in Loop: Header=BB398_23 Depth=2
	testb	%dl, %dl
	je	.LBB398_17
# %bb.30:                               # %"$6.i.us"
                                        #   in Loop: Header=BB398_23 Depth=2
	testq	%rsi, %rsi
	jne	.LBB398_35
# %bb.31:                               # %"$2.i3.i.us"
                                        #   in Loop: Header=BB398_23 Depth=2
	cmpq	$2, %r10
	je	.LBB398_13
# %bb.32:                               # %"$5.i6.i.us"
                                        #   in Loop: Header=BB398_23 Depth=2
	testb	$2, %r10b
	je	.LBB398_34
# %bb.33:                               # %"$8.i7.i.us"
                                        #   in Loop: Header=BB398_23 Depth=2
	movq	%r10, %rsi
	shrq	$4, %rsi
	movl	$2, %r10d
	jmp	.LBB398_35
.LBB398_7:                              # %"$3.i14"
	movq	-8(%rdx), %r8
	testb	$8, %r8b
	jne	.LBB398_8
	.p2align	4, 0x90
# %bb.10:                               # %"$8.i18"
	testb	$6, %r8b
	jne	.LBB398_11
.LBB398_9:                              # %"$8.i18"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%r8), %r8
	testb	$6, %r8b
	je	.LBB398_9
	jmp	.LBB398_11
.LBB398_36:                             # %"$5.preheader"
	shrq	$4, %rdi
	xorl	%r9d, %r9d
.LBB398_37:                             # %"$5"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB398_45 Depth 2
	testq	%r9, %r9
	je	.LBB398_39
# %bb.38:                               #   in Loop: Header=BB398_37 Depth=1
	movq	%r9, %rdx
	jmp	.LBB398_43
.LBB398_39:                             # %"$2.i4"
                                        #   in Loop: Header=BB398_37 Depth=1
	cmpq	$2, %r8
	je	.LBB398_16
# %bb.40:                               # %"$5.i"
                                        #   in Loop: Header=BB398_37 Depth=1
	testb	$2, %r8b
	jne	.LBB398_41
# %bb.42:                               # %"$7.i"
                                        #   in Loop: Header=BB398_37 Depth=1
	movq	-4(%r8), %rdx
	movq	4(%r8), %r8
	jmp	.LBB398_43
.LBB398_41:                             # %"$8.i"
                                        #   in Loop: Header=BB398_37 Depth=1
	movq	%r8, %rdx
	shrq	$4, %rdx
	movl	$2, %r8d
	.p2align	4, 0x90
.LBB398_43:                             # %symByte.exit
                                        #   in Loop: Header=BB398_37 Depth=1
	testb	%dl, %dl
	je	.LBB398_16
# %bb.44:                               # %"$2.i.preheader"
                                        #   in Loop: Header=BB398_37 Depth=1
	movq	%rdx, %r9
	shrq	$8, %r9
	movq	%r8, %r10
	movq	%r9, %rsi
	movq	%rdi, %rcx
	movl	%edi, %r11d
	jmp	.LBB398_45
.LBB398_52:                             # %"$7.i8.i"
                                        #   in Loop: Header=BB398_45 Depth=2
	movq	-4(%r10), %rsi
	movq	4(%r10), %r10
	.p2align	4, 0x90
.LBB398_53:                             # %symByte.exit10.i
                                        #   in Loop: Header=BB398_45 Depth=2
	movl	%esi, %edx
	shrq	$8, %rsi
	testb	%dl, %dl
	je	.LBB398_37
.LBB398_45:                             # %"$2.i"
                                        #   Parent Loop BB398_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	shrq	$8, %rcx
	cmpb	%r11b, %dl
	jne	.LBB398_37
# %bb.46:                               # %"$3.i"
                                        #   in Loop: Header=BB398_45 Depth=2
	testq	%rcx, %rcx
	je	.LBB398_17
# %bb.47:                               # %symByte.exit19.i
                                        #   in Loop: Header=BB398_45 Depth=2
	testb	%cl, %cl
	je	.LBB398_17
# %bb.48:                               # %"$6.i"
                                        #   in Loop: Header=BB398_45 Depth=2
	movl	%ecx, %r11d
	testq	%rsi, %rsi
	jne	.LBB398_53
# %bb.49:                               # %"$2.i3.i"
                                        #   in Loop: Header=BB398_45 Depth=2
	cmpq	$2, %r10
	je	.LBB398_37
# %bb.50:                               # %"$5.i6.i"
                                        #   in Loop: Header=BB398_45 Depth=2
	testb	$2, %r10b
	je	.LBB398_52
# %bb.51:                               # %"$8.i7.i"
                                        #   in Loop: Header=BB398_45 Depth=2
	movq	%r10, %rsi
	shrq	$4, %rsi
	movl	$2, %r10d
	jmp	.LBB398_53
.LBB398_16:
	xorl	%eax, %eax
	jmp	.LBB398_17
.LBB398_2:                              # %"$6.i9"
	xorl	%ecx, %ecx
	movq	%r8, %rdx
	callq	nameErr
.LBB398_8:                              # %"$6.i15"
	xorl	%ecx, %ecx
	callq	nameErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 unwind;
	.scl	2;
	.type	32;
	.endef
	.globl	unwind                          # -- Begin function unwind
	.p2align	4, 0x90
unwind:                                 # @unwind
.seh_proc unwind
# %bb.0:                                # %"$1"
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rcx, %r12
	leaq	env+24(%rip), %rdi
	movq	env+8(%rip), %rbx
	leaq	env(%rip), %r14
	movl	$4096, %r15d                    # imm = 0x1000
	jmp	.LBB399_2
	.p2align	4, 0x90
.LBB399_1:                              # %"$30"
                                        #   in Loop: Header=BB399_2 Depth=1
	movq	(%rdi), %rax
	movq	%rax, env+24(%rip)
	cmpq	%r12, %rdi
	je	.LBB399_60
.LBB399_2:                              # %"$2"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB399_4 Depth 2
                                        #     Child Loop BB399_11 Depth 2
                                        #     Child Loop BB399_21 Depth 2
                                        #     Child Loop BB399_23 Depth 2
                                        #     Child Loop BB399_26 Depth 2
                                        #     Child Loop BB399_32 Depth 2
                                        #     Child Loop BB399_34 Depth 2
	movq	(%rdi), %rdi
	testq	%rdi, %rdi
	je	.LBB399_39
# %bb.3:                                # %"$5.preheader"
                                        #   in Loop: Header=BB399_2 Depth=1
	testq	%rbx, %rbx
	je	.LBB399_7
	.p2align	4, 0x90
.LBB399_4:                              # %"$7"
                                        #   Parent Loop BB399_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpq	40(%rdi), %rbx
	je	.LBB399_8
# %bb.5:                                # %"$8"
                                        #   in Loop: Header=BB399_4 Depth=2
	movq	(%rbx), %rax
	movq	8(%rbx), %rcx
	movq	%rax, (%rcx)
	movq	16(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.LBB399_4
.LBB399_7:                              #   in Loop: Header=BB399_2 Depth=1
	xorl	%ebx, %ebx
.LBB399_8:                              # %"$10.preheader"
                                        #   in Loop: Header=BB399_2 Depth=1
	movq	env+56(%rip), %rsi
	jmp	.LBB399_11
	.p2align	4, 0x90
.LBB399_9:                              # %"$2.i14"
                                        #   in Loop: Header=BB399_11 Depth=2
	callq	close
.LBB399_10:                             # %popCtlFiles.exit
                                        #   in Loop: Header=BB399_11 Depth=2
	movq	(%rsi), %rsi
	movq	%rsi, env+56(%rip)
.LBB399_11:                             # %"$10.preheader"
                                        #   Parent Loop BB399_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpq	88(%rdi), %rsi
	je	.LBB399_20
# %bb.12:                               # %"$11"
                                        #   in Loop: Header=BB399_11 Depth=2
	movl	8(%rsi), %ecx
	testl	%ecx, %ecx
	jns	.LBB399_9
# %bb.13:                               # %"$3.i"
                                        #   in Loop: Header=BB399_11 Depth=2
	movq	env+32(%rip), %rax
	movq	env+40(%rip), %rcx
	movq	%rcx, %rdx
	orq	%rax, %rdx
	je	.LBB399_61
# %bb.14:                               # %"$5.i.i"
                                        #   in Loop: Header=BB399_11 Depth=2
	testq	%rcx, %rcx
	je	.LBB399_17
# %bb.15:                               # %"$7.i.i"
                                        #   in Loop: Header=BB399_11 Depth=2
	testq	%rax, %rax
	je	.LBB399_18
# %bb.16:                               # %"$9.i.i"
                                        #   in Loop: Header=BB399_11 Depth=2
	xorl	%r8d, %r8d
	cmpq	%rax, %rcx
	seta	%r8b
	xorl	%edx, %edx
	cmpq	%rcx, %rax
	seta	%dl
	cmpq	%rsp, %rax
	cmoval	%r8d, %edx
	cmpb	$1, %dl
	jne	.LBB399_18
.LBB399_17:                             # %"$8.i.i"
                                        #   in Loop: Header=BB399_11 Depth=2
	movq	8(%rax), %rax
	addq	$8, %rax
	jmp	.LBB399_19
.LBB399_18:                             # %"$15.i.i"
                                        #   in Loop: Header=BB399_11 Depth=2
	movq	8(%rcx), %rax
.LBB399_19:                             # %currFd.exit.i
                                        #   in Loop: Header=BB399_11 Depth=2
	movl	(%rax), %ecx
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	callq	unLock
	jmp	.LBB399_10
	.p2align	4, 0x90
.LBB399_20:                             # %"$13.preheader"
                                        #   in Loop: Header=BB399_2 Depth=1
	movq	env+48(%rip), %rsi
	cmpq	80(%rdi), %rsi
	je	.LBB399_22
	.p2align	4, 0x90
.LBB399_21:                             # %"$14"
                                        #   Parent Loop BB399_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	8(%rsi), %ecx
	movl	$2, %edx
	callq	dup2
	movl	8(%rsi), %ecx
	callq	close
	movq	(%rsi), %rsi
	movq	%rsi, env+48(%rip)
	cmpq	80(%rdi), %rsi
	jne	.LBB399_21
.LBB399_22:                             # %"$15"
                                        #   in Loop: Header=BB399_2 Depth=1
	movq	env+40(%rip), %rax
	cmpq	72(%rdi), %rax
	je	.LBB399_25
	.p2align	4, 0x90
.LBB399_23:                             # %"$18"
                                        #   Parent Loop BB399_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	callq	popOutFiles
	movq	env+40(%rip), %rax
	cmpq	72(%rdi), %rax
	jne	.LBB399_23
# %bb.24:                               # %"$20"
                                        #   in Loop: Header=BB399_2 Depth=1
	movq	8(%rax), %rcx
	movq	%rcx, ($OutFile)(%rip)
	movq	16(%rax), %rax
	movq	%rax, ($Put)(%rip)
.LBB399_25:                             # %"$17"
                                        #   in Loop: Header=BB399_2 Depth=1
	movq	env+32(%rip), %rax
	cmpq	64(%rdi), %rax
	je	.LBB399_28
	.p2align	4, 0x90
.LBB399_26:                             # %"$23"
                                        #   Parent Loop BB399_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	callq	popInFiles
	movq	env+32(%rip), %rax
	cmpq	64(%rdi), %rax
	jne	.LBB399_26
# %bb.27:                               # %"$25"
                                        #   in Loop: Header=BB399_2 Depth=1
	movq	8(%rax), %rcx
	movq	%rcx, ($InFile)(%rip)
	movl	12(%rcx), %ecx
	movl	%ecx, ($Chr)(%rip)
	movq	16(%rax), %rax
	movq	%rax, ($Get)(%rip)
.LBB399_28:                             # %"$22"
                                        #   in Loop: Header=BB399_2 Depth=1
	movq	($Current)(%rip), %rsi
	movq	24(%rdi), %rax
	testq	%rax, %rax
	jne	.LBB399_30
# %bb.29:                               # %"$22"
                                        #   in Loop: Header=BB399_2 Depth=1
	movq	($Coroutines)(%rip), %rax
.LBB399_30:                             # %"$22"
                                        #   in Loop: Header=BB399_2 Depth=1
	leaq	32(%rdi), %rdx
	cmpq	%rax, %rsi
	je	.LBB399_36
# %bb.31:                               # %"$28"
                                        #   in Loop: Header=BB399_2 Depth=1
	movq	$0, (%rsi)
	.p2align	4, 0x90
.LBB399_32:                             # %"$2.i"
                                        #   Parent Loop BB399_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rsi, %rcx
	movq	16(%rsi), %rsi
	testq	%rsi, %rsi
	jne	.LBB399_32
	jmp	.LBB399_34
	.p2align	4, 0x90
.LBB399_33:                             # %"$6.i"
                                        #   in Loop: Header=BB399_34 Depth=2
	movq	8(%rcx), %rcx
	movq	$0, 16(%rcx)
.LBB399_34:                             # %"$6.i"
                                        #   Parent Loop BB399_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpq	$0, (%rcx)
	je	.LBB399_33
# %bb.35:                               # %stop.exit
                                        #   in Loop: Header=BB399_2 Depth=1
	movq	%rax, ($Current)(%rip)
	movq	40(%rax), %rcx
	addq	%r15, %rcx
	movq	%rcx, ($StkLimit)(%rip)
	movq	48(%rax), %rax
	movq	%rax, SymTab+440(%rip)
.LBB399_36:                             # %"$29"
                                        #   in Loop: Header=BB399_2 Depth=1
	movl	$144, %r8d
	movq	%r14, %rcx
	callq	memcpy
	movq	176(%rdi), %rax
	movq	%rax, gcData(%rip)
	movq	184(%rdi), %rax
	movq	%rax, gcData+8(%rip)
	movq	192(%rdi), %rax
	movq	%rax, gcData+16(%rip)
	movq	200(%rdi), %rax
	movq	%rax, SymTab+112(%rip)
	movq	208(%rdi), %rax
	movq	%rax, SymTab+120(%rip)
	movq	16(%rdi), %rcx
	testb	$14, %cl
	jne	.LBB399_1
# %bb.37:                               # %"$33"
                                        #   in Loop: Header=BB399_2 Depth=1
	callq	evList
	jmp	.LBB399_1
	.p2align	4, 0x90
.LBB399_38:                             # %"$38"
                                        #   in Loop: Header=BB399_39 Depth=1
	movq	(%rbx), %rax
	movq	8(%rbx), %rcx
	movq	%rax, (%rcx)
	movq	16(%rbx), %rbx
.LBB399_39:                             # %"$38"
                                        # =>This Inner Loop Header: Depth=1
	testq	%rbx, %rbx
	jne	.LBB399_38
# %bb.40:                               # %"$39"
	movq	$0, env+8(%rip)
	movq	env+56(%rip), %rsi
	jmp	.LBB399_43
	.p2align	4, 0x90
.LBB399_41:                             # %"$2.i15"
                                        #   in Loop: Header=BB399_43 Depth=1
	callq	close
.LBB399_42:                             # %popCtlFiles.exit31
                                        #   in Loop: Header=BB399_43 Depth=1
	movq	(%rsi), %rsi
	movq	%rsi, env+56(%rip)
.LBB399_43:                             # %"$39"
                                        # =>This Inner Loop Header: Depth=1
	testq	%rsi, %rsi
	je	.LBB399_52
# %bb.44:                               # %"$41"
                                        #   in Loop: Header=BB399_43 Depth=1
	movl	8(%rsi), %ecx
	testl	%ecx, %ecx
	jns	.LBB399_41
# %bb.45:                               # %"$3.i19"
                                        #   in Loop: Header=BB399_43 Depth=1
	movq	env+32(%rip), %rax
	movq	env+40(%rip), %rcx
	movq	%rcx, %rdx
	orq	%rax, %rdx
	je	.LBB399_61
# %bb.46:                               # %"$5.i.i21"
                                        #   in Loop: Header=BB399_43 Depth=1
	testq	%rcx, %rcx
	je	.LBB399_49
# %bb.47:                               # %"$7.i.i23"
                                        #   in Loop: Header=BB399_43 Depth=1
	testq	%rax, %rax
	je	.LBB399_50
# %bb.48:                               # %"$9.i.i25"
                                        #   in Loop: Header=BB399_43 Depth=1
	xorl	%edx, %edx
	cmpq	%rax, %rcx
	seta	%dl
	xorl	%ebx, %ebx
	cmpq	%rcx, %rax
	seta	%bl
	cmpq	%rsp, %rax
	cmoval	%edx, %ebx
	cmpb	$1, %bl
	jne	.LBB399_50
.LBB399_49:                             # %"$8.i.i22"
                                        #   in Loop: Header=BB399_43 Depth=1
	movq	8(%rax), %rax
	addq	$8, %rax
	jmp	.LBB399_51
.LBB399_50:                             # %"$15.i.i27"
                                        #   in Loop: Header=BB399_43 Depth=1
	movq	8(%rcx), %rax
.LBB399_51:                             # %currFd.exit.i30
                                        #   in Loop: Header=BB399_43 Depth=1
	movl	(%rax), %ecx
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	callq	unLock
	jmp	.LBB399_42
.LBB399_52:                             # %"$43thread-pre-split"
	movq	env+48(%rip), %rsi
	testq	%rsi, %rsi
	je	.LBB399_54
	.p2align	4, 0x90
.LBB399_53:                             # %"$44"
                                        # =>This Inner Loop Header: Depth=1
	movl	8(%rsi), %ecx
	movl	$2, %edx
	callq	dup2
	movl	8(%rsi), %ecx
	callq	close
	movq	(%rsi), %rsi
	movq	%rsi, env+48(%rip)
	testq	%rsi, %rsi
	jne	.LBB399_53
.LBB399_54:                             # %"$45"
	movq	env+40(%rip), %rax
	cmpq	($Stdout)(%rip), %rax
	je	.LBB399_57
	.p2align	4, 0x90
.LBB399_55:                             # %"$48"
                                        # =>This Inner Loop Header: Depth=1
	callq	popOutFiles
	movq	env+40(%rip), %rax
	cmpq	($Stdout)(%rip), %rax
	jne	.LBB399_55
# %bb.56:                               # %"$50"
	movq	8(%rax), %rcx
	movq	%rcx, ($OutFile)(%rip)
	movq	16(%rax), %rax
	movq	%rax, ($Put)(%rip)
.LBB399_57:                             # %"$47"
	movq	env+32(%rip), %rax
	cmpq	($Stdin)(%rip), %rax
	je	.LBB399_60
	.p2align	4, 0x90
.LBB399_58:                             # %"$53"
                                        # =>This Inner Loop Header: Depth=1
	callq	popInFiles
	movq	env+32(%rip), %rax
	cmpq	($Stdin)(%rip), %rax
	jne	.LBB399_58
# %bb.59:                               # %"$55"
	movq	8(%rax), %rcx
	movq	%rcx, ($InFile)(%rip)
	movl	12(%rcx), %ecx
	movl	%ecx, ($Chr)(%rip)
	movq	16(%rax), %rax
	movq	%rax, ($Get)(%rip)
.LBB399_60:                             # %"$35"
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	retq
.LBB399_61:                             # %"$6.i.i"
	leaq	.L$40(%rip), %r8
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 wrBytes;
	.scl	2;
	.type	32;
	.endef
	.globl	wrBytes                         # -- Begin function wrBytes
	.p2align	4, 0x90
wrBytes:                                # @wrBytes
.seh_proc wrBytes
# %bb.0:                                # %"$1"
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movl	%r8d, %edi
	movq	%rdx, %rbx
	movl	%ecx, %r14d
	xorl	%ebp, %ebp
.LBB400_1:                              # %"$2.outer"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB400_2 Depth 2
	movslq	%edi, %rsi
.LBB400_2:                              # %"$2"
                                        #   Parent Loop BB400_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	%r14d, %ecx
	movq	%rbx, %rdx
	movq	%rsi, %r8
	callq	write
	testl	%eax, %eax
	jns	.LBB400_10
# %bb.3:                                # %"$3"
                                        #   in Loop: Header=BB400_2 Depth=2
	callq	gErrno
                                        # kill: def $eax killed $eax def $rax
	leal	-6(%rax), %ecx
	cmpl	$2, %ecx
	jb	.LBB400_12
# %bb.4:                                # %"$3"
                                        #   in Loop: Header=BB400_2 Depth=2
	cmpl	$2, %eax
	jne	.LBB400_5
# %bb.8:                                # %"$14"
                                        #   in Loop: Header=BB400_2 Depth=2
	cmpl	$0, ($Signal)(%rip)
	je	.LBB400_2
# %bb.9:                                # %"$17"
                                        #   in Loop: Header=BB400_2 Depth=2
	xorl	%ecx, %ecx
	callq	sighandler
	jmp	.LBB400_2
.LBB400_10:                             # %"$4"
                                        #   in Loop: Header=BB400_1 Depth=1
	subl	%eax, %edi
	je	.LBB400_11
# %bb.14:                               # %"$19"
                                        #   in Loop: Header=BB400_1 Depth=1
	movl	%eax, %eax
	addq	%rax, %rbx
	jmp	.LBB400_1
.LBB400_5:                              # %"$3"
	cmpl	$3, %eax
	jne	.LBB400_6
.LBB400_12:                             # %"$7"
	movl	%ebp, %eax
	addq	$32, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq
.LBB400_11:
	movb	$1, %bpl
	jmp	.LBB400_12
.LBB400_6:                              # %"$13"
	cmpl	$2, %r14d
	jne	.LBB400_7
# %bb.13:                               # %"$15"
	movl	$2, %ecx
	callq	bye
.LBB400_7:                              # %"$16"
	leaq	.L$37(%rip), %rcx
	callq	writeErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _putStdout;
	.scl	2;
	.type	32;
	.endef
	.globl	_putStdout                      # -- Begin function _putStdout
	.p2align	4, 0x90
_putStdout:                             # @_putStdout
.seh_proc _putStdout
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	($OutFile)(%rip), %rsi
	testq	%rsi, %rsi
	je	.LBB401_5
# %bb.1:                                # %"$2"
	movl	%ecx, %ebx
	movl	4(%rsi), %eax
	cmpl	$4096, %eax                     # imm = 0x1000
	jne	.LBB401_3
# %bb.2:                                # %"$4"
	movl	$0, 4(%rsi)
	movl	(%rsi), %ecx
	leaq	8(%rsi), %rdx
	movl	$4096, %r8d                     # imm = 0x1000
	callq	wrBytes
	xorl	%eax, %eax
.LBB401_3:                              # %"$5"
	movslq	%eax, %r8
	movb	%bl, 8(%rsi,%r8)
	incl	%r8d
	movl	%r8d, 4(%rsi)
	cmpb	$10, %bl
	jne	.LBB401_5
# %bb.4:                                # %"$7"
	cmpb	$1, 4104(%rsi)
	jne	.LBB401_5
# %bb.6:                                # %"$8"
	leaq	8(%rsi), %rdx
	movl	$0, 4(%rsi)
	movl	(%rsi), %ecx
                                        # kill: def $r8d killed $r8d killed $r8
	addq	$40, %rsp
	popq	%rbx
	popq	%rsi
	jmp	wrBytes                         # TAILCALL
.LBB401_5:                              # %"$3"
	nop
	addq	$40, %rsp
	popq	%rbx
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 print;
	.scl	2;
	.type	32;
	.endef
	.globl	print                           # -- Begin function print
	.p2align	4, 0x90
print:                                  # @print
.seh_proc print
# %bb.0:                                # %"$1"
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$48, %rsp
	.seh_stackalloc 48
	.seh_endprologue
	movq	%rcx, %rbx
	leaq	SymTab+264(%rip), %rdi
	cmpl	$0, ($Signal)(%rip)
	je	.LBB402_2
	.p2align	4, 0x90
.LBB402_1:                              # %"$2"
	xorl	%ecx, %ecx
	callq	sighandler
.LBB402_2:                              # %"$3"
                                        # =>This Inner Loop Header: Depth=1
	testb	$2, %bl
	jne	.LBB402_27
# %bb.3:                                # %"$5"
                                        #   in Loop: Header=BB402_2 Depth=1
	testb	$4, %bl
	jne	.LBB402_30
# %bb.4:                                # %"$7"
                                        #   in Loop: Header=BB402_2 Depth=1
	testb	$8, %bl
	jne	.LBB402_31
# %bb.5:                                # %"$9"
                                        #   in Loop: Header=BB402_2 Depth=1
	cmpq	%rdi, (%rbx)
	jne	.LBB402_8
# %bb.6:                                # %"$49"
                                        #   in Loop: Header=BB402_2 Depth=1
	cmpq	%rbx, 8(%rbx)
	je	.LBB402_8
# %bb.7:                                # %"$51"
                                        #   in Loop: Header=BB402_2 Depth=1
	movb	$39, %cl
	callq	*($Put)(%rip)
	movq	8(%rbx), %rbx
	cmpl	$0, ($Signal)(%rip)
	jne	.LBB402_1
	jmp	.LBB402_2
.LBB402_8:                              # %"$50"
	cmpq	%rsp, ($StkLimit)(%rip)
	ja	.LBB402_83
# %bb.9:                                # %"$53"
	movb	$40, %cl
	callq	*($Put)(%rip)
	testb	$15, %bl
	jne	.LBB402_43
# %bb.10:                               # %"$5.preheader.i"
	movq	(%rbx), %rax
	movq	%rbx, %rdi
	.p2align	4, 0x90
.LBB402_11:                             # %"$5.i"
                                        # =>This Inner Loop Header: Depth=1
	orq	$1, %rax
	movq	%rax, (%rdi)
	movq	8(%rdi), %rdi
	testb	$15, %dil
	jne	.LBB402_41
# %bb.12:                               # %"$6.i"
                                        #   in Loop: Header=BB402_11 Depth=1
	movq	(%rdi), %rax
	testb	$1, %al
	je	.LBB402_11
# %bb.13:                               # %"$14.preheader.i"
	cmpq	%rbx, %rdi
	movq	%rbx, %rbp
	je	.LBB402_17
# %bb.14:
	movq	%rbx, %rax
	.p2align	4, 0x90
.LBB402_15:                             # %"$15.i"
                                        # =>This Inner Loop Header: Depth=1
	andb	$-2, (%rax)
	movq	8(%rax), %rax
	cmpq	%rdi, %rax
	jne	.LBB402_15
# %bb.16:
	movq	%rdi, %rbp
.LBB402_17:                             # %"$17.preheader.i"
	movq	%rbp, %rax
	.p2align	4, 0x90
.LBB402_18:                             # %"$17.i"
                                        # =>This Inner Loop Header: Depth=1
	andb	$-2, (%rax)
	movq	8(%rax), %rax
	cmpq	%rax, %rbp
	jne	.LBB402_18
# %bb.19:                               # %circ.exit
	testq	%rbp, %rbp
	je	.LBB402_43
# %bb.20:
	movq	%rbx, %rsi
	.p2align	4, 0x90
.LBB402_21:                             # %"$62"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rcx
	callq	print
	movb	$32, %cl
	callq	*($Put)(%rip)
	movq	8(%rsi), %rsi
	cmpq	%rsi, %rbp
	jne	.LBB402_21
# %bb.22:                               # %"$64"
	movb	$46, %cl
	callq	*($Put)(%rip)
	cmpq	%rbx, %rdi
	je	.LBB402_47
# %bb.23:                               # %"$65"
	movb	$32, %cl
	callq	*($Put)(%rip)
	movb	$40, %cl
	callq	*($Put)(%rip)
	movq	%rbp, %rsi
	.p2align	4, 0x90
.LBB402_24:                             # %"$67"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rcx
	callq	print
	movb	$32, %cl
	callq	*($Put)(%rip)
	movq	8(%rsi), %rsi
	cmpq	%rsi, %rbp
	jne	.LBB402_24
# %bb.25:                               # %"$69"
	movb	$46, %cl
	callq	*($Put)(%rip)
	movb	$41, %cl
	callq	*($Put)(%rip)
	jmp	.LBB402_47
.LBB402_27:                             # %"$6"
	testb	$8, %bl
	je	.LBB402_29
# %bb.28:                               # %"$2.i43"
	movb	$45, %cl
	callq	*($Put)(%rip)
.LBB402_29:                             # %outNum.exit
	shrq	$4, %rbx
	movq	%rbx, %rcx
	addq	$48, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r14
	jmp	outWord                         # TAILCALL
.LBB402_30:                             # %"$8"
	movq	$0, 32(%rsp)
	movq	%rbx, %rcx
	movq	$-1, %rdx
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	callq	fmtNum
	nop
	addq	$48, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq
.LBB402_31:                             # %"$10"
	movq	-8(%rbx), %rdi
	testb	$8, %dil
	jne	.LBB402_36
	.p2align	4, 0x90
# %bb.32:                               # %"$18"
	testb	$6, %dil
	jne	.LBB402_34
.LBB402_33:                             # %"$18"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rdi), %rdi
	testb	$6, %dil
	je	.LBB402_33
.LBB402_34:                             # %"$19"
	cmpq	$2, %rdi
	jne	.LBB402_49
# %bb.35:                               # %"$21"
	movb	$36, %cl
	callq	*($Put)(%rip)
	shrq	$4, %rbx
	movq	%rbx, %rcx
	addq	$48, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r14
	jmp	outOct                          # TAILCALL
.LBB402_36:                             # %"$13"
	movb	$123, %cl
	callq	*($Put)(%rip)
	movq	%rdi, %rsi
	andq	$-9, %rsi
	testb	$6, %dil
	jne	.LBB402_38
	.p2align	4, 0x90
.LBB402_37:                             # %"$15"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rsi), %rsi
	testb	$6, %sil
	je	.LBB402_37
.LBB402_38:                             # %"$16"
	movl	%esi, %eax
	shrl	$24, %eax
	movq	%rsi, %rcx
	shrq	$36, %rcx
	andl	$65280, %ecx                    # imm = 0xFF00
	orl	%eax, %ecx
	je	.LBB402_40
# %bb.39:                               # %"$2.i40"
                                        # kill: def $ecx killed $ecx killed $rcx
	callq	outAo
.LBB402_40:                             # %prExt.exit
	movl	%esi, %eax
	shrl	$4, %eax
	andl	$1048575, %eax                  # imm = 0xFFFFF
	movq	%rsi, %rdx
	shrq	$12, %rdx
	andl	$-1048576, %edx                 # imm = 0xFFF00000
	orq	%rax, %rdx
	shrq	$20, %rsi
	movabsq	$4393751543808, %rcx            # imm = 0x3FF00000000
	andq	%rsi, %rcx
	orq	%rdx, %rcx
	callq	outOct
	movb	$125, %cl
	jmp	.LBB402_48
.LBB402_41:                             # %"$9.i.preheader"
	movq	%rbx, %rax
	.p2align	4, 0x90
.LBB402_42:                             # %"$9.i"
                                        # =>This Inner Loop Header: Depth=1
	andb	$-2, (%rax)
	movq	8(%rax), %rax
	testb	$15, %al
	je	.LBB402_42
.LBB402_43:                             # %"$57.preheader"
	movq	(%rbx), %rcx
	callq	print
	movq	8(%rbx), %rsi
	leaq	SymTab+8(%rip), %rdi
	cmpq	%rdi, %rsi
	je	.LBB402_47
	.p2align	4, 0x90
.LBB402_44:                             # %"$58"
                                        # =>This Inner Loop Header: Depth=1
	movb	$32, %cl
	callq	*($Put)(%rip)
	testb	$15, %sil
	jne	.LBB402_46
# %bb.45:                               # %"$60"
                                        #   in Loop: Header=BB402_44 Depth=1
	movq	(%rsi), %rcx
	callq	print
	movq	8(%rsi), %rsi
	cmpq	%rdi, %rsi
	jne	.LBB402_44
	jmp	.LBB402_47
.LBB402_46:                             # %"$3.i.preheader"
	movb	$46, %cl
	callq	*($Put)(%rip)
	movb	$32, %cl
	callq	*($Put)(%rip)
	movq	%rsi, %rcx
	callq	print
.LBB402_47:                             # %"$41"
	movb	$41, %cl
.LBB402_48:                             # %"$41"
	addq	$48, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r14
	rex64 jmpq	*($Put)(%rip)           # TAILCALL
.LBB402_49:                             # %"$20"
	leaq	SymTab+112(%rip), %rdx
	movq	%rdi, %rcx
	callq	isIntern
	cmpq	%rbx, %rax
	jne	.LBB402_53
# %bb.50:                               # %"$3.i21.preheader"
	movb	$112, %cl
	callq	*($Put)(%rip)
	movb	$114, %cl
	callq	*($Put)(%rip)
	movb	$105, %cl
	callq	*($Put)(%rip)
	movb	$118, %cl
	callq	*($Put)(%rip)
.LBB402_51:                             # %"$47"
	movb	$126, %cl
	callq	*($Put)(%rip)
.LBB402_52:                             # %"$47"
	movq	%rdi, %rcx
	addq	$48, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r14
	jmp	printName                       # TAILCALL
.LBB402_53:                             # %"$25.preheader"
	movq	gcData(%rip), %rsi
	testb	$15, %sil
	je	.LBB402_74
.LBB402_54:                             # %"$5.i34"
	movb	$34, %cl
	callq	*($Put)(%rip)
	testb	$2, %dil
	jne	.LBB402_56
# %bb.55:                               # %"$7.i36"
	movq	4(%rdi), %rsi
	movq	-4(%rdi), %rdi
	jmp	.LBB402_57
.LBB402_56:                             # %"$8.i35"
	shrq	$4, %rdi
	movl	$2, %esi
.LBB402_57:                             # %symByte.exit38
	movl	%edi, %ebx
	jmp	.LBB402_60
.LBB402_58:                             # %"$7.i"
                                        #   in Loop: Header=BB402_60 Depth=1
	movq	-4(%rsi), %rdi
	movq	4(%rsi), %rsi
	.p2align	4, 0x90
.LBB402_59:                             # %symByte.exit
                                        #   in Loop: Header=BB402_60 Depth=1
	testb	%dil, %dil
	movl	%edi, %ebx
	je	.LBB402_73
.LBB402_60:                             # %"$29"
                                        # =>This Inner Loop Header: Depth=1
	shrq	$8, %rdi
	cmpb	$93, %bl
	jg	.LBB402_65
# %bb.61:                               # %"$29"
                                        #   in Loop: Header=BB402_60 Depth=1
	cmpb	$34, %bl
	je	.LBB402_67
# %bb.62:                               # %"$29"
                                        #   in Loop: Header=BB402_60 Depth=1
	cmpb	$92, %bl
	je	.LBB402_67
.LBB402_63:                             # %"$36"
                                        #   in Loop: Header=BB402_60 Depth=1
	cmpb	$31, %bl
	ja	.LBB402_69
# %bb.64:                               # %"$39"
                                        #   in Loop: Header=BB402_60 Depth=1
	movb	$94, %cl
	callq	*($Put)(%rip)
	orb	$64, %bl
	jmp	.LBB402_69
	.p2align	4, 0x90
.LBB402_65:                             # %"$29"
                                        #   in Loop: Header=BB402_60 Depth=1
	cmpb	$127, %bl
	je	.LBB402_68
# %bb.66:                               # %"$29"
                                        #   in Loop: Header=BB402_60 Depth=1
	cmpb	$94, %bl
	jne	.LBB402_63
.LBB402_67:                             # %"$35"
                                        #   in Loop: Header=BB402_60 Depth=1
	movb	$92, %cl
	callq	*($Put)(%rip)
	jmp	.LBB402_69
.LBB402_68:                             # %"$37"
                                        #   in Loop: Header=BB402_60 Depth=1
	movb	$94, %cl
	callq	*($Put)(%rip)
	movb	$63, %bl
	.p2align	4, 0x90
.LBB402_69:                             # %"$30"
                                        #   in Loop: Header=BB402_60 Depth=1
	movl	%ebx, %ecx
	callq	*($Put)(%rip)
	testq	%rdi, %rdi
	jne	.LBB402_59
# %bb.70:                               # %"$2.i"
                                        #   in Loop: Header=BB402_60 Depth=1
	cmpq	$2, %rsi
	je	.LBB402_73
# %bb.71:                               # %"$5.i28"
                                        #   in Loop: Header=BB402_60 Depth=1
	testb	$2, %sil
	je	.LBB402_58
# %bb.72:                               # %"$8.i"
                                        #   in Loop: Header=BB402_60 Depth=1
	movq	%rsi, %rdi
	shrq	$4, %rdi
	movl	$2, %esi
	jmp	.LBB402_59
.LBB402_73:                             # %"$41"
	movb	$34, %cl
	jmp	.LBB402_48
.LBB402_74:                             # %"$26.preheader"
	xorl	%ebp, %ebp
	jmp	.LBB402_77
.LBB402_75:                             #   in Loop: Header=BB402_77 Depth=1
	movl	%ebp, %ecx
.LBB402_76:                             # %"$43"
                                        #   in Loop: Header=BB402_77 Depth=1
	movq	8(%rsi), %rsi
	testb	$15, %sil
	movl	%ecx, %ebp
	jne	.LBB402_54
.LBB402_77:                             # %"$26"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %r14
	movq	(%r14), %rax
	movq	8(%rax), %rdx
	movq	%rdi, %rcx
	callq	isIntern
	testq	%rax, %rax
	je	.LBB402_75
# %bb.78:                               # %"$42"
                                        #   in Loop: Header=BB402_77 Depth=1
	movb	$1, %cl
	cmpq	%rbx, %rax
	jne	.LBB402_76
# %bb.79:                               # %"$45"
	testb	$1, %bpl
	je	.LBB402_52
# %bb.80:                               # %"$46"
	movq	-8(%r14), %rcx
	testb	$6, %cl
	jne	.LBB402_82
.LBB402_81:                             # %"$3.i24"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rcx
	testb	$6, %cl
	je	.LBB402_81
.LBB402_82:                             # %printSym.exit
	callq	printName
	jmp	.LBB402_51
.LBB402_83:                             # %"$52"
	xorl	%ecx, %ecx
	callq	stkErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 bye;
	.scl	2;
	.type	32;
	.endef
	.globl	bye                             # -- Begin function bye
	.p2align	4, 0x90
bye:                                    # @bye
.seh_proc bye
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movl	%ecx, %esi
	cmpb	$0, ($InBye)(%rip)
	jne	.LBB403_5
# %bb.1:                                # %"$2"
	movb	$1, ($InBye)(%rip)
	xorl	%ecx, %ecx
	callq	unwind
	movq	SymTab+808(%rip), %rdi
.LBB403_2:                              # %"$4"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rcx
	movq	8(%rdi), %rdi
	testb	$15, %cl
	jne	.LBB403_4
# %bb.3:                                # %"$5"
                                        #   in Loop: Header=BB403_2 Depth=1
	callq	evList
.LBB403_4:                              # %"$6"
                                        #   in Loop: Header=BB403_2 Depth=1
	testb	$15, %dil
	je	.LBB403_2
.LBB403_5:                              # %"$3"
	callq	flushAll
	movl	%esi, %ecx
	callq	finish
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 repl;
	.scl	2;
	.type	32;
	.endef
	.globl	repl                            # -- Begin function repl
	.p2align	4, 0x90
repl:                                   # @repl
.seh_proc repl
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$88, %rsp
	.seh_stackalloc 88
	leaq	80(%rsp), %rbp
	.seh_setframe %rbp, 80
	.seh_endprologue
	movq	%r8, %rdi
	testb	$6, %dil
	jne	.LBB404_53
# %bb.1:                                # %"$3"
	movq	%rdx, %r12
	leaq	SymTab+8(%rip), %r13
	cmpq	%r13, %rdi
	je	.LBB404_11
# %bb.2:                                # %"$3"
	movl	%edi, %eax
	andl	$8, %eax
	testq	%rax, %rax
	je	.LBB404_11
# %bb.3:                                # %"$3.i"
	movq	-8(%rdi), %rax
	testb	$8, %al
	jne	.LBB404_11
# %bb.4:                                # %"$7.preheader.i"
	testb	$6, %al
	movq	%rax, %rdx
	jne	.LBB404_7
# %bb.5:                                # %"$8.i.preheader"
	movq	%rax, %rdx
	.p2align	4, 0x90
.LBB404_6:                              # %"$8.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rdx), %rdx
	testb	$6, %dl
	je	.LBB404_6
.LBB404_7:                              # %"$9.i"
	testb	$2, %dl
	jne	.LBB404_8
# %bb.9:                                # %"$10.i"
	movb	-4(%rdx), %dl
	cmpb	$45, %dl
	je	.LBB404_23
.LBB404_11:                             # %"$7"
	movq	gcData(%rip), %rdx
	movq	env(%rip), %rbx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%rdx, -40(%rbp)                 # 8-byte Spill
	movq	%rdx, (%r14)
	movq	%r14, %rax
	orq	$8, %rax
	movq	%rbx, (%rax)
	movq	gcData+8(%rip), %rdx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rdx, -80(%rbp)                 # 8-byte Spill
	movq	%rdx, (%rsi)
	movq	%rsi, %rax
	orq	$8, %rax
	movq	%r14, (%rax)
	movq	gcData+16(%rip), %rbx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdx
	movq	%rbx, -72(%rbp)                 # 8-byte Spill
	movq	%rbx, (%rdx)
	movq	%rdx, %rax
	orq	$8, %rax
	movq	%rsi, (%rax)
	movq	SymTab+112(%rip), %rbx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rbx, -64(%rbp)                 # 8-byte Spill
	movq	%rbx, (%rsi)
	movq	%rsi, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	SymTab+120(%rip), %rbx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdx
	movq	%rbx, -56(%rbp)                 # 8-byte Spill
	movq	%rbx, (%rdx)
	movq	%rdx, %rax
	orq	$8, %rax
	movq	%rsi, (%rax)
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	cmpq	%r13, %rdi
	movq	$10, (%r15)
	movq	%rdx, 8(%r15)
	movq	%r15, env(%rip)
	movq	Termio(%rip), %rax
	movq	%rax, -48(%rbp)                 # 8-byte Spill
	jne	.LBB404_14
# %bb.12:                               # %"$9"
	subq	$32, %rsp
	movq	%rcx, %rsi
	callq	setCooked
	movq	%rsi, %rcx
	addq	$32, %rsp
	cmpb	$0, ($Repl)(%rip)
	jne	.LBB404_14
# %bb.13:                               # %"$11"
	movb	$1, ($Repl)(%rip)
	movl	Sig+4(%rip), %ecx
	subq	$32, %rsp
	leaq	sig(%rip), %rdx
	callq	iSignal
	movq	%rsi, %rcx
	addq	$32, %rsp
.LBB404_14:                             # %"$10"
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r8
	subq	$32, %rsp
	movq	%rdi, %rdx
	callq	rdOpen
	addq	$32, %rsp
	movq	%r13, SymTab+120(%rip)
	movq	%r13, SymTab+112(%rip)
	movq	%r13, gcData+16(%rip)
	movq	%r13, gcData+8(%rip)
	movq	%r13, SymTab+568(%rip)
	movq	($InFile)(%rip), %rax
	movq	($InFiles)(%rip), %rcx
	cmpq	(%rcx), %rax
	je	.LBB404_32
# %bb.15:                               # %"$29.preheader"
	movq	%r13, %rdi
	jmp	.LBB404_16
	.p2align	4, 0x90
.LBB404_21:                             # %"$36"
                                        #   in Loop: Header=BB404_16 Depth=1
	movq	(%rax), %rdi
.LBB404_16:                             # %"$29"
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, ($Chr)(%rip)
	jne	.LBB404_18
# %bb.17:                               # %"$3.i20"
                                        #   in Loop: Header=BB404_16 Depth=1
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	cmpl	$0, ($Chr)(%rip)
	je	.LBB404_49
.LBB404_18:                             # %read1.exit
                                        #   in Loop: Header=BB404_16 Depth=1
	subq	$32, %rsp
	movb	$1, %cl
	callq	read0
	addq	$32, %rsp
	cmpq	%r13, %rax
	je	.LBB404_49
# %bb.19:                               # %"$30"
                                        #   in Loop: Header=BB404_16 Depth=1
	movq	%rax, (%r15)
	testb	$6, %al
	movq	%rax, %rdi
	jne	.LBB404_16
# %bb.20:                               # %"$33"
                                        #   in Loop: Header=BB404_16 Depth=1
	testb	$8, %al
	jne	.LBB404_21
# %bb.54:                               # %"$35"
                                        #   in Loop: Header=BB404_16 Depth=1
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdi
	jmp	.LBB404_16
.LBB404_32:                             # %"$16.preheader"
	subq	$32, %rsp
	movq	%r12, %rcx
	callq	stdRead
	addq	$32, %rsp
	leaq	SymTab+8(%rip), %rdi
	cmpq	%rdi, %rax
	jne	.LBB404_33
.LBB404_49:                             # %"$15"
	subq	$32, %rsp
	callq	popInFiles
	addq	$32, %rsp
	movq	env+32(%rip), %rax
	movq	8(%rax), %rcx
	movq	%rcx, ($InFile)(%rip)
	movl	12(%rcx), %ecx
	movl	%ecx, ($Chr)(%rip)
	movq	16(%rax), %rax
	movq	%rax, ($Get)(%rip)
	cmpq	$0, -48(%rbp)                   # 8-byte Folded Reload
	je	.LBB404_51
# %bb.50:                               # %"$37"
	subq	$32, %rsp
	callq	setRaw
	addq	$32, %rsp
.LBB404_51:                             # %"$38"
	movq	-56(%rbp), %rax                 # 8-byte Reload
	movq	%rax, SymTab+120(%rip)
	movq	-64(%rbp), %rax                 # 8-byte Reload
	movq	%rax, SymTab+112(%rip)
	movq	-72(%rbp), %rax                 # 8-byte Reload
	movq	%rax, gcData+16(%rip)
	movq	-80(%rbp), %rax                 # 8-byte Reload
	movq	%rax, gcData+8(%rip)
	movq	-40(%rbp), %rax                 # 8-byte Reload
	movq	%rax, gcData(%rip)
.LBB404_52:                             # %"$8"
	movq	8(%r14), %rax
	movq	%rax, env(%rip)
	movq	%rdi, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB404_33:                             # %"$17.lr.ph"
	testq	%r12, %r12
	je	.LBB404_34
# %bb.38:
	leaq	SymTab+8(%rip), %rbx
	jmp	.LBB404_39
	.p2align	4, 0x90
.LBB404_44:                             # %"$21.us"
                                        #   in Loop: Header=BB404_39 Depth=1
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	stdEval
.LBB404_45:                             # %"$23.us"
                                        #   in Loop: Header=BB404_39 Depth=1
	addq	$32, %rsp
.LBB404_46:                             # %"$23.us"
                                        #   in Loop: Header=BB404_39 Depth=1
	movq	%rax, %rdi
	subq	$32, %rsp
	movq	%r12, %rcx
	callq	stdRead
	addq	$32, %rsp
	cmpq	%rbx, %rax
	je	.LBB404_49
.LBB404_39:                             # %"$17.us"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, (%r15)
	cmpl	$0, ($Chr)(%rip)
	je	.LBB404_44
# %bb.40:                               # %"$22.us"
                                        #   in Loop: Header=BB404_39 Depth=1
	testb	$6, %al
	jne	.LBB404_46
# %bb.41:                               # %"$25.us"
                                        #   in Loop: Header=BB404_39 Depth=1
	testb	$8, %al
	jne	.LBB404_42
# %bb.43:                               # %"$27.us"
                                        #   in Loop: Header=BB404_39 Depth=1
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB404_45
.LBB404_42:                             # %"$28.us"
                                        #   in Loop: Header=BB404_39 Depth=1
	movq	(%rax), %rax
	jmp	.LBB404_46
.LBB404_8:                              # %"$11.i"
	shrq	$4, %rdx
	cmpb	$45, %dl
	jne	.LBB404_11
	.p2align	4, 0x90
.LBB404_23:                             # %"$8.i18"
	testb	$6, %al
	jne	.LBB404_24
.LBB404_22:                             # %"$8.i18"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB404_22
.LBB404_24:                             # %xName.exit
	movl	($Chr)(%rip), %esi
	movq	($Get)(%rip), %rdi
	movq	env+80(%rip), %rbx
	movl	$0, ($Chr)(%rip)
	leaq	getParse(%rip), %rcx
	movq	%rcx, ($Get)(%rip)
	movq	env(%rip), %rcx
	movq	%rax, -32(%rbp)
	movq	%rcx, -24(%rbp)
	leaq	-32(%rbp), %rcx
	movq	%rcx, env(%rip)
	movq	$0, -16(%rbp)
	movq	%rax, -8(%rbp)
	movq	$23818, (%rbp)                  # imm = 0x5D0A
	leaq	-16(%rbp), %rcx
	movq	%rcx, env+80(%rip)
	cmpq	$2, %rax
	je	.LBB404_30
# %bb.25:                               # %"$5.i.i.i"
	testb	$2, %al
	jne	.LBB404_26
# %bb.27:                               # %"$7.i.i.i"
	movq	-4(%rax), %rdx
	movq	%rdx, -16(%rbp)
	movq	4(%rax), %rcx
	movq	%rdx, %rax
	jmp	.LBB404_28
.LBB404_34:
	leaq	SymTab+8(%rip), %rsi
	jmp	.LBB404_35
.LBB404_47:                             # %"$27"
                                        #   in Loop: Header=BB404_35 Depth=1
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	evList
	addq	$32, %rsp
	.p2align	4, 0x90
.LBB404_48:                             # %"$23"
                                        #   in Loop: Header=BB404_35 Depth=1
	movq	%rax, %rdi
	subq	$32, %rsp
	xorl	%ecx, %ecx
	callq	stdRead
	addq	$32, %rsp
	cmpq	%rsi, %rax
	je	.LBB404_49
.LBB404_35:                             # %"$17"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, (%r15)
	testb	$6, %al
	jne	.LBB404_48
# %bb.36:                               # %"$25"
                                        #   in Loop: Header=BB404_35 Depth=1
	testb	$8, %al
	je	.LBB404_47
# %bb.37:                               # %"$28"
                                        #   in Loop: Header=BB404_35 Depth=1
	movq	(%rax), %rax
	jmp	.LBB404_48
.LBB404_26:                             # %"$8.i.i.i"
	shrq	$4, %rax
	movl	$2, %ecx
.LBB404_28:                             # %symByte.exit.i.i
	movq	%rcx, -8(%rbp)
	movq	%rax, %rcx
	shrq	$8, %rcx
	movq	%rcx, -16(%rbp)
	testb	%al, %al
	je	.LBB404_30
# %bb.29:
	movzbl	%al, %eax
	jmp	.LBB404_31
.LBB404_30:                             # %"$3.i.i"
	movq	$93, (%rbp)
	movl	$10, %eax
.LBB404_31:                             # %parse.exit
	movl	%eax, ($Chr)(%rip)
	subq	$32, %rsp
	callq	rdList
	addq	$32, %rsp
	movq	%rax, %rcx
	movq	%rbx, env+80(%rip)
	movq	%rdi, ($Get)(%rip)
	movl	%esi, ($Chr)(%rip)
	movq	-24(%rbp), %rdx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%rcx, (%r14)
	movq	%r14, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	%r14, env(%rip)
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdi
	jmp	.LBB404_52
.LBB404_53:                             # %"$2"
	subq	$32, %rsp
	movq	%rdi, %rdx
	callq	argErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _getStdin;
	.scl	2;
	.type	32;
	.endef
	.globl	_getStdin                       # -- Begin function _getStdin
	.p2align	4, 0x90
_getStdin:                              # @_getStdin
.seh_proc _getStdin
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	($InFile)(%rip), %rbx
	movl	8(%rbx), %ecx
	movl	$-1, %esi
	testl	%ecx, %ecx
	js	.LBB405_42
# %bb.1:                                # %"$3"
	jne	.LBB405_3
# %bb.2:                                # %"$6"
	cmpb	$0, 4128(%rbx)
	je	.LBB405_3
# %bb.17:                               # %"$7"
	movq	($LinePtr)(%rip), %rsi
	testq	%rsi, %rsi
	je	.LBB405_18
.LBB405_39:                             # %"$19thread-pre-split"
	movb	(%rsi), %al
.LBB405_40:                             # %"$19"
	testb	%al, %al
	je	.LBB405_41
.LBB405_35:                             # %"$39"
	incq	%rsi
	movq	%rsi, ($LinePtr)(%rip)
	movzbl	%al, %esi
	jmp	.LBB405_42
.LBB405_3:                              # %"$8"
	movl	24(%rbx), %eax
	cmpl	28(%rbx), %eax
	jne	.LBB405_14
# %bb.4:                                # %"$10"
	testl	%eax, %eax
	js	.LBB405_42
# %bb.5:                                # %"$12"
	movl	$0, 24(%rbx)
	leaq	32(%rbx), %rdi
	jmp	.LBB405_6
	.p2align	4, 0x90
.LBB405_11:                             # %"$9.i"
                                        #   in Loop: Header=BB405_6 Depth=1
	movl	8(%rbx), %ecx
.LBB405_6:                              # %"$12"
                                        # =>This Inner Loop Header: Depth=1
	movl	$4096, %r8d                     # imm = 0x1000
	movq	%rdi, %rdx
	callq	read
	testl	%eax, %eax
	jns	.LBB405_12
# %bb.7:                                # %"$3.i"
                                        #   in Loop: Header=BB405_6 Depth=1
	callq	gErrno
	cmpl	$2, %eax
	jne	.LBB405_8
# %bb.9:                                # %"$6.i"
                                        #   in Loop: Header=BB405_6 Depth=1
	cmpl	$0, ($Signal)(%rip)
	je	.LBB405_11
# %bb.10:                               # %"$8.i"
                                        #   in Loop: Header=BB405_6 Depth=1
	xorl	%ecx, %ecx
	callq	sighandler
	jmp	.LBB405_11
.LBB405_12:                             # %slow.exit
	movl	%eax, 28(%rbx)
	testl	%eax, %eax
	je	.LBB405_42
# %bb.13:                               # %"slow.exit.$14_crit_edge"
	movl	24(%rbx), %eax
.LBB405_14:                             # %"$14"
	movslq	%eax, %rcx
	movzbl	32(%rbx,%rcx), %esi
	cmpl	$10, %esi
	jne	.LBB405_16
# %bb.15:                               # %"$16"
	incl	16(%rbx)
.LBB405_16:                             # %"$17"
	incl	%eax
	movl	%eax, 24(%rbx)
.LBB405_42:                             # %"$2"
	movl	%esi, ($Chr)(%rip)
	movl	%esi, %eax
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
.LBB405_18:                             # %"$18"
	movq	($LineBuf)(%rip), %rcx
	testq	%rcx, %rcx
	je	.LBB405_20
# %bb.19:                               # %"$20"
	callq	free
	movq	$0, ($LineBuf)(%rip)
.LBB405_20:                             # %"$21"
	movl	($OutFDs)(%rip), %esi
	testl	%esi, %esi
	jle	.LBB405_26
# %bb.21:                               # %"$3.i15.preheader"
	movq	($OutFiles)(%rip), %rdi
	xorl	%ebx, %ebx
	jmp	.LBB405_22
	.p2align	4, 0x90
.LBB405_25:                             # %flush.exit.i
                                        #   in Loop: Header=BB405_22 Depth=1
	incq	%rbx
	cmpl	%ebx, %esi
	jle	.LBB405_26
.LBB405_22:                             # %"$3.i15"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi,%rbx,8), %rdx
	testq	%rdx, %rdx
	je	.LBB405_25
# %bb.23:                               # %"$3.i.i"
                                        #   in Loop: Header=BB405_22 Depth=1
	movl	4(%rdx), %r8d
	testl	%r8d, %r8d
	je	.LBB405_25
# %bb.24:                               # %"$6.i.i"
                                        #   in Loop: Header=BB405_22 Depth=1
	movl	$0, 4(%rdx)
	movl	(%rdx), %ecx
	addq	$8, %rdx
	callq	wrBytes
	jmp	.LBB405_25
.LBB405_26:                             # %flushAll.exit
	movq	($LinePrmt)(%rip), %rcx
	callq	gReadline
	movq	%rax, ($LineBuf)(%rip)
	testq	%rax, %rax
	je	.LBB405_27
# %bb.30:                               # %"$23"
	movq	%rax, %rsi
	movq	($ContPrmt)(%rip), %rax
	movq	%rax, ($LinePrmt)(%rip)
	movb	(%rsi), %al
	testb	%al, %al
	je	.LBB405_40
# %bb.31:                               # %"$23"
	cmpb	$32, %al
	je	.LBB405_40
# %bb.32:                               # %"$23"
	cmpb	$46, %al
	jne	.LBB405_36
# %bb.33:                               # %"$32"
	cmpb	$0, 1(%rsi)
	je	.LBB405_34
.LBB405_36:                             # %"$33"
	callq	currentLine
	testq	%rax, %rax
	je	.LBB405_38
# %bb.37:                               # %"$35"
	movq	%rax, %rcx
	movq	%rsi, %rdx
	callq	strcmp
	testl	%eax, %eax
	je	.LBB405_39
.LBB405_38:                             # %"$36"
	movq	%rsi, %rcx
	callq	add_history
	jmp	.LBB405_39
.LBB405_41:                             # %"$40"
	movq	$0, ($LinePtr)(%rip)
	movl	$10, %esi
	jmp	.LBB405_42
.LBB405_8:                              # %slow.exit.thread
	movl	$0, 28(%rbx)
	jmp	.LBB405_42
.LBB405_34:
	movb	$46, %al
	jmp	.LBB405_35
.LBB405_27:                             # %"$22"
	leaq	.L$1(%rip), %rdx
	movl	$1, %r8d
	movl	$1, %ecx
	callq	write
	cmpq	$0, env+8(%rip)
	jne	.LBB405_43
# %bb.28:                               # %"$22"
	movq	($ContPrmt)(%rip), %rax
	cmpq	%rax, ($LinePrmt)(%rip)
	je	.LBB405_43
# %bb.29:                               # %"$27"
	xorl	%ecx, %ecx
	callq	bye
.LBB405_43:                             # %"$26"
	leaq	($Empty)(%rip), %r8
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 argErr;
	.scl	2;
	.type	32;
	.endef
	.globl	argErr                          # -- Begin function argErr
	.p2align	4, 0x90
argErr:                                 # @argErr
.seh_proc argErr
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	leaq	.L$8(%rip), %r8
	xorl	%r9d, %r9d
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 getParse;
	.scl	2;
	.type	32;
	.endef
	.globl	getParse                        # -- Begin function getParse
	.p2align	4, 0x90
getParse:                               # @getParse
# %bb.0:                                # %"$1"
	movq	env+80(%rip), %rax
	movq	(%rax), %rcx
	testq	%rcx, %rcx
	jne	.LBB407_6
# %bb.1:                                # %"$2.i"
	movq	8(%rax), %rcx
	cmpq	$2, %rcx
	je	.LBB407_8
# %bb.2:                                # %"$5.i"
	testb	$2, %cl
	jne	.LBB407_3
# %bb.4:                                # %"$7.i"
	movq	-4(%rcx), %r8
	movq	%r8, (%rax)
	movq	4(%rcx), %rdx
	movq	%r8, %rcx
	jmp	.LBB407_5
.LBB407_3:                              # %"$8.i"
	shrq	$4, %rcx
	movl	$2, %edx
.LBB407_5:                              # %symByte.exit.sink.split
	movq	%rdx, 8(%rax)
.LBB407_6:                              # %symByte.exit
	movq	%rcx, %rdx
	shrq	$8, %rdx
	movq	%rdx, (%rax)
	testb	%cl, %cl
	je	.LBB407_8
# %bb.7:
	movzbl	%cl, %eax
	movl	%eax, ($Chr)(%rip)
	retq
.LBB407_8:                              # %"$3"
	movq	16(%rax), %rcx
	movq	%rcx, %rdx
	shrq	$8, %rdx
	movq	%rdx, 16(%rax)
	movzbl	%cl, %edx
	xorl	%eax, %eax
	cmpq	$1, %rcx
	sbbl	%eax, %eax
	orl	%edx, %eax
	movl	%eax, ($Chr)(%rip)
	retq
                                        # -- End function
	.def	 rdList;
	.scl	2;
	.type	32;
	.endef
	.globl	rdList                          # -- Begin function rdList
	.p2align	4, 0x90
rdList:                                 # @rdList
.seh_proc rdList
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	cmpq	%rsp, ($StkLimit)(%rip)
	ja	.LBB408_36
# %bb.1:                                # %"$3"
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	leaq	SymTab+8(%rip), %rsi
	jmp	.LBB408_2
	.p2align	4, 0x90
.LBB408_24:                             # %comment.exit.i
                                        #   in Loop: Header=BB408_2 Depth=1
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
.LBB408_2:                              # %"$4"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB408_4 Depth 2
                                        #     Child Loop BB408_12 Depth 2
                                        #     Child Loop BB408_17 Depth 2
	movl	($Chr)(%rip), %eax
	testl	%eax, %eax
	js	.LBB408_6
.LBB408_4:                              # %"$5.i"
                                        #   Parent Loop BB408_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$32, %eax
	jg	.LBB408_10
# %bb.5:                                # %"$6.i"
                                        #   in Loop: Header=BB408_4 Depth=2
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	testl	%eax, %eax
	jns	.LBB408_4
	jmp	.LBB408_6
	.p2align	4, 0x90
.LBB408_10:                             # %"$7.i"
                                        #   in Loop: Header=BB408_2 Depth=1
	cmpl	$35, %eax
	jne	.LBB408_6
# %bb.11:                               # %"$11.i"
                                        #   in Loop: Header=BB408_2 Depth=1
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	cmpl	$123, %eax
	jne	.LBB408_12
# %bb.15:                               # %"$5.preheader.i.i"
                                        #   in Loop: Header=BB408_2 Depth=1
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB408_24
# %bb.16:                               # %"$6.i.i.preheader"
                                        #   in Loop: Header=BB408_2 Depth=1
	xorl	%edi, %edi
	jmp	.LBB408_17
	.p2align	4, 0x90
.LBB408_12:                             # %"$17.preheader.i.i"
                                        #   Parent Loop BB408_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, %eax
	je	.LBB408_24
# %bb.13:                               # %"$17.preheader.i.i"
                                        #   in Loop: Header=BB408_12 Depth=2
	testl	%eax, %eax
	js	.LBB408_24
# %bb.14:                               # %"$20.i.i"
                                        #   in Loop: Header=BB408_12 Depth=2
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	jmp	.LBB408_12
	.p2align	4, 0x90
.LBB408_19:                             # %"$10.i.i"
                                        #   in Loop: Header=BB408_17 Depth=2
	incq	%rdi
.LBB408_23:                             # %"$12.i.i"
                                        #   in Loop: Header=BB408_17 Depth=2
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB408_24
.LBB408_17:                             # %"$6.i.i"
                                        #   Parent Loop BB408_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$35, %eax
	jne	.LBB408_20
# %bb.18:                               # %"$8.i.i"
                                        #   in Loop: Header=BB408_17 Depth=2
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	cmpl	$123, %eax
	je	.LBB408_19
.LBB408_20:                             # %"$11.i.i"
                                        #   in Loop: Header=BB408_17 Depth=2
	cmpl	$125, %eax
	jne	.LBB408_23
# %bb.21:                               # %"$14.i.i"
                                        #   in Loop: Header=BB408_17 Depth=2
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	cmpl	$35, %eax
	jne	.LBB408_23
# %bb.22:                               # %"$13.i.i"
                                        #   in Loop: Header=BB408_17 Depth=2
	decq	%rdi
	jns	.LBB408_23
	jmp	.LBB408_24
.LBB408_6:                              # %skip.exit
                                        #   in Loop: Header=BB408_2 Depth=1
	cmpl	$126, %eax
	jne	.LBB408_7
# %bb.26:                               # %"$10"
                                        #   in Loop: Header=BB408_2 Depth=1
	subq	$32, %rsp
	callq	*($Get)(%rip)
	xorl	%ecx, %ecx
	callq	read0
	addq	$32, %rsp
	movq	%rax, %rdi
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rdi, (%rbx)
	movq	%rbx, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rbx, env(%rip)
	testb	$6, %dil
	jne	.LBB408_30
# %bb.27:                               # %"$13"
                                        #   in Loop: Header=BB408_2 Depth=1
	testb	$8, %dil
	jne	.LBB408_28
# %bb.29:                               # %"$15"
                                        #   in Loop: Header=BB408_2 Depth=1
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rdi
.LBB408_30:                             # %"$12"
                                        #   in Loop: Header=BB408_2 Depth=1
	cmpq	%rsi, %rdi
	jne	.LBB408_31
.LBB408_35:                             # %"$17"
                                        #   in Loop: Header=BB408_2 Depth=1
	movq	8(%rbx), %rax
	movq	%rax, env(%rip)
	jmp	.LBB408_2
.LBB408_28:                             # %"$16"
                                        #   in Loop: Header=BB408_2 Depth=1
	movq	(%rdi), %rdi
	cmpq	%rsi, %rdi
	je	.LBB408_35
.LBB408_31:                             # %"$18"
	movq	%rdi, (%rbx)
	testb	$15, %dil
	je	.LBB408_32
# %bb.37:                               # %"$19"
	subq	$32, %rsp
	leaq	SymTab+8(%rip), %rdx
	movq	%rdi, %rcx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rsi
	movq	%rax, (%rbx)
	subq	$32, %rsp
	movq	%rax, %rcx
	movq	%rax, %rdx
	callq	rdl
	jmp	.LBB408_38
.LBB408_7:                              # %skip.exit
	cmpl	$93, %eax
	je	.LBB408_39
# %bb.8:                                # %skip.exit
	subq	$32, %rsp
	cmpl	$41, %eax
	jne	.LBB408_25
# %bb.9:                                # %"$7"
	callq	*($Get)(%rip)
.LBB408_38:                             # %"$6"
	addq	$32, %rsp
	jmp	.LBB408_39
.LBB408_32:
	movq	%rdi, %rax
	.p2align	4, 0x90
.LBB408_33:                             # %"$22"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rdx
	movq	8(%rax), %rax
	testb	$15, %al
	je	.LBB408_33
# %bb.34:                               # %"$24"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	rdl
	addq	$32, %rsp
	movq	%rdi, %rsi
	jmp	.LBB408_39
.LBB408_25:                             # %"$11"
	xorl	%ecx, %ecx
	callq	read0
	leaq	SymTab+8(%rip), %rdx
	movq	%rax, %rcx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rsi
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rsi, (%rdi)
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rdi, env(%rip)
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	%rsi, %rdx
	callq	rdl
	addq	$32, %rsp
	movq	8(%rdi), %rax
	movq	%rax, env(%rip)
.LBB408_39:                             # %"$6"
	movq	%rsi, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%rbp
	retq
.LBB408_36:                             # %"$2"
	subq	$32, %rsp
	xorl	%ecx, %ecx
	callq	stkErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 sig;
	.scl	2;
	.type	32;
	.endef
	.globl	sig                             # -- Begin function sig
	.p2align	4, 0x90
sig:                                    # @sig
.seh_proc sig
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movl	%ecx, %edx
	movl	($TtyPid)(%rip), %ecx
	testl	%ecx, %ecx
	je	.LBB409_1
# %bb.2:                                # %"$2"
	addq	$32, %rsp
	popq	%rsi
	jmp	kill                            # TAILCALL
.LBB409_1:                              # %"$3"
	leaq	($Signal)(%rip), %rsi
	incl	($Signal)(%rip)
	movl	%edx, %ecx
	callq	gSignal
	cltq
	incl	(%rsi,%rax,4)
	addq	$32, %rsp
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 rdOpen;
	.scl	2;
	.type	32;
	.endef
	.globl	rdOpen                          # -- Begin function rdOpen
	.p2align	4, 0x90
rdOpen:                                 # @rdOpen
.seh_proc rdOpen
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%r8, %r13
	leaq	SymTab+8(%rip), %r15
	cmpq	%r15, %rdx
	jne	.LBB410_5
# %bb.1:                                # %"$4"
	movq	($InFiles)(%rip), %rax
	movq	(%rax), %rax
	jmp	.LBB410_2
.LBB410_5:                              # %"$3"
	movq	%rdx, %rbx
	movq	%rcx, %r12
	testb	$6, %bl
	je	.LBB410_14
# %bb.6:                                # %"$6"
	movq	%rbx, %rax
	shrq	$4, %rax
	testb	$8, %bl
	jne	.LBB410_7
# %bb.11:                               # %"$8"
	cmpl	%eax, ($InFDs)(%rip)
	jle	.LBB410_13
# %bb.12:                               # %"$15"
	movq	($InFiles)(%rip), %rcx
	cltq
	movq	(%rcx,%rax,8), %rax
	testq	%rax, %rax
	jne	.LBB410_2
.LBB410_13:                             # %"$11"
	subq	$32, %rsp
	movq	%r12, %rcx
	movq	%rbx, %rdx
	callq	badFd
.LBB410_14:                             # %"$5"
	testb	$8, %bl
	jne	.LBB410_15
# %bb.52:                               # %"$19"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movl	$1, %eax
	testb	$15, %bl
	jne	.LBB410_55
# %bb.53:                               # %"$34.preheader"
	movl	$1, %eax
	movq	%rbx, %rcx
	.p2align	4, 0x90
.LBB410_54:                             # %"$34"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rcx
	incq	%rax
	testb	$15, %cl
	je	.LBB410_54
.LBB410_55:                             # %"$35"
	leaq	15(,%rax,8), %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, (%rbp)                    # 8-byte Spill
	movq	(%rbx), %rcx
	subq	$32, %rsp
	callq	xSym
	addq	$32, %rsp
	movl	$2, %edi
	cmpq	%r15, %rax
	je	.LBB410_59
# %bb.56:                               # %"$3.i78"
	movq	-8(%rax), %rdi
	testb	$8, %dil
	je	.LBB410_58
.LBB410_81:                             # %"$6.i79"
	subq	$32, %rsp
	movq	%r12, %rcx
	movq	%rax, %rdx
	callq	nameErr
	.p2align	4, 0x90
.LBB410_57:                             # %"$8.i82"
                                        #   in Loop: Header=BB410_58 Depth=1
	movq	8(%rdi), %rdi
.LBB410_58:                             # %"$8.i82"
                                        # =>This Inner Loop Header: Depth=1
	testb	$6, %dil
	je	.LBB410_57
.LBB410_59:                             # %xName.exit84
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	pipe
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB410_113
# %bb.60:                               # %"$37"
	movl	$1, %eax
	testb	$4, %dil
	movq	%rdi, %rcx
	je	.LBB410_63
# %bb.61:                               # %"$3.i.i31.preheader"
	movl	$1, %eax
	movq	%rdi, %rcx
	.p2align	4, 0x90
.LBB410_62:                             # %"$3.i.i31"
                                        # =>This Inner Loop Header: Depth=1
	addq	$8, %rax
	movq	4(%rcx), %rcx
	testb	$4, %cl
	jne	.LBB410_62
.LBB410_63:                             # %"$4.i.i35"
	shrq	$4, %rcx
	je	.LBB410_65
	.p2align	4, 0x90
.LBB410_64:                             # %"$6.i.i37"
                                        # =>This Inner Loop Header: Depth=1
	incq	%rax
	shrq	$8, %rcx
	jne	.LBB410_64
.LBB410_65:                             # %bufSize.exit.i40
	testb	$2, %dil
	jne	.LBB410_66
# %bb.67:                               # %"$3.i48"
	movq	-4(%rdi), %rdx
	movq	%rdx, %rcx
	shrq	$8, %rcx
	cmpb	$126, %dl
	jne	.LBB410_69
	jmp	.LBB410_74
.LBB410_7:                              # %"$9"
	movq	env+32(%rip), %rcx
	.p2align	4, 0x90
.LBB410_8:                              # %"$10"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rcx), %rcx
	testq	%rcx, %rcx
	je	.LBB410_13
# %bb.9:                                # %"$12"
                                        #   in Loop: Header=BB410_8 Depth=1
	decl	%eax
	jne	.LBB410_8
# %bb.10:                               # %"$14"
	movq	8(%rcx), %rax
.LBB410_2:                              # %"$4"
	movq	($InFile)(%rip), %rcx
	testq	%rcx, %rcx
	je	.LBB410_4
# %bb.3:                                # %"$2.i"
	movl	($Chr)(%rip), %edx
	movl	%edx, 12(%rcx)
.LBB410_4:                              # %"$3.i"
	movq	env+32(%rip), %rcx
	movq	%rcx, (%r13)
	xorl	%edi, %edi
.LBB410_109:                            # %"$3.i67"
	testq	%rcx, %rcx
	je	.LBB410_111
# %bb.110:                              # %"$4.i68"
	movq	($Get)(%rip), %rdx
	movq	%rdx, 16(%rcx)
.LBB410_111:                            # %"$2"
	leaq	_getStdin(%rip), %rcx
	movq	%rcx, ($Get)(%rip)
	movq	%rax, ($InFile)(%rip)
	movq	%rax, 8(%r13)
	movl	12(%rax), %eax
	movl	%eax, ($Chr)(%rip)
	movl	%edi, 24(%r13)
	movq	%r13, env+32(%rip)
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB410_15:                             # %"$3.i89"
	movq	-8(%rbx), %rcx
	testb	$8, %cl
	je	.LBB410_18
# %bb.16:                               # %"$6.i90"
	subq	$32, %rsp
	movq	%r12, %rcx
	movq	%rbx, %rdx
	callq	nameErr
	.p2align	4, 0x90
.LBB410_17:                             # %"$8.i93"
                                        #   in Loop: Header=BB410_18 Depth=1
	movq	8(%rcx), %rcx
.LBB410_18:                             # %"$8.i93"
                                        # =>This Inner Loop Header: Depth=1
	testb	$6, %cl
	je	.LBB410_17
# %bb.19:                               # %xName.exit95
	movl	$1, %eax
	testb	$4, %cl
	movq	%rcx, %rdx
	je	.LBB410_22
# %bb.20:                               # %"$3.i.i.preheader"
	movl	$1, %eax
	movq	%rcx, %rdx
	.p2align	4, 0x90
.LBB410_21:                             # %"$3.i.i"
                                        # =>This Inner Loop Header: Depth=1
	addq	$8, %rax
	movq	4(%rdx), %rdx
	testb	$4, %dl
	jne	.LBB410_21
.LBB410_22:                             # %"$4.i.i"
	shrq	$4, %rdx
	je	.LBB410_24
	.p2align	4, 0x90
.LBB410_23:                             # %"$6.i.i"
                                        # =>This Inner Loop Header: Depth=1
	incq	%rax
	shrq	$8, %rdx
	jne	.LBB410_23
.LBB410_24:                             # %bufSize.exit.i
	testb	$2, %cl
	jne	.LBB410_25
# %bb.26:                               # %"$3.i21"
	movq	-4(%rcx), %rdx
	movq	%rdx, %rdi
	shrq	$8, %rdi
	cmpb	$126, %dl
	jne	.LBB410_28
	jmp	.LBB410_33
.LBB410_25:                             # %"$2.i20"
	movq	%rcx, %rdx
	shrq	$4, %rdx
	movq	%rcx, %rdi
	shrq	$12, %rdi
	cmpb	$126, %dl
	je	.LBB410_33
.LBB410_28:                             # %"$4.i22"
	cmpb	$64, %dl
	je	.LBB410_32
# %bb.29:                               # %"$4.i22"
	cmpb	$43, %dl
	jne	.LBB410_35
# %bb.30:                               # %"$9.i"
	cmpb	$126, %dil
	je	.LBB410_33
# %bb.31:                               # %"$9.i"
	cmpb	$64, %dil
	jne	.LBB410_35
.LBB410_32:                             # %"$11.i"
	movq	($PilLen)(%rip), %rdx
	jmp	.LBB410_34
.LBB410_66:                             # %"$2.i44"
	movq	%rdi, %rdx
	shrq	$4, %rdx
	movq	%rdi, %rcx
	shrq	$12, %rcx
	cmpb	$126, %dl
	je	.LBB410_74
.LBB410_69:                             # %"$4.i51"
	cmpb	$64, %dl
	je	.LBB410_73
# %bb.70:                               # %"$4.i51"
	cmpb	$43, %dl
	jne	.LBB410_76
# %bb.71:                               # %"$9.i52"
	cmpb	$126, %cl
	je	.LBB410_74
# %bb.72:                               # %"$9.i52"
	cmpb	$64, %cl
	jne	.LBB410_76
.LBB410_73:                             # %"$11.i53"
	movq	($PilLen)(%rip), %rcx
	jmp	.LBB410_75
.LBB410_33:                             # %"$17.i"
	movq	($UsrLen)(%rip), %rdx
.LBB410_34:                             # %pathSize.exit
	leaq	-1(%rax,%rdx), %rax
.LBB410_35:                             # %pathSize.exit
	addq	$15, %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	subq	$32, %rsp
	movq	%rsi, %rdx
	callq	pathString
	addq	$32, %rsp
	leaq	1(%rsi), %rdi
	cmpb	$43, (%rsi)
	cmovneq	%rsi, %rdi
	jne	.LBB410_36
# %bb.39:                               # %"$23.us.preheader"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	openRdWrAppend
	addq	$32, %rsp
	movl	%eax, %esi
	testl	%eax, %eax
	jns	.LBB410_48
	jmp	.LBB410_40
	.p2align	4, 0x90
.LBB410_43:                             # %"$32.us"
                                        #   in Loop: Header=BB410_40 Depth=1
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	openRdWrAppend
	addq	$32, %rsp
	testl	%eax, %eax
	jns	.LBB410_47
.LBB410_40:                             # %"$27.us"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	callq	gErrno
	addq	$32, %rsp
	cmpl	$2, %eax
	jne	.LBB410_38
# %bb.41:                               # %"$30.us"
                                        #   in Loop: Header=BB410_40 Depth=1
	cmpl	$0, ($Signal)(%rip)
	je	.LBB410_43
# %bb.42:                               # %"$31.us"
                                        #   in Loop: Header=BB410_40 Depth=1
	subq	$32, %rsp
	movq	%r12, %rcx
	callq	sighandler
	addq	$32, %rsp
	jmp	.LBB410_43
.LBB410_36:                             # %"$23.preheader"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	openRd
	addq	$32, %rsp
	movl	%eax, %esi
	testl	%eax, %eax
	jns	.LBB410_48
	jmp	.LBB410_37
	.p2align	4, 0x90
.LBB410_46:                             # %"$32"
                                        #   in Loop: Header=BB410_37 Depth=1
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	openRd
	addq	$32, %rsp
	testl	%eax, %eax
	jns	.LBB410_47
.LBB410_37:                             # %"$27"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	callq	gErrno
	addq	$32, %rsp
	cmpl	$2, %eax
	jne	.LBB410_38
# %bb.44:                               # %"$30"
                                        #   in Loop: Header=BB410_37 Depth=1
	cmpl	$0, ($Signal)(%rip)
	je	.LBB410_46
# %bb.45:                               # %"$31"
                                        #   in Loop: Header=BB410_37 Depth=1
	subq	$32, %rsp
	movq	%r12, %rcx
	callq	sighandler
	addq	$32, %rsp
	jmp	.LBB410_46
.LBB410_47:
	movl	%eax, %esi
.LBB410_48:                             # %"$28"
	subq	$32, %rsp
	movl	%esi, %ecx
	callq	fcntlCloExec
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB410_112
# %bb.49:                               # %closeOnExec.exit87
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	strdup
	movl	%esi, %ecx
	movq	%rax, %rdx
	callq	initInFile
	addq	$32, %rsp
	movq	($InFile)(%rip), %rcx
	testq	%rcx, %rcx
	je	.LBB410_51
# %bb.50:                               # %"$2.i24"
	movl	($Chr)(%rip), %edx
	movl	%edx, 12(%rcx)
.LBB410_51:                             # %"$3.i26"
	movq	env+32(%rip), %rcx
	movq	%rcx, (%r13)
	movl	$1, %edi
	jmp	.LBB410_109
.LBB410_74:                             # %"$17.i54"
	movq	($UsrLen)(%rip), %rcx
.LBB410_75:                             # %pathSize.exit55
	leaq	-1(%rax,%rcx), %rax
.LBB410_76:                             # %pathSize.exit55
	addq	$15, %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	pathString
	addq	$32, %rsp
	movq	(%rbp), %rdi                    # 8-byte Reload
	movq	%rsi, (%rdi)
	movq	8(%rbx), %rsi
	testb	$15, %sil
	je	.LBB410_77
.LBB410_94:                             # %"$40"
	movq	$0, 8(%rdi)
	subq	$32, %rsp
	callq	fork
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB410_95
# %bb.101:                              # %"$42"
	je	.LBB410_102
# %bb.105:                              # %"$41"
	movl	%eax, %edi
	movl	(%r14), %esi
	subq	$32, %rsp
	movl	%eax, %ecx
	xorl	%edx, %edx
	callq	setpgid
	addq	$32, %rsp
	movl	4(%r14), %ecx
	subq	$32, %rsp
	callq	close
	movl	%esi, %ecx
	callq	fcntlCloExec
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB410_112
# %bb.106:                              # %closeOnExec.exit
	subq	$32, %rsp
	movl	%esi, %ecx
	xorl	%edx, %edx
	callq	initInFile
	addq	$32, %rsp
	movq	($InFile)(%rip), %rcx
	testq	%rcx, %rcx
	je	.LBB410_108
# %bb.107:                              # %"$2.i65"
	movl	($Chr)(%rip), %edx
	movl	%edx, 12(%rcx)
.LBB410_108:                            # %"$3.i67"
	movq	env+32(%rip), %rcx
	movq	%rcx, (%r13)
	jmp	.LBB410_109
.LBB410_77:                             # %"$39.preheader"
	movq	(%rbp), %rdi                    # 8-byte Reload
	jmp	.LBB410_78
	.p2align	4, 0x90
.LBB410_92:                             # %symByte.exit.thread.i
                                        #   in Loop: Header=BB410_78 Depth=1
	movb	$0, (%rdx)
.LBB410_93:                             # %bufString.exit
                                        #   in Loop: Header=BB410_78 Depth=1
	movq	%rax, (%rdi)
	movq	8(%rsi), %rsi
	testb	$15, %sil
	jne	.LBB410_94
.LBB410_78:                             # %"$39"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB410_82 Depth 2
                                        #     Child Loop BB410_86 Depth 2
                                        #     Child Loop BB410_88 Depth 2
                                        #     Child Loop BB410_99 Depth 2
	movq	(%rsi), %rcx
	subq	$32, %rsp
	callq	xSym
	addq	$32, %rsp
	cmpq	%r15, %rax
	jne	.LBB410_80
# %bb.79:                               # %"$4.i58.thread"
                                        #   in Loop: Header=BB410_78 Depth=1
	addq	$8, %rdi
	movl	$1, %eax
	movl	$2, %ebx
	jmp	.LBB410_89
	.p2align	4, 0x90
.LBB410_80:                             # %"$3.i73"
                                        #   in Loop: Header=BB410_78 Depth=1
	movq	-8(%rax), %rbx
	testb	$8, %bl
	jne	.LBB410_81
	.p2align	4, 0x90
# %bb.83:                               # %"$8.i"
                                        #   in Loop: Header=BB410_78 Depth=1
	testb	$6, %bl
	jne	.LBB410_84
.LBB410_82:                             # %"$8.i"
                                        #   Parent Loop BB410_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rbx), %rbx
	testb	$6, %bl
	je	.LBB410_82
.LBB410_84:                             # %xName.exit
                                        #   in Loop: Header=BB410_78 Depth=1
	movl	$1, %eax
	testb	$4, %bl
	movq	%rbx, %rdx
	je	.LBB410_87
# %bb.85:                               # %"$3.i57.preheader"
                                        #   in Loop: Header=BB410_78 Depth=1
	movl	$1, %eax
	movq	%rbx, %rdx
	.p2align	4, 0x90
.LBB410_86:                             # %"$3.i57"
                                        #   Parent Loop BB410_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addq	$8, %rax
	movq	4(%rdx), %rdx
	testb	$4, %dl
	jne	.LBB410_86
.LBB410_87:                             # %"$4.i58"
                                        #   in Loop: Header=BB410_78 Depth=1
	addq	$8, %rdi
	shrq	$4, %rdx
	je	.LBB410_89
	.p2align	4, 0x90
.LBB410_88:                             # %"$6.i"
                                        #   Parent Loop BB410_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	incq	%rax
	shrq	$8, %rdx
	jne	.LBB410_88
.LBB410_89:                             # %bufSize.exit
                                        #   in Loop: Header=BB410_78 Depth=1
	addq	$15, %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	xorl	%ecx, %ecx
	movq	%rax, %rdx
	testq	%rcx, %rcx
	jne	.LBB410_99
	.p2align	4, 0x90
.LBB410_91:                             # %"$2.i.i"
                                        #   in Loop: Header=BB410_78 Depth=1
	cmpq	$2, %rbx
	je	.LBB410_92
# %bb.96:                               # %"$5.i.i"
                                        #   in Loop: Header=BB410_78 Depth=1
	testb	$2, %bl
	jne	.LBB410_97
# %bb.98:                               # %"$7.i.i"
                                        #   in Loop: Header=BB410_78 Depth=1
	movq	-4(%rbx), %rcx
	movq	4(%rbx), %rbx
	jmp	.LBB410_99
	.p2align	4, 0x90
.LBB410_97:                             # %"$8.i.i"
                                        #   in Loop: Header=BB410_78 Depth=1
	movq	%rbx, %rcx
	shrq	$4, %rcx
	movl	$2, %ebx
	.p2align	4, 0x90
.LBB410_99:                             # %symByte.exit.i
                                        #   Parent Loop BB410_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movb	%cl, (%rdx)
	testb	%cl, %cl
	je	.LBB410_93
# %bb.100:                              # %"$3.i62"
                                        #   in Loop: Header=BB410_99 Depth=2
	shrq	$8, %rcx
	incq	%rdx
	testq	%rcx, %rcx
	jne	.LBB410_99
	jmp	.LBB410_91
.LBB410_38:                             # %"$29"
	subq	$32, %rsp
	movq	%r12, %rcx
	movq	%rbx, %rdx
	callq	openErr
.LBB410_112:                            # %"$2.i85"
	subq	$32, %rsp
	callq	strErrno
	leaq	.L$36(%rip), %r8
	movq	%r12, %rcx
	xorl	%edx, %edx
	movq	%rax, %r9
	callq	err
.LBB410_113:                            # %"$36"
	subq	$32, %rsp
	movq	%r12, %rcx
	callq	pipeErr
.LBB410_95:                             # %"$43"
	subq	$32, %rsp
	movq	%r12, %rcx
	callq	forkErr
.LBB410_102:                            # %"$45"
	subq	$32, %rsp
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	callq	setpgid
	addq	$32, %rsp
	movl	(%r14), %ecx
	subq	$32, %rsp
	callq	close
	addq	$32, %rsp
	movl	4(%r14), %esi
	cmpl	$1, %esi
	je	.LBB410_104
# %bb.103:                              # %"$46"
	subq	$32, %rsp
	movl	%esi, %ecx
	movl	$1, %edx
	callq	dup2
	movl	%esi, %ecx
	callq	close
	addq	$32, %rsp
.LBB410_104:                            # %"$47"
	movl	Sig+16(%rip), %ecx
	movq	SigDfl(%rip), %rdx
	subq	$32, %rsp
	callq	signal
	addq	$32, %rsp
	movq	(%rbp), %rsi                    # 8-byte Reload
	movq	(%rsi), %rcx
	subq	$32, %rsp
	movq	%rsi, %rdx
	callq	execvp
	addq	$32, %rsp
	movq	(%rsi), %rcx
	subq	$32, %rsp
	callq	execErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 stdRead;
	.scl	2;
	.type	32;
	.endef
	.globl	stdRead                         # -- Begin function stdRead
	.p2align	4, 0x90
stdRead:                                # @stdRead
.seh_proc stdRead
# %bb.0:                                # %"$1"
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$48, %rsp
	.seh_stackalloc 48
	.seh_endprologue
	movq	%rcx, %r15
	movq	SymTab+504(%rip), %rax
	movq	SymTab+440(%rip), %rsi
	movq	env(%rip), %rcx
	movq	%rsi, 32(%rsp)
	movq	%rcx, 40(%rsp)
	leaq	32(%rsp), %rcx
	movq	%rcx, env(%rip)
	movq	(%rax), %rcx
	movq	8(%rax), %rdi
	jmp	.LBB411_2
	.p2align	4, 0x90
.LBB411_1:                              # %"$11.i20"
                                        #   in Loop: Header=BB411_2 Depth=1
	movq	(%rdi), %rcx
	movq	8(%rdi), %rdi
.LBB411_2:                              # %"$1"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %dil
	jne	.LBB411_5
# %bb.3:                                # %"$3.i18"
                                        #   in Loop: Header=BB411_2 Depth=1
	testb	$15, %cl
	jne	.LBB411_1
# %bb.4:                                # %"$12.i19"
                                        #   in Loop: Header=BB411_2 Depth=1
	callq	evList
	jmp	.LBB411_1
.LBB411_5:                              # %"$5.i16"
	testb	$6, %cl
	jne	.LBB411_9
# %bb.6:                                # %"$7.i"
	testb	$8, %cl
	jne	.LBB411_8
# %bb.7:                                # %"$9.i"
	callq	evList
	movq	%rax, %rcx
	jmp	.LBB411_9
.LBB411_8:                              # %"$10.i17"
	movq	(%rcx), %rcx
.LBB411_9:                              # %runAt.exit
	movq	%rsi, SymTab+440(%rip)
	movq	40(%rsp), %rax
	movq	%rax, env(%rip)
	leaq	SymTab+8(%rip), %r14
	cmpq	%r14, %rcx
	je	.LBB411_27
# %bb.10:                               # %runAt.exit
	movl	%ecx, %eax
	andl	$14, %eax
	cmpl	$8, %eax
	jne	.LBB411_27
# %bb.11:                               # %"$5"
	movq	-8(%rcx), %rsi
	testb	$6, %sil
	jne	.LBB411_13
	.p2align	4, 0x90
.LBB411_12:                             # %"$8"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rsi), %rsi
	testb	$6, %sil
	je	.LBB411_12
.LBB411_13:                             # %"$9"
	movl	$1, %edi
	testb	$4, %sil
	movq	%rsi, %rax
	je	.LBB411_16
# %bb.14:                               # %"$3.i.preheader"
	movl	$1, %edi
	movq	%rsi, %rax
	.p2align	4, 0x90
.LBB411_15:                             # %"$3.i"
                                        # =>This Inner Loop Header: Depth=1
	addq	$8, %rdi
	movq	4(%rax), %rax
	testb	$4, %al
	jne	.LBB411_15
.LBB411_16:                             # %"$4.i"
	shrq	$4, %rax
	je	.LBB411_18
	.p2align	4, 0x90
.LBB411_17:                             # %"$6.i"
                                        # =>This Inner Loop Header: Depth=1
	incq	%rdi
	shrq	$8, %rax
	jne	.LBB411_17
.LBB411_18:                             # %bufSize.exit
	movq	($ReplPrmt)(%rip), %rbx
	movq	%r15, %rcx
	callq	strlen
	leaq	(%rax,%rdi), %rdx
	movq	%rbx, %rcx
	callq	realloc
	testq	%rax, %rax
	je	.LBB411_55
# %bb.19:                               # %alloc.exit
	movq	%rax, %rbx
	movq	%rax, ($ReplPrmt)(%rip)
	xorl	%ecx, %ecx
	testq	%rcx, %rcx
	jne	.LBB411_24
	jmp	.LBB411_20
	.p2align	4, 0x90
.LBB411_25:                             # %"$3.i5"
                                        #   in Loop: Header=BB411_24 Depth=1
	shrq	$8, %rcx
	incq	%rax
	testq	%rcx, %rcx
	jne	.LBB411_24
.LBB411_20:                             # %"$2.i.i"
	cmpq	$2, %rsi
	je	.LBB411_28
# %bb.21:                               # %"$5.i.i"
	testb	$2, %sil
	jne	.LBB411_23
# %bb.22:                               # %"$7.i.i"
	movq	-4(%rsi), %rcx
	movq	4(%rsi), %rsi
	jmp	.LBB411_24
	.p2align	4, 0x90
.LBB411_23:                             # %"$8.i.i"
	movq	%rsi, %rcx
	shrq	$4, %rcx
	movl	$2, %esi
	.p2align	4, 0x90
.LBB411_24:                             # %symByte.exit.i
                                        # =>This Inner Loop Header: Depth=1
	movb	%cl, (%rax)
	testb	%cl, %cl
	jne	.LBB411_25
	jmp	.LBB411_29
.LBB411_27:
	movq	%r15, %rbx
	jmp	.LBB411_30
.LBB411_28:                             # %symByte.exit.thread.i
	movb	$0, (%rax)
.LBB411_29:                             # %bufString.exit
	leaq	-1(%rdi,%rbx), %rcx
	movq	%r15, %rdx
	callq	strcpy
.LBB411_30:                             # %"$6"
	movq	%rbx, ($LinePrmt)(%rip)
	leaq	.L$46(%rip), %rax
	movq	%rax, ($ContPrmt)(%rip)
	movq	($InFile)(%rip), %rax
	xorl	%ecx, %ecx
	cmpb	$0, 4128(%rax)
	movl	$10, %esi
	cmovel	%ecx, %esi
	movl	($Chr)(%rip), %eax
	testl	%eax, %eax
	je	.LBB411_52
# %bb.31:                               # %"$3.i11"
	cmpl	%esi, %eax
	je	.LBB411_33
.LBB411_32:                             # %"$5.i"
	movb	$1, %cl
	callq	read0
	movq	%rax, %r14
	movl	($Chr)(%rip), %esi
.LBB411_33:                             # %read1.exit
	movq	$0, ($ContPrmt)(%rip)
	movq	$0, ($LinePrmt)(%rip)
	jmp	.LBB411_35
	.p2align	4, 0x90
.LBB411_34:                             # %"$21"
                                        #   in Loop: Header=BB411_35 Depth=1
	callq	*($Get)(%rip)
	movl	($Chr)(%rip), %esi
.LBB411_35:                             # %read1.exit
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB411_42 Depth 2
                                        #     Child Loop BB411_47 Depth 2
	testl	%esi, %esi
	jle	.LBB411_54
# %bb.36:                               # %"$14"
                                        #   in Loop: Header=BB411_35 Depth=1
	cmpl	$35, %esi
	je	.LBB411_39
# %bb.37:                               # %"$14"
                                        #   in Loop: Header=BB411_35 Depth=1
	cmpl	$10, %esi
	je	.LBB411_53
# %bb.38:                               # %"$19"
                                        #   in Loop: Header=BB411_35 Depth=1
	cmpl	$32, %esi
	jle	.LBB411_34
	jmp	.LBB411_54
	.p2align	4, 0x90
.LBB411_39:                             # %"$18"
                                        #   in Loop: Header=BB411_35 Depth=1
	callq	*($Get)(%rip)
	cmpl	$123, %eax
	jne	.LBB411_42
# %bb.40:                               # %"$5.preheader.i"
                                        #   in Loop: Header=BB411_35 Depth=1
	callq	*($Get)(%rip)
	testl	%eax, %eax
	js	.LBB411_34
# %bb.41:                               # %"$6.i7.preheader"
                                        #   in Loop: Header=BB411_35 Depth=1
	xorl	%esi, %esi
	jmp	.LBB411_47
	.p2align	4, 0x90
.LBB411_42:                             # %"$17.preheader.i"
                                        #   Parent Loop BB411_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, %eax
	je	.LBB411_34
# %bb.43:                               # %"$17.preheader.i"
                                        #   in Loop: Header=BB411_42 Depth=2
	testl	%eax, %eax
	js	.LBB411_34
# %bb.44:                               # %"$20.i"
                                        #   in Loop: Header=BB411_42 Depth=2
	callq	*($Get)(%rip)
	jmp	.LBB411_42
	.p2align	4, 0x90
.LBB411_45:                             # %"$10.i"
                                        #   in Loop: Header=BB411_47 Depth=2
	incq	%rsi
.LBB411_46:                             # %"$12.i"
                                        #   in Loop: Header=BB411_47 Depth=2
	callq	*($Get)(%rip)
	testl	%eax, %eax
	js	.LBB411_34
.LBB411_47:                             # %"$6.i7"
                                        #   Parent Loop BB411_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$35, %eax
	jne	.LBB411_49
# %bb.48:                               # %"$8.i"
                                        #   in Loop: Header=BB411_47 Depth=2
	callq	*($Get)(%rip)
	cmpl	$123, %eax
	je	.LBB411_45
.LBB411_49:                             # %"$11.i"
                                        #   in Loop: Header=BB411_47 Depth=2
	cmpl	$125, %eax
	jne	.LBB411_46
# %bb.50:                               # %"$14.i"
                                        #   in Loop: Header=BB411_47 Depth=2
	callq	*($Get)(%rip)
	cmpl	$35, %eax
	jne	.LBB411_46
# %bb.51:                               # %"$13.i"
                                        #   in Loop: Header=BB411_47 Depth=2
	decq	%rsi
	jns	.LBB411_46
	jmp	.LBB411_34
.LBB411_52:                             # %"$2.i10"
	callq	*($Get)(%rip)
	movl	($Chr)(%rip), %eax
	cmpl	%esi, %eax
	jne	.LBB411_32
	jmp	.LBB411_33
.LBB411_53:                             # %"$17"
	movl	$0, ($Chr)(%rip)
.LBB411_54:                             # %"$15"
	movq	%r14, %rax
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	retq
.LBB411_55:                             # %"$2.i"
	leaq	.L$3(%rip), %rcx
	xorl	%edx, %edx
	callq	giveup
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 stdEval;
	.scl	2;
	.type	32;
	.endef
	.globl	stdEval                         # -- Begin function stdEval
	.p2align	4, 0x90
stdEval:                                # @stdEval
.seh_proc stdEval
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %r14
	movl	($OutFDs)(%rip), %edi
	testl	%edi, %edi
	jle	.LBB412_6
# %bb.1:                                # %"$3.i5.preheader"
	movq	($OutFiles)(%rip), %rbx
	xorl	%esi, %esi
	jmp	.LBB412_2
	.p2align	4, 0x90
.LBB412_5:                              # %flush.exit.i9
                                        #   in Loop: Header=BB412_2 Depth=1
	incq	%rsi
	cmpl	%esi, %edi
	jle	.LBB412_6
.LBB412_2:                              # %"$3.i5"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rbx,%rsi,8), %rdx
	testq	%rdx, %rdx
	je	.LBB412_5
# %bb.3:                                # %"$3.i.i7"
                                        #   in Loop: Header=BB412_2 Depth=1
	movl	4(%rdx), %r8d
	testl	%r8d, %r8d
	je	.LBB412_5
# %bb.4:                                # %"$6.i.i8"
                                        #   in Loop: Header=BB412_2 Depth=1
	movl	$0, 4(%rdx)
	movl	(%rdx), %ecx
	addq	$8, %rdx
	subq	$32, %rsp
	callq	wrBytes
	addq	$32, %rsp
	jmp	.LBB412_5
.LBB412_6:                              # %flushAll.exit10
	movq	SymTab+440(%rip), %rbx
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%rbx, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r15, env(%rip)
	testb	$6, %r14b
	jne	.LBB412_10
# %bb.7:                                # %"$3"
	testb	$8, %r14b
	jne	.LBB412_8
# %bb.9:                                # %"$5"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %r14
	jmp	.LBB412_10
.LBB412_8:                              # %"$6"
	movq	(%r14), %r14
.LBB412_10:                             # %"$2"
	movq	SymTab+456(%rip), %rax
	movq	%rax, SymTab+472(%rip)
	movq	%rbx, SymTab+456(%rip)
	movq	%r14, SymTab+440(%rip)
	subq	$32, %rsp
	movb	$45, %cl
	callq	*($Put)(%rip)
	movb	$62, %cl
	callq	*($Put)(%rip)
	movb	$32, %cl
	callq	*($Put)(%rip)
	addq	$32, %rsp
	movl	($OutFDs)(%rip), %ebx
	testl	%ebx, %ebx
	jle	.LBB412_16
# %bb.11:                               # %"$3.i2.preheader"
	movq	($OutFiles)(%rip), %rsi
	xorl	%edi, %edi
	jmp	.LBB412_12
	.p2align	4, 0x90
.LBB412_15:                             # %flush.exit.i
                                        #   in Loop: Header=BB412_12 Depth=1
	incq	%rdi
	cmpl	%edi, %ebx
	jle	.LBB412_16
.LBB412_12:                             # %"$3.i2"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi,%rdi,8), %rdx
	testq	%rdx, %rdx
	je	.LBB412_15
# %bb.13:                               # %"$3.i.i"
                                        #   in Loop: Header=BB412_12 Depth=1
	movl	4(%rdx), %r8d
	testl	%r8d, %r8d
	je	.LBB412_15
# %bb.14:                               # %"$6.i.i"
                                        #   in Loop: Header=BB412_12 Depth=1
	movl	$0, 4(%rdx)
	movl	(%rdx), %ecx
	addq	$8, %rdx
	subq	$32, %rsp
	callq	wrBytes
	addq	$32, %rsp
	jmp	.LBB412_15
.LBB412_16:                             # %flushAll.exit
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	print
	movb	$10, %cl
	callq	*($Put)(%rip)
	addq	$32, %rsp
	movq	8(%r15), %rax
	movq	%rax, env(%rip)
	movq	%r14, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 read0;
	.scl	2;
	.type	32;
	.endef
	.globl	read0                           # -- Begin function read0
	.p2align	4, 0x90
read0:                                  # @read0
.seh_proc read0
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movl	%ecx, %ebx
	jmp	.LBB413_2
	.p2align	4, 0x90
.LBB413_1:                              # %comment.exit.i
                                        #   in Loop: Header=BB413_2 Depth=1
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
.LBB413_2:                              # %"$1"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB413_3 Depth 2
                                        #     Child Loop BB413_9 Depth 2
                                        #     Child Loop BB413_14 Depth 2
	movl	($Chr)(%rip), %eax
	testl	%eax, %eax
	js	.LBB413_19
.LBB413_3:                              # %"$5.i"
                                        #   Parent Loop BB413_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$32, %eax
	jg	.LBB413_5
# %bb.4:                                # %"$6.i"
                                        #   in Loop: Header=BB413_3 Depth=2
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
                                        # kill: def $eax killed $eax def $rax
	testl	%eax, %eax
	jns	.LBB413_3
	jmp	.LBB413_19
	.p2align	4, 0x90
.LBB413_5:                              # %"$7.i"
                                        #   in Loop: Header=BB413_2 Depth=1
	cmpl	$35, %eax
	jne	.LBB413_19
# %bb.6:                                # %"$11.i"
                                        #   in Loop: Header=BB413_2 Depth=1
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	cmpl	$123, %eax
	jne	.LBB413_9
# %bb.7:                                # %"$5.preheader.i.i"
                                        #   in Loop: Header=BB413_2 Depth=1
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB413_1
# %bb.8:                                # %"$6.i.i.preheader"
                                        #   in Loop: Header=BB413_2 Depth=1
	xorl	%esi, %esi
	jmp	.LBB413_14
	.p2align	4, 0x90
.LBB413_9:                              # %"$17.preheader.i.i"
                                        #   Parent Loop BB413_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, %eax
	je	.LBB413_1
# %bb.10:                               # %"$17.preheader.i.i"
                                        #   in Loop: Header=BB413_9 Depth=2
	testl	%eax, %eax
	js	.LBB413_1
# %bb.11:                               # %"$20.i.i"
                                        #   in Loop: Header=BB413_9 Depth=2
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	jmp	.LBB413_9
	.p2align	4, 0x90
.LBB413_12:                             # %"$10.i.i"
                                        #   in Loop: Header=BB413_14 Depth=2
	incq	%rsi
.LBB413_13:                             # %"$12.i.i"
                                        #   in Loop: Header=BB413_14 Depth=2
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB413_1
.LBB413_14:                             # %"$6.i.i"
                                        #   Parent Loop BB413_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$35, %eax
	jne	.LBB413_16
# %bb.15:                               # %"$8.i.i"
                                        #   in Loop: Header=BB413_14 Depth=2
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	cmpl	$123, %eax
	je	.LBB413_12
.LBB413_16:                             # %"$11.i.i"
                                        #   in Loop: Header=BB413_14 Depth=2
	cmpl	$125, %eax
	jne	.LBB413_13
# %bb.17:                               # %"$14.i.i"
                                        #   in Loop: Header=BB413_14 Depth=2
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	cmpl	$35, %eax
	jne	.LBB413_13
# %bb.18:                               # %"$13.i.i"
                                        #   in Loop: Header=BB413_14 Depth=2
	decq	%rsi
	jns	.LBB413_13
	jmp	.LBB413_1
.LBB413_19:                             # %skip.exit
	testb	$1, %bl
	je	.LBB413_22
# %bb.20:                               # %"$3"
	movq	($InFile)(%rip), %rcx
	movl	16(%rcx), %edx
	movl	%edx, 20(%rcx)
	testl	%eax, %eax
	jns	.LBB413_23
# %bb.21:
	leaq	SymTab+8(%rip), %rsi
	jmp	.LBB413_64
.LBB413_22:                             # %"$3.thread"
	testl	%eax, %eax
	js	.LBB413_59
.LBB413_23:                             # %"$5"
	addl	$-34, %eax
	cmpl	$92, %eax
	ja	.LBB413_44
# %bb.24:                               # %"$5"
	leaq	.LJTI413_0(%rip), %rcx
	movslq	(%rcx,%rax,4), %rax
	addq	%rcx, %rax
	jmpq	*%rax
.LBB413_25:                             # %"$36"
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	subq	$32, %rsp
	cmpl	$34, %eax
	jne	.LBB413_55
# %bb.26:                               # %"$37"
	callq	*($Get)(%rip)
	addq	$32, %rsp
	leaq	SymTab+8(%rip), %rsi
	jmp	.LBB413_64
.LBB413_27:                             # %"$10"
	subq	$32, %rsp
	callq	rdList
	addq	$32, %rsp
	movq	%rax, %rsi
	cmpl	$93, ($Chr)(%rip)
	jne	.LBB413_64
# %bb.28:                               # %"$10"
	testb	$1, %bl
	jne	.LBB413_54
	jmp	.LBB413_64
.LBB413_29:                             # %"$29"
	subq	$32, %rsp
	callq	*($Get)(%rip)
	movl	%ebx, %ecx
	callq	read0
	addq	$32, %rsp
	movq	%rax, %rsi
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rsi, (%rdi)
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rdi, env(%rip)
	testb	$6, %sil
	jne	.LBB413_62
# %bb.30:                               # %"$31"
	testb	$8, %sil
	jne	.LBB413_61
# %bb.31:                               # %"$33"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB413_62
.LBB413_33:                             # %"$21"
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	movq	gcData+8(%rip), %r14
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%r14, (%rdi)
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	gcData+16(%rip), %r15
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%r15, (%rax)
	movq	%rax, %rcx
	orq	$8, %rcx
	movq	%rdi, (%rcx)
	movq	%rax, env(%rip)
	leaq	SymTab+8(%rip), %rax
	movq	%rax, gcData+16(%rip)
	movq	%rax, gcData+8(%rip)
	subq	$32, %rsp
	movl	%ebx, %ecx
	callq	read0
	addq	$32, %rsp
	movq	%rax, %rsi
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, SymTab+776(%rip)
	je	.LBB413_37
# %bb.34:                               # %"$23"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rsi, (%rbx)
	movq	%rbx, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rbx, env(%rip)
	subq	$32, %rsp
	leaq	SymTab+776(%rip), %rcx
	movq	%rsi, %rdx
	callq	idxPut
	addq	$32, %rsp
	testb	$15, %al
	jne	.LBB413_36
# %bb.35:                               # %"$25"
	movq	(%rax), %rsi
.LBB413_36:                             # %"$27"
	movq	8(%rbx), %rax
	movq	%rax, env(%rip)
.LBB413_37:                             # %"$24"
	movq	%r15, gcData+16(%rip)
	movq	%r14, gcData+8(%rip)
.LBB413_62:                             # %"$4"
	movq	8(%rdi), %rax
.LBB413_63:                             # %"$4"
	movq	%rax, env(%rip)
	jmp	.LBB413_64
.LBB413_38:                             # %"$48"
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	cmpl	$125, %eax
	jne	.LBB413_45
# %bb.39:                               # %"$49"
	subq	$32, %rsp
	leaq	SymTab+8(%rip), %rdx
	movl	$2, %ecx
	callq	consSym
	jmp	.LBB413_53
.LBB413_40:                             # %"$15"
	subq	$32, %rsp
	callq	rdList
	addq	$32, %rsp
	movq	%rax, %rsi
	cmpl	$93, ($Chr)(%rip)
	je	.LBB413_54
# %bb.41:                               # %"$16"
	subq	$32, %rsp
	leaq	.L$43(%rip), %r8
	xorl	%ecx, %ecx
	movq	%rsi, %rdx
	xorl	%r9d, %r9d
	callq	err
.LBB413_42:                             # %"$19"
	subq	$32, %rsp
	callq	*($Get)(%rip)
	movl	%ebx, %ecx
	callq	read0
	addq	$32, %rsp
	leaq	SymTab+264(%rip), %rcx
	movq	%rax, %rdx
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	cons                            # TAILCALL
.LBB413_43:                             # %"$69"
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
.LBB413_44:                             # %"$70"
	movl	($Chr)(%rip), %esi
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	movl	%esi, %ecx
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	rdAtom                          # TAILCALL
.LBB413_45:                             # %"$52.preheader"
	xorl	%esi, %esi
	cmpl	$64, %eax
	jl	.LBB413_49
# %bb.46:                               # %"$53.preheader"
	xorl	%esi, %esi
	.p2align	4, 0x90
.LBB413_47:                             # %"$53"
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$80, %eax
	jge	.LBB413_65
# %bb.48:                               # %"$56"
                                        #   in Loop: Header=BB413_47 Depth=1
	shll	$4, %esi
	addl	$-64, %eax
	orl	%eax, %esi
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	cmpl	$63, %eax
	jg	.LBB413_47
.LBB413_49:                             # %"$57.preheader"
	xorl	%edi, %edi
	.p2align	4, 0x90
.LBB413_50:                             # %"$57"
                                        # =>This Inner Loop Header: Depth=1
	movl	%eax, %ecx
	andl	$-8, %ecx
	cmpl	$48, %ecx
	jne	.LBB413_65
# %bb.51:                               # %"$61"
                                        #   in Loop: Header=BB413_50 Depth=1
	movq	%rdi, %rcx
	shlq	$3, %rcx
	addl	$-48, %eax
	movslq	%eax, %rdi
	orq	%rcx, %rdi
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	cmpl	$125, %eax
	jne	.LBB413_50
# %bb.52:                               # %"$63"
	movl	%edi, %eax
	andl	$1048575, %eax                  # imm = 0xFFFFF
	movzbl	%sil, %ecx
	shll	$20, %ecx
	movl	%edi, %edx
	andl	$-1048576, %edx                 # imm = 0xFFF00000
	shlq	$8, %rdx
	shrl	$8, %esi
	shlq	$40, %rsi
	orq	%rcx, %rsi
	orq	%rax, %rsi
	shlq	$16, %rdi
	movabsq	$1152640029630136320, %rcx      # imm = 0xFFF000000000000
	andq	%rdi, %rcx
	orq	%rsi, %rcx
	orq	%rdx, %rcx
	shlq	$4, %rcx
	orq	$2, %rcx
	subq	$32, %rsp
	callq	extern
.LBB413_53:                             # %"$51"
	addq	$32, %rsp
	movq	%rax, %rsi
.LBB413_54:                             # %"$13"
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
.LBB413_64:                             # %"$4"
	movq	%rsi, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB413_55:                             # %"$38"
	movl	%eax, %ecx
	callq	testEsc
	addq	$32, %rsp
	testb	$1, %al
	je	.LBB413_59
# %bb.56:                               # %"$41"
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	$4, (%rdi)
	leaq	16(%rdi), %rax
	movq	$2, 16(%rdi)
	movq	env(%rip), %rcx
	movq	%rcx, 24(%rdi)
	movq	%rax, env(%rip)
	.p2align	4, 0x90
.LBB413_57:                             # %"$42"
                                        # =>This Inner Loop Header: Depth=1
	movl	($Chr)(%rip), %ecx
	subq	$32, %rsp
	movq	%rdi, %rdx
	callq	charSym
	callq	*($Get)(%rip)
	addq	$32, %rsp
	subq	$32, %rsp
	cmpl	$34, %eax
	je	.LBB413_60
# %bb.58:                               # %"$43"
                                        #   in Loop: Header=BB413_57 Depth=1
	movl	%eax, %ecx
	callq	testEsc
	addq	$32, %rsp
	testb	$1, %al
	jne	.LBB413_57
.LBB413_59:                             # %"$7"
	subq	$32, %rsp
	callq	eofErr
.LBB413_60:                             # %"$44"
	callq	*($Get)(%rip)
	addq	$32, %rsp
	movq	16(%rdi), %r8
	subq	$48, %rsp
	leaq	SymTab+8(%rip), %rax
	movq	%rax, 32(%rsp)
	movb	$0, 40(%rsp)
	leaq	gcData+8(%rip), %r9
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	callq	intern
	addq	$48, %rsp
	movq	%rax, %rsi
	movq	24(%rdi), %rax
	jmp	.LBB413_63
.LBB413_61:                             # %"$34"
	movq	(%rsi), %rsi
	jmp	.LBB413_62
.LBB413_65:                             # %"$55"
	subq	$32, %rsp
	callq	badInput
	int3
	.p2align	2, 0x90
.LJTI413_0:
	.long	.LBB413_25-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_42-.LJTI413_0
	.long	.LBB413_27-.LJTI413_0
	.long	.LBB413_65-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_33-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_40-.LJTI413_0
	.long	.LBB413_43-.LJTI413_0
	.long	.LBB413_65-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_29-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_38-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_44-.LJTI413_0
	.long	.LBB413_65-.LJTI413_0
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 popInFiles;
	.scl	2;
	.type	32;
	.endef
	.globl	popInFiles                      # -- Begin function popInFiles
	.p2align	4, 0x90
popInFiles:                             # @popInFiles
.seh_proc popInFiles
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$48, %rsp
	.seh_stackalloc 48
	.seh_endprologue
	movq	env+32(%rip), %rbx
	movq	8(%rbx), %rsi
	movl	8(%rsi), %ecx
	testl	%ecx, %ecx
	js	.LBB414_16
# %bb.1:                                # %"$2"
	cmpl	$0, 24(%rbx)
	je	.LBB414_2
# %bb.3:                                # %"$5"
	callq	close
	movslq	8(%rsi), %rax
	cmpl	%eax, ($InFDs)(%rip)
	jle	.LBB414_8
# %bb.4:                                # %"$2.i"
	movq	($InFiles)(%rip), %rcx
	movq	(%rcx,%rax,8), %rsi
	cmpq	($InFile)(%rip), %rsi
	jne	.LBB414_6
# %bb.5:                                # %"$4.i"
	movq	(%rcx), %rax
	movq	%rax, ($InFile)(%rip)
	movl	12(%rax), %eax
	movl	%eax, ($Chr)(%rip)
.LBB414_6:                              # %"$5.i"
	testq	%rsi, %rsi
	je	.LBB414_8
# %bb.7:                                # %"$6.i"
	movq	(%rsi), %rcx
	callq	free
	movq	$0, (%rsi)
	movl	$-1, 8(%rsi)
.LBB414_8:                              # %closeInFile.exit
	movl	24(%rbx), %esi
	cmpl	$2, %esi
	jl	.LBB414_16
# %bb.9:                                # %"$7"
	leaq	44(%rsp), %rdx
	movl	%esi, %ecx
	xorl	%r8d, %r8d
	callq	waitpid
	testl	%eax, %eax
	js	.LBB414_10
.LBB414_15:                             # %waitFile.exit
	movslq	44(%rsp), %rax
	shlq	$4, %rax
	orq	$2, %rax
	movq	%rax, SymTab+456(%rip)
	jmp	.LBB414_16
.LBB414_2:                              # %"$4"
	movl	($Chr)(%rip), %eax
	movl	%eax, 12(%rsi)
.LBB414_16:                             # %"$3"
	movq	(%rbx), %rax
	movq	%rax, env+32(%rip)
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
.LBB414_10:                             # %"$3.i.preheader"
	leaq	44(%rsp), %rdi
	jmp	.LBB414_11
	.p2align	4, 0x90
.LBB414_14:                             # %"$8.i"
                                        #   in Loop: Header=BB414_11 Depth=1
	movl	%esi, %ecx
	movq	%rdi, %rdx
	xorl	%r8d, %r8d
	callq	waitpid
	testl	%eax, %eax
	jns	.LBB414_15
.LBB414_11:                             # %"$3.i"
                                        # =>This Inner Loop Header: Depth=1
	callq	gErrno
	cmpl	$2, %eax
	jne	.LBB414_17
# %bb.12:                               # %"$6.i5"
                                        #   in Loop: Header=BB414_11 Depth=1
	cmpl	$0, ($Signal)(%rip)
	je	.LBB414_14
# %bb.13:                               # %"$7.i"
                                        #   in Loop: Header=BB414_11 Depth=1
	xorl	%ecx, %ecx
	callq	sighandler
	jmp	.LBB414_14
.LBB414_17:                             # %"$5.i3"
	callq	closeErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 closeErr;
	.scl	2;
	.type	32;
	.endef
	.globl	closeErr                        # -- Begin function closeErr
	.p2align	4, 0x90
closeErr:                               # @closeErr
.seh_proc closeErr
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	callq	strErrno
	leaq	.L$29(%rip), %r8
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rax, %r9
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 eofErr;
	.scl	2;
	.type	32;
	.endef
	.globl	eofErr                          # -- Begin function eofErr
	.p2align	4, 0x90
eofErr:                                 # @eofErr
.seh_proc eofErr
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	leaq	.L$32(%rip), %r8
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 idxPut;
	.scl	2;
	.type	32;
	.endef
	.globl	idxPut                          # -- Begin function idxPut
	.p2align	4, 0x90
idxPut:                                 # @idxPut
.seh_proc idxPut
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rdx, %rdi
	movq	(%rcx), %rsi
	testb	$15, %sil
	je	.LBB417_1
# %bb.11:                               # %"$3"
	movq	%rcx, %rbx
.LBB417_12:                             # %"$4"
	leaq	SymTab+8(%rip), %rsi
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	cons
	movq	%rax, (%rbx)
	jmp	.LBB417_13
	.p2align	4, 0x90
.LBB417_2:                              # %"$6"
                                        #   in Loop: Header=BB417_1 Depth=1
	movq	8(%rsi), %rbx
	testq	%rax, %rax
	js	.LBB417_3
# %bb.8:                                # %"$10"
                                        #   in Loop: Header=BB417_1 Depth=1
	testb	$15, %bl
	jne	.LBB417_9
# %bb.10:                               # %"$16"
                                        #   in Loop: Header=BB417_1 Depth=1
	movq	(%rbx), %rsi
	testb	$15, %sil
	je	.LBB417_1
	jmp	.LBB417_12
	.p2align	4, 0x90
.LBB417_3:                              # %"$11"
                                        #   in Loop: Header=BB417_1 Depth=1
	testb	$15, %bl
	jne	.LBB417_4
# %bb.6:                                # %"$12"
                                        #   in Loop: Header=BB417_1 Depth=1
	movq	8(%rbx), %rsi
	testb	$15, %sil
	jne	.LBB417_7
.LBB417_1:                              # %"$5.preheader"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rcx
	movq	%rdi, %rdx
	callq	compare
	testq	%rax, %rax
	jne	.LBB417_2
	jmp	.LBB417_13
.LBB417_9:                              # %"$17"
	leaq	SymTab+8(%rip), %rbx
	movq	%rdi, %rcx
	movq	%rbx, %rdx
	callq	cons
	movq	%rax, %rcx
	movq	%rbx, %rdx
	jmp	.LBB417_5
.LBB417_4:                              # %"$13"
	leaq	SymTab+8(%rip), %rbx
	movq	%rdi, %rcx
	movq	%rbx, %rdx
	callq	cons
	movq	%rbx, %rcx
	movq	%rax, %rdx
.LBB417_5:                              # %"$4"
	callq	cons
	movq	%rax, 8(%rsi)
	movq	%rbx, %rsi
	jmp	.LBB417_13
.LBB417_7:                              # %"$15"
	leaq	SymTab+8(%rip), %rsi
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	cons
	movq	%rax, 8(%rbx)
.LBB417_13:                             # %"$4"
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 testEsc;
	.scl	2;
	.type	32;
	.endef
	.globl	testEsc                         # -- Begin function testEsc
	.p2align	4, 0x90
testEsc:                                # @testEsc
.seh_proc testEsc
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	testl	%ecx, %ecx
	js	.LBB418_8
# %bb.1:
	movl	%ecx, %esi
	.p2align	4, 0x90
.LBB418_2:                              # %"$3"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB418_4 Depth 2
	cmpl	$92, %esi
	jne	.LBB418_9
# %bb.3:                                # %"$13"
                                        #   in Loop: Header=BB418_2 Depth=1
	callq	*($Get)(%rip)
	cmpl	$10, %eax
	jne	.LBB418_14
	.p2align	4, 0x90
.LBB418_4:                              # %"$35"
                                        #   Parent Loop BB418_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	callq	*($Get)(%rip)
	cmpl	$9, %eax
	je	.LBB418_4
# %bb.5:                                # %"$35"
                                        #   in Loop: Header=BB418_4 Depth=2
	movl	%eax, %esi
	cmpl	$32, %eax
	je	.LBB418_4
# %bb.6:                                # %"$2.loopexit"
                                        #   in Loop: Header=BB418_2 Depth=1
	testl	%esi, %esi
	jns	.LBB418_2
.LBB418_8:
	xorl	%eax, %eax
	jmp	.LBB418_38
.LBB418_9:                              # %"$3"
	cmpl	$94, %esi
	jne	.LBB418_17
# %bb.10:                               # %"$7"
	movl	$127, %esi
	callq	*($Get)(%rip)
	cmpl	$63, %eax
	je	.LBB418_13
# %bb.11:                               # %"$7"
	cmpl	$64, %eax
	je	.LBB418_39
# %bb.12:                               # %"$11"
	andl	$31, %eax
	movl	%eax, %esi
.LBB418_13:                             # %"$12"
	movl	%esi, ($Chr)(%rip)
	jmp	.LBB418_37
.LBB418_14:                             # %"$13"
	movl	%eax, %esi
	leal	-98(%rsi), %eax
	cmpl	$18, %eax
	ja	.LBB418_26
# %bb.15:                               # %"$13"
	leaq	.LJTI418_0(%rip), %rcx
	movslq	(%rcx,%rax,4), %rax
	addq	%rcx, %rax
	jmpq	*%rax
.LBB418_16:                             # %"$19"
	movl	$8, ($Chr)(%rip)
	jmp	.LBB418_37
.LBB418_17:                             # %"$14"
	cmpl	$128, %esi
	jge	.LBB418_19
# %bb.18:
	movl	%esi, %eax
	movl	%esi, ($Chr)(%rip)
	jmp	.LBB418_37
.LBB418_19:                             # %"$3.i"
	movl	$1114112, %eax                  # imm = 0x110000
	cmpl	$255, %esi
	je	.LBB418_36
# %bb.20:                               # %"$5.i"
	testb	$32, %sil
	jne	.LBB418_31
# %bb.21:                               # %"$7.i"
	andl	$31, %esi
	jmp	.LBB418_35
.LBB418_22:                             # %"$22"
	movl	$13, ($Chr)(%rip)
	jmp	.LBB418_37
.LBB418_23:                             # %"$20"
	movl	$27, ($Chr)(%rip)
	jmp	.LBB418_37
.LBB418_24:                             # %"$21"
	movl	$10, ($Chr)(%rip)
	jmp	.LBB418_37
.LBB418_25:                             # %"$23"
	movl	$9, ($Chr)(%rip)
	jmp	.LBB418_37
.LBB418_26:                             # %"$17"
	movl	%esi, %edi
	addl	$-48, %esi
	cmpl	$9, %esi
	ja	.LBB418_30
# %bb.27:                               # %"$26"
	callq	*($Get)(%rip)
	movl	%esi, %edi
	cmpl	$92, %eax
	je	.LBB418_30
	.p2align	4, 0x90
.LBB418_28:                             # %"$29"
                                        # =>This Inner Loop Header: Depth=1
	movl	($Chr)(%rip), %eax
	addl	$-48, %eax
	cmpl	$10, %eax
	jae	.LBB418_39
# %bb.29:                               # %"$34"
                                        #   in Loop: Header=BB418_28 Depth=1
	leal	(%rdi,%rdi,4), %ecx
	leal	(%rax,%rcx,2), %edi
	callq	*($Get)(%rip)
	cmpl	$92, %eax
	jne	.LBB418_28
.LBB418_30:                             # %"$27"
	movl	%edi, ($Chr)(%rip)
	jmp	.LBB418_37
.LBB418_31:                             # %"$8.i"
	testb	$16, %sil
	jne	.LBB418_33
# %bb.32:                               # %"$10.i"
	andl	$15, %esi
	movl	%esi, %edi
	jmp	.LBB418_34
.LBB418_33:                             # %"$11.i"
	andl	$7, %esi
	shll	$6, %esi
	callq	*($Get)(%rip)
	movl	%eax, %edi
	andl	$63, %edi
	orl	%esi, %edi
.LBB418_34:                             # %"$12.i"
	shll	$6, %edi
	callq	*($Get)(%rip)
	movl	%eax, %esi
	andl	$63, %esi
	orl	%edi, %esi
.LBB418_35:                             # %"$9.i"
	shll	$6, %esi
	callq	*($Get)(%rip)
	andl	$63, %eax
	orl	%esi, %eax
.LBB418_36:                             # %getChar.exit
	movl	%eax, ($Chr)(%rip)
.LBB418_37:                             # %"$4"
	movb	$1, %al
.LBB418_38:                             # %"$4"
                                        # kill: def $al killed $al killed $eax
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
.LBB418_39:                             # %"$8"
	callq	badInput
	int3
	.p2align	2, 0x90
.LJTI418_0:
	.long	.LBB418_16-.LJTI418_0
	.long	.LBB418_26-.LJTI418_0
	.long	.LBB418_26-.LJTI418_0
	.long	.LBB418_23-.LJTI418_0
	.long	.LBB418_26-.LJTI418_0
	.long	.LBB418_26-.LJTI418_0
	.long	.LBB418_26-.LJTI418_0
	.long	.LBB418_26-.LJTI418_0
	.long	.LBB418_26-.LJTI418_0
	.long	.LBB418_26-.LJTI418_0
	.long	.LBB418_26-.LJTI418_0
	.long	.LBB418_26-.LJTI418_0
	.long	.LBB418_24-.LJTI418_0
	.long	.LBB418_26-.LJTI418_0
	.long	.LBB418_26-.LJTI418_0
	.long	.LBB418_26-.LJTI418_0
	.long	.LBB418_22-.LJTI418_0
	.long	.LBB418_26-.LJTI418_0
	.long	.LBB418_25-.LJTI418_0
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 charSym;
	.scl	2;
	.type	32;
	.endef
	.globl	charSym                         # -- Begin function charSym
	.p2align	4, 0x90
charSym:                                # @charSym
.seh_proc charSym
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rdx, %rsi
	movl	%ecx, %edi
	cmpl	$127, %ecx
	jle	.LBB419_9
# %bb.1:                                # %"$3"
	movb	$-1, %cl
	cmpl	$1114112, %edi                  # imm = 0x110000
	je	.LBB419_10
# %bb.2:                                # %"$5"
	movl	%edi, %ecx
	cmpl	$2047, %edi                     # imm = 0x7FF
	jg	.LBB419_4
# %bb.3:                                # %"$9"
	shrl	$6, %ecx
	orb	$-64, %cl
	jmp	.LBB419_8
.LBB419_4:                              # %"$8"
	cmpl	$65535, %edi                    # imm = 0xFFFF
	jg	.LBB419_6
# %bb.5:                                # %"$11"
	shrl	$12, %ecx
	orb	$-32, %cl
	jmp	.LBB419_7
.LBB419_6:                              # %"$10"
	shrl	$18, %ecx
	andb	$7, %cl
	orb	$-16, %cl
                                        # kill: def $cl killed $cl killed $ecx
	movq	%rsi, %rdx
	callq	byteSym
	movl	%edi, %ecx
	shrl	$12, %ecx
	andb	$63, %cl
	orb	$-128, %cl
.LBB419_7:                              # %"$7"
                                        # kill: def $cl killed $cl killed $ecx
	movq	%rsi, %rdx
	callq	byteSym
	movl	%edi, %ecx
	shrl	$6, %ecx
	andb	$63, %cl
	orb	$-128, %cl
.LBB419_8:                              # %"$7"
                                        # kill: def $cl killed $cl killed $ecx
	movq	%rsi, %rdx
	callq	byteSym
	andb	$63, %dil
	orb	$-128, %dil
.LBB419_9:                              # %"$2"
	movl	%edi, %ecx
.LBB419_10:                             # %"$2"
	movq	%rsi, %rdx
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	jmp	byteSym                         # TAILCALL
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 intern;
	.scl	2;
	.type	32;
	.endef
	.globl	intern                          # -- Begin function intern
	.p2align	4, 0x90
intern:                                 # @intern
.seh_proc intern
# %bb.0:                                # %"$1"
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%r9, %r12
	movq	%r8, %r13
	movq	%rdx, %r14
	movq	%rcx, %r15
	movb	136(%rsp), %r8b
	movq	128(%rsp), %rsi
	testb	$2, %r13b
	jne	.LBB420_1
# %bb.44:                               # %"$3"
	movq	8(%r12), %rdi
	testb	$15, %dil
	je	.LBB420_45
	.p2align	4, 0x90
# %bb.72:                               # %"$55"
	testb	$15, %sil
	jne	.LBB420_75
.LBB420_73:                             # %"$3.i102"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rdx
	movq	%r13, %rcx
	callq	isIntern
	testq	%rax, %rax
	jne	.LBB420_79
# %bb.74:                               # %"$6.i104"
                                        #   in Loop: Header=BB420_73 Depth=1
	movq	8(%rsi), %rsi
	testb	$15, %sil
	je	.LBB420_73
.LBB420_75:                             # %"$99"
	testq	%r15, %r15
	jne	.LBB420_77
# %bb.76:                               # %"$101"
	movq	%r13, %rcx
	movq	%r14, %rdx
	callq	consSym
	movq	%rax, %r15
.LBB420_77:                             # %"$102"
	leaq	SymTab+8(%rip), %rdx
	movq	%r15, %rcx
	callq	cons
	movq	%rax, 8(%r12)
	jmp	.LBB420_78
	.p2align	4, 0x90
.LBB420_45:                             # %"$57"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB420_46 Depth 2
                                        #     Child Loop BB420_49 Depth 2
	movq	(%rdi), %rax
	movq	-8(%rax), %rdx
	testb	$6, %dl
	jne	.LBB420_48
	.p2align	4, 0x90
.LBB420_46:                             # %"$59"
                                        #   Parent Loop BB420_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rdx), %rdx
	testb	$6, %dl
	je	.LBB420_46
.LBB420_48:                             # %"$2.i.preheader"
                                        #   in Loop: Header=BB420_45 Depth=1
	movq	%r13, %rbx
	.p2align	4, 0x90
.LBB420_49:                             # %"$2.i"
                                        #   Parent Loop BB420_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-4(%rdx), %rcx
	cmpq	-4(%rbx), %rcx
	setb	%cl
	jne	.LBB420_50
# %bb.55:                               # %"$3.i71"
                                        #   in Loop: Header=BB420_49 Depth=2
	movq	4(%rdx), %rdx
	movq	4(%rbx), %rbx
	testb	$2, %dl
	jne	.LBB420_56
# %bb.63:                               # %"$9.i"
                                        #   in Loop: Header=BB420_49 Depth=2
	testb	$2, %bl
	je	.LBB420_49
	jmp	.LBB420_64
	.p2align	4, 0x90
.LBB420_50:                             # %"$5.i"
                                        #   in Loop: Header=BB420_45 Depth=1
	testb	%cl, %cl
	jne	.LBB420_51
	jmp	.LBB420_64
	.p2align	4, 0x90
.LBB420_56:                             # %"$10.i"
                                        #   in Loop: Header=BB420_45 Depth=1
	testb	$4, %bl
	jne	.LBB420_51
# %bb.57:                               # %"$12.i"
                                        #   in Loop: Header=BB420_45 Depth=1
	cmpq	%rdx, %rbx
	je	.LBB420_6
# %bb.58:                               # %"$14.i"
                                        #   in Loop: Header=BB420_45 Depth=1
	jbe	.LBB420_64
	.p2align	4, 0x90
.LBB420_51:                             # %"$69"
                                        #   in Loop: Header=BB420_45 Depth=1
	movq	8(%rdi), %rbx
	testb	$15, %bl
	jne	.LBB420_52
# %bb.59:                               # %"$70"
                                        #   in Loop: Header=BB420_45 Depth=1
	movq	8(%rbx), %rdi
	testb	$15, %dil
	je	.LBB420_45
	jmp	.LBB420_60
	.p2align	4, 0x90
.LBB420_64:                             # %"$68"
                                        #   in Loop: Header=BB420_45 Depth=1
	movq	8(%rdi), %rbx
	testb	$15, %bl
	jne	.LBB420_65
# %bb.68:                               # %"$84"
                                        #   in Loop: Header=BB420_45 Depth=1
	movq	(%rbx), %rdi
	testb	$15, %dil
	je	.LBB420_45
	jmp	.LBB420_69
.LBB420_1:                              # %"$2"
	movq	(%r12), %rdi
	testb	$15, %dil
	je	.LBB420_2
	.p2align	4, 0x90
# %bb.38:                               # %"$6"
	testb	$15, %sil
	jne	.LBB420_41
.LBB420_39:                             # %"$3.i65"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rdx
	movq	%r13, %rcx
	callq	isIntern
	testq	%rax, %rax
	jne	.LBB420_79
# %bb.40:                               # %"$6.i67"
                                        #   in Loop: Header=BB420_39 Depth=1
	movq	8(%rsi), %rsi
	testb	$15, %sil
	je	.LBB420_39
.LBB420_41:                             # %"$50"
	testq	%r15, %r15
	jne	.LBB420_43
# %bb.42:                               # %"$52"
	movq	%r13, %rcx
	movq	%r14, %rdx
	callq	consSym
	movq	%rax, %r15
.LBB420_43:                             # %"$53"
	leaq	SymTab+8(%rip), %rdx
	movq	%r15, %rcx
	callq	cons
	movq	%rax, (%r12)
	jmp	.LBB420_78
	.p2align	4, 0x90
.LBB420_24:                             # %"$19"
                                        #   in Loop: Header=BB420_2 Depth=1
	testb	$15, %bl
	jne	.LBB420_25
# %bb.31:                               # %"$35"
                                        #   in Loop: Header=BB420_2 Depth=1
	movq	(%rbx), %rdi
	testb	$15, %dil
	jne	.LBB420_32
.LBB420_2:                              # %"$8"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB420_3 Depth 2
	movq	(%rdi), %rax
	movq	-8(%rax), %rdx
	testb	$6, %dl
	jne	.LBB420_5
	.p2align	4, 0x90
.LBB420_3:                              # %"$10"
                                        #   Parent Loop BB420_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rdx), %rdx
	testb	$6, %dl
	je	.LBB420_3
.LBB420_5:                              # %"$11"
                                        #   in Loop: Header=BB420_2 Depth=1
	cmpq	%r13, %rdx
	je	.LBB420_6
# %bb.8:                                # %"$12"
                                        #   in Loop: Header=BB420_2 Depth=1
	movq	8(%rdi), %rbx
	jae	.LBB420_24
# %bb.9:                                # %"$20"
                                        #   in Loop: Header=BB420_2 Depth=1
	testb	$15, %bl
	jne	.LBB420_10
# %bb.17:                               # %"$21"
                                        #   in Loop: Header=BB420_2 Depth=1
	movq	8(%rbx), %rdi
	testb	$15, %dil
	je	.LBB420_2
	jmp	.LBB420_18
	.p2align	4, 0x90
.LBB420_66:                             # %"$3.i88"
                                        #   in Loop: Header=BB420_65 Depth=1
	movq	(%rsi), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rdx
	movq	%r13, %rcx
	callq	isIntern
	testq	%rax, %rax
	jne	.LBB420_79
# %bb.67:                               # %"$6.i90"
                                        #   in Loop: Header=BB420_65 Depth=1
	movq	8(%rsi), %rsi
.LBB420_65:                             # %"$85"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %sil
	je	.LBB420_66
	jmp	.LBB420_28
	.p2align	4, 0x90
.LBB420_70:                             # %"$3.i95"
                                        #   in Loop: Header=BB420_69 Depth=1
	movq	(%rsi), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rdx
	movq	%r13, %rcx
	callq	isIntern
	testq	%rax, %rax
	jne	.LBB420_79
# %bb.71:                               # %"$6.i97"
                                        #   in Loop: Header=BB420_69 Depth=1
	movq	8(%rsi), %rsi
.LBB420_69:                             # %"$92"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %sil
	je	.LBB420_70
.LBB420_35:                             # %"$45"
	testq	%r15, %r15
	jne	.LBB420_37
# %bb.36:                               # %"$47"
	movq	%r13, %rcx
	movq	%r14, %rdx
	callq	consSym
	movq	%rax, %r15
.LBB420_37:                             # %"$48"
	leaq	SymTab+8(%rip), %rdx
	movq	%r15, %rcx
	callq	cons
	movq	%rax, (%rbx)
	jmp	.LBB420_78
	.p2align	4, 0x90
.LBB420_53:                             # %"$3.i74"
                                        #   in Loop: Header=BB420_52 Depth=1
	movq	(%rsi), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rdx
	movq	%r13, %rcx
	callq	isIntern
	testq	%rax, %rax
	jne	.LBB420_79
# %bb.54:                               # %"$6.i76"
                                        #   in Loop: Header=BB420_52 Depth=1
	movq	8(%rsi), %rsi
.LBB420_52:                             # %"$71"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %sil
	je	.LBB420_53
	jmp	.LBB420_13
	.p2align	4, 0x90
.LBB420_61:                             # %"$3.i81"
                                        #   in Loop: Header=BB420_60 Depth=1
	movq	(%rsi), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rdx
	movq	%r13, %rcx
	callq	isIntern
	testq	%rax, %rax
	jne	.LBB420_79
# %bb.62:                               # %"$6.i83"
                                        #   in Loop: Header=BB420_60 Depth=1
	movq	8(%rsi), %rsi
.LBB420_60:                             # %"$78"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %sil
	je	.LBB420_61
.LBB420_21:                             # %"$31"
	testq	%r15, %r15
	jne	.LBB420_23
# %bb.22:                               # %"$33"
	movq	%r13, %rcx
	movq	%r14, %rdx
	callq	consSym
	movq	%rax, %r15
.LBB420_23:                             # %"$34"
	leaq	SymTab+8(%rip), %rdx
	movq	%r15, %rcx
	callq	cons
	movq	%rax, 8(%rbx)
	jmp	.LBB420_78
.LBB420_26:                             # %"$3.i53"
                                        #   in Loop: Header=BB420_25 Depth=1
	movq	(%rsi), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rdx
	movq	%r13, %rcx
	callq	isIntern
	testq	%rax, %rax
	jne	.LBB420_79
# %bb.27:                               # %"$6.i55"
                                        #   in Loop: Header=BB420_25 Depth=1
	movq	8(%rsi), %rsi
.LBB420_25:                             # %"$36"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %sil
	je	.LBB420_26
.LBB420_28:                             # %"$38"
	testq	%r15, %r15
	jne	.LBB420_30
# %bb.29:                               # %"$40"
	movq	%r13, %rcx
	movq	%r14, %rdx
	callq	consSym
	movq	%rax, %r15
.LBB420_30:                             # %"$41"
	leaq	SymTab+8(%rip), %rsi
	movq	%r15, %rcx
	movq	%rsi, %rdx
	callq	cons
	movq	%rax, %rcx
	movq	%rsi, %rdx
	jmp	.LBB420_16
.LBB420_11:                             # %"$3.i"
                                        #   in Loop: Header=BB420_10 Depth=1
	movq	(%rsi), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rdx
	movq	%r13, %rcx
	callq	isIntern
	testq	%rax, %rax
	jne	.LBB420_79
# %bb.12:                               # %"$6.i"
                                        #   in Loop: Header=BB420_10 Depth=1
	movq	8(%rsi), %rsi
.LBB420_10:                             # %"$22"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %sil
	je	.LBB420_11
.LBB420_13:                             # %"$24"
	testq	%r15, %r15
	jne	.LBB420_15
# %bb.14:                               # %"$26"
	movq	%r13, %rcx
	movq	%r14, %rdx
	callq	consSym
	movq	%rax, %r15
.LBB420_15:                             # %"$27"
	leaq	SymTab+8(%rip), %rsi
	movq	%r15, %rcx
	movq	%rsi, %rdx
	callq	cons
	movq	%rsi, %rcx
	movq	%rax, %rdx
.LBB420_16:                             # %"$4"
	callq	cons
	movq	%rax, 8(%rdi)
	jmp	.LBB420_78
.LBB420_34:                             # %"$6.i61"
                                        #   in Loop: Header=BB420_32 Depth=1
	movq	8(%rsi), %rsi
.LBB420_32:                             # %"$43"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %sil
	jne	.LBB420_35
# %bb.33:                               # %"$3.i59"
                                        #   in Loop: Header=BB420_32 Depth=1
	movq	(%rsi), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rdx
	movq	%r13, %rcx
	callq	isIntern
	testq	%rax, %rax
	je	.LBB420_34
	jmp	.LBB420_79
.LBB420_20:                             # %"$6.i49"
                                        #   in Loop: Header=BB420_18 Depth=1
	movq	8(%rsi), %rsi
.LBB420_18:                             # %"$29"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %sil
	jne	.LBB420_21
# %bb.19:                               # %"$3.i47"
                                        #   in Loop: Header=BB420_18 Depth=1
	movq	(%rsi), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rdx
	movq	%r13, %rcx
	callq	isIntern
	testq	%rax, %rax
	je	.LBB420_20
	jmp	.LBB420_79
.LBB420_6:                              # %"$14"
	testb	$1, %r8b
	je	.LBB420_79
# %bb.7:                                # %"$15"
	movq	%r15, (%rdi)
.LBB420_78:                             # %"$4"
	movq	%r15, %rax
.LBB420_79:                             # %"$4"
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 consSym;
	.scl	2;
	.type	32;
	.endef
	.globl	consSym                         # -- Begin function consSym
	.p2align	4, 0x90
consSym:                                # @consSym
.seh_proc consSym
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rdx, %rsi
	movq	%rcx, %rdi
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	jne	.LBB421_5
# %bb.1:                                # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rbx, %rax
	orq	$8, %rax
	testq	%rsi, %rsi
	movq	%rdi, (%rbx)
	movq	%rcx, (%rax)
	je	.LBB421_2
# %bb.3:                                # %"$4"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rsi, (%rax)
	movq	%rax, %rcx
	orq	$8, %rcx
	movq	%rbx, (%rcx)
	jmp	.LBB421_4
.LBB421_2:
	movq	%rbx, %rax
.LBB421_4:                              # %"$6"
	movq	%rax, env(%rip)
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	8(%rbx), %rax
	movq	%rax, env(%rip)
	movq	($Avail)(%rip), %rax
.LBB421_5:                              # %"$3"
	movq	(%rax), %rcx
	movq	%rcx, ($Avail)(%rip)
	movq	%rdi, (%rax)
	orq	$8, %rax
	testq	%rsi, %rsi
	cmoveq	%rax, %rsi
	movq	%rsi, (%rax)
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 badInput;
	.scl	2;
	.type	32;
	.endef
	.globl	badInput                        # -- Begin function badInput
	.p2align	4, 0x90
badInput:                               # @badInput
.seh_proc badInput
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movb	($Chr)(%rip), %al
	movb	%al, 38(%rsp)
	movb	$0, 39(%rsp)
	leaq	.L$33(%rip), %r8
	leaq	38(%rsp), %r9
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 extern;
	.scl	2;
	.type	32;
	.endef
	.globl	extern                          # -- Begin function extern
	.p2align	4, 0x90
extern:                                 # @extern
.seh_proc extern
# %bb.0:                                # %"$1"
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %r13
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	je	.LBB423_3
# %bb.1:                                # %"$3.i"
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.LBB423_3
# %bb.2:                                # %"$4.i"
	cmpq	$0, (%rax)
	jne	.LBB423_4
.LBB423_3:                              # %"$5.i"
	callq	gc
.LBB423_4:                              # %need3.exit
	movabsq	$4611686018427387895, %r15      # imm = 0x3FFFFFFFFFFFFFF7
	movq	($Extern)(%rip), %rbx
	xorl	%edi, %edi
	.p2align	4, 0x90
.LBB423_5:                              # %"$2"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB423_6 Depth 2
	movq	(%rbx), %r12
	movq	-8(%r12), %rcx
	movq	%rcx, %rax
	andq	$-9, %rax
	testb	$6, %cl
	jne	.LBB423_7
	.p2align	4, 0x90
.LBB423_6:                              # %"$4"
                                        #   Parent Loop BB423_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB423_6
.LBB423_7:                              # %"$5"
                                        #   in Loop: Header=BB423_5 Depth=1
	incq	%rdi
	andq	%r15, %rax
	cmpq	%r13, %rax
	je	.LBB423_19
# %bb.8:                                # %"$6"
                                        #   in Loop: Header=BB423_5 Depth=1
	movq	8(%rbx), %rsi
	addq	$8, %rbx
	cmpq	%r13, %rax
	jae	.LBB423_11
# %bb.9:                                # %"$10"
                                        #   in Loop: Header=BB423_5 Depth=1
	testb	$15, %sil
	jne	.LBB423_13
# %bb.10:                               # %"$11"
                                        #   in Loop: Header=BB423_5 Depth=1
	movq	8(%rsi), %rbx
	testb	$15, %bl
	je	.LBB423_5
	jmp	.LBB423_14
	.p2align	4, 0x90
.LBB423_11:                             # %"$9"
                                        #   in Loop: Header=BB423_5 Depth=1
	testb	$15, %sil
	jne	.LBB423_16
# %bb.12:                               # %"$15"
                                        #   in Loop: Header=BB423_5 Depth=1
	movq	(%rsi), %rbx
	testb	$15, %bl
	je	.LBB423_5
	jmp	.LBB423_15
.LBB423_13:                             # %"$12"
	incq	($ExtCnt)(%rip)
	movq	%r13, %rcx
	orq	$8, %rcx
	leaq	SymTab+8(%rip), %r14
	movq	%r14, %rdx
	callq	consSym
	movq	%rax, %r12
	movq	%rax, %rcx
	movq	%r14, %rdx
	callq	cons
	movq	%r14, %rcx
	movq	%rax, %rdx
	jmp	.LBB423_17
.LBB423_14:                             # %"$14"
	addq	$8, %rsi
.LBB423_15:                             # %"$18"
	incq	($ExtCnt)(%rip)
	movq	%r13, %rcx
	orq	$8, %rcx
	leaq	SymTab+8(%rip), %r14
	movq	%r14, %rdx
	callq	consSym
	movq	%rax, %r12
	movq	%rax, %rcx
	movq	%r14, %rdx
	callq	cons
	movq	%rsi, %rbx
	jmp	.LBB423_18
.LBB423_16:                             # %"$16"
	incq	($ExtCnt)(%rip)
	movq	%r13, %rcx
	orq	$8, %rcx
	leaq	SymTab+8(%rip), %r14
	movq	%r14, %rdx
	callq	consSym
	movq	%rax, %r12
	movq	%rax, %rcx
	movq	%r14, %rdx
	callq	cons
	movq	%rax, %rcx
	movq	%r14, %rdx
.LBB423_17:                             # %"$7.sink.split"
	callq	cons
.LBB423_18:                             # %"$7.sink.split"
	movq	%rax, (%rbx)
.LBB423_19:                             # %"$7"
	shrq	%rdi
	movq	($ExtCnt)(%rip), %rax
	movl	%edi, %ecx
	shrq	%cl, %rax
	testq	%rax, %rax
	je	.LBB423_21
.LBB423_20:                             # %"$20"
	movq	%r12, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB423_21:                             # %"$19"
	movq	($Extern)(%rip), %rax
	movq	($ExtSkip)(%rip), %rcx
	incq	%rcx
	cmpq	%rdi, %rcx
	jbe	.LBB423_31
# %bb.22:                               # %"$21"
	movq	$0, ($ExtSkip)(%rip)
	.p2align	4, 0x90
.LBB423_23:                             # %"$33"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB423_24 Depth 2
	movq	(%rax), %rcx
	movq	-8(%rcx), %rbx
	movq	%rbx, %rdx
	andq	$-9, %rdx
	testb	$6, %bl
	jne	.LBB423_25
	.p2align	4, 0x90
.LBB423_24:                             # %"$35"
                                        #   Parent Loop BB423_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rdx), %rdx
	testb	$6, %dl
	je	.LBB423_24
.LBB423_25:                             # %"$36"
                                        #   in Loop: Header=BB423_23 Depth=1
	andq	%r15, %rdx
	cmpq	%r13, %rdx
	je	.LBB423_20
# %bb.26:                               # %"$37"
                                        #   in Loop: Header=BB423_23 Depth=1
	movq	8(%rax), %rdx
	jae	.LBB423_29
# %bb.27:                               # %"$39"
                                        #   in Loop: Header=BB423_23 Depth=1
	movq	8(%rdx), %rbx
	testb	$15, 8(%rbx)
	jne	.LBB423_20
# %bb.28:                               # %"$42"
                                        #   in Loop: Header=BB423_23 Depth=1
	movq	(%rbx), %rdi
	movq	%rcx, (%rbx)
	movq	%rdi, (%rax)
	movq	8(%rbx), %rcx
	movq	(%rcx), %rbx
	movq	8(%rcx), %rax
	movq	%rbx, 8(%rcx)
	movq	(%rdx), %rbx
	movq	%rbx, (%rcx)
	movq	8(%rdx), %rcx
	movq	%rcx, (%rdx)
	movq	%rax, 8(%rdx)
	jmp	.LBB423_23
	.p2align	4, 0x90
.LBB423_29:                             # %"$40"
                                        #   in Loop: Header=BB423_23 Depth=1
	movq	(%rdx), %rbx
	testb	$15, 8(%rbx)
	jne	.LBB423_20
# %bb.30:                               # %"$43"
                                        #   in Loop: Header=BB423_23 Depth=1
	movq	(%rbx), %rdi
	movq	%rcx, (%rbx)
	movq	%rdi, (%rax)
	movq	8(%rbx), %rcx
	movq	(%rcx), %rax
	movq	8(%rcx), %rbx
	movq	%rbx, (%rcx)
	movq	8(%rdx), %rbx
	movq	%rbx, 8(%rcx)
	movq	(%rdx), %rcx
	movq	%rcx, 8(%rdx)
	movq	%rax, (%rdx)
	jmp	.LBB423_23
.LBB423_31:                             # %"$22"
	movq	%rcx, ($ExtSkip)(%rip)
	jmp	.LBB423_33
	.p2align	4, 0x90
.LBB423_32:                             # %"$27"
                                        #   in Loop: Header=BB423_33 Depth=1
	andq	%r15, %rcx
	leaq	8(%rax), %rdx
	cmpq	%r13, %rcx
	cmovaeq	%rax, %rdx
	movq	(%rdx), %rax
	decq	%rdi
	je	.LBB423_23
.LBB423_33:                             # %"$24"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB423_34 Depth 2
	movq	(%rax), %rcx
	movq	8(%rax), %rax
	movq	-8(%rcx), %rdx
	movq	%rdx, %rcx
	andq	$-9, %rcx
	testb	$6, %dl
	jne	.LBB423_32
	.p2align	4, 0x90
.LBB423_34:                             # %"$26"
                                        #   Parent Loop BB423_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rcx), %rcx
	testb	$6, %cl
	je	.LBB423_34
	jmp	.LBB423_32
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 rdAtom;
	.scl	2;
	.type	32;
	.endef
	.globl	rdAtom                          # -- Begin function rdAtom
	.p2align	4, 0x90
rdAtom:                                 # @rdAtom
.seh_proc rdAtom
# %bb.0:                                # %"$1"
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$104, %rsp
	.seh_stackalloc 104
	.seh_endprologue
	movl	%ecx, %esi
	movq	gcData(%rip), %r15
	movq	env(%rip), %rcx
	leaq	80(%rsp), %rax
	movq	%r15, 80(%rsp)
	movq	%rcx, 88(%rsp)
	movq	%rax, env(%rip)
	movq	$4, 48(%rsp)
	movq	$2, 64(%rsp)
	movl	($Chr)(%rip), %ebp
	cmpl	$37, %esi
	jne	.LBB424_4
# %bb.1:                                # %"$1"
	cmpl	$126, %ebp
	jne	.LBB424_4
# %bb.2:                                # %"$4"
	movq	8(%r15), %rax
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB424_30
# %bb.3:                                # %"$7"
	movq	%rax, gcData(%rip)
	callq	*($Get)(%rip)
	movl	%eax, %esi
	callq	*($Get)(%rip)
	movl	%eax, %ebp
	movq	env(%rip), %rax
.LBB424_4:                              # %"$5"
	leaq	64(%rsp), %rcx
	movq	%rax, 72(%rsp)
	movq	%rcx, env(%rip)
	leaq	48(%rsp), %rdx
	movl	%esi, %ecx
	callq	byteSym
	testl	%ebp, %ebp
	js	.LBB424_17
# %bb.5:                                # %"$9.preheader"
	leaq	SymTab+112(%rip), %r12
	leaq	SymTab+8(%rip), %r14
	leaq	SymTab+40(%rip), %r13
	leaq	($Cell)(%rip), %rsi
	leaq	($Delim)(%rip), %rbx
	leaq	48(%rsp), %rdi
	jmp	.LBB424_6
	.p2align	4, 0x90
.LBB424_15:                             # %"$20"
                                        #   in Loop: Header=BB424_6 Depth=1
	movl	%ebp, %ecx
	movq	%rdi, %rdx
	callq	byteSym
.LBB424_16:                             # %"$13"
                                        #   in Loop: Header=BB424_6 Depth=1
	callq	*($Get)(%rip)
	movl	%eax, %ebp
	testl	%eax, %eax
	js	.LBB424_17
.LBB424_6:                              # %"$9"
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$126, %ebp
	jne	.LBB424_12
# %bb.7:                                # %"$11"
                                        #   in Loop: Header=BB424_6 Depth=1
	movq	64(%rsp), %rbp
	movq	%rbp, %rcx
	movq	%r12, %rdx
	callq	isIntern
	testq	%rax, %rax
	jne	.LBB424_9
# %bb.8:                                # %"$3.i"
                                        #   in Loop: Header=BB424_6 Depth=1
	movq	gcData(%rip), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rax
	movq	(%rcx), %rcx
	movq	8(%rcx), %r9
	movq	%rax, 32(%rsp)
	movb	$0, 40(%rsp)
	xorl	%ecx, %ecx
	movq	%r14, %rdx
	movq	%rbp, %r8
	callq	intern
.LBB424_9:                              # %requestSym.exit
                                        #   in Loop: Header=BB424_6 Depth=1
	movq	(%rax), %rcx
	testb	$15, %cl
	jne	.LBB424_31
# %bb.10:                               # %"$15"
                                        #   in Loop: Header=BB424_6 Depth=1
	cmpq	%r13, (%rcx)
	jne	.LBB424_31
# %bb.11:                               # %"$17"
                                        #   in Loop: Header=BB424_6 Depth=1
	movq	%rsi, gcData(%rip)
	movq	%rax, ($Cell)(%rip)
	movq	$4, 48(%rsp)
	movq	$2, 64(%rsp)
	jmp	.LBB424_16
	.p2align	4, 0x90
.LBB424_12:                             # %"$12"
                                        #   in Loop: Header=BB424_6 Depth=1
	movl	$16, %r8d
	movq	%rbx, %rcx
	movl	%ebp, %edx
	callq	memchr
	testq	%rax, %rax
	jne	.LBB424_17
# %bb.13:                               # %"$18"
                                        #   in Loop: Header=BB424_6 Depth=1
	cmpl	$92, %ebp
	jne	.LBB424_15
# %bb.14:                               # %"$19"
                                        #   in Loop: Header=BB424_6 Depth=1
	callq	*($Get)(%rip)
	movl	%eax, %ebp
	jmp	.LBB424_15
.LBB424_17:                             # %"$10"
	movq	64(%rsp), %rsi
	cmpq	$2, %rsi
	je	.LBB424_32
# %bb.18:                               # %"$22"
	movq	gcData(%rip), %rbx
	leaq	($Cell)(%rip), %rax
	cmpq	%rax, %rbx
	jne	.LBB424_20
# %bb.19:                               # %"$25"
	movq	($Cell)(%rip), %rax
	movq	(%rax), %rax
	movq	8(%rax), %r9
	leaq	SymTab+8(%rip), %rdx
	movq	%rdx, 32(%rsp)
	movb	$0, 40(%rsp)
.LBB424_27:                             # %"$21"
	xorl	%ecx, %ecx
.LBB424_28:                             # %"$21"
	movq	%rsi, %r8
	callq	intern
	jmp	.LBB424_29
.LBB424_20:                             # %"$24"
	movq	SymTab+552(%rip), %rdx
	shrq	$4, %rdx
	movq	%rsi, %rcx
	movb	$46, %r8b
	xorl	%r9d, %r9d
	callq	symToNum
	testq	%rax, %rax
	jne	.LBB424_29
# %bb.21:                               # %"$26"
	movq	%rsi, %rcx
	callq	anonymous
	testq	%rax, %rax
	jne	.LBB424_29
# %bb.22:                               # %"$28"
	leaq	SymTab+152(%rip), %rax
	cmpq	%rax, (%rbx)
	jne	.LBB424_25
# %bb.23:                               # %"$31"
	leaq	SymTab+8(%rip), %rdi
	cmpq	%rdi, 8(%rbx)
	jne	.LBB424_25
# %bb.24:                               # %"$33"
	movq	%rsi, %rcx
	movq	%rdi, %rdx
	callq	consSym
	movq	%rdi, 32(%rsp)
	movb	$1, 40(%rsp)
	leaq	SymTab+112(%rip), %r9
	movq	%rax, %rcx
	xorl	%edx, %edx
	jmp	.LBB424_28
.LBB424_25:                             # %"$32"
	leaq	SymTab+112(%rip), %rdx
	movq	%rsi, %rcx
	callq	isIntern
	testq	%rax, %rax
	je	.LBB424_26
.LBB424_29:                             # %"$21"
	movq	%r15, gcData(%rip)
	movq	88(%rsp), %rcx
	movq	%rcx, env(%rip)
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB424_26:                             # %"$3.i14"
	movq	gcData(%rip), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rax
	movq	(%rcx), %rcx
	movq	8(%rcx), %r9
	movq	%rax, 32(%rsp)
	movb	$0, 40(%rsp)
	leaq	SymTab+8(%rip), %rdx
	jmp	.LBB424_27
.LBB424_31:                             # %"$16"
	xorl	%ecx, %ecx
	movq	%rax, %rdx
	callq	symNspErr
.LBB424_32:                             # %"$23"
	callq	badInput
.LBB424_30:                             # %"$6"
	leaq	SymTab+1016(%rip), %rdx
	xorl	%ecx, %ecx
	callq	symNspErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 symNspErr;
	.scl	2;
	.type	32;
	.endef
	.globl	symNspErr                       # -- Begin function symNspErr
	.p2align	4, 0x90
symNspErr:                              # @symNspErr
.seh_proc symNspErr
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	leaq	.L$23(%rip), %r8
	xorl	%r9d, %r9d
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 byteSym;
	.scl	2;
	.type	32;
	.endef
	.globl	byteSym                         # -- Begin function byteSym
	.p2align	4, 0x90
byteSym:                                # @byteSym
.seh_proc byteSym
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rdx, %rsi
	movl	%ecx, %eax
	movq	(%rdx), %rcx
	movq	16(%rdx), %rdx
	testb	$2, %dl
	jne	.LBB426_1
# %bb.6:                                # %"$3"
	movq	8(%rsi), %rdi
	movq	4(%rdi), %rdx
	cmpq	$59, %rcx
	ja	.LBB426_8
# %bb.7:                                # %"$8"
	movzbl	%al, %eax
	shlq	%cl, %rax
	orq	%rax, %rdx
	movq	%rdx, 4(%rdi)
	addq	$8, %rcx
	jmp	.LBB426_12
.LBB426_1:                              # %"$2"
	cmpq	$59, %rcx
	ja	.LBB426_3
# %bb.2:                                # %"$5"
	movzbl	%al, %eax
	shlq	%cl, %rax
	orq	%rax, %rdx
	movq	%rdx, 16(%rsi)
	addq	$8, %rcx
	jmp	.LBB426_12
.LBB426_8:                              # %"$9"
	shrq	$4, %rdx
	movzbl	%al, %ebx
	shlq	$56, %rbx
	orq	%rdx, %rbx
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	jne	.LBB426_10
# %bb.9:                                # %"$2.i2"
	callq	gc
	movq	($Avail)(%rip), %rax
.LBB426_10:                             # %boxNum.exit3
	movq	(%rax), %rcx
	movq	%rcx, ($Avail)(%rip)
	movq	%rbx, (%rax)
	movq	$2, 8(%rax)
	addq	$4, %rax
	movq	%rax, 4(%rdi)
	movq	%rax, 8(%rsi)
	jmp	.LBB426_11
.LBB426_3:                              # %"$6"
	shrq	$4, %rdx
	movzbl	%al, %edi
	shlq	$56, %rdi
	orq	%rdx, %rdi
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	jne	.LBB426_5
# %bb.4:                                # %"$2.i"
	callq	gc
	movq	($Avail)(%rip), %rax
.LBB426_5:                              # %boxNum.exit
	movq	(%rax), %rcx
	movq	%rcx, ($Avail)(%rip)
	movq	%rdi, (%rax)
	movq	$2, 8(%rax)
	addq	$4, %rax
	movq	%rax, 8(%rsi)
	movq	%rax, 16(%rsi)
.LBB426_11:                             # %"$4"
	movl	$4, %ecx
.LBB426_12:                             # %"$4"
	movq	%rcx, (%rsi)
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 isIntern;
	.scl	2;
	.type	32;
	.endef
	.globl	isIntern                        # -- Begin function isIntern
	.p2align	4, 0x90
isIntern:                               # @isIntern
# %bb.0:                                # %"$1"
	testb	$2, %cl
	jne	.LBB427_1
# %bb.8:                                # %"$3"
	movq	8(%rdx), %r8
	testb	$15, %r8b
	je	.LBB427_10
	jmp	.LBB427_24
	.p2align	4, 0x90
.LBB427_16:                             # %select.unfold
                                        #   in Loop: Header=BB427_10 Depth=1
	movq	8(%r8), %rax
	addq	$8, %rax
	movq	(%rax), %r8
	testb	$15, %r8b
	jne	.LBB427_24
.LBB427_10:                             # %"$18"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB427_11 Depth 2
                                        #     Child Loop BB427_14 Depth 2
	movq	(%r8), %rax
	movq	-8(%rax), %r11
	testb	$6, %r11b
	jne	.LBB427_13
	.p2align	4, 0x90
.LBB427_11:                             # %"$22"
                                        #   Parent Loop BB427_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%r11), %r11
	testb	$6, %r11b
	je	.LBB427_11
.LBB427_13:                             # %"$2.i.preheader"
                                        #   in Loop: Header=BB427_10 Depth=1
	movq	%rcx, %r9
	.p2align	4, 0x90
.LBB427_14:                             # %"$2.i"
                                        #   Parent Loop BB427_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-4(%r11), %rdx
	cmpq	-4(%r9), %rdx
	setb	%r10b
	jne	.LBB427_15
# %bb.17:                               # %"$3.i"
                                        #   in Loop: Header=BB427_14 Depth=2
	movq	4(%r11), %r11
	movq	4(%r9), %r9
	testb	$2, %r11b
	jne	.LBB427_18
# %bb.21:                               # %"$9.i"
                                        #   in Loop: Header=BB427_14 Depth=2
	testb	$2, %r9b
	je	.LBB427_14
	jmp	.LBB427_22
	.p2align	4, 0x90
.LBB427_15:                             # %"$5.i"
                                        #   in Loop: Header=BB427_10 Depth=1
	testb	%r10b, %r10b
	jne	.LBB427_16
	jmp	.LBB427_22
	.p2align	4, 0x90
.LBB427_18:                             # %"$10.i"
                                        #   in Loop: Header=BB427_10 Depth=1
	testb	$4, %r9b
	jne	.LBB427_16
# %bb.19:                               # %"$12.i"
                                        #   in Loop: Header=BB427_10 Depth=1
	cmpq	%r11, %r9
	je	.LBB427_25
# %bb.20:                               # %"$14.i"
                                        #   in Loop: Header=BB427_10 Depth=1
	ja	.LBB427_16
	.p2align	4, 0x90
.LBB427_22:                             # %"$24"
                                        #   in Loop: Header=BB427_10 Depth=1
	movq	8(%r8), %rax
	movq	(%rax), %r8
	testb	$15, %r8b
	je	.LBB427_10
.LBB427_24:
	xorl	%eax, %eax
.LBB427_25:                             # %"$4"
	retq
.LBB427_1:                              # %"$5.preheader"
	movq	(%rdx), %r8
	testb	$15, %r8b
	jne	.LBB427_24
	.p2align	4, 0x90
.LBB427_3:                              # %"$6"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB427_4 Depth 2
	movq	(%r8), %rax
	movq	-8(%rax), %rdx
	testb	$6, %dl
	jne	.LBB427_6
	.p2align	4, 0x90
.LBB427_4:                              # %"$10"
                                        #   Parent Loop BB427_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rdx), %rdx
	testb	$6, %dl
	je	.LBB427_4
.LBB427_6:                              # %"$11"
                                        #   in Loop: Header=BB427_3 Depth=1
	cmpq	%rcx, %rdx
	je	.LBB427_25
# %bb.7:                                # %"$12"
                                        #   in Loop: Header=BB427_3 Depth=1
	movq	8(%r8), %r8
	leaq	8(%r8), %rax
	cmpq	%rcx, %rdx
	cmovaeq	%r8, %rax
	movq	(%rax), %r8
	testb	$15, %r8b
	je	.LBB427_3
	jmp	.LBB427_24
                                        # -- End function
	.def	 symToNum;
	.scl	2;
	.type	32;
	.endef
	.globl	symToNum                        # -- Begin function symToNum
	.p2align	4, 0x90
symToNum:                               # @symToNum
.seh_proc symToNum
# %bb.0:                                # %"$1"
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$56, %rsp
	.seh_stackalloc 56
	.seh_endprologue
	movl	%r9d, %r15d
	movl	%r8d, %ebx
	movq	%rdx, %rdi
	movq	%rcx, %rbp
	movq	$2, 32(%rsp)
	xorl	%eax, %eax
	.p2align	4, 0x90
.LBB428_1:                              # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	testq	%rax, %rax
	jne	.LBB428_6
# %bb.2:                                # %"$2.i"
                                        #   in Loop: Header=BB428_1 Depth=1
	cmpq	$2, %rbp
	je	.LBB428_8
# %bb.3:                                # %"$5.i"
                                        #   in Loop: Header=BB428_1 Depth=1
	testb	$2, %bpl
	jne	.LBB428_4
# %bb.5:                                # %"$7.i"
                                        #   in Loop: Header=BB428_1 Depth=1
	movq	-4(%rbp), %rax
	movq	4(%rbp), %rbp
	jmp	.LBB428_6
.LBB428_4:                              # %"$8.i"
                                        #   in Loop: Header=BB428_1 Depth=1
	movq	%rbp, %rax
	shrq	$4, %rax
	movl	$2, %ebp
	.p2align	4, 0x90
.LBB428_6:                              # %symByte.exit
                                        #   in Loop: Header=BB428_1 Depth=1
	movq	%rax, %rcx
	shrq	$8, %rax
	cmpb	$32, %cl
	ja	.LBB428_10
# %bb.7:                                # %"$3"
                                        #   in Loop: Header=BB428_1 Depth=1
	testb	%cl, %cl
	jne	.LBB428_1
	jmp	.LBB428_8
.LBB428_10:                             # %"$4"
	xorl	%r14d, %r14d
	cmpb	$43, %cl
	je	.LBB428_14
# %bb.11:                               # %"$4"
	cmpb	$45, %cl
	jne	.LBB428_12
# %bb.13:                               # %"$-1.fold.split"
	movb	$1, %r14b
.LBB428_14:                             # %"$-1"
	testq	%rax, %rax
	je	.LBB428_15
.LBB428_19:                             # %symByte.exit24
	testb	%al, %al
	je	.LBB428_8
# %bb.20:
	movq	%rax, %rsi
	shrq	$8, %rsi
	jmp	.LBB428_21
.LBB428_12:
	movq	%rax, %rsi
	movl	%ecx, %eax
.LBB428_21:                             # %"$7"
	addb	$-48, %al
	cmpb	$9, %al
	ja	.LBB428_8
# %bb.22:                               # %"$15"
	movq	env(%rip), %rcx
	movq	%rcx, 40(%rsp)
	leaq	32(%rsp), %rcx
	movq	%rcx, env(%rip)
	movzbl	%al, %eax
	shlq	$4, %rax
	orq	$2, %rax
	movq	%rax, 32(%rsp)
	xorl	%r12d, %r12d
.LBB428_23:                             # %"$16.outer150"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB428_24 Depth 2
	testq	%rdi, %rdi
	sete	%cl
	andb	%r12b, %cl
	.p2align	4, 0x90
.LBB428_24:                             # %"$16"
                                        #   Parent Loop BB428_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	testq	%rsi, %rsi
	je	.LBB428_26
# %bb.25:                               #   in Loop: Header=BB428_24 Depth=2
	movq	%rsi, %rdx
	jmp	.LBB428_30
	.p2align	4, 0x90
.LBB428_26:                             # %"$2.i26"
                                        #   in Loop: Header=BB428_24 Depth=2
	cmpq	$2, %rbp
	je	.LBB428_48
# %bb.27:                               # %"$5.i29"
                                        #   in Loop: Header=BB428_24 Depth=2
	testb	$2, %bpl
	jne	.LBB428_28
# %bb.29:                               # %"$7.i31"
                                        #   in Loop: Header=BB428_24 Depth=2
	movq	-4(%rbp), %rdx
	movq	4(%rbp), %rbp
	jmp	.LBB428_30
.LBB428_28:                             # %"$8.i30"
                                        #   in Loop: Header=BB428_24 Depth=2
	movq	%rbp, %rdx
	shrq	$4, %rdx
	movl	$2, %ebp
	.p2align	4, 0x90
.LBB428_30:                             # %symByte.exit33
                                        #   in Loop: Header=BB428_24 Depth=2
	testb	%dl, %dl
	je	.LBB428_48
# %bb.31:                               # %"$17"
                                        #   in Loop: Header=BB428_24 Depth=2
	movq	%rdx, %rsi
	shrq	$8, %rsi
	testb	%cl, %cl
	jne	.LBB428_32
# %bb.43:                               # %"$21"
                                        #   in Loop: Header=BB428_24 Depth=2
	cmpb	%bl, %dl
	je	.LBB428_44
# %bb.45:                               # %"$33"
                                        #   in Loop: Header=BB428_24 Depth=2
	cmpb	%r15b, %dl
	je	.LBB428_24
# %bb.46:                               # %"$38"
                                        #   in Loop: Header=BB428_23 Depth=1
	leal	-48(%rdx), %r13d
	cmpb	$10, %r13b
	jae	.LBB428_33
# %bb.47:                               # %"$40"
                                        #   in Loop: Header=BB428_23 Depth=1
	movq	%rax, %rcx
	callq	tenfold
	movzbl	%r13b, %edx
	shlq	$4, %rdx
	orq	$2, %rdx
	movq	%rax, %rcx
	callq	addu
	movq	%rax, 32(%rsp)
	movzbl	%r12b, %ecx
	andl	$1, %ecx
	subq	%rcx, %rdi
	jmp	.LBB428_23
.LBB428_44:                             # %"$34"
                                        #   in Loop: Header=BB428_23 Depth=1
	testb	$1, %r12b
	movb	$1, %r12b
	je	.LBB428_23
	jmp	.LBB428_33
.LBB428_15:                             # %"$2.i17"
	cmpq	$2, %rbp
	je	.LBB428_8
# %bb.16:                               # %"$5.i20"
	testb	$2, %bpl
	jne	.LBB428_17
# %bb.18:                               # %"$7.i22"
	movq	-4(%rbp), %rax
	movq	4(%rbp), %rbp
	jmp	.LBB428_19
.LBB428_48:                             # %"$18"
	testb	$1, %r12b
	je	.LBB428_51
# %bb.49:                               # %"$45.preheader"
	movq	%rdi, %rcx
	decq	%rcx
	js	.LBB428_51
	.p2align	4, 0x90
.LBB428_50:                             # %"$46"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rcx
	callq	tenfold
	movq	%rax, 32(%rsp)
	decq	%rdi
	testq	%rdi, %rdi
	jg	.LBB428_50
.LBB428_51:                             # %"$44"
	movq	%rax, %rcx
	xorq	$8, %rcx
	cmpq	$2, %rax
	cmoveq	%rax, %rcx
	testb	%r14b, %r14b
	cmoveq	%rax, %rcx
	movq	40(%rsp), %rax
	movq	%rax, env(%rip)
	movq	%rcx, %rax
	jmp	.LBB428_9
.LBB428_32:                             # %"$22"
	leal	-48(%rdx), %ecx
	cmpb	$10, %cl
	jae	.LBB428_33
# %bb.34:                               # %"$24"
	cmpb	$5, %cl
	jb	.LBB428_36
# %bb.35:                               # %"$25"
	movl	$18, %edx
	movq	%rax, %rcx
	callq	addu
	movq	%rax, 32(%rsp)
	.p2align	4, 0x90
.LBB428_36:                             # %"$27"
                                        # =>This Inner Loop Header: Depth=1
	testq	%rsi, %rsi
	jne	.LBB428_41
# %bb.37:                               # %"$2.i35"
                                        #   in Loop: Header=BB428_36 Depth=1
	cmpq	$2, %rbp
	je	.LBB428_51
# %bb.38:                               # %"$5.i38"
                                        #   in Loop: Header=BB428_36 Depth=1
	testb	$2, %bpl
	jne	.LBB428_39
# %bb.40:                               # %"$7.i40"
                                        #   in Loop: Header=BB428_36 Depth=1
	movq	-4(%rbp), %rsi
	movq	4(%rbp), %rbp
	jmp	.LBB428_41
.LBB428_39:                             # %"$8.i39"
                                        #   in Loop: Header=BB428_36 Depth=1
	movq	%rbp, %rsi
	shrq	$4, %rsi
	movl	$2, %ebp
	.p2align	4, 0x90
.LBB428_41:                             # %symByte.exit42
                                        #   in Loop: Header=BB428_36 Depth=1
	testb	%sil, %sil
	je	.LBB428_51
# %bb.42:                               # %"$28"
                                        #   in Loop: Header=BB428_36 Depth=1
	leal	-48(%rsi), %ecx
	shrq	$8, %rsi
	cmpb	$10, %cl
	jb	.LBB428_36
.LBB428_33:                             # %"$23"
	movq	40(%rsp), %rax
	movq	%rax, env(%rip)
.LBB428_8:                              # %"$5"
	xorl	%eax, %eax
.LBB428_9:                              # %"$5"
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB428_17:                             # %"$8.i21"
	movq	%rbp, %rax
	shrq	$4, %rax
	movl	$2, %ebp
	jmp	.LBB428_19
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 anonymous;
	.scl	2;
	.type	32;
	.endef
	.globl	anonymous                       # -- Begin function anonymous
	.p2align	4, 0x90
anonymous:                              # @anonymous
# %bb.0:                                # %"$2.i"
	cmpq	$2, %rcx
	je	.LBB429_5
# %bb.1:                                # %"$5.i"
	testb	$2, %cl
	jne	.LBB429_2
# %bb.3:                                # %"$7.i"
	movq	4(%rcx), %r8
	movq	-4(%rcx), %rcx
	cmpb	$36, %cl
	je	.LBB429_7
	jmp	.LBB429_5
.LBB429_2:                              # %"$8.i"
	shrq	$4, %rcx
	movl	$2, %r8d
	cmpb	$36, %cl
	jne	.LBB429_5
.LBB429_7:                              # %"$3"
	shrq	$8, %rcx
	je	.LBB429_8
.LBB429_12:                             # %symByte.exit20
	leal	-48(%rcx), %eax
	cmpb	$7, %al
	ja	.LBB429_5
# %bb.13:                               # %"$5"
	movzbl	%al, %eax
	shrq	$8, %rcx
	jne	.LBB429_19
	.p2align	4, 0x90
.LBB429_15:                             # %"$2.i4"
	cmpq	$2, %r8
	je	.LBB429_20
# %bb.16:                               # %"$5.i7"
	testb	$2, %r8b
	jne	.LBB429_17
# %bb.18:                               # %"$7.i9"
	movq	-4(%r8), %rcx
	movq	4(%r8), %r8
	jmp	.LBB429_19
	.p2align	4, 0x90
.LBB429_17:                             # %"$8.i8"
	movq	%r8, %rcx
	shrq	$4, %rcx
	movl	$2, %r8d
	.p2align	4, 0x90
.LBB429_19:                             # %symByte.exit11
                                        # =>This Inner Loop Header: Depth=1
	testb	%cl, %cl
	je	.LBB429_20
# %bb.21:                               # %"$7"
                                        #   in Loop: Header=BB429_19 Depth=1
	leal	-48(%rcx), %edx
	cmpb	$7, %dl
	ja	.LBB429_5
# %bb.22:                               # %"$10"
                                        #   in Loop: Header=BB429_19 Depth=1
	movzbl	%dl, %edx
	shlq	$3, %rax
	orq	%rdx, %rax
	shrq	$8, %rcx
	jne	.LBB429_19
	jmp	.LBB429_15
.LBB429_8:                              # %"$2.i13"
	cmpq	$2, %r8
	jne	.LBB429_9
.LBB429_5:
	xorl	%eax, %eax
	retq
.LBB429_20:                             # %"$9"
	shlq	$4, %rax
	orq	$8, %rax
	retq
.LBB429_9:                              # %"$5.i16"
	testb	$2, %r8b
	jne	.LBB429_10
# %bb.11:                               # %"$7.i18"
	movq	-4(%r8), %rcx
	movq	4(%r8), %r8
	jmp	.LBB429_12
.LBB429_10:                             # %"$8.i17"
	movq	%r8, %rcx
	shrq	$4, %rcx
	movl	$2, %r8d
	jmp	.LBB429_12
                                        # -- End function
	.def	 addu;
	.scl	2;
	.type	32;
	.endef
	.globl	addu                            # -- Begin function addu
	.p2align	4, 0x90
addu:                                   # @addu
.seh_proc addu
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rdx, %rdi
	movq	%rcx, %rsi
	testb	$2, %sil
	jne	.LBB430_1
# %bb.8:                                # %"$3"
	testb	$2, %dil
	jne	.LBB430_9
# %bb.20:                               # %"$11"
	movq	-4(%rsi), %rbx
	addq	-4(%rdi), %rbx
	setb	%r12b
	movq	($Avail)(%rip), %r15
	testq	%r15, %r15
	jne	.LBB430_22
# %bb.21:                               # %"$2.i16"
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %r15
.LBB430_22:                             # %boxNum.exit17
	movq	(%r15), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%rbx, (%r15)
	movq	$2, 8(%r15)
	addq	$4, %r15
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdx
	movq	%r15, (%rdx)
	movq	%rdx, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rdx, (%rbp)                    # 8-byte Spill
	movq	%rdx, env(%rip)
	movq	4(%rsi), %rsi
	movq	4(%rdi), %rbx
	testb	$2, %bl
	sete	%al
	testb	$2, %sil
	jne	.LBB430_23
# %bb.30:
	movq	%r15, %r13
	jmp	.LBB430_31
	.p2align	4, 0x90
.LBB430_44:                             # %boxNum.exit26
                                        #   in Loop: Header=BB430_31 Depth=1
	movq	(%rdi), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%r14, (%rdi)
	movq	$2, 8(%rdi)
	addq	$4, %rdi
	movq	%rdi, 4(%r13)
	movq	4(%rsi), %rsi
	movq	4(%rbx), %rbx
	testb	$2, %bl
	sete	%al
	testb	$2, %sil
	movq	%rdi, %r13
	jne	.LBB430_24
.LBB430_31:                             # %"$26"
                                        # =>This Inner Loop Header: Depth=1
	testb	$1, %al
	je	.LBB430_32
# %bb.42:                               # %"$35"
                                        #   in Loop: Header=BB430_31 Depth=1
	movq	-4(%rsi), %r14
	andb	$1, %r12b
	addb	$-1, %r12b
	adcq	-4(%rbx), %r14
	setb	%r12b
	movq	($Avail)(%rip), %rdi
	testq	%rdi, %rdi
	jne	.LBB430_44
# %bb.43:                               # %"$2.i25"
                                        #   in Loop: Header=BB430_31 Depth=1
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rdi
	jmp	.LBB430_44
.LBB430_1:                              # %"$4"
	testb	$2, %dil
	jne	.LBB430_3
# %bb.2:
	movq	%rdi, %rax
	jmp	.LBB430_10
.LBB430_9:
	movq	%rsi, %rax
	movq	%rdi, %rsi
.LBB430_10:                             # %"$-1"
	movq	4(%rax), %rdi
	shrq	$4, %rsi
	movq	-4(%rax), %rbx
	leaq	(%rsi,%rbx), %rcx
	subq	$32, %rsp
	movq	%rdi, %rdx
	callq	consNum
	addq	$32, %rsp
	movq	%rax, %r15
	addq	%rbx, %rsi
	jae	.LBB430_49
# %bb.11:                               # %"$14"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r12
	movq	%r15, (%r12)
	movq	%r12, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r12, env(%rip)
	movq	%r15, %rbx
	.p2align	4, 0x90
.LBB430_12:                             # %"$16"
                                        # =>This Inner Loop Header: Depth=1
	testb	$2, %dil
	jne	.LBB430_13
# %bb.18:                               # %"$17"
                                        #   in Loop: Header=BB430_12 Depth=1
	movq	-4(%rdi), %rsi
	movq	4(%rdi), %rdi
	leaq	1(%rsi), %rcx
	subq	$32, %rsp
	movq	%rdi, %rdx
	callq	consNum
	addq	$32, %rsp
	incq	%rsi
	movq	%rax, 4(%rbx)
	movq	%rax, %rbx
	je	.LBB430_12
# %bb.19:                               # %"$18"
	movq	8(%r12), %rax
	jmp	.LBB430_48
.LBB430_3:                              # %"$5"
	shrq	$4, %rsi
	shrq	$4, %rdi
	addq	%rsi, %rdi
	btq	$60, %rdi
	jae	.LBB430_7
# %bb.4:                                # %"$8"
	movq	($Avail)(%rip), %r15
	testq	%r15, %r15
	jne	.LBB430_6
# %bb.5:                                # %"$2.i"
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %r15
.LBB430_6:                              # %boxNum.exit
	movq	(%r15), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%rdi, (%r15)
	movq	$2, 8(%r15)
	addq	$4, %r15
	jmp	.LBB430_49
.LBB430_13:                             # %"$19"
	addq	$16, %rdi
	jae	.LBB430_17
# %bb.14:                               # %"$21"
	shrq	$4, %rdi
	movabsq	$1152921504606846976, %r14      # imm = 0x1000000000000000
	orq	%rdi, %r14
	movq	($Avail)(%rip), %rdi
	testq	%rdi, %rdi
	jne	.LBB430_16
# %bb.15:                               # %"$2.i13"
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rdi
.LBB430_16:                             # %boxNum.exit14
	movq	(%rdi), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%r14, (%rdi)
	movq	$2, 8(%rdi)
	addq	$4, %rdi
.LBB430_17:                             # %"$22"
	movq	%rdi, 4(%rbx)
	movq	8(%r12), %rax
	jmp	.LBB430_48
.LBB430_23:
	movq	%r15, %rdi
.LBB430_24:                             # %"$28"
	testb	%al, %al
	je	.LBB430_26
# %bb.25:
	movq	%rdi, %r13
	movq	%rbx, %rax
	movq	%rsi, %rbx
	jmp	.LBB430_33
.LBB430_7:                              # %"$9"
	shlq	$4, %rdi
	orq	$2, %rdi
	movq	%rdi, %r15
	jmp	.LBB430_49
.LBB430_26:                             # %"$29"
	shrq	$4, %rsi
	shrq	$4, %rbx
	movzbl	%r12b, %r12d
	addq	%rsi, %r12
	addq	%rbx, %r12
	movabsq	$3458764513820540928, %rax      # imm = 0x3000000000000000
	testq	%rax, %r12
	je	.LBB430_45
# %bb.27:                               # %"$32"
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	jne	.LBB430_29
# %bb.28:                               # %"$2.i19"
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rax
.LBB430_29:                             # %boxNum.exit20
	movq	(%rax), %rcx
	movq	%rcx, ($Avail)(%rip)
	movq	%r12, (%rax)
	movq	$2, 8(%rax)
	addq	$4, %rax
	movq	%rax, 4(%rdi)
	jmp	.LBB430_46
.LBB430_32:
	movq	%rsi, %rax
.LBB430_33:                             # %"$-2"
	shrq	$4, %rbx
	movq	-4(%rax), %r14
	leaq	(%rbx,%r14), %rdx
	movzbl	%r12b, %ecx
	andl	$1, %ecx
	addq	%rdx, %rcx
	setb	%r12b
	movq	4(%rax), %rdi
	subq	$32, %rsp
	movq	%rdi, %rdx
	callq	consNum
	addq	$32, %rsp
	movq	%rax, %rsi
	addq	%r14, %rbx
	movq	%rax, 4(%r13)
	movq	(%rbp), %r14                    # 8-byte Reload
	jb	.LBB430_35
# %bb.34:                               # %"$-2"
	testb	%r12b, %r12b
	je	.LBB430_47
	jmp	.LBB430_35
	.p2align	4, 0x90
.LBB430_41:                             # %"$40"
                                        #   in Loop: Header=BB430_35 Depth=1
	movq	-4(%rdi), %rbx
	movq	4(%rdi), %rdi
	leaq	1(%rbx), %rcx
	subq	$32, %rsp
	movq	%rdi, %rdx
	callq	consNum
	addq	$32, %rsp
	incq	%rbx
	movq	%rax, 4(%rsi)
	movq	%rax, %rsi
	jne	.LBB430_47
.LBB430_35:                             # %"$38"
                                        # =>This Inner Loop Header: Depth=1
	testb	$2, %dil
	je	.LBB430_41
# %bb.36:                               # %"$41"
	shrq	$4, %rdi
	incq	%rdi
	btq	$60, %rdi
	jae	.LBB430_40
# %bb.37:                               # %"$42"
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	jne	.LBB430_39
# %bb.38:                               # %"$2.i22"
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rax
.LBB430_39:                             # %boxNum.exit23
	movq	(%rax), %rcx
	movq	%rcx, ($Avail)(%rip)
	movq	%rdi, (%rax)
	movq	$2, 8(%rax)
	addq	$4, %rax
	movq	%rax, 4(%rsi)
	jmp	.LBB430_47
.LBB430_45:                             # %"$33"
	shlq	$4, %r12
	orq	$2, %r12
	movq	%r12, 4(%rdi)
.LBB430_46:                             # %"$27"
	movq	(%rbp), %r14                    # 8-byte Reload
.LBB430_47:                             # %"$27"
	movq	8(%r14), %rax
.LBB430_48:                             # %"$2"
	movq	%rax, env(%rip)
.LBB430_49:                             # %"$2"
	movq	%r15, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB430_40:                             # %"$43"
	shlq	$4, %rdi
	orq	$2, %rdi
	movq	%rdi, 4(%rsi)
	jmp	.LBB430_47
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 tenfold;
	.scl	2;
	.type	32;
	.endef
	.globl	tenfold                         # -- Begin function tenfold
	.p2align	4, 0x90
tenfold:                                # @tenfold
.seh_proc tenfold
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	testb	$2, %sil
	jne	.LBB431_1
# %bb.5:                                # %"$3"
	movl	$10, %eax
	mulq	-4(%rsi)
	movq	%rdx, %rcx
	movq	%rax, -4(%rsi)
	movq	4(%rsi), %rax
	testb	$2, %al
	jne	.LBB431_6
	.p2align	4, 0x90
.LBB431_12:                             # %"$9"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rdi
	movl	$10, %eax
	mulq	-4(%rdi)
	addq	%rcx, %rax
	movq	%rdx, %rcx
	adcq	$0, %rcx
	movq	%rax, -4(%rdi)
	movq	4(%rdi), %rax
	testb	$2, %al
	je	.LBB431_12
# %bb.13:
	addq	$4, %rdi
	jmp	.LBB431_7
.LBB431_1:                              # %"$2"
	shrq	$4, %rsi
	leaq	(%rsi,%rsi), %rax
	leaq	(%rax,%rax,4), %rdi
	movq	%rdi, %rax
	shrq	$60, %rax
	jne	.LBB431_2
# %bb.14:                               # %"$6"
	shlq	$5, %rsi
	leaq	(%rsi,%rsi,4), %rsi
	orq	$2, %rsi
	jmp	.LBB431_15
.LBB431_6:
	leaq	4(%rsi), %rdi
.LBB431_7:                              # %"$11"
	shrq	$4, %rax
	leaq	(%rax,%rax,4), %rax
	leaq	(%rcx,%rax,2), %rbx
	movq	%rbx, %rax
	shrq	$60, %rax
	jne	.LBB431_8
# %bb.11:                               # %"$13"
	shlq	$4, %rbx
	orq	$2, %rbx
	movq	%rbx, (%rdi)
	jmp	.LBB431_15
.LBB431_2:                              # %"$5"
	movq	($Avail)(%rip), %rsi
	testq	%rsi, %rsi
	jne	.LBB431_4
# %bb.3:                                # %"$2.i"
	callq	gc
	movq	($Avail)(%rip), %rsi
.LBB431_4:                              # %boxNum.exit
	movq	(%rsi), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%rdi, (%rsi)
	movq	$2, 8(%rsi)
	addq	$4, %rsi
	jmp	.LBB431_15
.LBB431_8:                              # %"$12"
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	jne	.LBB431_10
# %bb.9:                                # %"$2.i5"
	callq	gc
	movq	($Avail)(%rip), %rax
.LBB431_10:                             # %boxNum.exit6
	movq	(%rax), %rcx
	movq	%rcx, ($Avail)(%rip)
	movq	%rbx, (%rax)
	movq	$2, 8(%rax)
	addq	$4, %rax
	movq	%rax, (%rdi)
.LBB431_15:                             # %"$4"
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 consNum;
	.scl	2;
	.type	32;
	.endef
	.globl	consNum                         # -- Begin function consNum
	.p2align	4, 0x90
consNum:                                # @consNum
.seh_proc consNum
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rdx, %rsi
	movq	%rcx, %rdi
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	jne	.LBB432_2
# %bb.1:                                # %"$2"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rsi, (%rbx)
	movq	%rbx, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rbx, env(%rip)
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	8(%rbx), %rax
	movq	%rax, env(%rip)
	movq	($Avail)(%rip), %rax
.LBB432_2:                              # %"$3"
	movq	(%rax), %rcx
	movq	%rcx, ($Avail)(%rip)
	movq	%rdi, (%rax)
	movq	%rsi, 8(%rax)
	addq	$4, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 compare;
	.scl	2;
	.type	32;
	.endef
	.globl	compare                         # -- Begin function compare
	.p2align	4, 0x90
compare:                                # @compare
.seh_proc compare
# %bb.0:                                # %"$1"
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	cmpq	%rdx, %rcx
	jne	.LBB433_2
# %bb.1:
	xorl	%r12d, %r12d
.LBB433_42:                             # %"$63"
	movq	%r12, %rax
.LBB433_43:                             # %"$59"
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB433_2:
	movq	%rdx, %r13
	movq	%rcx, %rbx
	leaq	SymTab+8(%rip), %r15
	leaq	SymTab+280(%rip), %r14
	xorl	%r12d, %r12d
.LBB433_3:                              # %"$3"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB433_12 Depth 2
	cmpq	%r15, %rbx
	je	.LBB433_22
# %bb.4:                                # %"$5"
                                        #   in Loop: Header=BB433_3 Depth=1
	cmpq	%r14, %rbx
	je	.LBB433_23
# %bb.5:                                # %"$7"
                                        #   in Loop: Header=BB433_3 Depth=1
	testb	$6, %bl
	jne	.LBB433_24
# %bb.6:                                # %"$9"
                                        #   in Loop: Header=BB433_3 Depth=1
	testb	$8, %bl
	jne	.LBB433_28
# %bb.7:                                # %"$16"
                                        #   in Loop: Header=BB433_3 Depth=1
	testb	$15, %r13b
	jne	.LBB433_38
# %bb.8:                                # %"$78"
                                        #   in Loop: Header=BB433_3 Depth=1
	cmpq	%rsp, ($StkLimit)(%rip)
	ja	.LBB433_75
# %bb.9:                                # %"$85.preheader"
                                        #   in Loop: Header=BB433_3 Depth=1
	movq	(%rbx), %rcx
	movq	(%r13), %rdx
	callq	compare
	testq	%rax, %rax
	jne	.LBB433_39
# %bb.10:                               # %"$86.preheader"
                                        #   in Loop: Header=BB433_3 Depth=1
	movq	%r13, %rsi
	movq	%rbx, %rdi
	jmp	.LBB433_12
	.p2align	4, 0x90
.LBB433_11:                             # %"$101"
                                        #   in Loop: Header=BB433_12 Depth=2
	movq	(%rdi), %rcx
	movq	(%rsi), %rdx
	callq	compare
	testq	%rax, %rax
	jne	.LBB433_39
.LBB433_12:                             # %"$86"
                                        #   Parent Loop BB433_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rdi), %rdi
	testb	$15, %dil
	movq	8(%rsi), %rsi
	jne	.LBB433_18
# %bb.13:                               # %"$89"
                                        #   in Loop: Header=BB433_12 Depth=2
	testb	$15, %sil
	jne	.LBB433_19
# %bb.14:                               # %"$91"
                                        #   in Loop: Header=BB433_12 Depth=2
	cmpq	%rbx, %rdi
	jne	.LBB433_16
# %bb.15:                               # %"$91"
                                        #   in Loop: Header=BB433_12 Depth=2
	cmpq	%r13, %rsi
	je	.LBB433_42
.LBB433_16:                             # %"$98"
                                        #   in Loop: Header=BB433_12 Depth=2
	cmpl	$0, ($Signal)(%rip)
	je	.LBB433_11
# %bb.17:                               # %"$100"
                                        #   in Loop: Header=BB433_12 Depth=2
	xorl	%ecx, %ecx
	callq	sighandler
	jmp	.LBB433_11
.LBB433_18:                             # %tailrecurse.loopexit
                                        #   in Loop: Header=BB433_3 Depth=1
	cmpq	%rsi, %rdi
	movq	%rsi, %r13
	movq	%rdi, %rbx
	jne	.LBB433_3
	jmp	.LBB433_42
.LBB433_39:
	movq	%rax, %r12
	jmp	.LBB433_43
.LBB433_19:                             # %"$92"
	xorl	%eax, %eax
	cmpq	%r14, %rsi
	setne	%al
.LBB433_20:                             # %"$59"
	leaq	-1(%rax,%rax), %rax
	jmp	.LBB433_43
.LBB433_24:                             # %"$10"
	testb	$6, %r13b
	je	.LBB433_40
# %bb.25:                               # %"$13"
	testb	$8, %bl
	jne	.LBB433_44
# %bb.26:                               # %"$2.i"
	testb	$8, %r13b
	movl	$1, %r12d
	jne	.LBB433_42
# %bb.27:                               # %"$5.i"
	movq	%rbx, %rcx
	movq	%r13, %rdx
	jmp	.LBB433_46
.LBB433_28:                             # %"$17"
	cmpq	%r15, %r13
	je	.LBB433_23
# %bb.29:                               # %"$17"
	movl	%r13d, %eax
	andl	$6, %eax
	testq	%rax, %rax
	jne	.LBB433_23
# %bb.30:                               # %"$21"
	cmpq	%r14, %r13
	je	.LBB433_22
# %bb.31:                               # %"$21"
	movl	%r13d, %eax
	andl	$15, %eax
	testq	%rax, %rax
	je	.LBB433_22
# %bb.32:                               # %"$25"
	movq	-8(%rbx), %rcx
	movq	%rcx, %rax
	andq	$-9, %rax
	testb	$6, %cl
	jne	.LBB433_34
.LBB433_33:                             # %"$28"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB433_33
.LBB433_34:                             # %"$29"
	movq	-8(%r13), %rdx
	movq	%rdx, %rcx
	andq	$-9, %rcx
	testb	$6, %dl
	jne	.LBB433_36
.LBB433_35:                             # %"$31"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rcx
	testb	$6, %cl
	je	.LBB433_35
.LBB433_36:                             # %"$32"
	cmpq	$2, %rax
	jne	.LBB433_51
# %bb.37:                               # %"$35"
	xorl	%eax, %eax
	cmpq	$2, %rcx
	sete	%al
	decq	%rax
	jmp	.LBB433_43
.LBB433_38:                             # %"$79"
	xorl	%eax, %eax
	cmpq	%r14, %r13
	setne	%al
	jmp	.LBB433_41
.LBB433_40:                             # %"$12"
	xorl	%eax, %eax
	cmpq	%r15, %r13
	sete	%al
.LBB433_41:                             # %"$63"
	leaq	-1(%rax,%rax), %r12
	jmp	.LBB433_42
.LBB433_44:                             # %"$3.i"
	testb	$8, %r13b
	movq	$-1, %r12
	je	.LBB433_42
# %bb.45:                               # %"$9.i"
	andq	$-9, %r13
	andq	$-9, %rbx
	movq	%r13, %rcx
	movq	%rbx, %rdx
.LBB433_46:                             # %"$5.i"
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	cmpu                            # TAILCALL
.LBB433_51:                             # %"$34"
	cmpq	$2, %rcx
	jne	.LBB433_53
.LBB433_23:
	movl	$1, %eax
	jmp	.LBB433_43
.LBB433_53:                             # %"$45.preheader"
	movabsq	$288230376151711743, %r8        # imm = 0x3FFFFFFFFFFFFFF
.LBB433_54:                             # %"$45"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB433_56 Depth 2
                                        #     Child Loop BB433_61 Depth 2
                                        #     Child Loop BB433_64 Depth 2
	testb	$2, %al
	jne	.LBB433_56
# %bb.55:                               # %"$47"
                                        #   in Loop: Header=BB433_54 Depth=1
	movq	-4(%rax), %rbx
	movq	4(%rax), %rax
	jmp	.LBB433_59
.LBB433_56:                             # %"$50"
                                        #   Parent Loop BB433_54 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	testb	$6, %al
	jne	.LBB433_58
# %bb.57:                               # %"$50"
                                        #   in Loop: Header=BB433_56 Depth=2
	movq	8(%rax), %rax
	jmp	.LBB433_56
.LBB433_58:                             # %"$51"
                                        #   in Loop: Header=BB433_54 Depth=1
	shrq	$4, %rax
	movq	%rax, %rbx
	andq	%r8, %rbx
	xorl	%eax, %eax
.LBB433_59:                             # %"$48"
                                        #   in Loop: Header=BB433_54 Depth=1
	testb	$2, %cl
	jne	.LBB433_61
# %bb.60:                               # %"$53"
                                        #   in Loop: Header=BB433_54 Depth=1
	movq	-4(%rcx), %rdi
	movq	4(%rcx), %rcx
	jmp	.LBB433_64
.LBB433_61:                             # %"$56"
                                        #   Parent Loop BB433_54 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	testb	$6, %cl
	jne	.LBB433_63
# %bb.62:                               # %"$56"
                                        #   in Loop: Header=BB433_61 Depth=2
	movq	8(%rcx), %rcx
	jmp	.LBB433_61
.LBB433_63:                             # %"$57"
                                        #   in Loop: Header=BB433_54 Depth=1
	shrq	$4, %rcx
	movq	%rcx, %rdi
	andq	%r8, %rdi
	xorl	%ecx, %ecx
.LBB433_64:                             # %"$58"
                                        #   Parent Loop BB433_54 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	%bl, %esi
	movzbl	%dil, %edx
	subq	%rdx, %rsi
	jne	.LBB433_71
# %bb.65:                               # %"$60"
                                        #   in Loop: Header=BB433_64 Depth=2
	shrq	$8, %rbx
	je	.LBB433_67
# %bb.66:                               # %"$64"
                                        #   in Loop: Header=BB433_64 Depth=2
	shrq	$8, %rdi
	jne	.LBB433_64
	jmp	.LBB433_23
.LBB433_67:                             # %"$66"
                                        #   in Loop: Header=BB433_54 Depth=1
	cmpq	$255, %rdi
	ja	.LBB433_22
# %bb.68:                               # %"$68"
                                        #   in Loop: Header=BB433_54 Depth=1
	testq	%rax, %rax
	je	.LBB433_74
# %bb.69:                               # %"$70"
                                        #   in Loop: Header=BB433_54 Depth=1
	testq	%rcx, %rcx
	jne	.LBB433_54
	jmp	.LBB433_23
.LBB433_22:
	movq	$-1, %rax
	jmp	.LBB433_43
.LBB433_71:                             # %"$59"
	xorl	%eax, %eax
	testq	%rsi, %rsi
	setg	%al
	jmp	.LBB433_20
.LBB433_74:                             # %"$69"
	negq	%rcx
	sbbq	%rax, %rax
	jmp	.LBB433_43
.LBB433_75:                             # %"$83"
	xorl	%ecx, %ecx
	callq	stkErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 cmpu;
	.scl	2;
	.type	32;
	.endef
	.globl	cmpu                            # -- Begin function cmpu
	.p2align	4, 0x90
cmpu:                                   # @cmpu
# %bb.0:                                # %"$1"
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	testb	$2, %cl
	jne	.LBB434_1
# %bb.4:                                # %"$3"
	movl	$1, %eax
	testb	$2, %dl
	jne	.LBB434_23
# %bb.5:                                # %"$15.preheader"
	movq	4(%rcx), %rax
	movq	4(%rdx), %rbx
	cmpq	%rbx, %rax
	jne	.LBB434_15
# %bb.6:
	xorl	%r10d, %r10d
	xorl	%edi, %edi
	jmp	.LBB434_7
.LBB434_1:                              # %"$2"
	cmpq	%rcx, %rdx
	movq	$-1, %rax
	ja	.LBB434_23
# %bb.2:                                # %"$2"
	movl	%edx, %ebx
	andl	$4, %ebx
	testq	%rbx, %rbx
	jne	.LBB434_23
# %bb.3:                                # %"$8"
	xorl	%eax, %eax
	cmpq	%rcx, %rdx
	setne	%al
	jmp	.LBB434_23
.LBB434_15:                             # %"$16.preheader"
	leaq	4(%rcx), %r14
	leaq	4(%rdx), %r15
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rdx, %r11
	movq	%rcx, %rsi
	.p2align	4, 0x90
.LBB434_16:                             # %"$16"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rcx
	movq	%rbx, %rdx
	testb	$2, %cl
	jne	.LBB434_17
# %bb.18:                               # %"$27"
                                        #   in Loop: Header=BB434_16 Depth=1
	testb	$2, %dl
	jne	.LBB434_19
# %bb.24:                               # %"$36"
                                        #   in Loop: Header=BB434_16 Depth=1
	movq	%r9, (%r14)
	movq	%r8, (%r15)
	leaq	4(%rcx), %r14
	movq	4(%rcx), %rax
	leaq	4(%rdx), %r15
	movq	4(%rdx), %rbx
	cmpq	%rbx, %rax
	movq	%rsi, %r10
	movq	%r11, %rdi
	movq	%r11, %r8
	movq	%rsi, %r9
	movq	%rdx, %r11
	movq	%rcx, %rsi
	jne	.LBB434_16
.LBB434_7:                              # %"$19.preheader"
	movq	-4(%rcx), %rsi
	movq	-4(%rdx), %rbx
	movq	$-1, %rax
	cmpq	%rsi, %rbx
	ja	.LBB434_8
	.p2align	4, 0x90
.LBB434_9:                              # %"$20"
                                        # =>This Inner Loop Header: Depth=1
	movq	%r10, %r9
	movq	%rdi, %r8
	cmpq	%rbx, %rsi
	ja	.LBB434_10
# %bb.11:                               # %"$23"
                                        #   in Loop: Header=BB434_9 Depth=1
	testq	%r9, %r9
	je	.LBB434_12
# %bb.13:                               # %"$25"
                                        #   in Loop: Header=BB434_9 Depth=1
	movq	4(%r9), %r10
	movq	%rcx, 4(%r9)
	movq	-4(%r8), %rbx
	movq	4(%r8), %rdi
	movq	%rdx, 4(%r8)
	movq	-4(%r9), %rsi
	cmpq	%rsi, %rbx
	movq	%r8, %rdx
	movq	%r9, %rcx
	jbe	.LBB434_9
# %bb.14:
	movq	%r9, %rcx
	movq	%r8, %rdx
.LBB434_8:
	movq	%r10, %r9
	movq	%rdi, %r8
	testq	%r9, %r9
	jne	.LBB434_22
	jmp	.LBB434_23
.LBB434_17:                             # %"$28"
	xorl	%eax, %eax
	testb	$4, %dl
	sete	%al
	cmpq	%rcx, %rdx
	leaq	-1(%rax,%rax), %rcx
	movq	$-1, %rax
	cmovbeq	%rcx, %rax
	jmp	.LBB434_20
.LBB434_19:
	movl	$1, %eax
.LBB434_20:                             # %"$17"
	movq	%rsi, %rcx
	movq	%r11, %rdx
	testq	%r9, %r9
	jne	.LBB434_22
	jmp	.LBB434_23
.LBB434_10:
	movl	$1, %eax
	testq	%r9, %r9
	je	.LBB434_23
	.p2align	4, 0x90
.LBB434_22:                             # %"$39"
                                        # =>This Inner Loop Header: Depth=1
	movq	%r9, %rbx
	movq	%r8, %rdi
	movq	4(%r9), %r9
	movq	%rcx, 4(%rbx)
	movq	4(%r8), %r8
	movq	%rdx, 4(%rdi)
	testq	%r9, %r9
	movq	%rdi, %rdx
	movq	%rbx, %rcx
	jne	.LBB434_22
.LBB434_23:                             # %"$4"
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	retq
.LBB434_12:
	xorl	%eax, %eax
	jmp	.LBB434_23
                                        # -- End function
	.def	 badFd;
	.scl	2;
	.type	32;
	.endef
	.globl	badFd                           # -- Begin function badFd
	.p2align	4, 0x90
badFd:                                  # @badFd
.seh_proc badFd
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	leaq	.L$34(%rip), %r8
	xorl	%r9d, %r9d
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 nameErr;
	.scl	2;
	.type	32;
	.endef
	.globl	nameErr                         # -- Begin function nameErr
	.p2align	4, 0x90
nameErr:                                # @nameErr
.seh_proc nameErr
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	leaq	.L$14(%rip), %r8
	xorl	%r9d, %r9d
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 pathString;
	.scl	2;
	.type	32;
	.endef
	.globl	pathString                      # -- Begin function pathString
	.p2align	4, 0x90
pathString:                             # @pathString
# %bb.0:                                # %"$2.i"
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$32, %rsp
	movq	%rdx, %r14
	movl	$2, %eax
	cmpq	$2, %rcx
	jne	.LBB437_4
# %bb.1:
	xorl	%ecx, %ecx
	movq	%r14, %rdi
.LBB437_2:                              # %"$4"
	xorl	%esi, %esi
	jmp	.LBB437_3
.LBB437_4:                              # %"$5.i"
	testb	$2, %cl
	jne	.LBB437_5
# %bb.6:                                # %"$7.i"
	movq	4(%rcx), %rbx
	movq	-4(%rcx), %rcx
	jmp	.LBB437_7
.LBB437_5:                              # %"$8.i"
	shrq	$4, %rcx
	movl	$2, %ebx
.LBB437_7:                              # %symByte.exit
	movq	%rcx, %rsi
	shrq	$8, %rsi
	cmpb	$43, %cl
	jne	.LBB437_8
# %bb.9:                                # %"$2"
	movb	$43, (%r14)
	leaq	1(%r14), %rdi
	testq	%rsi, %rsi
	je	.LBB437_10
.LBB437_15:                             # %"$3.i23"
	movl	%esi, %ecx
	shrq	$8, %rsi
	cmpb	$126, %cl
	jne	.LBB437_17
.LBB437_26:                             # %"$7"
	movq	($UsrLen)(%rip), %r15
	testq	%r15, %r15
	je	.LBB437_22
# %bb.27:                               # %"$10"
	movq	($UsrHome)(%rip), %rdx
	jmp	.LBB437_21
.LBB437_8:
	movq	%r14, %rdi
	cmpb	$126, %cl
	je	.LBB437_26
.LBB437_17:                             # %"$3"
	cmpb	$64, %cl
	jne	.LBB437_18
# %bb.19:                               # %"$6"
	movq	($PilLen)(%rip), %r15
	testq	%r15, %r15
	je	.LBB437_22
# %bb.20:                               # %"$8"
	movq	($PilHome)(%rip), %rdx
.LBB437_21:                             # %"$12.preheader"
	movq	%rdi, %rcx
	movq	%r15, %r8
	callq	memcpy
	addq	%r15, %rdi
	jmp	.LBB437_22
.LBB437_18:
	movq	%rbx, %rax
.LBB437_3:                              # %"$4"
	movb	%cl, (%rdi)
	incq	%rdi
	movq	%rax, %rbx
	jmp	.LBB437_22
	.p2align	4, 0x90
.LBB437_32:                             # %"$13"
                                        #   in Loop: Header=BB437_22 Depth=1
	shrq	$8, %rsi
	incq	%rdi
.LBB437_22:                             # %"$12"
                                        # =>This Inner Loop Header: Depth=1
	testq	%rsi, %rsi
	jne	.LBB437_31
# %bb.23:                               # %"$2.i8"
                                        #   in Loop: Header=BB437_22 Depth=1
	cmpq	$2, %rbx
	je	.LBB437_24
# %bb.28:                               # %"$5.i11"
                                        #   in Loop: Header=BB437_22 Depth=1
	testb	$2, %bl
	jne	.LBB437_29
# %bb.30:                               # %"$7.i13"
                                        #   in Loop: Header=BB437_22 Depth=1
	movq	-4(%rbx), %rsi
	movq	4(%rbx), %rbx
	jmp	.LBB437_31
.LBB437_29:                             # %"$8.i12"
                                        #   in Loop: Header=BB437_22 Depth=1
	movq	%rbx, %rsi
	shrq	$4, %rsi
	movl	$2, %ebx
	.p2align	4, 0x90
.LBB437_31:                             # %symByte.exit15
                                        #   in Loop: Header=BB437_22 Depth=1
	movb	%sil, (%rdi)
	testb	%sil, %sil
	jne	.LBB437_32
	jmp	.LBB437_25
.LBB437_24:                             # %symByte.exit15.thread
	movb	$0, (%rdi)
.LBB437_25:                             # %"$14"
	movq	%r14, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	retq
.LBB437_10:                             # %"$2.i17"
	cmpq	$2, %rbx
	jne	.LBB437_12
# %bb.11:
	xorl	%ecx, %ecx
	jmp	.LBB437_2
.LBB437_12:                             # %"$5.i20"
	testb	$2, %bl
	jne	.LBB437_13
# %bb.14:                               # %"$7.i22"
	movq	-4(%rbx), %rsi
	movq	4(%rbx), %rbx
	jmp	.LBB437_15
.LBB437_13:                             # %"$8.i21"
	movq	%rbx, %rsi
	shrq	$4, %rsi
	movl	$2, %ebx
	jmp	.LBB437_15
                                        # -- End function
	.def	 openErr;
	.scl	2;
	.type	32;
	.endef
	.globl	openErr                         # -- Begin function openErr
	.p2align	4, 0x90
openErr:                                # @openErr
.seh_proc openErr
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rdx, %rsi
	movq	%rcx, %rdi
	callq	strErrno
	leaq	.L$28(%rip), %r8
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	movq	%rax, %r9
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 initInFile;
	.scl	2;
	.type	32;
	.endef
	.globl	initInFile                      # -- Begin function initInFile
	.p2align	4, 0x90
initInFile:                             # @initInFile
.seh_proc initInFile
# %bb.0:                                # %"$1"
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rdx, %r14
	movl	%ecx, %esi
	movl	($InFDs)(%rip), %edi
	cmpl	%ecx, %edi
	jle	.LBB439_2
# %bb.1:                                # %"$1.$3_crit_edge"
	movq	($InFiles)(%rip), %rbx
	jmp	.LBB439_5
.LBB439_2:                              # %"$2"
	movq	($InFiles)(%rip), %rcx
	leal	1(%rsi), %ebp
	movl	%ebp, ($InFDs)(%rip)
	movslq	%ebp, %rdx
	shlq	$3, %rdx
	callq	realloc
	testq	%rax, %rax
	je	.LBB439_9
# %bb.3:                                # %alloc.exit
	movq	%rax, %rbx
	movq	%rax, ($InFiles)(%rip)
	.p2align	4, 0x90
.LBB439_4:                              # %"$4"
                                        # =>This Inner Loop Header: Depth=1
	movslq	%edi, %rdi
	movq	$0, (%rbx,%rdi,8)
	incl	%edi
	cmpl	%edi, %ebp
	jne	.LBB439_4
.LBB439_5:                              # %"$3"
	movslq	%esi, %rbp
	movq	(%rbx,%rbp,8), %rdi
	testq	%rdi, %rdi
	jne	.LBB439_8
# %bb.6:                                # %"$8"
	movl	$4129, %ecx                     # imm = 0x1021
	callq	malloc
	testq	%rax, %rax
	je	.LBB439_9
# %bb.7:                                # %alloc.exit7
	movq	%rax, %rdi
	movq	%rax, (%rbx,%rbp,8)
.LBB439_8:                              # %"$9"
	movq	%r14, (%rdi)
	movl	%esi, 8(%rdi)
	movl	%esi, %ecx
	callq	isatty
	testl	%eax, %eax
	setne	4128(%rdi)
	movabsq	$4294967296, %rax               # imm = 0x100000000
	movq	%rax, 12(%rdi)
	movl	$1, 20(%rdi)
	movq	$0, 24(%rdi)
	movq	%rdi, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq
.LBB439_9:                              # %"$2.i"
	leaq	.L$3(%rip), %rcx
	xorl	%edx, %edx
	callq	giveup
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 xSym;
	.scl	2;
	.type	32;
	.endef
	.globl	xSym                            # -- Begin function xSym
	.p2align	4, 0x90
xSym:                                   # @xSym
.seh_proc xSym
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movl	%ecx, %eax
	andl	$14, %eax
	cmpl	$8, %eax
	je	.LBB440_5
# %bb.1:                                # %"$3"
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	$4, (%rsi)
	leaq	16(%rsi), %rax
	movq	$2, 16(%rsi)
	movq	env(%rip), %rdx
	movq	%rdx, 24(%rsi)
	movq	%rax, env(%rip)
	subq	$32, %rsp
	movq	%rsi, %rdx
	callq	pack
	addq	$32, %rsp
	movq	16(%rsi), %rcx
	cmpq	$2, %rcx
	jne	.LBB440_3
# %bb.2:
	leaq	SymTab+8(%rip), %rcx
	jmp	.LBB440_4
.LBB440_3:                              # %"$3.i"
	subq	$32, %rsp
	xorl	%edx, %edx
	callq	consSym
	addq	$32, %rsp
	movq	%rax, %rcx
.LBB440_4:                              # %consStr.exit
	movq	24(%rsi), %rax
	movq	%rax, env(%rip)
.LBB440_5:                              # %"$4"
	movq	%rcx, %rax
	leaq	8(%rbp), %rsp
	popq	%rsi
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 pipeErr;
	.scl	2;
	.type	32;
	.endef
	.globl	pipeErr                         # -- Begin function pipeErr
	.p2align	4, 0x90
pipeErr:                                # @pipeErr
.seh_proc pipeErr
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	callq	strErrno
	leaq	.L$30(%rip), %r8
	movq	%rsi, %rcx
	xorl	%edx, %edx
	movq	%rax, %r9
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 forkErr;
	.scl	2;
	.type	32;
	.endef
	.globl	forkErr                         # -- Begin function forkErr
	.p2align	4, 0x90
forkErr:                                # @forkErr
.seh_proc forkErr
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	leaq	.L$22(%rip), %r8
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 execErr;
	.scl	2;
	.type	32;
	.endef
	.globl	execErr                         # -- Begin function execErr
	.p2align	4, 0x90
execErr:                                # @execErr
.seh_proc execErr
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rcx, %rdx
	leaq	.L$2(%rip), %rcx
	callq	stderrMsg
	movl	$127, %ecx
	callq	exit
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 pack;
	.scl	2;
	.type	32;
	.endef
	.globl	pack                            # -- Begin function pack
	.p2align	4, 0x90
pack:                                   # @pack
.seh_proc pack
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$48, %rsp
	.seh_stackalloc 48
	.seh_endprologue
	movq	%rdx, %rsi
	movq	%rcx, %rdi
	testb	$15, %dil
	jne	.LBB444_3
# %bb.1:                                # %"$2"
	cmpq	%rsp, ($StkLimit)(%rip)
	ja	.LBB444_23
	.p2align	4, 0x90
.LBB444_2:                              # %"$6"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rcx
	movq	8(%rdi), %rdi
	movq	%rsi, %rdx
	callq	pack
	testb	$15, %dil
	je	.LBB444_2
.LBB444_3:                              # %"$3"
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rdi
	je	.LBB444_6
# %bb.4:                                # %"$10"
	testb	$6, %dil
	je	.LBB444_7
# %bb.5:                                # %"$12"
	movq	%rsi, 32(%rsp)
	movq	%rdi, %rcx
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	callq	fmtNum
.LBB444_6:                              # %"$9"
	nop
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
.LBB444_7:                              # %"$11"
	movq	-8(%rdi), %rdi
	testb	$8, %dil
	jne	.LBB444_8
	.p2align	4, 0x90
# %bb.14:                               # %"$19"
	testb	$6, %dil
	jne	.LBB444_15
.LBB444_13:                             # %"$19"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rdi), %rdi
	testb	$6, %dil
	je	.LBB444_13
.LBB444_15:                             # %"$21.preheader"
	xorl	%ecx, %ecx
	testq	%rcx, %rcx
	jne	.LBB444_21
	.p2align	4, 0x90
.LBB444_17:                             # %"$2.i8"
	cmpq	$2, %rdi
	je	.LBB444_6
# %bb.18:                               # %"$5.i"
	testb	$2, %dil
	jne	.LBB444_19
# %bb.20:                               # %"$7.i"
	movq	-4(%rdi), %rcx
	movq	4(%rdi), %rdi
	jmp	.LBB444_21
	.p2align	4, 0x90
.LBB444_19:                             # %"$8.i"
	movq	%rdi, %rcx
	shrq	$4, %rcx
	movl	$2, %edi
	.p2align	4, 0x90
.LBB444_21:                             # %symByte.exit
                                        # =>This Inner Loop Header: Depth=1
	testb	%cl, %cl
	je	.LBB444_6
# %bb.22:                               # %"$22"
                                        #   in Loop: Header=BB444_21 Depth=1
	movq	%rcx, %rbx
	shrq	$8, %rbx
                                        # kill: def $cl killed $cl killed $rcx
	movq	%rsi, %rdx
	callq	byteSym
	movq	%rbx, %rcx
	testq	%rcx, %rcx
	jne	.LBB444_21
	jmp	.LBB444_17
.LBB444_8:                              # %"$14"
	movb	$123, %cl
	movq	%rsi, %rdx
	callq	byteSym
	movq	%rdi, %rbx
	andq	$-9, %rbx
	testb	$6, %dil
	jne	.LBB444_10
	.p2align	4, 0x90
.LBB444_9:                              # %"$16"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rbx), %rbx
	testb	$6, %bl
	je	.LBB444_9
.LBB444_10:                             # %"$17"
	movl	%ebx, %eax
	shrl	$24, %eax
	movq	%rbx, %rcx
	shrq	$36, %rcx
	andl	$65280, %ecx                    # imm = 0xFF00
	orl	%eax, %ecx
	je	.LBB444_12
# %bb.11:                               # %"$2.i"
                                        # kill: def $ecx killed $ecx killed $rcx
	movq	%rsi, %rdx
	callq	packAO
.LBB444_12:                             # %packExtNm.exit
	movl	%ebx, %eax
	shrl	$4, %eax
	andl	$1048575, %eax                  # imm = 0xFFFFF
	movq	%rbx, %rdx
	shrq	$12, %rdx
	andl	$-1048576, %edx                 # imm = 0xFFF00000
	orq	%rax, %rdx
	shrq	$20, %rbx
	movabsq	$4393751543808, %rcx            # imm = 0x3FF00000000
	andq	%rbx, %rcx
	orq	%rdx, %rcx
	movq	%rsi, %rdx
	callq	packOct
	movb	$125, %cl
	movq	%rsi, %rdx
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	jmp	byteSym                         # TAILCALL
.LBB444_23:                             # %"$4"
	xorl	%ecx, %ecx
	callq	stkErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 fmtNum;
	.scl	2;
	.type	32;
	.endef
	.globl	fmtNum                          # -- Begin function fmtNum
	.p2align	4, 0x90
fmtNum:                                 # @fmtNum
.seh_proc fmtNum
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$56, %rsp
	.seh_stackalloc 56
	leaq	48(%rsp), %rbp
	.seh_setframe %rbp, 48
	.seh_endprologue
	movb	%r9b, 7(%rbp)                   # 1-byte Spill
	movb	%r8b, 6(%rbp)                   # 1-byte Spill
	movq	%rcx, %r11
	andq	$-9, %r11
	movl	$36, %eax
	movq	%rcx, -16(%rbp)                 # 8-byte Spill
	testb	$2, %cl
	jne	.LBB445_3
# %bb.1:                                # %"$3.preheader"
	movl	$36, %eax
	movq	%r11, %rcx
	.p2align	4, 0x90
.LBB445_2:                              # %"$3"
                                        # =>This Inner Loop Header: Depth=1
	addq	$20, %rax
	movq	4(%rcx), %rcx
	testb	$2, %cl
	je	.LBB445_2
.LBB445_3:                              # %"$4"
	movq	%rdx, -24(%rbp)                 # 8-byte Spill
	movabsq	$-1000000000000000000, %r12     # imm = 0xF21F494C589C0000
	movabsq	$1000000000000000000, %rsi      # imm = 0xDE0B6B3A7640000
	movabsq	$-2049638230412172401, %rcx     # imm = 0xE38E38E38E38E38F
	mulq	%rcx
	shrq	$4, %rdx
	leaq	15(,%rdx,8), %rdx
	andq	$-16, %rdx
	movq	%rdx, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r13
	movq	%rdx, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	$0, (%r13)
	movq	$1, (%r15)
	movq	%r15, %r14
	addq	$8, %r14
	leaq	8(%r13), %rax
	movq	%rax, -40(%rbp)                 # 8-byte Spill
	movq	%r13, -8(%rbp)                  # 8-byte Spill
	movq	%r15, %rax
	.p2align	4, 0x90
.LBB445_4:                              # %"$5"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB445_7 Depth 2
                                        #       Child Loop BB445_18 Depth 3
                                        #       Child Loop BB445_12 Depth 3
	movl	$16, %r9d
	testb	$4, %r11b
	movq	%r11, -32(%rbp)                 # 8-byte Spill
	je	.LBB445_7
# %bb.5:                                # %"$6"
                                        #   in Loop: Header=BB445_4 Depth=1
	movq	-32(%rbp), %rcx                 # 8-byte Reload
	movq	-4(%rcx), %r11
	movl	$1, %r9d
	jmp	.LBB445_7
	.p2align	4, 0x90
.LBB445_6:                              # %"$28"
                                        #   in Loop: Header=BB445_7 Depth=2
	addq	%r9, %r9
	je	.LBB445_20
.LBB445_7:                              # %"$8"
                                        #   Parent Loop BB445_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB445_18 Depth 3
                                        #       Child Loop BB445_12 Depth 3
	testq	%r11, %r9
	je	.LBB445_11
# %bb.8:                                # %"$11.preheader"
                                        #   in Loop: Header=BB445_7 Depth=2
	movq	-8(%rbp), %rbx                  # 8-byte Reload
	movq	(%rbx), %rcx
	addq	(%r15), %rcx
	leaq	(%rcx,%r12), %rdx
	cmpq	%rsi, %rcx
	setb	%r8b
	cmovbq	%rcx, %rdx
	movq	%rdx, (%rbx)
	cmpq	%rax, %r14
	jbe	.LBB445_15
.LBB445_9:                              # %"$16"
                                        #   in Loop: Header=BB445_7 Depth=2
	testb	%r8b, %r8b
	jne	.LBB445_11
# %bb.10:                               # %"$19"
                                        #   in Loop: Header=BB445_7 Depth=2
	movq	$1, 8(%r13)
	addq	$8, %r13
.LBB445_11:                             # %"$10"
                                        #   in Loop: Header=BB445_7 Depth=2
	movq	%r15, %rdx
	xorl	%ecx, %ecx
	.p2align	4, 0x90
.LBB445_12:                             # %"$21"
                                        #   Parent Loop BB445_4 Depth=1
                                        #     Parent Loop BB445_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	(%rdx), %rbx
	addq	%rbx, %rbx
	orq	%rcx, %rbx
	leaq	(%rbx,%r12), %rdi
	xorl	%ecx, %ecx
	cmpq	%rsi, %rbx
	setae	%cl
	cmovbq	%rbx, %rdi
	movq	%rdi, (%rdx)
	addq	$8, %rdx
	cmpq	%rax, %rdx
	jbe	.LBB445_12
# %bb.13:                               # %"$26"
                                        #   in Loop: Header=BB445_7 Depth=2
	cmpq	%rsi, %rbx
	jb	.LBB445_6
# %bb.14:                               # %"$27"
                                        #   in Loop: Header=BB445_7 Depth=2
	addq	$8, %rax
	movq	$1, (%rdx)
	jmp	.LBB445_6
	.p2align	4, 0x90
.LBB445_15:                             # %"$15.preheader"
                                        #   in Loop: Header=BB445_7 Depth=2
	movq	-40(%rbp), %rdx                 # 8-byte Reload
	movq	%r14, %r10
	jmp	.LBB445_18
	.p2align	4, 0x90
.LBB445_16:                             # %"$17"
                                        #   in Loop: Header=BB445_18 Depth=3
	addq	$8, %r13
	movq	$0, (%rdx)
	xorl	%ebx, %ebx
.LBB445_17:                             # %"$18"
                                        #   in Loop: Header=BB445_18 Depth=3
	addq	%rcx, %rbx
	addq	(%r10), %rbx
	leaq	(%rbx,%r12), %rcx
	cmpq	%rsi, %rbx
	setb	%r8b
	cmovbq	%rbx, %rcx
	movq	%rcx, (%rdx)
	addq	$8, %r10
	addq	$8, %rdx
	cmpq	%rax, %r10
	ja	.LBB445_9
.LBB445_18:                             # %"$15"
                                        #   Parent Loop BB445_4 Depth=1
                                        #     Parent Loop BB445_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	notb	%r8b
	movzbl	%r8b, %ecx
	andl	$1, %ecx
	cmpq	%r13, %rdx
	ja	.LBB445_16
# %bb.19:                               # %"$15.$18_crit_edge"
                                        #   in Loop: Header=BB445_18 Depth=3
	movq	(%rdx), %rbx
	jmp	.LBB445_17
	.p2align	4, 0x90
.LBB445_20:                             # %"$30"
                                        #   in Loop: Header=BB445_4 Depth=1
	movq	-32(%rbp), %r11                 # 8-byte Reload
	testb	$2, %r11b
	jne	.LBB445_22
# %bb.21:                               # %"$31"
                                        #   in Loop: Header=BB445_4 Depth=1
	movq	4(%r11), %r11
	jmp	.LBB445_4
.LBB445_22:                             # %"$32"
	movq	-24(%rbp), %r8                  # 8-byte Reload
	testq	%r8, %r8
	js	.LBB445_35
# %bb.23:                               # %"$35"
	testb	$8, -16(%rbp)                   # 1-byte Folded Reload
	movq	-8(%rbp), %r12                  # 8-byte Reload
	movq	112(%rbp), %r14
	je	.LBB445_25
# %bb.24:                               # %"$36"
	subq	$32, %rsp
	movb	$45, %cl
	movq	%r14, %rdx
	callq	byteSym
	movq	-24(%rbp), %r8                  # 8-byte Reload
	addq	$32, %rsp
.LBB445_25:                             # %"$37"
	movq	%r13, %rax
	subq	%r12, %rax
	shrq	$2, %rax
	andq	$-2, %rax
	leaq	(%rax,%rax,8), %rsi
	movq	(%r13), %rcx
	cmpq	$10, %rcx
	movb	6(%rbp), %r15b                  # 1-byte Reload
	jb	.LBB445_28
# %bb.26:                               # %"$39.preheader"
	movabsq	$-3689348814741910323, %rbx     # imm = 0xCCCCCCCCCCCCCCCD
	.p2align	4, 0x90
.LBB445_27:                             # %"$39"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rcx, %rax
	mulq	%rbx
	shrq	$3, %rdx
	incq	%rsi
	cmpq	$99, %rcx
	movq	%rdx, %rcx
	ja	.LBB445_27
.LBB445_28:                             # %"$40"
	movq	%rsi, %rdi
	subq	%r8, %rdi
	jns	.LBB445_33
# %bb.29:                               # %"$41"
	subq	$32, %rsp
	movb	$48, %cl
	movq	%r14, %rdx
	callq	byteSym
	movl	%r15d, %ecx
	movq	%r14, %rdx
	callq	byteSym
	addq	$32, %rsp
	cmpq	$-1, %rdi
	je	.LBB445_32
# %bb.30:                               # %"$44.preheader"
	notq	%rsi
	addq	-24(%rbp), %rsi                 # 8-byte Folded Reload
	.p2align	4, 0x90
.LBB445_31:                             # %"$44"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	movb	$48, %cl
	movq	%r14, %rdx
	callq	byteSym
	addq	$32, %rsp
	decq	%rsi
	jne	.LBB445_31
.LBB445_32:
	movq	$-1, %rdi
.LBB445_33:                             # %"$42"
	movb	7(%rbp), %bl                    # 1-byte Reload
	movq	(%r13), %rcx
	subq	$48, %rsp
	movq	%r14, 32(%rsp)
	movq	%rdi, %rdx
	movl	%r15d, %r8d
	movl	%ebx, %r9d
	callq	fmtWord
	addq	$48, %rsp
	addq	$-8, %r13
	cmpq	%r12, %r13
	jb	.LBB445_65
# %bb.39:                               # %"$47.lr.ph"
	testb	%bl, %bl
	je	.LBB445_54
# %bb.40:
	movabsq	$-6148914691236517205, %rsi     # imm = 0xAAAAAAAAAAAAAAAB
	movq	%rax, %rbx
	jmp	.LBB445_42
	.p2align	4, 0x90
.LBB445_41:                             # %"$59.us-lcssa.us.us"
                                        #   in Loop: Header=BB445_42 Depth=1
	movq	%r12, %rbx
	addq	$-18, %rbx
	addb	$48, %dil
	subq	$32, %rsp
	movl	%edi, %ecx
	movq	112(%rbp), %rdx
	callq	byteSym
	addq	$32, %rsp
	addq	$-8, %r13
	cmpq	-8(%rbp), %r13                  # 8-byte Folded Reload
	jb	.LBB445_65
.LBB445_42:                             # %"$47.us"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB445_43 Depth 2
	movq	(%r13), %rdi
	movq	%rbx, %r12
	movabsq	$100000000000000000, %r14       # imm = 0x16345785D8A0000
	.p2align	4, 0x90
.LBB445_43:                             # %"$49.us.us"
                                        #   Parent Loop BB445_42 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rbx, %rax
	mulq	%rsi
	shrq	%rdx
	leaq	(%rdx,%rdx,2), %rcx
	movq	%rbx, %rax
	subq	%rcx, %rax
	testq	%rbx, %rbx
	movl	%r15d, %ecx
	je	.LBB445_46
# %bb.44:                               # %"$51.us.us"
                                        #   in Loop: Header=BB445_43 Depth=2
	jle	.LBB445_47
# %bb.45:                               # %"$51.us.us"
                                        #   in Loop: Header=BB445_43 Depth=2
	testq	%rax, %rax
	movzbl	7(%rbp), %ecx                   # 1-byte Folded Reload
	jne	.LBB445_47
.LBB445_46:                             # %"$50.us.us.sink.split"
                                        #   in Loop: Header=BB445_43 Depth=2
	subq	$32, %rsp
	movq	112(%rbp), %rdx
	callq	byteSym
	addq	$32, %rsp
.LBB445_47:                             # %"$50.us.us"
                                        #   in Loop: Header=BB445_43 Depth=2
	cmpq	$1, %r14
	je	.LBB445_41
# %bb.48:                               # %"$58.us.us"
                                        #   in Loop: Header=BB445_43 Depth=2
	decq	%rbx
	movq	%rdi, %rax
	xorl	%edx, %edx
	divq	%r14
	movq	%rax, %r15
	leal	48(%rax), %ecx
	subq	$32, %rsp
                                        # kill: def $cl killed $cl killed $ecx
	movq	112(%rbp), %rdx
	callq	byteSym
	addq	$32, %rsp
	imulq	%r14, %r15
	subq	%r15, %rdi
	movzbl	6(%rbp), %r15d                  # 1-byte Folded Reload
	movq	%r14, %rax
	movabsq	$-3689348814741910323, %rcx     # imm = 0xCCCCCCCCCCCCCCCD
	mulq	%rcx
	movq	%rdx, %r14
	shrq	$3, %r14
	jmp	.LBB445_43
.LBB445_35:                             # %"$34"
	cmpq	$-1, %r8
	movq	-8(%rbp), %r12                  # 8-byte Reload
	je	.LBB445_50
# %bb.36:                               # %"$60"
	movq	%r13, %rax
	subq	%r12, %rax
	shrq	$2, %rax
	andq	$-2, %rax
	leaq	(%rax,%rax,8), %rcx
	movq	(%r13), %rbx
	movabsq	$-3689348814741910323, %rdi     # imm = 0xCCCCCCCCCCCCCCCD
	.p2align	4, 0x90
.LBB445_37:                             # %"$70"
                                        # =>This Inner Loop Header: Depth=1
	incq	%rcx
	movq	%rbx, %rax
	mulq	%rdi
	shrq	$3, %rdx
	cmpq	$9, %rbx
	movq	%rdx, %rbx
	ja	.LBB445_37
# %bb.38:                               # %"$72"
	leaq	1(%rcx), %rax
	testb	$8, -16(%rbp)                   # 1-byte Folded Reload
	cmoveq	%rcx, %rax
	shlq	$4, %rax
	orq	$2, %rax
	jmp	.LBB445_66
.LBB445_50:                             # %"$61"
	testb	$8, -16(%rbp)                   # 1-byte Folded Reload
	je	.LBB445_52
# %bb.51:                               # %"$62"
	subq	$32, %rsp
	movb	$45, %cl
	callq	*($Put)(%rip)
	addq	$32, %rsp
.LBB445_52:                             # %"$63"
	movq	(%r13), %rcx
	subq	$32, %rsp
	callq	outWord
	addq	$32, %rsp
	addq	$-8, %r13
	cmpq	%r12, %r13
	jb	.LBB445_65
# %bb.61:                               # %"$65.preheader"
	movabsq	$100000000000000000, %r14       # imm = 0x16345785D8A0000
	movabsq	$-3689348814741910323, %r15     # imm = 0xCCCCCCCCCCCCCCCD
	.p2align	4, 0x90
.LBB445_62:                             # %"$65"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB445_63 Depth 2
	movq	(%r13), %rsi
	movq	%r14, %rdi
	.p2align	4, 0x90
.LBB445_63:                             # %"$67"
                                        #   Parent Loop BB445_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rsi, %rax
	xorl	%edx, %edx
	divq	%rdi
	movq	%rax, %rbx
	leal	48(%rax), %ecx
	subq	$32, %rsp
                                        # kill: def $cl killed $cl killed $ecx
	callq	*($Put)(%rip)
	addq	$32, %rsp
	imulq	%rdi, %rbx
	subq	%rbx, %rsi
	movq	%rdi, %rax
	mulq	%r15
	shrq	$3, %rdx
	addq	$-10, %rdi
	cmpq	$9, %rdi
	movq	%rdx, %rdi
	ja	.LBB445_63
# %bb.64:                               # %"$69"
                                        #   in Loop: Header=BB445_62 Depth=1
	addb	$48, %sil
	subq	$32, %rsp
	movl	%esi, %ecx
	callq	*($Put)(%rip)
	addq	$32, %rsp
	addq	$-8, %r13
	cmpq	%r12, %r13
	jae	.LBB445_62
	jmp	.LBB445_65
.LBB445_54:
	movabsq	$-3689348814741910323, %r14     # imm = 0xCCCCCCCCCCCCCCCD
	movq	%rax, %rdi
	.p2align	4, 0x90
.LBB445_56:                             # %"$47"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB445_58 Depth 2
	movq	(%r13), %r15
	movq	%rdi, %r12
	movabsq	$100000000000000000, %rbx       # imm = 0x16345785D8A0000
	testq	%rdi, %rdi
	jne	.LBB445_58
	jmp	.LBB445_57
	.p2align	4, 0x90
.LBB445_59:                             # %"$58"
                                        #   in Loop: Header=BB445_58 Depth=2
	decq	%rdi
	movq	%r15, %rax
	xorl	%edx, %edx
	divq	%rbx
	movq	%rax, %rsi
	leal	48(%rax), %ecx
	subq	$32, %rsp
                                        # kill: def $cl killed $cl killed $ecx
	movq	112(%rbp), %rdx
	callq	byteSym
	addq	$32, %rsp
	imulq	%rbx, %rsi
	subq	%rsi, %r15
	movq	%rbx, %rax
	mulq	%r14
	movq	%rdx, %rbx
	shrq	$3, %rbx
	testq	%rdi, %rdi
	jne	.LBB445_58
.LBB445_57:                             # %"$52"
                                        #   in Loop: Header=BB445_56 Depth=1
	subq	$32, %rsp
	movb	6(%rbp), %cl                    # 1-byte Reload
	movq	112(%rbp), %rdx
	callq	byteSym
	addq	$32, %rsp
.LBB445_58:                             # %"$50"
                                        #   Parent Loop BB445_56 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpq	$1, %rbx
	jne	.LBB445_59
# %bb.55:                               # %"$59"
                                        #   in Loop: Header=BB445_56 Depth=1
	movq	%r12, %rdi
	addq	$-18, %rdi
	addb	$48, %r15b
	subq	$32, %rsp
	movl	%r15d, %ecx
	movq	112(%rbp), %rdx
	callq	byteSym
	addq	$32, %rsp
	addq	$-8, %r13
	cmpq	-8(%rbp), %r13                  # 8-byte Folded Reload
	jae	.LBB445_56
.LBB445_65:
	xorl	%eax, %eax
.LBB445_66:                             # %"$33"
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 packAO;
	.scl	2;
	.type	32;
	.endef
	.globl	packAO                          # -- Begin function packAO
	.p2align	4, 0x90
packAO:                                 # @packAO
.seh_proc packAO
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rdx, %rsi
	movl	%ecx, %edi
	cmpl	$16, %ecx
	jl	.LBB446_2
# %bb.1:                                # %"$2"
	movl	%edi, %ecx
	shrl	$4, %ecx
	movq	%rsi, %rdx
	callq	packAO
.LBB446_2:                              # %"$3"
	andb	$15, %dil
	orb	$64, %dil
	movl	%edi, %ecx
	movq	%rsi, %rdx
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	jmp	byteSym                         # TAILCALL
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 packOct;
	.scl	2;
	.type	32;
	.endef
	.globl	packOct                         # -- Begin function packOct
	.p2align	4, 0x90
packOct:                                # @packOct
.seh_proc packOct
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rdx, %rsi
	movq	%rcx, %rdi
	cmpq	$8, %rcx
	jb	.LBB447_2
# %bb.1:                                # %"$2"
	movq	%rdi, %rcx
	shrq	$3, %rcx
	movq	%rsi, %rdx
	callq	packOct
.LBB447_2:                              # %"$3"
	andb	$7, %dil
	orb	$48, %dil
	movl	%edi, %ecx
	movq	%rsi, %rdx
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	jmp	byteSym                         # TAILCALL
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 fmtWord;
	.scl	2;
	.type	32;
	.endef
	.globl	fmtWord                         # -- Begin function fmtWord
	.p2align	4, 0x90
fmtWord:                                # @fmtWord
.seh_proc fmtWord
# %bb.0:                                # %"$1"
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rdx, %rbx
	movq	%rcx, %rsi
	movq	128(%rsp), %r14
	cmpq	$10, %rcx
	jb	.LBB448_7
# %bb.1:                                # %"$2"
	movl	%r9d, %ebp
	movl	%r8d, %r15d
	movabsq	$-3689348814741910323, %rcx     # imm = 0xCCCCCCCCCCCCCCCD
	movq	%rsi, %rax
	mulq	%rcx
	movq	%rdx, %rdi
	shrq	$3, %rdi
	movq	%r14, 32(%rsp)
	movq	%rdi, %rcx
	movq	%rbx, %rdx
	callq	fmtWord
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB448_5
# %bb.2:                                # %"$5"
	movabsq	$-6148914691236517205, %rcx     # imm = 0xAAAAAAAAAAAAAAAB
	movq	%rbx, %rax
	mulq	%rcx
	testb	%bpl, %bpl
	je	.LBB448_6
# %bb.3:                                # %"$5"
	testq	%rbx, %rbx
	jle	.LBB448_6
# %bb.4:                                # %"$5"
	shrq	%rdx
	leaq	(%rdx,%rdx,2), %rax
	movq	%rbx, %rcx
	subq	%rax, %rcx
	movl	%ebp, %r15d
	jne	.LBB448_6
.LBB448_5:                              # %"$4.sink.split"
	movl	%r15d, %ecx
	movq	%r14, %rdx
	callq	byteSym
.LBB448_6:                              # %"$4"
	decq	%rbx
	addl	%edi, %edi
	leal	(%rdi,%rdi,4), %eax
	subl	%eax, %esi
.LBB448_7:                              # %"$3"
	addb	$48, %sil
	movl	%esi, %ecx
	movq	%r14, %rdx
	callq	byteSym
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 rdl;
	.scl	2;
	.type	32;
	.endef
	.globl	rdl                             # -- Begin function rdl
	.p2align	4, 0x90
rdl:                                    # @rdl
.seh_proc rdl
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rdx, %rdi
	movq	%rcx, %r14
	leaq	($Delim)(%rip), %r15
	leaq	SymTab+8(%rip), %rsi
	jmp	.LBB449_1
	.p2align	4, 0x90
.LBB449_23:                             # %comment.exit.i
                                        #   in Loop: Header=BB449_1 Depth=1
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
.LBB449_1:                              # %"$2"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB449_3 Depth 2
                                        #     Child Loop BB449_11 Depth 2
                                        #     Child Loop BB449_16 Depth 2
                                        #     Child Loop BB449_84 Depth 2
	movl	($Chr)(%rip), %eax
	testl	%eax, %eax
	js	.LBB449_5
.LBB449_3:                              # %"$5.i"
                                        #   Parent Loop BB449_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$32, %eax
	jg	.LBB449_9
# %bb.4:                                # %"$6.i"
                                        #   in Loop: Header=BB449_3 Depth=2
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	testl	%eax, %eax
	jns	.LBB449_3
	jmp	.LBB449_5
	.p2align	4, 0x90
.LBB449_9:                              # %"$7.i"
                                        #   in Loop: Header=BB449_1 Depth=1
	cmpl	$35, %eax
	jne	.LBB449_5
# %bb.10:                               # %"$11.i"
                                        #   in Loop: Header=BB449_1 Depth=1
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	cmpl	$123, %eax
	jne	.LBB449_11
# %bb.14:                               # %"$5.preheader.i.i"
                                        #   in Loop: Header=BB449_1 Depth=1
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB449_23
# %bb.15:                               # %"$6.i.i.preheader"
                                        #   in Loop: Header=BB449_1 Depth=1
	xorl	%ebx, %ebx
	jmp	.LBB449_16
	.p2align	4, 0x90
.LBB449_11:                             # %"$17.preheader.i.i"
                                        #   Parent Loop BB449_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, %eax
	je	.LBB449_23
# %bb.12:                               # %"$17.preheader.i.i"
                                        #   in Loop: Header=BB449_11 Depth=2
	testl	%eax, %eax
	js	.LBB449_23
# %bb.13:                               # %"$20.i.i"
                                        #   in Loop: Header=BB449_11 Depth=2
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	jmp	.LBB449_11
	.p2align	4, 0x90
.LBB449_18:                             # %"$10.i.i"
                                        #   in Loop: Header=BB449_16 Depth=2
	incq	%rbx
.LBB449_22:                             # %"$12.i.i"
                                        #   in Loop: Header=BB449_16 Depth=2
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB449_23
.LBB449_16:                             # %"$6.i.i"
                                        #   Parent Loop BB449_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$35, %eax
	jne	.LBB449_19
# %bb.17:                               # %"$8.i.i"
                                        #   in Loop: Header=BB449_16 Depth=2
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	cmpl	$123, %eax
	je	.LBB449_18
.LBB449_19:                             # %"$11.i.i"
                                        #   in Loop: Header=BB449_16 Depth=2
	cmpl	$125, %eax
	jne	.LBB449_22
# %bb.20:                               # %"$14.i.i"
                                        #   in Loop: Header=BB449_16 Depth=2
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	cmpl	$35, %eax
	jne	.LBB449_22
# %bb.21:                               # %"$13.i.i"
                                        #   in Loop: Header=BB449_16 Depth=2
	decq	%rbx
	jns	.LBB449_22
	jmp	.LBB449_23
.LBB449_5:                              # %skip.exit
                                        #   in Loop: Header=BB449_1 Depth=1
	cmpl	$92, %eax
	jg	.LBB449_24
# %bb.6:                                # %skip.exit
                                        #   in Loop: Header=BB449_1 Depth=1
	cmpl	$46, %eax
	jne	.LBB449_7
# %bb.27:                               # %"$9"
                                        #   in Loop: Header=BB449_1 Depth=1
	subq	$32, %rsp
	callq	*($Get)(%rip)
	movl	$16, %r8d
	movq	%r15, %rcx
	movl	%eax, %edx
	callq	memchr
	addq	$32, %rsp
	testq	%rax, %rax
	jne	.LBB449_28
# %bb.73:                               # %"$10"
                                        #   in Loop: Header=BB449_1 Depth=1
	subq	$32, %rsp
	movl	$46, %ecx
	callq	rdAtom
	jmp	.LBB449_74
.LBB449_24:                             # %skip.exit
                                        #   in Loop: Header=BB449_1 Depth=1
	cmpl	$126, %eax
	jne	.LBB449_25
# %bb.75:                               # %"$23"
                                        #   in Loop: Header=BB449_1 Depth=1
	subq	$32, %rsp
	callq	*($Get)(%rip)
	xorl	%ecx, %ecx
	callq	read0
	addq	$32, %rsp
	movq	%rax, %rcx
	movq	env(%rip), %rdx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rcx, (%rbx)
	movq	%rbx, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	%rbx, env(%rip)
	testb	$6, %cl
	jne	.LBB449_79
# %bb.76:                               # %"$25"
                                        #   in Loop: Header=BB449_1 Depth=1
	testb	$8, %cl
	jne	.LBB449_77
# %bb.78:                               # %"$27"
                                        #   in Loop: Header=BB449_1 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
.LBB449_79:                             # %"$24"
                                        #   in Loop: Header=BB449_1 Depth=1
	cmpq	%rsi, %rcx
	jne	.LBB449_81
.LBB449_80:                             #   in Loop: Header=BB449_1 Depth=1
	movq	%rdi, %rax
	jmp	.LBB449_85
.LBB449_7:                              # %skip.exit
                                        #   in Loop: Header=BB449_1 Depth=1
	cmpl	$41, %eax
	jne	.LBB449_26
	jmp	.LBB449_8
.LBB449_25:                             # %skip.exit
                                        #   in Loop: Header=BB449_1 Depth=1
	cmpl	$93, %eax
	je	.LBB449_57
.LBB449_26:                             # %"$22"
                                        #   in Loop: Header=BB449_1 Depth=1
	subq	$32, %rsp
	xorl	%ecx, %ecx
	callq	read0
.LBB449_74:                             # %"$2"
                                        #   in Loop: Header=BB449_1 Depth=1
	movq	%rax, %rcx
	movq	%rsi, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, 8(%rdi)
	movq	%rax, %rdi
	jmp	.LBB449_1
.LBB449_77:                             # %"$28"
                                        #   in Loop: Header=BB449_1 Depth=1
	movq	(%rcx), %rcx
	cmpq	%rsi, %rcx
	je	.LBB449_80
.LBB449_81:                             # %"$30"
                                        #   in Loop: Header=BB449_1 Depth=1
	testb	$15, %cl
	je	.LBB449_83
# %bb.82:                               # %"$32"
                                        #   in Loop: Header=BB449_1 Depth=1
	subq	$32, %rsp
	movq	%rsi, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, 8(%rdi)
	jmp	.LBB449_85
.LBB449_83:                             # %"$31"
                                        #   in Loop: Header=BB449_1 Depth=1
	movq	%rcx, 8(%rdi)
	.p2align	4, 0x90
.LBB449_84:                             # %"$33"
                                        #   Parent Loop BB449_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rdi, %rax
	movq	8(%rdi), %rdi
	testb	$15, %dil
	je	.LBB449_84
.LBB449_85:                             # %"$29"
                                        #   in Loop: Header=BB449_1 Depth=1
	movq	8(%rbx), %rcx
	movq	%rcx, env(%rip)
	movq	%rax, %rdi
	jmp	.LBB449_1
	.p2align	4, 0x90
.LBB449_53:                             # %comment.exit.i24
                                        #   in Loop: Header=BB449_28 Depth=1
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
.LBB449_28:                             # %"$11"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB449_30 Depth 2
                                        #     Child Loop BB449_41 Depth 2
                                        #     Child Loop BB449_46 Depth 2
	movl	($Chr)(%rip), %eax
	testl	%eax, %eax
	js	.LBB449_32
.LBB449_30:                             # %"$5.i8"
                                        #   Parent Loop BB449_28 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$32, %eax
	jg	.LBB449_39
# %bb.31:                               # %"$6.i9"
                                        #   in Loop: Header=BB449_30 Depth=2
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	testl	%eax, %eax
	jns	.LBB449_30
	jmp	.LBB449_32
	.p2align	4, 0x90
.LBB449_39:                             # %"$7.i10"
                                        #   in Loop: Header=BB449_28 Depth=1
	cmpl	$35, %eax
	jne	.LBB449_32
# %bb.40:                               # %"$11.i11"
                                        #   in Loop: Header=BB449_28 Depth=1
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	cmpl	$123, %eax
	jne	.LBB449_41
# %bb.44:                               # %"$5.preheader.i.i14"
                                        #   in Loop: Header=BB449_28 Depth=1
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB449_53
# %bb.45:                               # %"$6.i.i15.preheader"
                                        #   in Loop: Header=BB449_28 Depth=1
	xorl	%esi, %esi
	jmp	.LBB449_46
	.p2align	4, 0x90
.LBB449_41:                             # %"$17.preheader.i.i13"
                                        #   Parent Loop BB449_28 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, %eax
	je	.LBB449_53
# %bb.42:                               # %"$17.preheader.i.i13"
                                        #   in Loop: Header=BB449_41 Depth=2
	testl	%eax, %eax
	js	.LBB449_53
# %bb.43:                               # %"$20.i.i23"
                                        #   in Loop: Header=BB449_41 Depth=2
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	jmp	.LBB449_41
	.p2align	4, 0x90
.LBB449_48:                             # %"$10.i.i17"
                                        #   in Loop: Header=BB449_46 Depth=2
	incq	%rsi
.LBB449_52:                             # %"$12.i.i21"
                                        #   in Loop: Header=BB449_46 Depth=2
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB449_53
.LBB449_46:                             # %"$6.i.i15"
                                        #   Parent Loop BB449_28 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$35, %eax
	jne	.LBB449_49
# %bb.47:                               # %"$8.i.i16"
                                        #   in Loop: Header=BB449_46 Depth=2
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	cmpl	$123, %eax
	je	.LBB449_48
.LBB449_49:                             # %"$11.i.i18"
                                        #   in Loop: Header=BB449_46 Depth=2
	cmpl	$125, %eax
	jne	.LBB449_52
# %bb.50:                               # %"$14.i.i19"
                                        #   in Loop: Header=BB449_46 Depth=2
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	cmpl	$35, %eax
	jne	.LBB449_52
# %bb.51:                               # %"$13.i.i20"
                                        #   in Loop: Header=BB449_46 Depth=2
	decq	%rsi
	jns	.LBB449_52
	jmp	.LBB449_53
.LBB449_32:                             # %skip.exit25
	cmpl	$41, %eax
	je	.LBB449_35
# %bb.33:                               # %skip.exit25
	cmpl	$93, %eax
	je	.LBB449_35
# %bb.34:                               # %"$15"
	subq	$32, %rsp
	xorl	%ecx, %ecx
	callq	read0
	addq	$32, %rsp
	movq	%rax, %r14
.LBB449_35:                             # %"$16"
	movq	%r14, 8(%rdi)
	jmp	.LBB449_36
	.p2align	4, 0x90
.LBB449_71:                             # %comment.exit.i43
                                        #   in Loop: Header=BB449_36 Depth=1
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
.LBB449_36:                             # %"$16"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB449_37 Depth 2
                                        #     Child Loop BB449_59 Depth 2
                                        #     Child Loop BB449_64 Depth 2
	movl	($Chr)(%rip), %eax
	testl	%eax, %eax
	js	.LBB449_72
.LBB449_37:                             # %"$5.i27"
                                        #   Parent Loop BB449_36 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$32, %eax
	jg	.LBB449_54
# %bb.38:                               # %"$6.i28"
                                        #   in Loop: Header=BB449_37 Depth=2
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	testl	%eax, %eax
	jns	.LBB449_37
	jmp	.LBB449_56
	.p2align	4, 0x90
.LBB449_54:                             # %"$7.i29"
                                        #   in Loop: Header=BB449_36 Depth=1
	cmpl	$35, %eax
	jne	.LBB449_55
# %bb.58:                               # %"$11.i30"
                                        #   in Loop: Header=BB449_36 Depth=1
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	cmpl	$123, %eax
	jne	.LBB449_59
# %bb.62:                               # %"$5.preheader.i.i33"
                                        #   in Loop: Header=BB449_36 Depth=1
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB449_71
# %bb.63:                               # %"$6.i.i34.preheader"
                                        #   in Loop: Header=BB449_36 Depth=1
	xorl	%esi, %esi
	jmp	.LBB449_64
	.p2align	4, 0x90
.LBB449_59:                             # %"$17.preheader.i.i32"
                                        #   Parent Loop BB449_36 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, %eax
	je	.LBB449_71
# %bb.60:                               # %"$17.preheader.i.i32"
                                        #   in Loop: Header=BB449_59 Depth=2
	testl	%eax, %eax
	js	.LBB449_71
# %bb.61:                               # %"$20.i.i42"
                                        #   in Loop: Header=BB449_59 Depth=2
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	jmp	.LBB449_59
	.p2align	4, 0x90
.LBB449_66:                             # %"$10.i.i36"
                                        #   in Loop: Header=BB449_64 Depth=2
	incq	%rsi
.LBB449_70:                             # %"$12.i.i40"
                                        #   in Loop: Header=BB449_64 Depth=2
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB449_71
.LBB449_64:                             # %"$6.i.i34"
                                        #   Parent Loop BB449_36 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$35, %eax
	jne	.LBB449_67
# %bb.65:                               # %"$8.i.i35"
                                        #   in Loop: Header=BB449_64 Depth=2
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	cmpl	$123, %eax
	je	.LBB449_66
.LBB449_67:                             # %"$11.i.i37"
                                        #   in Loop: Header=BB449_64 Depth=2
	cmpl	$125, %eax
	jne	.LBB449_70
# %bb.68:                               # %"$14.i.i38"
                                        #   in Loop: Header=BB449_64 Depth=2
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	cmpl	$35, %eax
	jne	.LBB449_70
# %bb.69:                               # %"$13.i.i39"
                                        #   in Loop: Header=BB449_64 Depth=2
	decq	%rsi
	jns	.LBB449_70
	jmp	.LBB449_71
.LBB449_55:                             # %"$7.i29"
	cmpl	$41, %eax
	jne	.LBB449_56
.LBB449_8:                              # %"$5"
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	jmp	.LBB449_57
.LBB449_56:                             # %"$18"
	cmpl	$93, ($Chr)(%rip)
	jne	.LBB449_72
.LBB449_57:                             # %"$4"
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB449_72:                             # %"$21"
	subq	$32, %rsp
	leaq	.L$42(%rip), %r8
	xorl	%ecx, %ecx
	movq	%r14, %rdx
	xorl	%r9d, %r9d
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 flushAll;
	.scl	2;
	.type	32;
	.endef
	.globl	flushAll                        # -- Begin function flushAll
	.p2align	4, 0x90
flushAll:                               # @flushAll
.seh_proc flushAll
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movl	($OutFDs)(%rip), %esi
	testl	%esi, %esi
	jle	.LBB450_6
# %bb.1:                                # %"$3.preheader"
	movq	($OutFiles)(%rip), %rdi
	xorl	%ebx, %ebx
	jmp	.LBB450_2
	.p2align	4, 0x90
.LBB450_5:                              # %flush.exit
                                        #   in Loop: Header=BB450_2 Depth=1
	incq	%rbx
	cmpl	%ebx, %esi
	jle	.LBB450_6
.LBB450_2:                              # %"$3"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi,%rbx,8), %rdx
	testq	%rdx, %rdx
	je	.LBB450_5
# %bb.3:                                # %"$3.i"
                                        #   in Loop: Header=BB450_2 Depth=1
	movl	4(%rdx), %r8d
	testl	%r8d, %r8d
	je	.LBB450_5
# %bb.4:                                # %"$6.i"
                                        #   in Loop: Header=BB450_2 Depth=1
	movl	$0, 4(%rdx)
	movl	(%rdx), %ecx
	addq	$8, %rdx
	callq	wrBytes
	jmp	.LBB450_5
.LBB450_6:                              # %"$4"
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 outAo;
	.scl	2;
	.type	32;
	.endef
	.globl	outAo                           # -- Begin function outAo
	.p2align	4, 0x90
outAo:                                  # @outAo
.seh_proc outAo
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movl	%ecx, %esi
	cmpl	$16, %ecx
	jl	.LBB451_2
# %bb.1:                                # %"$2"
	movl	%esi, %ecx
	shrl	$4, %ecx
	callq	outAo
	andb	$15, %sil
.LBB451_2:                              # %"$3"
	addb	$64, %sil
	movl	%esi, %ecx
	addq	$32, %rsp
	popq	%rsi
	rex64 jmpq	*($Put)(%rip)           # TAILCALL
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 outOct;
	.scl	2;
	.type	32;
	.endef
	.globl	outOct                          # -- Begin function outOct
	.p2align	4, 0x90
outOct:                                 # @outOct
.seh_proc outOct
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	cmpq	$8, %rcx
	jb	.LBB452_2
# %bb.1:                                # %"$2"
	movq	%rsi, %rcx
	shrq	$3, %rcx
	callq	outOct
	andb	$7, %sil
.LBB452_2:                              # %"$3"
	addb	$48, %sil
	movl	%esi, %ecx
	addq	$32, %rsp
	popq	%rsi
	rex64 jmpq	*($Put)(%rip)           # TAILCALL
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 printName;
	.scl	2;
	.type	32;
	.endef
	.globl	printName                       # -- Begin function printName
	.p2align	4, 0x90
printName:                              # @printName
.seh_proc printName
# %bb.0:                                # %"$1"
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rcx, %rdi
	cmpq	$2, %rcx
	je	.LBB453_1
# %bb.2:                                # %"$1"
	cmpq	$738, %rdi                      # imm = 0x2E2
	jne	.LBB453_3
# %bb.19:                               # %"$3"
	movb	$92, %cl
	callq	*($Put)(%rip)
	movb	$46, %cl
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	rex64 jmpq	*($Put)(%rip)           # TAILCALL
.LBB453_1:
	xorl	%esi, %esi
	xorl	%ebx, %ebx
	jmp	.LBB453_8
.LBB453_3:                              # %"$5.i"
	testb	$2, %dil
	jne	.LBB453_4
# %bb.5:                                # %"$7.i"
	movq	-4(%rdi), %rbx
	movq	4(%rdi), %rdi
	jmp	.LBB453_6
.LBB453_4:                              # %"$8.i"
	movq	%rdi, %rbx
	shrq	$4, %rbx
	movl	$2, %edi
.LBB453_6:                              # %symByte.exit
	movq	%rbx, %rsi
	shrq	$8, %rsi
	cmpb	$35, %bl
	jne	.LBB453_8
# %bb.7:                                # %"$5"
	movb	$92, %cl
	callq	*($Put)(%rip)
	movb	$35, %bl
.LBB453_8:                              # %"$7.preheader"
	leaq	($Delim)(%rip), %r14
	jmp	.LBB453_9
.LBB453_16:                             # %"$7.i9"
                                        #   in Loop: Header=BB453_9 Depth=1
	movq	-4(%rdi), %rsi
	movq	4(%rdi), %rdi
	.p2align	4, 0x90
.LBB453_17:                             # %symByte.exit11
                                        #   in Loop: Header=BB453_9 Depth=1
	movl	%esi, %ebx
	shrq	$8, %rsi
	testb	%bl, %bl
	je	.LBB453_18
.LBB453_9:                              # %"$7"
                                        # =>This Inner Loop Header: Depth=1
	cmpb	$92, %bl
	je	.LBB453_11
# %bb.10:                               # %"$8"
                                        #   in Loop: Header=BB453_9 Depth=1
	movzbl	%bl, %edx
	movl	$16, %r8d
	movq	%r14, %rcx
	callq	memchr
	testq	%rax, %rax
	je	.LBB453_12
.LBB453_11:                             # %"$10"
                                        #   in Loop: Header=BB453_9 Depth=1
	movb	$92, %cl
	callq	*($Put)(%rip)
.LBB453_12:                             # %"$11"
                                        #   in Loop: Header=BB453_9 Depth=1
	movl	%ebx, %ecx
	callq	*($Put)(%rip)
	testq	%rsi, %rsi
	jne	.LBB453_17
# %bb.13:                               # %"$2.i4"
                                        #   in Loop: Header=BB453_9 Depth=1
	cmpq	$2, %rdi
	je	.LBB453_18
# %bb.14:                               # %"$5.i7"
                                        #   in Loop: Header=BB453_9 Depth=1
	testb	$2, %dil
	je	.LBB453_16
# %bb.15:                               # %"$8.i8"
                                        #   in Loop: Header=BB453_9 Depth=1
	movq	%rdi, %rsi
	shrq	$4, %rsi
	movl	$2, %edi
	jmp	.LBB453_17
.LBB453_18:                             # %"$4"
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 writeErr;
	.scl	2;
	.type	32;
	.endef
	.globl	writeErr                        # -- Begin function writeErr
	.p2align	4, 0x90
writeErr:                               # @writeErr
.seh_proc writeErr
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	callq	strErrno
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rsi, %r8
	movq	%rax, %r9
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 popOutFiles;
	.scl	2;
	.type	32;
	.endef
	.globl	popOutFiles                     # -- Begin function popOutFiles
	.p2align	4, 0x90
popOutFiles:                            # @popOutFiles
.seh_proc popOutFiles
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$48, %rsp
	.seh_stackalloc 48
	.seh_endprologue
	movq	($OutFile)(%rip), %rdx
	testq	%rdx, %rdx
	je	.LBB455_3
# %bb.1:                                # %"$3.i"
	movl	4(%rdx), %r8d
	testl	%r8d, %r8d
	je	.LBB455_3
# %bb.2:                                # %"$6.i3"
	movl	$0, 4(%rdx)
	movl	(%rdx), %ecx
	addq	$8, %rdx
	callq	wrBytes
.LBB455_3:                              # %flush.exit
	movq	env+40(%rip), %rbx
	movq	8(%rbx), %rsi
	movl	(%rsi), %ecx
	testl	%ecx, %ecx
	js	.LBB455_18
# %bb.4:                                # %"$2"
	cmpl	$0, 24(%rbx)
	je	.LBB455_18
# %bb.5:                                # %"$4"
	callq	close
	movslq	(%rsi), %rax
	cmpl	%eax, ($OutFDs)(%rip)
	jle	.LBB455_10
# %bb.6:                                # %"$2.i"
	movq	($OutFiles)(%rip), %rcx
	movq	(%rcx,%rax,8), %rax
	cmpq	($OutFile)(%rip), %rax
	jne	.LBB455_8
# %bb.7:                                # %"$4.i"
	movq	8(%rcx), %rcx
	movq	%rcx, ($OutFile)(%rip)
.LBB455_8:                              # %"$5.i"
	testq	%rax, %rax
	je	.LBB455_10
# %bb.9:                                # %"$6.i"
	movl	$-1, (%rax)
.LBB455_10:                             # %closeOutFile.exit
	movl	24(%rbx), %esi
	cmpl	$2, %esi
	jl	.LBB455_18
# %bb.11:                               # %"$6"
	leaq	44(%rsp), %rdx
	movl	%esi, %ecx
	xorl	%r8d, %r8d
	callq	waitpid
	testl	%eax, %eax
	js	.LBB455_12
.LBB455_17:                             # %waitFile.exit
	movslq	44(%rsp), %rax
	shlq	$4, %rax
	orq	$2, %rax
	movq	%rax, SymTab+456(%rip)
.LBB455_18:                             # %"$3"
	movq	(%rbx), %rax
	movq	%rax, env+40(%rip)
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
.LBB455_12:                             # %"$3.i6.preheader"
	leaq	44(%rsp), %rdi
	jmp	.LBB455_13
	.p2align	4, 0x90
.LBB455_16:                             # %"$8.i"
                                        #   in Loop: Header=BB455_13 Depth=1
	movl	%esi, %ecx
	movq	%rdi, %rdx
	xorl	%r8d, %r8d
	callq	waitpid
	testl	%eax, %eax
	jns	.LBB455_17
.LBB455_13:                             # %"$3.i6"
                                        # =>This Inner Loop Header: Depth=1
	callq	gErrno
	cmpl	$2, %eax
	jne	.LBB455_19
# %bb.14:                               # %"$6.i9"
                                        #   in Loop: Header=BB455_13 Depth=1
	cmpl	$0, ($Signal)(%rip)
	je	.LBB455_16
# %bb.15:                               # %"$7.i"
                                        #   in Loop: Header=BB455_13 Depth=1
	xorl	%ecx, %ecx
	callq	sighandler
	jmp	.LBB455_16
.LBB455_19:                             # %"$5.i7"
	callq	closeErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 varErr;
	.scl	2;
	.type	32;
	.endef
	.globl	varErr                          # -- Begin function varErr
	.p2align	4, 0x90
varErr:                                 # @varErr
.seh_proc varErr
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	leaq	.L$18(%rip), %r8
	xorl	%r9d, %r9d
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 protErr;
	.scl	2;
	.type	32;
	.endef
	.globl	protErr                         # -- Begin function protErr
	.p2align	4, 0x90
protErr:                                # @protErr
.seh_proc protErr
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	leaq	.L$20(%rip), %r8
	xorl	%r9d, %r9d
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 brkLoad;
	.scl	2;
	.type	32;
	.endef
	.globl	brkLoad                         # -- Begin function brkLoad
	.p2align	4, 0x90
brkLoad:                                # @brkLoad
.seh_proc brkLoad
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rsi
	movq	($InFiles)(%rip), %rax
	movq	(%rax), %rax
	cmpb	$1, 4128(%rax)
	jne	.LBB458_8
# %bb.1:                                # %"$3"
	movq	($OutFiles)(%rip), %rax
	movq	8(%rax), %rax
	cmpb	$1, 4104(%rax)
	jne	.LBB458_8
# %bb.2:                                # %"$3"
	cmpq	$0, env+16(%rip)
	jne	.LBB458_8
# %bb.3:                                # %"$5"
	movq	env+8(%rip), %rcx
	leaq	SymTab+440(%rip), %r8
	movq	SymTab+440(%rip), %rdi
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdx
	movq	%rdi, (%rdx)
	movq	%rdx, %rax
	orq	$8, %rax
	movq	%r8, (%rax)
	movq	%rcx, 16(%rdx)
	movq	$0, 24(%rdx)
	leaq	SymTab+728(%rip), %r8
	movq	SymTab+728(%rip), %rdi
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rcx
	movq	%rdi, (%rcx)
	movq	%rcx, %rax
	orq	$8, %rax
	movq	%r8, (%rax)
	movq	%rdx, 16(%rcx)
	movq	%rsi, SymTab+728(%rip)
	leaq	SymTab+600(%rip), %r8
	movq	SymTab+600(%rip), %rdi
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdx
	movq	%rdi, (%rdx)
	movq	%rdx, %rax
	orq	$8, %rax
	movq	%r8, (%rax)
	movq	%rcx, 16(%rdx)
	movq	%rdx, env+8(%rip)
	movq	%rdx, env+16(%rip)
	leaq	SymTab+8(%rip), %rax
	movq	%rax, SymTab+600(%rip)
	movq	Termio(%rip), %rbx
	subq	$32, %rsp
	callq	setCooked
	addq	$32, %rsp
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	($OutFiles)(%rip), %rcx
	movq	8(%rcx), %rcx
	movq	env+40(%rip), %rdx
	movq	%rdx, (%rax)
	testq	%rdx, %rdx
	je	.LBB458_5
# %bb.4:                                # %"$2.i"
	movq	($Put)(%rip), %rdi
	movq	%rdi, 16(%rdx)
.LBB458_5:                              # %pushOutFile.exit
	leaq	_putStdout(%rip), %rdx
	movq	%rdx, ($Put)(%rip)
	movq	%rcx, ($OutFile)(%rip)
	movq	%rcx, 8(%rax)
	movl	$0, 24(%rax)
	movq	%rax, env+40(%rip)
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	print
	movb	$10, %cl
	callq	*($Put)(%rip)
	leaq	.L$79(%rip), %rdx
	leaq	SymTab+8(%rip), %r8
	xorl	%ecx, %ecx
	callq	repl
	callq	popOutFiles
	addq	$32, %rsp
	movq	env+40(%rip), %rax
	movq	8(%rax), %rcx
	movq	%rcx, ($OutFile)(%rip)
	movq	16(%rax), %rax
	movq	%rax, ($Put)(%rip)
	testq	%rbx, %rbx
	je	.LBB458_7
# %bb.6:                                # %"$7"
	subq	$32, %rsp
	callq	setRaw
	addq	$32, %rsp
.LBB458_7:                              # %"$8"
	movq	SymTab+728(%rip), %rsi
	movq	env+8(%rip), %rax
	movq	(%rax), %rcx
	movq	%rcx, SymTab+600(%rip)
	movq	16(%rax), %rax
	movq	(%rax), %rcx
	movq	%rcx, SymTab+728(%rip)
	movq	16(%rax), %rax
	movq	(%rax), %rcx
	movq	%rcx, SymTab+440(%rip)
	movq	16(%rax), %rax
	movq	%rax, env+8(%rip)
	movq	$0, env+16(%rip)
.LBB458_8:                              # %"$6"
	movq	%rsi, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 lstErr;
	.scl	2;
	.type	32;
	.endef
	.globl	lstErr                          # -- Begin function lstErr
	.p2align	4, 0x90
lstErr:                                 # @lstErr
.seh_proc lstErr
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	leaq	.L$17(%rip), %r8
	xorl	%r9d, %r9d
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 cntErr;
	.scl	2;
	.type	32;
	.endef
	.globl	cntErr                          # -- Begin function cntErr
	.p2align	4, 0x90
cntErr:                                 # @cntErr
.seh_proc cntErr
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	leaq	.L$9(%rip), %r8
	xorl	%r9d, %r9d
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cb1;
	.scl	2;
	.type	32;
	.endef
	.globl	_cb1                            # -- Begin function _cb1
	.p2align	4, 0x90
_cb1:                                   # @_cb1
.seh_proc _cb1
# %bb.0:                                # %"$1"
	subq	$56, %rsp
	.seh_stackalloc 56
	.seh_endprologue
	movq	%r8, %rax
	movq	%rdx, %r8
	movq	%rcx, %rdx
	movq	96(%rsp), %r10
	movq	gcData+48(%rip), %rcx
	movq	%r10, 40(%rsp)
	movq	%r9, 32(%rsp)
	movq	%rax, %r9
	callq	cbl
	nop
	addq	$56, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cb2;
	.scl	2;
	.type	32;
	.endef
	.globl	_cb2                            # -- Begin function _cb2
	.p2align	4, 0x90
_cb2:                                   # @_cb2
.seh_proc _cb2
# %bb.0:                                # %"$1"
	subq	$56, %rsp
	.seh_stackalloc 56
	.seh_endprologue
	movq	%r8, %rax
	movq	%rdx, %r8
	movq	%rcx, %rdx
	movq	96(%rsp), %r10
	movq	gcData+64(%rip), %rcx
	movq	%r10, 40(%rsp)
	movq	%r9, 32(%rsp)
	movq	%rax, %r9
	callq	cbl
	nop
	addq	$56, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cb3;
	.scl	2;
	.type	32;
	.endef
	.globl	_cb3                            # -- Begin function _cb3
	.p2align	4, 0x90
_cb3:                                   # @_cb3
.seh_proc _cb3
# %bb.0:                                # %"$1"
	subq	$56, %rsp
	.seh_stackalloc 56
	.seh_endprologue
	movq	%r8, %rax
	movq	%rdx, %r8
	movq	%rcx, %rdx
	movq	96(%rsp), %r10
	movq	gcData+80(%rip), %rcx
	movq	%r10, 40(%rsp)
	movq	%r9, 32(%rsp)
	movq	%rax, %r9
	callq	cbl
	nop
	addq	$56, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cb4;
	.scl	2;
	.type	32;
	.endef
	.globl	_cb4                            # -- Begin function _cb4
	.p2align	4, 0x90
_cb4:                                   # @_cb4
.seh_proc _cb4
# %bb.0:                                # %"$1"
	subq	$56, %rsp
	.seh_stackalloc 56
	.seh_endprologue
	movq	%r8, %rax
	movq	%rdx, %r8
	movq	%rcx, %rdx
	movq	96(%rsp), %r10
	movq	gcData+96(%rip), %rcx
	movq	%r10, 40(%rsp)
	movq	%r9, 32(%rsp)
	movq	%rax, %r9
	callq	cbl
	nop
	addq	$56, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cb5;
	.scl	2;
	.type	32;
	.endef
	.globl	_cb5                            # -- Begin function _cb5
	.p2align	4, 0x90
_cb5:                                   # @_cb5
.seh_proc _cb5
# %bb.0:                                # %"$1"
	subq	$56, %rsp
	.seh_stackalloc 56
	.seh_endprologue
	movq	%r8, %rax
	movq	%rdx, %r8
	movq	%rcx, %rdx
	movq	96(%rsp), %r10
	movq	gcData+112(%rip), %rcx
	movq	%r10, 40(%rsp)
	movq	%r9, 32(%rsp)
	movq	%rax, %r9
	callq	cbl
	nop
	addq	$56, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cb6;
	.scl	2;
	.type	32;
	.endef
	.globl	_cb6                            # -- Begin function _cb6
	.p2align	4, 0x90
_cb6:                                   # @_cb6
.seh_proc _cb6
# %bb.0:                                # %"$1"
	subq	$56, %rsp
	.seh_stackalloc 56
	.seh_endprologue
	movq	%r8, %rax
	movq	%rdx, %r8
	movq	%rcx, %rdx
	movq	96(%rsp), %r10
	movq	gcData+128(%rip), %rcx
	movq	%r10, 40(%rsp)
	movq	%r9, 32(%rsp)
	movq	%rax, %r9
	callq	cbl
	nop
	addq	$56, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cb7;
	.scl	2;
	.type	32;
	.endef
	.globl	_cb7                            # -- Begin function _cb7
	.p2align	4, 0x90
_cb7:                                   # @_cb7
.seh_proc _cb7
# %bb.0:                                # %"$1"
	subq	$56, %rsp
	.seh_stackalloc 56
	.seh_endprologue
	movq	%r8, %rax
	movq	%rdx, %r8
	movq	%rcx, %rdx
	movq	96(%rsp), %r10
	movq	gcData+144(%rip), %rcx
	movq	%r10, 40(%rsp)
	movq	%r9, 32(%rsp)
	movq	%rax, %r9
	callq	cbl
	nop
	addq	$56, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cb8;
	.scl	2;
	.type	32;
	.endef
	.globl	_cb8                            # -- Begin function _cb8
	.p2align	4, 0x90
_cb8:                                   # @_cb8
.seh_proc _cb8
# %bb.0:                                # %"$1"
	subq	$56, %rsp
	.seh_stackalloc 56
	.seh_endprologue
	movq	%r8, %rax
	movq	%rdx, %r8
	movq	%rcx, %rdx
	movq	96(%rsp), %r10
	movq	gcData+160(%rip), %rcx
	movq	%r10, 40(%rsp)
	movq	%r9, 32(%rsp)
	movq	%rax, %r9
	callq	cbl
	nop
	addq	$56, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cb9;
	.scl	2;
	.type	32;
	.endef
	.globl	_cb9                            # -- Begin function _cb9
	.p2align	4, 0x90
_cb9:                                   # @_cb9
.seh_proc _cb9
# %bb.0:                                # %"$1"
	subq	$56, %rsp
	.seh_stackalloc 56
	.seh_endprologue
	movq	%r8, %rax
	movq	%rdx, %r8
	movq	%rcx, %rdx
	movq	96(%rsp), %r10
	movq	gcData+176(%rip), %rcx
	movq	%r10, 40(%rsp)
	movq	%r9, 32(%rsp)
	movq	%rax, %r9
	callq	cbl
	nop
	addq	$56, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cb10;
	.scl	2;
	.type	32;
	.endef
	.globl	_cb10                           # -- Begin function _cb10
	.p2align	4, 0x90
_cb10:                                  # @_cb10
.seh_proc _cb10
# %bb.0:                                # %"$1"
	subq	$56, %rsp
	.seh_stackalloc 56
	.seh_endprologue
	movq	%r8, %rax
	movq	%rdx, %r8
	movq	%rcx, %rdx
	movq	96(%rsp), %r10
	movq	gcData+192(%rip), %rcx
	movq	%r10, 40(%rsp)
	movq	%r9, 32(%rsp)
	movq	%rax, %r9
	callq	cbl
	nop
	addq	$56, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cb11;
	.scl	2;
	.type	32;
	.endef
	.globl	_cb11                           # -- Begin function _cb11
	.p2align	4, 0x90
_cb11:                                  # @_cb11
.seh_proc _cb11
# %bb.0:                                # %"$1"
	subq	$56, %rsp
	.seh_stackalloc 56
	.seh_endprologue
	movq	%r8, %rax
	movq	%rdx, %r8
	movq	%rcx, %rdx
	movq	96(%rsp), %r10
	movq	gcData+208(%rip), %rcx
	movq	%r10, 40(%rsp)
	movq	%r9, 32(%rsp)
	movq	%rax, %r9
	callq	cbl
	nop
	addq	$56, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cb12;
	.scl	2;
	.type	32;
	.endef
	.globl	_cb12                           # -- Begin function _cb12
	.p2align	4, 0x90
_cb12:                                  # @_cb12
.seh_proc _cb12
# %bb.0:                                # %"$1"
	subq	$56, %rsp
	.seh_stackalloc 56
	.seh_endprologue
	movq	%r8, %rax
	movq	%rdx, %r8
	movq	%rcx, %rdx
	movq	96(%rsp), %r10
	movq	gcData+224(%rip), %rcx
	movq	%r10, 40(%rsp)
	movq	%r9, 32(%rsp)
	movq	%rax, %r9
	callq	cbl
	nop
	addq	$56, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cb13;
	.scl	2;
	.type	32;
	.endef
	.globl	_cb13                           # -- Begin function _cb13
	.p2align	4, 0x90
_cb13:                                  # @_cb13
.seh_proc _cb13
# %bb.0:                                # %"$1"
	subq	$56, %rsp
	.seh_stackalloc 56
	.seh_endprologue
	movq	%r8, %rax
	movq	%rdx, %r8
	movq	%rcx, %rdx
	movq	96(%rsp), %r10
	movq	gcData+240(%rip), %rcx
	movq	%r10, 40(%rsp)
	movq	%r9, 32(%rsp)
	movq	%rax, %r9
	callq	cbl
	nop
	addq	$56, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cb14;
	.scl	2;
	.type	32;
	.endef
	.globl	_cb14                           # -- Begin function _cb14
	.p2align	4, 0x90
_cb14:                                  # @_cb14
.seh_proc _cb14
# %bb.0:                                # %"$1"
	subq	$56, %rsp
	.seh_stackalloc 56
	.seh_endprologue
	movq	%r8, %rax
	movq	%rdx, %r8
	movq	%rcx, %rdx
	movq	96(%rsp), %r10
	movq	gcData+256(%rip), %rcx
	movq	%r10, 40(%rsp)
	movq	%r9, 32(%rsp)
	movq	%rax, %r9
	callq	cbl
	nop
	addq	$56, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cb15;
	.scl	2;
	.type	32;
	.endef
	.globl	_cb15                           # -- Begin function _cb15
	.p2align	4, 0x90
_cb15:                                  # @_cb15
.seh_proc _cb15
# %bb.0:                                # %"$1"
	subq	$56, %rsp
	.seh_stackalloc 56
	.seh_endprologue
	movq	%r8, %rax
	movq	%rdx, %r8
	movq	%rcx, %rdx
	movq	96(%rsp), %r10
	movq	gcData+272(%rip), %rcx
	movq	%r10, 40(%rsp)
	movq	%r9, 32(%rsp)
	movq	%rax, %r9
	callq	cbl
	nop
	addq	$56, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cb16;
	.scl	2;
	.type	32;
	.endef
	.globl	_cb16                           # -- Begin function _cb16
	.p2align	4, 0x90
_cb16:                                  # @_cb16
.seh_proc _cb16
# %bb.0:                                # %"$1"
	subq	$56, %rsp
	.seh_stackalloc 56
	.seh_endprologue
	movq	%r8, %rax
	movq	%rdx, %r8
	movq	%rcx, %rdx
	movq	96(%rsp), %r10
	movq	gcData+288(%rip), %rcx
	movq	%r10, 40(%rsp)
	movq	%r9, 32(%rsp)
	movq	%rax, %r9
	callq	cbl
	nop
	addq	$56, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cb17;
	.scl	2;
	.type	32;
	.endef
	.globl	_cb17                           # -- Begin function _cb17
	.p2align	4, 0x90
_cb17:                                  # @_cb17
.seh_proc _cb17
# %bb.0:                                # %"$1"
	subq	$56, %rsp
	.seh_stackalloc 56
	.seh_endprologue
	movq	%r8, %rax
	movq	%rdx, %r8
	movq	%rcx, %rdx
	movq	96(%rsp), %r10
	movq	gcData+304(%rip), %rcx
	movq	%r10, 40(%rsp)
	movq	%r9, 32(%rsp)
	movq	%rax, %r9
	callq	cbl
	nop
	addq	$56, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cb18;
	.scl	2;
	.type	32;
	.endef
	.globl	_cb18                           # -- Begin function _cb18
	.p2align	4, 0x90
_cb18:                                  # @_cb18
.seh_proc _cb18
# %bb.0:                                # %"$1"
	subq	$56, %rsp
	.seh_stackalloc 56
	.seh_endprologue
	movq	%r8, %rax
	movq	%rdx, %r8
	movq	%rcx, %rdx
	movq	96(%rsp), %r10
	movq	gcData+320(%rip), %rcx
	movq	%r10, 40(%rsp)
	movq	%r9, 32(%rsp)
	movq	%rax, %r9
	callq	cbl
	nop
	addq	$56, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cb19;
	.scl	2;
	.type	32;
	.endef
	.globl	_cb19                           # -- Begin function _cb19
	.p2align	4, 0x90
_cb19:                                  # @_cb19
.seh_proc _cb19
# %bb.0:                                # %"$1"
	subq	$56, %rsp
	.seh_stackalloc 56
	.seh_endprologue
	movq	%r8, %rax
	movq	%rdx, %r8
	movq	%rcx, %rdx
	movq	96(%rsp), %r10
	movq	gcData+336(%rip), %rcx
	movq	%r10, 40(%rsp)
	movq	%r9, 32(%rsp)
	movq	%rax, %r9
	callq	cbl
	nop
	addq	$56, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cb20;
	.scl	2;
	.type	32;
	.endef
	.globl	_cb20                           # -- Begin function _cb20
	.p2align	4, 0x90
_cb20:                                  # @_cb20
.seh_proc _cb20
# %bb.0:                                # %"$1"
	subq	$56, %rsp
	.seh_stackalloc 56
	.seh_endprologue
	movq	%r8, %rax
	movq	%rdx, %r8
	movq	%rcx, %rdx
	movq	96(%rsp), %r10
	movq	gcData+352(%rip), %rcx
	movq	%r10, 40(%rsp)
	movq	%r9, 32(%rsp)
	movq	%rax, %r9
	callq	cbl
	nop
	addq	$56, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cb21;
	.scl	2;
	.type	32;
	.endef
	.globl	_cb21                           # -- Begin function _cb21
	.p2align	4, 0x90
_cb21:                                  # @_cb21
.seh_proc _cb21
# %bb.0:                                # %"$1"
	subq	$56, %rsp
	.seh_stackalloc 56
	.seh_endprologue
	movq	%r8, %rax
	movq	%rdx, %r8
	movq	%rcx, %rdx
	movq	96(%rsp), %r10
	movq	gcData+368(%rip), %rcx
	movq	%r10, 40(%rsp)
	movq	%r9, 32(%rsp)
	movq	%rax, %r9
	callq	cbl
	nop
	addq	$56, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cb22;
	.scl	2;
	.type	32;
	.endef
	.globl	_cb22                           # -- Begin function _cb22
	.p2align	4, 0x90
_cb22:                                  # @_cb22
.seh_proc _cb22
# %bb.0:                                # %"$1"
	subq	$56, %rsp
	.seh_stackalloc 56
	.seh_endprologue
	movq	%r8, %rax
	movq	%rdx, %r8
	movq	%rcx, %rdx
	movq	96(%rsp), %r10
	movq	gcData+384(%rip), %rcx
	movq	%r10, 40(%rsp)
	movq	%r9, 32(%rsp)
	movq	%rax, %r9
	callq	cbl
	nop
	addq	$56, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cb23;
	.scl	2;
	.type	32;
	.endef
	.globl	_cb23                           # -- Begin function _cb23
	.p2align	4, 0x90
_cb23:                                  # @_cb23
.seh_proc _cb23
# %bb.0:                                # %"$1"
	subq	$56, %rsp
	.seh_stackalloc 56
	.seh_endprologue
	movq	%r8, %rax
	movq	%rdx, %r8
	movq	%rcx, %rdx
	movq	96(%rsp), %r10
	movq	gcData+400(%rip), %rcx
	movq	%r10, 40(%rsp)
	movq	%r9, 32(%rsp)
	movq	%rax, %r9
	callq	cbl
	nop
	addq	$56, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 _cb24;
	.scl	2;
	.type	32;
	.endef
	.globl	_cb24                           # -- Begin function _cb24
	.p2align	4, 0x90
_cb24:                                  # @_cb24
.seh_proc _cb24
# %bb.0:                                # %"$1"
	subq	$56, %rsp
	.seh_stackalloc 56
	.seh_endprologue
	movq	%r8, %rax
	movq	%rdx, %r8
	movq	%rcx, %rdx
	movq	96(%rsp), %r10
	movq	gcData+416(%rip), %rcx
	movq	%r10, 40(%rsp)
	movq	%r9, 32(%rsp)
	movq	%rax, %r9
	callq	cbl
	nop
	addq	$56, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 cbl;
	.scl	2;
	.type	32;
	.endef
	.globl	cbl                             # -- Begin function cbl
	.p2align	4, 0x90
cbl:                                    # @cbl
.seh_proc cbl
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	leaq	32(%rsp), %rbp
	.seh_setframe %rbp, 32
	.seh_endprologue
	movq	%r9, %rsi
	movq	%r8, %rdi
	movq	%rdx, %rbx
	movabsq	$1152921504606846976, %r14      # imm = 0x1000000000000000
	movq	$2, -16(%rbp)
	leaq	-8(%rbp), %rax
	movq	%rcx, -8(%rbp)
	movq	%rax, -32(%rbp)
	testq	%rdx, %rdx
	js	.LBB485_6
# %bb.1:                                # %"$2.i"
	cmpq	%r14, %rbx
	jae	.LBB485_2
# %bb.5:                                # %"$6.i"
	shlq	$4, %rbx
	orq	$2, %rbx
	movq	%rbx, %rcx
	jmp	.LBB485_12
.LBB485_6:                              # %"$3.i"
	negq	%rbx
	cmpq	%r14, %rbx
	jae	.LBB485_7
# %bb.10:                               # %"$9.i"
	shlq	$4, %rbx
	orq	$2, %rbx
	movq	%rbx, %rcx
	jmp	.LBB485_11
.LBB485_2:                              # %"$5.i"
	movq	($Avail)(%rip), %rcx
	testq	%rcx, %rcx
	jne	.LBB485_4
# %bb.3:                                # %"$2.i.i"
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rcx
.LBB485_4:                              # %boxNum.exit.i
	movq	(%rcx), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%rbx, (%rcx)
	movq	$2, 8(%rcx)
	addq	$4, %rcx
	jmp	.LBB485_12
.LBB485_7:                              # %"$8.i"
	movq	($Avail)(%rip), %rcx
	testq	%rcx, %rcx
	jne	.LBB485_9
# %bb.8:                                # %"$2.i3.i"
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rcx
.LBB485_9:                              # %boxNum.exit4.i
	movq	(%rcx), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%rbx, (%rcx)
	movq	$2, 8(%rcx)
	addq	$4, %rcx
.LBB485_11:                             # %"$10.i"
	orq	$8, %rcx
.LBB485_12:                             # %box.exit
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	$2, 16(%rbx)
	leaq	24(%rbx), %rax
	movq	%rcx, 24(%rbx)
	movq	%rbx, -24(%rbp)
	movq	%rax, (%rbx)
	testq	%rdi, %rdi
	js	.LBB485_18
# %bb.13:                               # %"$2.i7"
	cmpq	%r14, %rdi
	jae	.LBB485_14
# %bb.17:                               # %"$6.i12"
	shlq	$4, %rdi
	orq	$2, %rdi
	movq	%rdi, %rcx
	jmp	.LBB485_24
.LBB485_18:                             # %"$3.i14"
	negq	%rdi
	cmpq	%r14, %rdi
	jae	.LBB485_19
# %bb.22:                               # %"$9.i19"
	shlq	$4, %rdi
	orq	$2, %rdi
	movq	%rdi, %rcx
	jmp	.LBB485_23
.LBB485_14:                             # %"$5.i9"
	movq	($Avail)(%rip), %rcx
	testq	%rcx, %rcx
	jne	.LBB485_16
# %bb.15:                               # %"$2.i.i10"
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rcx
.LBB485_16:                             # %boxNum.exit.i11
	movq	(%rcx), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%rdi, (%rcx)
	movq	$2, 8(%rcx)
	addq	$4, %rcx
	jmp	.LBB485_24
.LBB485_19:                             # %"$8.i16"
	movq	($Avail)(%rip), %rcx
	testq	%rcx, %rcx
	jne	.LBB485_21
# %bb.20:                               # %"$2.i3.i17"
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rcx
.LBB485_21:                             # %boxNum.exit4.i18
	movq	(%rcx), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%rdi, (%rcx)
	movq	$2, 8(%rcx)
	addq	$4, %rcx
.LBB485_23:                             # %"$10.i20"
	orq	$8, %rcx
.LBB485_24:                             # %box.exit21
	movq	96(%rbp), %r15
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	$2, 16(%rdi)
	leaq	24(%rdi), %rax
	movq	%rcx, 24(%rdi)
	movq	%rdi, 8(%rbx)
	movq	%rax, (%rdi)
	testq	%rsi, %rsi
	js	.LBB485_30
# %bb.25:                               # %"$2.i23"
	cmpq	%r14, %rsi
	jae	.LBB485_26
# %bb.29:                               # %"$6.i28"
	shlq	$4, %rsi
	orq	$2, %rsi
	movq	%rsi, %rcx
	jmp	.LBB485_36
.LBB485_30:                             # %"$3.i30"
	negq	%rsi
	cmpq	%r14, %rsi
	jae	.LBB485_31
# %bb.34:                               # %"$9.i35"
	shlq	$4, %rsi
	orq	$2, %rsi
	movq	%rsi, %rcx
	jmp	.LBB485_35
.LBB485_26:                             # %"$5.i25"
	movq	($Avail)(%rip), %rcx
	testq	%rcx, %rcx
	jne	.LBB485_28
# %bb.27:                               # %"$2.i.i26"
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rcx
.LBB485_28:                             # %boxNum.exit.i27
	movq	(%rcx), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%rsi, (%rcx)
	movq	$2, 8(%rcx)
	addq	$4, %rcx
	jmp	.LBB485_36
.LBB485_31:                             # %"$8.i32"
	movq	($Avail)(%rip), %rcx
	testq	%rcx, %rcx
	jne	.LBB485_33
# %bb.32:                               # %"$2.i3.i33"
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rcx
.LBB485_33:                             # %boxNum.exit4.i34
	movq	(%rcx), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%rsi, (%rcx)
	movq	$2, 8(%rcx)
	addq	$4, %rcx
.LBB485_35:                             # %"$10.i36"
	orq	$8, %rcx
.LBB485_36:                             # %box.exit37
	movq	104(%rbp), %rsi
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	$2, 16(%rbx)
	leaq	24(%rbx), %rax
	movq	%rcx, 24(%rbx)
	movq	%rbx, 8(%rdi)
	movq	%rax, (%rbx)
	testq	%r15, %r15
	js	.LBB485_42
# %bb.37:                               # %"$2.i39"
	cmpq	%r14, %r15
	jae	.LBB485_38
# %bb.41:                               # %"$6.i44"
	shlq	$4, %r15
	orq	$2, %r15
	movq	%r15, %rcx
	jmp	.LBB485_48
.LBB485_42:                             # %"$3.i46"
	negq	%r15
	cmpq	%r14, %r15
	jae	.LBB485_43
# %bb.46:                               # %"$9.i51"
	shlq	$4, %r15
	orq	$2, %r15
	movq	%r15, %rcx
	jmp	.LBB485_47
.LBB485_38:                             # %"$5.i41"
	movq	($Avail)(%rip), %rcx
	testq	%rcx, %rcx
	jne	.LBB485_40
# %bb.39:                               # %"$2.i.i42"
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rcx
.LBB485_40:                             # %boxNum.exit.i43
	movq	(%rcx), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%r15, (%rcx)
	movq	$2, 8(%rcx)
	addq	$4, %rcx
	jmp	.LBB485_48
.LBB485_43:                             # %"$8.i48"
	movq	($Avail)(%rip), %rcx
	testq	%rcx, %rcx
	jne	.LBB485_45
# %bb.44:                               # %"$2.i3.i49"
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rcx
.LBB485_45:                             # %boxNum.exit4.i50
	movq	(%rcx), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%r15, (%rcx)
	movq	$2, 8(%rcx)
	addq	$4, %rcx
.LBB485_47:                             # %"$10.i52"
	orq	$8, %rcx
.LBB485_48:                             # %box.exit53
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	$2, 16(%rdi)
	leaq	24(%rdi), %rax
	movq	%rcx, 24(%rdi)
	movq	%rdi, 8(%rbx)
	movq	%rax, (%rdi)
	testq	%rsi, %rsi
	js	.LBB485_54
# %bb.49:                               # %"$2.i55"
	cmpq	%r14, %rsi
	jae	.LBB485_50
# %bb.53:                               # %"$6.i60"
	shlq	$4, %rsi
	orq	$2, %rsi
	movq	%rsi, %rcx
	jmp	.LBB485_60
.LBB485_54:                             # %"$3.i62"
	negq	%rsi
	cmpq	%r14, %rsi
	jae	.LBB485_55
# %bb.58:                               # %"$9.i67"
	shlq	$4, %rsi
	orq	$2, %rsi
	movq	%rsi, %rcx
	jmp	.LBB485_59
.LBB485_50:                             # %"$5.i57"
	movq	($Avail)(%rip), %rcx
	testq	%rcx, %rcx
	jne	.LBB485_52
# %bb.51:                               # %"$2.i.i58"
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rcx
.LBB485_52:                             # %boxNum.exit.i59
	movq	(%rcx), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%rsi, (%rcx)
	movq	$2, 8(%rcx)
	addq	$4, %rcx
	jmp	.LBB485_60
.LBB485_55:                             # %"$8.i64"
	movq	($Avail)(%rip), %rcx
	testq	%rcx, %rcx
	jne	.LBB485_57
# %bb.56:                               # %"$2.i3.i65"
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rcx
.LBB485_57:                             # %boxNum.exit4.i66
	movq	(%rcx), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%rsi, (%rcx)
	movq	$2, 8(%rcx)
	addq	$4, %rcx
.LBB485_59:                             # %"$10.i68"
	orq	$8, %rcx
.LBB485_60:                             # %box.exit69
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rax, %rdx
	orq	$8, %rdx
	leaq	SymTab+8(%rip), %rbx
	movq	%rbx, (%rdx)
	movq	$2, 16(%rax)
	leaq	24(%rax), %rdx
	movq	%rcx, 24(%rax)
	movq	%rax, 8(%rdi)
	movq	%rdx, (%rax)
	subq	$32, %rsp
	leaq	-32(%rbp), %rcx
	callq	evList
	addq	$32, %rsp
	testb	$2, %al
	je	.LBB485_62
# %bb.61:                               # %xCnt.exit
	movq	%rax, %rdx
	shrq	$4, %rdx
	movq	%rdx, %rcx
	negq	%rcx
	testb	$8, %al
	cmoveq	%rdx, %rcx
	movq	%rcx, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB485_62:                             # %"$2.i71"
	subq	$32, %rsp
	xorl	%ecx, %ecx
	movq	%rax, %rdx
	callq	cntErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 numErr;
	.scl	2;
	.type	32;
	.endef
	.globl	numErr                          # -- Begin function numErr
	.p2align	4, 0x90
numErr:                                 # @numErr
.seh_proc numErr
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	leaq	.L$10(%rip), %r8
	xorl	%r9d, %r9d
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 natBuf;
	.scl	2;
	.type	32;
	.endef
	.globl	natBuf                          # -- Begin function natBuf
	.p2align	4, 0x90
natBuf:                                 # @natBuf
.seh_proc natBuf
# %bb.0:                                # %"$1"
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rdx, %r14
	testb	$15, %cl
	je	.LBB487_3
# %bb.1:                                # %"$2"
	testb	$8, %cl
	jne	.LBB487_9
# %bb.2:                                # %"$6"
	shrq	$4, %rcx
	movb	%cl, (%r14)
	movl	$1, %edi
	jmp	.LBB487_10
.LBB487_3:                              # %"$3"
	movq	(%rcx), %rax
	movq	8(%rcx), %rsi
	testb	$2, %sil
	jne	.LBB487_11
# %bb.4:                                # %"$9"
	movq	%rax, %rbx
	shrq	$4, %rbx
	xorl	%edi, %edi
	testb	$8, %al
	jne	.LBB487_7
	.p2align	4, 0x90
# %bb.5:                                # %"$38"
	testb	$15, %sil
	jne	.LBB487_10
.LBB487_6:                              # %"$38"
                                        # =>This Inner Loop Header: Depth=1
	leaq	(%r14,%rdi), %r8
	movq	(%rsi), %rcx
	movq	8(%rsi), %rsi
	movq	%rbx, %rdx
	callq	bufDouble
	addq	$8, %rdi
	testb	$15, %sil
	je	.LBB487_6
	jmp	.LBB487_10
	.p2align	4, 0x90
.LBB487_7:                              # %"$34.preheader"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %sil
	jne	.LBB487_10
# %bb.8:                                # %"$35"
                                        #   in Loop: Header=BB487_7 Depth=1
	leaq	(%r14,%rdi), %r8
	movq	(%rsi), %rcx
	movq	8(%rsi), %rsi
	movq	%rbx, %rdx
	callq	bufFloat
	addq	$4, %rdi
	jmp	.LBB487_7
.LBB487_9:                              # %"$5"
	shrq	$4, %rcx
	movl	%ecx, (%r14)
	movl	$4, %edi
.LBB487_10:                             # %"$4"
	movq	%rdi, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq
.LBB487_11:                             # %"$8"
	shrq	$4, %rsi
	testb	$6, %al
	je	.LBB487_14
# %bb.12:                               # %"$13"
	testb	$2, %al
	jne	.LBB487_16
# %bb.13:                               # %"$15"
	movq	-4(%rax), %rdx
	jmp	.LBB487_17
.LBB487_14:                             # %"$12"
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	jne	.LBB487_21
.LBB487_15:                             # %"$25"
	movb	$0, (%r14)
	movq	%rsi, %rdi
	jmp	.LBB487_10
.LBB487_16:                             # %"$14"
	movq	%rax, %rdx
	shrq	$4, %rdx
.LBB487_17:                             # %"$16"
	movq	%rdx, %rcx
	negq	%rcx
	testb	$8, %al
	cmoveq	%rdx, %rcx
	cmpq	$4, %rsi
	je	.LBB487_23
# %bb.18:                               # %"$16"
	cmpq	$2, %rsi
	je	.LBB487_24
# %bb.19:                               # %"$16"
	cmpq	$1, %rsi
	jne	.LBB487_25
# %bb.20:                               # %"$21"
	movb	%cl, (%r14)
	movq	%rsi, %rdi
	jmp	.LBB487_10
.LBB487_21:                             # %"$24"
	testb	$8, %al
	je	.LBB487_22
# %bb.26:                               # %"$27"
	movq	-8(%rax), %rax
	testb	$6, %al
	jne	.LBB487_28
	.p2align	4, 0x90
.LBB487_27:                             # %"$29"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB487_27
.LBB487_28:                             # %"$2.i.preheader"
	xorl	%ecx, %ecx
	testq	%rcx, %rcx
	jne	.LBB487_33
	jmp	.LBB487_29
	.p2align	4, 0x90
.LBB487_34:                             # %"$3.i"
                                        #   in Loop: Header=BB487_33 Depth=1
	shrq	$8, %rcx
	incq	%r14
	testq	%rcx, %rcx
	jne	.LBB487_33
.LBB487_29:                             # %"$2.i.i"
	cmpq	$2, %rax
	je	.LBB487_15
# %bb.30:                               # %"$5.i.i"
	testb	$2, %al
	jne	.LBB487_32
# %bb.31:                               # %"$7.i.i"
	movq	-4(%rax), %rcx
	movq	4(%rax), %rax
	jmp	.LBB487_33
.LBB487_32:                             # %"$8.i.i"
	movq	%rax, %rcx
	shrq	$4, %rcx
	movl	$2, %eax
	.p2align	4, 0x90
.LBB487_33:                             # %symByte.exit.i
                                        # =>This Inner Loop Header: Depth=1
	movb	%cl, (%r14)
	testb	%cl, %cl
	jne	.LBB487_34
.LBB487_22:
	movq	%rsi, %rdi
	jmp	.LBB487_10
.LBB487_23:                             # %"$23"
	movl	%ecx, (%r14)
	movq	%rsi, %rdi
	jmp	.LBB487_10
.LBB487_24:                             # %"$22"
	movw	%cx, (%r14)
	movq	%rsi, %rdi
	jmp	.LBB487_10
.LBB487_25:                             # %"$19"
	movq	%rcx, (%r14)
	movq	%rsi, %rdi
	jmp	.LBB487_10
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 natRetBuf;
	.scl	2;
	.type	32;
	.endef
	.globl	natRetBuf                       # -- Begin function natRetBuf
	.p2align	4, 0x90
natRetBuf:                              # @natRetBuf
.seh_proc natRetBuf
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rdx, %rdi
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, %rcx
	jne	.LBB488_2
# %bb.1:                                # %"$4"
	movq	(%rdi), %rax
	leaq	8(%rax), %rcx
	movq	%rcx, (%rdi)
	movq	(%rax), %rsi
	jmp	.LBB488_73
.LBB488_2:                              # %"$3"
	movq	%rcx, %rdx
	leaq	SymTab+296(%rip), %rax
	cmpq	%rax, %rcx
	jne	.LBB488_12
# %bb.3:                                # %"$6"
	movabsq	$1152921504606846976, %rax      # imm = 0x1000000000000000
	movq	(%rdi), %rcx
	leaq	8(%rcx), %rdx
	movq	%rdx, (%rdi)
	movq	(%rcx), %rdi
	testq	%rdi, %rdi
	js	.LBB488_8
# %bb.4:                                # %"$2.i"
	cmpq	%rax, %rdi
	jae	.LBB488_5
.LBB488_14:                             # %"$6.i"
	shlq	$4, %rdi
	orq	$2, %rdi
	jmp	.LBB488_72
.LBB488_12:                             # %"$5"
	leaq	SymTab+376(%rip), %rax
	cmpq	%rax, %rdx
	jne	.LBB488_15
# %bb.13:                               # %"$8"
	movq	(%rdi), %rax
	leaq	8(%rax), %rcx
	movq	%rcx, (%rdi)
	movq	(%rax), %rdi
	movq	%rdi, %rax
	shrq	$60, %rax
	je	.LBB488_14
.LBB488_5:                              # %"$5.i"
	movq	($Avail)(%rip), %rsi
	testq	%rsi, %rsi
	jne	.LBB488_7
# %bb.6:                                # %"$2.i.i"
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rsi
.LBB488_7:                              # %boxNum.exit.i
	movq	(%rsi), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%rdi, (%rsi)
	movq	$2, 8(%rsi)
	addq	$4, %rsi
	jmp	.LBB488_73
.LBB488_15:                             # %"$7"
	leaq	SymTab+360(%rip), %rax
	cmpq	%rax, %rdx
	jne	.LBB488_20
# %bb.16:                               # %"$13"
	movq	(%rdi), %rax
	leaq	4(%rax), %rcx
	movq	%rcx, (%rdi)
	movl	(%rax), %esi
	testl	%esi, %esi
	js	.LBB488_18
.LBB488_17:                             # %"$14"
	shlq	$4, %rsi
	orq	$2, %rsi
	jmp	.LBB488_73
.LBB488_8:                              # %"$3.i"
	negq	%rdi
	cmpq	%rax, %rdi
	jae	.LBB488_9
# %bb.71:                               # %"$9.i"
	shlq	$4, %rdi
	orq	$2, %rdi
	orq	$8, %rdi
.LBB488_72:                             # %"$2"
	movq	%rdi, %rsi
.LBB488_73:                             # %"$2"
	movq	%rsi, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB488_20:                             # %"$12"
	leaq	SymTab+312(%rip), %r13
	cmpq	%r13, %rdx
	jne	.LBB488_42
# %bb.21:                               # %"$18"
	movq	(%rdi), %rdx
	movzbl	(%rdx), %eax
	leaq	1(%rdx), %rcx
	testb	%al, %al
	jns	.LBB488_31
# %bb.22:                               # %"$3.i17"
	cmpb	$-1, %al
	je	.LBB488_23
# %bb.24:                               # %"$5.i19"
	testb	$32, %al
	jne	.LBB488_26
# %bb.25:                               # %"$7.i"
	andl	$31, %eax
	movl	%eax, %edx
	jmp	.LBB488_30
.LBB488_9:                              # %"$8.i"
	movq	($Avail)(%rip), %rsi
	testq	%rsi, %rsi
	jne	.LBB488_11
# %bb.10:                               # %"$2.i3.i"
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rsi
.LBB488_11:                             # %boxNum.exit4.i
	movq	(%rsi), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%rdi, (%rsi)
	movq	$2, 8(%rsi)
	addq	$4, %rsi
	orq	$8, %rsi
	jmp	.LBB488_73
.LBB488_42:                             # %"$17"
	leaq	SymTab+392(%rip), %rax
	cmpq	%rax, %rdx
	jne	.LBB488_45
# %bb.43:                               # %"$23"
	movq	(%rdi), %rax
	leaq	2(%rax), %rcx
	movq	%rcx, (%rdi)
	movzwl	(%rax), %esi
	testw	%si, %si
	jns	.LBB488_17
# %bb.44:                               # %"$25"
	negl	%esi
	movswq	%si, %rsi
	jmp	.LBB488_19
.LBB488_18:                             # %"$15"
	negl	%esi
	movslq	%esi, %rsi
.LBB488_19:                             # %"$2"
	shlq	$4, %rsi
	orq	$10, %rsi
	jmp	.LBB488_73
.LBB488_45:                             # %"$22"
	leaq	SymTab+344(%rip), %rax
	cmpq	%rax, %rdx
	jne	.LBB488_47
# %bb.46:                               # %"$28"
	movq	(%rdi), %rax
	leaq	1(%rax), %rcx
	movq	%rcx, (%rdi)
	movzbl	(%rax), %esi
	jmp	.LBB488_17
.LBB488_47:                             # %"$27"
	leaq	SymTab+328(%rip), %rax
	cmpq	%rax, %rdx
	jne	.LBB488_48
# %bb.74:                               # %"$30"
	movq	(%rdi), %rax
	leaq	8(%rax), %rcx
	movq	%rcx, (%rdi)
	movq	(%rax), %rcx
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	mkStr                           # TAILCALL
.LBB488_23:                             # %"$3.i25.thread"
	movq	%rcx, (%rdi)
	movl	$4082, %ecx                     # imm = 0xFF2
	jmp	.LBB488_41
.LBB488_48:                             # %"$29"
	testb	$2, %dl
	jne	.LBB488_49
# %bb.51:                               # %"$31"
	testb	$15, %dl
	jne	.LBB488_70
# %bb.52:                               # %"$37"
	movq	(%rdx), %r15
	movq	8(%rdx), %r12
	subq	$32, %rsp
	movq	%r15, %rcx
	movq	%rdi, %rdx
	callq	natRetBuf
	addq	$32, %rsp
	cmpq	%r13, %r15
	jne	.LBB488_55
# %bb.53:                               # %"$37"
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	jne	.LBB488_55
# %bb.54:
	leaq	SymTab+8(%rip), %rsi
	jmp	.LBB488_73
.LBB488_26:                             # %"$8.i21"
	testb	$16, %al
	jne	.LBB488_28
# %bb.27:                               # %"$10.i22"
	andl	$15, %eax
	jmp	.LBB488_29
.LBB488_49:                             # %"$32"
	testb	$8, %dl
	jne	.LBB488_75
# %bb.50:                               # %"$34"
	movq	(%rdi), %rax
	leaq	8(%rax), %rcx
	movq	%rcx, (%rdi)
	movq	(%rax), %rcx
	shrq	$4, %rdx
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	natRetDouble                    # TAILCALL
.LBB488_28:                             # %"$11.i"
	andl	$7, %eax
	shll	$6, %eax
	movzbl	1(%rdx), %ecx
	addq	$2, %rdx
	andl	$63, %ecx
	orl	%ecx, %eax
	movq	%rdx, %rcx
.LBB488_29:                             # %"$12.i"
	shll	$6, %eax
	movzbl	(%rcx), %edx
	incq	%rcx
	andl	$63, %edx
	orl	%eax, %edx
.LBB488_30:                             # %"$9.i23"
	shll	$6, %edx
	movzbl	(%rcx), %eax
	incq	%rcx
	andl	$63, %eax
	orl	%edx, %eax
.LBB488_31:                             # %fetchChar.exit
	movq	%rcx, (%rdi)
	leaq	SymTab+8(%rip), %rsi
	testl	%eax, %eax
	je	.LBB488_73
# %bb.32:                               # %"$19"
	cmpl	$127, %eax
	jg	.LBB488_34
# %bb.33:                               # %"$4.i"
	movl	%eax, %ecx
.LBB488_40:                             # %"$2.i31"
	shlq	$4, %rcx
	orq	$2, %rcx
	cmpq	$2, %rcx
	je	.LBB488_73
	jmp	.LBB488_41
.LBB488_34:                             # %"$3.i25"
	movl	$4082, %ecx                     # imm = 0xFF2
	cmpl	$1114112, %eax                  # imm = 0x110000
	jne	.LBB488_35
.LBB488_41:                             # %"$3.i.i"
	xorl	%edx, %edx
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	consSym                         # TAILCALL
.LBB488_35:                             # %"$5.i26"
	movl	%eax, %ecx
	cmpl	$2047, %eax                     # imm = 0x7FF
	jg	.LBB488_37
# %bb.36:                               # %"$8.i27"
	shrl	$6, %ecx
	andl	$63, %eax
	shll	$8, %eax
	orl	%ecx, %eax
	orl	$32960, %eax                    # imm = 0x80C0
	movq	%rax, %rcx
	jmp	.LBB488_40
.LBB488_37:                             # %"$7.i28"
	cmpl	$65535, %eax                    # imm = 0xFFFF
	jg	.LBB488_39
# %bb.38:                               # %"$10.i29"
	shrl	$12, %ecx
	leal	(,%rax,4), %edx
	andl	$16128, %edx                    # imm = 0x3F00
	orl	%ecx, %edx
	andl	$63, %eax
	shll	$16, %eax
	orl	%edx, %eax
	orl	$8421600, %eax                  # imm = 0x8080E0
	movq	%rax, %rcx
	jmp	.LBB488_40
.LBB488_39:                             # %"$9.i30"
	shrl	$18, %ecx
	movl	%eax, %edx
	shrl	$4, %edx
	andl	$16128, %edx                    # imm = 0x3F00
	orl	%ecx, %edx
	movl	%eax, %ecx
	shll	$10, %ecx
	andl	$4128768, %ecx                  # imm = 0x3F0000
	orl	%edx, %ecx
	andl	$63, %eax
	shll	$24, %eax
	leal	-2139062032(%rax,%rcx), %ecx
	jmp	.LBB488_40
.LBB488_75:                             # %"$33"
	movq	(%rdi), %rax
	leaq	4(%rax), %rcx
	movq	%rcx, (%rdi)
	movl	(%rax), %ecx
	shrq	$4, %rdx
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	natRetFloat                     # TAILCALL
.LBB488_55:                             # %"$40"
	subq	$32, %rsp
	leaq	SymTab+8(%rip), %rdx
	movq	%rax, %rcx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rsi
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdx
	movq	%rsi, (%rdx)
	movq	%rdx, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rdx, (%rbp)                    # 8-byte Spill
	movq	%rdx, env(%rip)
	testb	$2, %r12b
	jne	.LBB488_56
# %bb.65:
	movq	%rsi, %r14
	jmp	.LBB488_66
.LBB488_69:                             # %"$55"
                                        #   in Loop: Header=BB488_66 Depth=1
	subq	$32, %rsp
	movq	%rax, %rcx
	leaq	SymTab+8(%rip), %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rbx
	movq	%rax, 8(%r14)
	testb	$2, %r12b
	movq	%rax, %r14
	jne	.LBB488_57
.LBB488_66:                             # %"$43"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %r12b
	jne	.LBB488_61
# %bb.67:                               # %"$52"
                                        #   in Loop: Header=BB488_66 Depth=1
	movq	(%r12), %r15
	movq	8(%r12), %r12
	subq	$32, %rsp
	movq	%r15, %rcx
	movq	%rdi, %rdx
	callq	natRetBuf
	addq	$32, %rsp
	cmpq	%r13, %r15
	jne	.LBB488_69
# %bb.68:                               # %"$52"
                                        #   in Loop: Header=BB488_66 Depth=1
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	jne	.LBB488_69
	jmp	.LBB488_61
.LBB488_56:
	movq	%rsi, %rbx
.LBB488_57:                             # %"$45"
	shrq	$4, %r12
	decq	%r12
	je	.LBB488_61
# %bb.58:                               # %"$47.lr.ph"
	cmpq	%r13, %r15
	jne	.LBB488_59
# %bb.62:                               # %"$47.us.preheader"
	leaq	SymTab+312(%rip), %r15
.LBB488_63:                             # %"$47.us"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	movq	%r15, %rcx
	movq	%rdi, %rdx
	callq	natRetBuf
	addq	$32, %rsp
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB488_61
# %bb.64:                               # %"$51.us"
                                        #   in Loop: Header=BB488_63 Depth=1
	subq	$32, %rsp
	movq	%rax, %rcx
	leaq	SymTab+8(%rip), %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, 8(%rbx)
	decq	%r12
	movq	%rax, %rbx
	jne	.LBB488_63
	jmp	.LBB488_61
.LBB488_59:
	leaq	SymTab+8(%rip), %r14
.LBB488_60:                             # %"$47"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	movq	%r15, %rcx
	movq	%rdi, %rdx
	callq	natRetBuf
	movq	%rax, %rcx
	movq	%r14, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, 8(%rbx)
	decq	%r12
	movq	%rax, %rbx
	jne	.LBB488_60
.LBB488_61:                             # %"$44"
	movq	(%rbp), %rax                    # 8-byte Reload
	movq	8(%rax), %rax
	movq	%rax, env(%rip)
	jmp	.LBB488_73
.LBB488_70:                             # %"$36"
	subq	$32, %rsp
	movq	%rdx, %rcx
	callq	natErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 natRetFloat;
	.scl	2;
	.type	32;
	.endef
	.globl	natRetFloat                     # -- Begin function natRetFloat
	.p2align	4, 0x90
natRetFloat:                            # @natRetFloat
.seh_proc natRetFloat
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	subq	$32, %rsp
	callq	boxFloat
	addq	$32, %rsp
	movq	%rax, %rsi
	testq	%rax, %rax
	jne	.LBB489_9
# %bb.1:                                # %"$2"
	movq	Fdigit(%rip), %rdi
	movq	($Avail)(%rip), %rsi
	testq	%rsi, %rsi
	jne	.LBB489_3
# %bb.2:                                # %"$2.i"
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rsi
.LBB489_3:                              # %boxNum.exit
	movq	(%rsi), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%rdi, (%rsi)
	leaq	8(%rsi), %rdi
	movq	$2, 8(%rsi)
	addq	$4, %rsi
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%rsi, (%r14)
	movq	%r14, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r14, env(%rip)
	subq	$32, %rsp
	callq	boxFlt
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB489_5
# %bb.4:
	movq	%rdi, %rbx
.LBB489_8:                              # %"$6"
	movq	%rax, (%rbx)
	movq	8(%r14), %rax
	movq	%rax, env(%rip)
.LBB489_9:                              # %"$3"
	movq	%rsi, %rax
	xorq	$8, %rax
	cmpq	$2, %rsi
	cmoveq	%rsi, %rax
	cmpb	$0, Fsign(%rip)
	cmoveq	%rsi, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	retq
	.p2align	4, 0x90
.LBB489_7:                              # %boxNum.exit5
                                        #   in Loop: Header=BB489_5 Depth=1
	movq	(%rax), %rcx
	movq	%rcx, ($Avail)(%rip)
	movq	%rbx, (%rax)
	leaq	8(%rax), %rbx
	movq	$2, 8(%rax)
	addq	$4, %rax
	movq	%rax, (%rdi)
	subq	$32, %rsp
	callq	boxFlt
	addq	$32, %rsp
	testq	%rax, %rax
	movq	%rbx, %rdi
	jne	.LBB489_8
.LBB489_5:                              # %"$5"
                                        # =>This Inner Loop Header: Depth=1
	movq	Fdigit(%rip), %rbx
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	jne	.LBB489_7
# %bb.6:                                # %"$2.i4"
                                        #   in Loop: Header=BB489_5 Depth=1
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rax
	jmp	.LBB489_7
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 natRetDouble;
	.scl	2;
	.type	32;
	.endef
	.globl	natRetDouble                    # -- Begin function natRetDouble
	.p2align	4, 0x90
natRetDouble:                           # @natRetDouble
.seh_proc natRetDouble
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	subq	$32, %rsp
	callq	boxDouble
	addq	$32, %rsp
	movq	%rax, %rsi
	testq	%rax, %rax
	jne	.LBB490_9
# %bb.1:                                # %"$2"
	movq	Fdigit(%rip), %rdi
	movq	($Avail)(%rip), %rsi
	testq	%rsi, %rsi
	jne	.LBB490_3
# %bb.2:                                # %"$2.i"
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rsi
.LBB490_3:                              # %boxNum.exit
	movq	(%rsi), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%rdi, (%rsi)
	leaq	8(%rsi), %rdi
	movq	$2, 8(%rsi)
	addq	$4, %rsi
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%rsi, (%r14)
	movq	%r14, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r14, env(%rip)
	subq	$32, %rsp
	callq	boxDbl
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB490_5
# %bb.4:
	movq	%rdi, %rbx
.LBB490_8:                              # %"$6"
	movq	%rax, (%rbx)
	movq	8(%r14), %rax
	movq	%rax, env(%rip)
.LBB490_9:                              # %"$3"
	movq	%rsi, %rax
	xorq	$8, %rax
	cmpq	$2, %rsi
	cmoveq	%rsi, %rax
	cmpb	$0, Fsign(%rip)
	cmoveq	%rsi, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	retq
	.p2align	4, 0x90
.LBB490_7:                              # %boxNum.exit5
                                        #   in Loop: Header=BB490_5 Depth=1
	movq	(%rax), %rcx
	movq	%rcx, ($Avail)(%rip)
	movq	%rbx, (%rax)
	leaq	8(%rax), %rbx
	movq	$2, 8(%rax)
	addq	$4, %rax
	movq	%rax, (%rdi)
	subq	$32, %rsp
	callq	boxDbl
	addq	$32, %rsp
	testq	%rax, %rax
	movq	%rbx, %rdi
	jne	.LBB490_8
.LBB490_5:                              # %"$5"
                                        # =>This Inner Loop Header: Depth=1
	movq	Fdigit(%rip), %rbx
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	jne	.LBB490_7
# %bb.6:                                # %"$2.i4"
                                        #   in Loop: Header=BB490_5 Depth=1
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rax
	jmp	.LBB490_7
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 natErr;
	.scl	2;
	.type	32;
	.endef
	.globl	natErr                          # -- Begin function natErr
	.p2align	4, 0x90
natErr:                                 # @natErr
.seh_proc natErr
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rcx, %rdx
	leaq	.L$89(%rip), %r8
	xorl	%ecx, %ecx
	xorl	%r9d, %r9d
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 ffi;
	.scl	2;
	.type	32;
	.endef
	.globl	ffi                             # -- Begin function ffi
	.p2align	4, 0x90
ffi:                                    # @ffi
.seh_proc ffi
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%r9, %rsi
	movq	%r8, %rdi
	movq	(%r9), %r15
	testb	$2, %dil
	jne	.LBB492_1
# %bb.2:                                # %"$3"
	testb	$4, %dil
	jne	.LBB492_3
# %bb.4:                                # %"$5"
	movq	%rcx, %r14
	testb	$15, %dil
	je	.LBB492_102
# %bb.5:                                # %"$7"
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rdi
	jne	.LBB492_7
# %bb.6:
	movl	$1, %eax
	movl	$2, %ebx
	jmp	.LBB492_16
.LBB492_1:                              # %"$4"
	shrq	$4, %rdi
	movq	%rdi, %rbx
	jmp	.LBB492_33
.LBB492_3:                              # %"$6"
	movq	-4(%rdi), %rbx
	jmp	.LBB492_33
.LBB492_7:                              # %"$3.i"
	movq	-8(%rdi), %rbx
	testb	$8, %bl
	jne	.LBB492_8
	.p2align	4, 0x90
# %bb.10:                               # %"$8.i"
	testb	$6, %bl
	jne	.LBB492_11
.LBB492_9:                              # %"$8.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rbx), %rbx
	testb	$6, %bl
	je	.LBB492_9
.LBB492_11:                             # %xName.exit
	movl	$1, %eax
	testb	$4, %bl
	movq	%rbx, %rcx
	je	.LBB492_14
# %bb.12:                               # %"$3.i21.preheader"
	movl	$1, %eax
	movq	%rbx, %rcx
	.p2align	4, 0x90
.LBB492_13:                             # %"$3.i21"
                                        # =>This Inner Loop Header: Depth=1
	addq	$8, %rax
	movq	4(%rcx), %rcx
	testb	$4, %cl
	jne	.LBB492_13
.LBB492_14:                             # %"$4.i"
	shrq	$4, %rcx
	je	.LBB492_16
	.p2align	4, 0x90
.LBB492_15:                             # %"$6.i23"
                                        # =>This Inner Loop Header: Depth=1
	incq	%rax
	shrq	$8, %rcx
	jne	.LBB492_15
.LBB492_16:                             # %bufSize.exit
	addq	$15, %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r8
	xorl	%ecx, %ecx
	movq	%r8, %rax
	testq	%rcx, %rcx
	jne	.LBB492_25
	.p2align	4, 0x90
.LBB492_18:                             # %"$2.i.i"
	cmpq	$2, %rbx
	je	.LBB492_19
# %bb.22:                               # %"$5.i.i"
	testb	$2, %bl
	jne	.LBB492_23
# %bb.24:                               # %"$7.i.i"
	movq	-4(%rbx), %rcx
	movq	4(%rbx), %rbx
	jmp	.LBB492_25
	.p2align	4, 0x90
.LBB492_23:                             # %"$8.i.i"
	movq	%rbx, %rcx
	shrq	$4, %rcx
	movl	$2, %ebx
	.p2align	4, 0x90
.LBB492_25:                             # %symByte.exit.i
                                        # =>This Inner Loop Header: Depth=1
	movb	%cl, (%rax)
	testb	%cl, %cl
	je	.LBB492_20
# %bb.26:                               # %"$3.i25"
                                        #   in Loop: Header=BB492_25 Depth=1
	shrq	$8, %rcx
	incq	%rax
	testq	%rcx, %rcx
	jne	.LBB492_25
	jmp	.LBB492_18
.LBB492_19:                             # %symByte.exit.thread.i
	movb	$0, (%rax)
.LBB492_20:                             # %bufString.exit
	subq	$32, %rsp
	movq	%rdx, %rcx
	movq	%r8, %rdx
	movq	%rsi, %r8
	callq	ffiPrep
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB492_21
# %bb.27:                               # %"$10"
	movq	%rax, %rbx
	shrq	$60, %rax
	jne	.LBB492_28
# %bb.31:                               # %"$12"
	movq	%rbx, %rax
	shlq	$4, %rax
	orq	$2, %rax
	jmp	.LBB492_32
.LBB492_28:                             # %"$11"
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	jne	.LBB492_30
# %bb.29:                               # %"$2.i28"
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rax
.LBB492_30:                             # %boxNum.exit
	movq	(%rax), %rcx
	movq	%rcx, ($Avail)(%rip)
	movq	%rbx, (%rax)
	movq	$2, 8(%rax)
	addq	$4, %rax
.LBB492_32:                             # %"$13"
	movq	%rax, (%rdi)
.LBB492_33:                             # %"$2"
	movq	8(%rsi), %rdx
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	ffiCall
	addq	$32, %rsp
	leaq	SymTab+8(%rip), %rsi
	cmpq	%rsi, %r15
	je	.LBB492_101
# %bb.34:                               # %"$15"
	movq	%rax, %rbx
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, %r15
	je	.LBB492_100
# %bb.35:                               # %"$17"
	leaq	SymTab+296(%rip), %rax
	cmpq	%rax, %r15
	jne	.LBB492_45
# %bb.36:                               # %"$20"
	movabsq	$1152921504606846976, %rax      # imm = 0x1000000000000000
	testq	%rbx, %rbx
	js	.LBB492_41
# %bb.37:                               # %"$2.i31"
	cmpq	%rax, %rbx
	jae	.LBB492_38
.LBB492_47:                             # %"$6.i34"
	shlq	$4, %rbx
	orq	$2, %rbx
	jmp	.LBB492_100
.LBB492_45:                             # %"$19"
	leaq	SymTab+376(%rip), %rax
	cmpq	%rax, %r15
	jne	.LBB492_48
# %bb.46:                               # %"$22"
	movq	%rbx, %rax
	shrq	$60, %rax
	je	.LBB492_47
.LBB492_38:                             # %"$5.i"
	movq	($Avail)(%rip), %rsi
	testq	%rsi, %rsi
	jne	.LBB492_40
# %bb.39:                               # %"$2.i.i33"
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rsi
.LBB492_40:                             # %boxNum.exit.i
	movq	(%rsi), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%rbx, (%rsi)
	movq	$2, 8(%rsi)
	addq	$4, %rsi
	jmp	.LBB492_101
.LBB492_48:                             # %"$21"
	leaq	SymTab+360(%rip), %rax
	cmpq	%rax, %r15
	jne	.LBB492_54
# %bb.49:                               # %"$27"
	testl	%ebx, %ebx
	js	.LBB492_52
# %bb.50:                               # %"$28"
	movl	%ebx, %esi
.LBB492_51:                             # %"$14"
	shlq	$4, %rsi
	orq	$2, %rsi
	jmp	.LBB492_101
.LBB492_41:                             # %"$3.i36"
	negq	%rbx
	cmpq	%rax, %rbx
	jae	.LBB492_42
# %bb.99:                               # %"$9.i"
	shlq	$4, %rbx
	orq	$2, %rbx
	orq	$8, %rbx
.LBB492_100:                            # %"$14"
	movq	%rbx, %rsi
.LBB492_101:                            # %"$14"
	movq	%rsi, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB492_54:                             # %"$26"
	leaq	SymTab+312(%rip), %r13
	cmpq	%r13, %r15
	jne	.LBB492_67
# %bb.55:                               # %"$32"
	testl	%ebx, %ebx
	je	.LBB492_101
# %bb.56:                               # %"$33"
	cmpl	$127, %ebx
	jg	.LBB492_58
# %bb.57:                               # %"$4.i43"
	movslq	%ebx, %rcx
.LBB492_64:                             # %"$2.i49"
	shlq	$4, %rcx
	orq	$2, %rcx
	cmpq	$2, %rcx
	je	.LBB492_101
	jmp	.LBB492_65
.LBB492_42:                             # %"$8.i37"
	movq	($Avail)(%rip), %rsi
	testq	%rsi, %rsi
	jne	.LBB492_44
# %bb.43:                               # %"$2.i3.i"
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rsi
.LBB492_44:                             # %boxNum.exit4.i
	movq	(%rsi), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%rbx, (%rsi)
	movq	$2, 8(%rsi)
	addq	$4, %rsi
	orq	$8, %rsi
	jmp	.LBB492_101
.LBB492_67:                             # %"$31"
	leaq	SymTab+392(%rip), %rax
	cmpq	%rax, %r15
	jne	.LBB492_71
# %bb.68:                               # %"$37"
	testw	%bx, %bx
	js	.LBB492_70
# %bb.69:                               # %"$38"
	movzwl	%bx, %esi
	jmp	.LBB492_51
.LBB492_52:                             # %"$29"
	negl	%ebx
	movslq	%ebx, %rsi
.LBB492_53:                             # %"$14"
	shlq	$4, %rsi
	orq	$10, %rsi
	jmp	.LBB492_101
.LBB492_71:                             # %"$36"
	leaq	SymTab+344(%rip), %rax
	cmpq	%rax, %r15
	jne	.LBB492_73
# %bb.72:                               # %"$42"
	movzbl	%bl, %esi
	jmp	.LBB492_51
.LBB492_58:                             # %"$3.i44"
	movl	$4082, %ecx                     # imm = 0xFF2
	cmpl	$1114112, %ebx                  # imm = 0x110000
	jne	.LBB492_59
.LBB492_65:                             # %"$3.i.i"
	subq	$32, %rsp
	xorl	%edx, %edx
	callq	consSym
	jmp	.LBB492_66
.LBB492_73:                             # %"$41"
	leaq	SymTab+328(%rip), %rax
	cmpq	%rax, %r15
	jne	.LBB492_75
# %bb.74:                               # %"$44"
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	mkStr
.LBB492_66:                             # %"$14"
	addq	$32, %rsp
	movq	%rax, %rsi
	jmp	.LBB492_101
.LBB492_70:                             # %"$39"
	negl	%ebx
	movswq	%bx, %rsi
	jmp	.LBB492_53
.LBB492_59:                             # %"$5.i45"
	movl	%ebx, %eax
	cmpl	$2047, %ebx                     # imm = 0x7FF
	jg	.LBB492_61
# %bb.60:                               # %"$8.i46"
	shrl	$6, %eax
	andl	$63, %ebx
	shll	$8, %ebx
	orl	%eax, %ebx
	orl	$32960, %ebx                    # imm = 0x80C0
	movq	%rbx, %rcx
	jmp	.LBB492_64
.LBB492_75:                             # %"$43"
	testb	$2, %r15b
	jne	.LBB492_76
# %bb.79:                               # %"$45"
	testb	$15, %r15b
	jne	.LBB492_98
# %bb.80:                               # %"$45"
	testq	%rbx, %rbx
	je	.LBB492_98
# %bb.81:                               # %"$53"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%rbx, (%r14)
	movq	(%r15), %r12
	movq	8(%r15), %rbx
	subq	$32, %rsp
	movq	%r12, %rcx
	movq	%r14, %rdx
	callq	natRetBuf
	addq	$32, %rsp
	cmpq	%r13, %r12
	jne	.LBB492_83
# %bb.82:                               # %"$53"
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB492_101
.LBB492_83:                             # %"$56"
	subq	$32, %rsp
	leaq	SymTab+8(%rip), %rdx
	movq	%rax, %rcx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rsi
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdx
	movq	%rsi, (%rdx)
	movq	%rdx, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rdx, (%rbp)                    # 8-byte Spill
	movq	%rdx, env(%rip)
	testb	$2, %bl
	jne	.LBB492_84
# %bb.93:
	movq	%rsi, %r15
	jmp	.LBB492_94
.LBB492_97:                             # %"$71"
                                        #   in Loop: Header=BB492_94 Depth=1
	subq	$32, %rsp
	movq	%rax, %rcx
	leaq	SymTab+8(%rip), %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rdi
	movq	%rax, 8(%r15)
	testb	$2, %bl
	movq	%rax, %r15
	jne	.LBB492_85
.LBB492_94:                             # %"$59"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %bl
	jne	.LBB492_89
# %bb.95:                               # %"$68"
                                        #   in Loop: Header=BB492_94 Depth=1
	movq	(%rbx), %r12
	movq	8(%rbx), %rbx
	subq	$32, %rsp
	movq	%r12, %rcx
	movq	%r14, %rdx
	callq	natRetBuf
	addq	$32, %rsp
	cmpq	%r13, %r12
	jne	.LBB492_97
# %bb.96:                               # %"$68"
                                        #   in Loop: Header=BB492_94 Depth=1
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	jne	.LBB492_97
	jmp	.LBB492_89
.LBB492_61:                             # %"$7.i"
	cmpl	$65535, %ebx                    # imm = 0xFFFF
	jg	.LBB492_63
# %bb.62:                               # %"$10.i47"
	shrl	$12, %eax
	leal	(,%rbx,4), %ecx
	andl	$16128, %ecx                    # imm = 0x3F00
	andl	$63, %ebx
	shll	$16, %ebx
	orl	%ecx, %ebx
	orl	%eax, %ebx
	orl	$8421600, %ebx                  # imm = 0x8080E0
	movq	%rbx, %rcx
	jmp	.LBB492_64
.LBB492_76:                             # %"$46"
	testb	$8, %r15b
	jne	.LBB492_77
# %bb.78:                               # %"$48"
	shrq	$4, %r15
	subq	$32, %rsp
	movq	%rbx, %rcx
	movq	%r15, %rdx
	callq	natRetDouble
	jmp	.LBB492_66
.LBB492_63:                             # %"$9.i48"
	shrl	$18, %eax
	andl	$7, %eax
	movl	%ebx, %ecx
	shrl	$4, %ecx
	andl	$16128, %ecx                    # imm = 0x3F00
	orl	%eax, %ecx
	movl	%ebx, %eax
	shll	$10, %eax
	andl	$4128768, %eax                  # imm = 0x3F0000
	orl	%ecx, %eax
	andl	$63, %ebx
	shll	$24, %ebx
	leal	-2139062032(%rbx,%rax), %ecx
	jmp	.LBB492_64
.LBB492_77:                             # %"$47"
	shrq	$4, %r15
	subq	$32, %rsp
	movl	%ebx, %ecx
	movq	%r15, %rdx
	callq	natRetFloat
	jmp	.LBB492_66
.LBB492_84:
	movq	%rsi, %rdi
.LBB492_85:                             # %"$61"
	shrq	$4, %rbx
	decq	%rbx
	je	.LBB492_89
# %bb.86:                               # %"$63.lr.ph"
	cmpq	%r13, %r12
	jne	.LBB492_87
# %bb.90:                               # %"$63.us.preheader"
	leaq	SymTab+312(%rip), %r12
.LBB492_91:                             # %"$63.us"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	movq	%r12, %rcx
	movq	%r14, %rdx
	callq	natRetBuf
	addq	$32, %rsp
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB492_89
# %bb.92:                               # %"$67.us"
                                        #   in Loop: Header=BB492_91 Depth=1
	subq	$32, %rsp
	movq	%rax, %rcx
	leaq	SymTab+8(%rip), %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, 8(%rdi)
	decq	%rbx
	movq	%rax, %rdi
	jne	.LBB492_91
	jmp	.LBB492_89
.LBB492_87:
	leaq	SymTab+8(%rip), %r15
.LBB492_88:                             # %"$63"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	movq	%r12, %rcx
	movq	%r14, %rdx
	callq	natRetBuf
	movq	%rax, %rcx
	movq	%r15, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, 8(%rdi)
	decq	%rbx
	movq	%rax, %rdi
	jne	.LBB492_88
.LBB492_89:                             # %"$60"
	movq	(%rbp), %rax                    # 8-byte Reload
	movq	8(%rax), %rax
	movq	%rax, env(%rip)
	jmp	.LBB492_101
.LBB492_102:                            # %"$8"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rdi, %rdx
	callq	argErr
.LBB492_21:                             # %"$9"
	subq	$32, %rsp
	leaq	.L$90(%rip), %r8
	movq	%r14, %rcx
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	callq	err
.LBB492_8:                              # %"$6.i"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rdi, %rdx
	callq	nameErr
.LBB492_98:                             # %"$52"
	subq	$32, %rsp
	movq	%r15, %rcx
	callq	natErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 cons2;
	.scl	2;
	.type	32;
	.endef
	.globl	cons2                           # -- Begin function cons2
	.p2align	4, 0x90
cons2:                                  # @cons2
.seh_proc cons2
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%r8, %r14
	movq	%rdx, %rdi
	movq	%rcx, %rbx
	movq	($Avail)(%rip), %rcx
	testq	%rcx, %rcx
	je	.LBB493_2
# %bb.1:                                # %"$2"
	movq	(%rcx), %rax
	testq	%rax, %rax
	jne	.LBB493_3
.LBB493_2:                              # %"$3"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rbx, (%rsi)
	movq	%rsi, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rcx
	movq	%rdi, (%rcx)
	movq	%rcx, %rax
	orq	$8, %rax
	movq	%rsi, (%rax)
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%r14, (%rax)
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%rcx, (%rdx)
	movq	%rax, env(%rip)
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	8(%rsi), %rax
	movq	%rax, env(%rip)
	movq	($Avail)(%rip), %rcx
	movq	(%rcx), %rax
.LBB493_3:                              # %"$4"
	movq	(%rax), %rdx
	movq	%rdx, ($Avail)(%rip)
	movq	%rbx, (%rcx)
	movq	%rdi, 8(%rcx)
	movq	%rcx, (%rax)
	movq	%r14, 8(%rax)
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 equal;
	.scl	2;
	.type	32;
	.endef
	.globl	equal                           # -- Begin function equal
	.p2align	4, 0x90
equal:                                  # @equal
.seh_proc equal
# %bb.0:                                # %"$1"
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	cmpq	%rdx, %rcx
	jne	.LBB494_2
.LBB494_1:
	movb	$1, %al
	jmp	.LBB494_50
.LBB494_2:                              # %"$3"
	movq	%rcx, %rsi
	testb	$2, %sil
	jne	.LBB494_49
# %bb.3:                                # %"$5"
	movq	%rdx, %rdi
	testb	$4, %sil
	jne	.LBB494_20
# %bb.4:                                # %"$7"
	testb	$8, %sil
	jne	.LBB494_27
# %bb.5:                                # %"$26"
	testb	$15, %dil
	jne	.LBB494_49
# %bb.6:                                # %"$63"
	cmpq	%rsp, ($StkLimit)(%rip)
	ja	.LBB494_52
# %bb.7:                                # %"$67.preheader"
	movq	(%rsi), %rax
	movq	%rsi, %rbx
	movq	%rdi, %r14
.LBB494_8:                              # %"$67"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r14), %rdx
	andq	$-2, %rdx
	movq	%rax, %rcx
	callq	equal
	testb	$1, %al
	je	.LBB494_40
# %bb.9:                                # %"$68"
                                        #   in Loop: Header=BB494_8 Depth=1
	movq	8(%rbx), %rcx
	testb	$15, %cl
	movq	8(%r14), %rdx
	jne	.LBB494_41
# %bb.10:                               # %"$71"
                                        #   in Loop: Header=BB494_8 Depth=1
	testb	$15, %dl
	jne	.LBB494_40
# %bb.11:                               # %"$73"
                                        #   in Loop: Header=BB494_8 Depth=1
	orb	$1, (%rbx)
	movq	8(%r14), %r14
	movq	(%rcx), %rax
	testb	$1, %al
	movq	%rcx, %rbx
	je	.LBB494_8
# %bb.12:                               # %"$77.preheader"
	cmpq	%rdi, %r14
	sete	%al
	cmpq	%rsi, %rcx
	je	.LBB494_16
.LBB494_13:                             # %"$78"
                                        # =>This Inner Loop Header: Depth=1
	testb	$1, %al
	jne	.LBB494_44
# %bb.14:                               # %"$90"
                                        #   in Loop: Header=BB494_13 Depth=1
	andb	$-2, (%rsi)
	movq	8(%rsi), %rsi
	movq	8(%rdi), %rdi
	cmpq	%r14, %rdi
	sete	%al
	cmpq	%rcx, %rsi
	jne	.LBB494_13
# %bb.15:
	movq	%rcx, %rsi
.LBB494_16:                             # %"$80"
	testb	%al, %al
	je	.LBB494_44
.LBB494_17:                             # %"$84"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rsi), %rsi
	movq	8(%rdi), %rdi
	cmpq	%rcx, %rsi
	je	.LBB494_19
# %bb.18:                               # %"$84"
                                        #   in Loop: Header=BB494_17 Depth=1
	cmpq	%r14, %rdi
	jne	.LBB494_17
.LBB494_19:                             # %"$79.loopexit"
	cmpq	%rcx, %rsi
	sete	%dl
	cmpq	%r14, %rdi
	setne	%al
	orb	%dl, %al
	jmp	.LBB494_54
.LBB494_20:                             # %"$8"
	testb	$2, %dil
	jne	.LBB494_49
# %bb.21:                               # %"$10"
	testb	$8, %sil
	je	.LBB494_24
# %bb.22:                               # %"$12"
	testb	$8, %dil
	je	.LBB494_49
# %bb.23:                               # %"$15"
	andq	$-9, %rsi
	andq	$-9, %rdi
	.p2align	4, 0x90
.LBB494_24:                             # %"$16"
                                        # =>This Inner Loop Header: Depth=1
	movq	-4(%rsi), %rax
	cmpq	-4(%rdi), %rax
	jne	.LBB494_49
# %bb.25:                               # %"$17"
                                        #   in Loop: Header=BB494_24 Depth=1
	movq	4(%rsi), %rsi
	movq	4(%rdi), %rdi
	cmpq	%rdi, %rsi
	je	.LBB494_1
# %bb.26:                               # %"$20"
                                        #   in Loop: Header=BB494_24 Depth=1
	movl	%edi, %ecx
	orl	%esi, %ecx
	xorl	%eax, %eax
	testb	$2, %cl
	je	.LBB494_24
	jmp	.LBB494_50
.LBB494_27:                             # %"$27"
	xorl	%eax, %eax
	testb	$6, %dil
	jne	.LBB494_50
# %bb.28:                               # %"$27"
	movl	%edi, %ecx
	andl	$15, %ecx
	testq	%rcx, %rcx
	je	.LBB494_50
# %bb.29:                               # %"$31"
	movq	-8(%rsi), %rcx
	testb	$8, %cl
	jne	.LBB494_49
	.p2align	4, 0x90
# %bb.30:                               # %"$36"
	testb	$6, %cl
	jne	.LBB494_32
.LBB494_31:                             # %"$36"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rcx
	testb	$6, %cl
	je	.LBB494_31
.LBB494_32:                             # %"$37"
	cmpq	$2, %rcx
	je	.LBB494_49
# %bb.33:                               # %"$38"
	movq	-8(%rdi), %rdx
	testb	$8, %dl
	jne	.LBB494_49
# %bb.34:                               # %"$43"
	testb	$6, %dl
	jne	.LBB494_36
.LBB494_35:                             # %"$43"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rdx), %rdx
	testb	$6, %dl
	je	.LBB494_35
.LBB494_36:                             # %"$44"
	cmpq	$2, %rdx
	je	.LBB494_49
# %bb.37:                               # %"$45"
	cmpq	%rdx, %rcx
	je	.LBB494_1
# %bb.45:                               # %"$47"
	movl	%edx, %eax
	orl	%ecx, %eax
	testb	$2, %al
	jne	.LBB494_49
.LBB494_46:                             # %"$53"
                                        # =>This Inner Loop Header: Depth=1
	movq	-4(%rcx), %rax
	cmpq	-4(%rdx), %rax
	jne	.LBB494_49
# %bb.47:                               # %"$54"
                                        #   in Loop: Header=BB494_46 Depth=1
	movq	4(%rcx), %rcx
	movq	4(%rdx), %rdx
	cmpq	%rdx, %rcx
	je	.LBB494_1
# %bb.48:                               # %"$57"
                                        #   in Loop: Header=BB494_46 Depth=1
	movl	%edx, %ebx
	orl	%ecx, %ebx
	xorl	%eax, %eax
	testb	$2, %bl
	je	.LBB494_46
	jmp	.LBB494_50
.LBB494_49:
	xorl	%eax, %eax
.LBB494_50:                             # %"$14"
                                        # kill: def $al killed $al killed $eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq
.LBB494_40:
	xorl	%eax, %eax
	jmp	.LBB494_42
.LBB494_41:                             # %"$72"
	callq	equal
                                        # kill: def $al killed $al def $eax
.LBB494_42:                             # %"$69"
	movq	%rbx, %rcx
	jmp	.LBB494_53
.LBB494_44:
	xorl	%eax, %eax
	jmp	.LBB494_54
.LBB494_52:                             # %"$65"
	xorl	%ecx, %ecx
	callq	stkErr
.LBB494_54:                             # %"$79"
	andb	$-2, (%rsi)
	movq	8(%rsi), %rsi
.LBB494_53:                             # %"$69"
	cmpq	%rcx, %rsi
	jne	.LBB494_54
	jmp	.LBB494_50
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 unify;
	.scl	2;
	.type	32;
	.endef
	.globl	unify                           # -- Begin function unify
	.p2align	4, 0x90
unify:                                  # @unify
.seh_proc unify
# %bb.0:                                # %"$1"
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%r9, %r14
	movq	%r8, %rdi
	movq	%rdx, %rbx
	movq	%rcx, %rsi
	movq	($Penv)(%rip), %r8
	movl	%ebx, %eax
	andl	$14, %eax
	cmpq	$8, %rax
	sete	%r13b
	leaq	SymTab+8(%rip), %r12
	cmpq	%r12, %rdx
	je	.LBB495_14
.LBB495_1:                              # %"$1"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB495_3 Depth 2
                                        #     Child Loop BB495_10 Depth 2
	cmpl	$8, %eax
	jne	.LBB495_14
# %bb.2:                                # %"$3.i"
                                        #   in Loop: Header=BB495_1 Depth=1
	movq	-8(%rbx), %rax
	testb	$8, %al
	jne	.LBB495_14
	.p2align	4, 0x90
# %bb.4:                                # %"$8.i"
                                        #   in Loop: Header=BB495_1 Depth=1
	testb	$6, %al
	jne	.LBB495_5
.LBB495_3:                              # %"$8.i"
                                        #   Parent Loop BB495_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB495_3
.LBB495_5:                              # %"$9.i"
                                        #   in Loop: Header=BB495_1 Depth=1
	testb	$2, %al
	jne	.LBB495_6
# %bb.7:                                # %"$10.i"
                                        #   in Loop: Header=BB495_1 Depth=1
	movb	-4(%rax), %al
	jmp	.LBB495_8
	.p2align	4, 0x90
.LBB495_6:                              # %"$11.i"
                                        #   in Loop: Header=BB495_1 Depth=1
	shrq	$4, %rax
.LBB495_8:                              # %firstByte.exit
                                        #   in Loop: Header=BB495_1 Depth=1
	cmpb	$64, %al
	jne	.LBB495_14
# %bb.9:                                # %"$4"
                                        #   in Loop: Header=BB495_1 Depth=1
	movq	(%r8), %rax
	jmp	.LBB495_10
	.p2align	4, 0x90
.LBB495_60:                             # %"$12"
                                        #   in Loop: Header=BB495_10 Depth=2
	movq	8(%rax), %rax
.LBB495_10:                             # %"$4"
                                        #   Parent Loop BB495_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rax), %rcx
	testb	$15, %cl
	jne	.LBB495_14
# %bb.11:                               # %"$7"
                                        #   in Loop: Header=BB495_10 Depth=2
	movq	(%rcx), %rdx
	cmpq	(%rdx), %rsi
	jne	.LBB495_60
# %bb.12:                               # %"$10"
                                        #   in Loop: Header=BB495_10 Depth=2
	cmpq	8(%rdx), %rbx
	jne	.LBB495_60
# %bb.13:                               # %"$11"
                                        #   in Loop: Header=BB495_1 Depth=1
	movq	8(%rcx), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rbx
	movl	%ebx, %eax
	andl	$14, %eax
	cmpq	$8, %rax
	sete	%r13b
	cmpq	%r12, %rbx
	jne	.LBB495_1
	jmp	.LBB495_14
.LBB495_40:                             # %"$22"
                                        #   in Loop: Header=BB495_14 Depth=1
	movq	8(%rcx), %rax
	movq	(%rax), %rdi
	movq	8(%rax), %r14
	.p2align	4, 0x90
.LBB495_14:                             # %"$5"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB495_30 Depth 2
                                        #     Child Loop BB495_37 Depth 2
	movl	%r14d, %eax
	andl	$14, %eax
	cmpq	$8, %rax
	sete	%r15b
	cmpq	%r12, %r14
	je	.LBB495_17
# %bb.15:                               # %"$5"
                                        #   in Loop: Header=BB495_14 Depth=1
	cmpl	$8, %eax
	jne	.LBB495_17
# %bb.16:                               # %"$3.i4"
                                        #   in Loop: Header=BB495_14 Depth=1
	movq	-8(%r14), %rax
	testb	$8, %al
	jne	.LBB495_17
	.p2align	4, 0x90
# %bb.31:                               # %"$8.i8"
                                        #   in Loop: Header=BB495_14 Depth=1
	testb	$6, %al
	jne	.LBB495_32
.LBB495_30:                             # %"$8.i8"
                                        #   Parent Loop BB495_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB495_30
.LBB495_32:                             # %"$9.i11"
                                        #   in Loop: Header=BB495_14 Depth=1
	testb	$2, %al
	jne	.LBB495_33
# %bb.34:                               # %"$10.i15"
                                        #   in Loop: Header=BB495_14 Depth=1
	movb	-4(%rax), %al
	jmp	.LBB495_35
	.p2align	4, 0x90
.LBB495_33:                             # %"$11.i13"
                                        #   in Loop: Header=BB495_14 Depth=1
	shrq	$4, %rax
.LBB495_35:                             # %firstByte.exit17
                                        #   in Loop: Header=BB495_14 Depth=1
	cmpb	$64, %al
	jne	.LBB495_17
# %bb.36:                               # %"$15"
                                        #   in Loop: Header=BB495_14 Depth=1
	movq	(%r8), %rax
	jmp	.LBB495_37
	.p2align	4, 0x90
.LBB495_61:                             # %"$23"
                                        #   in Loop: Header=BB495_37 Depth=2
	movq	8(%rax), %rax
.LBB495_37:                             # %"$15"
                                        #   Parent Loop BB495_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rax), %rcx
	testb	$15, %cl
	jne	.LBB495_17
# %bb.38:                               # %"$18"
                                        #   in Loop: Header=BB495_37 Depth=2
	movq	(%rcx), %rdx
	cmpq	(%rdx), %rdi
	jne	.LBB495_61
# %bb.39:                               # %"$21"
                                        #   in Loop: Header=BB495_37 Depth=2
	cmpq	8(%rdx), %r14
	jne	.LBB495_61
	jmp	.LBB495_40
.LBB495_17:                             # %"$16"
	cmpq	%rdi, %rsi
	jne	.LBB495_19
# %bb.18:                               # %"$26"
	movq	%rbx, %rcx
	movq	%r14, %rdx
	movq	%r8, %rbp
	callq	equal
	movq	%rbp, %r8
	movb	$1, %bpl
	testb	$1, %al
	jne	.LBB495_57
.LBB495_19:                             # %"$27"
	cmpq	%r12, %rbx
	je	.LBB495_22
# %bb.20:                               # %"$27"
	xorb	$1, %r13b
	testb	$1, %r13b
	jne	.LBB495_22
# %bb.21:                               # %"$3.i19"
	movq	-8(%rbx), %rax
	testb	$8, %al
	jne	.LBB495_22
	.p2align	4, 0x90
# %bb.42:                               # %"$8.i23"
	testb	$6, %al
	jne	.LBB495_43
.LBB495_41:                             # %"$8.i23"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB495_41
.LBB495_43:                             # %"$9.i26"
	testb	$2, %al
	jne	.LBB495_44
# %bb.45:                               # %"$10.i30"
	movb	-4(%rax), %al
	cmpb	$64, %al
	je	.LBB495_47
.LBB495_22:                             # %"$31"
	cmpq	%r12, %r14
	je	.LBB495_25
# %bb.23:                               # %"$31"
	xorb	$1, %r15b
	testb	$1, %r15b
	jne	.LBB495_25
# %bb.24:                               # %"$3.i34"
	movq	-8(%r14), %rax
	testb	$8, %al
	jne	.LBB495_25
	.p2align	4, 0x90
# %bb.50:                               # %"$8.i38"
	testb	$6, %al
	jne	.LBB495_51
.LBB495_49:                             # %"$8.i38"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB495_49
.LBB495_51:                             # %"$9.i41"
	testb	$2, %al
	jne	.LBB495_52
# %bb.53:                               # %"$10.i45"
	movb	-4(%rax), %al
	cmpb	$64, %al
	je	.LBB495_55
.LBB495_25:                             # %"$37"
	movl	%r14d, %eax
	orl	%ebx, %eax
	testb	$15, %al
	je	.LBB495_26
# %bb.58:                               # %"$44"
	movq	%rbx, %rcx
	movq	%r14, %rdx
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	equal                           # TAILCALL
.LBB495_26:                             # %"$43"
	cmpq	%rsp, ($StkLimit)(%rip)
	ja	.LBB495_59
# %bb.27:                               # %"$46"
	movq	(%r8), %r15
	movq	(%rbx), %rdx
	movq	(%r14), %r9
	movq	%rsi, %rcx
	movq	%r8, %rbp
	movq	%rdi, %r8
	callq	unify
	movq	%rbp, %rcx
	testb	$1, %al
	je	.LBB495_29
# %bb.28:                               # %"$49"
	movq	8(%rbx), %rdx
	movq	8(%r14), %r9
	movq	%rsi, %rcx
	movq	%rdi, %r8
	callq	unify
	movq	%rbp, %rcx
	movb	$1, %bpl
	testb	$1, %al
	jne	.LBB495_57
.LBB495_29:                             # %"$50"
	movq	%r15, (%rcx)
	xorl	%ebp, %ebp
	jmp	.LBB495_57
.LBB495_44:                             # %"$11.i28"
	shrq	$4, %rax
	cmpb	$64, %al
	jne	.LBB495_22
.LBB495_47:                             # %"$32"
	movb	$1, %bpl
	leaq	SymTab+440(%rip), %rax
	cmpq	%rax, %rbx
	je	.LBB495_57
# %bb.48:                               # %"$33"
	movq	%rsi, %rcx
	movq	%rbx, %rdx
	movq	%r8, %rsi
	movq	%rdi, %r8
	movq	%r14, %r9
	callq	cons3
	movq	(%rsi), %rdx
	movq	%rax, %rcx
	callq	cons
	movq	%rax, (%rsi)
	jmp	.LBB495_57
.LBB495_52:                             # %"$11.i43"
	shrq	$4, %rax
	cmpb	$64, %al
	jne	.LBB495_25
.LBB495_55:                             # %"$38"
	movb	$1, %bpl
	leaq	SymTab+440(%rip), %rax
	cmpq	%rax, %r14
	je	.LBB495_57
# %bb.56:                               # %"$39"
	movq	%rdi, %rcx
	movq	%r14, %rdx
	movq	%r8, %rdi
	movq	%rsi, %r8
	movq	%rbx, %r9
	callq	cons3
	movq	(%rdi), %rdx
	movq	%rax, %rcx
	callq	cons
	movq	%rax, (%rdi)
.LBB495_57:                             # %"$24"
	movl	%ebp, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB495_59:                             # %"$45"
	xorl	%ecx, %ecx
	callq	stkErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 cons3;
	.scl	2;
	.type	32;
	.endef
	.globl	cons3                           # -- Begin function cons3
	.p2align	4, 0x90
cons3:                                  # @cons3
.seh_proc cons3
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%r9, %r14
	movq	%r8, %r15
	movq	%rdx, %rbx
	movq	%rcx, %rsi
	movq	($Avail)(%rip), %rcx
	testq	%rcx, %rcx
	je	.LBB496_3
# %bb.1:                                # %"$2"
	movq	(%rcx), %rdx
	testq	%rdx, %rdx
	je	.LBB496_3
# %bb.2:                                # %"$4"
	movq	(%rdx), %rax
	testq	%rax, %rax
	jne	.LBB496_4
.LBB496_3:                              # %"$3"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rsi, (%rdi)
	movq	%rdi, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rcx
	movq	%rbx, (%rcx)
	movq	%rcx, %rax
	orq	$8, %rax
	movq	%rdi, (%rax)
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdx
	movq	%r15, (%rdx)
	movq	%rdx, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%r14, (%rax)
	movq	%rax, %rcx
	orq	$8, %rcx
	movq	%rdx, (%rcx)
	movq	%rax, env(%rip)
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	8(%rdi), %rax
	movq	%rax, env(%rip)
	movq	($Avail)(%rip), %rcx
	movq	(%rcx), %rdx
	movq	(%rdx), %rax
.LBB496_4:                              # %"$6"
	movq	(%rax), %rdi
	movq	%rdi, ($Avail)(%rip)
	movq	%rsi, (%rcx)
	movq	%rbx, 8(%rcx)
	movq	%r15, (%rdx)
	movq	%r14, 8(%rdx)
	movq	%rcx, (%rax)
	movq	%rdx, 8(%rax)
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 lup;
	.scl	2;
	.type	32;
	.endef
	.globl	lup                             # -- Begin function lup
	.p2align	4, 0x90
lup:                                    # @lup
.seh_proc lup
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rdx, %rsi
	movq	%rcx, %rdi
	leaq	SymTab+8(%rip), %r8
	cmpq	%r8, %rdx
	je	.LBB497_16
# %bb.1:                                # %"$1"
	movl	%esi, %eax
	andl	$14, %eax
	cmpl	$8, %eax
	jne	.LBB497_16
# %bb.2:                                # %"$3.i.lr.ph"
	movq	($Penv)(%rip), %rcx
.LBB497_3:                              # %"$3.i"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB497_4 Depth 2
                                        #     Child Loop BB497_11 Depth 2
	movq	-8(%rsi), %rdx
	testb	$8, %dl
	jne	.LBB497_16
	.p2align	4, 0x90
# %bb.5:                                # %"$8.i"
                                        #   in Loop: Header=BB497_3 Depth=1
	testb	$6, %dl
	jne	.LBB497_6
.LBB497_4:                              # %"$8.i"
                                        #   Parent Loop BB497_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rdx), %rdx
	testb	$6, %dl
	je	.LBB497_4
.LBB497_6:                              # %"$9.i"
                                        #   in Loop: Header=BB497_3 Depth=1
	testb	$2, %dl
	jne	.LBB497_7
# %bb.8:                                # %"$10.i"
                                        #   in Loop: Header=BB497_3 Depth=1
	movb	-4(%rdx), %dl
	jmp	.LBB497_9
	.p2align	4, 0x90
.LBB497_7:                              # %"$11.i"
                                        #   in Loop: Header=BB497_3 Depth=1
	shrq	$4, %rdx
.LBB497_9:                              # %firstByte.exit
                                        #   in Loop: Header=BB497_3 Depth=1
	cmpb	$64, %dl
	jne	.LBB497_16
# %bb.10:                               # %"$6.preheader"
                                        #   in Loop: Header=BB497_3 Depth=1
	movq	(%rcx), %rdx
	jmp	.LBB497_11
	.p2align	4, 0x90
.LBB497_23:                             # %"$12"
                                        #   in Loop: Header=BB497_11 Depth=2
	movq	8(%rdx), %rdx
.LBB497_11:                             # %"$6.preheader"
                                        #   Parent Loop BB497_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rdx), %rbx
	testb	$15, %bl
	jne	.LBB497_16
# %bb.12:                               # %"$7"
                                        #   in Loop: Header=BB497_11 Depth=2
	movq	(%rbx), %rax
	cmpq	(%rax), %rdi
	jne	.LBB497_23
# %bb.13:                               # %"$10"
                                        #   in Loop: Header=BB497_11 Depth=2
	cmpq	8(%rax), %rsi
	jne	.LBB497_23
# %bb.14:                               # %"$11"
                                        #   in Loop: Header=BB497_3 Depth=1
	movq	8(%rbx), %rax
	movq	(%rax), %rdi
	movq	8(%rax), %rsi
	cmpq	%r8, %rsi
	je	.LBB497_16
# %bb.15:                               # %"$11"
                                        #   in Loop: Header=BB497_3 Depth=1
	movl	%esi, %eax
	andl	$14, %eax
	cmpl	$8, %eax
	je	.LBB497_3
.LBB497_16:                             # %"$5"
	testb	$15, %sil
	jne	.LBB497_21
# %bb.17:                               # %"$14"
	movq	(%rsi), %rax
	leaq	SymTab+728(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB497_21
# %bb.18:                               # %"$14"
	andl	$2, %eax
	testq	%rax, %rax
	jne	.LBB497_21
# %bb.19:                               # %"$17"
	cmpq	%rsp, ($StkLimit)(%rip)
	ja	.LBB497_22
# %bb.20:                               # %"$20"
	movq	(%rsi), %rdx
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	lup
	addq	$32, %rsp
	movq	%rax, %r14
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%r14, (%rbx)
	movq	%rbx, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rbx, env(%rip)
	movq	8(%rsi), %rdx
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	lup
	movq	%r14, %rcx
	movq	%rax, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rsi
	movq	8(%rbx), %rax
	movq	%rax, env(%rip)
.LBB497_21:                             # %"$18"
	movq	%rsi, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	retq
.LBB497_22:                             # %"$19"
	subq	$32, %rsp
	xorl	%ecx, %ecx
	callq	stkErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 get;
	.scl	2;
	.type	32;
	.endef
	.globl	get                             # -- Begin function get
	.p2align	4, 0x90
get:                                    # @get
# %bb.0:                                # %"$1"
	pushq	%rsi
	cmpq	$2, %rdx
	jne	.LBB498_1
# %bb.21:                               # %"$2"
	movq	(%rcx), %rax
	jmp	.LBB498_22
.LBB498_1:                              # %"$3"
	movq	-8(%rcx), %r8
	leaq	SymTab+8(%rip), %rax
	testb	$6, %r8b
	je	.LBB498_2
.LBB498_22:                             # %"$10"
	popq	%rsi
	retq
.LBB498_2:                              # %"$5"
	movq	%r8, %r10
	andq	$-9, %r10
	movq	(%r10), %rsi
	testb	$15, %sil
	je	.LBB498_5
# %bb.3:                                # %"$7"
	cmpq	%rdx, %rsi
	jne	.LBB498_6
.LBB498_4:
	leaq	SymTab+280(%rip), %rax
	popq	%rsi
	retq
.LBB498_5:                              # %"$8"
	cmpq	%rdx, 8(%rsi)
	jne	.LBB498_6
.LBB498_20:                             # %"$12"
	movq	(%rsi), %rax
	popq	%rsi
	retq
.LBB498_6:                              # %"$9"
	movq	8(%r10), %r9
	testb	$15, %r9b
	jne	.LBB498_22
# %bb.7:                                # %"$15.preheader"
	leaq	8(%r10), %r11
	jmp	.LBB498_10
	.p2align	4, 0x90
.LBB498_8:                              # %"$18"
                                        #   in Loop: Header=BB498_10 Depth=1
	cmpq	%rdx, 8(%rsi)
	je	.LBB498_14
.LBB498_9:                              # %"$19"
                                        #   in Loop: Header=BB498_10 Depth=1
	movq	%r9, %r11
	movq	8(%r9), %r9
	addq	$8, %r11
	testb	$15, %r9b
	jne	.LBB498_22
.LBB498_10:                             # %"$15"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r9), %rsi
	testb	$15, %sil
	je	.LBB498_8
# %bb.11:                               # %"$17"
                                        #   in Loop: Header=BB498_10 Depth=1
	cmpq	%rdx, %rsi
	jne	.LBB498_9
# %bb.12:                               # %"$20"
	movq	8(%r9), %rax
	movq	%rax, (%r11)
	testb	$8, %r8b
	jne	.LBB498_16
# %bb.13:                               # %"$22"
	movq	%r8, 8(%r9)
	jmp	.LBB498_17
.LBB498_14:                             # %"$25"
	movq	8(%r9), %rax
	movq	%rax, (%r11)
	testb	$8, %r8b
	jne	.LBB498_18
# %bb.15:                               # %"$27"
	movq	%r8, 8(%r9)
	jmp	.LBB498_19
.LBB498_16:                             # %"$23"
	movq	%r10, 8(%r9)
	orq	$8, %r9
.LBB498_17:                             # %"$24"
	movq	%r9, -8(%rcx)
	jmp	.LBB498_4
.LBB498_18:                             # %"$28"
	movq	%r10, 8(%r9)
	orq	$8, %r9
.LBB498_19:                             # %"$29"
	movq	%r9, -8(%rcx)
	jmp	.LBB498_20
                                        # -- End function
	.def	 uniFill;
	.scl	2;
	.type	32;
	.endef
	.globl	uniFill                         # -- Begin function uniFill
	.p2align	4, 0x90
uniFill:                                # @uniFill
.seh_proc uniFill
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rsi
	testb	$6, %sil
	jne	.LBB499_4
# %bb.1:                                # %"$3"
	testb	$8, %sil
	jne	.LBB499_5
# %bb.2:                                # %"$5"
	cmpq	%rsp, ($StkLimit)(%rip)
	ja	.LBB499_6
# %bb.3:                                # %"$8"
	movq	(%rsi), %rcx
	subq	$32, %rsp
	callq	uniFill
	addq	$32, %rsp
	movq	%rax, %rdi
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rdi, (%rbx)
	movq	%rbx, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rbx, env(%rip)
	movq	8(%rsi), %rcx
	subq	$32, %rsp
	callq	uniFill
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rsi
	movq	8(%rbx), %rax
	movq	%rax, env(%rip)
.LBB499_4:                              # %"$2"
	movq	%rsi, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%rbp
	retq
.LBB499_5:                              # %"$6"
	movq	($Pnl)(%rip), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	movq	%rsi, %rdx
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%rbp
	jmp	lup                             # TAILCALL
.LBB499_6:                              # %"$7"
	subq	$32, %rsp
	xorl	%ecx, %ecx
	callq	stkErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 uniRun;
	.scl	2;
	.type	32;
	.endef
	.globl	uniRun                          # -- Begin function uniRun
	.p2align	4, 0x90
uniRun:                                 # @uniRun
.seh_proc uniRun
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %r14
	movq	env+8(%rip), %r13
	xorl	%eax, %eax
	leaq	SymTab+8(%rip), %r15
	movq	%r13, %r12
.LBB500_1:                              # %"$2"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB500_4 Depth 2
                                        #     Child Loop BB500_9 Depth 2
                                        #     Child Loop BB500_18 Depth 2
                                        #       Child Loop BB500_22 Depth 3
                                        #       Child Loop BB500_56 Depth 3
	movq	%rcx, %rbx
	movq	(%rcx), %rsi
	testb	$15, %sil
	je	.LBB500_3
# %bb.2:                                #   in Loop: Header=BB500_1 Depth=1
	movq	%rax, %rdx
	jmp	.LBB500_5
	.p2align	4, 0x90
.LBB500_3:                              # %"$4.preheader"
                                        #   in Loop: Header=BB500_1 Depth=1
	movq	%rbx, %rcx
	.p2align	4, 0x90
.LBB500_4:                              # %"$4"
                                        #   Parent Loop BB500_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rbx, %rdx
	movq	%rsi, %rbx
	movq	%rax, (%rcx)
	movq	(%rsi), %rsi
	testb	$15, %sil
	movq	%rbx, %rcx
	movq	%rdx, %rax
	je	.LBB500_4
.LBB500_5:                              # %"$5"
                                        #   in Loop: Header=BB500_1 Depth=1
	movl	%esi, %eax
	andl	$14, %eax
	cmpl	$8, %eax
	jne	.LBB500_16
# %bb.6:                                # %"$7"
                                        #   in Loop: Header=BB500_1 Depth=1
	cmpq	%r15, %rsi
	je	.LBB500_16
# %bb.7:                                # %"$7"
                                        #   in Loop: Header=BB500_1 Depth=1
	movq	(%rsi), %rdi
	cmpq	$10, %rdi
	je	.LBB500_16
# %bb.8:                                # %"$3.i"
                                        #   in Loop: Header=BB500_1 Depth=1
	movq	-8(%rsi), %rax
	testb	$8, %al
	jne	.LBB500_16
	.p2align	4, 0x90
# %bb.10:                               # %"$8.i"
                                        #   in Loop: Header=BB500_1 Depth=1
	testb	$6, %al
	jne	.LBB500_11
.LBB500_9:                              # %"$8.i"
                                        #   Parent Loop BB500_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB500_9
.LBB500_11:                             # %"$9.i"
                                        #   in Loop: Header=BB500_1 Depth=1
	testb	$2, %al
	jne	.LBB500_12
# %bb.13:                               # %"$10.i"
                                        #   in Loop: Header=BB500_1 Depth=1
	movb	-4(%rax), %al
	cmpb	$64, %al
	jne	.LBB500_16
.LBB500_15:                             # %"$9"
                                        #   in Loop: Header=BB500_1 Depth=1
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rdi, (%rax)
	movq	%rax, %rcx
	orq	$8, %rcx
	movq	%rsi, (%rcx)
	movq	%r12, 16(%rax)
	movq	%rax, env+8(%rip)
	movq	$10, (%rsi)
	movq	%rax, %r12
	.p2align	4, 0x90
.LBB500_16:                             # %"$10"
                                        #   in Loop: Header=BB500_1 Depth=1
	movq	8(%rbx), %rcx
	testb	$15, %cl
	je	.LBB500_17
.LBB500_18:                             # %"$12"
                                        #   Parent Loop BB500_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB500_22 Depth 3
                                        #       Child Loop BB500_56 Depth 3
	movl	%ecx, %eax
	andl	$14, %eax
	cmpl	$8, %eax
	jne	.LBB500_29
# %bb.19:                               # %"$16"
                                        #   in Loop: Header=BB500_18 Depth=2
	cmpq	%r15, %rcx
	je	.LBB500_29
# %bb.20:                               # %"$16"
                                        #   in Loop: Header=BB500_18 Depth=2
	movq	(%rcx), %rdi
	cmpq	$10, %rdi
	je	.LBB500_29
# %bb.21:                               # %"$3.i14"
                                        #   in Loop: Header=BB500_18 Depth=2
	movq	-8(%rcx), %rax
	testb	$8, %al
	jne	.LBB500_29
	.p2align	4, 0x90
# %bb.23:                               # %"$8.i18"
                                        #   in Loop: Header=BB500_18 Depth=2
	testb	$6, %al
	jne	.LBB500_24
.LBB500_22:                             # %"$8.i18"
                                        #   Parent Loop BB500_1 Depth=1
                                        #     Parent Loop BB500_18 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB500_22
.LBB500_24:                             # %"$9.i21"
                                        #   in Loop: Header=BB500_18 Depth=2
	testb	$2, %al
	jne	.LBB500_25
# %bb.26:                               # %"$10.i25"
                                        #   in Loop: Header=BB500_18 Depth=2
	movb	-4(%rax), %al
	cmpb	$64, %al
	je	.LBB500_28
	jmp	.LBB500_29
.LBB500_25:                             # %"$11.i23"
                                        #   in Loop: Header=BB500_18 Depth=2
	shrq	$4, %rax
	cmpb	$64, %al
	jne	.LBB500_29
.LBB500_28:                             # %"$18"
                                        #   in Loop: Header=BB500_18 Depth=2
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rdi, (%rsi)
	movq	%rsi, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r12, 16(%rsi)
	movq	%rsi, env+8(%rip)
	movq	$10, (%rcx)
	movq	%rsi, %r12
	.p2align	4, 0x90
.LBB500_29:                             # %"$19"
                                        #   in Loop: Header=BB500_18 Depth=2
	testq	%rdx, %rdx
	je	.LBB500_30
	.p2align	4, 0x90
.LBB500_56:                             # %"$22"
                                        #   Parent Loop BB500_1 Depth=1
                                        #     Parent Loop BB500_18 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	testb	$8, %dl
	je	.LBB500_57
# %bb.55:                               # %"$39"
                                        #   in Loop: Header=BB500_56 Depth=3
	movq	%rdx, %rax
	andq	$-9, %rax
	movq	8(%rax), %rdx
	movq	%rbx, 8(%rax)
	testq	%rdx, %rdx
	movq	%rax, %rbx
	jne	.LBB500_56
	jmp	.LBB500_30
	.p2align	4, 0x90
.LBB500_57:                             # %"$41"
                                        #   in Loop: Header=BB500_18 Depth=2
	movq	(%rdx), %rax
	movq	8(%rdx), %rcx
	movq	%rbx, (%rdx)
	testb	$15, %cl
	movq	%rdx, %rbx
	movq	%rax, %rdx
	jne	.LBB500_18
	.p2align	4, 0x90
.LBB500_17:                             # %"$14"
                                        #   in Loop: Header=BB500_1 Depth=1
	movq	%rdx, 8(%rbx)
	movq	%rbx, %rax
	orq	$8, %rax
	jmp	.LBB500_1
.LBB500_12:                             # %"$11.i"
                                        #   in Loop: Header=BB500_1 Depth=1
	shrq	$4, %rax
	cmpb	$64, %al
	je	.LBB500_15
	jmp	.LBB500_16
.LBB500_30:                             # %"$21"
	cmpq	%r12, %r13
	movq	%r13, %rdi
	je	.LBB500_39
# %bb.31:
	movq	($Pnl)(%rip), %rax
	movq	(%rax), %rax
	movq	(%rax), %rdi
	movq	%r12, %rsi
	jmp	.LBB500_32
.LBB500_44:                             # %"$10.i.i"
                                        #   in Loop: Header=BB500_32 Depth=1
	movb	-4(%rcx), %cl
.LBB500_45:                             # %"$2.i"
                                        #   in Loop: Header=BB500_32 Depth=1
	cmpb	$64, %cl
	cmoveq	%r15, %rax
.LBB500_46:                             # %lookup.exit
                                        #   in Loop: Header=BB500_32 Depth=1
	movq	%rax, (%rbx)
	movq	16(%rsi), %rsi
	cmpq	%rsi, %r13
	je	.LBB500_47
.LBB500_32:                             # %"$24"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB500_35 Depth 2
	movq	8(%rsi), %rbx
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%rbx, %rdx
	callq	lup
	addq	$32, %rsp
	cmpq	%r15, %rax
	je	.LBB500_46
# %bb.33:                               # %"$24"
                                        #   in Loop: Header=BB500_32 Depth=1
	movl	%eax, %ecx
	andl	$14, %ecx
	cmpl	$8, %ecx
	jne	.LBB500_46
# %bb.34:                               # %"$3.i.i"
                                        #   in Loop: Header=BB500_32 Depth=1
	movq	-8(%rax), %rcx
	testb	$8, %cl
	jne	.LBB500_46
	.p2align	4, 0x90
# %bb.36:                               # %"$8.i.i"
                                        #   in Loop: Header=BB500_32 Depth=1
	testb	$6, %cl
	jne	.LBB500_37
.LBB500_35:                             # %"$8.i.i"
                                        #   Parent Loop BB500_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rcx), %rcx
	testb	$6, %cl
	je	.LBB500_35
.LBB500_37:                             # %"$9.i.i"
                                        #   in Loop: Header=BB500_32 Depth=1
	testb	$2, %cl
	je	.LBB500_44
# %bb.38:                               # %"$11.i.i"
                                        #   in Loop: Header=BB500_32 Depth=1
	shrq	$4, %rcx
	jmp	.LBB500_45
.LBB500_47:
	movq	%r12, %rdi
.LBB500_39:                             # %"$26.preheader"
	movq	(%r14), %rcx
	movq	8(%r14), %rsi
	jmp	.LBB500_40
	.p2align	4, 0x90
.LBB500_54:                             # %"$37"
                                        #   in Loop: Header=BB500_40 Depth=1
	movq	(%rsi), %rcx
	movq	8(%rsi), %rsi
.LBB500_40:                             # %"$26.preheader"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %sil
	jne	.LBB500_41
# %bb.52:                               # %"$28"
                                        #   in Loop: Header=BB500_40 Depth=1
	testb	$15, %cl
	jne	.LBB500_54
# %bb.53:                               # %"$38"
                                        #   in Loop: Header=BB500_40 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	jmp	.LBB500_54
.LBB500_41:                             # %"$27"
	testb	$6, %cl
	jne	.LBB500_50
# %bb.42:                               # %"$30"
	testb	$8, %cl
	jne	.LBB500_43
# %bb.48:                               # %"$32"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB500_50
.LBB500_43:                             # %"$33"
	movq	(%rcx), %rcx
	jmp	.LBB500_50
	.p2align	4, 0x90
.LBB500_49:                             # %"$35"
                                        #   in Loop: Header=BB500_50 Depth=1
	movq	(%rdi), %rax
	movq	8(%rdi), %rdx
	movq	%rax, (%rdx)
	movq	16(%rdi), %rdi
.LBB500_50:                             # %"$35"
                                        # =>This Inner Loop Header: Depth=1
	cmpq	%rdi, %r13
	jne	.LBB500_49
# %bb.51:                               # %"$36"
	movq	%r13, env+8(%rip)
	movq	%rcx, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 fill3;
	.scl	2;
	.type	32;
	.endef
	.globl	fill3                           # -- Begin function fill3
	.p2align	4, 0x90
fill3:                                  # @fill3
.seh_proc fill3
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%r8, %rsi
	movq	%rdx, %rdi
	testb	$15, %cl
	je	.LBB501_2
# %bb.1:                                # %"$2"
	xorl	%eax, %eax
	cmpq	%rdi, %rcx
	cmoveq	%rsi, %rax
	jmp	.LBB501_7
.LBB501_2:                              # %"$3"
	cmpq	%rsp, ($StkLimit)(%rip)
	ja	.LBB501_8
# %bb.3:                                # %"$9"
	movq	(%rcx), %r15
	movq	8(%rcx), %r12
	subq	$32, %rsp
	movq	%r15, %rcx
	movq	%rdi, %rdx
	movq	%rsi, %r8
	callq	fill3
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB501_5
# %bb.4:                                # %"$12"
	movq	%rax, %r14
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%r14, (%rbx)
	movq	%rbx, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rbx, env(%rip)
	subq	$32, %rsp
	movq	%r12, %rcx
	movq	%rdi, %rdx
	movq	%rsi, %r8
	callq	fill3
	addq	$32, %rsp
	testq	%rax, %rax
	cmovneq	%rax, %r12
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%r12, %rdx
	callq	cons
	addq	$32, %rsp
	movq	8(%rbx), %rcx
	movq	%rcx, env(%rip)
.LBB501_7:                              # %"$4"
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB501_5:                              # %"$11"
	subq	$32, %rsp
	movq	%r12, %rcx
	movq	%rdi, %rdx
	movq	%rsi, %r8
	callq	fill3
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB501_6
# %bb.9:                                # %"$17"
	movq	%r15, %rcx
	movq	%rax, %rdx
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	cons                            # TAILCALL
.LBB501_6:
	xorl	%eax, %eax
	jmp	.LBB501_7
.LBB501_8:                              # %"$8"
	subq	$32, %rsp
	xorl	%ecx, %ecx
	callq	stkErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 fill2;
	.scl	2;
	.type	32;
	.endef
	.globl	fill2                           # -- Begin function fill2
	.p2align	4, 0x90
fill2:                                  # @fill2
.seh_proc fill2
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	testb	$6, %cl
	je	.LBB502_3
.LBB502_1:
	xorl	%ebx, %ebx
.LBB502_2:                              # %"$17"
	movq	%rbx, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB502_3:                              # %"$3"
	movq	%rdx, %rsi
	testb	$8, %cl
	jne	.LBB502_9
# %bb.4:                                # %"$5"
	cmpq	%rsp, ($StkLimit)(%rip)
	ja	.LBB502_41
# %bb.5:                                # %"$28"
	movq	(%rcx), %rbx
	movq	8(%rcx), %rdi
	leaq	SymTab+728(%rip), %rax
	cmpq	%rax, %rbx
	jne	.LBB502_19
# %bb.6:                                # %"$29"
	movq	(%rdi), %rbx
	movq	8(%rdi), %r14
	testb	$6, %bl
	jne	.LBB502_29
# %bb.7:                                # %"$33"
	testb	$8, %bl
	jne	.LBB502_28
# %bb.8:                                # %"$35"
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rbx
	jmp	.LBB502_29
.LBB502_9:                              # %"$6"
	movq	(%rcx), %rax
	cmpq	%rcx, %rax
	je	.LBB502_1
# %bb.11:                               # %"$8"
	leaq	SymTab+8(%rip), %rdx
	cmpq	%rdx, %rsi
	jne	.LBB502_21
# %bb.12:                               # %"$11"
	leaq	SymTab+440(%rip), %rdi
	xorl	%ebx, %ebx
	cmpq	%rdi, %rcx
	je	.LBB502_2
# %bb.13:                               # %"$11"
	cmpq	%rdx, %rcx
	je	.LBB502_2
# %bb.14:                               # %"$3.i"
	movq	-8(%rcx), %rcx
	testb	$8, %cl
	jne	.LBB502_1
# %bb.15:                               # %"$8.i"
	testb	$6, %cl
	jne	.LBB502_17
.LBB502_16:                             # %"$8.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rcx
	testb	$6, %cl
	je	.LBB502_16
.LBB502_17:                             # %"$9.i"
	testb	$2, %cl
	jne	.LBB502_39
# %bb.18:                               # %"$10.i"
	movb	-4(%rcx), %cl
	jmp	.LBB502_40
.LBB502_19:                             # %"$30"
	subq	$32, %rsp
	movq	%rbx, %rcx
	movq	%rsi, %rdx
	callq	fill2
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB502_23
# %bb.20:                               # %"$54"
	movq	%rax, %r14
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%r14, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r15, env(%rip)
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	fill2
	addq	$32, %rsp
	testq	%rax, %rax
	cmovneq	%rax, %rdi
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rdi, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rbx
	jmp	.LBB502_36
.LBB502_21:                             # %"$10"
	cmpq	%rsi, %rcx
	jne	.LBB502_25
.LBB502_22:
	movq	%rax, %rbx
	jmp	.LBB502_2
.LBB502_23:                             # %"$53"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	fill2
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB502_1
# %bb.24:                               # %"$59"
	movq	%rbx, %rcx
	movq	%rax, %rdx
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	cons                            # TAILCALL
.LBB502_25:                             # %"$19.preheader"
	xorl	%ebx, %ebx
	testb	$15, %sil
	jne	.LBB502_2
.LBB502_26:                             # %"$20"
                                        # =>This Inner Loop Header: Depth=1
	cmpq	%rcx, (%rsi)
	je	.LBB502_22
# %bb.27:                               # %"$23"
                                        #   in Loop: Header=BB502_26 Depth=1
	movq	8(%rsi), %rsi
	testb	$15, %sil
	je	.LBB502_26
	jmp	.LBB502_2
.LBB502_28:                             # %"$36"
	movq	(%rbx), %rbx
.LBB502_29:                             # %"$32"
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rbx
	jne	.LBB502_31
# %bb.30:                               # %"$37"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rsi, %rdx
	callq	fill2
	addq	$32, %rsp
	movq	%rax, %rbx
	testq	%rax, %rax
	cmoveq	%r14, %rbx
	jmp	.LBB502_2
.LBB502_31:                             # %"$38"
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%rbx, (%r15)
	movq	%r15, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r15, env(%rip)
	testb	$15, %bl
	je	.LBB502_33
# %bb.32:                               # %"$43"
	subq	$32, %rsp
	leaq	SymTab+8(%rip), %rdx
	movq	%rbx, %rcx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rdi
	movq	%rax, (%r15)
	movq	%rax, %rbx
	jmp	.LBB502_35
.LBB502_33:
	movq	%rbx, %rax
	.p2align	4, 0x90
.LBB502_34:                             # %"$46"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rdi
	movq	8(%rax), %rax
	testb	$15, %al
	je	.LBB502_34
.LBB502_35:                             # %"$45"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rsi, %rdx
	callq	fill2
	addq	$32, %rsp
	testq	%rax, %rax
	cmoveq	%r14, %rax
	movq	%rax, 8(%rdi)
.LBB502_36:                             # %"$17"
	movq	8(%r15), %rax
	movq	%rax, env(%rip)
	jmp	.LBB502_2
.LBB502_39:                             # %"$11.i"
	shrq	$4, %rcx
.LBB502_40:                             # %firstByte.exit
	xorl	%ebx, %ebx
	cmpb	$64, %cl
	cmoveq	%rax, %rbx
	jmp	.LBB502_2
.LBB502_41:                             # %"$27"
	subq	$32, %rsp
	xorl	%ecx, %ecx
	callq	stkErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 match;
	.scl	2;
	.type	32;
	.endef
	.globl	match                           # -- Begin function match
	.p2align	4, 0x90
match:                                  # @match
.seh_proc match
# %bb.0:                                # %"$1"
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rdx, %rsi
	movq	%rcx, %rdi
	testb	$15, %dil
	je	.LBB503_1
.LBB503_5:                              # %"$5"
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rdi
	je	.LBB503_8
# %bb.6:                                # %"$5"
	movl	%edi, %eax
	andl	$6, %eax
	testq	%rax, %rax
	jne	.LBB503_8
# %bb.7:                                # %"$3.i"
	movq	-8(%rdi), %rax
	testb	$8, %al
	jne	.LBB503_8
	.p2align	4, 0x90
# %bb.10:                               # %"$8.i"
	testb	$6, %al
	jne	.LBB503_11
.LBB503_9:                              # %"$8.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB503_9
.LBB503_11:                             # %"$9.i"
	testb	$2, %al
	jne	.LBB503_12
# %bb.13:                               # %"$10.i"
	movb	-4(%rax), %al
	cmpb	$64, %al
	je	.LBB503_15
.LBB503_8:                              # %"$8"
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	jmp	equal                           # TAILCALL
.LBB503_1:
	leaq	SymTab+8(%rip), %r14
	.p2align	4, 0x90
.LBB503_2:                              # %"$3"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB503_22 Depth 2
	cmpq	%rsp, ($StkLimit)(%rip)
	ja	.LBB503_3
# %bb.16:                               # %"$12"
                                        #   in Loop: Header=BB503_2 Depth=1
	movq	(%rdi), %rbx
	cmpq	%r14, %rbx
	je	.LBB503_19
# %bb.17:                               # %"$12"
                                        #   in Loop: Header=BB503_2 Depth=1
	movl	%ebx, %eax
	andl	$14, %eax
	cmpl	$8, %eax
	jne	.LBB503_19
# %bb.18:                               # %"$3.i5"
                                        #   in Loop: Header=BB503_2 Depth=1
	movq	-8(%rbx), %rax
	testb	$8, %al
	jne	.LBB503_19
	.p2align	4, 0x90
# %bb.23:                               # %"$8.i9"
                                        #   in Loop: Header=BB503_2 Depth=1
	testb	$6, %al
	jne	.LBB503_24
.LBB503_22:                             # %"$8.i9"
                                        #   Parent Loop BB503_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB503_22
.LBB503_24:                             # %"$9.i12"
                                        #   in Loop: Header=BB503_2 Depth=1
	testb	$2, %al
	jne	.LBB503_25
# %bb.26:                               # %"$10.i16"
                                        #   in Loop: Header=BB503_2 Depth=1
	movb	-4(%rax), %al
	cmpb	$64, %al
	je	.LBB503_28
	jmp	.LBB503_19
.LBB503_25:                             # %"$11.i14"
                                        #   in Loop: Header=BB503_2 Depth=1
	shrq	$4, %rax
	cmpb	$64, %al
	jne	.LBB503_19
.LBB503_28:                             # %"$15"
                                        #   in Loop: Header=BB503_2 Depth=1
	testb	$15, %sil
	movq	8(%rdi), %rcx
	jne	.LBB503_29
# %bb.30:                               # %"$17"
                                        #   in Loop: Header=BB503_2 Depth=1
	movq	8(%rsi), %rdx
	callq	match
	testb	$1, %al
	jne	.LBB503_31
# %bb.33:                               # %"$21"
                                        #   in Loop: Header=BB503_2 Depth=1
	movq	8(%rdi), %rcx
	movq	%rsi, %rdx
	callq	match
	testb	$1, %al
	jne	.LBB503_34
# %bb.37:                               # %"$23"
                                        #   in Loop: Header=BB503_2 Depth=1
	movq	8(%rsi), %rdx
	movq	%rdi, %rcx
	callq	match
	testb	$1, %al
	jne	.LBB503_38
	.p2align	4, 0x90
.LBB503_19:                             # %"$16"
                                        #   in Loop: Header=BB503_2 Depth=1
	testb	$15, %sil
	jne	.LBB503_21
# %bb.20:                               # %"$28"
                                        #   in Loop: Header=BB503_2 Depth=1
	movq	(%rsi), %rdx
	movq	%rbx, %rcx
	callq	match
	testb	$1, %al
	je	.LBB503_21
# %bb.4:                                # %"$29"
                                        #   in Loop: Header=BB503_2 Depth=1
	movq	8(%rdi), %rdi
	movq	8(%rsi), %rsi
	testb	$15, %dil
	je	.LBB503_2
	jmp	.LBB503_5
.LBB503_12:                             # %"$11.i"
	shrq	$4, %rax
	cmpb	$64, %al
	jne	.LBB503_8
.LBB503_15:                             # %"$9"
	movq	%rsi, (%rdi)
	jmp	.LBB503_35
.LBB503_29:                             # %"$18"
	movq	%rsi, %rdx
	callq	equal
	testb	$1, %al
	je	.LBB503_21
.LBB503_34:                             # %"$20"
	movq	%r14, (%rbx)
	jmp	.LBB503_35
.LBB503_21:
	xorl	%eax, %eax
	jmp	.LBB503_36
.LBB503_31:                             # %"$22"
	movq	(%rsi), %rcx
	leaq	SymTab+8(%rip), %rdx
	jmp	.LBB503_32
.LBB503_38:                             # %"$26"
	movq	(%rsi), %rcx
	movq	(%rbx), %rdx
.LBB503_32:                             # %"$4"
	callq	cons
	movq	%rax, (%rbx)
.LBB503_35:                             # %"$4"
	movb	$1, %al
.LBB503_36:                             # %"$4"
                                        # kill: def $al killed $al killed $eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq
.LBB503_3:                              # %"$11"
	xorl	%ecx, %ecx
	callq	stkErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 binSize;
	.scl	2;
	.type	32;
	.endef
	.globl	binSize                         # -- Begin function binSize
	.p2align	4, 0x90
binSize:                                # @binSize
# %bb.0:                                # %"$1"
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$32, %rsp
	movq	%rcx, %rdi
	testb	$2, %dil
	jne	.LBB504_1
# %bb.5:                                # %"$3.preheader"
	xorl	%r14d, %r14d
	leaq	SymTab+8(%rip), %r15
	movq	%rdi, %rbx
.LBB504_6:                              # %"$3"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB504_17 Depth 2
	testb	$4, %bl
	jne	.LBB504_7
# %bb.15:                               # %"$8"
                                        #   in Loop: Header=BB504_6 Depth=1
	testb	$8, %bl
	jne	.LBB504_20
# %bb.16:                               # %"$36.preheader"
                                        #   in Loop: Header=BB504_6 Depth=1
	movl	$2, %ecx
	movq	%rbx, %rdi
	.p2align	4, 0x90
.LBB504_17:                             # %"$36"
                                        #   Parent Loop BB504_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rcx, %rsi
	movq	(%rdi), %rcx
	movq	8(%rdi), %rdi
	callq	binSize
	movq	%rax, %rcx
	addq	%rsi, %rcx
	cmpq	%r15, %rdi
	je	.LBB504_14
# %bb.18:                               # %"$37"
                                        #   in Loop: Header=BB504_17 Depth=2
	cmpq	%rbx, %rdi
	je	.LBB504_19
# %bb.28:                               # %"$40"
                                        #   in Loop: Header=BB504_17 Depth=2
	testb	$15, %dil
	je	.LBB504_17
# %bb.29:                               # %"$43"
                                        #   in Loop: Header=BB504_6 Depth=1
	addq	%r14, %rcx
	testb	$2, %dil
	movq	%rdi, %rbx
	movq	%rcx, %r14
	je	.LBB504_6
	jmp	.LBB504_2
.LBB504_1:
	xorl	%ecx, %ecx
.LBB504_2:                              # %"$4"
	shrq	$3, %rdi
	movq	%rcx, %r14
.LBB504_3:                              # %"$-1"
	movl	$1, %ecx
	.p2align	4, 0x90
.LBB504_4:                              # %"$5"
                                        # =>This Inner Loop Header: Depth=1
	shrq	$8, %rdi
	incq	%rcx
	testq	%rdi, %rdi
	jne	.LBB504_4
	jmp	.LBB504_14
.LBB504_19:                             # %"$41"
	incq	%rcx
.LBB504_14:                             # %"$2"
	addq	%rcx, %r14
	movq	%r14, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	retq
.LBB504_7:                              # %"$9"
	andq	$-9, %rbx
	movl	$1, %ecx
	.p2align	4, 0x90
.LBB504_8:                              # %"$10"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rbx, %rax
	movq	4(%rbx), %rbx
	addq	$8, %rcx
	testb	$2, %bl
	je	.LBB504_8
# %bb.9:                                # %"$12"
	movq	-4(%rax), %rax
	shrq	$3, %rbx
	andq	$-2, %rbx
	addq	%rax, %rax
	adcq	$0, %rbx
	testq	%rbx, %rbx
	je	.LBB504_12
	.p2align	4, 0x90
.LBB504_11:                             # %"$15"
                                        # =>This Inner Loop Header: Depth=1
	incq	%rcx
	shrq	$8, %rbx
	jne	.LBB504_11
.LBB504_12:                             # %"$14"
	cmpq	$64, %rcx
	jb	.LBB504_14
# %bb.13:                               # %"$18"
	leaq	-64(%rcx), %rax
	movabsq	$-9187201950435737471, %rdx     # imm = 0x8080808080808081
	mulq	%rdx
	shrq	$7, %rdx
	leaq	1(%rcx,%rdx), %rcx
	jmp	.LBB504_14
.LBB504_20:                             # %"$22"
	movl	$1, %ecx
	cmpq	%r15, %rbx
	je	.LBB504_14
# %bb.21:                               # %"$24"
	movq	-8(%rbx), %rax
	movq	%rax, %rbx
	andq	$-9, %rbx
	testb	$6, %al
	jne	.LBB504_23
.LBB504_22:                             # %"$27"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rbx), %rbx
	testb	$6, %bl
	je	.LBB504_22
.LBB504_23:                             # %"$28"
	cmpq	$2, %rbx
	je	.LBB504_14
# %bb.24:                               # %"$29"
	testb	$2, %bl
	jne	.LBB504_30
# %bb.25:                               # %"$33.preheader"
	movl	$1, %ecx
.LBB504_26:                             # %"$33"
                                        # =>This Inner Loop Header: Depth=1
	movq	4(%rbx), %rbx
	addq	$8, %rcx
	testb	$2, %bl
	je	.LBB504_26
# %bb.27:                               # %"$35"
	shrq	$4, %rbx
	testq	%rbx, %rbx
	jne	.LBB504_11
	jmp	.LBB504_12
.LBB504_30:                             # %"$32"
	shrq	$4, %rbx
	movabsq	$288230376151711743, %rdi       # imm = 0x3FFFFFFFFFFFFFF
	andq	%rbx, %rdi
	jmp	.LBB504_3
                                        # -- End function
	.def	 size;
	.scl	2;
	.type	32;
	.endef
	.globl	size                            # -- Begin function size
	.p2align	4, 0x90
size:                                   # @size
.seh_proc size
# %bb.0:                                # %"$1"
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rcx, %rdi
	movq	(%rcx), %rbx
	movl	$1, %r14d
	movq	%rcx, %rsi
	testb	$15, %bl
	jne	.LBB505_4
	.p2align	4, 0x90
.LBB505_2:                              # %"$3"
	cmpq	%rsp, ($StkLimit)(%rip)
	ja	.LBB505_14
# %bb.3:                                # %"$6"
	movq	%rbx, %rcx
	callq	size
	addq	%rax, %r14
.LBB505_4:                              # %"$4"
                                        # =>This Inner Loop Header: Depth=1
	orq	$1, %rbx
	movq	%rbx, (%rsi)
	movq	8(%rsi), %rsi
	testb	$15, %sil
	jne	.LBB505_5
# %bb.7:                                # %"$7"
                                        #   in Loop: Header=BB505_4 Depth=1
	movq	(%rsi), %rbx
	testb	$1, %bl
	jne	.LBB505_8
# %bb.13:                               # %"$13"
                                        #   in Loop: Header=BB505_4 Depth=1
	incq	%r14
	testb	$15, %bl
	jne	.LBB505_4
	jmp	.LBB505_2
	.p2align	4, 0x90
.LBB505_5:                              # %"$10"
                                        # =>This Inner Loop Header: Depth=1
	andb	$-2, (%rdi)
	movq	8(%rdi), %rdi
	cmpq	%rdi, %rsi
	jne	.LBB505_5
	jmp	.LBB505_6
.LBB505_8:                              # %"$15.preheader"
	cmpq	%rdi, %rsi
	je	.LBB505_9
	.p2align	4, 0x90
.LBB505_11:                             # %"$16"
                                        # =>This Inner Loop Header: Depth=1
	andb	$-2, (%rdi)
	movq	8(%rdi), %rdi
	cmpq	%rdi, %rsi
	jne	.LBB505_11
# %bb.12:
	movq	%rsi, %rdi
.LBB505_9:                              # %"$18.preheader"
	movq	%rdi, %rax
	.p2align	4, 0x90
.LBB505_10:                             # %"$18"
                                        # =>This Inner Loop Header: Depth=1
	andb	$-2, (%rax)
	movq	8(%rax), %rax
	cmpq	%rax, %rdi
	jne	.LBB505_10
.LBB505_6:                              # %"$8"
	movq	%r14, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq
.LBB505_14:                             # %"$5"
	xorl	%ecx, %ecx
	callq	stkErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 db;
	.scl	2;
	.type	32;
	.endef
	.globl	db                              # -- Begin function db
	.p2align	4, 0x90
db:                                     # @db
.seh_proc db
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$24, %rsp
	.seh_stackalloc 24
	leaq	16(%rsp), %rbp
	.seh_setframe %rbp, 16
	.seh_endprologue
	movq	%r8, %r13
	movq	%rdx, %r15
	movq	%rcx, %r14
	movq	env(%rip), %rax
	movq	%rdx, -16(%rbp)
	movq	%rax, -8(%rbp)
	leaq	-16(%rbp), %rax
	movq	%rax, env(%rip)
	movl	%r13d, %ecx
	shrl	$24, %ecx
	movq	%r8, %rax
	shrq	$36, %rax
	andl	$65280, %eax                    # imm = 0xFF00
	orl	%ecx, %eax
	cmpl	($DBs)(%rip), %eax
	jge	.LBB506_1
# %bb.11:                               # %"$3"
	movq	($DbFiles)(%rip), %rcx
	imull	$42, %eax, %edi
	addq	%rcx, %rdi
	movq	%rdi, ($DbFile)(%rip)
	leaq	SymTab+280(%rip), %r12
	cmpq	%r12, SymTab+424(%rip)
	je	.LBB506_17
# %bb.12:                               # %"$2.i9"
	movl	(%rcx), %ebx
	.p2align	4, 0x90
.LBB506_13:                             # %"$2.i.i"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	movl	$1, %r8d
	movl	%ebx, %ecx
	xorl	%edx, %edx
	movb	$1, %r9b
	callq	rdLock
	addq	$32, %rsp
	testl	%eax, %eax
	jns	.LBB506_16
# %bb.14:                               # %"$3.i.i"
                                        #   in Loop: Header=BB506_13 Depth=1
	subq	$32, %rsp
	callq	gErrno
	addq	$32, %rsp
	cmpl	$2, %eax
	je	.LBB506_13
# %bb.15:                               # %"$5.i.i"
	subq	$32, %rsp
	callq	lockErr
.LBB506_1:                              # %"$2"
	movq	SymTab+536(%rip), %rcx
	testb	$15, %cl
	jne	.LBB506_28
# %bb.2:                                # %"$5"
	movq	(%rcx), %rdx
	movq	(%rdx), %rdx
	shrq	$4, %rdx
	incl	%eax
	cmpl	%edx, %eax
	jl	.LBB506_28
	.p2align	4, 0x90
.LBB506_3:                              # %"$10"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rcx, %rdx
	movq	8(%rcx), %rcx
	testb	$15, %cl
	jne	.LBB506_5
# %bb.4:                                # %"$12"
                                        #   in Loop: Header=BB506_3 Depth=1
	movq	(%rcx), %rbx
	movq	(%rbx), %rbx
	shrq	$4, %rbx
	cmpl	%ebx, %eax
	jge	.LBB506_3
.LBB506_5:                              # %"$14"
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rbx, %rax
	orq	$8, %rax
	leaq	SymTab+8(%rip), %rcx
	movq	%rcx, (%rax)
	movq	$2, 16(%rbx)
	leaq	24(%rbx), %rdi
	movq	%r15, 24(%rbx)
	movq	(%rdx), %rax
	movq	8(%rax), %rdx
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rcx
	movq	%rcx, %rax
	orq	$8, %rax
	movq	%rbx, (%rax)
	movq	$2, 16(%rcx)
	leaq	24(%rcx), %rax
	movq	%rdx, 24(%rcx)
	movq	%rdi, (%rbx)
	movq	%rax, (%rcx)
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	(%rax), %rcx
	movq	8(%rax), %rax
	movq	%rcx, (%r15)
	testb	$15, %al
	je	.LBB506_8
# %bb.6:                                # %"$15"
	movq	%r13, -8(%r15)
	jmp	.LBB506_7
.LBB506_16:                             # %rdLockDb.exit.loopexit
	movq	($DbFile)(%rip), %rdi
.LBB506_17:                             # %rdLockDb.exit
	movl	%r13d, %eax
	shrl	$4, %eax
	andl	$1048575, %eax                  # imm = 0xFFFFF
	movq	%r13, %rcx
	shrq	$12, %rcx
	andl	$-1048576, %ecx                 # imm = 0xFFF00000
	orq	%rax, %rcx
	movq	%r13, %rax
	shrq	$20, %rax
	movabsq	$4393751543808, %r9             # imm = 0x3FF00000000
	andq	%rax, %r9
	orq	%rcx, %r9
	shlq	$6, %r9
	movq	($DbBlock)(%rip), %rbx
	movq	%r9, ($BlkIndex)(%rip)
	movb	8(%rdi), %cl
	shlq	%cl, %r9
	movslq	12(%rdi), %rsi
	movl	(%rdi), %ecx
	subq	$32, %rsp
	movq	%rbx, %rdx
	movq	%rsi, %r8
	callq	pread
	addq	$32, %rsp
	cmpq	%rsi, %rax
	jne	.LBB506_29
# %bb.18:                               # %rdBlock.exit
	movzbl	5(%rbx), %eax
	movzbl	4(%rbx), %ecx
	shlq	$16, %rax
	shlq	$8, %rcx
	orq	%rax, %rcx
	movzbl	3(%rbx), %eax
	orq	%rcx, %rax
	movzbl	2(%rbx), %ecx
	movzbl	1(%rbx), %edx
	shlq	$24, %rax
	shlq	$16, %rcx
	shlq	$8, %rdx
	orq	%rcx, %rdx
	orq	%rax, %rdx
	movzbl	(%rbx), %eax
	andl	$-64, %eax
	orq	%rdx, %rax
	movq	%rax, ($BlkLink)(%rip)
	movslq	12(%rdi), %rax
	addq	%rbx, %rax
	movq	%rax, ($BlkEnd)(%rip)
	leaq	6(%rbx), %rax
	movq	%rax, ($BlkPtr)(%rip)
	movb	(%rbx), %al
	andb	$63, %al
	cmpb	$1, %al
	jne	.LBB506_30
# %bb.19:                               # %"$22"
	leaq	getBlock(%rip), %rax
	movq	%rax, ($GetBin)(%rip)
	movl	$0, ($Extn)(%rip)
	subq	$32, %rsp
	callq	binRead
	addq	$32, %rsp
	movq	%rax, (%r15)
	subq	$32, %rsp
	callq	binRead
	addq	$32, %rsp
	leaq	SymTab+8(%rip), %rsi
	cmpq	%rsi, %rax
	jne	.LBB506_23
# %bb.20:                               # %"$23"
	movq	%r13, -8(%r15)
.LBB506_21:                             # %"$25"
	cmpq	%r12, SymTab+424(%rip)
	je	.LBB506_7
# %bb.22:                               # %"$2.i"
	movq	($DbFiles)(%rip), %rax
	movl	(%rax), %ecx
	subq	$32, %rsp
	movl	$1, %r8d
	xorl	%edx, %edx
	callq	unLock
	addq	$32, %rsp
	jmp	.LBB506_7
.LBB506_23:                             # %"$24"
	subq	$32, %rsp
	movq	%rax, %rcx
	movq	%r13, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rdi
	orq	$8, %rax
	movq	%rax, -8(%r15)
	.p2align	4, 0x90
.LBB506_24:                             # %"$24"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	callq	binRead
	addq	$32, %rsp
	cmpq	%r12, %rax
	je	.LBB506_26
# %bb.25:                               # %"$26"
                                        #   in Loop: Header=BB506_24 Depth=1
	movq	(%rdi), %rdx
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	cons
	addq	$32, %rsp
	movq	%rax, (%rdi)
.LBB506_26:                             # %"$27"
                                        #   in Loop: Header=BB506_24 Depth=1
	subq	$32, %rsp
	callq	binRead
	addq	$32, %rsp
	cmpq	%rsi, %rax
	je	.LBB506_21
# %bb.27:                               # %"$29"
                                        #   in Loop: Header=BB506_24 Depth=1
	movq	%rdi, %rbx
	movq	8(%rdi), %rdx
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rdi
	movq	%rax, 8(%rbx)
	jmp	.LBB506_24
.LBB506_8:                              # %"$16"
	movq	%rax, %rcx
	orq	$8, %rcx
	movq	%rcx, -8(%r15)
	.p2align	4, 0x90
.LBB506_9:                              # %"$18"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rcx
	movq	8(%rax), %rax
	testb	$15, %al
	je	.LBB506_9
# %bb.10:                               # %"$20"
	movq	%r13, 8(%rcx)
.LBB506_7:                              # %"$4"
	movq	-8(%rbp), %rax
	movq	%rax, env(%rip)
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB506_28:                             # %"$7"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	dbfErr
.LBB506_29:                             # %"$2.i.i10"
	subq	$32, %rsp
	callq	dbRdErr
.LBB506_30:                             # %"$21"
	subq	$32, %rsp
	leaq	.L$63(%rip), %r8
	movq	%r14, %rcx
	movq	%r15, %rdx
	xorl	%r9d, %r9d
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 dbfErr;
	.scl	2;
	.type	32;
	.endef
	.globl	dbfErr                          # -- Begin function dbfErr
	.p2align	4, 0x90
dbfErr:                                 # @dbfErr
.seh_proc dbfErr
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	leaq	.L$49(%rip), %r8
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 lockErr;
	.scl	2;
	.type	32;
	.endef
	.globl	lockErr                         # -- Begin function lockErr
	.p2align	4, 0x90
lockErr:                                # @lockErr
.seh_proc lockErr
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	callq	strErrno
	leaq	.L$21(%rip), %r8
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rax, %r9
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 dbRdErr;
	.scl	2;
	.type	32;
	.endef
	.globl	dbRdErr                         # -- Begin function dbRdErr
	.p2align	4, 0x90
dbRdErr:                                # @dbRdErr
.seh_proc dbRdErr
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	callq	strErrno
	leaq	.L$50(%rip), %r8
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rax, %r9
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 getBlock;
	.scl	2;
	.type	32;
	.endef
	.globl	getBlock                        # -- Begin function getBlock
	.p2align	4, 0x90
getBlock:                               # @getBlock
.seh_proc getBlock
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	($BlkPtr)(%rip), %rsi
	cmpq	($BlkEnd)(%rip), %rsi
	jne	.LBB510_6
# %bb.1:                                # %"$2"
	movq	($BlkLink)(%rip), %r9
	testq	%r9, %r9
	je	.LBB510_2
# %bb.4:                                # %"$5"
	movq	($DbFile)(%rip), %rbx
	movq	($DbBlock)(%rip), %rsi
	movq	%r9, ($BlkIndex)(%rip)
	movb	8(%rbx), %cl
	shlq	%cl, %r9
	movslq	12(%rbx), %rdi
	movl	(%rbx), %ecx
	movq	%rsi, %rdx
	movq	%rdi, %r8
	callq	pread
	cmpq	%rdi, %rax
	jne	.LBB510_7
# %bb.5:                                # %rdBlock.exit
	movzbl	5(%rsi), %eax
	movzbl	4(%rsi), %ecx
	shlq	$16, %rax
	shlq	$8, %rcx
	orq	%rax, %rcx
	movzbl	3(%rsi), %eax
	orq	%rcx, %rax
	movzbl	2(%rsi), %ecx
	movzbl	1(%rsi), %edx
	shlq	$24, %rax
	shlq	$16, %rcx
	shlq	$8, %rdx
	orq	%rcx, %rdx
	orq	%rax, %rdx
	movzbl	(%rsi), %eax
	andl	$-64, %eax
	orq	%rdx, %rax
	movq	%rax, ($BlkLink)(%rip)
	movslq	12(%rbx), %rax
	addq	%rsi, %rax
	movq	%rax, ($BlkEnd)(%rip)
	addq	$6, %rsi
	movq	%rsi, ($BlkPtr)(%rip)
.LBB510_6:                              # %"$3"
	leaq	1(%rsi), %rax
	movq	%rax, ($BlkPtr)(%rip)
	movzbl	(%rsi), %eax
.LBB510_3:                              # %"$4"
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
.LBB510_2:                              # %"$4"
	movl	$-1, %eax
	jmp	.LBB510_3
.LBB510_7:                              # %"$2.i.i"
	callq	dbRdErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 binRead;
	.scl	2;
	.type	32;
	.endef
	.globl	binRead                         # -- Begin function binRead
	.p2align	4, 0x90
binRead:                                # @binRead
.seh_proc binRead
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	subq	$32, %rsp
	callq	*($GetBin)(%rip)
	addq	$32, %rsp
	movl	%eax, %ebx
	cmpl	$3, %eax
	ja	.LBB511_8
# %bb.1:                                # %"$1"
	leaq	SymTab+8(%rip), %r15
	movl	%ebx, %eax
	leaq	.LJTI511_0(%rip), %rcx
	movslq	(%rcx,%rax,4), %rax
	addq	%rcx, %rax
	jmpq	*%rax
.LBB511_2:                              # %"$5"
	subq	$32, %rsp
	callq	binRead
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB511_26
# %bb.3:                                # %"$9"
	subq	$32, %rsp
	leaq	SymTab+8(%rip), %rsi
	movq	%rax, %rcx
	movq	%rsi, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %r15
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%r15, (%rbx)
	movq	%rbx, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rbx, env(%rip)
	movq	%r15, %rdi
	.p2align	4, 0x90
.LBB511_4:                              # %"$11"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	callq	binRead
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB511_39
# %bb.5:                                # %"$11"
                                        #   in Loop: Header=BB511_4 Depth=1
	cmpq	$3, %rax
	je	.LBB511_44
# %bb.6:                                # %"$11"
                                        #   in Loop: Header=BB511_4 Depth=1
	subq	$32, %rsp
	cmpq	$10, %rax
	je	.LBB511_40
# %bb.7:                                # %"$17"
                                        #   in Loop: Header=BB511_4 Depth=1
	movq	%rax, %rcx
	movq	%rsi, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, 8(%rdi)
	movq	%rax, %rdi
	jmp	.LBB511_4
.LBB511_8:                              # %"$2"
	testl	%ebx, %ebx
	js	.LBB511_26
# %bb.9:                                # %"$26"
	movl	%ebx, %edi
	shrl	$2, %edi
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	leaq	16(%rsi), %r14
	movq	$2, 16(%rsi)
	movq	env(%rip), %rax
	movq	%rax, 24(%rsi)
	movq	%r14, env(%rip)
	testb	$3, %bl
	je	.LBB511_27
# %bb.10:                               # %"$29"
	movq	$4, (%rsi)
	cmpl	$63, %edi
	jne	.LBB511_17
# %bb.11:                               # %"$56.preheader"
	movl	$63, %edi
	.p2align	4, 0x90
.LBB511_12:                             # %"$56"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	callq	*($GetBin)(%rip)
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB511_38
# %bb.13:                               # %"$58"
                                        #   in Loop: Header=BB511_12 Depth=1
	subq	$32, %rsp
	movl	%eax, %ecx
	movq	%rsi, %rdx
	callq	byteSym
	addq	$32, %rsp
	decl	%edi
	jne	.LBB511_12
# %bb.14:                               # %"$60"
                                        #   in Loop: Header=BB511_12 Depth=1
	subq	$32, %rsp
	callq	*($GetBin)(%rip)
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB511_38
# %bb.15:                               # %"$62"
                                        #   in Loop: Header=BB511_12 Depth=1
	movl	%eax, %edi
	cmpl	$255, %eax
	je	.LBB511_12
# %bb.16:                               # %"$62"
	testl	%edi, %edi
	je	.LBB511_19
	.p2align	4, 0x90
.LBB511_17:                             # %"$67"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	callq	*($GetBin)(%rip)
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB511_38
# %bb.18:                               # %"$69"
                                        #   in Loop: Header=BB511_17 Depth=1
	subq	$32, %rsp
	movl	%eax, %ecx
	movq	%rsi, %rdx
	callq	byteSym
	addq	$32, %rsp
	decl	%edi
	jne	.LBB511_17
.LBB511_19:                             # %"$-3"
	movq	(%r14), %r14
	andb	$3, %bl
	cmpb	$1, %bl
	je	.LBB511_46
# %bb.20:                               # %"$-3"
	cmpb	$2, %bl
	jne	.LBB511_48
# %bb.21:                               # %"$74"
	cmpq	$2, %r14
	jne	.LBB511_51
# %bb.22:
	leaq	SymTab+8(%rip), %r15
	jmp	.LBB511_54
.LBB511_23:                             # %"$6"
	movl	$10, %r15d
	jmp	.LBB511_56
.LBB511_24:                             # %"$7"
	movl	$3, %r15d
	jmp	.LBB511_56
.LBB511_26:
	xorl	%r15d, %r15d
	jmp	.LBB511_56
.LBB511_27:                             # %"$30"
	movq	$3, (%rsi)
	cmpl	$63, %edi
	jne	.LBB511_34
# %bb.28:                               # %"$34.preheader"
	movl	$63, %edi
	.p2align	4, 0x90
.LBB511_29:                             # %"$34"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	callq	*($GetBin)(%rip)
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB511_38
# %bb.30:                               # %"$36"
                                        #   in Loop: Header=BB511_29 Depth=1
	subq	$32, %rsp
	movl	%eax, %ecx
	movq	%rsi, %rdx
	callq	byteNum
	addq	$32, %rsp
	decl	%edi
	jne	.LBB511_29
# %bb.31:                               # %"$38"
                                        #   in Loop: Header=BB511_29 Depth=1
	subq	$32, %rsp
	callq	*($GetBin)(%rip)
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB511_38
# %bb.32:                               # %"$40"
                                        #   in Loop: Header=BB511_29 Depth=1
	movl	%eax, %edi
	cmpl	$255, %eax
	je	.LBB511_29
# %bb.33:                               # %"$40"
	testl	%edi, %edi
	je	.LBB511_36
	.p2align	4, 0x90
.LBB511_34:                             # %"$45"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	callq	*($GetBin)(%rip)
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB511_38
# %bb.35:                               # %"$47"
                                        #   in Loop: Header=BB511_34 Depth=1
	subq	$32, %rsp
	movl	%eax, %ecx
	movq	%rsi, %rdx
	callq	byteNum
	addq	$32, %rsp
	decl	%edi
	jne	.LBB511_34
.LBB511_36:                             # %"$-2"
	movq	(%r14), %r15
	testb	$2, %r15b
	jne	.LBB511_54
# %bb.37:                               # %"$51"
	movl	-4(%r15), %edi
	subq	$32, %rsp
	movq	%r15, %rcx
	callq	half
	addq	$32, %rsp
	shll	$3, %edi
	andl	$8, %edi
	orq	%rax, %rdi
	movq	%rdi, %r15
	jmp	.LBB511_54
.LBB511_38:                             # %"$-1"
	movq	24(%rsi), %rax
	movq	%rax, env(%rip)
	xorl	%eax, %eax
	jmp	.LBB511_57
.LBB511_40:                             # %"$18"
	callq	binRead
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB511_39
# %bb.41:                               # %"$18"
	cmpq	$3, %rax
	movq	%r15, %rcx
	je	.LBB511_43
# %bb.42:                               # %"$23"
	movq	%rax, %rcx
.LBB511_43:                             # %"$24"
	movq	%rcx, 8(%rdi)
.LBB511_44:                             # %"$13"
	movq	8(%rbx), %rax
	jmp	.LBB511_55
.LBB511_39:
	movq	%rax, %r15
	movq	8(%rbx), %rax
	jmp	.LBB511_55
.LBB511_46:                             # %"$75"
	subq	$32, %rsp
	leaq	SymTab+112(%rip), %rdx
	movq	%r14, %rcx
	callq	isIntern
	addq	$32, %rsp
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB511_54
# %bb.47:                               # %"$3.i"
	movq	gcData(%rip), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rax
	movq	(%rcx), %rcx
	movq	8(%rcx), %r9
	subq	$48, %rsp
	movq	%rax, 32(%rsp)
	movb	$0, 40(%rsp)
	leaq	SymTab+8(%rip), %rdx
	xorl	%ecx, %ecx
	movq	%r14, %r8
	callq	intern
	addq	$48, %rsp
	jmp	.LBB511_53
.LBB511_48:                             # %"$72"
	movl	($Extn)(%rip), %eax
	testl	%eax, %eax
	je	.LBB511_50
# %bb.49:                               # %"$76"
	movq	%r14, %rcx
	movabsq	$-4486011719516161, %rdx        # imm = 0xFFF00FFF00FFFFFF
	andq	%r14, %rdx
	movl	%r14d, %ebx
	shrl	$24, %ebx
	shrq	$36, %rcx
	andl	$65280, %ecx                    # imm = 0xFF00
	orl	%ebx, %ecx
	addl	%ecx, %eax
	movzwl	%ax, %eax
	movq	%rax, %rcx
	shlq	$24, %rcx
	shlq	$36, %rax
	orq	%rcx, %rax
	movabsq	$4486011719516160, %r14         # imm = 0xFF000FF000000
	andq	%rax, %r14
	orq	%rdx, %r14
.LBB511_50:                             # %"$77"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	extern
	jmp	.LBB511_52
.LBB511_51:                             # %"$3.i29"
	subq	$32, %rsp
	movq	%r14, %rcx
	xorl	%edx, %edx
	callq	consSym
.LBB511_52:                             # %"$73"
	addq	$32, %rsp
.LBB511_53:                             # %"$73"
	movq	%rax, %r15
.LBB511_54:                             # %"$73"
	movq	24(%rsi), %rax
.LBB511_55:                             # %"$3"
	movq	%rax, env(%rip)
.LBB511_56:                             # %"$3"
	movq	%r15, %rax
.LBB511_57:                             # %"$3"
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.p2align	2, 0x90
.LJTI511_0:
	.long	.LBB511_56-.LJTI511_0
	.long	.LBB511_2-.LJTI511_0
	.long	.LBB511_23-.LJTI511_0
	.long	.LBB511_24-.LJTI511_0
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 byteNum;
	.scl	2;
	.type	32;
	.endef
	.globl	byteNum                         # -- Begin function byteNum
	.p2align	4, 0x90
byteNum:                                # @byteNum
.seh_proc byteNum
# %bb.0:                                # %"$1"
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rdx, %rdi
	movl	%ecx, %eax
	movq	(%rdx), %rcx
	movq	16(%rdx), %rsi
	testb	$2, %sil
	jne	.LBB512_1
# %bb.9:                                # %"$3"
	movq	8(%rdi), %rbx
	movq	4(%rbx), %rsi
	cmpq	$60, %rcx
	je	.LBB512_12
# %bb.10:                               # %"$3"
	cmpq	$68, %rcx
	jne	.LBB512_16
# %bb.11:                               # %"$14"
	shrq	$4, %rsi
	movzbl	%al, %edx
	shlq	$4, %rdx
	orq	$2, %rdx
	movq	%rsi, %rcx
	callq	consNum
	movq	%rax, 4(%rbx)
	movq	%rax, 8(%rdi)
	movl	$12, %ecx
	jmp	.LBB512_18
.LBB512_1:                              # %"$2"
	cmpq	$59, %rcx
	je	.LBB512_4
# %bb.2:                                # %"$2"
	cmpq	$67, %rcx
	jne	.LBB512_8
# %bb.3:                                # %"$7"
	shrq	$3, %rsi
	movzbl	%al, %edx
	shlq	$4, %rdx
	orq	$2, %rdx
	movq	%rsi, %rcx
	callq	consNum
	movq	%rax, 8(%rdi)
	movq	%rax, 16(%rdi)
	movl	$12, %ecx
	jmp	.LBB512_18
.LBB512_12:                             # %"$16"
	cmpb	$16, %al
	jb	.LBB512_16
# %bb.13:                               # %"$18"
	shrq	$4, %rsi
	movzbl	%al, %r14d
	shlq	$56, %r14
	orq	%rsi, %r14
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	jne	.LBB512_15
# %bb.14:                               # %"$2.i2"
	callq	gc
	movq	($Avail)(%rip), %rax
.LBB512_15:                             # %boxNum.exit3
	movq	(%rax), %rcx
	movq	%rcx, ($Avail)(%rip)
	movq	%r14, (%rax)
	movq	$2, 8(%rax)
	addq	$4, %rax
	movq	%rax, 4(%rbx)
	movq	%rax, 8(%rdi)
	movl	$4, %ecx
	jmp	.LBB512_18
.LBB512_16:                             # %"$17"
	movzbl	%al, %eax
	shlq	%cl, %rax
	orq	%rax, %rsi
	movq	%rsi, 4(%rbx)
	jmp	.LBB512_17
.LBB512_4:                              # %"$9"
	cmpb	$32, %al
	jb	.LBB512_8
# %bb.5:                                # %"$11"
	shrq	$3, %rsi
	movzbl	%al, %ebx
	shlq	$56, %rbx
	orq	%rsi, %rbx
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	jne	.LBB512_7
# %bb.6:                                # %"$2.i"
	callq	gc
	movq	($Avail)(%rip), %rax
.LBB512_7:                              # %boxNum.exit
	movq	(%rax), %rcx
	movq	%rcx, ($Avail)(%rip)
	movq	%rbx, (%rax)
	movq	$2, 8(%rax)
	addq	$4, %rax
	movq	%rax, 8(%rdi)
	movq	%rax, 16(%rdi)
	movl	$4, %ecx
	jmp	.LBB512_18
.LBB512_8:                              # %"$10"
	movzbl	%al, %eax
	shlq	%cl, %rax
	orq	%rax, %rsi
	movq	%rsi, 16(%rdi)
.LBB512_17:                             # %"$4"
	addq	$8, %rcx
.LBB512_18:                             # %"$4"
	movq	%rcx, (%rdi)
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 half;
	.scl	2;
	.type	32;
	.endef
	.globl	half                            # -- Begin function half
	.p2align	4, 0x90
half:                                   # @half
# %bb.0:                                # %"$1"
	testb	$2, %cl
	jne	.LBB513_1
# %bb.2:                                # %"$3"
	movq	-4(%rcx), %rax
	movq	4(%rcx), %r8
	shrq	%rax
	testb	$4, %r8b
	jne	.LBB513_3
# %bb.9:                                # %"$6"
	movl	%r8d, %r9d
	andl	$16, %r9d
	shlq	$59, %r9
	orq	%rax, %r9
	shrq	$5, %r8
	jne	.LBB513_11
# %bb.10:                               # %"$6"
	movabsq	$1152921504606846975, %rdx      # imm = 0xFFFFFFFFFFFFFFF
	cmpq	%rdx, %r9
	ja	.LBB513_11
# %bb.13:                               # %"$18"
	shlq	$4, %rax
	orq	$2, %rax
	retq
.LBB513_1:                              # %"$2"
	shrq	%rcx
	andq	$-12, %rcx
	orq	$2, %rcx
	movq	%rcx, %rax
	retq
.LBB513_3:                              # %"$8.preheader"
	movq	%rcx, %rdx
	.p2align	4, 0x90
.LBB513_4:                              # %"$8"
                                        # =>This Inner Loop Header: Depth=1
	movq	%r8, %r11
	movq	%rdx, %r9
	movq	-4(%r8), %r10
	movq	4(%r8), %r8
	movq	%r10, %rdx
	shlq	$63, %rdx
	orq	%rax, %rdx
	movq	%rdx, -4(%r9)
	movq	%r10, %rax
	shrq	%rax
	testb	$2, %r8b
	movq	%r11, %rdx
	je	.LBB513_4
# %bb.5:                                # %"$10"
	movl	%r8d, %r10d
	andl	$16, %r10d
	shlq	$59, %r10
	orq	%rax, %r10
	shrq	$5, %r8
	jne	.LBB513_8
# %bb.6:                                # %"$10"
	movabsq	$1152921504606846975, %rdx      # imm = 0xFFFFFFFFFFFFFFF
	cmpq	%rdx, %r10
	ja	.LBB513_8
# %bb.7:                                # %"$13"
	shlq	$4, %rax
	orq	$2, %rax
	movq	%rax, 4(%r9)
	movq	%rcx, %rax
	retq
.LBB513_11:                             # %"$19"
	movq	%r9, -4(%rcx)
	shlq	$4, %r8
	orq	$2, %r8
	movq	%r8, 4(%rcx)
	movq	%rcx, %rax
	retq
.LBB513_8:                              # %"$14"
	movq	%r10, -4(%r11)
	shlq	$4, %r8
	orq	$2, %r8
	movq	%r8, 4(%r11)
	movq	%rcx, %rax
	retq
                                        # -- End function
	.def	 symChar;
	.scl	2;
	.type	32;
	.endef
	.globl	symChar                         # -- Begin function symChar
	.p2align	4, 0x90
symChar:                                # @symChar
# %bb.0:                                # %"$1"
	movq	(%rcx), %rdx
	testq	%rdx, %rdx
	jne	.LBB514_6
# %bb.1:                                # %"$2.i"
	movq	8(%rcx), %rdx
	xorl	%eax, %eax
	cmpq	$2, %rdx
	je	.LBB514_40
# %bb.2:                                # %"$5.i"
	testb	$2, %dl
	jne	.LBB514_3
# %bb.4:                                # %"$7.i"
	movq	-4(%rdx), %r8
	movq	%r8, (%rcx)
	movq	4(%rdx), %rax
	movq	%r8, %rdx
	jmp	.LBB514_5
.LBB514_3:                              # %"$8.i"
	shrq	$4, %rdx
	movl	$2, %eax
.LBB514_5:                              # %symByte.exit.sink.split
	movq	%rax, 8(%rcx)
.LBB514_6:                              # %symByte.exit
	movq	%rdx, %r8
	shrq	$8, %r8
	movq	%r8, (%rcx)
	movzbl	%dl, %eax
	testb	%dl, %dl
	js	.LBB514_7
.LBB514_40:                             # %"$2"
	retq
.LBB514_7:                              # %"$3"
	cmpb	$-1, %dl
	je	.LBB514_8
# %bb.9:                                # %"$5"
	testb	$32, %dl
	jne	.LBB514_11
# %bb.10:                               # %"$7"
	andl	$31, %edx
	movl	%edx, %eax
	jmp	.LBB514_31
.LBB514_8:
	movl	$1114112, %eax                  # imm = 0x110000
	retq
.LBB514_11:                             # %"$8"
	testb	$16, %dl
	jne	.LBB514_13
# %bb.12:                               # %"$10"
	andl	$15, %edx
	movl	%edx, %eax
	jmp	.LBB514_22
.LBB514_13:                             # %"$11"
	andl	$7, %eax
	shll	$6, %eax
	testq	%r8, %r8
	jne	.LBB514_20
# %bb.14:                               # %"$2.i21"
	movq	8(%rcx), %r8
	cmpq	$2, %r8
	jne	.LBB514_16
# %bb.15:
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	jmp	.LBB514_21
.LBB514_16:                             # %"$5.i24"
	testb	$2, %r8b
	jne	.LBB514_17
# %bb.18:                               # %"$7.i26"
	movq	-4(%r8), %r9
	movq	%r9, (%rcx)
	movq	4(%r8), %rdx
	movq	%r9, %r8
	jmp	.LBB514_19
.LBB514_17:                             # %"$8.i25"
	shrq	$4, %r8
	movl	$2, %edx
.LBB514_19:                             # %"$3.i27.sink.split"
	movq	%rdx, 8(%rcx)
.LBB514_20:                             # %"$3.i27"
	movq	%r8, %r9
	shrq	$8, %r9
	movq	%r9, (%rcx)
	andb	$63, %r8b
.LBB514_21:                             # %symByte.exit28
	movzbl	%r8b, %edx
	orl	%edx, %eax
	movq	%r9, %r8
.LBB514_22:                             # %"$12"
	shll	$6, %eax
	testq	%r8, %r8
	jne	.LBB514_29
# %bb.23:                               # %"$2.i12"
	movq	8(%rcx), %r8
	cmpq	$2, %r8
	jne	.LBB514_25
# %bb.24:
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	jmp	.LBB514_30
.LBB514_25:                             # %"$5.i15"
	testb	$2, %r8b
	jne	.LBB514_26
# %bb.27:                               # %"$7.i17"
	movq	-4(%r8), %r9
	movq	%r9, (%rcx)
	movq	4(%r8), %rdx
	movq	%r9, %r8
	jmp	.LBB514_28
.LBB514_26:                             # %"$8.i16"
	shrq	$4, %r8
	movl	$2, %edx
.LBB514_28:                             # %"$3.i18.sink.split"
	movq	%rdx, 8(%rcx)
.LBB514_29:                             # %"$3.i18"
	movq	%r8, %r9
	shrq	$8, %r9
	movq	%r9, (%rcx)
	andb	$63, %r8b
.LBB514_30:                             # %symByte.exit19
	movzbl	%r8b, %edx
	orl	%edx, %eax
	movq	%r9, %r8
.LBB514_31:                             # %"$9"
	shll	$6, %eax
	testq	%r8, %r8
	jne	.LBB514_38
# %bb.32:                               # %"$2.i3"
	movq	8(%rcx), %r8
	cmpq	$2, %r8
	jne	.LBB514_34
# %bb.33:
	xorl	%r8d, %r8d
	jmp	.LBB514_39
.LBB514_34:                             # %"$5.i6"
	testb	$2, %r8b
	jne	.LBB514_35
# %bb.36:                               # %"$7.i8"
	movq	-4(%r8), %r9
	movq	%r9, (%rcx)
	movq	4(%r8), %rdx
	movq	%r9, %r8
	jmp	.LBB514_37
.LBB514_35:                             # %"$8.i7"
	shrq	$4, %r8
	movl	$2, %edx
.LBB514_37:                             # %"$3.i9.sink.split"
	movq	%rdx, 8(%rcx)
.LBB514_38:                             # %"$3.i9"
	movq	%r8, %rdx
	shrq	$8, %rdx
	movq	%rdx, (%rcx)
	andb	$63, %r8b
.LBB514_39:                             # %symByte.exit10
	movzbl	%r8b, %ecx
	orl	%ecx, %eax
	retq
                                        # -- End function
	.def	 trim;
	.scl	2;
	.type	32;
	.endef
	.globl	trim                            # -- Begin function trim
	.p2align	4, 0x90
trim:                                   # @trim
.seh_proc trim
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	testb	$15, %sil
	je	.LBB515_1
.LBB515_7:                              # %"$4"
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB515_1:                              # %"$3"
	cmpq	%rsp, ($StkLimit)(%rip)
	ja	.LBB515_21
# %bb.2:                                # %"$6"
	movq	8(%rsi), %rcx
	callq	trim
	leaq	SymTab+8(%rip), %r8
	cmpq	%r8, %rax
	movq	(%rsi), %rcx
	jne	.LBB515_3
# %bb.5:                                # %"$8"
	cmpq	%r8, %rcx
	jne	.LBB515_8
.LBB515_6:
	movq	%r8, %rsi
	jmp	.LBB515_7
.LBB515_3:                              # %"$6.split"
	movq	%rax, %rdx
	jmp	.LBB515_4
.LBB515_8:                              # %"$3.i"
	movl	%ecx, %eax
	andl	$14, %eax
	cmpl	$8, %eax
	jne	.LBB515_20
# %bb.9:                                # %"$5.i"
	movq	-8(%rcx), %rdx
	testb	$8, %dl
	jne	.LBB515_20
	.p2align	4, 0x90
# %bb.11:                               # %"$8.i"
	testb	$6, %dl
	jne	.LBB515_12
.LBB515_10:                             # %"$8.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rdx), %rdx
	testb	$6, %dl
	je	.LBB515_10
.LBB515_12:                             # %"$10.i.preheader"
	xorl	%esi, %esi
	.p2align	4, 0x90
.LBB515_13:                             # %"$10.i"
                                        # =>This Inner Loop Header: Depth=1
	testq	%rsi, %rsi
	jne	.LBB515_18
# %bb.14:                               # %"$2.i.i"
                                        #   in Loop: Header=BB515_13 Depth=1
	cmpq	$2, %rdx
	je	.LBB515_6
# %bb.15:                               # %"$5.i.i"
                                        #   in Loop: Header=BB515_13 Depth=1
	testb	$2, %dl
	jne	.LBB515_16
# %bb.17:                               # %"$7.i.i"
                                        #   in Loop: Header=BB515_13 Depth=1
	movq	-4(%rdx), %rsi
	movq	4(%rdx), %rdx
	jmp	.LBB515_18
.LBB515_16:                             # %"$8.i.i"
                                        #   in Loop: Header=BB515_13 Depth=1
	movq	%rdx, %rsi
	shrq	$4, %rsi
	movl	$2, %edx
	.p2align	4, 0x90
.LBB515_18:                             # %symByte.exit.i
                                        #   in Loop: Header=BB515_13 Depth=1
	testb	%sil, %sil
	je	.LBB515_6
# %bb.19:                               # %"$11.i"
                                        #   in Loop: Header=BB515_13 Depth=1
	movq	%rsi, %rax
	shrq	$8, %rax
	cmpb	$33, %sil
	movq	%rax, %rsi
	jb	.LBB515_13
.LBB515_20:                             # %"$8.split"
	leaq	SymTab+8(%rip), %rdx
.LBB515_4:                              # %"$6.split"
	addq	$32, %rsp
	popq	%rsi
	jmp	cons                            # TAILCALL
.LBB515_21:                             # %"$5"
	xorl	%ecx, %ecx
	callq	stkErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 makeErr;
	.scl	2;
	.type	32;
	.endef
	.globl	makeErr                         # -- Begin function makeErr
	.p2align	4, 0x90
makeErr:                                # @makeErr
.seh_proc makeErr
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	leaq	.L$85(%rip), %r8
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 subu;
	.scl	2;
	.type	32;
	.endef
	.globl	subu                            # -- Begin function subu
	.p2align	4, 0x90
subu:                                   # @subu
.seh_proc subu
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	leaq	32(%rsp), %rbp
	.seh_setframe %rbp, 32
	.seh_endprologue
	movq	%rdx, %r12
	movq	%rcx, %rsi
	testb	$2, %sil
	jne	.LBB517_1
# %bb.5:                                # %"$3"
	testb	$2, %r12b
	jne	.LBB517_73
# %bb.6:                                # %"$14"
	movq	-4(%rsi), %rdi
	subq	-4(%r12), %rdi
	setb	%r14b
	movq	($Avail)(%rip), %r15
	testq	%r15, %r15
	jne	.LBB517_8
# %bb.7:                                # %"$2.i"
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %r15
.LBB517_8:                              # %boxNum.exit
	movq	(%r15), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%rdi, (%r15)
	movq	$2, 8(%r15)
	leaq	4(%r15), %rbx
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdx
	movq	%rbx, (%rdx)
	movq	%rdx, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rdx, -24(%rbp)                 # 8-byte Spill
	movq	%rdx, env(%rip)
	movq	4(%rsi), %rsi
	movq	4(%r12), %r13
	testb	$2, %r13b
	movq	%rbx, -16(%rbp)                 # 8-byte Spill
	movq	%r15, -8(%rbp)                  # 8-byte Spill
	jne	.LBB517_15
# %bb.9:
	movq	%rbx, %r12
	jmp	.LBB517_10
	.p2align	4, 0x90
.LBB517_37:                             # %boxNum.exit59
                                        #   in Loop: Header=BB517_10 Depth=1
	movq	(%rbx), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%rdi, (%rbx)
	movq	$2, 8(%rbx)
	addq	$4, %rbx
	movq	%rbx, 4(%r12)
	movq	4(%rsi), %rsi
	movq	4(%r13), %r13
	testb	$2, %r13b
	movq	%rbx, %r12
	jne	.LBB517_15
.LBB517_10:                             # %"$17"
                                        # =>This Inner Loop Header: Depth=1
	testb	$2, %sil
	jne	.LBB517_11
# %bb.35:                               # %"$25"
                                        #   in Loop: Header=BB517_10 Depth=1
	movq	-4(%rsi), %rdi
	andb	$1, %r14b
	addb	$-1, %r14b
	sbbq	-4(%r13), %rdi
	setb	%r14b
	movq	($Avail)(%rip), %rbx
	testq	%rbx, %rbx
	jne	.LBB517_37
# %bb.36:                               # %"$2.i57"
                                        #   in Loop: Header=BB517_10 Depth=1
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rbx
	jmp	.LBB517_37
.LBB517_1:                              # %"$4"
	testb	$2, %r12b
	jne	.LBB517_2
# %bb.4:                                # %"$6"
	subq	$32, %rsp
	movq	%r12, %rcx
	movq	%rsi, %rdx
	callq	sub1
	addq	$32, %rsp
	movq	%rax, %rsi
	xorq	$8, %rsi
	cmpq	$2, %rax
	cmoveq	%rax, %rsi
	jmp	.LBB517_71
.LBB517_73:                             # %"$15"
	movq	%rsi, %rcx
	movq	%r12, %rdx
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	sub1                            # TAILCALL
.LBB517_2:                              # %"$5"
	andq	$-3, %r12
	subq	%r12, %rsi
	jae	.LBB517_71
# %bb.3:                                # %"$8"
	xorq	$-16, %rsi
	addq	$24, %rsi
	jmp	.LBB517_71
.LBB517_15:                             # %"$19"
	shrq	$4, %r13
	.p2align	4, 0x90
.LBB517_16:                             # %"$20"
                                        # =>This Inner Loop Header: Depth=1
	testb	$2, %sil
	jne	.LBB517_38
# %bb.17:                               # %"$21"
                                        #   in Loop: Header=BB517_16 Depth=1
	movq	-4(%rsi), %rdi
	movq	4(%rsi), %rsi
	movq	%rdi, %rcx
	subq	%r13, %rcx
	movzbl	%r14b, %eax
	andl	$1, %eax
	subq	%rax, %rcx
	setb	%r15b
	subq	$32, %rsp
	movq	%rsi, %rdx
	callq	consNum
	addq	$32, %rsp
	cmpq	%r13, %rdi
	movq	%rax, 4(%rbx)
	movb	$1, %r14b
	movl	$0, %r13d
	movq	%rax, %rbx
	jb	.LBB517_16
# %bb.18:                               # %"$21"
                                        #   in Loop: Header=BB517_16 Depth=1
	testb	%r15b, %r15b
	movl	$0, %r13d
	movq	%rax, %rbx
	jne	.LBB517_16
# %bb.19:                               # %"$23"
	movq	-16(%rbp), %rbx                 # 8-byte Reload
	movq	%rbx, (%rbp)
	movq	-8(%rbp), %rdi                  # 8-byte Reload
	movq	8(%rdi), %rdx
	movq	%rbp, %rax
	testb	$2, %dl
	jne	.LBB517_20
# %bb.21:                               # %"$3.i.preheader"
	addq	$8, %rdi
	movq	%rbp, %rcx
	movq	%rcx, %rax
	.p2align	4, 0x90
.LBB517_22:                             # %"$3.i"
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -4(%rbx)
	cmovneq	%rcx, %rax
	movq	%rdi, %rcx
	movq	%rdx, %rbx
	leaq	4(%rdx), %rdi
	movq	4(%rdx), %rdx
	testb	$2, %dl
	je	.LBB517_22
# %bb.23:                               # %"$4.i"
	cmpq	$2, %rdx
	je	.LBB517_24
	jmp	.LBB517_30
.LBB517_38:                             # %"$22"
	shrq	$4, %rsi
	jmp	.LBB517_39
.LBB517_11:                             # %"$26"
	shrq	$4, %rsi
	andb	$1, %r14b
	addb	$-1, %r14b
	sbbq	-4(%r13), %rsi
	setb	%r14b
	movq	($Avail)(%rip), %r15
	testq	%r15, %r15
	jne	.LBB517_13
# %bb.12:                               # %"$2.i61.peel"
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %r15
.LBB517_13:                             # %boxNum.exit63.peel
	movq	(%r15), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%rsi, (%r15)
	movq	$2, 8(%r15)
	addq	$4, %r15
	movq	%r15, 4(%r12)
	movq	4(%r13), %r13
	testb	$2, %r13b
	je	.LBB517_31
# %bb.14:
	movq	%r15, %rbx
.LBB517_34:                             # %"$29"
	shrq	$4, %r13
	xorl	%esi, %esi
.LBB517_39:                             # %"$18"
	movq	%rsi, %rax
	subq	%r13, %rax
	movzbl	%r14b, %ecx
	andl	$1, %ecx
	subq	%rcx, %rax
	setb	%cl
	shlq	$4, %rax
	orq	$2, %rax
	cmpq	%r13, %rsi
	movq	%rax, 4(%rbx)
	movq	-16(%rbp), %rbx                 # 8-byte Reload
	movq	%rbx, %rax
	movq	-8(%rbp), %rdi                  # 8-byte Reload
	jb	.LBB517_53
# %bb.40:                               # %"$18"
	testb	%cl, %cl
	movq	%rbx, %rax
	jne	.LBB517_53
# %bb.41:                               # %"$30"
	movq	%rbx, (%rbp)
	movq	8(%rdi), %rdx
	movq	%rbp, %rax
	testb	$2, %dl
	jne	.LBB517_42
# %bb.43:                               # %"$3.i37.preheader"
	addq	$8, %rdi
	movq	%rbp, %rcx
	movq	%rcx, %rax
	.p2align	4, 0x90
.LBB517_44:                             # %"$3.i37"
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -4(%rbx)
	cmovneq	%rcx, %rax
	movq	%rdi, %rcx
	movq	%rdx, %rbx
	leaq	4(%rdx), %rdi
	movq	4(%rdx), %rdx
	testb	$2, %dl
	je	.LBB517_44
# %bb.45:                               # %"$4.i45"
	cmpq	$2, %rdx
	je	.LBB517_46
	jmp	.LBB517_52
	.p2align	4, 0x90
.LBB517_53:                             # %"$33"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rcx
	notq	-4(%rax)
	movq	4(%rax), %rax
	testb	$2, %al
	je	.LBB517_53
# %bb.54:                               # %"$35"
	xorq	$-16, %rax
	movq	%rax, 4(%rcx)
	movq	%rbx, %rcx
	.p2align	4, 0x90
.LBB517_55:                             # %"$36"
                                        # =>This Inner Loop Header: Depth=1
	incq	-4(%rcx)
	jne	.LBB517_58
# %bb.56:                               # %"$38"
                                        #   in Loop: Header=BB517_55 Depth=1
	movq	%rcx, %rax
	movq	4(%rcx), %rcx
	testb	$2, %cl
	je	.LBB517_55
# %bb.57:                               # %"$40"
	addq	$16, %rcx
	movq	%rcx, 4(%rax)
.LBB517_58:                             # %"$-9"
	movq	%rbx, (%rbp)
	movq	8(%rdi), %rdx
	movq	%rbp, %rax
	testb	$2, %dl
	jne	.LBB517_59
# %bb.60:                               # %"$3.i14.preheader"
	addq	$8, %rdi
	movq	%rbp, %rcx
	movq	%rcx, %rax
	.p2align	4, 0x90
.LBB517_61:                             # %"$3.i14"
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -4(%rbx)
	cmovneq	%rcx, %rax
	movq	%rdi, %rcx
	movq	%rdx, %rbx
	leaq	4(%rdx), %rdi
	movq	4(%rdx), %rdx
	testb	$2, %dl
	je	.LBB517_61
	jmp	.LBB517_62
	.p2align	4, 0x90
.LBB517_33:                             # %boxNum.exit63
                                        #   in Loop: Header=BB517_31 Depth=1
	movq	(%rbx), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%rsi, (%rbx)
	movq	$2, 8(%rbx)
	addq	$4, %rbx
	movq	%rbx, 4(%r15)
	movq	4(%r13), %r13
	testb	$2, %r13b
	movq	%rbx, %r15
	jne	.LBB517_34
.LBB517_31:                             # %"$27"
                                        # =>This Inner Loop Header: Depth=1
	andb	$1, %r14b
	addb	$-1, %r14b
	movl	$0, %esi
	sbbq	-4(%r13), %rsi
	setb	%r14b
	movq	($Avail)(%rip), %rbx
	testq	%rbx, %rbx
	jne	.LBB517_33
# %bb.32:                               # %"$2.i61"
                                        #   in Loop: Header=BB517_31 Depth=1
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rbx
	jmp	.LBB517_33
.LBB517_20:
	movq	%rax, %rcx
	cmpq	$2, %rdx
	jne	.LBB517_30
.LBB517_24:                             # %"$7.i"
	movq	-4(%rbx), %rdx
	testq	%rdx, %rdx
	je	.LBB517_27
# %bb.25:                               # %"$11.i"
	movq	%rdx, %rax
	shrq	$60, %rax
	jne	.LBB517_30
# %bb.26:                               # %"$12.i"
	shlq	$4, %rdx
	orq	$2, %rdx
	movq	%rdx, (%rcx)
	jmp	.LBB517_30
.LBB517_42:
	movq	%rax, %rcx
	cmpq	$2, %rdx
	jne	.LBB517_52
.LBB517_46:                             # %"$7.i47"
	movq	-4(%rbx), %rdx
	testq	%rdx, %rdx
	je	.LBB517_49
# %bb.47:                               # %"$11.i49"
	movq	%rdx, %rax
	shrq	$60, %rax
	jne	.LBB517_52
# %bb.48:                               # %"$12.i50"
	shlq	$4, %rdx
	orq	$2, %rdx
	movq	%rdx, (%rcx)
	movq	(%rbp), %rsi
	jmp	.LBB517_70
.LBB517_59:
	movq	%rax, %rcx
.LBB517_62:                             # %"$4.i22"
	cmpq	$2, %rdx
	jne	.LBB517_69
# %bb.63:                               # %"$7.i24"
	movq	-4(%rbx), %rdx
	testq	%rdx, %rdx
	je	.LBB517_66
# %bb.64:                               # %"$11.i26"
	movq	%rdx, %rax
	shrq	$60, %rax
	jne	.LBB517_69
# %bb.65:                               # %"$12.i27"
	shlq	$4, %rdx
	orq	$2, %rdx
	movq	%rdx, (%rcx)
	jmp	.LBB517_69
.LBB517_27:                             # %"$10.i"
	movq	(%rax), %rdx
	movq	-4(%rdx), %rbx
	movq	%rbx, %rcx
	shrq	$60, %rcx
	jne	.LBB517_28
# %bb.29:                               # %"$14.i"
	shlq	$4, %rbx
	orq	$2, %rbx
	movq	%rbx, (%rax)
	jmp	.LBB517_30
.LBB517_66:                             # %"$10.i29"
	movq	(%rax), %rdx
	movq	-4(%rdx), %rbx
	movq	%rbx, %rcx
	shrq	$60, %rcx
	jne	.LBB517_67
# %bb.68:                               # %"$14.i31"
	shlq	$4, %rbx
	orq	$2, %rbx
	movq	%rbx, (%rax)
	jmp	.LBB517_69
.LBB517_49:                             # %"$10.i52"
	movq	(%rax), %rdx
	movq	-4(%rdx), %rbx
	movq	%rbx, %rcx
	shrq	$60, %rcx
	jne	.LBB517_50
# %bb.51:                               # %"$14.i54"
	shlq	$4, %rbx
	orq	$2, %rbx
	movq	%rbx, (%rax)
.LBB517_52:                             # %zapZero.exit55
	movq	(%rbp), %rsi
	jmp	.LBB517_70
.LBB517_28:                             # %"$15.i"
	movq	$2, 4(%rdx)
.LBB517_30:                             # %zapZero.exit
	movq	(%rbp), %rax
	movq	-24(%rbp), %rcx                 # 8-byte Reload
	movq	8(%rcx), %rcx
	movq	%rcx, env(%rip)
	jmp	.LBB517_72
.LBB517_67:                             # %"$15.i30"
	movq	$2, 4(%rdx)
.LBB517_69:                             # %zapZero.exit32
	movq	(%rbp), %rsi
	orq	$8, %rsi
.LBB517_70:                             # %"$32"
	movq	-24(%rbp), %rax                 # 8-byte Reload
	movq	8(%rax), %rax
	movq	%rax, env(%rip)
.LBB517_71:                             # %"$2"
	movq	%rsi, %rax
.LBB517_72:                             # %"$2"
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB517_50:                             # %"$15.i53"
	movq	$2, 4(%rdx)
	movq	(%rbp), %rsi
	jmp	.LBB517_70
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 sub1;
	.scl	2;
	.type	32;
	.endef
	.globl	sub1                            # -- Begin function sub1
	.p2align	4, 0x90
sub1:                                   # @sub1
.seh_proc sub1
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$16, %rsp
	.seh_stackalloc 16
	leaq	16(%rsp), %rbp
	.seh_setframe %rbp, 16
	.seh_endprologue
	shrq	$4, %rdx
	movq	-4(%rcx), %rbx
	movq	4(%rcx), %rsi
	subq	%rdx, %rbx
	jae	.LBB518_1
# %bb.8:                                # %"$3"
	testb	$4, %sil
	jne	.LBB518_23
# %bb.9:                                # %"$12"
	subq	$16, %rsi
	jae	.LBB518_11
# %bb.10:                               # %"$13"
	shlq	$4, %rbx
	movl	$10, %eax
	subq	%rbx, %rax
	jmp	.LBB518_41
.LBB518_1:                              # %"$4"
	cmpq	$2, %rsi
	jne	.LBB518_7
# %bb.2:                                # %"$5"
	movq	%rbx, %rax
	shrq	$60, %rax
	jne	.LBB518_3
# %bb.6:                                # %"$9"
	shlq	$4, %rbx
	orq	$2, %rbx
	movq	%rbx, %rax
	jmp	.LBB518_41
.LBB518_23:                             # %"$11"
	movq	($Avail)(%rip), %r15
	testq	%r15, %r15
	jne	.LBB518_25
# %bb.24:                               # %"$2.i28"
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %r15
.LBB518_25:                             # %boxNum.exit30
	movq	(%r15), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%rbx, (%r15)
	movq	$2, 8(%r15)
	leaq	4(%r15), %r12
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%r12, (%r14)
	movq	%r14, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r14, env(%rip)
	movq	%r12, %rax
	.p2align	4, 0x90
.LBB518_26:                             # %"$16"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rdi
	movq	-4(%rsi), %rbx
	movq	4(%rsi), %rsi
	leaq	-1(%rbx), %rcx
	subq	$32, %rsp
	movq	%rsi, %rdx
	callq	consNum
	addq	$32, %rsp
	cmpq	$1, %rbx
	movq	%rax, 4(%rdi)
	jae	.LBB518_29
# %bb.27:                               # %"$17"
                                        #   in Loop: Header=BB518_26 Depth=1
	testb	$2, %sil
	je	.LBB518_26
# %bb.28:                               # %"$21"
	addq	$-16, %rsi
	movq	%rsi, 4(%rax)
.LBB518_29:                             # %"$18"
	movq	%r12, -8(%rbp)
	movq	8(%r15), %rdx
	leaq	-8(%rbp), %rax
	testb	$2, %dl
	jne	.LBB518_30
# %bb.31:                               # %"$3.i8.preheader"
	addq	$8, %r15
	leaq	-8(%rbp), %rcx
	movq	%rcx, %rax
	.p2align	4, 0x90
.LBB518_32:                             # %"$3.i8"
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -4(%r12)
	cmovneq	%rcx, %rax
	movq	%r15, %rcx
	movq	%rdx, %r12
	leaq	4(%rdx), %r15
	movq	4(%rdx), %rdx
	testb	$2, %dl
	je	.LBB518_32
# %bb.33:                               # %"$4.i16"
	cmpq	$2, %rdx
	je	.LBB518_34
	jmp	.LBB518_40
.LBB518_7:                              # %"$6"
	movq	%rbx, %rcx
	movq	%rsi, %rdx
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	consNum                         # TAILCALL
.LBB518_11:                             # %"$14"
	subq	$32, %rsp
	movq	%rbx, %rcx
	movq	%rsi, %rdx
	callq	consNum
	addq	$32, %rsp
	movq	%rax, -8(%rbp)
	movq	4(%rax), %rbx
	leaq	-8(%rbp), %rcx
	testb	$2, %bl
	jne	.LBB518_12
# %bb.13:                               # %"$3.i.preheader"
	movq	%rax, %rdx
	addq	$4, %rdx
	leaq	-8(%rbp), %rdi
	movq	%rdi, %rcx
	.p2align	4, 0x90
.LBB518_14:                             # %"$3.i"
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -4(%rax)
	cmovneq	%rdi, %rcx
	movq	%rdx, %rdi
	movq	%rbx, %rax
	leaq	4(%rbx), %rdx
	movq	4(%rbx), %rbx
	testb	$2, %bl
	je	.LBB518_14
# %bb.15:                               # %"$4.i"
	cmpq	$2, %rbx
	je	.LBB518_16
	jmp	.LBB518_22
.LBB518_3:                              # %"$8"
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	jne	.LBB518_5
# %bb.4:                                # %"$2.i"
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rax
.LBB518_5:                              # %boxNum.exit
	movq	(%rax), %rcx
	movq	%rcx, ($Avail)(%rip)
	movq	%rbx, (%rax)
	movq	$2, 8(%rax)
	addq	$4, %rax
	jmp	.LBB518_41
.LBB518_30:
	movq	%rax, %rcx
	cmpq	$2, %rdx
	jne	.LBB518_40
.LBB518_34:                             # %"$7.i18"
	movq	-4(%r12), %rdx
	testq	%rdx, %rdx
	je	.LBB518_37
# %bb.35:                               # %"$11.i20"
	movq	%rdx, %rax
	shrq	$60, %rax
	jne	.LBB518_40
# %bb.36:                               # %"$12.i21"
	shlq	$4, %rdx
	orq	$2, %rdx
	movq	%rdx, (%rcx)
	jmp	.LBB518_40
.LBB518_12:
	movq	%rcx, %rdi
	cmpq	$2, %rbx
	jne	.LBB518_22
.LBB518_16:                             # %"$7.i"
	movq	-4(%rax), %rax
	testq	%rax, %rax
	je	.LBB518_19
# %bb.17:                               # %"$11.i"
	movq	%rax, %rcx
	shrq	$60, %rcx
	jne	.LBB518_22
# %bb.18:                               # %"$12.i"
	shlq	$4, %rax
	orq	$2, %rax
	movq	%rax, (%rdi)
	movq	-8(%rbp), %rax
	jmp	.LBB518_41
.LBB518_37:                             # %"$10.i23"
	movq	(%rax), %rdx
	movq	-4(%rdx), %rbx
	movq	%rbx, %rcx
	shrq	$60, %rcx
	jne	.LBB518_38
# %bb.39:                               # %"$14.i25"
	shlq	$4, %rbx
	orq	$2, %rbx
	movq	%rbx, (%rax)
	jmp	.LBB518_40
.LBB518_19:                             # %"$10.i"
	movq	(%rcx), %rdx
	movq	-4(%rdx), %rbx
	movq	%rbx, %rax
	shrq	$60, %rax
	jne	.LBB518_20
# %bb.21:                               # %"$14.i"
	shlq	$4, %rbx
	orq	$2, %rbx
	movq	%rbx, (%rcx)
.LBB518_22:                             # %zapZero.exit
	movq	-8(%rbp), %rax
	jmp	.LBB518_41
.LBB518_38:                             # %"$15.i24"
	movq	$2, 4(%rdx)
.LBB518_40:                             # %zapZero.exit26
	movq	-8(%rbp), %rax
	movq	8(%r14), %rcx
	movq	%rcx, env(%rip)
.LBB518_41:                             # %"$2"
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB518_20:                             # %"$15.i"
	movq	$2, 4(%rdx)
	movq	-8(%rbp), %rax
	jmp	.LBB518_41
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 pairErr;
	.scl	2;
	.type	32;
	.endef
	.globl	pairErr                         # -- Begin function pairErr
	.p2align	4, 0x90
pairErr:                                # @pairErr
.seh_proc pairErr
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	leaq	.L$16(%rip), %r8
	xorl	%r9d, %r9d
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 forkLisp;
	.scl	2;
	.type	32;
	.endef
	.globl	forkLisp                        # -- Begin function forkLisp
	.p2align	4, 0x90
forkLisp:                               # @forkLisp
.seh_proc forkLisp
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$16, %rsp
	.seh_stackalloc 16
	leaq	16(%rsp), %rbp
	.seh_setframe %rbp, 16
	.seh_endprologue
	movq	%rcx, %r14
	movl	($OutFDs)(%rip), %esi
	testl	%esi, %esi
	jle	.LBB520_6
# %bb.1:                                # %"$3.i.preheader"
	movq	($OutFiles)(%rip), %rdi
	xorl	%ebx, %ebx
	jmp	.LBB520_2
	.p2align	4, 0x90
.LBB520_5:                              # %flush.exit.i
                                        #   in Loop: Header=BB520_2 Depth=1
	incq	%rbx
	cmpl	%ebx, %esi
	jle	.LBB520_6
.LBB520_2:                              # %"$3.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi,%rbx,8), %rdx
	testq	%rdx, %rdx
	je	.LBB520_5
# %bb.3:                                # %"$3.i.i"
                                        #   in Loop: Header=BB520_2 Depth=1
	movl	4(%rdx), %r8d
	testl	%r8d, %r8d
	je	.LBB520_5
# %bb.4:                                # %"$6.i.i"
                                        #   in Loop: Header=BB520_2 Depth=1
	movl	$0, 4(%rdx)
	movl	(%rdx), %ecx
	addq	$8, %rdx
	subq	$32, %rsp
	callq	wrBytes
	addq	$32, %rsp
	jmp	.LBB520_5
.LBB520_6:                              # %flushAll.exit
	cmpl	$0, ($Spkr)(%rip)
	jne	.LBB520_10
# %bb.7:                                # %"$2"
	subq	$32, %rsp
	leaq	($SpMiPipe)(%rip), %rcx
	callq	pipe
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB520_73
# %bb.8:                                # %"$5"
	movl	($SpMiPipe)(%rip), %ecx
	movl	%ecx, ($Spkr)(%rip)
	subq	$32, %rsp
	callq	fcntlCloExec
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB520_74
# %bb.9:                                # %closeOnExec.exit
	movl	($SpMiPipe)+4(%rip), %ecx
	subq	$32, %rsp
	callq	fcntlCloExec
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB520_74
.LBB520_10:                             # %"$3"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r12
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	subq	$32, %rsp
	movq	%r12, %rcx
	callq	pipe
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB520_73
# %bb.11:                               # %"$7"
	subq	$32, %rsp
	movq	%r15, %rcx
	callq	pipe
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB520_73
# %bb.12:                               # %"$9"
	movl	(%r12), %ecx
	subq	$32, %rsp
	callq	fcntlCloExec
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB520_74
# %bb.13:                               # %closeOnExec.exit30
	movl	4(%r12), %ecx
	subq	$32, %rsp
	callq	fcntlCloExec
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB520_74
# %bb.14:                               # %closeOnExec.exit33
	movl	(%r15), %ecx
	subq	$32, %rsp
	callq	fcntlCloExec
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB520_74
# %bb.15:                               # %closeOnExec.exit36
	movl	4(%r15), %ecx
	subq	$32, %rsp
	callq	fcntlCloExec
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB520_74
# %bb.16:                               # %closeOnExec.exit39
	movl	($Children)(%rip), %ebx
	testl	%ebx, %ebx
	jle	.LBB520_17
# %bb.18:                               # %"$11.preheader"
	movq	($Child)(%rip), %rax
	addq	$16, %rax
	xorl	%edi, %edi
	.p2align	4, 0x90
.LBB520_19:                             # %"$11"
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, (%rax)
	je	.LBB520_22
# %bb.20:                               # %"$13"
                                        #   in Loop: Header=BB520_19 Depth=1
	incl	%edi
	addq	$28, %rax
	cmpl	%edi, %ebx
	jg	.LBB520_19
# %bb.21:
	movl	%ebx, %edi
	jmp	.LBB520_22
.LBB520_17:
	xorl	%edi, %edi
.LBB520_22:                             # %"$12"
	subq	$32, %rsp
	callq	fork
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB520_75
# %bb.23:                               # %"$15"
	je	.LBB520_24
# %bb.68:                               # %"$17"
	movl	%eax, %esi
	cmpl	%ebx, %edi
	jne	.LBB520_71
# %bb.69:                               # %"$42"
	leal	8(%rbx), %eax
	movl	%eax, ($Children)(%rip)
	movq	($Child)(%rip), %rcx
	leal	(%rax,%rax,8), %eax
	leal	(%rax,%rax,2), %eax
	leal	8(%rbx,%rax), %eax
	movslq	%eax, %rdx
	subq	$32, %rsp
	callq	realloc
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB520_78
# %bb.70:                               # %alloc.exit
	movq	%rax, ($Child)(%rip)
	leal	(%rbx,%rbx,8), %ecx
	leal	(%rcx,%rcx,2), %ecx
	addl	%ebx, %ecx
	movslq	%ecx, %rcx
	movl	$0, 16(%rax,%rcx)
	movl	$0, 44(%rax,%rcx)
	movl	$0, 72(%rax,%rcx)
	movl	$0, 100(%rax,%rcx)
	movl	$0, 128(%rax,%rcx)
	movl	$0, 156(%rax,%rcx)
	movl	$0, 184(%rax,%rcx)
	movl	$0, 212(%rax,%rcx)
.LBB520_71:                             # %"$43"
	movl	(%r12), %ecx
	subq	$32, %rsp
	callq	close
	addq	$32, %rsp
	movl	4(%r15), %ecx
	subq	$32, %rsp
	callq	close
	addq	$32, %rsp
	movq	($Child)(%rip), %rax
	leal	(%rdi,%rdi,8), %ecx
	leal	(%rcx,%rcx,2), %ecx
	addl	%edi, %ecx
	movslq	%ecx, %rdx
	movq	$0, (%rax,%rdx)
	movq	$0, 8(%rax,%rdx)
	movl	%esi, 16(%rax,%rdx)
	movl	(%r15), %ecx
	movl	%ecx, 20(%rax,%rdx)
	movl	4(%r12), %ecx
	movl	%ecx, 24(%rax,%rdx)
	subq	$32, %rsp
	callq	nonBlocking
	addq	$32, %rsp
	jmp	.LBB520_72
.LBB520_24:                             # %"$18"
	movl	%edi, ($Slot)(%rip)
	movl	$0, ($Spkr)(%rip)
	movl	($SpMiPipe)+4(%rip), %eax
	movl	%eax, ($Mic)(%rip)
	movl	4(%r12), %ecx
	subq	$32, %rsp
	callq	close
	addq	$32, %rsp
	movl	(%r15), %ecx
	subq	$32, %rsp
	callq	close
	addq	$32, %rsp
	movl	($SpMiPipe)(%rip), %ecx
	subq	$32, %rsp
	callq	close
	addq	$32, %rsp
	movslq	($Hear)(%rip), %rsi
	testq	%rsi, %rsi
	je	.LBB520_35
# %bb.25:                               # %"$19"
	subq	$32, %rsp
	movl	%esi, %ecx
	callq	close
	addq	$32, %rsp
	cmpl	%esi, ($InFDs)(%rip)
	jle	.LBB520_30
# %bb.26:                               # %"$2.i40"
	movq	($InFiles)(%rip), %rax
	movq	(%rax,%rsi,8), %rdi
	cmpq	($InFile)(%rip), %rdi
	jne	.LBB520_28
# %bb.27:                               # %"$4.i"
	movq	(%rax), %rax
	movq	%rax, ($InFile)(%rip)
	movl	12(%rax), %eax
	movl	%eax, ($Chr)(%rip)
.LBB520_28:                             # %"$5.i"
	testq	%rdi, %rdi
	je	.LBB520_30
# %bb.29:                               # %"$6.i"
	movq	(%rdi), %rcx
	subq	$32, %rsp
	callq	free
	addq	$32, %rsp
	movq	$0, (%rdi)
	movl	$-1, 8(%rdi)
.LBB520_30:                             # %closeInFile.exit
	cmpl	%esi, ($OutFDs)(%rip)
	jle	.LBB520_35
# %bb.31:                               # %"$2.i42"
	movq	($OutFiles)(%rip), %rcx
	movq	(%rcx,%rsi,8), %rax
	cmpq	($OutFile)(%rip), %rax
	jne	.LBB520_33
# %bb.32:                               # %"$4.i43"
	movq	8(%rcx), %rcx
	movq	%rcx, ($OutFile)(%rip)
.LBB520_33:                             # %"$5.i45"
	testq	%rax, %rax
	je	.LBB520_35
# %bb.34:                               # %"$6.i46"
	movl	$-1, (%rax)
.LBB520_35:                             # %"$20"
	movl	(%r12), %ecx
	movl	%ecx, ($Hear)(%rip)
	subq	$32, %rsp
	xorl	%edx, %edx
	callq	initInFile
	addq	$32, %rsp
	movl	($Tell)(%rip), %ecx
	testl	%ecx, %ecx
	je	.LBB520_37
# %bb.36:                               # %"$21"
	subq	$32, %rsp
	callq	close
	addq	$32, %rsp
.LBB520_37:                             # %"$22"
	movl	4(%r15), %eax
	movl	%eax, ($Tell)(%rip)
	movl	$0, ($Nfds)(%rip)
	movq	($Poll)(%rip), %rcx
	subq	$32, %rsp
	callq	free
	addq	$32, %rsp
	movq	$0, ($Poll)(%rip)
	movq	($Child)(%rip), %rsi
	decl	%ebx
	js	.LBB520_43
# %bb.38:                               # %"$24.preheader"
	addq	$24, %rsi
	jmp	.LBB520_39
	.p2align	4, 0x90
.LBB520_41:                             # %"$27"
                                        #   in Loop: Header=BB520_39 Depth=1
	addq	$28, %rsi
	decl	%ebx
	js	.LBB520_42
.LBB520_39:                             # %"$24"
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -8(%rsi)
	je	.LBB520_41
# %bb.40:                               # %"$26"
                                        #   in Loop: Header=BB520_39 Depth=1
	movq	-24(%rsi), %rcx
	subq	$32, %rsp
	callq	free
	addq	$32, %rsp
	movl	-4(%rsi), %ecx
	subq	$32, %rsp
	callq	close
	addq	$32, %rsp
	movl	(%rsi), %ecx
	subq	$32, %rsp
	callq	close
	addq	$32, %rsp
	jmp	.LBB520_41
.LBB520_42:                             # %"$25.loopexit"
	movq	($Child)(%rip), %rsi
.LBB520_43:                             # %"$25"
	movl	$0, ($Children)(%rip)
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	free
	addq	$32, %rsp
	movq	$0, ($Child)(%rip)
	movq	env+32(%rip), %rax
	testq	%rax, %rax
	je	.LBB520_45
	.p2align	4, 0x90
.LBB520_76:                             # %"$29"
                                        # =>This Inner Loop Header: Depth=1
	movl	$0, 24(%rax)
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB520_76
.LBB520_45:                             # %"$31.preheader"
	movq	env+40(%rip), %rax
	testq	%rax, %rax
	je	.LBB520_47
	.p2align	4, 0x90
.LBB520_77:                             # %"$32"
                                        # =>This Inner Loop Header: Depth=1
	movl	$0, 24(%rax)
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB520_77
.LBB520_47:                             # %"$34.preheader"
	movq	env+24(%rip), %rax
	testq	%rax, %rax
	je	.LBB520_50
	.p2align	4, 0x90
.LBB520_48:                             # %"$35"
                                        # =>This Inner Loop Header: Depth=1
	movq	$2, 16(%rax)
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB520_48
.LBB520_50:                             # %"$36"
	movq	SymTab+600(%rip), %rdi
	.p2align	4, 0x90
.LBB520_51:                             # %"$36"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %dil
	jne	.LBB520_63
# %bb.52:                               # %"$38"
                                        #   in Loop: Header=BB520_51 Depth=1
	movq	(%rdi), %rax
	movq	8(%rdi), %rdi
	movq	(%rax), %rsi
	testb	$8, %sil
	jne	.LBB520_51
# %bb.53:                               # %"$40"
                                        #   in Loop: Header=BB520_51 Depth=1
	shrq	$4, %rsi
	subq	$32, %rsp
	movl	%esi, %ecx
	callq	close
	addq	$32, %rsp
	cmpl	%esi, ($InFDs)(%rip)
	jle	.LBB520_58
# %bb.54:                               # %"$2.i48"
                                        #   in Loop: Header=BB520_51 Depth=1
	movq	($InFiles)(%rip), %rax
	movslq	%esi, %rcx
	movq	(%rax,%rcx,8), %rbx
	cmpq	($InFile)(%rip), %rbx
	jne	.LBB520_56
# %bb.55:                               # %"$4.i49"
                                        #   in Loop: Header=BB520_51 Depth=1
	movq	(%rax), %rax
	movq	%rax, ($InFile)(%rip)
	movl	12(%rax), %eax
	movl	%eax, ($Chr)(%rip)
.LBB520_56:                             # %"$5.i51"
                                        #   in Loop: Header=BB520_51 Depth=1
	testq	%rbx, %rbx
	je	.LBB520_58
# %bb.57:                               # %"$6.i52"
                                        #   in Loop: Header=BB520_51 Depth=1
	movq	(%rbx), %rcx
	subq	$32, %rsp
	callq	free
	addq	$32, %rsp
	movq	$0, (%rbx)
	movl	$-1, 8(%rbx)
.LBB520_58:                             # %closeInFile.exit54
                                        #   in Loop: Header=BB520_51 Depth=1
	cmpl	%esi, ($OutFDs)(%rip)
	jle	.LBB520_51
# %bb.59:                               # %"$2.i55"
                                        #   in Loop: Header=BB520_51 Depth=1
	movq	($OutFiles)(%rip), %rcx
	movslq	%esi, %rax
	movq	(%rcx,%rax,8), %rax
	cmpq	($OutFile)(%rip), %rax
	jne	.LBB520_61
# %bb.60:                               # %"$4.i56"
                                        #   in Loop: Header=BB520_51 Depth=1
	movq	8(%rcx), %rcx
	movq	%rcx, ($OutFile)(%rip)
.LBB520_61:                             # %"$5.i58"
                                        #   in Loop: Header=BB520_51 Depth=1
	testq	%rax, %rax
	je	.LBB520_51
# %bb.62:                               # %"$6.i59"
                                        #   in Loop: Header=BB520_51 Depth=1
	movl	$-1, (%rax)
	jmp	.LBB520_51
.LBB520_63:                             # %"$39"
	leaq	SymTab+8(%rip), %rsi
	movq	%rsi, SymTab+808(%rip)
	movq	%rsi, SymTab+600(%rip)
	movq	Termio(%rip), %rcx
	subq	$32, %rsp
	callq	free
	addq	$32, %rsp
	movq	$0, Termio(%rip)
	movb	($Repl)(%rip), %al
	movb	%al, ($PRepl)(%rip)
	movq	SymTab+200(%rip), %rax
	movq	%rax, SymTab+216(%rip)
	subq	$32, %rsp
	callq	getpid
	addq	$32, %rsp
	cltq
	shlq	$4, %rax
	orq	$2, %rax
	movq	%rax, SymTab+200(%rip)
	movq	SymTab+792(%rip), %rbx
	movq	SymTab+440(%rip), %rdi
	movq	env(%rip), %rax
	movq	%rdi, -16(%rbp)
	movq	%rax, -8(%rbp)
	leaq	-16(%rbp), %rax
	movq	%rax, env(%rip)
	jmp	.LBB520_64
	.p2align	4, 0x90
.LBB520_66:                             # %"$4.i65"
                                        #   in Loop: Header=BB520_64 Depth=1
	testb	$15, %bl
	jne	.LBB520_67
.LBB520_64:                             # %"$2.i62"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rbx), %rcx
	movq	8(%rbx), %rbx
	testb	$15, %cl
	jne	.LBB520_66
# %bb.65:                               # %"$3.i63"
                                        #   in Loop: Header=BB520_64 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	jmp	.LBB520_66
.LBB520_67:                             # %execAt.exit
	movq	%rdi, SymTab+440(%rip)
	movq	-8(%rbp), %rax
	movq	%rax, env(%rip)
	movq	%rsi, SymTab+792(%rip)
	xorl	%esi, %esi
.LBB520_72:                             # %"$14"
	movl	%esi, %eax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB520_74:                             # %"$2.i"
	subq	$32, %rsp
	callq	strErrno
	leaq	.L$36(%rip), %r8
	movq	%r14, %rcx
	xorl	%edx, %edx
	movq	%rax, %r9
	callq	err
.LBB520_73:                             # %"$4"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	pipeErr
.LBB520_75:                             # %"$16"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	forkErr
.LBB520_78:                             # %"$2.i68"
	subq	$32, %rsp
	leaq	.L$3(%rip), %rcx
	xorl	%edx, %edx
	callq	giveup
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 reentErr;
	.scl	2;
	.type	32;
	.endef
	.globl	reentErr                        # -- Begin function reentErr
	.p2align	4, 0x90
reentErr:                               # @reentErr
.seh_proc reentErr
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	leaq	.L$74(%rip), %r8
	xorl	%r9d, %r9d
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 stop;
	.scl	2;
	.type	32;
	.endef
	.globl	stop                            # -- Begin function stop
	.p2align	4, 0x90
stop:                                   # @stop
# %bb.0:                                # %"$1"
	movq	$0, (%rcx)
	.p2align	4, 0x90
.LBB522_1:                              # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rcx, %rax
	movq	16(%rcx), %rcx
	testq	%rcx, %rcx
	jne	.LBB522_1
	jmp	.LBB522_3
	.p2align	4, 0x90
.LBB522_2:                              # %"$6"
                                        #   in Loop: Header=BB522_3 Depth=1
	movq	8(%rax), %rax
	movq	$0, 16(%rax)
.LBB522_3:                              # %"$6"
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, (%rax)
	je	.LBB522_2
# %bb.4:                                # %"$7"
	retq
                                        # -- End function
	.def	 setDestruct;
	.scl	2;
	.type	32;
	.endef
	.globl	setDestruct                     # -- Begin function setDestruct
	.p2align	4, 0x90
setDestruct:                            # @setDestruct
# %bb.0:                                # %"$1"
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$32, %rsp
	movq	%rdx, %rsi
	movq	%rcx, %rdi
	leaq	SymTab+8(%rip), %rbx
	jmp	.LBB523_1
	.p2align	4, 0x90
.LBB523_4:                              # %"$6"
                                        #   in Loop: Header=BB523_1 Depth=1
	callq	setDestruct
.LBB523_5:                              # %"$7"
                                        #   in Loop: Header=BB523_1 Depth=1
	testb	$15, %dil
	jne	.LBB523_6
.LBB523_1:                              # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %sil
	cmovneq	%rbx, %rsi
	movq	(%rdi), %rcx
	movq	8(%rdi), %rdi
	movq	(%rsi), %rdx
	movq	8(%rsi), %rsi
	testb	$15, %cl
	je	.LBB523_4
# %bb.2:                                # %"$5"
                                        #   in Loop: Header=BB523_1 Depth=1
	cmpq	%rbx, %rcx
	je	.LBB523_5
# %bb.3:                                # %"$8"
                                        #   in Loop: Header=BB523_1 Depth=1
	movq	%rdx, (%rcx)
	jmp	.LBB523_5
.LBB523_6:                              # %"$12"
	cmpq	%rbx, %rdi
	je	.LBB523_8
# %bb.7:                                # %"$13"
	movq	%rsi, (%rdi)
.LBB523_8:                              # %"$11"
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
                                        # -- End function
	.def	 loop1;
	.scl	2;
	.type	32;
	.endef
	.globl	loop1                           # -- Begin function loop1
	.p2align	4, 0x90
loop1:                                  # @loop1
.seh_proc loop1
# %bb.0:                                # %"$1"
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rcx, %rsi
	leaq	SymTab+8(%rip), %rdi
	leaq	SymTab+280(%rip), %r14
	jmp	.LBB524_3
.LBB524_1:                              #   in Loop: Header=BB524_3 Depth=1
	movq	%rcx, %rax
	.p2align	4, 0x90
.LBB524_2:                              # %"$4"
                                        #   in Loop: Header=BB524_3 Depth=1
	movq	8(%rsi), %rsi
	testb	$15, %sil
	jne	.LBB524_20
.LBB524_3:                              # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rax
	testb	$6, %al
	jne	.LBB524_2
# %bb.4:                                # %"$3"
                                        #   in Loop: Header=BB524_3 Depth=1
	testb	$8, %al
	movq	(%rax), %rcx
	jne	.LBB524_1
# %bb.5:                                # %"$6"
                                        #   in Loop: Header=BB524_3 Depth=1
	cmpq	%rdi, %rcx
	jne	.LBB524_9
# %bb.6:                                # %"$9"
                                        #   in Loop: Header=BB524_3 Depth=1
	movq	8(%rax), %rbx
	movq	(%rbx), %rax
	testb	$6, %al
	jne	.LBB524_15
# %bb.7:                                # %"$11"
                                        #   in Loop: Header=BB524_3 Depth=1
	testb	$8, %al
	jne	.LBB524_14
# %bb.8:                                # %"$13"
                                        #   in Loop: Header=BB524_3 Depth=1
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB524_15
.LBB524_9:                              # %"$8"
                                        #   in Loop: Header=BB524_3 Depth=1
	cmpq	%r14, %rcx
	jne	.LBB524_13
# %bb.10:                               # %"$30"
                                        #   in Loop: Header=BB524_3 Depth=1
	movq	8(%rax), %rbx
	movq	(%rbx), %rcx
	testb	$6, %cl
	jne	.LBB524_18
# %bb.11:                               # %"$32"
                                        #   in Loop: Header=BB524_3 Depth=1
	testb	$8, %cl
	jne	.LBB524_17
# %bb.12:                               # %"$34"
                                        #   in Loop: Header=BB524_3 Depth=1
	callq	evList
	movq	%rax, %rcx
	jmp	.LBB524_18
.LBB524_13:                             # %"$29"
                                        #   in Loop: Header=BB524_3 Depth=1
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB524_2
.LBB524_14:                             # %"$14"
                                        #   in Loop: Header=BB524_3 Depth=1
	movq	(%rax), %rax
.LBB524_15:                             # %"$10"
                                        #   in Loop: Header=BB524_3 Depth=1
	cmpq	%rdi, %rax
	je	.LBB524_26
# %bb.16:                               # %"$15"
                                        #   in Loop: Header=BB524_3 Depth=1
	movq	%rax, SymTab+440(%rip)
	movq	%rdi, %rax
	jmp	.LBB524_2
.LBB524_17:                             # %"$35"
                                        #   in Loop: Header=BB524_3 Depth=1
	movq	(%rcx), %rcx
.LBB524_18:                             # %"$31"
                                        #   in Loop: Header=BB524_3 Depth=1
	cmpq	%rdi, %rcx
	movq	%rdi, %rax
	je	.LBB524_2
# %bb.19:                               # %"$37"
	movq	%rcx, SymTab+440(%rip)
	movq	8(%rbx), %rcx
	movq	(%rcx), %rax
	movq	8(%rcx), %rsi
	jmp	.LBB524_23
.LBB524_20:                             # %"$50"
	orq	$1, %rax
.LBB524_21:                             # %"$16"
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq
	.p2align	4, 0x90
.LBB524_22:                             # %"$47"
                                        #   in Loop: Header=BB524_23 Depth=1
	movq	(%rsi), %rax
	movq	8(%rsi), %rsi
.LBB524_23:                             # %"$37"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %sil
	jne	.LBB524_34
# %bb.24:                               # %"$39"
                                        #   in Loop: Header=BB524_23 Depth=1
	testb	$15, %al
	jne	.LBB524_22
# %bb.25:                               # %"$48"
                                        #   in Loop: Header=BB524_23 Depth=1
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB524_22
.LBB524_26:                             # %"$17"
	movq	8(%rbx), %rcx
	movq	(%rcx), %rax
	movq	8(%rcx), %rsi
	jmp	.LBB524_28
	.p2align	4, 0x90
.LBB524_27:                             # %"$27"
                                        #   in Loop: Header=BB524_28 Depth=1
	movq	(%rsi), %rax
	movq	8(%rsi), %rsi
.LBB524_28:                             # %"$17"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %sil
	jne	.LBB524_31
# %bb.29:                               # %"$19"
                                        #   in Loop: Header=BB524_28 Depth=1
	testb	$15, %al
	jne	.LBB524_27
# %bb.30:                               # %"$28"
                                        #   in Loop: Header=BB524_28 Depth=1
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB524_27
.LBB524_31:                             # %"$21"
	testb	$6, %al
	jne	.LBB524_21
# %bb.32:                               # %"$23"
	testb	$8, %al
	jne	.LBB524_33
.LBB524_36:                             # %"$25"
	movq	%rax, %rcx
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	jmp	evList                          # TAILCALL
.LBB524_34:                             # %"$41"
	testb	$6, %al
	jne	.LBB524_21
# %bb.35:                               # %"$43"
	testb	$8, %al
	je	.LBB524_36
.LBB524_33:                             # %"$26"
	movq	(%rax), %rax
	jmp	.LBB524_21
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 loop2;
	.scl	2;
	.type	32;
	.endef
	.globl	loop2                           # -- Begin function loop2
	.p2align	4, 0x90
loop2:                                  # @loop2
.seh_proc loop2
# %bb.0:                                # %"$1"
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %r14
	leaq	SymTab+8(%rip), %rdi
	leaq	SymTab+280(%rip), %r15
.LBB525_1:                              # %"$2"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB525_2 Depth 2
	movq	%r14, %rsi
	jmp	.LBB525_2
.LBB525_31:                             # %"$27"
                                        #   in Loop: Header=BB525_2 Depth=2
	callq	evList
	.p2align	4, 0x90
.LBB525_32:                             # %"$5"
                                        #   in Loop: Header=BB525_2 Depth=2
	movq	8(%rsi), %rsi
	testb	$15, %sil
	jne	.LBB525_1
.LBB525_2:                              # %"$3"
                                        #   Parent Loop BB525_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rsi), %rcx
	testb	$15, %cl
	jne	.LBB525_32
# %bb.3:                                # %"$4"
                                        #   in Loop: Header=BB525_2 Depth=2
	movq	(%rcx), %rax
	cmpq	%rdi, %rax
	jne	.LBB525_18
# %bb.4:                                # %"$8"
                                        #   in Loop: Header=BB525_2 Depth=2
	movq	8(%rcx), %rbx
	movq	(%rbx), %rax
	testb	$6, %al
	jne	.LBB525_8
# %bb.5:                                # %"$10"
                                        #   in Loop: Header=BB525_2 Depth=2
	testb	$8, %al
	jne	.LBB525_6
# %bb.7:                                # %"$12"
                                        #   in Loop: Header=BB525_2 Depth=2
	movq	%rax, %rcx
	callq	evList
.LBB525_8:                              # %"$9"
                                        #   in Loop: Header=BB525_2 Depth=2
	cmpq	%rdi, %rax
	je	.LBB525_9
.LBB525_17:                             # %"$15"
                                        #   in Loop: Header=BB525_2 Depth=2
	movq	%rax, SymTab+440(%rip)
	jmp	.LBB525_32
.LBB525_18:                             # %"$7"
                                        #   in Loop: Header=BB525_2 Depth=2
	cmpq	%r15, %rax
	jne	.LBB525_31
# %bb.19:                               # %"$28"
                                        #   in Loop: Header=BB525_2 Depth=2
	movq	8(%rcx), %rbx
	movq	(%rbx), %rax
	testb	$6, %al
	jne	.LBB525_23
# %bb.20:                               # %"$30"
                                        #   in Loop: Header=BB525_2 Depth=2
	testb	$8, %al
	jne	.LBB525_21
# %bb.22:                               # %"$32"
                                        #   in Loop: Header=BB525_2 Depth=2
	movq	%rax, %rcx
	callq	evList
.LBB525_23:                             # %"$29"
                                        #   in Loop: Header=BB525_2 Depth=2
	cmpq	%rdi, %rax
	je	.LBB525_32
	jmp	.LBB525_24
.LBB525_6:                              # %"$13"
                                        #   in Loop: Header=BB525_2 Depth=2
	movq	(%rax), %rax
	cmpq	%rdi, %rax
	jne	.LBB525_17
	jmp	.LBB525_9
.LBB525_21:                             # %"$33"
                                        #   in Loop: Header=BB525_2 Depth=2
	movq	(%rax), %rax
	cmpq	%rdi, %rax
	je	.LBB525_32
.LBB525_24:                             # %"$34"
	movq	%rax, SymTab+440(%rip)
	movq	8(%rbx), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rsi
	jmp	.LBB525_25
	.p2align	4, 0x90
.LBB525_28:                             # %"$45"
                                        #   in Loop: Header=BB525_25 Depth=1
	movq	(%rsi), %rcx
	movq	8(%rsi), %rsi
.LBB525_25:                             # %"$34"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %sil
	jne	.LBB525_11
# %bb.26:                               # %"$37"
                                        #   in Loop: Header=BB525_25 Depth=1
	testb	$15, %cl
	jne	.LBB525_28
# %bb.27:                               # %"$46"
                                        #   in Loop: Header=BB525_25 Depth=1
	callq	evList
	jmp	.LBB525_28
.LBB525_9:                              # %"$14"
	movq	8(%rbx), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rsi
	jmp	.LBB525_10
	.p2align	4, 0x90
.LBB525_16:                             # %"$25"
                                        #   in Loop: Header=BB525_10 Depth=1
	movq	(%rsi), %rcx
	movq	8(%rsi), %rsi
.LBB525_10:                             # %"$14"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %sil
	jne	.LBB525_11
# %bb.14:                               # %"$17"
                                        #   in Loop: Header=BB525_10 Depth=1
	testb	$15, %cl
	jne	.LBB525_16
# %bb.15:                               # %"$26"
                                        #   in Loop: Header=BB525_10 Depth=1
	callq	evList
	jmp	.LBB525_16
.LBB525_11:                             # %"$19"
	testb	$6, %cl
	jne	.LBB525_30
# %bb.12:                               # %"$21"
	testb	$8, %cl
	jne	.LBB525_29
# %bb.13:                               # %"$23"
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	jmp	evList                          # TAILCALL
.LBB525_29:                             # %"$44"
	movq	(%rcx), %rcx
.LBB525_30:                             # %"$18"
	movq	%rcx, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 extra;
	.scl	2;
	.type	32;
	.endef
	.globl	extra                           # -- Begin function extra
	.p2align	4, 0x90
extra:                                  # @extra
.seh_proc extra
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rdx, %rdi
	.p2align	4, 0x90
.LBB526_1:                              # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rcx), %rbx
	leaq	8(%rbx), %rcx
	testb	$15, (%rbx)
	je	.LBB526_1
# %bb.2:                                # %"$5.preheader"
	movq	$-1, %rsi
	testb	$15, %bl
	jne	.LBB526_15
.LBB526_4:                              # %"$6"
                                        # =>This Inner Loop Header: Depth=1
	cmpq	env+96(%rip), %rbx
	je	.LBB526_5
# %bb.8:                                # %"$9"
                                        #   in Loop: Header=BB526_4 Depth=1
	cmpq	%rsp, ($StkLimit)(%rip)
	ja	.LBB526_16
# %bb.9:                                # %"$18"
                                        #   in Loop: Header=BB526_4 Depth=1
	movq	(%rbx), %rcx
	movq	%rdi, %rdx
	callq	extra
	testq	%rax, %rax
	jg	.LBB526_14
# %bb.10:                               # %"$19"
                                        #   in Loop: Header=BB526_4 Depth=1
	je	.LBB526_11
# %bb.17:                               # %"$21"
                                        #   in Loop: Header=BB526_4 Depth=1
	movq	8(%rbx), %rbx
	testb	$15, %bl
	je	.LBB526_4
	jmp	.LBB526_15
.LBB526_5:                              # %"$11.preheader"
	xorl	%esi, %esi
	.p2align	4, 0x90
.LBB526_6:                              # %"$11"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rbx), %rbx
	testb	$15, %bl
	jne	.LBB526_15
# %bb.7:                                # %"$12"
                                        #   in Loop: Header=BB526_6 Depth=1
	movq	%rbx, ($Ret)(%rip)
	movq	(%rbx), %rcx
	movq	%rdi, %rdx
	callq	method
	testq	%rax, %rax
	je	.LBB526_6
	jmp	.LBB526_14
.LBB526_11:                             # %"$23.preheader"
	xorl	%esi, %esi
	.p2align	4, 0x90
.LBB526_12:                             # %"$23"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rbx), %rbx
	testb	$15, %bl
	jne	.LBB526_15
# %bb.13:                               # %"$24"
                                        #   in Loop: Header=BB526_12 Depth=1
	movq	%rbx, ($Ret)(%rip)
	movq	(%rbx), %rcx
	movq	%rdi, %rdx
	callq	method
	testq	%rax, %rax
	je	.LBB526_12
.LBB526_14:
	movq	%rax, %rsi
.LBB526_15:                             # %"$7"
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
.LBB526_16:                             # %"$17"
	xorl	%ecx, %ecx
	callq	stkErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 method;
	.scl	2;
	.type	32;
	.endef
	.globl	method                          # -- Begin function method
	.p2align	4, 0x90
method:                                 # @method
.seh_proc method
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	(%rcx), %rdi
	testb	$15, %dil
	je	.LBB527_3
.LBB527_1:
	xorl	%eax, %eax
.LBB527_2:                              # %"$9"
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
.LBB527_3:                              # %"$4.preheader"
	movq	%rdx, %rsi
	xorl	%eax, %eax
	.p2align	4, 0x90
.LBB527_4:                              # %"$4"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rcx
	testb	$15, %cl
	jne	.LBB527_7
# %bb.5:                                # %"$5"
                                        #   in Loop: Header=BB527_4 Depth=1
	cmpq	%rsi, (%rcx)
	je	.LBB527_11
# %bb.6:                                # %"$8"
                                        #   in Loop: Header=BB527_4 Depth=1
	movq	8(%rdi), %rdi
	testb	$15, %dil
	je	.LBB527_4
	jmp	.LBB527_2
.LBB527_7:                              # %"$6"
	cmpq	%rsp, ($StkLimit)(%rip)
	ja	.LBB527_12
	.p2align	4, 0x90
.LBB527_8:                              # %"$13"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rdi, ($Ret)(%rip)
	movq	(%rdi), %rcx
	movq	%rsi, %rdx
	callq	method
	testq	%rax, %rax
	jne	.LBB527_2
# %bb.9:                                # %"$15"
                                        #   in Loop: Header=BB527_8 Depth=1
	movq	8(%rdi), %rdi
	testb	$15, %dil
	je	.LBB527_8
	jmp	.LBB527_1
.LBB527_11:                             # %"$7"
	movq	8(%rcx), %rax
	jmp	.LBB527_2
.LBB527_12:                             # %"$11"
	xorl	%ecx, %ecx
	callq	stkErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 isLife;
	.scl	2;
	.type	32;
	.endef
	.globl	isLife                          # -- Begin function isLife
	.p2align	4, 0x90
isLife:                                 # @isLife
.seh_proc isLife
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	-8(%rcx), %rax
	movq	%rax, %rcx
	andq	$-9, %rcx
	testb	$6, %al
	jne	.LBB528_2
	.p2align	4, 0x90
.LBB528_1:                              # %"$3"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rcx
	testb	$6, %cl
	je	.LBB528_1
.LBB528_2:                              # %"$4"
	movl	%ecx, %eax
	shrl	$4, %eax
	andl	$1048575, %eax                  # imm = 0xFFFFF
	movq	%rcx, %rdx
	shrq	$12, %rdx
	andl	$-1048576, %edx                 # imm = 0xFFF00000
	orq	%rax, %rdx
	movq	%rcx, %rax
	shrq	$20, %rax
	movabsq	$4393751543808, %rsi            # imm = 0x3FF00000000
	andq	%rax, %rsi
	orq	%rdx, %rsi
	testq	%rsi, %rsi
	je	.LBB528_10
# %bb.3:                                # %"$5"
	movl	%ecx, %eax
	shrl	$24, %eax
	movq	%rcx, %rdx
	shrq	$36, %rdx
	andl	$65280, %edx                    # imm = 0xFF00
	orl	%eax, %edx
	cmpl	%edx, ($DBs)(%rip)
	jle	.LBB528_12
# %bb.4:                                # %"$9"
	addq	%rcx, %rcx
	movb	$1, %al
	jb	.LBB528_11
# %bb.5:                                # %"$11"
	addq	%rcx, %rcx
	jb	.LBB528_11
# %bb.6:                                # %"$13"
	movq	($DbFiles)(%rip), %rcx
	movl	%edx, %eax
	imulq	$42, %rax, %rdx
	leaq	(%rcx,%rdx), %rbx
	movq	%rbx, ($DbFile)(%rip)
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movl	(%rcx,%rdx), %ecx
	subq	$32, %rsp
	movl	$6, %r8d
	movl	$6, %r9d
	movq	%rdi, %rdx
	callq	pread
	addq	$32, %rsp
	cmpq	$6, %rax
	jne	.LBB528_16
# %bb.7:                                # %blkPeek.exit5
	shlq	$6, %rsi
	movzwl	4(%rdi), %eax
	movd	%eax, %xmm0
	pxor	%xmm1, %xmm1
	punpcklbw	%xmm1, %xmm0            # xmm0 = xmm0[0],xmm1[0],xmm0[1],xmm1[1],xmm0[2],xmm1[2],xmm0[3],xmm1[3],xmm0[4],xmm1[4],xmm0[5],xmm1[5],xmm0[6],xmm1[6],xmm0[7],xmm1[7]
	punpcklwd	%xmm1, %xmm0            # xmm0 = xmm0[0],xmm1[0],xmm0[1],xmm1[1],xmm0[2],xmm1[2],xmm0[3],xmm1[3]
	punpckldq	%xmm1, %xmm0            # xmm0 = xmm0[0],xmm1[0],xmm0[1],xmm1[1]
	movdqa	%xmm0, %xmm2
	psllq	$8, %xmm2
	psllq	$16, %xmm0
	pshufd	$78, %xmm0, %xmm0               # xmm0 = xmm0[2,3,0,1]
	por	%xmm2, %xmm0
	movq	%xmm0, %rax
	movzbl	3(%rdi), %ecx
	orq	%rax, %rcx
	movzwl	1(%rdi), %eax
	movd	%eax, %xmm0
	punpcklbw	%xmm1, %xmm0            # xmm0 = xmm0[0],xmm1[0],xmm0[1],xmm1[1],xmm0[2],xmm1[2],xmm0[3],xmm1[3],xmm0[4],xmm1[4],xmm0[5],xmm1[5],xmm0[6],xmm1[6],xmm0[7],xmm1[7]
	punpcklwd	%xmm1, %xmm0            # xmm0 = xmm0[0],xmm1[0],xmm0[1],xmm1[1],xmm0[2],xmm1[2],xmm0[3],xmm1[3]
	punpckldq	%xmm1, %xmm0            # xmm0 = xmm0[0],xmm1[0],xmm0[1],xmm1[1]
	shlq	$24, %rcx
	movdqa	%xmm0, %xmm1
	psllq	$8, %xmm1
	psllq	$16, %xmm0
	pshufd	$78, %xmm0, %xmm0               # xmm0 = xmm0[2,3,0,1]
	por	%xmm1, %xmm0
	movq	%xmm0, %rax
	movzbl	(%rdi), %edx
	orq	%rcx, %rdx
	orq	%rax, %rdx
	cmpq	%rsi, %rdx
	jbe	.LBB528_10
# %bb.8:                                # %"$14"
	movb	8(%rbx), %cl
	shlq	%cl, %rsi
	movq	($DbFile)(%rip), %rax
	movl	(%rax), %ecx
	subq	$32, %rsp
	movl	$6, %r8d
	movq	%rdi, %rdx
	movq	%rsi, %r9
	callq	pread
	addq	$32, %rsp
	cmpq	$6, %rax
	jne	.LBB528_16
# %bb.9:                                # %blkPeek.exit
	movb	(%rdi), %al
	andb	$63, %al
	cmpb	$1, %al
	jmp	.LBB528_13
.LBB528_10:
	xorl	%eax, %eax
.LBB528_11:                             # %"$10"
                                        # kill: def $al killed $al killed $eax
	jmp	.LBB528_14
.LBB528_12:                             # %"$8"
	testb	$15, SymTab+536(%rip)
.LBB528_13:                             # %"$10"
	sete	%al
.LBB528_14:                             # %"$10"
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%rbp
	retq
.LBB528_16:                             # %"$2.i4"
	subq	$32, %rsp
	callq	dbRdErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 evMethod;
	.scl	2;
	.type	32;
	.endef
	.globl	evMethod                        # -- Begin function evMethod
	.p2align	4, 0x90
evMethod:                               # @evMethod
.seh_proc evMethod
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$88, %rsp
	.seh_stackalloc 88
	leaq	80(%rsp), %rbp
	.seh_setframe %rbp, 80
	.seh_endprologue
	movq	%r8, -16(%rbp)                  # 8-byte Spill
	movq	%rdx, -8(%rbp)                  # 8-byte Spill
	movq	112(%rbp), %r8
	movq	(%r9), %r14
	leaq	SymTab+440(%rip), %rbx
	movq	SymTab+440(%rip), %rax
	movq	env+8(%rip), %rdx
	movq	%rax, -80(%rbp)
	movq	%rbx, -72(%rbp)
	movq	%rdx, -64(%rbp)
	movq	%r9, (%rbp)                     # 8-byte Spill
	movq	%r9, -56(%rbp)
	leaq	-48(%rbp), %r13
	movq	%rcx, -48(%rbp)
	leaq	SymTab+488(%rip), %rax
	movq	%rax, -40(%rbp)
	leaq	-80(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	%r13, env+8(%rip)
	testb	$15, %r14b
	je	.LBB529_1
.LBB529_25:                             # %"$4"
	leaq	SymTab+440(%rip), %r12
	cmpq	%r12, %r14
	jne	.LBB529_64
# %bb.26:                               # %"$39"
	testb	$15, %r8b
	je	.LBB529_27
# %bb.51:                               # %"$43"
	movq	env+88(%rip), %r14
	leaq	SymTab+8(%rip), %rax
	movq	%rax, env+88(%rip)
	.p2align	4, 0x90
.LBB529_53:                             # %"$73"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rax
	movq	8(%r13), %rcx
	movq	(%rcx), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, (%r13)
	cmpq	%r12, %rcx
	je	.LBB529_54
# %bb.52:                               # %"$73"
                                        #   in Loop: Header=BB529_53 Depth=1
	movq	16(%r13), %r13
	jmp	.LBB529_53
.LBB529_64:                             # %"$40"
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %r14
	je	.LBB529_70
# %bb.65:                               # %"$86"
	testb	$6, %r14b
	jne	.LBB529_88
# %bb.66:                               # %"$89"
	cmpq	%rax, %r14
	jb	.LBB529_68
# %bb.67:                               # %"$89"
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, %r14
	jbe	.LBB529_89
.LBB529_68:                             # %"$93"
	movq	(%r14), %rcx
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rcx, (%rax)
	movq	%rax, %rcx
	orq	$8, %rcx
	movq	%r14, (%rcx)
	movq	%r13, 16(%rax)
	movq	%rax, env+8(%rip)
	movq	%r8, (%r14)
	jmp	.LBB529_70
	.p2align	4, 0x90
.LBB529_69:                             # %"$95"
                                        #   in Loop: Header=BB529_70 Depth=1
	movq	16(%r13), %r13
.LBB529_70:                             # %"$95"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rax
	movq	8(%r13), %rcx
	movq	(%rcx), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, (%r13)
	cmpq	%r12, %rcx
	jne	.LBB529_69
# %bb.71:                               # %"$96"
	movq	env+96(%rip), %rsi
	movq	env+104(%rip), %rdi
	movq	-8(%rbp), %rax                  # 8-byte Reload
	movq	%rax, env+96(%rip)
	movq	-16(%rbp), %rax                 # 8-byte Reload
	movq	%rax, env+104(%rip)
	movq	(%rbp), %rax                    # 8-byte Reload
	movq	8(%rax), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	jmp	.LBB529_72
	.p2align	4, 0x90
.LBB529_78:                             # %"$106"
                                        #   in Loop: Header=BB529_72 Depth=1
	movq	(%rbx), %rcx
	movq	8(%rbx), %rbx
.LBB529_72:                             # %"$96"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %bl
	jne	.LBB529_73
# %bb.76:                               # %"$98"
                                        #   in Loop: Header=BB529_72 Depth=1
	testb	$15, %cl
	jne	.LBB529_78
# %bb.77:                               # %"$107"
                                        #   in Loop: Header=BB529_72 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	jmp	.LBB529_78
.LBB529_73:                             # %"$100"
	testb	$6, %cl
	jne	.LBB529_80
# %bb.74:                               # %"$102"
	testb	$8, %cl
	jne	.LBB529_75
# %bb.79:                               # %"$104"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB529_80
.LBB529_1:                              # %"$3.preheader"
	leaq	-48(%rbp), %r13
	leaq	SymTab+8(%rip), %r15
	leaq	SymTab+280(%rip), %r12
	jmp	.LBB529_2
	.p2align	4, 0x90
.LBB529_10:                             # %"$18"
                                        #   in Loop: Header=BB529_2 Depth=1
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rcx, (%rax)
.LBB529_23:                             # %"$12.sink.split"
                                        #   in Loop: Header=BB529_2 Depth=1
	movq	%rax, %rcx
	orq	$8, %rcx
	movq	%rdx, (%rcx)
	movq	%r13, 16(%rax)
	movq	%rax, env+8(%rip)
	movq	%rax, %r13
.LBB529_24:                             # %"$12"
                                        #   in Loop: Header=BB529_2 Depth=1
	testb	$15, %r14b
	jne	.LBB529_25
.LBB529_2:                              # %"$3"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB529_11 Depth 2
	movq	(%r8), %rcx
	movq	8(%r8), %r8
	testb	$6, %cl
	jne	.LBB529_6
# %bb.3:                                # %"$6"
                                        #   in Loop: Header=BB529_2 Depth=1
	testb	$8, %cl
	jne	.LBB529_4
# %bb.5:                                # %"$8"
                                        #   in Loop: Header=BB529_2 Depth=1
	subq	$32, %rsp
	movq	%r8, %rsi
	callq	evList
	movq	%rsi, %r8
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB529_6
.LBB529_4:                              # %"$9"
                                        #   in Loop: Header=BB529_2 Depth=1
	movq	(%rcx), %rcx
	.p2align	4, 0x90
.LBB529_6:                              # %"$5"
                                        #   in Loop: Header=BB529_2 Depth=1
	movq	(%r14), %rdx
	movq	8(%r14), %r14
	testb	$15, %dl
	je	.LBB529_11
# %bb.7:                                # %"$10"
                                        #   in Loop: Header=BB529_2 Depth=1
	testb	$6, %dl
	jne	.LBB529_84
# %bb.8:                                # %"$14"
                                        #   in Loop: Header=BB529_2 Depth=1
	cmpq	%r15, %rdx
	jb	.LBB529_10
# %bb.9:                                # %"$14"
                                        #   in Loop: Header=BB529_2 Depth=1
	cmpq	%r12, %rdx
	ja	.LBB529_10
	jmp	.LBB529_85
	.p2align	4, 0x90
.LBB529_17:                             # %"$28"
                                        #   in Loop: Header=BB529_11 Depth=2
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rdi, (%rsi)
	movq	%rsi, %rax
	orq	$8, %rax
	movq	%rbx, (%rax)
	movq	%r13, 16(%rsi)
	movq	%rsi, env+8(%rip)
	testb	$15, %dl
	movq	%rsi, %r13
	jne	.LBB529_18
.LBB529_11:                             # %"$19"
                                        #   Parent Loop BB529_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	testb	$15, %cl
	je	.LBB529_13
# %bb.12:                               #   in Loop: Header=BB529_11 Depth=2
	movq	%r15, %rdi
	jmp	.LBB529_14
	.p2align	4, 0x90
.LBB529_13:                             # %"$20"
                                        #   in Loop: Header=BB529_11 Depth=2
	movq	(%rcx), %rdi
	movq	8(%rcx), %rcx
.LBB529_14:                             # %"$22"
                                        #   in Loop: Header=BB529_11 Depth=2
	movq	(%rdx), %rbx
	testb	$6, %bl
	jne	.LBB529_86
# %bb.15:                               # %"$24"
                                        #   in Loop: Header=BB529_11 Depth=2
	movq	8(%rdx), %rdx
	cmpq	%r15, %rbx
	jb	.LBB529_17
# %bb.16:                               # %"$24"
                                        #   in Loop: Header=BB529_11 Depth=2
	cmpq	%r12, %rbx
	ja	.LBB529_17
	jmp	.LBB529_87
	.p2align	4, 0x90
.LBB529_18:                             # %"$30"
                                        #   in Loop: Header=BB529_2 Depth=1
	cmpq	%r15, %rdx
	movq	%rsi, %r13
	je	.LBB529_24
# %bb.19:                               # %"$31"
                                        #   in Loop: Header=BB529_2 Depth=1
	testb	$6, %dl
	jne	.LBB529_84
# %bb.20:                               # %"$34"
                                        #   in Loop: Header=BB529_2 Depth=1
	cmpq	%r15, %rdx
	jb	.LBB529_22
# %bb.21:                               # %"$34"
                                        #   in Loop: Header=BB529_2 Depth=1
	cmpq	%r12, %rdx
	jbe	.LBB529_85
.LBB529_22:                             # %"$38"
                                        #   in Loop: Header=BB529_2 Depth=1
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rcx, (%rax)
	movq	%rsi, %r13
	jmp	.LBB529_23
.LBB529_54:                             # %"$74"
	movq	env+96(%rip), %rsi
	movq	env+104(%rip), %rbx
	movq	-8(%rbp), %rax                  # 8-byte Reload
	movq	%rax, env+96(%rip)
	movq	-16(%rbp), %rax                 # 8-byte Reload
	movq	%rax, env+104(%rip)
	movq	(%rbp), %rax                    # 8-byte Reload
	movq	8(%rax), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rdi
	jmp	.LBB529_55
	.p2align	4, 0x90
.LBB529_61:                             # %"$84"
                                        #   in Loop: Header=BB529_55 Depth=1
	movq	(%rdi), %rcx
	movq	8(%rdi), %rdi
.LBB529_55:                             # %"$74"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %dil
	jne	.LBB529_56
# %bb.59:                               # %"$76"
                                        #   in Loop: Header=BB529_55 Depth=1
	testb	$15, %cl
	jne	.LBB529_61
# %bb.60:                               # %"$85"
                                        #   in Loop: Header=BB529_55 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	jmp	.LBB529_61
.LBB529_56:                             # %"$78"
	testb	$6, %cl
	jne	.LBB529_63
# %bb.57:                               # %"$80"
	testb	$8, %cl
	jne	.LBB529_58
# %bb.62:                               # %"$82"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB529_63
.LBB529_27:                             # %"$42"
	movq	(%r8), %rcx
	testb	$6, %cl
	jne	.LBB529_31
# %bb.28:                               # %"$46"
	testb	$8, %cl
	jne	.LBB529_29
# %bb.30:                               # %"$48"
	subq	$32, %rsp
	movq	%r8, %rsi
	callq	evList
	movq	%rsi, %r8
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB529_31
.LBB529_75:                             # %"$105"
	movq	(%rcx), %rcx
.LBB529_80:                             # %"$99"
	movq	%rdi, env+104(%rip)
	movq	%rsi, env+96(%rip)
	jmp	.LBB529_81
.LBB529_58:                             # %"$83"
	movq	(%rcx), %rcx
.LBB529_63:                             # %"$77"
	movq	%rbx, env+104(%rip)
	movq	%rsi, env+96(%rip)
	movq	%r14, env+88(%rip)
	jmp	.LBB529_81
.LBB529_29:                             # %"$49"
	movq	(%rcx), %rcx
.LBB529_31:                             # %"$45"
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rdi, %r15
	orq	$8, %r15
	movq	%rcx, (%r15)
	movq	env(%rip), %rax
	movq	%rax, 8(%r15)
	movq	%r15, env(%rip)
	movq	8(%r8), %rbx
	testb	$15, %bl
	movq	%rdi, %rax
	je	.LBB529_32
.LBB529_38:                             # %"$52"
	movq	env+88(%rip), %r14
	leaq	SymTab+8(%rip), %rcx
	movq	%rcx, (%rax)
	movq	%rdi, env+88(%rip)
	.p2align	4, 0x90
.LBB529_40:                             # %"$59"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rax
	movq	8(%r13), %rcx
	movq	(%rcx), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, (%r13)
	cmpq	%r12, %rcx
	je	.LBB529_41
# %bb.39:                               # %"$59"
                                        #   in Loop: Header=BB529_40 Depth=1
	movq	16(%r13), %r13
	jmp	.LBB529_40
.LBB529_41:                             # %"$60"
	movq	env+96(%rip), %rsi
	movq	env+104(%rip), %rdi
	movq	-8(%rbp), %rax                  # 8-byte Reload
	movq	%rax, env+96(%rip)
	movq	-16(%rbp), %rax                 # 8-byte Reload
	movq	%rax, env+104(%rip)
	movq	(%rbp), %rax                    # 8-byte Reload
	movq	8(%rax), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	jmp	.LBB529_42
	.p2align	4, 0x90
.LBB529_48:                             # %"$70"
                                        #   in Loop: Header=BB529_42 Depth=1
	movq	(%rbx), %rcx
	movq	8(%rbx), %rbx
.LBB529_42:                             # %"$60"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %bl
	jne	.LBB529_43
# %bb.46:                               # %"$62"
                                        #   in Loop: Header=BB529_42 Depth=1
	testb	$15, %cl
	jne	.LBB529_48
# %bb.47:                               # %"$71"
                                        #   in Loop: Header=BB529_42 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	jmp	.LBB529_48
.LBB529_43:                             # %"$64"
	testb	$6, %cl
	jne	.LBB529_50
# %bb.44:                               # %"$66"
	testb	$8, %cl
	jne	.LBB529_45
# %bb.49:                               # %"$68"
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	jmp	.LBB529_50
.LBB529_32:                             # %"$51.preheader"
	movq	%rdi, %rsi
	jmp	.LBB529_33
.LBB529_36:                             # %"$56"
                                        #   in Loop: Header=BB529_33 Depth=1
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	%rax, %rcx
	.p2align	4, 0x90
.LBB529_37:                             # %"$53"
                                        #   in Loop: Header=BB529_33 Depth=1
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%rcx, (%rdx)
	movq	%rax, (%rsi)
	movq	env(%rip), %rcx
	movq	%rcx, 8(%rdx)
	movq	%rdx, env(%rip)
	movq	8(%rbx), %rbx
	testb	$15, %bl
	movq	%rax, %rsi
	jne	.LBB529_38
.LBB529_33:                             # %"$51"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rbx), %rcx
	testb	$6, %cl
	jne	.LBB529_37
# %bb.34:                               # %"$54"
                                        #   in Loop: Header=BB529_33 Depth=1
	testb	$8, %cl
	je	.LBB529_36
# %bb.35:                               # %"$57"
                                        #   in Loop: Header=BB529_33 Depth=1
	movq	(%rcx), %rcx
	jmp	.LBB529_37
.LBB529_45:                             # %"$69"
	movq	(%rcx), %rcx
.LBB529_50:                             # %"$63"
	movq	%rdi, env+104(%rip)
	movq	%rsi, env+96(%rip)
	movq	%r14, env+88(%rip)
	movq	8(%r15), %rax
	movq	%rax, env(%rip)
.LBB529_81:                             # %"$41"
	leaq	env+8(%rip), %rax
	.p2align	4, 0x90
.LBB529_82:                             # %"$108"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rax), %rax
	movq	(%rax), %rdx
	movq	8(%rax), %rbx
	movq	%rdx, (%rbx)
	addq	$16, %rax
	cmpq	%r12, %rbx
	jne	.LBB529_82
# %bb.83:                               # %"$110"
	movq	(%rax), %rax
	movq	%rax, env+8(%rip)
	movq	%rcx, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB529_86:                             # %"$23"
	subq	$32, %rsp
	movq	(%rbp), %rcx                    # 8-byte Reload
	movq	%rbx, %rdx
	callq	varErr
.LBB529_87:                             # %"$27"
	subq	$32, %rsp
	movq	(%rbp), %rcx                    # 8-byte Reload
	movq	%rbx, %rdx
	callq	protErr
.LBB529_84:                             # %"$13"
	subq	$32, %rsp
	movq	(%rbp), %rcx                    # 8-byte Reload
	callq	varErr
.LBB529_85:                             # %"$17"
	subq	$32, %rsp
	movq	(%rbp), %rcx                    # 8-byte Reload
	callq	protErr
.LBB529_88:                             # %"$88"
	subq	$32, %rsp
	movq	(%rbp), %rcx                    # 8-byte Reload
	movq	%r14, %rdx
	callq	varErr
.LBB529_89:                             # %"$92"
	subq	$32, %rsp
	movq	(%rbp), %rcx                    # 8-byte Reload
	movq	%r14, %rdx
	callq	protErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 symErr;
	.scl	2;
	.type	32;
	.endef
	.globl	symErr                          # -- Begin function symErr
	.p2align	4, 0x90
symErr:                                 # @symErr
.seh_proc symErr
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	leaq	.L$11(%rip), %r8
	xorl	%r9d, %r9d
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 isa;
	.scl	2;
	.type	32;
	.endef
	.globl	isa                             # -- Begin function isa
	.p2align	4, 0x90
isa:                                    # @isa
.seh_proc isa
# %bb.0:                                # %"$1"
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rcx, %r14
	movq	(%rdx), %rsi
	movq	%rsi, %rbx
	.p2align	4, 0x90
.LBB531_1:                              # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %bl
	jne	.LBB531_10
# %bb.2:                                # %"$3"
                                        #   in Loop: Header=BB531_1 Depth=1
	testb	$15, (%rbx)
	jne	.LBB531_3
# %bb.9:                                # %"$6"
                                        #   in Loop: Header=BB531_1 Depth=1
	movq	8(%rbx), %rbx
	cmpq	%rbx, %rsi
	jne	.LBB531_1
.LBB531_10:
	xorl	%edi, %edi
.LBB531_11:                             # %"$4"
	movl	%edi, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq
.LBB531_3:                              # %"$7"
	cmpq	%rsp, ($StkLimit)(%rip)
	ja	.LBB531_12
	.p2align	4, 0x90
.LBB531_4:                              # %"$10"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rbx), %rdx
	movl	%edx, %eax
	andl	$14, %eax
	cmpl	$8, %eax
	jne	.LBB531_10
# %bb.5:                                # %"$11"
                                        #   in Loop: Header=BB531_4 Depth=1
	movb	$1, %dil
	cmpq	%r14, %rdx
	je	.LBB531_11
# %bb.6:                                # %"$14"
                                        #   in Loop: Header=BB531_4 Depth=1
	movq	%r14, %rcx
	callq	isa
	testb	$1, %al
	jne	.LBB531_11
# %bb.7:                                # %"$16"
                                        #   in Loop: Header=BB531_4 Depth=1
	movq	8(%rbx), %rbx
	xorl	%edi, %edi
	cmpq	%rbx, %rsi
	je	.LBB531_11
# %bb.8:                                # %"$16"
                                        #   in Loop: Header=BB531_4 Depth=1
	movl	%ebx, %eax
	andl	$15, %eax
	testq	%rax, %rax
	je	.LBB531_4
	jmp	.LBB531_11
.LBB531_12:                             # %"$8"
	xorl	%ecx, %ecx
	callq	stkErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 newId;
	.scl	2;
	.type	32;
	.endef
	.globl	newId                           # -- Begin function newId
	.p2align	4, 0x90
newId:                                  # @newId
.seh_proc newId
# %bb.0:                                # %"$1"
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	decl	%edx
	cmpl	($DBs)(%rip), %edx
	jge	.LBB532_15
# %bb.1:                                # %"$3"
	movq	($DbFiles)(%rip), %rax
	imull	$42, %edx, %ecx
	movslq	%ecx, %rcx
	addq	%rax, %rcx
	movq	%rcx, ($DbFile)(%rip)
	incl	env+128(%rip)
	leaq	SymTab+280(%rip), %r14
	cmpq	%r14, SymTab+424(%rip)
	jne	.LBB532_2
.LBB532_6:                              # %wrLockDb.exit
	movq	($DbJnl)(%rip), %rcx
	testq	%rcx, %rcx
	je	.LBB532_10
# %bb.7:                                # %"$4"
	callq	fileno
	movl	%eax, %esi
	.p2align	4, 0x90
.LBB532_8:                              # %"$2.i.i3"
                                        # =>This Inner Loop Header: Depth=1
	movl	%esi, %ecx
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	movb	$1, %r9b
	callq	wrLock
	testl	%eax, %eax
	jns	.LBB532_10
# %bb.9:                                # %"$3.i.i4"
                                        #   in Loop: Header=BB532_8 Depth=1
	callq	gErrno
	cmpl	$2, %eax
	je	.LBB532_8
	jmp	.LBB532_5
.LBB532_10:                             # %"$5"
	movq	($DbFile)(%rip), %rax
	movl	4(%rax), %ebx
	callq	newBlock
	movq	%rax, %rsi
	movq	($DbJnl)(%rip), %rdi
	testq	%rdi, %rdi
	je	.LBB532_12
# %bb.11:                               # %"$6"
	movq	%rdi, %rcx
	callq	fflush
	movq	%rdi, %rcx
	callq	fileno
	movl	%eax, %ecx
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	callq	unLock
.LBB532_12:                             # %"$7"
	movq	%rsi, %rdi
	shrq	$6, %rdi
	cmpq	%r14, SymTab+424(%rip)
	je	.LBB532_14
# %bb.13:                               # %"$2.i6"
	movq	($DbFiles)(%rip), %rax
	movl	(%rax), %ecx
	movl	$1, %r8d
	xorl	%edx, %edx
	callq	unLock
.LBB532_14:                             # %unLockDb.exit
	shlq	$10, %rsi
	movabsq	$1152640029630136320, %rax      # imm = 0xFFF000000000000
	andq	%rsi, %rax
	movl	%edi, %ecx
	andl	$1048575, %ecx                  # imm = 0xFFFFF
	orq	%rax, %rcx
	movl	%ebx, %edx
	andl	$268435200, %edx                # imm = 0xFFFFF00
	shlq	$32, %rdx
	orq	%rcx, %rdx
	andl	$-1048576, %edi                 # imm = 0xFFF00000
	shlq	$8, %rdi
	movzbl	%bl, %eax
	shll	$20, %eax
	orq	%rdx, %rax
	orq	%rdi, %rax
	shlq	$4, %rax
	orq	$2, %rax
	decl	env+128(%rip)
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq
.LBB532_2:                              # %"$2.i"
	movl	(%rax), %esi
	.p2align	4, 0x90
.LBB532_3:                              # %"$2.i.i"
                                        # =>This Inner Loop Header: Depth=1
	movl	$1, %r8d
	movl	%esi, %ecx
	xorl	%edx, %edx
	movb	$1, %r9b
	callq	wrLock
	testl	%eax, %eax
	jns	.LBB532_6
# %bb.4:                                # %"$3.i.i"
                                        #   in Loop: Header=BB532_3 Depth=1
	callq	gErrno
	cmpl	$2, %eax
	je	.LBB532_3
.LBB532_5:                              # %"$5.i.i"
	callq	lockErr
.LBB532_15:                             # %"$2"
	callq	dbfErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 put;
	.scl	2;
	.type	32;
	.endef
	.globl	put                             # -- Begin function put
	.p2align	4, 0x90
put:                                    # @put
.seh_proc put
# %bb.0:                                # %"$1"
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %r15
	movq	-8(%rcx), %rdi
	testb	$6, %dil
	je	.LBB533_1
.LBB533_30:                             # %"$3"
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %r8
	je	.LBB533_7
# %bb.31:                               # %"$54"
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, %r8
	je	.LBB533_33
# %bb.32:                               # %"$57"
	movq	%r8, %rcx
	callq	cons
	movq	%rax, %rdx
.LBB533_33:                             # %"$58"
	testb	$8, %dil
	jne	.LBB533_34
# %bb.35:                               # %"$60"
	movq	%rdx, %rcx
	movq	%rdi, %rdx
	callq	cons
	movq	%rax, -8(%r15)
	jmp	.LBB533_7
.LBB533_1:                              # %"$2"
	movq	%rdi, %r14
	andq	$-9, %r14
	movq	(%r14), %rax
	testb	$15, %al
	je	.LBB533_8
# %bb.2:                                # %"$4"
	cmpq	%rdx, %rax
	jne	.LBB533_13
# %bb.3:                                # %"$7"
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %r8
	je	.LBB533_4
# %bb.5:                                # %"$10"
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, %r8
	je	.LBB533_7
# %bb.6:                                # %"$16"
	movq	%r8, %rcx
	callq	cons
	movq	%rax, (%r14)
	jmp	.LBB533_7
.LBB533_34:                             # %"$59"
	andq	$-9, %rdi
	movq	%rdx, %rcx
	movq	%rdi, %rdx
	callq	cons
	orq	$8, %rax
	movq	%rax, -8(%r15)
	jmp	.LBB533_7
.LBB533_8:                              # %"$5"
	cmpq	%rdx, 8(%rax)
	jne	.LBB533_13
# %bb.9:                                # %"$17"
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %r8
	jne	.LBB533_10
.LBB533_4:                              # %"$11"
	andl	$8, %edi
	orq	8(%r14), %rdi
	movq	%rdi, -8(%r15)
.LBB533_7:                              # %"$9"
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	retq
.LBB533_13:                             # %"$6"
	movq	8(%r14), %rsi
	testb	$15, %sil
	jne	.LBB533_30
# %bb.14:                               # %"$28.preheader"
	leaq	8(%r14), %rbx
	jmp	.LBB533_15
	.p2align	4, 0x90
.LBB533_23:                             # %"$31"
                                        #   in Loop: Header=BB533_15 Depth=1
	cmpq	%rdx, 8(%rax)
	je	.LBB533_24
.LBB533_29:                             # %"$32"
                                        #   in Loop: Header=BB533_15 Depth=1
	movq	%rsi, %rbx
	movq	8(%rsi), %rsi
	addq	$8, %rbx
	testb	$15, %sil
	jne	.LBB533_30
.LBB533_15:                             # %"$28"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rax
	testb	$15, %al
	je	.LBB533_23
# %bb.16:                               # %"$30"
                                        #   in Loop: Header=BB533_15 Depth=1
	cmpq	%rdx, %rax
	jne	.LBB533_29
# %bb.17:                               # %"$33"
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %r8
	je	.LBB533_18
# %bb.19:                               # %"$36"
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, %r8
	je	.LBB533_21
# %bb.20:                               # %"$38"
	movq	%r8, %rcx
	callq	cons
	movq	%rax, (%rsi)
	jmp	.LBB533_21
.LBB533_10:                             # %"$20"
	leaq	SymTab+280(%rip), %rcx
	cmpq	%rcx, %r8
	jne	.LBB533_12
# %bb.11:                               # %"$26"
	movq	%rdx, (%r14)
	jmp	.LBB533_7
.LBB533_12:                             # %"$25"
	movq	%r8, (%rax)
	jmp	.LBB533_7
.LBB533_24:                             # %"$43"
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %r8
	jne	.LBB533_25
.LBB533_18:                             # %"$35"
	movq	8(%rsi), %rax
	movq	%rax, (%rbx)
	jmp	.LBB533_7
.LBB533_25:                             # %"$46"
	leaq	SymTab+280(%rip), %rcx
	cmpq	%rcx, %r8
	jne	.LBB533_27
# %bb.26:                               # %"$48"
	movq	%rdx, (%rsi)
	jmp	.LBB533_21
.LBB533_27:                             # %"$49"
	movq	%r8, (%rax)
.LBB533_21:                             # %"$39"
	movq	8(%rsi), %rax
	movq	%rax, (%rbx)
	testb	$8, %dil
	jne	.LBB533_28
# %bb.22:                               # %"$40"
	movq	%rdi, 8(%rsi)
	movq	%rsi, -8(%r15)
	jmp	.LBB533_7
.LBB533_28:                             # %"$41"
	movq	%r14, 8(%rsi)
	orq	$8, %rsi
	movq	%rsi, -8(%r15)
	jmp	.LBB533_7
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 newBlock;
	.scl	2;
	.type	32;
	.endef
	.globl	newBlock                        # -- Begin function newBlock
	.p2align	4, 0x90
newBlock:                               # @newBlock
.seh_proc newBlock
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	($DbFile)(%rip), %r14
	movl	12(%r14), %ebx
	leaq	15(%rbx), %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movl	(%r14), %ecx
	subq	$32, %rsp
	movl	$12, %r8d
	movq	%rsi, %rdx
	xorl	%r9d, %r9d
	callq	pread
	addq	$32, %rsp
	cmpq	$12, %rax
	jne	.LBB534_8
# %bb.1:                                # %blkPeek.exit
	movzwl	4(%rsi), %eax
	movd	%eax, %xmm1
	pxor	%xmm0, %xmm0
	punpcklbw	%xmm0, %xmm1            # xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1],xmm1[2],xmm0[2],xmm1[3],xmm0[3],xmm1[4],xmm0[4],xmm1[5],xmm0[5],xmm1[6],xmm0[6],xmm1[7],xmm0[7]
	punpcklwd	%xmm0, %xmm1            # xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1],xmm1[2],xmm0[2],xmm1[3],xmm0[3]
	punpckldq	%xmm0, %xmm1            # xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1]
	movdqa	%xmm1, %xmm2
	psllq	$8, %xmm2
	psllq	$16, %xmm1
	pshufd	$78, %xmm1, %xmm1               # xmm1 = xmm1[2,3,0,1]
	por	%xmm2, %xmm1
	movq	%xmm1, %rax
	movzbl	3(%rsi), %ecx
	orq	%rax, %rcx
	movzwl	1(%rsi), %eax
	movd	%eax, %xmm1
	punpcklbw	%xmm0, %xmm1            # xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1],xmm1[2],xmm0[2],xmm1[3],xmm0[3],xmm1[4],xmm0[4],xmm1[5],xmm0[5],xmm1[6],xmm0[6],xmm1[7],xmm0[7]
	punpcklwd	%xmm0, %xmm1            # xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1],xmm1[2],xmm0[2],xmm1[3],xmm0[3]
	punpckldq	%xmm0, %xmm1            # xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1]
	shlq	$24, %rcx
	movdqa	%xmm1, %xmm2
	psllq	$8, %xmm2
	psllq	$16, %xmm1
	pshufd	$78, %xmm1, %xmm1               # xmm1 = xmm1[2,3,0,1]
	por	%xmm2, %xmm1
	movq	%xmm1, %rax
	orq	%rcx, %rax
	movzbl	(%rsi), %edi
	orq	%rax, %rdi
	je	.LBB534_5
# %bb.2:                                # %"$4"
	cmpq	$0, 32(%r14)
	je	.LBB534_5
# %bb.3:                                # %"$6"
	movb	8(%r14), %cl
	movq	%rdi, %r9
	shlq	%cl, %r9
	movq	($DbFile)(%rip), %rax
	movl	(%rax), %ecx
	subq	$32, %rsp
	movl	$6, %r8d
	movq	%rsi, %rdx
	callq	pread
	addq	$32, %rsp
	cmpq	$6, %rax
	jne	.LBB534_8
# %bb.4:                                # %blkPeek.exit2
	decq	32(%r14)
	jmp	.LBB534_7
.LBB534_5:                              # %"$5"
	movzwl	10(%rsi), %eax
	movd	%eax, %xmm1
	punpcklbw	%xmm0, %xmm1            # xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1],xmm1[2],xmm0[2],xmm1[3],xmm0[3],xmm1[4],xmm0[4],xmm1[5],xmm0[5],xmm1[6],xmm0[6],xmm1[7],xmm0[7]
	punpcklwd	%xmm0, %xmm1            # xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1],xmm1[2],xmm0[2],xmm1[3],xmm0[3]
	punpckldq	%xmm0, %xmm1            # xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1]
	movdqa	%xmm1, %xmm2
	psllq	$8, %xmm2
	psllq	$16, %xmm1
	pshufd	$78, %xmm1, %xmm1               # xmm1 = xmm1[2,3,0,1]
	por	%xmm2, %xmm1
	movq	%xmm1, %rax
	movzbl	9(%rsi), %ecx
	orq	%rax, %rcx
	movzwl	7(%rsi), %eax
	movd	%eax, %xmm1
	punpcklbw	%xmm0, %xmm1            # xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1],xmm1[2],xmm0[2],xmm1[3],xmm0[3],xmm1[4],xmm0[4],xmm1[5],xmm0[5],xmm1[6],xmm0[6],xmm1[7],xmm0[7]
	punpcklwd	%xmm0, %xmm1            # xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1],xmm1[2],xmm0[2],xmm1[3],xmm0[3]
	punpckldq	%xmm0, %xmm1            # xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1]
	shlq	$24, %rcx
	movdqa	%xmm1, %xmm0
	psllq	$8, %xmm0
	psllq	$16, %xmm1
	pshufd	$78, %xmm1, %xmm1               # xmm1 = xmm1[2,3,0,1]
	por	%xmm0, %xmm1
	movq	%xmm1, %rax
	movzbl	6(%rsi), %edi
	orq	%rcx, %rdi
	orq	%rax, %rdi
	movabsq	$281474976710592, %rax          # imm = 0xFFFFFFFFFFC0
	cmpq	%rax, %rdi
	je	.LBB534_9
# %bb.6:                                # %"$7"
	leaq	64(%rdi), %rax
	movb	%al, 6(%rsi)
	movb	%ah, 7(%rsi)
	movq	%rax, %rcx
	shrq	$16, %rcx
	movb	%cl, 8(%rsi)
	movq	%rax, %rcx
	shrq	$24, %rcx
	movb	%cl, 9(%rsi)
	movq	%rax, %rcx
	shrq	$32, %rcx
	movb	%cl, 10(%rsi)
	shrq	$40, %rax
	movb	%al, 11(%rsi)
.LBB534_7:                              # %"$2"
	movslq	%ebx, %rbx
	subq	$32, %rsp
	xorl	%ecx, %ecx
	movq	%rsi, %rdx
	movl	$12, %r8d
	callq	blkPoke
	movq	%rsi, %rcx
	xorl	%edx, %edx
	movq	%rbx, %r8
	callq	memset
	addq	$32, %rsp
	movb	8(%r14), %cl
	movq	%rdi, %rax
	shlq	%cl, %rax
	subq	$32, %rsp
	movq	%rax, %rcx
	movq	%rsi, %rdx
	movl	%ebx, %r8d
	callq	blkPoke
	addq	$32, %rsp
	movq	%rdi, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	retq
.LBB534_8:                              # %"$2.i"
	subq	$32, %rsp
	callq	dbRdErr
.LBB534_9:                              # %"$8"
	subq	$32, %rsp
	leaq	.L$56(%rip), %r8
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 blkPoke;
	.scl	2;
	.type	32;
	.endef
	.globl	blkPoke                         # -- Begin function blkPoke
	.p2align	4, 0x90
blkPoke:                                # @blkPoke
.seh_proc blkPoke
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movl	%r8d, %edi
	movq	%rdx, %r14
	movq	%rcx, %rbx
	movq	($DbFile)(%rip), %rsi
	movl	(%rsi), %ecx
	movslq	%r8d, %r15
	subq	$32, %rsp
	movq	%r15, %r8
	movq	%rbx, %r9
	callq	pwrite
	addq	$32, %rsp
	cmpl	%r15d, %eax
	jne	.LBB535_5
# %bb.1:                                # %"$3"
	movq	($DbJnl)(%rip), %r12
	testq	%r12, %r12
	je	.LBB535_4
# %bb.2:                                # %"$4"
	xorl	%ecx, %ecx
	cmpl	%edi, 12(%rsi)
	cmovnel	%edi, %ecx
	subq	$32, %rsp
	movq	%r12, %rdx
	callq	putc_unlocked
	addq	$32, %rsp
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movzwl	4(%rsi), %ecx
	movw	%cx, (%rax)
	movb	8(%rsi), %cl
	shrq	%cl, %rbx
	movb	%bl, 2(%rax)
	movb	%bh, 3(%rax)
	movq	%rbx, %rcx
	shrq	$16, %rcx
	movb	%cl, 4(%rax)
	movq	%rbx, %rcx
	shrq	$24, %rcx
	movb	%cl, 5(%rax)
	movq	%rbx, %rcx
	shrq	$32, %rcx
	movb	%cl, 6(%rax)
	shrq	$40, %rbx
	movb	%bl, 7(%rax)
	subq	$32, %rsp
	movl	$8, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%r12, %r9
	callq	fwrite
	addq	$32, %rsp
	cmpl	$1, %eax
	jne	.LBB535_6
# %bb.3:                                # %"$10"
	subq	$32, %rsp
	movl	$1, %r8d
	movq	%r14, %rcx
	movq	%r15, %rdx
	movq	%r12, %r9
	callq	fwrite
	addq	$32, %rsp
	cmpl	$1, %eax
	jne	.LBB535_6
.LBB535_4:                              # %"$5"
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB535_6:                              # %"$11"
	subq	$32, %rsp
	callq	strErrno
	leaq	.L$54(%rip), %r8
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rax, %r9
	callq	err
.LBB535_5:                              # %"$2"
	subq	$32, %rsp
	callq	dbWrErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 dbWrErr;
	.scl	2;
	.type	32;
	.endef
	.globl	dbWrErr                         # -- Begin function dbWrErr
	.p2align	4, 0x90
dbWrErr:                                # @dbWrErr
.seh_proc dbWrErr
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	callq	strErrno
	leaq	.L$51(%rip), %r8
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rax, %r9
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 redefMsg;
	.scl	2;
	.type	32;
	.endef
	.globl	redefMsg                        # -- Begin function redefMsg
	.p2align	4, 0x90
redefMsg:                               # @redefMsg
.seh_proc redefMsg
# %bb.0:                                # %"$1"
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rdx, %rsi
	movq	%rcx, %rdi
	movq	($OutFile)(%rip), %r14
	movq	($Put)(%rip), %r15
	movq	($OutFiles)(%rip), %rax
	movq	16(%rax), %rbx
	movq	%rbx, ($OutFile)(%rip)
	leaq	_putStdout(%rip), %rax
	movq	%rax, ($Put)(%rip)
	testq	%rbx, %rbx
	je	.LBB537_4
# %bb.1:                                # %"$2.i"
	movl	4(%rbx), %eax
	cmpl	$4096, %eax                     # imm = 0x1000
	jne	.LBB537_3
# %bb.2:                                # %"$4.i"
	movl	$0, 4(%rbx)
	movl	(%rbx), %ecx
	leaq	8(%rbx), %rdx
	movl	$4096, %r8d                     # imm = 0x1000
	callq	wrBytes
	xorl	%eax, %eax
.LBB537_3:                              # %"$5.i"
	cltq
	movb	$35, 8(%rbx,%rax)
	incl	%eax
	movl	%eax, 4(%rbx)
	movq	($Put)(%rip), %rax
.LBB537_4:                              # %_putStdout.exit
	movb	$32, %cl
	callq	*%rax
	movq	%rdi, %rcx
	callq	print
	testq	%rsi, %rsi
	je	.LBB537_6
# %bb.5:                                # %"$2"
	movb	$32, %cl
	callq	*($Put)(%rip)
	movq	%rsi, %rcx
	callq	print
.LBB537_6:                              # %"$3"
	movb	$32, %cl
	callq	*($Put)(%rip)
	movb	$114, %cl
	callq	*($Put)(%rip)
	movb	$101, %cl
	callq	*($Put)(%rip)
	movb	$100, %cl
	callq	*($Put)(%rip)
	movb	$101, %cl
	callq	*($Put)(%rip)
	movb	$102, %cl
	callq	*($Put)(%rip)
	movb	$105, %cl
	callq	*($Put)(%rip)
	movb	$110, %cl
	callq	*($Put)(%rip)
	movb	$101, %cl
	callq	*($Put)(%rip)
	movb	$100, %cl
	callq	*($Put)(%rip)
	movb	$10, %cl
	callq	*($Put)(%rip)
	movq	%r15, ($Put)(%rip)
	movq	%r14, ($OutFile)(%rip)
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 putSrc;
	.scl	2;
	.type	32;
	.endef
	.globl	putSrc                          # -- Begin function putSrc
	.p2align	4, 0x90
putSrc:                                 # @putSrc
.seh_proc putSrc
# %bb.0:                                # %"$1"
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	leaq	SymTab+8(%rip), %r15
	cmpq	%r15, SymTab+824(%rip)
	je	.LBB538_15
# %bb.1:                                # %"$3"
	movq	%rcx, %rsi
	testb	$8, -8(%rcx)
	jne	.LBB538_15
# %bb.2:                                # %"$4"
	movq	($InFile)(%rip), %rbx
	testq	%rbx, %rbx
	je	.LBB538_15
# %bb.3:                                # %"$7"
	cmpq	$0, (%rbx)
	je	.LBB538_15
# %bb.4:                                # %"$8"
	movq	%rdx, %rdi
	leaq	SymTab+824(%rip), %rdx
	movq	%rsi, %rcx
	callq	get
	movq	%rax, %r14
	movslq	20(%rbx), %r12
	shlq	$4, %r12
	orq	$2, %r12
	movq	(%rbx), %rcx
	callq	mkStr
	movq	gcData(%rip), %rdx
	movq	%rax, %rcx
	callq	cons
	movq	%r12, %rcx
	movq	%rax, %rdx
	callq	cons
	testq	%rdi, %rdi
	je	.LBB538_5
# %bb.9:                                # %"$11"
	cmpq	%r15, %r14
	jne	.LBB538_10
# %bb.16:                               # %"$17"
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	cons
	leaq	SymTab+8(%rip), %rdi
	movq	%rax, %rcx
	movq	%rdi, %rdx
	callq	cons
	movq	%rdi, %rcx
	movq	%rax, %rdx
	jmp	.LBB538_7
.LBB538_5:                              # %"$12"
	cmpq	%r15, %r14
	jne	.LBB538_8
# %bb.6:                                # %"$13"
	leaq	SymTab+8(%rip), %rdx
	movq	%rax, %rcx
.LBB538_7:                              # %"$13"
	callq	cons
	leaq	SymTab+824(%rip), %rdx
	movq	%rsi, %rcx
	movq	%rax, %r8
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	jmp	put                             # TAILCALL
.LBB538_10:
	movq	%r14, %rcx
	.p2align	4, 0x90
.LBB538_11:                             # %"$18"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rcx
	testb	$15, %cl
	jne	.LBB538_12
# %bb.13:                               # %"$19"
                                        #   in Loop: Header=BB538_11 Depth=1
	movq	(%rcx), %rdx
	cmpq	%rdi, (%rdx)
	jne	.LBB538_11
# %bb.14:                               # %"$23"
	movq	%rax, 8(%rdx)
	jmp	.LBB538_15
.LBB538_8:                              # %"$14"
	movq	%rax, (%r14)
	jmp	.LBB538_15
.LBB538_12:                             # %"$21"
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	cons
	movq	8(%r14), %rdx
	movq	%rax, %rcx
	callq	cons
	movq	%rax, 8(%r14)
.LBB538_15:                             # %"$5"
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 fish;
	.scl	2;
	.type	32;
	.endef
	.globl	fish                            # -- Begin function fish
	.p2align	4, 0x90
fish:                                   # @fish
.seh_proc fish
# %bb.0:                                # %"$1"
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%r9, %r14
	movq	%r8, %rbx
	movq	%rdx, %rdi
	movq	%rcx, %rsi
	movq	128(%rsp), %r15
	movq	%rdx, (%r8)
	callq	evList
	leaq	SymTab+8(%rip), %r12
	jmp	.LBB539_1
	.p2align	4, 0x90
.LBB539_6:                              # %"$10"
                                        #   in Loop: Header=BB539_1 Depth=1
	movq	(%rdi), %rdi
	movq	%rdi, (%rbx)
	movq	%rsi, %rcx
	callq	evList
.LBB539_1:                              # %"$1"
                                        # =>This Inner Loop Header: Depth=1
	cmpq	%r12, %rax
	jne	.LBB539_7
# %bb.2:                                # %"$4"
                                        #   in Loop: Header=BB539_1 Depth=1
	testb	$15, %dil
	jne	.LBB539_9
# %bb.3:                                # %"$5"
                                        #   in Loop: Header=BB539_1 Depth=1
	cmpq	%rsp, ($StkLimit)(%rip)
	ja	.LBB539_10
# %bb.4:                                # %"$8"
                                        #   in Loop: Header=BB539_1 Depth=1
	movq	8(%rdi), %rdx
	cmpq	%r12, %rdx
	je	.LBB539_6
# %bb.5:                                # %"$9"
                                        #   in Loop: Header=BB539_1 Depth=1
	movq	%r15, 32(%rsp)
	movq	%rsi, %rcx
	movq	%rbx, %r8
	movq	%r14, %r9
	callq	fish
	jmp	.LBB539_6
.LBB539_7:                              # %"$3"
	cmpq	%r15, %rax
	je	.LBB539_9
# %bb.8:                                # %"$12"
	movq	(%r14), %rdx
	movq	%rdi, %rcx
	callq	cons
	movq	%rax, (%r14)
.LBB539_9:                              # %"$2"
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	retq
.LBB539_10:                             # %"$7"
	xorl	%ecx, %ecx
	callq	stkErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 extErr;
	.scl	2;
	.type	32;
	.endef
	.globl	extErr                          # -- Begin function extErr
	.p2align	4, 0x90
extErr:                                 # @extErr
.seh_proc extErr
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	leaq	.L$13(%rip), %r8
	xorl	%r9d, %r9d
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 logBlock;
	.scl	2;
	.type	32;
	.endef
	.globl	logBlock                        # -- Begin function logBlock
	.p2align	4, 0x90
logBlock:                               # @logBlock
.seh_proc logBlock
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	($DbFile)(%rip), %rdi
	movq	($DbLog)(%rip), %rsi
	movzwl	4(%rdi), %eax
	movw	%ax, 32(%rsp)
	movq	($BlkIndex)(%rip), %rax
	movb	%al, 34(%rsp)
	movb	%ah, 35(%rsp)
	movq	%rax, %rcx
	shrq	$16, %rcx
	movb	%cl, 36(%rsp)
	movq	%rax, %rcx
	shrq	$24, %rcx
	movb	%cl, 37(%rsp)
	movq	%rax, %rcx
	shrq	$32, %rcx
	movb	%cl, 38(%rsp)
	shrq	$40, %rax
	movb	%al, 39(%rsp)
	leaq	32(%rsp), %rcx
	movl	$8, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	fwrite
	cmpl	$1, %eax
	jne	.LBB541_3
# %bb.1:                                # %"$3"
	movq	($DbBlock)(%rip), %rcx
	movslq	12(%rdi), %rdx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	fwrite
	cmpl	$1, %eax
	jne	.LBB541_3
# %bb.2:                                # %"$5"
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
.LBB541_3:                              # %"$4"
	callq	strErrno
	leaq	.L$55(%rip), %r8
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rax, %r9
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 putTell;
	.scl	2;
	.type	32;
	.endef
	.globl	putTell                         # -- Begin function putTell
	.p2align	4, 0x90
putTell:                                # @putTell
.seh_proc putTell
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	($Ptr)(%rip), %rax
	movb	%cl, (%rax)
	incq	%rax
	movq	%rax, ($Ptr)(%rip)
	cmpq	($End)(%rip), %rax
	je	.LBB542_2
# %bb.1:                                # %"$3"
	addq	$40, %rsp
	retq
.LBB542_2:                              # %"$2"
	leaq	.L$39(%rip), %r8
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 binPrint;
	.scl	2;
	.type	32;
	.endef
	.globl	binPrint                        # -- Begin function binPrint
	.p2align	4, 0x90
binPrint:                               # @binPrint
.seh_proc binPrint
# %bb.0:                                # %"$1"
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rcx, %rsi
	testb	$2, %sil
	jne	.LBB543_1
# %bb.6:                                # %"$3"
	testb	$4, %sil
	jne	.LBB543_7
# %bb.24:                               # %"$5"
	leaq	SymTab+8(%rip), %rdi
	cmpq	%rdi, %rsi
	jne	.LBB543_25
.LBB543_21:                             # %"$31"
	xorl	%ecx, %ecx
.LBB543_22:                             # %"$31"
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	rex64 jmpq	*($PutBin)(%rip)        # TAILCALL
.LBB543_1:                              # %"$4"
	shrq	$3, %rsi
	xorl	%ecx, %ecx
	movq	%rsi, %rax
	.p2align	4, 0x90
.LBB543_2:                              # %"$2.i"
                                        # =>This Inner Loop Header: Depth=1
	shrq	$8, %rax
	addb	$4, %cl
	testq	%rax, %rax
	jne	.LBB543_2
# %bb.3:                                # %"$4.i"
                                        # kill: def $cl killed $cl killed $ecx
	callq	*($PutBin)(%rip)
	.p2align	4, 0x90
.LBB543_4:                              # %"$5.i"
                                        # =>This Inner Loop Header: Depth=1
	movl	%esi, %ecx
	callq	*($PutBin)(%rip)
	shrq	$8, %rsi
	jne	.LBB543_4
.LBB543_5:                              # %"$2"
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB543_7:                              # %"$6"
	movq	%rsi, %rax
	andq	$-9, %rax
	xorl	%ecx, %ecx
	movq	%rax, %rdx
	.p2align	4, 0x90
.LBB543_8:                              # %"$7"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rdx, %rbp
	movq	4(%rdx), %rdx
	addq	$8, %rcx
	testb	$2, %dl
	je	.LBB543_8
# %bb.9:                                # %"$10"
	movq	-4(%rbp), %rbp
	shrq	$3, %rdx
	andq	$-2, %rdx
	addq	%rbp, %rbp
	adcq	$0, %rdx
	je	.LBB543_11
	.p2align	4, 0x90
.LBB543_10:                             # %"$13"
                                        # =>This Inner Loop Header: Depth=1
	incq	%rcx
	shrq	$8, %rdx
	jne	.LBB543_10
.LBB543_11:                             # %"$12"
	movq	%rcx, %r14
	addq	$-63, %r14
	movl	$63, %edi
	cmovsq	%rcx, %rdi
	movq	-4(%rax), %rbx
	movq	4(%rax), %r15
	rolq	$60, %rsi
	addq	%rsi, %rsi
	adcq	%rbx, %rbx
	setb	%bpl
	leal	(,%rdi,4), %ecx
                                        # kill: def $cl killed $cl killed $ecx
	callq	*($PutBin)(%rip)
	movl	$8, %esi
	movl	$255, %r12d
	jmp	.LBB543_12
	.p2align	4, 0x90
.LBB543_13:                             # %"$20"
                                        #   in Loop: Header=BB543_12 Depth=1
	shrq	$8, %rbx
	decq	%rdi
	je	.LBB543_19
.LBB543_12:                             # %"$19"
                                        # =>This Inner Loop Header: Depth=1
	movl	%ebx, %ecx
	callq	*($PutBin)(%rip)
	decq	%rsi
	jne	.LBB543_13
# %bb.14:                               # %"$21"
                                        #   in Loop: Header=BB543_12 Depth=1
	testb	$2, %r15b
	jne	.LBB543_15
# %bb.16:                               # %"$24"
                                        #   in Loop: Header=BB543_12 Depth=1
	movq	-4(%r15), %rbx
	movq	4(%r15), %r15
	jmp	.LBB543_17
.LBB543_15:                             # %"$23"
                                        #   in Loop: Header=BB543_12 Depth=1
	movq	%r15, %rbx
	shrq	$4, %rbx
.LBB543_17:                             # %"$25"
                                        #   in Loop: Header=BB543_12 Depth=1
	andb	$1, %bpl
	addb	$-1, %bpl
	adcq	%rbx, %rbx
	setb	%bpl
	movl	$8, %esi
	decq	%rdi
	jne	.LBB543_12
.LBB543_19:                             # %"$27"
                                        #   in Loop: Header=BB543_12 Depth=1
	testq	%r14, %r14
	js	.LBB543_5
# %bb.20:                               # %"$28"
                                        #   in Loop: Header=BB543_12 Depth=1
	je	.LBB543_21
# %bb.23:                               # %"$30"
                                        #   in Loop: Header=BB543_12 Depth=1
	leaq	-255(%r14), %r13
	cmpq	$256, %r14                      # imm = 0x100
	cmovgeq	%r12, %r14
	movl	%r14d, %ecx
	callq	*($PutBin)(%rip)
	movq	%r14, %rdi
	movq	%r13, %r14
	jmp	.LBB543_12
.LBB543_25:                             # %"$34"
	testb	$15, %sil
	je	.LBB543_26
# %bb.47:                               # %"$36"
	movq	-8(%rsi), %rbp
	testb	$8, %bpl
	jne	.LBB543_48
	.p2align	4, 0x90
# %bb.57:                               # %"$63"
	testb	$6, %bpl
	jne	.LBB543_58
.LBB543_56:                             # %"$63"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rbp), %rbp
	testb	$6, %bpl
	je	.LBB543_56
.LBB543_58:                             # %"$64"
	cmpq	$2, %rbp
	je	.LBB543_21
# %bb.59:                               # %"$65"
	movq	gcData(%rip), %rdi
	movb	$2, %bl
	testb	$15, %dil
	jne	.LBB543_63
.LBB543_61:                             # %"$3.i46"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rdx
	movq	%rbp, %rcx
	callq	isIntern
	cmpq	%rsi, %rax
	je	.LBB543_62
# %bb.84:                               # %"$6.i48"
                                        #   in Loop: Header=BB543_61 Depth=1
	movq	8(%rdi), %rdi
	testb	$15, %dil
	je	.LBB543_61
	jmp	.LBB543_63
.LBB543_26:                             # %"$5.preheader.i"
	movb	$1, %cl
	callq	*($PutBin)(%rip)
	movq	(%rsi), %rax
	movq	%rsi, %rbx
	.p2align	4, 0x90
.LBB543_27:                             # %"$5.i34"
                                        # =>This Inner Loop Header: Depth=1
	orq	$1, %rax
	movq	%rax, (%rbx)
	movq	8(%rbx), %rbx
	testb	$15, %bl
	jne	.LBB543_28
# %bb.32:                               # %"$6.i"
                                        #   in Loop: Header=BB543_27 Depth=1
	movq	(%rbx), %rax
	testb	$1, %al
	je	.LBB543_27
# %bb.33:                               # %"$14.preheader.i"
	cmpq	%rsi, %rbx
	movq	%rsi, %rax
	je	.LBB543_37
# %bb.34:                               # %"$15.i.preheader"
	movq	%rsi, %rax
	.p2align	4, 0x90
.LBB543_35:                             # %"$15.i"
                                        # =>This Inner Loop Header: Depth=1
	andb	$-2, (%rax)
	movq	8(%rax), %rax
	cmpq	%rbx, %rax
	jne	.LBB543_35
# %bb.36:
	movq	%rbx, %rax
	.p2align	4, 0x90
.LBB543_37:                             # %"$17.i"
                                        # =>This Inner Loop Header: Depth=1
	andb	$-2, (%rax)
	movq	8(%rax), %rax
	cmpq	%rax, %rbx
	jne	.LBB543_37
# %bb.38:                               # %circ.exit
	testq	%rbx, %rbx
	je	.LBB543_30
# %bb.39:
	movq	%rsi, %rdi
	.p2align	4, 0x90
.LBB543_40:                             # %"$47"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rcx
	callq	binPrint
	movq	8(%rdi), %rdi
	cmpq	%rdi, %rbx
	jne	.LBB543_40
# %bb.41:                               # %"$49"
	movb	$2, %cl
	callq	*($PutBin)(%rip)
	cmpq	%rsi, %rbx
	je	.LBB543_31
# %bb.42:                               # %"$50"
	movb	$1, %cl
	callq	*($PutBin)(%rip)
	movq	%rbx, %rsi
	.p2align	4, 0x90
.LBB543_43:                             # %"$52"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rcx
	callq	binPrint
	movq	8(%rsi), %rsi
	cmpq	%rsi, %rbx
	jne	.LBB543_43
# %bb.44:                               # %"$54"
	movb	$2, %cl
	callq	*($PutBin)(%rip)
	movb	$3, %cl
	jmp	.LBB543_22
.LBB543_48:                             # %"$56"
	movq	%rbp, %rax
	andq	$-9, %rax
	testb	$6, %bpl
	jne	.LBB543_50
	.p2align	4, 0x90
.LBB543_49:                             # %"$58"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB543_49
.LBB543_50:                             # %"$59"
	movl	($Extn)(%rip), %ecx
	testl	%ecx, %ecx
	je	.LBB543_52
# %bb.51:                               # %"$60"
	movq	%rax, %rdx
	movabsq	$-4486011719516161, %rbp        # imm = 0xFFF00FFF00FFFFFF
	andq	%rax, %rbp
                                        # kill: def $eax killed $eax killed $rax
	shrl	$24, %eax
	shrq	$36, %rdx
	andl	$65280, %edx                    # imm = 0xFF00
	orl	%eax, %edx
	subl	%ecx, %edx
	movzwl	%dx, %ecx
	movq	%rcx, %rax
	shlq	$24, %rax
	shlq	$36, %rcx
	orq	%rax, %rcx
	movabsq	$4486011719516160, %rax         # imm = 0xFF000FF000000
	andq	%rcx, %rax
	orq	%rbp, %rax
.LBB543_52:                             # %"$61"
	shrq	$4, %rax
	movabsq	$288230376151711743, %rsi       # imm = 0x3FFFFFFFFFFFFFF
	andq	%rax, %rsi
	movb	$3, %cl
	movq	%rsi, %rax
	.p2align	4, 0x90
.LBB543_53:                             # %"$2.i41"
                                        # =>This Inner Loop Header: Depth=1
	shrq	$8, %rax
	addb	$4, %cl
	testq	%rax, %rax
	jne	.LBB543_53
# %bb.54:                               # %"$4.i42"
	callq	*($PutBin)(%rip)
	.p2align	4, 0x90
.LBB543_55:                             # %"$5.i43"
                                        # =>This Inner Loop Header: Depth=1
	movl	%esi, %ecx
	callq	*($PutBin)(%rip)
	shrq	$8, %rsi
	jne	.LBB543_55
	jmp	.LBB543_5
.LBB543_28:                             # %"$9.i.preheader"
	movq	%rsi, %rax
	.p2align	4, 0x90
.LBB543_29:                             # %"$9.i"
                                        # =>This Inner Loop Header: Depth=1
	andb	$-2, (%rax)
	movq	8(%rax), %rax
	testb	$15, %al
	je	.LBB543_29
	jmp	.LBB543_30
	.p2align	4, 0x90
.LBB543_45:                             # %"$42"
                                        #   in Loop: Header=BB543_30 Depth=1
	testb	$15, %sil
	jne	.LBB543_46
.LBB543_30:                             # %"$41"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rcx
	callq	binPrint
	movq	8(%rsi), %rsi
	cmpq	%rdi, %rsi
	jne	.LBB543_45
.LBB543_31:                             # %"$44"
	movb	$3, %cl
	jmp	.LBB543_22
.LBB543_46:                             # %"$46"
	movb	$2, %cl
	callq	*($PutBin)(%rip)
	movq	%rsi, %rcx
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	binPrint                        # TAILCALL
.LBB543_62:
	movb	$1, %bl
.LBB543_63:                             # %findSym.exit
	testb	$2, %bpl
	jne	.LBB543_72
# %bb.64:                               # %"$73.preheader"
	xorl	%eax, %eax
	movq	%rbp, %rcx
	.p2align	4, 0x90
.LBB543_65:                             # %"$73"
                                        # =>This Inner Loop Header: Depth=1
	movq	4(%rcx), %rcx
	addq	$8, %rax
	testb	$4, %cl
	jne	.LBB543_65
# %bb.66:                               # %"$75"
	shrq	$4, %rcx
	je	.LBB543_68
.LBB543_67:                             # %"$77"
                                        # =>This Inner Loop Header: Depth=1
	incq	%rax
	shrq	$8, %rcx
	jne	.LBB543_67
.LBB543_68:                             # %"$78"
	movq	%rax, %r14
	addq	$-63, %r14
	movl	$63, %esi
	cmovsq	%rax, %rsi
	leal	(,%rsi,4), %ecx
	orb	%bl, %cl
                                        # kill: def $cl killed $cl killed $ecx
	callq	*($PutBin)(%rip)
	xorl	%edi, %edi
	movl	$255, %r15d
	testq	%rdi, %rdi
	jne	.LBB543_79
	jmp	.LBB543_70
.LBB543_78:                             # %"$7.i"
	movq	-4(%rbp), %rdi
	movq	4(%rbp), %rbp
	.p2align	4, 0x90
.LBB543_79:                             # %"$3.i"
	movl	%edi, %ecx
	shrq	$8, %rdi
.LBB543_80:                             # %symByte.exit
                                        # kill: def $cl killed $cl killed $rcx
	callq	*($PutBin)(%rip)
	decq	%rsi
	je	.LBB543_81
# %bb.69:                               # %"$82"
	testq	%rdi, %rdi
	jne	.LBB543_79
.LBB543_70:                             # %"$2.i37"
	cmpq	$2, %rbp
	jne	.LBB543_76
# %bb.71:
	movl	$2, %ebp
	xorl	%edi, %edi
	xorl	%ecx, %ecx
	jmp	.LBB543_80
.LBB543_76:                             # %"$5.i39"
	testb	$2, %bpl
	je	.LBB543_78
# %bb.77:                               # %"$8.i"
	movq	%rbp, %rdi
	shrq	$4, %rdi
	movl	$2, %ebp
	jmp	.LBB543_79
.LBB543_81:                             # %"$84"
	testq	%r14, %r14
	js	.LBB543_5
# %bb.82:                               # %"$85"
	je	.LBB543_21
# %bb.83:                               # %"$87"
	leaq	-255(%r14), %rbx
	cmpq	$256, %r14                      # imm = 0x100
	cmovgeq	%r15, %r14
	movl	%r14d, %ecx
	callq	*($PutBin)(%rip)
	movq	%r14, %rsi
	movq	%rbx, %r14
	testq	%rdi, %rdi
	jne	.LBB543_79
	jmp	.LBB543_70
.LBB543_72:                             # %"$70"
	shrq	$4, %rbp
	movq	%rbp, %rax
	.p2align	4, 0x90
.LBB543_73:                             # %"$2.i51"
                                        # =>This Inner Loop Header: Depth=1
	shrq	$8, %rax
	addb	$4, %bl
	testq	%rax, %rax
	jne	.LBB543_73
# %bb.74:                               # %"$4.i52"
	movl	%ebx, %ecx
	callq	*($PutBin)(%rip)
	.p2align	4, 0x90
.LBB543_75:                             # %"$5.i53"
                                        # =>This Inner Loop Header: Depth=1
	movl	%ebp, %ecx
	callq	*($PutBin)(%rip)
	shrq	$8, %rbp
	jne	.LBB543_75
	jmp	.LBB543_5
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 cleanUp;
	.scl	2;
	.type	32;
	.endef
	.globl	cleanUp                         # -- Begin function cleanUp
	.p2align	4, 0x90
cleanUp:                                # @cleanUp
.seh_proc cleanUp
# %bb.0:                                # %"$1"
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$56, %rsp
	.seh_stackalloc 56
	.seh_endprologue
	movq	%rcx, %rbx
	movq	($DbFile)(%rip), %r14
	movl	(%r14), %ecx
	leaq	47(%rsp), %rdx
	movl	$6, %r8d
	xorl	%r9d, %r9d
	callq	pread
	cmpq	$6, %rax
	jne	.LBB544_5
# %bb.1:                                # %blkPeek.exit
	movb	52(%rsp), %al
	movb	%al, 55(%rsp)                   # 1-byte Spill
	movb	51(%rsp), %al
	movb	%al, 54(%rsp)                   # 1-byte Spill
	movb	50(%rsp), %al
	movb	%al, 53(%rsp)                   # 1-byte Spill
	movb	49(%rsp), %r13b
	movb	47(%rsp), %r15b
	movb	48(%rsp), %r12b
	movb	%bl, 47(%rsp)
	movb	%bh, 48(%rsp)
	movq	%rbx, %rax
	shrq	$16, %rax
	movb	%al, 49(%rsp)
	movq	%rbx, %rax
	shrq	$24, %rax
	movb	%al, 50(%rsp)
	movq	%rbx, %rax
	shrq	$32, %rax
	movb	%al, 51(%rsp)
	movq	%rbx, %rax
	shrq	$40, %rax
	movb	%al, 52(%rsp)
	leaq	47(%rsp), %rsi
	xorl	%ecx, %ecx
	movq	%rsi, %rdx
	movl	$6, %r8d
	callq	blkPoke
	movb	8(%r14), %cl
	shlq	%cl, %rbx
	movq	($DbFile)(%rip), %rax
	movl	(%rax), %ecx
	movl	$6, %r8d
	movq	%rsi, %rdx
	movq	%rbx, %r9
	callq	pread
	cmpq	$6, %rax
	jne	.LBB544_5
# %bb.2:
	leaq	47(%rsp), %rsi
	.p2align	4, 0x90
.LBB544_3:                              # %blkPeek.exit2
                                        # =>This Inner Loop Header: Depth=1
	movzbl	47(%rsp), %eax
	andl	$-64, %eax
	movb	%al, 47(%rsp)
	movzbl	52(%rsp), %ecx
	movzbl	51(%rsp), %edx
	shlq	$16, %rcx
	movzbl	50(%rsp), %edi
	movzbl	49(%rsp), %ebp
	movd	%ebp, %xmm0
	pinsrw	$4, %edx, %xmm0
	movzbl	48(%rsp), %edx
	movdqa	%xmm0, %xmm1
	psllq	$16, %xmm1
	psllq	$8, %xmm0
	movsd	%xmm1, %xmm0                    # xmm0 = xmm1[0],xmm0[1]
	shlq	$8, %rdx
	movq	%rcx, %xmm1
	movq	%rax, %xmm2
	punpcklqdq	%xmm1, %xmm2            # xmm2 = xmm2[0],xmm1[0]
	movq	%rdi, %xmm1
	movq	%rdx, %xmm3
	punpcklqdq	%xmm1, %xmm3            # xmm3 = xmm3[0],xmm1[0]
	por	%xmm2, %xmm3
	por	%xmm0, %xmm3
	pshufd	$78, %xmm3, %xmm0               # xmm0 = xmm3[2,3,0,1]
	movq	%xmm0, %rax
	shlq	$24, %rax
	movq	%xmm3, %rdi
	orq	%rax, %rdi
	je	.LBB544_6
# %bb.4:                                # %"$3"
                                        #   in Loop: Header=BB544_3 Depth=1
	movq	%rbx, %rcx
	movq	%rsi, %rdx
	movl	$6, %r8d
	callq	blkPoke
	movzbl	8(%r14), %ecx
	shlq	%cl, %rdi
	movq	($DbFile)(%rip), %rax
	movl	(%rax), %ecx
	movl	$6, %r8d
	movq	%rsi, %rdx
	movq	%rdi, %r9
	callq	pread
	cmpq	$6, %rax
	movq	%rdi, %rbx
	je	.LBB544_3
.LBB544_5:                              # %"$2.i"
	callq	dbRdErr
.LBB544_6:                              # %"$5"
	movb	%r15b, 47(%rsp)
	movb	%r12b, 48(%rsp)
	movb	%r13b, 49(%rsp)
	movb	53(%rsp), %al                   # 1-byte Reload
	movb	%al, 50(%rsp)
	movb	54(%rsp), %al                   # 1-byte Reload
	movb	%al, 51(%rsp)
	movb	55(%rsp), %al                   # 1-byte Reload
	movb	%al, 52(%rsp)
	leaq	47(%rsp), %rdx
	movq	%rbx, %rcx
	movl	$6, %r8d
	callq	blkPoke
	nop
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 wrChild;
	.scl	2;
	.type	32;
	.endef
	.globl	wrChild                         # -- Begin function wrChild
	.p2align	4, 0x90
wrChild:                                # @wrChild
.seh_proc wrChild
# %bb.0:                                # %"$1"
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movl	%r8d, %ebx
	movq	%rdx, %r15
	movq	%rcx, %rsi
	movslq	12(%rcx), %rdi
	testq	%rdi, %rdi
	je	.LBB545_1
.LBB545_12:                             # %"$3"
	leal	4(%rdi,%rbx), %ebp
	cmpl	$1073741824, %ebp               # imm = 0x40000000
	jge	.LBB545_16
# %bb.13:                               # %"$19"
	movq	(%rsi), %rcx
	movslq	%ebp, %rdx
	callq	realloc
	testq	%rax, %rax
	je	.LBB545_17
# %bb.14:                               # %alloc.exit
	movq	%rax, (%rsi)
	movl	%ebx, (%rax,%rdi)
	leaq	4(%rax,%rdi), %rcx
	movslq	%ebx, %r8
	movq	%r15, %rdx
	callq	memcpy
	movl	%ebp, 12(%rsi)
.LBB545_15:                             # %"$16"
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	retq
.LBB545_11:                             # %"$17"
                                        #   in Loop: Header=BB545_1 Depth=1
	movl	%eax, %eax
	addq	%rax, %r15
	.p2align	4, 0x90
.LBB545_1:                              # %"$4.outer"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB545_2 Depth 2
	movslq	%ebx, %r14
.LBB545_2:                              # %"$4"
                                        #   Parent Loop BB545_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	24(%rsi), %ecx
	movq	%r15, %rdx
	movq	%r14, %r8
	callq	write
	testl	%eax, %eax
	jns	.LBB545_10
# %bb.3:                                # %"$5"
                                        #   in Loop: Header=BB545_2 Depth=2
	callq	gErrno
                                        # kill: def $eax killed $eax def $rax
	leal	-6(%rax), %ecx
	cmpl	$2, %ecx
	jb	.LBB545_7
# %bb.4:                                # %"$5"
                                        #   in Loop: Header=BB545_2 Depth=2
	cmpl	$2, %eax
	jne	.LBB545_5
	jmp	.LBB545_2
.LBB545_10:                             # %"$6"
                                        #   in Loop: Header=BB545_1 Depth=1
	subl	%eax, %ebx
	jne	.LBB545_11
	jmp	.LBB545_15
.LBB545_7:                              # %"$12"
	movl	16(%rsi), %eax
	cmpl	($Talking)(%rip), %eax
	jne	.LBB545_9
# %bb.8:                                # %"$2.i"
	movl	$0, ($Talking)(%rip)
.LBB545_9:                              # %clsChild.exit
	movl	$0, 16(%rsi)
	movl	20(%rsi), %ecx
	callq	close
	movl	24(%rsi), %ecx
	callq	close
	movq	(%rsi), %rcx
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	jmp	free                            # TAILCALL
.LBB545_5:                              # %"$5"
	cmpl	$4, %eax
	je	.LBB545_12
# %bb.6:                                # %"$14"
	leaq	.L$38(%rip), %rcx
	callq	writeErr
.LBB545_16:                             # %"$18"
	xorl	%ecx, %ecx
	callq	sizeErr
.LBB545_17:                             # %"$2.i5"
	leaq	.L$3(%rip), %rcx
	xorl	%edx, %edx
	callq	giveup
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 putBlock;
	.scl	2;
	.type	32;
	.endef
	.globl	putBlock                        # -- Begin function putBlock
	.p2align	4, 0x90
putBlock:                               # @putBlock
.seh_proc putBlock
# %bb.0:                                # %"$1"
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movl	%ecx, %r14d
	movq	($BlkPtr)(%rip), %rsi
	cmpq	($BlkEnd)(%rip), %rsi
	jne	.LBB546_5
# %bb.1:                                # %"$2"
	movq	($BlkLink)(%rip), %rbx
	testq	%rbx, %rbx
	je	.LBB546_2
# %bb.3:                                # %"$5"
	movq	($DbFile)(%rip), %rbp
	movq	($BlkIndex)(%rip), %rax
	movb	8(%rbp), %cl
	shlq	%cl, %rax
	movq	($DbBlock)(%rip), %rdx
	movl	12(%rbp), %r8d
	movq	%rax, %rcx
	callq	blkPoke
	movq	($DbFile)(%rip), %rbp
	movq	($DbBlock)(%rip), %rsi
	movq	%rbx, ($BlkIndex)(%rip)
	movb	8(%rbp), %cl
	shlq	%cl, %rbx
	movslq	12(%rbp), %rdi
	movl	(%rbp), %ecx
	movq	%rsi, %rdx
	movq	%rdi, %r8
	movq	%rbx, %r9
	callq	pread
	cmpq	%rdi, %rax
	jne	.LBB546_6
# %bb.4:                                # %rdBlock.exit
	movzbl	5(%rsi), %eax
	movzbl	4(%rsi), %ecx
	shlq	$16, %rax
	shlq	$8, %rcx
	orq	%rax, %rcx
	movzbl	3(%rsi), %eax
	orq	%rcx, %rax
	movzbl	2(%rsi), %ecx
	movzbl	1(%rsi), %edx
	shlq	$24, %rax
	shlq	$16, %rcx
	shlq	$8, %rdx
	orq	%rcx, %rdx
	orq	%rax, %rdx
	movzbl	(%rsi), %eax
	andl	$-64, %eax
	orq	%rdx, %rax
	movq	%rax, ($BlkLink)(%rip)
	movslq	12(%rbp), %rax
	addq	%rsi, %rax
	movq	%rax, ($BlkEnd)(%rip)
	addq	$6, %rsi
	movq	%rsi, ($BlkPtr)(%rip)
	jmp	.LBB546_5
.LBB546_2:                              # %"$4"
	callq	newBlock
	movq	%rax, %rbx
	movq	($DbBlock)(%rip), %rsi
	movzbl	(%rsi), %edi
	movl	%edi, %eax
	orl	%ebx, %eax
	movb	%al, (%rsi)
	movb	%bh, 1(%rsi)
	movq	%rbx, %rax
	shrq	$16, %rax
	movb	%al, 2(%rsi)
	movq	%rbx, %rax
	shrq	$24, %rax
	movb	%al, 3(%rsi)
	movq	%rbx, %rax
	shrq	$32, %rax
	movb	%al, 4(%rsi)
	movq	%rbx, %rax
	shrq	$40, %rax
	movb	%al, 5(%rsi)
	movq	($DbFile)(%rip), %rbp
	movq	($BlkIndex)(%rip), %rax
	movb	8(%rbp), %cl
	shlq	%cl, %rax
	movq	($DbBlock)(%rip), %rdx
	movl	12(%rbp), %r8d
	movq	%rax, %rcx
	callq	blkPoke
	leaq	1(%rdi), %rax
	cmpq	$63, %rdi
	movq	%rbx, ($BlkIndex)(%rip)
	cmoveq	%rdi, %rax
	movb	%al, (%rsi)
	movb	%ah, 1(%rsi)
	movl	$0, 2(%rsi)
	addq	$6, %rsi
.LBB546_5:                              # %"$3"
	movb	%r14b, (%rsi)
	incq	%rsi
	movq	%rsi, ($BlkPtr)(%rip)
	addq	$32, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq
.LBB546_6:                              # %"$2.i.i"
	callq	dbRdErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 dbSyncErr;
	.scl	2;
	.type	32;
	.endef
	.globl	dbSyncErr                       # -- Begin function dbSyncErr
	.p2align	4, 0x90
dbSyncErr:                              # @dbSyncErr
.seh_proc dbSyncErr
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	callq	strErrno
	leaq	.L$53(%rip), %r8
	movq	%rsi, %rcx
	xorl	%edx, %edx
	movq	%rax, %r9
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 unsync;
	.scl	2;
	.type	32;
	.endef
	.globl	unsync                          # -- Begin function unsync
	.p2align	4, 0x90
unsync:                                 # @unsync
.seh_proc unsync
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movl	($Tell)(%rip), %esi
	testl	%esi, %esi
	je	.LBB548_3
# %bb.1:                                # %"$2"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdx
	movq	$0, (%rdx)
	subq	$32, %rsp
	movl	%esi, %ecx
	movl	$8, %r8d
	callq	wrBytes
	addq	$32, %rsp
	testb	$1, %al
	jne	.LBB548_3
# %bb.2:                                # %"$4"
	subq	$32, %rsp
	movl	%esi, %ecx
	callq	close
	addq	$32, %rsp
	movl	$0, ($Tell)(%rip)
.LBB548_3:                              # %"$3"
	movb	$0, ($Sync)(%rip)
	leaq	8(%rbp), %rsp
	popq	%rsi
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 sizeErr;
	.scl	2;
	.type	32;
	.endef
	.globl	sizeErr                         # -- Begin function sizeErr
	.p2align	4, 0x90
sizeErr:                                # @sizeErr
.seh_proc sizeErr
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	leaq	.L$31(%rip), %r8
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 tryLock;
	.scl	2;
	.type	32;
	.endef
	.globl	tryLock                         # -- Begin function tryLock
	.p2align	4, 0x90
tryLock:                                # @tryLock
.seh_proc tryLock
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%r8, %rdi
	movq	%rdx, %rsi
	movq	%rcx, %rbx
	jmp	.LBB550_1
	.p2align	4, 0x90
.LBB550_11:                             # %"$18"
                                        #   in Loop: Header=BB550_1 Depth=1
	jne	.LBB550_12
.LBB550_1:                              # %"$2"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB550_8 Depth 2
	movl	(%rbx), %ecx
	movq	%rsi, %rdx
	movq	%rdi, %r8
	xorl	%r9d, %r9d
	callq	wrLock
	testl	%eax, %eax
	jns	.LBB550_2
# %bb.6:                                # %"$3"
                                        #   in Loop: Header=BB550_1 Depth=1
	callq	gErrno
                                        # kill: def $eax killed $eax def $rax
	leal	-4(%rax), %ecx
	cmpl	$2, %ecx
	jb	.LBB550_8
# %bb.7:                                # %"$3"
                                        #   in Loop: Header=BB550_1 Depth=1
	cmpl	$2, %eax
	jne	.LBB550_10
	.p2align	4, 0x90
.LBB550_8:                              # %"$16"
                                        #   Parent Loop BB550_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	(%rbx), %ecx
	movq	%rsi, %rdx
	movq	%rdi, %r8
	callq	getLock
	testl	%eax, %eax
	jns	.LBB550_11
# %bb.9:                                # %"$17"
                                        #   in Loop: Header=BB550_8 Depth=2
	callq	gErrno
	cmpl	$2, %eax
	je	.LBB550_8
.LBB550_10:                             # %"$14.critedge"
	callq	lockErr
.LBB550_2:                              # %"$5"
	movb	$1, 40(%rbx)
	testq	%rsi, %rsi
	je	.LBB550_3
# %bb.4:                                # %"$7"
	xorl	%eax, %eax
	leaq	SymTab+280(%rip), %rcx
	cmpq	%rcx, SymTab+424(%rip)
	je	.LBB550_12
# %bb.5:                                # %"$10"
	leaq	SymTab+8(%rip), %rcx
	movq	%rcx, SymTab+424(%rip)
	jmp	.LBB550_12
.LBB550_3:                              # %"$8"
	leaq	SymTab+280(%rip), %rax
	movq	%rax, SymTab+424(%rip)
	xorl	%eax, %eax
.LBB550_12:                             # %"$4"
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 jnlErr;
	.scl	2;
	.type	32;
	.endef
	.globl	jnlErr                          # -- Begin function jnlErr
	.p2align	4, 0x90
jnlErr:                                 # @jnlErr
.seh_proc jnlErr
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	leaq	.L$52(%rip), %r8
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 bufAo;
	.scl	2;
	.type	32;
	.endef
	.globl	bufAo                           # -- Begin function bufAo
	.p2align	4, 0x90
bufAo:                                  # @bufAo
# %bb.0:                                # %"$1"
	pushq	%rsi
	subq	$32, %rsp
	movl	%edx, %esi
	movq	%rcx, %rax
	cmpl	$16, %edx
	jl	.LBB552_2
# %bb.1:                                # %"$2"
	movl	%esi, %edx
	shrl	$4, %edx
	movq	%rax, %rcx
	callq	bufAo
	andb	$15, %sil
.LBB552_2:                              # %"$3"
	addb	$64, %sil
	movb	%sil, (%rax)
	incq	%rax
	addq	$32, %rsp
	popq	%rsi
	retq
                                        # -- End function
	.def	 transaction;
	.scl	2;
	.type	32;
	.endef
	.globl	transaction                     # -- Begin function transaction
	.p2align	4, 0x90
transaction:                            # @transaction
.seh_proc transaction
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	($DbLog)(%rip), %rsi
	movq	%rsi, %rcx
	callq	fseek0
	leaq	34(%rsp), %rcx
	movl	$2, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	fread
	testl	%eax, %eax
	je	.LBB553_10
# %bb.1:                                # %"$5.preheader"
	leaq	34(%rsp), %rdi
	.p2align	4, 0x90
.LBB553_2:                              # %"$5"
                                        # =>This Inner Loop Header: Depth=1
	movzwl	34(%rsp), %eax
	cmpq	$65535, %rax                    # imm = 0xFFFF
	je	.LBB553_3
# %bb.4:                                # %"$6"
                                        #   in Loop: Header=BB553_2 Depth=1
	movzbl	35(%rsp), %ecx
	shlq	$8, %rcx
	movzbl	%al, %eax
	orq	%rcx, %rax
	cmpl	%eax, ($DBs)(%rip)
	jle	.LBB553_9
# %bb.5:                                # %dbfBuf.exit
                                        #   in Loop: Header=BB553_2 Depth=1
	imulq	$42, %rax, %rax
	addq	($DbFiles)(%rip), %rax
	movq	%rax, ($DbFile)(%rip)
	je	.LBB553_9
# %bb.6:                                # %"$10"
                                        #   in Loop: Header=BB553_2 Depth=1
	movl	$6, %edx
	movl	$1, %r8d
	movq	%rdi, %rcx
	movq	%rsi, %r9
	callq	fread
	cmpl	$1, %eax
	jne	.LBB553_9
# %bb.7:                                # %"$11"
                                        #   in Loop: Header=BB553_2 Depth=1
	movq	($DbFile)(%rip), %rax
	movl	12(%rax), %edx
	movq	%rsi, %rcx
	callq	fseekOfs
	testb	$1, %al
	je	.LBB553_9
# %bb.8:                                # %"$12"
                                        #   in Loop: Header=BB553_2 Depth=1
	movl	$2, %edx
	movl	$1, %r8d
	movq	%rdi, %rcx
	movq	%rsi, %r9
	callq	fread
	cmpl	$1, %eax
	je	.LBB553_2
	jmp	.LBB553_9
.LBB553_10:                             # %"$3"
	movq	%rsi, %rcx
	callq	feof
	testl	%eax, %eax
	je	.LBB553_9
# %bb.11:
	xorl	%esi, %esi
	jmp	.LBB553_12
.LBB553_9:                              # %"$15"
	leaq	.L$57(%rip), %rcx
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	stderrMsg
.LBB553_12:                             # %"$4"
	movl	%esi, %eax
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
.LBB553_3:
	movb	$1, %sil
	jmp	.LBB553_12
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 restore;
	.scl	2;
	.type	32;
	.endef
	.globl	restore                         # -- Begin function restore
	.p2align	4, 0x90
restore:                                # @restore
.seh_proc restore
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$24, %rsp
	.seh_stackalloc 24
	leaq	16(%rsp), %rbp
	.seh_setframe %rbp, 16
	movdqa	%xmm6, -16(%rbp)                # 16-byte Spill
	.seh_savexmm %xmm6, 0
	.seh_endprologue
	movq	%rcx, %r14
	subq	$32, %rsp
	leaq	.L$58(%rip), %rcx
	xorl	%edx, %edx
	callq	stderrMsg
	addq	$32, %rsp
	movq	($DbLog)(%rip), %rdi
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	fseek0
	addq	$32, %rsp
	movq	($DbFiles)(%rip), %rax
	movl	($DBs)(%rip), %ecx
	addq	$41, %rax
	.p2align	4, 0x90
.LBB554_1:                              # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	movb	$0, (%rax)
	addq	$42, %rax
	decl	%ecx
	jne	.LBB554_1
# %bb.2:                                # %"$4"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movl	($MaxBlkSize)(%rip), %eax
	addq	$15, %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	subq	$32, %rsp
	movl	$2, %edx
	movl	$1, %r8d
	movq	%rbx, %rcx
	movq	%rdi, %r9
	callq	fread
	addq	$32, %rsp
	cmpl	$1, %eax
	jne	.LBB554_11
# %bb.3:
	pxor	%xmm6, %xmm6
	.p2align	4, 0x90
.LBB554_4:                              # %"$7"
                                        # =>This Inner Loop Header: Depth=1
	movzwl	(%rbx), %eax
	cmpq	$65535, %rax                    # imm = 0xFFFF
	je	.LBB554_12
# %bb.5:                                # %"$8"
                                        #   in Loop: Header=BB554_4 Depth=1
	movzbl	1(%rbx), %ecx
	shlq	$8, %rcx
	movzbl	%al, %eax
	orq	%rcx, %rax
	cmpl	%eax, ($DBs)(%rip)
	jle	.LBB554_11
# %bb.6:                                # %dbfBuf.exit
                                        #   in Loop: Header=BB554_4 Depth=1
	imulq	$42, %rax, %rsi
	addq	($DbFiles)(%rip), %rsi
	movq	%rsi, ($DbFile)(%rip)
	je	.LBB554_11
# %bb.7:                                # %"$10"
                                        #   in Loop: Header=BB554_4 Depth=1
	subq	$32, %rsp
	movl	$6, %edx
	movl	$1, %r8d
	movq	%rbx, %rcx
	movq	%rdi, %r9
	callq	fread
	addq	$32, %rsp
	cmpl	$1, %eax
	jne	.LBB554_11
# %bb.8:                                # %"$14"
                                        #   in Loop: Header=BB554_4 Depth=1
	movslq	12(%rsi), %rdx
	subq	$32, %rsp
	movl	$1, %r8d
	movq	%r15, %rcx
	movq	%rdi, %r9
	callq	fread
	addq	$32, %rsp
	cmpl	$1, %eax
	jne	.LBB554_11
# %bb.9:                                # %"$16"
                                        #   in Loop: Header=BB554_4 Depth=1
	movl	(%rsi), %eax
	movslq	12(%rsi), %r8
	movzwl	4(%rbx), %ecx
	movd	%ecx, %xmm0
	punpcklbw	%xmm6, %xmm0            # xmm0 = xmm0[0],xmm6[0],xmm0[1],xmm6[1],xmm0[2],xmm6[2],xmm0[3],xmm6[3],xmm0[4],xmm6[4],xmm0[5],xmm6[5],xmm0[6],xmm6[6],xmm0[7],xmm6[7]
	punpcklwd	%xmm6, %xmm0            # xmm0 = xmm0[0],xmm6[0],xmm0[1],xmm6[1],xmm0[2],xmm6[2],xmm0[3],xmm6[3]
	punpckldq	%xmm6, %xmm0            # xmm0 = xmm0[0],xmm6[0],xmm0[1],xmm6[1]
	movdqa	%xmm0, %xmm1
	psllq	$8, %xmm1
	psllq	$16, %xmm0
	pshufd	$78, %xmm0, %xmm0               # xmm0 = xmm0[2,3,0,1]
	por	%xmm1, %xmm0
	movq	%xmm0, %rcx
	movzbl	3(%rbx), %edx
	orq	%rcx, %rdx
	movzwl	1(%rbx), %ecx
	movd	%ecx, %xmm0
	punpcklbw	%xmm6, %xmm0            # xmm0 = xmm0[0],xmm6[0],xmm0[1],xmm6[1],xmm0[2],xmm6[2],xmm0[3],xmm6[3],xmm0[4],xmm6[4],xmm0[5],xmm6[5],xmm0[6],xmm6[6],xmm0[7],xmm6[7]
	punpcklwd	%xmm6, %xmm0            # xmm0 = xmm0[0],xmm6[0],xmm0[1],xmm6[1],xmm0[2],xmm6[2],xmm0[3],xmm6[3]
	punpckldq	%xmm6, %xmm0            # xmm0 = xmm0[0],xmm6[0],xmm0[1],xmm6[1]
	shlq	$24, %rdx
	movdqa	%xmm0, %xmm1
	psllq	$8, %xmm1
	psllq	$16, %xmm0
	pshufd	$78, %xmm0, %xmm0               # xmm0 = xmm0[2,3,0,1]
	por	%xmm1, %xmm0
	movq	%xmm0, %rcx
	movzbl	(%rbx), %r9d
	orq	%rdx, %r9
	orq	%rcx, %r9
	movzbl	8(%rsi), %ecx
	shlq	%cl, %r9
	subq	$32, %rsp
	movl	%eax, %ecx
	movq	%r15, %rdx
	callq	pwrite
	addq	$32, %rsp
	movslq	12(%rsi), %rcx
	cmpq	%rcx, %rax
	jne	.LBB554_17
# %bb.10:                               # %"$18"
                                        #   in Loop: Header=BB554_4 Depth=1
	movb	$1, 41(%rsi)
	subq	$32, %rsp
	movl	$2, %edx
	movl	$1, %r8d
	movq	%rbx, %rcx
	movq	%rdi, %r9
	callq	fread
	addq	$32, %rsp
	cmpl	$1, %eax
	je	.LBB554_4
.LBB554_11:                             # %"$6"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	jnlErr
.LBB554_12:                             # %"$9"
	movq	($DbFiles)(%rip), %rsi
	movl	($DBs)(%rip), %edi
	jmp	.LBB554_13
	.p2align	4, 0x90
.LBB554_15:                             # %"$6.i"
                                        #   in Loop: Header=BB554_13 Depth=1
	addq	$42, %rsi
	decl	%edi
	je	.LBB554_16
.LBB554_13:                             # %"$2.i2"
                                        # =>This Inner Loop Header: Depth=1
	cmpb	$1, 41(%rsi)
	jne	.LBB554_15
# %bb.14:                               # %"$4.i"
                                        #   in Loop: Header=BB554_13 Depth=1
	movl	(%rsi), %ecx
	subq	$32, %rsp
	callq	fsync
	addq	$32, %rsp
	testl	%eax, %eax
	jns	.LBB554_15
# %bb.18:                               # %"$5.i"
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	dbSyncErr
.LBB554_16:                             # %fsyncDB.exit
	movaps	-16(%rbp), %xmm6                # 16-byte Reload
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB554_17:                             # %"$17"
	subq	$32, %rsp
	callq	dbWrErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 putString;
	.scl	2;
	.type	32;
	.endef
	.globl	putString                       # -- Begin function putString
	.p2align	4, 0x90
putString:                              # @putString
# %bb.0:                                # %"$1"
	movq	($StrP)(%rip), %rdx
	jmp	byteSym                         # TAILCALL
                                        # -- End function
	.def	 parse;
	.scl	2;
	.type	32;
	.endef
	.globl	parse                           # -- Begin function parse
	.p2align	4, 0x90
parse:                                  # @parse
.seh_proc parse
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$56, %rsp
	.seh_stackalloc 56
	leaq	48(%rsp), %rbp
	.seh_setframe %rbp, 48
	.seh_endprologue
	movq	%r9, %rsi
	movl	($Chr)(%rip), %edi
	movq	($Get)(%rip), %r12
	movq	env+80(%rip), %r13
	movl	$0, ($Chr)(%rip)
	leaq	getParse(%rip), %rax
	movq	%rax, ($Get)(%rip)
	movq	env(%rip), %rax
	movq	%rcx, -48(%rbp)
	movq	%rax, -40(%rbp)
	leaq	-48(%rbp), %rax
	movq	%rax, env(%rip)
	movq	$0, -32(%rbp)
	movq	%rcx, -24(%rbp)
	movq	%r8, -16(%rbp)
	leaq	-32(%rbp), %rax
	movq	%rax, env+80(%rip)
	testb	$1, %dl
	je	.LBB556_9
# %bb.1:                                # %"$2.i.i"
	cmpq	$2, %rcx
	je	.LBB556_7
# %bb.2:                                # %"$5.i.i"
	testb	$2, %cl
	jne	.LBB556_3
# %bb.4:                                # %"$7.i.i"
	movq	-4(%rcx), %rdx
	movq	%rdx, -32(%rbp)
	movq	4(%rcx), %rax
	movq	%rdx, %rcx
	jmp	.LBB556_5
.LBB556_3:                              # %"$8.i.i"
	shrq	$4, %rcx
	movl	$2, %eax
.LBB556_5:                              # %symByte.exit.i
	movq	%rax, -24(%rbp)
	movq	%rcx, %rax
	shrq	$8, %rax
	movq	%rax, -32(%rbp)
	testb	%cl, %cl
	je	.LBB556_7
# %bb.6:
	movzbl	%cl, %eax
	jmp	.LBB556_8
.LBB556_7:                              # %"$3.i"
	movq	%r8, %rax
	shrq	$8, %rax
	movq	%rax, -16(%rbp)
	movzbl	%r8b, %ecx
	xorl	%eax, %eax
	cmpq	$1, %r8
	sbbl	%eax, %eax
	orl	%ecx, %eax
.LBB556_8:                              # %getParse.exit
	movl	%eax, ($Chr)(%rip)
.LBB556_9:                              # %"$3"
	subq	$32, %rsp
	cmpq	$1, %rsi
	je	.LBB556_13
# %bb.10:                               # %"$3"
	testq	%rsi, %rsi
	jne	.LBB556_14
# %bb.11:                               # %"$6"
	callq	rdList
	jmp	.LBB556_12
.LBB556_13:                             # %"$8"
	movb	$1, %cl
	callq	read0
.LBB556_12:                             # %"$4"
	addq	$32, %rsp
	movq	%rax, %r14
.LBB556_20:                             # %"$4"
	movq	%r13, env+80(%rip)
	movq	%r12, ($Get)(%rip)
	movl	%edi, ($Chr)(%rip)
	movq	-40(%rbp), %rax
	movq	%rax, env(%rip)
	movq	%r14, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB556_14:                             # %"$7"
	movq	%rsi, %rcx
	xorl	%edx, %edx
	callq	token
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB556_15
# %bb.16:                               # %"$9"
	subq	$32, %rsp
	leaq	SymTab+8(%rip), %rdx
	movq	%rax, %rcx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %r14
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%r14, (%rax)
	movq	%rax, %rdx
	orq	$8, %rdx
	movq	%rcx, (%rdx)
	movq	%rax, env(%rip)
	subq	$32, %rsp
	movq	%rsi, %rcx
	xorl	%edx, %edx
	callq	token
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB556_20
# %bb.17:                               # %"$12.preheader"
	movl	%edi, 4(%rbp)                   # 4-byte Spill
	leaq	SymTab+8(%rip), %rbx
	movq	%r14, %rdi
	.p2align	4, 0x90
.LBB556_18:                             # %"$12"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	movq	%rax, %rcx
	movq	%rbx, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %r15
	movq	%rax, 8(%rdi)
	subq	$32, %rsp
	movq	%rsi, %rcx
	xorl	%edx, %edx
	callq	token
	addq	$32, %rsp
	testq	%rax, %rax
	movq	%r15, %rdi
	jne	.LBB556_18
# %bb.19:
	movl	4(%rbp), %edi                   # 4-byte Reload
	jmp	.LBB556_20
.LBB556_15:
	leaq	SymTab+8(%rip), %r14
	jmp	.LBB556_20
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 token;
	.scl	2;
	.type	32;
	.endef
	.globl	token                           # -- Begin function token
	.p2align	4, 0x90
token:                                  # @token
.seh_proc token
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movl	%edx, %esi
	movq	%rcx, %rbx
	movl	($Chr)(%rip), %edi
	testl	%edi, %edi
	jne	.LBB557_2
# %bb.1:                                # %"$2"
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	movl	($Chr)(%rip), %edi
.LBB557_2:                              # %"$3.i.preheader"
	xorl	%r15d, %r15d
	cmpl	$32, %edi
	jg	.LBB557_5
.LBB557_3:                              # %"$4.i"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	movl	%eax, %edi
	testl	%eax, %eax
	js	.LBB557_85
# %bb.4:                                # %"$3.i"
                                        #   in Loop: Header=BB557_3 Depth=1
	cmpl	$32, %edi
	jle	.LBB557_3
.LBB557_5:                              # %"$5.i"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB557_6 Depth 2
	cmpl	%esi, %edi
	jne	.LBB557_9
	.p2align	4, 0x90
.LBB557_6:                              # %"$10.i"
                                        #   Parent Loop BB557_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	cmpl	$10, %eax
	je	.LBB557_8
# %bb.7:                                # %"$11.i"
                                        #   in Loop: Header=BB557_6 Depth=2
	testl	%eax, %eax
	jns	.LBB557_6
	jmp	.LBB557_85
	.p2align	4, 0x90
.LBB557_8:                              # %"$12.i"
                                        #   in Loop: Header=BB557_5 Depth=1
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	movl	%eax, %edi
	cmpl	$32, %edi
	jle	.LBB557_3
	jmp	.LBB557_5
.LBB557_9:                              # %"$5"
	cmpl	$34, %edi
	jne	.LBB557_12
# %bb.10:                               # %"$8"
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	subq	$32, %rsp
	cmpl	$34, %eax
	jne	.LBB557_17
# %bb.11:                               # %"$11"
	callq	*($Get)(%rip)
	addq	$32, %rsp
	leaq	SymTab+8(%rip), %r15
	jmp	.LBB557_85
.LBB557_12:                             # %"$7"
	leal	-48(%rdi), %eax
	cmpl	$9, %eax
	ja	.LBB557_21
# %bb.13:                               # %"$22"
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	$4, (%rsi)
	leaq	16(%rsi), %rax
	movq	$2, 16(%rsi)
	movq	env(%rip), %rcx
	movq	%rcx, 24(%rsi)
	movq	%rax, env(%rip)
	.p2align	4, 0x90
.LBB557_14:                             # %"$23"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	movl	%edi, %ecx
	movq	%rsi, %rdx
	callq	byteSym
	callq	*($Get)(%rip)
	addq	$32, %rsp
	movl	%eax, %edi
	leal	-48(%rdi), %eax
	cmpl	$46, %edi
	je	.LBB557_14
# %bb.15:                               # %"$23"
                                        #   in Loop: Header=BB557_14 Depth=1
	cmpl	$10, %eax
	jb	.LBB557_14
# %bb.16:                               # %"$29"
	movq	16(%rsi), %rcx
	movq	SymTab+552(%rip), %rdx
	shrq	$4, %rdx
	subq	$32, %rsp
	movb	$46, %r8b
	xorl	%r9d, %r9d
	callq	symToNum
	addq	$32, %rsp
	movq	%rax, %r15
	movq	24(%rsi), %rax
	jmp	.LBB557_75
.LBB557_17:                             # %"$10"
	movl	%eax, %ecx
	callq	testEsc
	addq	$32, %rsp
	testb	$1, %al
	je	.LBB557_23
# %bb.18:                               # %"$12"
	movslq	($Chr)(%rip), %rdx
	cmpq	$127, %rdx
	jg	.LBB557_45
.LBB557_19:                             # %"$2.i31"
	shlq	$4, %rdx
	orq	$2, %rdx
	cmpq	$2, %rdx
	movq	%rdx, %rcx
	jne	.LBB557_46
# %bb.20:
	leaq	SymTab+8(%rip), %rcx
	jmp	.LBB557_47
.LBB557_21:                             # %"$21"
	leaq	SymTab+8(%rip), %r15
	cmpq	%r15, %rbx
	jne	.LBB557_24
# %bb.22:
	movl	$1, %eax
	movl	$2, %ecx
	jmp	.LBB557_32
.LBB557_23:
	leaq	SymTab+8(%rip), %r15
	jmp	.LBB557_85
.LBB557_24:                             # %"$3.i74"
	movq	-8(%rbx), %rcx
	testb	$8, %cl
	jne	.LBB557_101
# %bb.25:                               # %"$8.i78"
	testb	$6, %cl
	jne	.LBB557_27
.LBB557_26:                             # %"$8.i78"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rcx
	testb	$6, %cl
	je	.LBB557_26
.LBB557_27:                             # %xName.exit
	movl	$1, %eax
	testb	$4, %cl
	movq	%rcx, %rdx
	je	.LBB557_30
# %bb.28:                               # %"$3.i42.preheader"
	movl	$1, %eax
	movq	%rcx, %rdx
.LBB557_29:                             # %"$3.i42"
                                        # =>This Inner Loop Header: Depth=1
	addq	$8, %rax
	movq	4(%rdx), %rdx
	testb	$4, %dl
	jne	.LBB557_29
.LBB557_30:                             # %"$4.i43"
	shrq	$4, %rdx
	je	.LBB557_32
.LBB557_31:                             # %"$6.i"
                                        # =>This Inner Loop Header: Depth=1
	incq	%rax
	shrq	$8, %rdx
	jne	.LBB557_31
.LBB557_32:                             # %bufSize.exit
	addq	$15, %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	xorl	%edx, %edx
	movq	%r14, %rax
	testq	%rdx, %rdx
	jne	.LBB557_37
	jmp	.LBB557_33
	.p2align	4, 0x90
.LBB557_38:                             # %"$3.i47"
                                        #   in Loop: Header=BB557_37 Depth=1
	shrq	$8, %rdx
	incq	%rax
	testq	%rdx, %rdx
	jne	.LBB557_37
.LBB557_33:                             # %"$2.i.i"
	cmpq	$2, %rcx
	je	.LBB557_39
# %bb.34:                               # %"$5.i.i"
	testb	$2, %cl
	jne	.LBB557_36
# %bb.35:                               # %"$7.i.i"
	movq	-4(%rcx), %rdx
	movq	4(%rcx), %rcx
	jmp	.LBB557_37
.LBB557_36:                             # %"$8.i.i"
	movq	%rcx, %rdx
	shrq	$4, %rdx
	movl	$2, %ecx
	.p2align	4, 0x90
.LBB557_37:                             # %symByte.exit.i
                                        # =>This Inner Loop Header: Depth=1
	movb	%dl, (%rax)
	testb	%dl, %dl
	jne	.LBB557_38
	jmp	.LBB557_40
.LBB557_39:                             # %symByte.exit.thread.i
	movb	$0, (%rax)
.LBB557_40:                             # %bufString.exit
	cmpl	$43, %edi
	je	.LBB557_81
# %bb.41:                               # %bufString.exit
	cmpl	$45, %edi
	je	.LBB557_44
# %bb.42:                               # %bufString.exit
	cmpl	$92, %edi
	jne	.LBB557_63
# %bb.43:                               # %"$44"
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	movb	$92, %dil
	jmp	.LBB557_65
.LBB557_44:                             # %"$30.fold.split"
	movl	$45, %edi
.LBB557_81:                             # %"$4.i60"
	movslq	%edi, %rbx
.LBB557_82:                             # %"$2.i67"
	shlq	$4, %rbx
	orq	$2, %rbx
	cmpq	$2, %rbx
	je	.LBB557_84
.LBB557_83:                             # %"$3.i.i68"
	subq	$32, %rsp
	movq	%rbx, %rcx
	xorl	%edx, %edx
	callq	consSym
	addq	$32, %rsp
	movq	%rax, %r15
.LBB557_84:                             # %mkChar.exit69
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	jmp	.LBB557_85
.LBB557_45:                             # %"$3.i28"
	movl	%edx, %eax
	movl	$4082, %ecx                     # imm = 0xFF2
	cmpl	$1114112, %eax                  # imm = 0x110000
	jne	.LBB557_76
.LBB557_46:                             # %"$3.i.i"
	subq	$32, %rsp
	xorl	%edx, %edx
	callq	consSym
	addq	$32, %rsp
	movq	%rax, %rcx
.LBB557_47:                             # %mkChar.exit
	subq	$32, %rsp
	leaq	SymTab+8(%rip), %rdi
	movq	%rdi, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %r15
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r12
	movq	%r15, (%r12)
	movq	%r12, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r12, env(%rip)
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	cmpl	$34, %eax
	jne	.LBB557_50
.LBB557_48:                             # %"$17"
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
.LBB557_49:                             # %"$16"
	movq	8(%r12), %rax
	jmp	.LBB557_75
.LBB557_50:
	movl	$2155905264, %r14d              # imm = 0x808080F0
	movq	%r15, %rbx
	jmp	.LBB557_53
.LBB557_51:                             # %"$3.i.i40"
                                        #   in Loop: Header=BB557_53 Depth=1
	subq	$32, %rsp
	xorl	%edx, %edx
	callq	consSym
	addq	$32, %rsp
.LBB557_52:                             # %mkChar.exit41
                                        #   in Loop: Header=BB557_53 Depth=1
	subq	$32, %rsp
	movq	%rax, %rcx
	movq	%rdi, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %rsi
	movq	%rax, 8(%rbx)
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	cmpl	$34, %eax
	movq	%rsi, %rbx
	je	.LBB557_48
.LBB557_53:                             # %"$15"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	movl	%eax, %ecx
	callq	testEsc
	addq	$32, %rsp
	testb	$1, %al
	je	.LBB557_49
# %bb.54:                               # %"$18"
                                        #   in Loop: Header=BB557_53 Depth=1
	movslq	($Chr)(%rip), %rdx
	cmpq	$127, %rdx
	jg	.LBB557_56
.LBB557_55:                             # %"$2.i39"
                                        #   in Loop: Header=BB557_53 Depth=1
	shlq	$4, %rdx
	orq	$2, %rdx
	cmpq	$2, %rdx
	movq	%rdx, %rcx
	movq	%rdi, %rax
	jne	.LBB557_51
	jmp	.LBB557_52
.LBB557_56:                             # %"$3.i33"
                                        #   in Loop: Header=BB557_53 Depth=1
	movl	%edx, %eax
	movl	$4082, %ecx                     # imm = 0xFF2
	cmpl	$1114112, %eax                  # imm = 0x110000
	je	.LBB557_51
# %bb.57:                               # %"$5.i34"
                                        #   in Loop: Header=BB557_53 Depth=1
	cmpl	$2047, %edx                     # imm = 0x7FF
	jg	.LBB557_59
# %bb.58:                               # %"$8.i35"
                                        #   in Loop: Header=BB557_53 Depth=1
	shrq	$6, %rax
	andl	$63, %edx
	shlq	$8, %rdx
	orq	%rax, %rdx
	orq	$32960, %rdx                    # imm = 0x80C0
	jmp	.LBB557_55
.LBB557_59:                             # %"$7.i36"
                                        #   in Loop: Header=BB557_53 Depth=1
	cmpl	$65535, %eax                    # imm = 0xFFFF
	jg	.LBB557_61
# %bb.60:                               # %"$10.i37"
                                        #   in Loop: Header=BB557_53 Depth=1
	movq	%rax, %rcx
	shrq	$12, %rcx
	leal	(,%rax,4), %edx
	andl	$16128, %edx                    # imm = 0x3F00
	andl	$63, %eax
	shlq	$16, %rax
	orq	%rdx, %rax
	orq	%rcx, %rax
	orq	$8421600, %rax                  # imm = 0x8080E0
	jmp	.LBB557_62
.LBB557_61:                             # %"$9.i38"
                                        #   in Loop: Header=BB557_53 Depth=1
	movl	%eax, %ecx
	shrl	$18, %ecx
	andl	$7, %ecx
	movq	%rax, %rdx
	shrq	$4, %rdx
	andl	$16128, %edx                    # imm = 0x3F00
	orq	%rcx, %rdx
	movl	%eax, %ecx
	shll	$10, %ecx
	andl	$4128768, %ecx                  # imm = 0x3F0000
	orq	%rdx, %rcx
	andl	$63, %eax
	shlq	$24, %rax
	orq	%rcx, %rax
	orq	%r14, %rax
.LBB557_62:                             # %"$2.i39"
                                        #   in Loop: Header=BB557_53 Depth=1
	movq	%rax, %rdx
	jmp	.LBB557_55
.LBB557_63:                             # %"$34"
	movl	%edi, %eax
	andl	$-33, %eax
	addl	$-65, %eax
	cmpl	$26, %eax
	jb	.LBB557_65
# %bb.64:                               # %"$30"
	subq	$32, %rsp
	movq	%r14, %rcx
	movl	%edi, %edx
	callq	strchr
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB557_80
.LBB557_65:                             # %"$45"
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	$4, (%rbx)
	leaq	16(%rbx), %rsi
	movq	$2, 16(%rbx)
	movq	env(%rip), %rax
	movq	%rax, 24(%rbx)
	movq	%rsi, env(%rip)
	.p2align	4, 0x90
.LBB557_66:                             # %"$46"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	movl	%edi, %ecx
	movq	%rbx, %rdx
	callq	byteSym
	callq	*($Get)(%rip)
	addq	$32, %rsp
	movl	%eax, %edi
	andl	$-33, %eax
	addl	$-65, %eax
	cmpl	$92, %edi
	je	.LBB557_70
# %bb.67:                               # %"$46"
                                        #   in Loop: Header=BB557_66 Depth=1
	cmpl	$26, %eax
	jb	.LBB557_70
# %bb.68:                               # %"$55"
                                        #   in Loop: Header=BB557_66 Depth=1
	subq	$32, %rsp
	movq	%r14, %rcx
	movl	%edi, %edx
	callq	strchr
	addq	$32, %rsp
	leal	-48(%rdi), %ecx
	cmpl	$10, %ecx
	jb	.LBB557_70
# %bb.69:                               # %"$55"
                                        #   in Loop: Header=BB557_66 Depth=1
	testq	%rax, %rax
	je	.LBB557_72
.LBB557_70:                             # %"$59"
                                        #   in Loop: Header=BB557_66 Depth=1
	cmpl	$92, %edi
	jne	.LBB557_66
# %bb.71:                               # %"$61"
                                        #   in Loop: Header=BB557_66 Depth=1
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	jmp	.LBB557_66
.LBB557_72:                             # %"$60"
	movq	(%rsi), %rsi
	subq	$32, %rsp
	leaq	SymTab+112(%rip), %rdx
	movq	%rsi, %rcx
	callq	isIntern
	addq	$32, %rsp
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB557_74
# %bb.73:                               # %"$3.i71"
	movq	gcData(%rip), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rax
	movq	(%rcx), %rcx
	movq	8(%rcx), %r9
	subq	$48, %rsp
	movq	%rax, 32(%rsp)
	movb	$0, 40(%rsp)
	leaq	SymTab+8(%rip), %rdx
	xorl	%ecx, %ecx
	movq	%rsi, %r8
	callq	intern
	addq	$48, %rsp
	movq	%rax, %r15
.LBB557_74:                             # %requestSym.exit
	movq	24(%rbx), %rax
.LBB557_75:                             # %"$4"
	movq	%rax, env(%rip)
.LBB557_85:                             # %"$4"
	movq	%r15, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB557_76:                             # %"$5.i29"
	cmpl	$2047, %edx                     # imm = 0x7FF
	jg	.LBB557_78
# %bb.77:                               # %"$8.i"
	shrq	$6, %rax
	andl	$63, %edx
	shlq	$8, %rdx
	orq	%rax, %rdx
	orq	$32960, %rdx                    # imm = 0x80C0
	jmp	.LBB557_19
.LBB557_78:                             # %"$7.i"
	cmpl	$65535, %eax                    # imm = 0xFFFF
	jg	.LBB557_86
# %bb.79:                               # %"$10.i30"
	movq	%rax, %rcx
	shrq	$12, %rcx
	leal	(,%rax,4), %edx
	andl	$16128, %edx                    # imm = 0x3F00
	andl	$63, %eax
	shlq	$16, %rax
	orq	%rdx, %rax
	orq	%rcx, %rax
	orq	$8421600, %rax                  # imm = 0x8080E0
	movq	%rax, %rdx
	jmp	.LBB557_19
.LBB557_80:                             # %"$41"
	cmpl	$128, %edi
	jl	.LBB557_81
# %bb.87:                               # %"$3.i49"
	movl	$4082, %ebx                     # imm = 0xFF2
	cmpl	$255, %edi
	je	.LBB557_83
# %bb.88:                               # %"$5.i51"
	testb	$32, %dil
	jne	.LBB557_90
# %bb.89:                               # %"$7.i52"
	andl	$31, %edi
	movl	%edi, %r14d
	jmp	.LBB557_94
.LBB557_86:                             # %"$9.i"
	movl	%eax, %ecx
	shrl	$18, %ecx
	andl	$7, %ecx
	movq	%rax, %rdx
	shrq	$4, %rdx
	andl	$16128, %edx                    # imm = 0x3F00
	orq	%rcx, %rdx
	movl	%eax, %ecx
	shll	$10, %ecx
	andl	$4128768, %ecx                  # imm = 0x3F0000
	orq	%rdx, %rcx
	andl	$63, %eax
	shlq	$24, %rax
	orq	%rcx, %rax
	movl	$2155905264, %edx               # imm = 0x808080F0
	orq	%rax, %rdx
	jmp	.LBB557_19
.LBB557_90:                             # %"$8.i54"
	testb	$16, %dil
	jne	.LBB557_92
# %bb.91:                               # %"$10.i55"
	andl	$15, %edi
	jmp	.LBB557_93
.LBB557_92:                             # %"$11.i56"
	andl	$7, %edi
	shll	$6, %edi
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	andl	$63, %eax
	orl	%edi, %eax
	movl	%eax, %edi
.LBB557_93:                             # %"$12.i57"
	shll	$6, %edi
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
	movl	%eax, %r14d
	andl	$63, %r14d
	orl	%edi, %r14d
.LBB557_94:                             # %getChar.exit
	movl	%r14d, %edi
	shll	$6, %edi
	subq	$32, %rsp
	callq	*($Get)(%rip)
	addq	$32, %rsp
                                        # kill: def $eax killed $eax def $rax
	andl	$63, %eax
	orl	%eax, %edi
	cmpl	$127, %edi
	jle	.LBB557_81
# %bb.95:                               # %"$3.i61"
	cmpl	$1114112, %edi                  # imm = 0x110000
	je	.LBB557_83
# %bb.96:                               # %"$5.i62"
	cmpl	$2047, %edi                     # imm = 0x7FF
	jg	.LBB557_98
# %bb.97:                               # %"$8.i63"
	andl	$63, %edi
	shll	$8, %edi
	orl	%edi, %r14d
	orl	$32960, %r14d                   # imm = 0x80C0
	movq	%r14, %rbx
	jmp	.LBB557_82
.LBB557_98:                             # %"$7.i64"
	cmpl	$65535, %edi                    # imm = 0xFFFF
	jg	.LBB557_100
# %bb.99:                               # %"$10.i65"
	movl	%r14d, %eax
	shrl	$6, %eax
	andl	$63, %r14d
	shll	$8, %r14d
	orl	%eax, %r14d
	andl	$63, %edi
	shll	$16, %edi
	orl	%r14d, %edi
	orl	$8421600, %edi                  # imm = 0x8080E0
	movq	%rdi, %rbx
	jmp	.LBB557_82
.LBB557_100:                            # %"$9.i66"
	movl	%r14d, %ecx
	shrl	$12, %ecx
	movl	%r14d, %edx
	andl	$4032, %edx                     # imm = 0xFC0
	andl	$63, %r14d
	shll	$16, %r14d
	shll	$24, %eax
	leal	(%rcx,%rdx,4), %ecx
	orl	%r14d, %ecx
	leal	-2139062032(%rax,%rcx), %ebx
	jmp	.LBB557_82
.LBB557_101:                            # %"$6.i75"
	subq	$32, %rsp
	xorl	%ecx, %ecx
	movq	%rbx, %rdx
	callq	nameErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 getBinary;
	.scl	2;
	.type	32;
	.endef
	.globl	getBinary                       # -- Begin function getBinary
	.p2align	4, 0x90
getBinary:                              # @getBinary
.seh_proc getBinary
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	($InFile)(%rip), %rdi
	movl	24(%rdi), %ecx
	cmpl	28(%rdi), %ecx
	jne	.LBB558_12
# %bb.1:                                # %"$2"
	testl	%ecx, %ecx
	js	.LBB558_10
# %bb.2:                                # %"$5"
	movl	$0, 24(%rdi)
	movl	8(%rdi), %ecx
	leaq	32(%rdi), %rsi
	jmp	.LBB558_3
	.p2align	4, 0x90
.LBB558_8:                              # %"$9.i"
                                        #   in Loop: Header=BB558_3 Depth=1
	movl	8(%rdi), %ecx
.LBB558_3:                              # %"$5"
                                        # =>This Inner Loop Header: Depth=1
	movl	$4096, %r8d                     # imm = 0x1000
	movq	%rsi, %rdx
	callq	read
	testl	%eax, %eax
	jns	.LBB558_9
# %bb.4:                                # %"$3.i"
                                        #   in Loop: Header=BB558_3 Depth=1
	callq	gErrno
	cmpl	$2, %eax
	jne	.LBB558_5
# %bb.6:                                # %"$6.i"
                                        #   in Loop: Header=BB558_3 Depth=1
	cmpl	$0, ($Signal)(%rip)
	je	.LBB558_8
# %bb.7:                                # %"$8.i"
                                        #   in Loop: Header=BB558_3 Depth=1
	xorl	%ecx, %ecx
	callq	sighandler
	jmp	.LBB558_8
.LBB558_9:                              # %slow.exit
	movl	%eax, 28(%rdi)
	xorl	%ecx, %ecx
	testl	%eax, %eax
	je	.LBB558_10
.LBB558_12:                             # %"$3"
	leal	1(%rcx), %eax
	movl	%eax, 24(%rdi)
	movslq	%ecx, %rax
	movzbl	32(%rdi,%rax), %eax
	jmp	.LBB558_11
.LBB558_5:                              # %slow.exit.thread
	movl	$0, 28(%rdi)
.LBB558_10:                             # %"$6"
	movl	$-1, %eax
.LBB558_11:                             # %"$6"
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 twice;
	.scl	2;
	.type	32;
	.endef
	.globl	twice                           # -- Begin function twice
	.p2align	4, 0x90
twice:                                  # @twice
.seh_proc twice
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	testb	$2, %sil
	jne	.LBB559_1
# %bb.6:                                # %"$3"
	movq	-4(%rsi), %rcx
	movq	4(%rsi), %rax
	leaq	(%rcx,%rcx), %rdx
	movq	%rdx, -4(%rsi)
	testb	$4, %al
	jne	.LBB559_8
# %bb.7:
	movq	%rsi, %rdi
	movq	%rcx, %rdx
	jmp	.LBB559_9
	.p2align	4, 0x90
.LBB559_8:                              # %"$3.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rdi
	movq	-4(%rax), %rdx
	movq	4(%rax), %rax
	shrdq	$63, %rdx, %rcx
	movq	%rcx, -4(%rdi)
	testb	$4, %al
	movq	%rdx, %rcx
	jne	.LBB559_8
.LBB559_9:                              # %"$4.i"
	movq	%rax, %rbx
	shrq	$4, %rbx
	shldq	$1, %rdx, %rbx
	testq	%rax, %rax
	js	.LBB559_10
# %bb.13:                               # %"$6.i"
	shlq	$4, %rbx
	orq	$2, %rbx
	movq	%rbx, %rax
	jmp	.LBB559_14
.LBB559_1:                              # %"$2"
	movq	%rsi, %rax
	addq	%rsi, %rax
	jae	.LBB559_5
# %bb.2:                                # %"$5"
	shrq	$3, %rsi
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	jne	.LBB559_4
# %bb.3:                                # %"$2.i"
	callq	gc
	movq	($Avail)(%rip), %rax
.LBB559_4:                              # %boxNum.exit
	movq	(%rax), %rcx
	movq	%rcx, ($Avail)(%rip)
	movq	%rsi, (%rax)
	movq	$2, 8(%rax)
	addq	$4, %rax
	movq	%rax, %rsi
	jmp	.LBB559_15
.LBB559_5:                              # %"$6"
	xorq	$6, %rax
	movq	%rax, %rsi
	jmp	.LBB559_15
.LBB559_10:                             # %"$5.i"
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	jne	.LBB559_12
# %bb.11:                               # %"$2.i.i"
	callq	gc
	movq	($Avail)(%rip), %rax
.LBB559_12:                             # %boxNum.exit.i
	movq	(%rax), %rcx
	movq	%rcx, ($Avail)(%rip)
	movq	%rbx, (%rax)
	movq	$2, 8(%rax)
	addq	$4, %rax
.LBB559_14:                             # %twiceBig.exit
	movq	%rax, 4(%rdi)
.LBB559_15:                             # %"$4"
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 mulu;
	.scl	2;
	.type	32;
	.endef
	.globl	mulu                            # -- Begin function mulu
	.p2align	4, 0x90
mulu:                                   # @mulu
.seh_proc mulu
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	leaq	32(%rsp), %rbp
	.seh_setframe %rbp, 32
	.seh_endprologue
	movl	$2, %r14d
	cmpq	$2, %rcx
	je	.LBB560_66
# %bb.1:                                # %"$3"
	movq	%rdx, %rdi
	movq	%rcx, %rbx
	testb	$2, %bl
	jne	.LBB560_2
# %bb.20:                               # %"$5"
	cmpq	$2, %rdi
	je	.LBB560_66
# %bb.21:                               # %"$23"
	testb	$2, %dil
	jne	.LBB560_22
# %bb.23:                               # %"$25"
	movq	($Avail)(%rip), %rcx
	testq	%rcx, %rcx
	jne	.LBB560_25
# %bb.24:                               # %"$2.i28"
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rcx
.LBB560_25:                             # %boxNum.exit29
	movq	(%rcx), %rax
	movq	%rax, ($Avail)(%rip)
	movq	$0, (%rcx)
	movq	$2, 8(%rcx)
	movq	%rcx, -24(%rbp)                 # 8-byte Spill
	leaq	4(%rcx), %r15
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdx
	movq	%r15, (%rdx)
	movq	%rdx, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rdx, -16(%rbp)                 # 8-byte Spill
	movq	%rdx, env(%rip)
	movq	%r15, -32(%rbp)                 # 8-byte Spill
	movq	%rbx, (%rbp)                    # 8-byte Spill
	jmp	.LBB560_26
	.p2align	4, 0x90
.LBB560_38:                             # %"$37"
                                        #   in Loop: Header=BB560_26 Depth=1
	movq	%rsi, 4(%rax)
.LBB560_39:                             # %"$35"
                                        #   in Loop: Header=BB560_26 Depth=1
	movq	4(%r15), %r15
	movq	4(%rdi), %rdi
	testb	$2, %dil
	movq	(%rbp), %rbx                    # 8-byte Reload
	jne	.LBB560_40
.LBB560_26:                             # %"$27"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB560_27 Depth 2
	movq	-4(%rdi), %rax
	mulq	-4(%rbx)
	movq	%rdx, %rsi
	xorl	%r12d, %r12d
	addq	-4(%r15), %rax
	setb	%r12b
	movq	%r15, %r14
	.p2align	4, 0x90
.LBB560_27:                             # %"$28"
                                        #   Parent Loop BB560_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rax, -4(%r14)
	movq	4(%r14), %r13
	testb	$2, %r13b
	je	.LBB560_31
# %bb.28:                               # %"$29"
                                        #   in Loop: Header=BB560_27 Depth=2
	movq	($Avail)(%rip), %r13
	testq	%r13, %r13
	jne	.LBB560_30
# %bb.29:                               # %"$2.i31"
                                        #   in Loop: Header=BB560_27 Depth=2
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %r13
.LBB560_30:                             # %boxNum.exit32
                                        #   in Loop: Header=BB560_27 Depth=2
	movq	(%r13), %rax
	movq	%rax, ($Avail)(%rip)
	movq	$0, (%r13)
	movq	$2, 8(%r13)
	addq	$4, %r13
	movq	%r13, 4(%r14)
.LBB560_31:                             # %"$31"
                                        #   in Loop: Header=BB560_27 Depth=2
	addq	%rsi, %r12
	movq	4(%rbx), %rbx
	testb	$2, %bl
	jne	.LBB560_33
# %bb.32:                               # %"$32"
                                        #   in Loop: Header=BB560_27 Depth=2
	movq	-4(%rdi), %rax
	mulq	-4(%rbx)
	addq	-4(%r13), %rax
	adcq	$0, %rdx
	xorl	%esi, %esi
	addq	%r12, %rax
	setb	%sil
	movq	%rdx, %r12
	movq	%r13, %r14
	jmp	.LBB560_27
	.p2align	4, 0x90
.LBB560_33:                             # %"$33"
                                        #   in Loop: Header=BB560_26 Depth=1
	shrq	$4, %rbx
	movq	%rbx, %rax
	mulq	-4(%rdi)
	xorl	%esi, %esi
	addq	-4(%r13), %rax
	setb	%sil
	addq	%r12, %rax
	adcq	%rdx, %rsi
	movq	%rax, -4(%r13)
	je	.LBB560_39
# %bb.34:                               # %"$34"
                                        #   in Loop: Header=BB560_26 Depth=1
	movq	4(%r13), %rax
	testb	$2, %al
	je	.LBB560_38
# %bb.35:                               # %"$36"
                                        #   in Loop: Header=BB560_26 Depth=1
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	jne	.LBB560_37
# %bb.36:                               # %"$2.i34"
                                        #   in Loop: Header=BB560_26 Depth=1
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rax
.LBB560_37:                             # %boxNum.exit35
                                        #   in Loop: Header=BB560_26 Depth=1
	movq	(%rax), %rcx
	movq	%rcx, ($Avail)(%rip)
	movq	%rsi, (%rax)
	movq	$2, 8(%rax)
	addq	$4, %rax
	movq	%rax, 4(%r13)
	jmp	.LBB560_39
.LBB560_2:                              # %"$6"
	shrq	$4, %rbx
	testb	$2, %dil
	jne	.LBB560_8
# %bb.3:
	movq	%rbx, %r12
	movq	%rdi, %rbx
	jmp	.LBB560_4
.LBB560_8:                              # %"$7"
	shrq	$4, %rdi
	movq	%rdi, %rax
	mulq	%rbx
	movq	%rax, %r14
	testq	%rdx, %rdx
	jne	.LBB560_67
# %bb.9:                                # %"$7"
	movabsq	$1152921504606846975, %rax      # imm = 0xFFFFFFFFFFFFFFF
	cmpq	%rax, %r14
	ja	.LBB560_67
# %bb.10:                               # %"$13"
	shlq	$4, %r14
	orq	$2, %r14
	jmp	.LBB560_66
.LBB560_22:                             # %"$26"
	shrq	$4, %rdi
	movq	%rdi, %r12
.LBB560_4:                              # %"$-1"
	movq	%r12, %rax
	mulq	-4(%rbx)
	movq	%rax, %rsi
	movq	%rdx, %r13
	movq	($Avail)(%rip), %r14
	testq	%r14, %r14
	jne	.LBB560_6
# %bb.5:                                # %"$2.i"
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %r14
.LBB560_6:                              # %boxNum.exit
	movq	(%r14), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%rsi, (%r14)
	movq	$2, 8(%r14)
	addq	$4, %r14
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdx
	movq	%r14, (%rdx)
	movq	%rdx, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rdx, env(%rip)
	movq	4(%rbx), %rsi
	testb	$4, %sil
	movq	%rdx, (%rbp)                    # 8-byte Spill
	jne	.LBB560_11
# %bb.7:
	movq	%r14, %rdi
.LBB560_15:                             # %"$17"
	shrq	$4, %rsi
	movq	%rsi, %rax
	mulq	%r12
	addq	%r13, %rax
	adcq	$0, %rdx
	movq	%rax, %rcx
	shrq	$60, %rcx
	jne	.LBB560_17
# %bb.16:                               # %"$17"
	testq	%rdx, %rdx
	jne	.LBB560_17
# %bb.18:                               # %"$21"
	shlq	$4, %rax
	orq	$2, %rax
	jmp	.LBB560_19
.LBB560_17:                             # %"$20"
	shlq	$4, %rdx
	orq	$2, %rdx
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	consNum
	addq	$32, %rsp
.LBB560_19:                             # %"$22"
	movq	%rax, 4(%rdi)
	movq	(%rbp), %rax                    # 8-byte Reload
	movq	8(%rax), %rax
	jmp	.LBB560_65
.LBB560_11:                             # %"$16.preheader"
	movq	%r14, %r15
	jmp	.LBB560_12
	.p2align	4, 0x90
.LBB560_14:                             # %boxNum.exit26
                                        #   in Loop: Header=BB560_12 Depth=1
	movq	(%rdi), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%rbx, (%rdi)
	movq	$2, 8(%rdi)
	addq	$4, %rdi
	movq	%rdi, 4(%r15)
	movq	4(%rsi), %rsi
	testb	$4, %sil
	movq	%rdi, %r15
	je	.LBB560_15
.LBB560_12:                             # %"$16"
                                        # =>This Inner Loop Header: Depth=1
	movq	%r12, %rax
	mulq	-4(%rsi)
	movq	%rax, %rbx
	addq	%r13, %rbx
	movq	%rdx, %r13
	adcq	$0, %r13
	movq	($Avail)(%rip), %rdi
	testq	%rdi, %rdi
	jne	.LBB560_14
# %bb.13:                               # %"$2.i25"
                                        #   in Loop: Header=BB560_12 Depth=1
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rdi
	jmp	.LBB560_14
.LBB560_40:                             # %"$40"
	shrq	$4, %rdi
	movq	%rdi, %rax
	mulq	-4(%rbx)
	movq	%rdx, %r12
	xorl	%esi, %esi
	addq	-4(%r15), %rax
	setb	%sil
	.p2align	4, 0x90
.LBB560_41:                             # %"$41"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, -4(%r15)
	movq	4(%r15), %r14
	testb	$2, %r14b
	je	.LBB560_45
# %bb.42:                               # %"$42"
                                        #   in Loop: Header=BB560_41 Depth=1
	movq	($Avail)(%rip), %r14
	testq	%r14, %r14
	jne	.LBB560_44
# %bb.43:                               # %"$2.i37"
                                        #   in Loop: Header=BB560_41 Depth=1
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %r14
.LBB560_44:                             # %boxNum.exit38
                                        #   in Loop: Header=BB560_41 Depth=1
	movq	(%r14), %rax
	movq	%rax, ($Avail)(%rip)
	movq	$0, (%r14)
	movq	$2, 8(%r14)
	addq	$4, %r14
	movq	%r14, 4(%r15)
.LBB560_45:                             # %"$44"
                                        #   in Loop: Header=BB560_41 Depth=1
	addq	%r12, %rsi
	movq	4(%rbx), %rbx
	testb	$2, %bl
	jne	.LBB560_47
# %bb.46:                               # %"$45"
                                        #   in Loop: Header=BB560_41 Depth=1
	movq	%rdi, %rax
	mulq	-4(%rbx)
	addq	-4(%r14), %rax
	adcq	$0, %rdx
	xorl	%r12d, %r12d
	addq	%rsi, %rax
	setb	%r12b
	movq	%rdx, %rsi
	movq	%r14, %r15
	jmp	.LBB560_41
.LBB560_67:                             # %"$12"
	shlq	$4, %rdx
	orq	$2, %rdx
	movq	%r14, %rcx
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	consNum                         # TAILCALL
.LBB560_47:                             # %"$46"
	shrq	$4, %rbx
	movq	%rbx, %rax
	mulq	%rdi
	xorl	%ebx, %ebx
	addq	-4(%r14), %rax
	setb	%bl
	addq	%rsi, %rax
	adcq	%rdx, %rbx
	movq	%rax, -4(%r14)
	movq	-32(%rbp), %rsi                 # 8-byte Reload
	movq	-24(%rbp), %rdi                 # 8-byte Reload
	je	.LBB560_53
# %bb.48:                               # %"$47"
	movq	4(%r14), %rax
	testb	$2, %al
	jne	.LBB560_49
# %bb.52:                               # %"$50"
	movq	%rbx, 4(%rax)
	jmp	.LBB560_53
.LBB560_49:                             # %"$49"
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	jne	.LBB560_51
# %bb.50:                               # %"$2.i40"
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rax
.LBB560_51:                             # %boxNum.exit41
	movq	(%rax), %rcx
	movq	%rcx, ($Avail)(%rip)
	movq	%rbx, (%rax)
	movq	$2, 8(%rax)
	addq	$4, %rax
	movq	%rax, 4(%r14)
.LBB560_53:                             # %"$48"
	movq	%rsi, -8(%rbp)
	movq	8(%rdi), %rdx
	leaq	-8(%rbp), %rax
	testb	$2, %dl
	jne	.LBB560_54
# %bb.55:                               # %"$3.i.preheader"
	addq	$8, %rdi
	leaq	-8(%rbp), %rcx
	movq	%rcx, %rax
	.p2align	4, 0x90
.LBB560_56:                             # %"$3.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rsi, %rbx
	cmpq	$0, -4(%rsi)
	cmovneq	%rcx, %rax
	movq	%rdi, %rcx
	movq	%rdx, %rsi
	leaq	4(%rdx), %rdi
	movq	4(%rdx), %rdx
	testb	$2, %dl
	je	.LBB560_56
	jmp	.LBB560_57
.LBB560_54:
	movq	%rax, %rcx
.LBB560_57:                             # %"$4.loopexit.i"
	movq	-16(%rbp), %rdi                 # 8-byte Reload
	cmpq	$2, %rdx
	jne	.LBB560_64
# %bb.58:                               # %"$7.i"
	movq	-4(%rsi), %rdx
	testq	%rdx, %rdx
	je	.LBB560_61
# %bb.59:                               # %"$11.i"
	movabsq	$1152921504606846975, %rax      # imm = 0xFFFFFFFFFFFFFFF
	incq	%rax
	cmpq	%rax, %rdx
	jae	.LBB560_64
# %bb.60:                               # %"$12.i"
	shlq	$4, %rdx
	orq	$2, %rdx
	movq	%rdx, (%rcx)
	jmp	.LBB560_64
.LBB560_61:                             # %"$10.i"
	movq	(%rax), %rdx
	movq	-4(%rdx), %rcx
	movabsq	$1152921504606846975, %rbx      # imm = 0xFFFFFFFFFFFFFFF
	incq	%rbx
	cmpq	%rbx, %rcx
	jae	.LBB560_62
# %bb.63:                               # %"$14.i"
	shlq	$4, %rcx
	orq	$2, %rcx
	movq	%rcx, (%rax)
	jmp	.LBB560_64
.LBB560_62:                             # %"$15.i"
	movq	$2, 4(%rdx)
.LBB560_64:                             # %zapZero.exit
	movq	-8(%rbp), %r14
	movq	8(%rdi), %rax
.LBB560_65:                             # %"$2"
	movq	%rax, env(%rip)
.LBB560_66:                             # %"$2"
	movq	%r14, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 putPlio;
	.scl	2;
	.type	32;
	.endef
	.globl	putPlio                         # -- Begin function putPlio
	.p2align	4, 0x90
putPlio:                                # @putPlio
.seh_proc putPlio
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	($Ptr)(%rip), %rax
	movb	%cl, (%rax)
	incq	%rax
	movq	%rax, ($Ptr)(%rip)
	cmpq	($End)(%rip), %rax
	je	.LBB561_2
# %bb.1:                                # %"$3"
	addq	$40, %rsp
	retq
.LBB561_2:                              # %"$2"
	xorl	%ecx, %ecx
	callq	sizeErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 getPlio;
	.scl	2;
	.type	32;
	.endef
	.globl	getPlio                         # -- Begin function getPlio
	.p2align	4, 0x90
getPlio:                                # @getPlio
# %bb.0:                                # %"$1"
	movq	($Ptr)(%rip), %rax
	leaq	1(%rax), %rcx
	movq	%rcx, ($Ptr)(%rip)
	movzbl	(%rax), %eax
	retq
                                        # -- End function
	.def	 prin;
	.scl	2;
	.type	32;
	.endef
	.globl	prin                            # -- Begin function prin
	.p2align	4, 0x90
prin:                                   # @prin
.seh_proc prin
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rcx, %rsi
	leaq	SymTab+8(%rip), %rdi
.LBB563_1:                              # %tailrecurse
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB563_13 Depth 2
	cmpl	$0, ($Signal)(%rip)
	je	.LBB563_3
# %bb.2:                                # %"$2"
                                        #   in Loop: Header=BB563_1 Depth=1
	xorl	%ecx, %ecx
	callq	sighandler
.LBB563_3:                              # %"$3"
                                        #   in Loop: Header=BB563_1 Depth=1
	cmpq	%rdi, %rsi
	je	.LBB563_10
# %bb.4:                                # %"$4"
                                        #   in Loop: Header=BB563_1 Depth=1
	testb	$2, %sil
	jne	.LBB563_5
# %bb.8:                                # %"$7"
                                        #   in Loop: Header=BB563_1 Depth=1
	testb	$4, %sil
	jne	.LBB563_9
# %bb.11:                               # %"$9"
                                        #   in Loop: Header=BB563_1 Depth=1
	testb	$15, %sil
	jne	.LBB563_15
# %bb.12:                               # %"$12"
                                        #   in Loop: Header=BB563_1 Depth=1
	cmpq	%rsp, ($StkLimit)(%rip)
	ja	.LBB563_31
	.p2align	4, 0x90
.LBB563_13:                             # %"$15"
                                        #   Parent Loop BB563_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rsi), %rcx
	callq	prin
	movq	8(%rsi), %rsi
	cmpq	%rdi, %rsi
	je	.LBB563_10
# %bb.14:                               # %"$16"
                                        #   in Loop: Header=BB563_13 Depth=2
	testb	$15, %sil
	je	.LBB563_13
	jmp	.LBB563_1
.LBB563_5:                              # %"$8"
	testb	$8, %sil
	je	.LBB563_7
# %bb.6:                                # %"$2.i"
	movb	$45, %cl
	callq	*($Put)(%rip)
.LBB563_7:                              # %outNum.exit
	shrq	$4, %rsi
	movq	%rsi, %rcx
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	jmp	outWord                         # TAILCALL
.LBB563_9:                              # %"$10"
	movq	$0, 32(%rsp)
	movq	%rsi, %rcx
	movq	$-1, %rdx
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	callq	fmtNum
.LBB563_10:                             # %"$5"
	nop
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
.LBB563_15:                             # %"$11"
	movq	-8(%rsi), %rsi
	testb	$8, %sil
	jne	.LBB563_16
	.p2align	4, 0x90
# %bb.22:                               # %"$26"
	testb	$6, %sil
	jne	.LBB563_23
.LBB563_21:                             # %"$26"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rsi), %rsi
	testb	$6, %sil
	je	.LBB563_21
.LBB563_23:                             # %"$2.i8.preheader"
	xorl	%ecx, %ecx
	testq	%rcx, %rcx
	jne	.LBB563_29
	.p2align	4, 0x90
.LBB563_25:                             # %"$2.i.i"
	cmpq	$2, %rsi
	je	.LBB563_10
# %bb.26:                               # %"$5.i.i"
	testb	$2, %sil
	jne	.LBB563_27
# %bb.28:                               # %"$7.i.i"
	movq	-4(%rsi), %rcx
	movq	4(%rsi), %rsi
	jmp	.LBB563_29
.LBB563_27:                             # %"$8.i.i"
	movq	%rsi, %rcx
	shrq	$4, %rcx
	movl	$2, %esi
	.p2align	4, 0x90
.LBB563_29:                             # %symByte.exit.i
                                        # =>This Inner Loop Header: Depth=1
	testb	%cl, %cl
	je	.LBB563_10
# %bb.30:                               # %"$3.i"
                                        #   in Loop: Header=BB563_29 Depth=1
	movq	%rcx, %rdi
	shrq	$8, %rdi
                                        # kill: def $cl killed $cl killed $rcx
	callq	*($Put)(%rip)
	movq	%rdi, %rcx
	testq	%rcx, %rcx
	jne	.LBB563_29
	jmp	.LBB563_25
.LBB563_16:                             # %"$21"
	movb	$123, %cl
	callq	*($Put)(%rip)
	movq	%rsi, %rdi
	andq	$-9, %rdi
	testb	$6, %sil
	jne	.LBB563_18
	.p2align	4, 0x90
.LBB563_17:                             # %"$23"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rdi), %rdi
	testb	$6, %dil
	je	.LBB563_17
.LBB563_18:                             # %"$24"
	movl	%edi, %eax
	shrl	$24, %eax
	movq	%rdi, %rcx
	shrq	$36, %rcx
	andl	$65280, %ecx                    # imm = 0xFF00
	orl	%eax, %ecx
	je	.LBB563_20
# %bb.19:                               # %"$2.i11"
                                        # kill: def $ecx killed $ecx killed $rcx
	callq	outAo
.LBB563_20:                             # %prExt.exit
	movl	%edi, %eax
	shrl	$4, %eax
	andl	$1048575, %eax                  # imm = 0xFFFFF
	movq	%rdi, %rdx
	shrq	$12, %rdx
	andl	$-1048576, %edx                 # imm = 0xFFF00000
	orq	%rax, %rdx
	shrq	$20, %rdi
	movabsq	$4393751543808, %rcx            # imm = 0x3FF00000000
	andq	%rdi, %rcx
	orq	%rdx, %rcx
	callq	outOct
	movb	$125, %cl
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	rex64 jmpq	*($Put)(%rip)           # TAILCALL
.LBB563_31:                             # %"$13"
	xorl	%ecx, %ecx
	callq	stkErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 initOutFile;
	.scl	2;
	.type	32;
	.endef
	.globl	initOutFile                     # -- Begin function initOutFile
	.p2align	4, 0x90
initOutFile:                            # @initOutFile
.seh_proc initOutFile
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movl	%ecx, %esi
	movl	($OutFDs)(%rip), %ebx
	cmpl	%ecx, %ebx
	jle	.LBB564_2
# %bb.1:                                # %"$1.$3_crit_edge"
	movq	($OutFiles)(%rip), %rdi
	jmp	.LBB564_5
.LBB564_2:                              # %"$2"
	movq	($OutFiles)(%rip), %rcx
	leal	1(%rsi), %ebp
	movl	%ebp, ($OutFDs)(%rip)
	movslq	%ebp, %rdx
	shlq	$3, %rdx
	callq	realloc
	testq	%rax, %rax
	je	.LBB564_9
# %bb.3:                                # %alloc.exit
	movq	%rax, %rdi
	movq	%rax, ($OutFiles)(%rip)
	.p2align	4, 0x90
.LBB564_4:                              # %"$4"
                                        # =>This Inner Loop Header: Depth=1
	movslq	%ebx, %rbx
	movq	$0, (%rdi,%rbx,8)
	incl	%ebx
	cmpl	%ebx, %ebp
	jne	.LBB564_4
.LBB564_5:                              # %"$3"
	movslq	%esi, %rbp
	movq	(%rdi,%rbp,8), %rbx
	testq	%rbx, %rbx
	jne	.LBB564_8
# %bb.6:                                # %"$8"
	movl	$4105, %ecx                     # imm = 0x1009
	callq	malloc
	testq	%rax, %rax
	je	.LBB564_9
# %bb.7:                                # %alloc.exit7
	movq	%rax, %rbx
	movq	%rax, (%rdi,%rbp,8)
.LBB564_8:                              # %"$9"
	movl	%esi, (%rbx)
	movl	%esi, %ecx
	callq	isatty
	testl	%eax, %eax
	setne	4104(%rbx)
	movl	$0, 4(%rbx)
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	retq
.LBB564_9:                              # %"$2.i"
	leaq	.L$3(%rip), %rcx
	xorl	%edx, %edx
	callq	giveup
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 putOut;
	.scl	2;
	.type	32;
	.endef
	.globl	putOut                          # -- Begin function putOut
	.p2align	4, 0x90
putOut:                                 # @putOut
.seh_proc putOut
# %bb.0:                                # %"$1"
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$72, %rsp
	.seh_stackalloc 72
	.seh_endprologue
	testb	%cl, %cl
	js	.LBB565_9
# %bb.1:                                # %"$4"
	movzbl	%cl, %eax
	movq	%rax, ($IoChar)(%rip)
.LBB565_2:                              # %"$2"
	movq	env+72(%rip), %rdi
	shlq	$4, %rax
	orq	$2, %rax
	leaq	SymTab+8(%rip), %rbx
	cmpq	$2, %rax
	movq	%rbx, %rsi
	je	.LBB565_4
# %bb.3:                                # %"$3.i"
	movq	%rax, %rcx
	xorl	%edx, %edx
	callq	consSym
	movq	%rax, %rsi
.LBB565_4:                              # %consStr.exit
	movq	24(%rdi), %rax
	cmpq	%rbx, %rax
	je	.LBB565_8
# %bb.5:                                # %"$13"
	movq	SymTab+456(%rip), %r14
	movq	env(%rip), %rcx
	movq	%r14, 32(%rsp)
	movq	%rcx, 40(%rsp)
	movq	SymTab+472(%rip), %rbx
	movq	%rbx, 48(%rsp)
	leaq	32(%rsp), %rcx
	movq	%rcx, 56(%rsp)
	leaq	48(%rsp), %rcx
	movq	%rcx, env(%rip)
	movq	16(%rdi), %rcx
	movq	%rcx, ($Put)(%rip)
	movq	(%rdi), %rcx
	movq	%rcx, env+72(%rip)
	movq	%rax, SymTab+456(%rip)
	movq	%rsi, SymTab+472(%rip)
	movq	8(%rdi), %rcx
	testb	$14, %cl
	jne	.LBB565_7
# %bb.6:                                # %"$5.i"
	callq	evList
.LBB565_7:                              # %put1.exit
	movq	%rbx, SymTab+472(%rip)
	movq	%r14, SymTab+456(%rip)
	movq	%rdi, env+72(%rip)
	leaq	putOut(%rip), %rax
	movq	%rax, ($Put)(%rip)
	movq	40(%rsp), %rax
	movq	%rax, env(%rip)
.LBB565_8:                              # %"$14"
	movq	%rsi, 24(%rdi)
	jmp	.LBB565_11
.LBB565_9:                              # %"$3"
	testb	$64, %cl
	jne	.LBB565_12
# %bb.10:                               # %"$6"
	movzbl	%cl, %eax
	movq	($IoIx)(%rip), %rcx
	addq	$8, %rcx
	movq	%rcx, ($IoIx)(%rip)
                                        # kill: def $cl killed $cl killed $rcx
	shlq	%cl, %rax
	orq	($IoChar)(%rip), %rax
	movq	%rax, ($IoChar)(%rip)
	decl	($IoCnt)(%rip)
	jne	.LBB565_11
	jmp	.LBB565_2
.LBB565_12:                             # %"$5"
	testb	$32, %cl
	jne	.LBB565_15
# %bb.13:                               # %"$10"
	movl	$1, ($IoCnt)(%rip)
	jmp	.LBB565_14
.LBB565_15:                             # %"$9"
	testb	$16, %cl
	jne	.LBB565_17
# %bb.16:                               # %"$12"
	movl	$2, ($IoCnt)(%rip)
	jmp	.LBB565_14
.LBB565_17:                             # %"$11"
	movl	$3, ($IoCnt)(%rip)
.LBB565_14:                             # %"$10"
	movq	$0, ($IoIx)(%rip)
	movzbl	%cl, %eax
	movq	%rax, ($IoChar)(%rip)
.LBB565_11:                             # %"$7"
	addq	$72, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 getIn;
	.scl	2;
	.type	32;
	.endef
	.globl	getIn                           # -- Begin function getIn
	.p2align	4, 0x90
getIn:                                  # @getIn
.seh_proc getIn
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	($IoChar)(%rip), %rax
	testq	%rax, %rax
	je	.LBB566_2
# %bb.1:                                # %"$4"
	movq	%rax, %rcx
	shrq	$8, %rcx
	jmp	.LBB566_14
.LBB566_2:                              # %"$3"
	movq	env+64(%rip), %rsi
	movl	24(%rsi), %ecx
	movl	%ecx, ($Chr)(%rip)
	movq	16(%rsi), %rax
	movq	%rax, ($Get)(%rip)
	movq	(%rsi), %rax
	movq	%rax, env+64(%rip)
	movq	8(%rsi), %rax
	testb	$6, %al
	jne	.LBB566_6
# %bb.3:                                # %"$6"
	testb	$8, %al
	jne	.LBB566_4
# %bb.5:                                # %"$8"
	movq	%rax, %rcx
	callq	evList
	movl	($Chr)(%rip), %ecx
	jmp	.LBB566_6
.LBB566_4:                              # %"$9"
	movq	(%rax), %rax
.LBB566_6:                              # %"$5"
	movq	%rsi, env+64(%rip)
	leaq	getIn(%rip), %rdx
	movq	%rdx, ($Get)(%rip)
	movl	%ecx, 24(%rsi)
	movl	$-1, %ecx
	leaq	SymTab+8(%rip), %rdx
	cmpq	%rdx, %rax
	je	.LBB566_15
# %bb.7:                                # %"$10"
	testb	$8, %al
	je	.LBB566_16
# %bb.8:                                # %"$13"
	movq	-8(%rax), %rcx
	testb	$8, %cl
	jne	.LBB566_9
	.p2align	4, 0x90
# %bb.11:                               # %"$17"
	testb	$6, %cl
	jne	.LBB566_12
.LBB566_10:                             # %"$17"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rcx
	testb	$6, %cl
	je	.LBB566_10
.LBB566_12:                             # %"$14"
	testb	$2, %cl
	je	.LBB566_9
# %bb.13:                               # %"$20"
	movq	%rcx, %rax
	shrq	$4, %rax
	shrq	$12, %rcx
.LBB566_14:                             # %"$2.sink.split"
	movq	%rcx, ($IoChar)(%rip)
	movzbl	%al, %ecx
.LBB566_15:                             # %"$2"
	movl	%ecx, ($Chr)(%rip)
	movl	%ecx, %eax
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB566_9:                              # %"$19"
	xorl	%ecx, %ecx
	movq	%rax, %rdx
	callq	charErr
.LBB566_16:                             # %"$12"
	xorl	%ecx, %ecx
	movq	%rax, %rdx
	callq	symErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 charErr;
	.scl	2;
	.type	32;
	.endef
	.globl	charErr                         # -- Begin function charErr
	.p2align	4, 0x90
charErr:                                # @charErr
.seh_proc charErr
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	leaq	.L$12(%rip), %r8
	xorl	%r9d, %r9d
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 ctOpen;
	.scl	2;
	.type	32;
	.endef
	.globl	ctOpen                          # -- Begin function ctOpen
	.p2align	4, 0x90
ctOpen:                                 # @ctOpen
.seh_proc ctOpen
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rdx, %rbx
	movq	%rcx, %r14
	movl	%ebx, %eax
	andl	$14, %eax
	cmpl	$8, %eax
	jne	.LBB568_55
# %bb.1:                                # %"$4"
	movq	%r8, %r15
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rbx
	jne	.LBB568_12
# %bb.2:                                # %"$6"
	movl	$-1, 8(%r15)
	movq	env+32(%rip), %rax
	movq	env+40(%rip), %rcx
	movq	%rcx, %rdx
	orq	%rax, %rdx
	je	.LBB568_56
# %bb.3:                                # %"$5.i"
	testq	%rcx, %rcx
	je	.LBB568_4
# %bb.5:                                # %"$7.i"
	testq	%rax, %rax
	je	.LBB568_7
# %bb.6:                                # %"$9.i"
	xorl	%edx, %edx
	cmpq	%rax, %rcx
	seta	%dl
	xorl	%ebx, %ebx
	cmpq	%rcx, %rax
	seta	%bl
	cmpq	%rsp, %rax
	cmoval	%edx, %ebx
	cmpb	$1, %bl
	jne	.LBB568_7
.LBB568_4:                              # %"$8.i"
	movq	8(%rax), %rax
	addq	$8, %rax
	jmp	.LBB568_8
.LBB568_12:                             # %"$5"
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, %rbx
	jne	.LBB568_22
# %bb.13:                               # %"$8"
	movl	$-1, 8(%r15)
	movq	env+32(%rip), %rax
	movq	env+40(%rip), %rcx
	movq	%rcx, %rdx
	orq	%rax, %rdx
	je	.LBB568_56
# %bb.14:                               # %"$5.i7"
	testq	%rcx, %rcx
	je	.LBB568_15
# %bb.16:                               # %"$7.i9"
	testq	%rax, %rax
	je	.LBB568_18
# %bb.17:                               # %"$9.i11"
	xorl	%edx, %edx
	cmpq	%rax, %rcx
	seta	%dl
	xorl	%ebx, %ebx
	cmpq	%rcx, %rax
	seta	%bl
	cmpq	%rsp, %rax
	cmoval	%edx, %ebx
	cmpb	$1, %bl
	jne	.LBB568_18
.LBB568_15:                             # %"$8.i8"
	movq	8(%rax), %rax
	addq	$8, %rax
	jmp	.LBB568_19
.LBB568_22:                             # %"$3.i22"
	movq	-8(%rbx), %rcx
	testb	$8, %cl
	je	.LBB568_25
# %bb.23:                               # %"$6.i23"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rbx, %rdx
	callq	nameErr
	.p2align	4, 0x90
.LBB568_24:                             # %"$8.i24"
                                        #   in Loop: Header=BB568_25 Depth=1
	movq	8(%rcx), %rcx
.LBB568_25:                             # %"$8.i24"
                                        # =>This Inner Loop Header: Depth=1
	testb	$6, %cl
	je	.LBB568_24
# %bb.26:                               # %xName.exit
	movl	$1, %eax
	testb	$4, %cl
	movq	%rcx, %rdx
	je	.LBB568_29
# %bb.27:                               # %"$3.i.i.preheader"
	movl	$1, %eax
	movq	%rcx, %rdx
	.p2align	4, 0x90
.LBB568_28:                             # %"$3.i.i"
                                        # =>This Inner Loop Header: Depth=1
	addq	$8, %rax
	movq	4(%rdx), %rdx
	testb	$4, %dl
	jne	.LBB568_28
.LBB568_29:                             # %"$4.i.i"
	shrq	$4, %rdx
	je	.LBB568_31
	.p2align	4, 0x90
.LBB568_30:                             # %"$6.i.i"
                                        # =>This Inner Loop Header: Depth=1
	incq	%rax
	shrq	$8, %rdx
	jne	.LBB568_30
.LBB568_31:                             # %bufSize.exit.i
	testb	$2, %cl
	jne	.LBB568_32
# %bb.33:                               # %"$3.i28"
	movq	-4(%rcx), %rdx
	movq	%rdx, %rdi
	shrq	$8, %rdi
	cmpb	$126, %dl
	jne	.LBB568_35
	jmp	.LBB568_40
.LBB568_7:                              # %"$15.i"
	movq	8(%rcx), %rax
.LBB568_8:                              # %currFd.exit
	movl	(%rax), %esi
	.p2align	4, 0x90
.LBB568_9:                              # %"$2.i"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	movl	%esi, %ecx
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	movb	$1, %r9b
	callq	rdLock
	addq	$32, %rsp
	testl	%eax, %eax
	jns	.LBB568_54
# %bb.10:                               # %"$3.i"
                                        #   in Loop: Header=BB568_9 Depth=1
	subq	$32, %rsp
	callq	gErrno
	addq	$32, %rsp
	cmpl	$2, %eax
	je	.LBB568_9
	jmp	.LBB568_11
.LBB568_32:                             # %"$2.i27"
	movq	%rcx, %rdx
	shrq	$4, %rdx
	movq	%rcx, %rdi
	shrq	$12, %rdi
	cmpb	$126, %dl
	je	.LBB568_40
.LBB568_35:                             # %"$4.i"
	cmpb	$64, %dl
	je	.LBB568_39
# %bb.36:                               # %"$4.i"
	cmpb	$43, %dl
	jne	.LBB568_42
# %bb.37:                               # %"$9.i29"
	cmpb	$126, %dil
	je	.LBB568_40
# %bb.38:                               # %"$9.i29"
	cmpb	$64, %dil
	jne	.LBB568_42
.LBB568_39:                             # %"$11.i"
	movq	($PilLen)(%rip), %rdx
	jmp	.LBB568_41
.LBB568_18:                             # %"$15.i13"
	movq	8(%rcx), %rax
.LBB568_19:                             # %currFd.exit17
	movl	(%rax), %esi
	.p2align	4, 0x90
.LBB568_20:                             # %"$2.i18"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	movl	%esi, %ecx
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	movb	$1, %r9b
	callq	wrLock
	addq	$32, %rsp
	testl	%eax, %eax
	jns	.LBB568_54
# %bb.21:                               # %"$3.i19"
                                        #   in Loop: Header=BB568_20 Depth=1
	subq	$32, %rsp
	callq	gErrno
	addq	$32, %rsp
	cmpl	$2, %eax
	je	.LBB568_20
	jmp	.LBB568_11
.LBB568_40:                             # %"$17.i"
	movq	($UsrLen)(%rip), %rdx
.LBB568_41:                             # %pathSize.exit
	leaq	-1(%rax,%rdx), %rax
.LBB568_42:                             # %pathSize.exit
	addq	$15, %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	subq	$32, %rsp
	movq	%rdi, %rdx
	callq	pathString
	addq	$32, %rsp
	movb	(%rdi), %r12b
	leaq	1(%rdi), %rsi
	cmpb	$43, %r12b
	cmovneq	%rdi, %rsi
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	openRdWrCreate
	addq	$32, %rsp
	movl	%eax, %edi
	testl	%eax, %eax
	jns	.LBB568_48
	jmp	.LBB568_43
	.p2align	4, 0x90
.LBB568_46:                             # %"$17"
                                        #   in Loop: Header=BB568_43 Depth=1
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	openRdWrCreate
	addq	$32, %rsp
	testl	%eax, %eax
	jns	.LBB568_47
.LBB568_43:                             # %"$12"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	callq	gErrno
	addq	$32, %rsp
	cmpl	$2, %eax
	jne	.LBB568_57
# %bb.44:                               # %"$15"
                                        #   in Loop: Header=BB568_43 Depth=1
	cmpl	$0, ($Signal)(%rip)
	je	.LBB568_46
# %bb.45:                               # %"$16"
                                        #   in Loop: Header=BB568_43 Depth=1
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	sighandler
	addq	$32, %rsp
	jmp	.LBB568_46
.LBB568_47:
	movl	%eax, %edi
.LBB568_48:                             # %"$13"
	cmpb	$43, %r12b
	movl	%edi, 8(%r15)
	jne	.LBB568_51
	.p2align	4, 0x90
.LBB568_49:                             # %"$2.i31"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	movl	%edi, %ecx
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	movb	$1, %r9b
	callq	rdLock
	addq	$32, %rsp
	testl	%eax, %eax
	jns	.LBB568_53
# %bb.50:                               # %"$3.i32"
                                        #   in Loop: Header=BB568_49 Depth=1
	subq	$32, %rsp
	callq	gErrno
	addq	$32, %rsp
	cmpl	$2, %eax
	je	.LBB568_49
	jmp	.LBB568_11
	.p2align	4, 0x90
.LBB568_51:                             # %"$2.i36"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	movl	%edi, %ecx
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	movb	$1, %r9b
	callq	wrLock
	addq	$32, %rsp
	testl	%eax, %eax
	jns	.LBB568_53
# %bb.52:                               # %"$3.i37"
                                        #   in Loop: Header=BB568_51 Depth=1
	subq	$32, %rsp
	callq	gErrno
	addq	$32, %rsp
	cmpl	$2, %eax
	je	.LBB568_51
.LBB568_11:                             # %"$5.i2"
	subq	$32, %rsp
	callq	lockErr
.LBB568_53:                             # %"$20"
	subq	$32, %rsp
	movl	%edi, %ecx
	callq	fcntlCloExec
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB568_58
.LBB568_54:                             # %"$2"
	movq	env+56(%rip), %rax
	movq	%rax, (%r15)
	movq	%r15, env+56(%rip)
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB568_57:                             # %"$14"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rbx, %rdx
	callq	openErr
.LBB568_55:                             # %"$3"
	subq	$32, %rsp
	movq	%r14, %rcx
	movq	%rbx, %rdx
	callq	symErr
.LBB568_56:                             # %"$6.i"
	subq	$32, %rsp
	leaq	.L$40(%rip), %r8
	movq	%r14, %rcx
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	callq	err
.LBB568_58:                             # %"$2.i41"
	subq	$32, %rsp
	callq	strErrno
	leaq	.L$36(%rip), %r8
	movq	%r14, %rcx
	xorl	%edx, %edx
	movq	%rax, %r9
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 erOpen;
	.scl	2;
	.type	32;
	.endef
	.globl	erOpen                          # -- Begin function erOpen
	.p2align	4, 0x90
erOpen:                                 # @erOpen
.seh_proc erOpen
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%r8, %r15
	movq	%rdx, %r14
	movq	%rcx, %rdi
	subq	$32, %rsp
	movl	$2, %ecx
	callq	dup
	addq	$32, %rsp
	movl	%eax, 8(%r15)
	movl	%r14d, %eax
	andl	$14, %eax
	cmpl	$8, %eax
	jne	.LBB569_38
# %bb.1:                                # %"$3"
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %r14
	jne	.LBB569_3
# %bb.2:                                # %"$4"
	movq	($OutFile)(%rip), %rax
	movl	(%rax), %ecx
	subq	$32, %rsp
	callq	dup
	addq	$32, %rsp
	movl	%eax, %esi
	jmp	.LBB569_37
.LBB569_3:                              # %"$3.i"
	movq	-8(%r14), %rcx
	testb	$8, %cl
	je	.LBB569_6
# %bb.4:                                # %"$6.i"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%r14, %rdx
	callq	nameErr
	.p2align	4, 0x90
.LBB569_5:                              # %"$8.i"
                                        #   in Loop: Header=BB569_6 Depth=1
	movq	8(%rcx), %rcx
.LBB569_6:                              # %"$8.i"
                                        # =>This Inner Loop Header: Depth=1
	testb	$6, %cl
	je	.LBB569_5
# %bb.7:                                # %xName.exit
	movl	$1, %eax
	testb	$4, %cl
	movq	%rcx, %rdx
	je	.LBB569_10
# %bb.8:                                # %"$3.i.i.preheader"
	movl	$1, %eax
	movq	%rcx, %rdx
	.p2align	4, 0x90
.LBB569_9:                              # %"$3.i.i"
                                        # =>This Inner Loop Header: Depth=1
	addq	$8, %rax
	movq	4(%rdx), %rdx
	testb	$4, %dl
	jne	.LBB569_9
.LBB569_10:                             # %"$4.i.i"
	shrq	$4, %rdx
	je	.LBB569_12
	.p2align	4, 0x90
.LBB569_11:                             # %"$6.i.i"
                                        # =>This Inner Loop Header: Depth=1
	incq	%rax
	shrq	$8, %rdx
	jne	.LBB569_11
.LBB569_12:                             # %bufSize.exit.i
	testb	$2, %cl
	jne	.LBB569_13
# %bb.14:                               # %"$3.i3"
	movq	-4(%rcx), %rdx
	movq	%rdx, %rbx
	shrq	$8, %rbx
	cmpb	$126, %dl
	jne	.LBB569_16
	jmp	.LBB569_21
.LBB569_13:                             # %"$2.i"
	movq	%rcx, %rdx
	shrq	$4, %rdx
	movq	%rcx, %rbx
	shrq	$12, %rbx
	cmpb	$126, %dl
	je	.LBB569_21
.LBB569_16:                             # %"$4.i"
	cmpb	$64, %dl
	je	.LBB569_20
# %bb.17:                               # %"$4.i"
	cmpb	$43, %dl
	jne	.LBB569_23
# %bb.18:                               # %"$9.i"
	cmpb	$126, %bl
	je	.LBB569_21
# %bb.19:                               # %"$9.i"
	cmpb	$64, %bl
	jne	.LBB569_23
.LBB569_20:                             # %"$11.i"
	movq	($PilLen)(%rip), %rdx
	jmp	.LBB569_22
.LBB569_21:                             # %"$17.i"
	movq	($UsrLen)(%rip), %rdx
.LBB569_22:                             # %pathSize.exit
	leaq	-1(%rax,%rdx), %rax
.LBB569_23:                             # %pathSize.exit
	addq	$15, %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	subq	$32, %rsp
	movq	%rsi, %rdx
	callq	pathString
	addq	$32, %rsp
	leaq	1(%rsi), %rbx
	cmpb	$43, (%rsi)
	cmovneq	%rsi, %rbx
	jne	.LBB569_24
# %bb.27:                               # %"$9.us.preheader"
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	openWrAppend
	addq	$32, %rsp
	movl	%eax, %esi
	testl	%eax, %eax
	jns	.LBB569_36
	jmp	.LBB569_28
	.p2align	4, 0x90
.LBB569_31:                             # %"$18.us"
                                        #   in Loop: Header=BB569_28 Depth=1
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	openWrAppend
	addq	$32, %rsp
	testl	%eax, %eax
	jns	.LBB569_35
.LBB569_28:                             # %"$13.us"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	callq	gErrno
	addq	$32, %rsp
	cmpl	$2, %eax
	jne	.LBB569_26
# %bb.29:                               # %"$16.us"
                                        #   in Loop: Header=BB569_28 Depth=1
	cmpl	$0, ($Signal)(%rip)
	je	.LBB569_31
# %bb.30:                               # %"$17.us"
                                        #   in Loop: Header=BB569_28 Depth=1
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	sighandler
	addq	$32, %rsp
	jmp	.LBB569_31
.LBB569_24:                             # %"$9.preheader"
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	openWr
	addq	$32, %rsp
	movl	%eax, %esi
	testl	%eax, %eax
	jns	.LBB569_36
	jmp	.LBB569_25
	.p2align	4, 0x90
.LBB569_34:                             # %"$18"
                                        #   in Loop: Header=BB569_25 Depth=1
	subq	$32, %rsp
	movq	%rbx, %rcx
	callq	openWr
	addq	$32, %rsp
	testl	%eax, %eax
	jns	.LBB569_35
.LBB569_25:                             # %"$13"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	callq	gErrno
	addq	$32, %rsp
	cmpl	$2, %eax
	jne	.LBB569_26
# %bb.32:                               # %"$16"
                                        #   in Loop: Header=BB569_25 Depth=1
	cmpl	$0, ($Signal)(%rip)
	je	.LBB569_34
# %bb.33:                               # %"$17"
                                        #   in Loop: Header=BB569_25 Depth=1
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	sighandler
	addq	$32, %rsp
	jmp	.LBB569_34
.LBB569_35:
	movl	%eax, %esi
.LBB569_36:                             # %"$14"
	subq	$32, %rsp
	movl	%esi, %ecx
	callq	fcntlCloExec
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB569_39
.LBB569_37:                             # %"$6"
	subq	$32, %rsp
	movl	%esi, %ecx
	movl	$2, %edx
	callq	dup2
	movl	%esi, %ecx
	callq	close
	addq	$32, %rsp
	movq	env+48(%rip), %rax
	movq	%rax, (%r15)
	movq	%r15, env+48(%rip)
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB569_26:                             # %"$15"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%r14, %rdx
	callq	openErr
.LBB569_38:                             # %"$2"
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%r14, %rdx
	callq	symErr
.LBB569_39:                             # %"$2.i4"
	subq	$32, %rsp
	callq	strErrno
	leaq	.L$36(%rip), %r8
	movq	%rdi, %rcx
	xorl	%edx, %edx
	movq	%rax, %r9
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 wrOpen;
	.scl	2;
	.type	32;
	.endef
	.globl	wrOpen                          # -- Begin function wrOpen
	.p2align	4, 0x90
wrOpen:                                 # @wrOpen
.seh_proc wrOpen
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%r8, %r13
	leaq	SymTab+8(%rip), %r15
	cmpq	%r15, %rdx
	jne	.LBB570_2
# %bb.1:                                # %"$4"
	movq	($OutFiles)(%rip), %rax
	movq	8(%rax), %rax
	jmp	.LBB570_10
.LBB570_2:                              # %"$3"
	movq	%rdx, %rbx
	movq	%rcx, %r12
	testb	$6, %bl
	je	.LBB570_12
# %bb.3:                                # %"$6"
	movq	%rbx, %rax
	shrq	$4, %rax
	testb	$8, %bl
	jne	.LBB570_4
# %bb.8:                                # %"$8"
	cmpl	%eax, ($OutFDs)(%rip)
	jle	.LBB570_106
# %bb.9:                                # %"$15"
	movq	($OutFiles)(%rip), %rcx
	cltq
	movq	(%rcx,%rax,8), %rax
	testq	%rax, %rax
	je	.LBB570_106
.LBB570_10:                             # %"$15.$7_crit_edge"
	movq	env+40(%rip), %rcx
.LBB570_11:                             # %"$7"
	movq	%rcx, (%r13)
	xorl	%edi, %edi
.LBB570_103:                            # %closeOnExec.exit
	testq	%rcx, %rcx
	je	.LBB570_105
# %bb.104:                              # %"$2.i15"
	movq	($Put)(%rip), %rdx
	movq	%rdx, 16(%rcx)
.LBB570_105:                            # %"$2"
	leaq	_putStdout(%rip), %rcx
	movq	%rcx, ($Put)(%rip)
	movq	%rax, ($OutFile)(%rip)
	movq	%rax, 8(%r13)
	movl	%edi, 24(%r13)
	movq	%r13, env+40(%rip)
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB570_12:                             # %"$5"
	testb	$8, %bl
	jne	.LBB570_13
# %bb.48:                               # %"$19"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movl	$1, %eax
	testb	$15, %bl
	jne	.LBB570_51
# %bb.49:                               # %"$34.preheader"
	movl	$1, %eax
	movq	%rbx, %rcx
	.p2align	4, 0x90
.LBB570_50:                             # %"$34"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rcx
	incq	%rax
	testb	$15, %cl
	je	.LBB570_50
.LBB570_51:                             # %"$35"
	leaq	15(,%rax,8), %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, (%rbp)                    # 8-byte Spill
	movq	(%rbx), %rcx
	subq	$32, %rsp
	callq	xSym
	addq	$32, %rsp
	movl	$2, %edi
	cmpq	%r15, %rax
	je	.LBB570_55
# %bb.52:                               # %"$3.i34"
	movq	-8(%rax), %rdi
	testb	$8, %dil
	je	.LBB570_54
.LBB570_77:                             # %"$6.i37"
	subq	$32, %rsp
	movq	%r12, %rcx
	movq	%rax, %rdx
	callq	nameErr
	.p2align	4, 0x90
.LBB570_53:                             # %"$8.i39"
                                        #   in Loop: Header=BB570_54 Depth=1
	movq	8(%rdi), %rdi
.LBB570_54:                             # %"$8.i39"
                                        # =>This Inner Loop Header: Depth=1
	testb	$6, %dil
	je	.LBB570_53
.LBB570_55:                             # %xName.exit41
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	pipe
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB570_108
# %bb.56:                               # %"$37"
	movl	$1, %eax
	testb	$4, %dil
	movq	%rdi, %rcx
	je	.LBB570_59
# %bb.57:                               # %"$3.i.i44.preheader"
	movl	$1, %eax
	movq	%rdi, %rcx
	.p2align	4, 0x90
.LBB570_58:                             # %"$3.i.i44"
                                        # =>This Inner Loop Header: Depth=1
	addq	$8, %rax
	movq	4(%rcx), %rcx
	testb	$4, %cl
	jne	.LBB570_58
.LBB570_59:                             # %"$4.i.i48"
	shrq	$4, %rcx
	je	.LBB570_61
	.p2align	4, 0x90
.LBB570_60:                             # %"$6.i.i50"
                                        # =>This Inner Loop Header: Depth=1
	incq	%rax
	shrq	$8, %rcx
	jne	.LBB570_60
.LBB570_61:                             # %bufSize.exit.i53
	testb	$2, %dil
	jne	.LBB570_62
# %bb.63:                               # %"$3.i61"
	movq	-4(%rdi), %rdx
	movq	%rdx, %rcx
	shrq	$8, %rcx
	cmpb	$126, %dl
	jne	.LBB570_65
	jmp	.LBB570_70
.LBB570_4:                              # %"$9"
	movq	env+40(%rip), %rcx
	movq	%rcx, %rdx
	.p2align	4, 0x90
.LBB570_5:                              # %"$10"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdx), %rdx
	testq	%rdx, %rdx
	je	.LBB570_106
# %bb.6:                                # %"$12"
                                        #   in Loop: Header=BB570_5 Depth=1
	decl	%eax
	jne	.LBB570_5
# %bb.7:                                # %"$14"
	movq	8(%rdx), %rax
	jmp	.LBB570_11
.LBB570_13:                             # %"$3.i"
	movq	-8(%rbx), %rcx
	testb	$8, %cl
	je	.LBB570_16
# %bb.14:                               # %"$6.i"
	subq	$32, %rsp
	movq	%r12, %rcx
	movq	%rbx, %rdx
	callq	nameErr
	.p2align	4, 0x90
.LBB570_15:                             # %"$8.i"
                                        #   in Loop: Header=BB570_16 Depth=1
	movq	8(%rcx), %rcx
.LBB570_16:                             # %"$8.i"
                                        # =>This Inner Loop Header: Depth=1
	testb	$6, %cl
	je	.LBB570_15
# %bb.17:                               # %xName.exit
	movl	$1, %eax
	testb	$4, %cl
	movq	%rcx, %rdx
	je	.LBB570_20
# %bb.18:                               # %"$3.i.i.preheader"
	movl	$1, %eax
	movq	%rcx, %rdx
	.p2align	4, 0x90
.LBB570_19:                             # %"$3.i.i"
                                        # =>This Inner Loop Header: Depth=1
	addq	$8, %rax
	movq	4(%rdx), %rdx
	testb	$4, %dl
	jne	.LBB570_19
.LBB570_20:                             # %"$4.i.i"
	shrq	$4, %rdx
	je	.LBB570_22
	.p2align	4, 0x90
.LBB570_21:                             # %"$6.i.i"
                                        # =>This Inner Loop Header: Depth=1
	incq	%rax
	shrq	$8, %rdx
	jne	.LBB570_21
.LBB570_22:                             # %bufSize.exit.i
	testb	$2, %cl
	jne	.LBB570_23
# %bb.24:                               # %"$3.i25"
	movq	-4(%rcx), %rdx
	movq	%rdx, %rdi
	shrq	$8, %rdi
	cmpb	$126, %dl
	jne	.LBB570_26
	jmp	.LBB570_31
.LBB570_23:                             # %"$2.i24"
	movq	%rcx, %rdx
	shrq	$4, %rdx
	movq	%rcx, %rdi
	shrq	$12, %rdi
	cmpb	$126, %dl
	je	.LBB570_31
.LBB570_26:                             # %"$4.i"
	cmpb	$64, %dl
	je	.LBB570_30
# %bb.27:                               # %"$4.i"
	cmpb	$43, %dl
	jne	.LBB570_33
# %bb.28:                               # %"$9.i"
	cmpb	$126, %dil
	je	.LBB570_31
# %bb.29:                               # %"$9.i"
	cmpb	$64, %dil
	jne	.LBB570_33
.LBB570_30:                             # %"$11.i"
	movq	($PilLen)(%rip), %rdx
	jmp	.LBB570_32
.LBB570_62:                             # %"$2.i57"
	movq	%rdi, %rdx
	shrq	$4, %rdx
	movq	%rdi, %rcx
	shrq	$12, %rcx
	cmpb	$126, %dl
	je	.LBB570_70
.LBB570_65:                             # %"$4.i64"
	cmpb	$64, %dl
	je	.LBB570_69
# %bb.66:                               # %"$4.i64"
	cmpb	$43, %dl
	jne	.LBB570_72
# %bb.67:                               # %"$9.i65"
	cmpb	$126, %cl
	je	.LBB570_70
# %bb.68:                               # %"$9.i65"
	cmpb	$64, %cl
	jne	.LBB570_72
.LBB570_69:                             # %"$11.i66"
	movq	($PilLen)(%rip), %rcx
	jmp	.LBB570_71
.LBB570_31:                             # %"$17.i"
	movq	($UsrLen)(%rip), %rdx
.LBB570_32:                             # %pathSize.exit
	leaq	-1(%rax,%rdx), %rax
.LBB570_33:                             # %pathSize.exit
	addq	$15, %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	subq	$32, %rsp
	movq	%rsi, %rdx
	callq	pathString
	addq	$32, %rsp
	leaq	1(%rsi), %rdi
	cmpb	$43, (%rsi)
	cmovneq	%rsi, %rdi
	jne	.LBB570_34
# %bb.37:                               # %"$23.us.preheader"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	openWrAppend
	addq	$32, %rsp
	movl	%eax, %esi
	testl	%eax, %eax
	jns	.LBB570_46
	jmp	.LBB570_38
	.p2align	4, 0x90
.LBB570_41:                             # %"$32.us"
                                        #   in Loop: Header=BB570_38 Depth=1
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	openWrAppend
	addq	$32, %rsp
	testl	%eax, %eax
	jns	.LBB570_45
.LBB570_38:                             # %"$27.us"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	callq	gErrno
	addq	$32, %rsp
	cmpl	$2, %eax
	jne	.LBB570_36
# %bb.39:                               # %"$30.us"
                                        #   in Loop: Header=BB570_38 Depth=1
	cmpl	$0, ($Signal)(%rip)
	je	.LBB570_41
# %bb.40:                               # %"$31.us"
                                        #   in Loop: Header=BB570_38 Depth=1
	subq	$32, %rsp
	movq	%r12, %rcx
	callq	sighandler
	addq	$32, %rsp
	jmp	.LBB570_41
.LBB570_34:                             # %"$23.preheader"
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	openWr
	addq	$32, %rsp
	movl	%eax, %esi
	testl	%eax, %eax
	jns	.LBB570_46
	jmp	.LBB570_35
	.p2align	4, 0x90
.LBB570_44:                             # %"$32"
                                        #   in Loop: Header=BB570_35 Depth=1
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	openWr
	addq	$32, %rsp
	testl	%eax, %eax
	jns	.LBB570_45
.LBB570_35:                             # %"$27"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	callq	gErrno
	addq	$32, %rsp
	cmpl	$2, %eax
	jne	.LBB570_36
# %bb.42:                               # %"$30"
                                        #   in Loop: Header=BB570_35 Depth=1
	cmpl	$0, ($Signal)(%rip)
	je	.LBB570_44
# %bb.43:                               # %"$31"
                                        #   in Loop: Header=BB570_35 Depth=1
	subq	$32, %rsp
	movq	%r12, %rcx
	callq	sighandler
	addq	$32, %rsp
	jmp	.LBB570_44
.LBB570_45:
	movl	%eax, %esi
.LBB570_46:                             # %"$28"
	subq	$32, %rsp
	movl	%esi, %ecx
	callq	fcntlCloExec
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB570_107
# %bb.47:                               # %closeOnExec.exit28
	subq	$32, %rsp
	movl	%esi, %ecx
	callq	initOutFile
	addq	$32, %rsp
	movq	env+40(%rip), %rcx
	movq	%rcx, (%r13)
	movl	$1, %edi
	jmp	.LBB570_103
.LBB570_70:                             # %"$17.i67"
	movq	($UsrLen)(%rip), %rcx
.LBB570_71:                             # %pathSize.exit68
	leaq	-1(%rax,%rcx), %rax
.LBB570_72:                             # %pathSize.exit68
	addq	$15, %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	subq	$32, %rsp
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	pathString
	addq	$32, %rsp
	movq	(%rbp), %rdi                    # 8-byte Reload
	movq	%rsi, (%rdi)
	movq	8(%rbx), %rsi
	testb	$15, %sil
	je	.LBB570_73
.LBB570_90:                             # %"$40"
	movq	$0, 8(%rdi)
	subq	$32, %rsp
	callq	fork
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB570_91
# %bb.97:                               # %"$42"
	je	.LBB570_98
# %bb.101:                              # %"$41"
	movl	%eax, %edi
	movl	4(%r14), %esi
	subq	$32, %rsp
	movl	%eax, %ecx
	xorl	%edx, %edx
	callq	setpgid
	addq	$32, %rsp
	movl	(%r14), %ecx
	subq	$32, %rsp
	callq	close
	movl	%esi, %ecx
	callq	fcntlCloExec
	addq	$32, %rsp
	testl	%eax, %eax
	js	.LBB570_107
# %bb.102:                              # %closeOnExec.exit
	subq	$32, %rsp
	movl	%esi, %ecx
	callq	initOutFile
	addq	$32, %rsp
	movq	env+40(%rip), %rcx
	movq	%rcx, (%r13)
	jmp	.LBB570_103
.LBB570_73:                             # %"$39.preheader"
	movq	(%rbp), %rdi                    # 8-byte Reload
	jmp	.LBB570_74
	.p2align	4, 0x90
.LBB570_88:                             # %symByte.exit.thread.i
                                        #   in Loop: Header=BB570_74 Depth=1
	movb	$0, (%rdx)
.LBB570_89:                             # %bufString.exit
                                        #   in Loop: Header=BB570_74 Depth=1
	movq	%rax, (%rdi)
	movq	8(%rsi), %rsi
	testb	$15, %sil
	jne	.LBB570_90
.LBB570_74:                             # %"$39"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB570_78 Depth 2
                                        #     Child Loop BB570_82 Depth 2
                                        #     Child Loop BB570_84 Depth 2
                                        #     Child Loop BB570_95 Depth 2
	movq	(%rsi), %rcx
	subq	$32, %rsp
	callq	xSym
	addq	$32, %rsp
	cmpq	%r15, %rax
	jne	.LBB570_76
# %bb.75:                               # %"$4.i80.thread"
                                        #   in Loop: Header=BB570_74 Depth=1
	addq	$8, %rdi
	movl	$1, %eax
	movl	$2, %ebx
	jmp	.LBB570_85
	.p2align	4, 0x90
.LBB570_76:                             # %"$3.i70"
                                        #   in Loop: Header=BB570_74 Depth=1
	movq	-8(%rax), %rbx
	testb	$8, %bl
	jne	.LBB570_77
	.p2align	4, 0x90
# %bb.79:                               # %"$8.i75"
                                        #   in Loop: Header=BB570_74 Depth=1
	testb	$6, %bl
	jne	.LBB570_80
.LBB570_78:                             # %"$8.i75"
                                        #   Parent Loop BB570_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rbx), %rbx
	testb	$6, %bl
	je	.LBB570_78
.LBB570_80:                             # %xName.exit77
                                        #   in Loop: Header=BB570_74 Depth=1
	movl	$1, %eax
	testb	$4, %bl
	movq	%rbx, %rdx
	je	.LBB570_83
# %bb.81:                               # %"$3.i79.preheader"
                                        #   in Loop: Header=BB570_74 Depth=1
	movl	$1, %eax
	movq	%rbx, %rdx
	.p2align	4, 0x90
.LBB570_82:                             # %"$3.i79"
                                        #   Parent Loop BB570_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addq	$8, %rax
	movq	4(%rdx), %rdx
	testb	$4, %dl
	jne	.LBB570_82
.LBB570_83:                             # %"$4.i80"
                                        #   in Loop: Header=BB570_74 Depth=1
	addq	$8, %rdi
	shrq	$4, %rdx
	je	.LBB570_85
	.p2align	4, 0x90
.LBB570_84:                             # %"$6.i82"
                                        #   Parent Loop BB570_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	incq	%rax
	shrq	$8, %rdx
	jne	.LBB570_84
.LBB570_85:                             # %bufSize.exit
                                        #   in Loop: Header=BB570_74 Depth=1
	addq	$15, %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	xorl	%ecx, %ecx
	movq	%rax, %rdx
	testq	%rcx, %rcx
	jne	.LBB570_95
	.p2align	4, 0x90
.LBB570_87:                             # %"$2.i.i"
                                        #   in Loop: Header=BB570_74 Depth=1
	cmpq	$2, %rbx
	je	.LBB570_88
# %bb.92:                               # %"$5.i.i"
                                        #   in Loop: Header=BB570_74 Depth=1
	testb	$2, %bl
	jne	.LBB570_93
# %bb.94:                               # %"$7.i.i"
                                        #   in Loop: Header=BB570_74 Depth=1
	movq	-4(%rbx), %rcx
	movq	4(%rbx), %rbx
	jmp	.LBB570_95
	.p2align	4, 0x90
.LBB570_93:                             # %"$8.i.i"
                                        #   in Loop: Header=BB570_74 Depth=1
	movq	%rbx, %rcx
	shrq	$4, %rcx
	movl	$2, %ebx
	.p2align	4, 0x90
.LBB570_95:                             # %symByte.exit.i
                                        #   Parent Loop BB570_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movb	%cl, (%rdx)
	testb	%cl, %cl
	je	.LBB570_89
# %bb.96:                               # %"$3.i86"
                                        #   in Loop: Header=BB570_95 Depth=2
	shrq	$8, %rcx
	incq	%rdx
	testq	%rcx, %rcx
	jne	.LBB570_95
	jmp	.LBB570_87
.LBB570_106:                            # %"$11"
	subq	$32, %rsp
	movq	%r12, %rcx
	movq	%rbx, %rdx
	callq	badFd
.LBB570_36:                             # %"$29"
	subq	$32, %rsp
	movq	%r12, %rcx
	movq	%rbx, %rdx
	callq	openErr
.LBB570_107:                            # %"$2.i26"
	subq	$32, %rsp
	callq	strErrno
	leaq	.L$36(%rip), %r8
	movq	%r12, %rcx
	xorl	%edx, %edx
	movq	%rax, %r9
	callq	err
.LBB570_108:                            # %"$36"
	subq	$32, %rsp
	movq	%r12, %rcx
	callq	pipeErr
.LBB570_91:                             # %"$43"
	subq	$32, %rsp
	movq	%r12, %rcx
	callq	forkErr
.LBB570_98:                             # %"$45"
	subq	$32, %rsp
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	callq	setpgid
	addq	$32, %rsp
	movl	4(%r14), %ecx
	subq	$32, %rsp
	callq	close
	addq	$32, %rsp
	movl	(%r14), %esi
	testl	%esi, %esi
	je	.LBB570_100
# %bb.99:                               # %"$46"
	subq	$32, %rsp
	movl	%esi, %ecx
	xorl	%edx, %edx
	callq	dup2
	movl	%esi, %ecx
	callq	close
	addq	$32, %rsp
.LBB570_100:                            # %"$47"
	movq	(%rbp), %rsi                    # 8-byte Reload
	movq	(%rsi), %rcx
	subq	$32, %rsp
	movq	%rsi, %rdx
	callq	execvp
	addq	$32, %rsp
	movq	(%rsi), %rcx
	subq	$32, %rsp
	callq	execErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 firstChar;
	.scl	2;
	.type	32;
	.endef
	.globl	firstChar                       # -- Begin function firstChar
	.p2align	4, 0x90
firstChar:                              # @firstChar
# %bb.0:                                # %"$1"
	pushq	%rbp
	movq	%rsp, %rbp
	xorl	%eax, %eax
	leaq	SymTab+8(%rip), %rdx
	cmpq	%rdx, %rcx
	je	.LBB571_5
# %bb.1:                                # %"$3"
	movq	-8(%rcx), %rdx
	testb	$8, %dl
	jne	.LBB571_5
	.p2align	4, 0x90
# %bb.3:                                # %"$8"
	testb	$6, %dl
	jne	.LBB571_4
.LBB571_2:                              # %"$8"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rdx), %rdx
	testb	$6, %dl
	je	.LBB571_2
.LBB571_4:                              # %"$9"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rcx
	movq	$0, (%rcx)
	movq	%rdx, 8(%rcx)
	subq	$32, %rsp
	callq	symChar
	addq	$32, %rsp
.LBB571_5:                              # %"$2"
	movq	%rbp, %rsp
	popq	%rbp
	retq
                                        # -- End function
	.def	 atomErr;
	.scl	2;
	.type	32;
	.endef
	.globl	atomErr                         # -- Begin function atomErr
	.p2align	4, 0x90
atomErr:                                # @atomErr
.seh_proc atomErr
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	leaq	.L$15(%rip), %r8
	xorl	%r9d, %r9d
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 waitFd;
	.scl	2;
	.type	32;
	.endef
	.globl	waitFd                          # -- Begin function waitFd
	.p2align	4, 0x90
waitFd:                                 # @waitFd
.seh_proc waitFd
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$152, %rsp
	.seh_stackalloc 152
	leaq	128(%rsp), %rbp
	.seh_setframe %rbp, 128
	.seh_endprologue
	movq	%r8, %r13
	movl	%edx, %r14d
	movq	%rcx, %rsi
	movq	SymTab+600(%rip), %r15
	movq	env(%rip), %rax
	movq	%r15, -64(%rbp)
	movq	%rax, -56(%rbp)
	movq	SymTab+440(%rip), %rax
	movq	%rax, -72(%rbp)                 # 8-byte Spill
	movq	%rax, -128(%rbp)
	leaq	-64(%rbp), %rax
	movq	%rax, -120(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, env(%rip)
	movl	PipeBufSize(%rip), %eax
	addq	$15, %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, -16(%rbp)                 # 8-byte Spill
	subq	$32, %rsp
	callq	getMsec
	addq	$32, %rsp
	movq	%rax, -24(%rbp)                 # 8-byte Spill
	cmpq	%rsp, ($StkLimit)(%rip)
	ja	.LBB573_169
# %bb.1:                                # %"$4.preheader"
	movl	%r14d, %eax
	movq	%rax, -88(%rbp)                 # 8-byte Spill
	leal	1(%r14), %ebx
	movslq	%ebx, %rax
	shlq	$3, %rax
	movq	%rax, -80(%rbp)                 # 8-byte Spill
	movslq	%r14d, %rax
	shlq	$3, %rax
	movq	%rax, -96(%rbp)                 # 8-byte Spill
	movq	%rsi, -104(%rbp)                # 8-byte Spill
	movq	%r14, 16(%rbp)                  # 8-byte Spill
	movl	%ebx, -4(%rbp)                  # 4-byte Spill
	.p2align	4, 0x90
.LBB573_2:                              # %"$4"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB573_11 Depth 2
                                        #     Child Loop BB573_14 Depth 2
                                        #       Child Loop BB573_25 Depth 3
                                        #     Child Loop BB573_39 Depth 2
                                        #     Child Loop BB573_45 Depth 2
                                        #     Child Loop BB573_48 Depth 2
                                        #       Child Loop BB573_52 Depth 3
                                        #       Child Loop BB573_57 Depth 3
                                        #     Child Loop BB573_61 Depth 2
                                        #     Child Loop BB573_68 Depth 2
                                        #       Child Loop BB573_72 Depth 3
                                        #       Child Loop BB573_84 Depth 3
                                        #         Child Loop BB573_85 Depth 4
                                        #       Child Loop BB573_89 Depth 3
                                        #       Child Loop BB573_98 Depth 3
                                        #     Child Loop BB573_118 Depth 2
                                        #     Child Loop BB573_144 Depth 2
                                        #       Child Loop BB573_149 Depth 3
                                        #       Child Loop BB573_164 Depth 3
	testl	%r14d, %r14d
	movq	%r13, -32(%rbp)                 # 8-byte Spill
	js	.LBB573_13
# %bb.3:                                # %"$5"
                                        #   in Loop: Header=BB573_2 Depth=1
	cmpl	%r14d, ($InFDs)(%rip)
	jle	.LBB573_8
# %bb.4:                                # %"$3.i"
                                        #   in Loop: Header=BB573_2 Depth=1
	movq	($InFiles)(%rip), %rax
	movq	-88(%rbp), %rcx                 # 8-byte Reload
	movq	(%rax,%rcx,8), %rax
	testq	%rax, %rax
	je	.LBB573_8
# %bb.5:                                # %"$4.i"
                                        #   in Loop: Header=BB573_2 Depth=1
	cmpl	$0, 8(%rax)
	js	.LBB573_8
# %bb.6:                                # %hasData.exit
                                        #   in Loop: Header=BB573_2 Depth=1
	movl	28(%rax), %ecx
	cmpl	24(%rax), %ecx
	jle	.LBB573_8
# %bb.7:                                #   in Loop: Header=BB573_2 Depth=1
	xorl	%r13d, %r13d
	jmp	.LBB573_13
	.p2align	4, 0x90
.LBB573_8:                              # %"$8"
                                        #   in Loop: Header=BB573_2 Depth=1
	movl	($Nfds)(%rip), %edi
	cmpl	%r14d, %edi
	movq	-32(%rbp), %r13                 # 8-byte Reload
	jg	.LBB573_12
# %bb.9:                                # %"$2.i"
                                        #   in Loop: Header=BB573_2 Depth=1
	movq	($Poll)(%rip), %rcx
	movl	%ebx, ($Nfds)(%rip)
	subq	$32, %rsp
	movq	-80(%rbp), %rdx                 # 8-byte Reload
	callq	realloc
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB573_170
# %bb.10:                               # %alloc.exit.i
                                        #   in Loop: Header=BB573_2 Depth=1
	movq	%rax, %rsi
	movq	%rax, ($Poll)(%rip)
	.p2align	4, 0x90
.LBB573_11:                             # %"$4.i60"
                                        #   Parent Loop BB573_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movslq	%edi, %rdi
	leaq	(%rsi,%rdi,8), %rcx
	subq	$32, %rsp
	callq	pollIgn
	addq	$32, %rsp
	incl	%edi
	cmpl	%edi, %ebx
	jne	.LBB573_11
.LBB573_12:                             # %pollfd.exit
                                        #   in Loop: Header=BB573_2 Depth=1
	movq	($Poll)(%rip), %rdx
	addq	-96(%rbp), %rdx                 # 8-byte Folded Reload
	subq	$32, %rsp
	movl	%r14d, %ecx
	callq	pollIn
	addq	$32, %rsp
.LBB573_13:                             # %"$6"
                                        #   in Loop: Header=BB573_2 Depth=1
	testb	$15, %r15b
	movq	%r15, (%rbp)                    # 8-byte Spill
	je	.LBB573_14
.LBB573_29:                             # %"$12"
                                        #   in Loop: Header=BB573_2 Depth=1
	movslq	($Hear)(%rip), %r14
	testq	%r14, %r14
	je	.LBB573_41
# %bb.30:                               # %"$12"
                                        #   in Loop: Header=BB573_2 Depth=1
	cmpl	16(%rbp), %r14d                 # 4-byte Folded Reload
	je	.LBB573_41
# %bb.31:                               # %"$25"
                                        #   in Loop: Header=BB573_2 Depth=1
	cmpl	%r14d, ($InFDs)(%rip)
	jle	.LBB573_36
# %bb.32:                               # %"$3.i77"
                                        #   in Loop: Header=BB573_2 Depth=1
	movq	($InFiles)(%rip), %rax
	movq	(%rax,%r14,8), %rax
	testq	%rax, %rax
	je	.LBB573_36
# %bb.33:                               # %"$4.i78"
                                        #   in Loop: Header=BB573_2 Depth=1
	cmpl	$0, 8(%rax)
	js	.LBB573_36
# %bb.34:                               # %hasData.exit81
                                        #   in Loop: Header=BB573_2 Depth=1
	movl	28(%rax), %ecx
	cmpl	24(%rax), %ecx
	jle	.LBB573_36
# %bb.35:                               #   in Loop: Header=BB573_2 Depth=1
	xorl	%r13d, %r13d
	jmp	.LBB573_41
	.p2align	4, 0x90
.LBB573_15:                             # %"$15"
                                        #   in Loop: Header=BB573_14 Depth=2
	movq	8(%rax), %rax
	movq	(%rax), %rax
	shrq	$4, %rax
	cmpq	%rax, %r13
	cmovaq	%rax, %r13
.LBB573_28:                             # %"$13"
                                        #   in Loop: Header=BB573_14 Depth=2
	testb	$15, %r15b
	jne	.LBB573_29
.LBB573_14:                             # %"$11"
                                        #   Parent Loop BB573_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB573_25 Depth 3
	movq	(%r15), %rax
	movq	8(%r15), %r15
	movq	(%rax), %rsi
	testb	$8, %sil
	jne	.LBB573_15
# %bb.16:                               # %"$14"
                                        #   in Loop: Header=BB573_14 Depth=2
	shrq	$4, %rsi
	cmpl	%r14d, %esi
	je	.LBB573_28
# %bb.17:                               # %"$19"
                                        #   in Loop: Header=BB573_14 Depth=2
	cmpl	%esi, ($InFDs)(%rip)
	movslq	%esi, %r14
	jle	.LBB573_22
# %bb.18:                               # %"$3.i63"
                                        #   in Loop: Header=BB573_14 Depth=2
	movq	($InFiles)(%rip), %rax
	movq	(%rax,%r14,8), %rax
	testq	%rax, %rax
	je	.LBB573_22
# %bb.19:                               # %"$4.i64"
                                        #   in Loop: Header=BB573_14 Depth=2
	cmpl	$0, 8(%rax)
	js	.LBB573_22
# %bb.20:                               # %hasData.exit67
                                        #   in Loop: Header=BB573_14 Depth=2
	movl	28(%rax), %ecx
	cmpl	24(%rax), %ecx
	jle	.LBB573_22
# %bb.21:                               #   in Loop: Header=BB573_14 Depth=2
	xorl	%r13d, %r13d
	jmp	.LBB573_27
	.p2align	4, 0x90
.LBB573_22:                             # %"$21"
                                        #   in Loop: Header=BB573_14 Depth=2
	movl	($Nfds)(%rip), %ebx
	cmpl	%esi, %ebx
	jg	.LBB573_26
# %bb.23:                               # %"$2.i70"
                                        #   in Loop: Header=BB573_14 Depth=2
	movq	($Poll)(%rip), %rcx
	leal	1(%rsi), %r12d
	movl	%r12d, ($Nfds)(%rip)
	movslq	%r12d, %rdx
	shlq	$3, %rdx
	subq	$32, %rsp
	callq	realloc
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB573_170
# %bb.24:                               # %alloc.exit.i72
                                        #   in Loop: Header=BB573_14 Depth=2
	movq	%rax, %rdi
	movq	%rax, ($Poll)(%rip)
	.p2align	4, 0x90
.LBB573_25:                             # %"$4.i73"
                                        #   Parent Loop BB573_2 Depth=1
                                        #     Parent Loop BB573_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movslq	%ebx, %rbx
	leaq	(%rdi,%rbx,8), %rcx
	subq	$32, %rsp
	callq	pollIgn
	addq	$32, %rsp
	incl	%ebx
	cmpl	%ebx, %r12d
	jne	.LBB573_25
.LBB573_26:                             # %pollfd.exit75
                                        #   in Loop: Header=BB573_14 Depth=2
	shlq	$3, %r14
	addq	($Poll)(%rip), %r14
	subq	$32, %rsp
	movl	%esi, %ecx
	movq	%r14, %rdx
	callq	pollIn
	addq	$32, %rsp
.LBB573_27:                             # %"$13"
                                        #   in Loop: Header=BB573_14 Depth=2
	movq	16(%rbp), %r14                  # 8-byte Reload
	jmp	.LBB573_28
	.p2align	4, 0x90
.LBB573_36:                             # %"$28"
                                        #   in Loop: Header=BB573_2 Depth=1
	movl	($Nfds)(%rip), %edi
	cmpl	%r14d, %edi
	jg	.LBB573_40
# %bb.37:                               # %"$2.i84"
                                        #   in Loop: Header=BB573_2 Depth=1
	movq	($Poll)(%rip), %rcx
	leal	1(%r14), %eax
	movl	%eax, ($Nfds)(%rip)
	movslq	%eax, %rdx
	shlq	$3, %rdx
	subq	$32, %rsp
	callq	realloc
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB573_170
# %bb.38:                               # %alloc.exit.i86
                                        #   in Loop: Header=BB573_2 Depth=1
	movq	%rax, %rbx
	movq	%rax, ($Poll)(%rip)
	leal	1(%r14), %esi
	.p2align	4, 0x90
.LBB573_39:                             # %"$4.i87"
                                        #   Parent Loop BB573_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movslq	%edi, %rdi
	leaq	(%rbx,%rdi,8), %rcx
	subq	$32, %rsp
	callq	pollIgn
	addq	$32, %rsp
	incl	%edi
	cmpl	%edi, %esi
	jne	.LBB573_39
.LBB573_40:                             # %pollfd.exit89
                                        #   in Loop: Header=BB573_2 Depth=1
	movq	%r14, %rdx
	shlq	$3, %rdx
	addq	($Poll)(%rip), %rdx
	subq	$32, %rsp
	movl	%r14d, %ecx
	callq	pollIn
	addq	$32, %rsp
.LBB573_41:                             # %"$26"
                                        #   in Loop: Header=BB573_2 Depth=1
	movslq	($Spkr)(%rip), %r14
	testq	%r14, %r14
	je	.LBB573_60
# %bb.42:                               # %"$30"
                                        #   in Loop: Header=BB573_2 Depth=1
	movl	($Nfds)(%rip), %edi
	cmpl	%r14d, %edi
	jg	.LBB573_46
# %bb.43:                               # %"$2.i92"
                                        #   in Loop: Header=BB573_2 Depth=1
	movq	($Poll)(%rip), %rcx
	leal	1(%r14), %eax
	movl	%eax, ($Nfds)(%rip)
	movslq	%eax, %rdx
	shlq	$3, %rdx
	subq	$32, %rsp
	callq	realloc
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB573_170
# %bb.44:                               # %alloc.exit.i94
                                        #   in Loop: Header=BB573_2 Depth=1
	movq	%rax, %rbx
	movq	%rax, ($Poll)(%rip)
	leal	1(%r14), %esi
	.p2align	4, 0x90
.LBB573_45:                             # %"$4.i95"
                                        #   Parent Loop BB573_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movslq	%edi, %rdi
	leaq	(%rbx,%rdi,8), %rcx
	subq	$32, %rsp
	callq	pollIgn
	addq	$32, %rsp
	incl	%edi
	cmpl	%edi, %esi
	jne	.LBB573_45
.LBB573_46:                             # %pollfd.exit97
                                        #   in Loop: Header=BB573_2 Depth=1
	movq	%r14, %rdx
	shlq	$3, %rdx
	addq	($Poll)(%rip), %rdx
	subq	$32, %rsp
	movl	%r14d, %ecx
	callq	pollIn
	addq	$32, %rsp
	movl	($Children)(%rip), %eax
	leal	(%rax,%rax,8), %ecx
	leal	(%rcx,%rcx,2), %ecx
	addl	%eax, %ecx
	movslq	%ecx, %r14
	testq	%r14, %r14
	je	.LBB573_60
# %bb.47:                               # %"$33.preheader"
                                        #   in Loop: Header=BB573_2 Depth=1
	movq	($Child)(%rip), %r12
	addq	%r12, %r14
	jmp	.LBB573_48
	.p2align	4, 0x90
.LBB573_58:                             # %pollfd.exit113
                                        #   in Loop: Header=BB573_48 Depth=2
	movq	%r15, %rdx
	shlq	$3, %rdx
	addq	($Poll)(%rip), %rdx
	subq	$32, %rsp
	movl	%r15d, %ecx
	callq	pollOut
	addq	$32, %rsp
.LBB573_59:                             # %"$36"
                                        #   in Loop: Header=BB573_48 Depth=2
	addq	$28, %r12
	cmpq	%r14, %r12
	je	.LBB573_60
.LBB573_48:                             # %"$33"
                                        #   Parent Loop BB573_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB573_52 Depth 3
                                        #       Child Loop BB573_57 Depth 3
	cmpl	$0, 16(%r12)
	je	.LBB573_59
# %bb.49:                               # %"$35"
                                        #   in Loop: Header=BB573_48 Depth=2
	movslq	20(%r12), %r15
	movl	($Nfds)(%rip), %esi
	cmpl	%r15d, %esi
	jg	.LBB573_53
# %bb.50:                               # %"$2.i100"
                                        #   in Loop: Header=BB573_48 Depth=2
	movq	($Poll)(%rip), %rcx
	leal	1(%r15), %eax
	movl	%eax, ($Nfds)(%rip)
	movslq	%eax, %rdx
	shlq	$3, %rdx
	subq	$32, %rsp
	callq	realloc
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB573_170
# %bb.51:                               # %alloc.exit.i102
                                        #   in Loop: Header=BB573_48 Depth=2
	movq	%rax, %rbx
	movq	%rax, ($Poll)(%rip)
	leal	1(%r15), %edi
	.p2align	4, 0x90
.LBB573_52:                             # %"$4.i103"
                                        #   Parent Loop BB573_2 Depth=1
                                        #     Parent Loop BB573_48 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movslq	%esi, %rsi
	leaq	(%rbx,%rsi,8), %rcx
	subq	$32, %rsp
	callq	pollIgn
	addq	$32, %rsp
	incl	%esi
	cmpl	%esi, %edi
	jne	.LBB573_52
.LBB573_53:                             # %pollfd.exit105
                                        #   in Loop: Header=BB573_48 Depth=2
	movq	%r15, %rdx
	shlq	$3, %rdx
	addq	($Poll)(%rip), %rdx
	subq	$32, %rsp
	movl	%r15d, %ecx
	callq	pollIn
	addq	$32, %rsp
	cmpl	$0, 12(%r12)
	je	.LBB573_59
# %bb.54:                               # %"$37"
                                        #   in Loop: Header=BB573_48 Depth=2
	movslq	24(%r12), %r15
	movl	($Nfds)(%rip), %esi
	cmpl	%r15d, %esi
	jg	.LBB573_58
# %bb.55:                               # %"$2.i108"
                                        #   in Loop: Header=BB573_48 Depth=2
	movq	($Poll)(%rip), %rcx
	leal	1(%r15), %eax
	movl	%eax, ($Nfds)(%rip)
	movslq	%eax, %rdx
	shlq	$3, %rdx
	subq	$32, %rsp
	callq	realloc
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB573_170
# %bb.56:                               # %alloc.exit.i110
                                        #   in Loop: Header=BB573_48 Depth=2
	movq	%rax, %rbx
	movq	%rax, ($Poll)(%rip)
	leal	1(%r15), %edi
	.p2align	4, 0x90
.LBB573_57:                             # %"$4.i111"
                                        #   Parent Loop BB573_2 Depth=1
                                        #     Parent Loop BB573_48 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movslq	%esi, %rsi
	leaq	(%rbx,%rsi,8), %rcx
	subq	$32, %rsp
	callq	pollIgn
	addq	$32, %rsp
	incl	%esi
	cmpl	%esi, %edi
	jne	.LBB573_57
	jmp	.LBB573_58
	.p2align	4, 0x90
.LBB573_60:                             # %"$31"
                                        #   in Loop: Header=BB573_2 Depth=1
	movq	($Poll)(%rip), %rcx
	movl	($Nfds)(%rip), %edx
	subq	$32, %rsp
	movq	%r13, %r8
	callq	gPoll
	addq	$32, %rsp
	testl	%eax, %eax
	movq	-104(%rbp), %r12                # 8-byte Reload
	movq	16(%rbp), %r14                  # 8-byte Reload
	movq	(%rbp), %r15                    # 8-byte Reload
	js	.LBB573_61
.LBB573_65:                             # %"$41"
                                        #   in Loop: Header=BB573_2 Depth=1
	subq	$32, %rsp
	callq	getMsec
	addq	$32, %rsp
	movq	%rax, -40(%rbp)                 # 8-byte Spill
	cmpl	$0, ($Spkr)(%rip)
	je	.LBB573_124
# %bb.66:                               # %"$46"
                                        #   in Loop: Header=BB573_2 Depth=1
	incl	env+128(%rip)
	movl	($Children)(%rip), %eax
	leal	(%rax,%rax,8), %ecx
	leal	(%rcx,%rcx,2), %ecx
	addl	%eax, %ecx
	movslq	%ecx, %r13
	testq	%r13, %r13
	je	.LBB573_114
# %bb.67:                               # %"$49.preheader"
                                        #   in Loop: Header=BB573_2 Depth=1
	movq	($Child)(%rip), %r14
	addq	%r14, %r13
	jmp	.LBB573_68
	.p2align	4, 0x90
.LBB573_64:                             # %"$45"
                                        #   in Loop: Header=BB573_61 Depth=2
	movq	($Poll)(%rip), %rcx
	movl	($Nfds)(%rip), %edx
	subq	$32, %rsp
	movq	%r13, %r8
	callq	gPoll
	addq	$32, %rsp
	testl	%eax, %eax
	jns	.LBB573_65
.LBB573_61:                             # %"$40"
                                        #   Parent Loop BB573_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	subq	$32, %rsp
	callq	gErrno
	addq	$32, %rsp
	cmpl	$2, %eax
	jne	.LBB573_171
# %bb.62:                               # %"$43"
                                        #   in Loop: Header=BB573_61 Depth=2
	cmpl	$0, ($Signal)(%rip)
	je	.LBB573_64
# %bb.63:                               # %"$44"
                                        #   in Loop: Header=BB573_61 Depth=2
	subq	$32, %rsp
	movq	%r12, %rcx
	callq	sighandler
	addq	$32, %rsp
	jmp	.LBB573_64
.LBB573_77:                             # %clsChild.exit
                                        #   in Loop: Header=BB573_68 Depth=2
	movl	$0, 16(%r14)
	movl	20(%r14), %ecx
	subq	$32, %rsp
	callq	close
	addq	$32, %rsp
	movl	24(%r14), %ecx
	subq	$32, %rsp
	callq	close
	addq	$32, %rsp
	movq	(%r14), %rcx
	subq	$32, %rsp
	callq	free
	addq	$32, %rsp
	movq	(%rbp), %r15                    # 8-byte Reload
	.p2align	4, 0x90
.LBB573_113:                            # %"$-1"
                                        #   in Loop: Header=BB573_68 Depth=2
	addq	$28, %r14
	cmpq	%r13, %r14
	je	.LBB573_114
.LBB573_68:                             # %"$49"
                                        #   Parent Loop BB573_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB573_72 Depth 3
                                        #       Child Loop BB573_84 Depth 3
                                        #         Child Loop BB573_85 Depth 4
                                        #       Child Loop BB573_89 Depth 3
                                        #       Child Loop BB573_98 Depth 3
	cmpl	$0, 16(%r14)
	je	.LBB573_113
# %bb.69:                               # %"$51"
                                        #   in Loop: Header=BB573_68 Depth=2
	movslq	20(%r14), %r15
	movl	($Nfds)(%rip), %ebx
	cmpl	%r15d, %ebx
	jg	.LBB573_73
# %bb.70:                               # %"$2.i116"
                                        #   in Loop: Header=BB573_68 Depth=2
	movq	($Poll)(%rip), %rcx
	leal	1(%r15), %eax
	movl	%eax, ($Nfds)(%rip)
	movslq	%eax, %rdx
	shlq	$3, %rdx
	subq	$32, %rsp
	callq	realloc
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB573_170
# %bb.71:                               # %alloc.exit.i118
                                        #   in Loop: Header=BB573_68 Depth=2
	movq	%rax, %rdi
	movq	%rax, ($Poll)(%rip)
	leal	1(%r15), %esi
	.p2align	4, 0x90
.LBB573_72:                             # %"$4.i119"
                                        #   Parent Loop BB573_2 Depth=1
                                        #     Parent Loop BB573_68 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movslq	%ebx, %rbx
	leaq	(%rdi,%rbx,8), %rcx
	subq	$32, %rsp
	callq	pollIgn
	addq	$32, %rsp
	incl	%ebx
	cmpl	%ebx, %esi
	jne	.LBB573_72
.LBB573_73:                             # %pollfd.exit121
                                        #   in Loop: Header=BB573_68 Depth=2
	shlq	$3, %r15
	addq	($Poll)(%rip), %r15
	subq	$32, %rsp
	movq	%r15, %rcx
	callq	readyIn
	addq	$32, %rsp
	testb	$1, %al
	je	.LBB573_95
# %bb.74:                               # %"$53"
                                        #   in Loop: Header=BB573_68 Depth=2
	movl	20(%r14), %ecx
	subq	$32, %rsp
	leaq	8(%rbp), %rdx
	movl	$8, %r8d
	callq	rdBytesNb
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB573_75
# %bb.78:                               # %"$56"
                                        #   in Loop: Header=BB573_68 Depth=2
	jle	.LBB573_95
# %bb.79:                               # %"$59"
                                        #   in Loop: Header=BB573_68 Depth=2
	cmpq	$0, 8(%rbp)
	je	.LBB573_80
# %bb.82:                               # %"$61"
                                        #   in Loop: Header=BB573_68 Depth=2
	movl	12(%rbp), %r15d
	cmpl	PipeBufSize(%rip), %r15d
	jg	.LBB573_172
# %bb.83:                               # %"$65"
                                        #   in Loop: Header=BB573_68 Depth=2
	movl	20(%r14), %esi
	movq	-16(%rbp), %rdi                 # 8-byte Reload
	jmp	.LBB573_84
	.p2align	4, 0x90
.LBB573_86:                             # %"$6.i125"
                                        #   in Loop: Header=BB573_84 Depth=3
	movl	%eax, %ecx
	addq	%rcx, %rdi
	subl	%eax, %r15d
	je	.LBB573_87
.LBB573_84:                             # %"$2.i124"
                                        #   Parent Loop BB573_2 Depth=1
                                        #     Parent Loop BB573_68 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB573_85 Depth 4
	movslq	%r15d, %rbx
.LBB573_85:                             # %"$2.i124"
                                        #   Parent Loop BB573_2 Depth=1
                                        #     Parent Loop BB573_68 Depth=2
                                        #       Parent Loop BB573_84 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	subq	$32, %rsp
	movl	%esi, %ecx
	movq	%rdi, %rdx
	movq	%rbx, %r8
	callq	read
	addq	$32, %rsp
	testl	%eax, %eax
	jg	.LBB573_86
# %bb.104:                              # %"$4.i127"
                                        #   in Loop: Header=BB573_85 Depth=4
	testl	%eax, %eax
	je	.LBB573_75
# %bb.105:                              # %"$8.i"
                                        #   in Loop: Header=BB573_85 Depth=4
	subq	$32, %rsp
	callq	gErrno
	addq	$32, %rsp
	cmpl	$2, %eax
	jne	.LBB573_75
# %bb.106:                              # %"$10.i"
                                        #   in Loop: Header=BB573_85 Depth=4
	cmpl	$0, ($Signal)(%rip)
	je	.LBB573_85
# %bb.107:                              # %"$11.i"
                                        #   in Loop: Header=BB573_85 Depth=4
	subq	$32, %rsp
	xorl	%ecx, %ecx
	callq	sighandler
	addq	$32, %rsp
	jmp	.LBB573_85
.LBB573_75:                             # %"$57"
                                        #   in Loop: Header=BB573_68 Depth=2
	movl	16(%r14), %eax
	cmpl	($Talking)(%rip), %eax
	jne	.LBB573_77
# %bb.76:                               # %"$2.i122"
                                        #   in Loop: Header=BB573_68 Depth=2
	movl	$0, ($Talking)(%rip)
	jmp	.LBB573_77
.LBB573_80:                             # %"$62"
                                        #   in Loop: Header=BB573_68 Depth=2
	movl	16(%r14), %eax
	cmpl	($Talking)(%rip), %eax
	jne	.LBB573_95
# %bb.81:                               # %"$63"
                                        #   in Loop: Header=BB573_68 Depth=2
	movl	$0, ($Talking)(%rip)
	.p2align	4, 0x90
.LBB573_95:                             # %"$54"
                                        #   in Loop: Header=BB573_68 Depth=2
	movslq	24(%r14), %r15
	movl	($Nfds)(%rip), %ebx
	cmpl	%r15d, %ebx
	jg	.LBB573_99
# %bb.96:                               # %"$2.i133"
                                        #   in Loop: Header=BB573_68 Depth=2
	movq	($Poll)(%rip), %rcx
	leal	1(%r15), %eax
	movl	%eax, ($Nfds)(%rip)
	movslq	%eax, %rdx
	shlq	$3, %rdx
	subq	$32, %rsp
	callq	realloc
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB573_170
# %bb.97:                               # %alloc.exit.i135
                                        #   in Loop: Header=BB573_68 Depth=2
	movq	%rax, %rdi
	movq	%rax, ($Poll)(%rip)
	leal	1(%r15), %esi
	.p2align	4, 0x90
.LBB573_98:                             # %"$4.i136"
                                        #   Parent Loop BB573_2 Depth=1
                                        #     Parent Loop BB573_68 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movslq	%ebx, %rbx
	leaq	(%rdi,%rbx,8), %rcx
	subq	$32, %rsp
	callq	pollIgn
	addq	$32, %rsp
	incl	%ebx
	cmpl	%ebx, %esi
	jne	.LBB573_98
.LBB573_99:                             # %pollfd.exit138
                                        #   in Loop: Header=BB573_68 Depth=2
	shlq	$3, %r15
	addq	($Poll)(%rip), %r15
	subq	$32, %rsp
	movq	%r15, %rcx
	callq	readyOut
	addq	$32, %rsp
	testb	$1, %al
	movq	(%rbp), %r15                    # 8-byte Reload
	je	.LBB573_113
# %bb.100:                              # %"$79"
                                        #   in Loop: Header=BB573_68 Depth=2
	movq	(%r14), %rax
	movslq	8(%r14), %rdx
	movl	(%rax,%rdx), %esi
	movl	24(%r14), %ecx
	leaq	4(%rax,%rdx), %rdx
	subq	$32, %rsp
	movl	%esi, %r8d
	callq	wrBytes
	addq	$32, %rsp
	testb	$1, %al
	je	.LBB573_101
# %bb.108:                              # %"$82"
                                        #   in Loop: Header=BB573_68 Depth=2
	movl	8(%r14), %ecx
	movl	12(%r14), %eax
	movl	%esi, %ebx
	addl	%ecx, %ebx
	leal	4(%rsi,%rcx), %edx
	movl	%edx, 8(%r14)
	leal	8(%rbx,%rbx), %ecx
	cmpl	%eax, %ecx
	jl	.LBB573_113
# %bb.109:                              # %"$84"
                                        #   in Loop: Header=BB573_68 Depth=2
	subl	%edx, %eax
	movl	%eax, 12(%r14)
	je	.LBB573_112
# %bb.110:                              # %"$86"
                                        #   in Loop: Header=BB573_68 Depth=2
	movq	(%r14), %rcx
	movslq	%edx, %rdx
	addq	%rcx, %rdx
	movslq	%eax, %r8
	subq	$32, %rsp
	callq	memcpy
	addq	$32, %rsp
	movq	(%r14), %rcx
	movslq	12(%r14), %rdx
	subq	$32, %rsp
	callq	realloc
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB573_170
# %bb.111:                              # %alloc.exit
                                        #   in Loop: Header=BB573_68 Depth=2
	movq	%rax, (%r14)
.LBB573_112:                            # %"$87"
                                        #   in Loop: Header=BB573_68 Depth=2
	movl	$0, 8(%r14)
	jmp	.LBB573_113
.LBB573_101:                            # %"$81"
                                        #   in Loop: Header=BB573_68 Depth=2
	movl	16(%r14), %eax
	cmpl	($Talking)(%rip), %eax
	jne	.LBB573_103
# %bb.102:                              # %"$2.i139"
                                        #   in Loop: Header=BB573_68 Depth=2
	movl	$0, ($Talking)(%rip)
.LBB573_103:                            # %clsChild.exit141
                                        #   in Loop: Header=BB573_68 Depth=2
	movl	$0, 16(%r14)
	movl	20(%r14), %ecx
	subq	$32, %rsp
	callq	close
	addq	$32, %rsp
	movl	24(%r14), %ecx
	subq	$32, %rsp
	callq	close
	addq	$32, %rsp
	movq	(%r14), %rcx
	subq	$32, %rsp
	callq	free
	addq	$32, %rsp
	jmp	.LBB573_113
.LBB573_87:                             # %"$68"
                                        #   in Loop: Header=BB573_68 Depth=2
	movl	($Children)(%rip), %eax
	leal	(%rax,%rax,8), %ecx
	leal	(%rcx,%rcx,2), %ecx
	addl	%eax, %ecx
	movslq	%ecx, %rdi
	testq	%rdi, %rdi
	je	.LBB573_95
# %bb.88:                               # %"$70.preheader"
                                        #   in Loop: Header=BB573_68 Depth=2
	movq	($Child)(%rip), %rsi
	jmp	.LBB573_89
.LBB573_93:                             # %"$77"
                                        #   in Loop: Header=BB573_89 Depth=3
	movl	12(%rbp), %r8d
	subq	$32, %rsp
	movq	%rsi, %rcx
	movq	-16(%rbp), %rdx                 # 8-byte Reload
	callq	wrChild
	addq	$32, %rsp
	.p2align	4, 0x90
.LBB573_94:                             # %"$78"
                                        #   in Loop: Header=BB573_89 Depth=3
	addq	$28, %rsi
	addq	$-28, %rdi
	je	.LBB573_95
.LBB573_89:                             # %"$70"
                                        #   Parent Loop BB573_2 Depth=1
                                        #     Parent Loop BB573_68 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpq	%rsi, %r14
	je	.LBB573_94
# %bb.90:                               # %"$73"
                                        #   in Loop: Header=BB573_89 Depth=3
	movl	16(%rsi), %eax
	testl	%eax, %eax
	je	.LBB573_94
# %bb.91:                               # %"$74"
                                        #   in Loop: Header=BB573_89 Depth=3
	movl	8(%rbp), %ecx
	testl	%ecx, %ecx
	je	.LBB573_93
# %bb.92:                               # %"$74"
                                        #   in Loop: Header=BB573_89 Depth=3
	cmpl	%eax, %ecx
	jne	.LBB573_94
	jmp	.LBB573_93
	.p2align	4, 0x90
.LBB573_114:                            # %"$50"
                                        #   in Loop: Header=BB573_2 Depth=1
	cmpl	$0, ($Talking)(%rip)
	jne	.LBB573_123
# %bb.115:                              # %"$89"
                                        #   in Loop: Header=BB573_2 Depth=1
	movslq	($Spkr)(%rip), %r14
	movl	($Nfds)(%rip), %ebx
	cmpl	%r14d, %ebx
	jg	.LBB573_119
# %bb.116:                              # %"$2.i147"
                                        #   in Loop: Header=BB573_2 Depth=1
	movq	($Poll)(%rip), %rcx
	leal	1(%r14), %eax
	movl	%eax, ($Nfds)(%rip)
	movslq	%eax, %rdx
	shlq	$3, %rdx
	subq	$32, %rsp
	callq	realloc
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB573_170
# %bb.117:                              # %alloc.exit.i149
                                        #   in Loop: Header=BB573_2 Depth=1
	movq	%rax, %rdi
	movq	%rax, ($Poll)(%rip)
	leal	1(%r14), %esi
	.p2align	4, 0x90
.LBB573_118:                            # %"$4.i150"
                                        #   Parent Loop BB573_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movslq	%ebx, %rbx
	leaq	(%rdi,%rbx,8), %rcx
	subq	$32, %rsp
	callq	pollIgn
	addq	$32, %rsp
	incl	%ebx
	cmpl	%ebx, %esi
	jne	.LBB573_118
.LBB573_119:                            # %pollfd.exit152
                                        #   in Loop: Header=BB573_2 Depth=1
	shlq	$3, %r14
	addq	($Poll)(%rip), %r14
	subq	$32, %rsp
	movq	%r14, %rcx
	callq	readyIn
	addq	$32, %rsp
	testb	$1, %al
	je	.LBB573_123
# %bb.120:                              # %"$90"
                                        #   in Loop: Header=BB573_2 Depth=1
	movl	($Spkr)(%rip), %ecx
	subq	$32, %rsp
	leaq	8(%rbp), %rdx
	movl	$4, %r8d
	callq	rdBytesNb
	addq	$32, %rsp
	testq	%rax, %rax
	jle	.LBB573_123
# %bb.121:                              # %"$91"
                                        #   in Loop: Header=BB573_2 Depth=1
	movq	($Child)(%rip), %rcx
	movl	8(%rbp), %eax
	leal	(%rax,%rax,8), %edx
	leal	(%rdx,%rdx,2), %edx
	addl	%eax, %edx
	movslq	%edx, %rdx
	movl	16(%rcx,%rdx), %eax
	testl	%eax, %eax
	je	.LBB573_123
# %bb.122:                              # %"$93"
                                        #   in Loop: Header=BB573_2 Depth=1
	addq	%rdx, %rcx
	movl	%eax, ($Talking)(%rip)
	subq	$32, %rsp
	leaq	($TBuf)(%rip), %rdx
	movl	$2, %r8d
	callq	wrChild
	addq	$32, %rsp
	.p2align	4, 0x90
.LBB573_123:                            # %"$92"
                                        #   in Loop: Header=BB573_2 Depth=1
	decl	env+128(%rip)
	movq	16(%rbp), %r14                  # 8-byte Reload
.LBB573_124:                            # %"$47"
                                        #   in Loop: Header=BB573_2 Depth=1
	movslq	($Hear)(%rip), %rsi
	testq	%rsi, %rsi
	movq	-32(%rbp), %r13                 # 8-byte Reload
	je	.LBB573_143
# %bb.125:                              # %"$47"
                                        #   in Loop: Header=BB573_2 Depth=1
	cmpl	%r14d, %esi
	je	.LBB573_143
# %bb.126:                              # %"$97"
                                        #   in Loop: Header=BB573_2 Depth=1
	subq	$32, %rsp
	movl	%esi, %ecx
	xorl	%edx, %edx
	callq	inReady
	addq	$32, %rsp
	testb	$1, %al
	je	.LBB573_143
# %bb.127:                              # %"$98"
                                        #   in Loop: Header=BB573_2 Depth=1
	movq	($InFile)(%rip), %r14
	movq	($InFiles)(%rip), %rax
	movslq	($Hear)(%rip), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, ($InFile)(%rip)
	leaq	getBinary(%rip), %rax
	movq	%rax, ($GetBin)(%rip)
	movl	$0, ($Extn)(%rip)
	subq	$32, %rsp
	callq	binRead
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB573_128
# %bb.139:                              # %"$101"
                                        #   in Loop: Header=BB573_2 Depth=1
	movq	%rax, %rcx
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, %rcx
	jne	.LBB573_141
# %bb.140:                              # %"$104"
                                        #   in Loop: Header=BB573_2 Depth=1
	movb	$1, ($Sync)(%rip)
	jmp	.LBB573_142
.LBB573_128:                            # %"$102"
                                        #   in Loop: Header=BB573_2 Depth=1
	subq	$32, %rsp
	movl	%esi, %ecx
	callq	close
	addq	$32, %rsp
	cmpl	%esi, ($InFDs)(%rip)
	jle	.LBB573_133
# %bb.129:                              # %"$2.i153"
                                        #   in Loop: Header=BB573_2 Depth=1
	movq	($InFiles)(%rip), %rax
	movq	(%rax,%rsi,8), %rdi
	cmpq	($InFile)(%rip), %rdi
	jne	.LBB573_131
# %bb.130:                              # %"$4.i154"
                                        #   in Loop: Header=BB573_2 Depth=1
	movq	(%rax), %rax
	movq	%rax, ($InFile)(%rip)
	movl	12(%rax), %eax
	movl	%eax, ($Chr)(%rip)
.LBB573_131:                            # %"$5.i"
                                        #   in Loop: Header=BB573_2 Depth=1
	testq	%rdi, %rdi
	je	.LBB573_133
# %bb.132:                              # %"$6.i156"
                                        #   in Loop: Header=BB573_2 Depth=1
	movq	(%rdi), %rcx
	subq	$32, %rsp
	callq	free
	addq	$32, %rsp
	movq	$0, (%rdi)
	movl	$-1, 8(%rdi)
.LBB573_133:                            # %closeInFile.exit
                                        #   in Loop: Header=BB573_2 Depth=1
	cmpl	%esi, ($OutFDs)(%rip)
	jle	.LBB573_138
# %bb.134:                              # %"$2.i158"
                                        #   in Loop: Header=BB573_2 Depth=1
	movq	($OutFiles)(%rip), %rcx
	movq	(%rcx,%rsi,8), %rax
	cmpq	($OutFile)(%rip), %rax
	jne	.LBB573_136
# %bb.135:                              # %"$4.i159"
                                        #   in Loop: Header=BB573_2 Depth=1
	movq	8(%rcx), %rcx
	movq	%rcx, ($OutFile)(%rip)
.LBB573_136:                            # %"$5.i161"
                                        #   in Loop: Header=BB573_2 Depth=1
	testq	%rax, %rax
	je	.LBB573_138
# %bb.137:                              # %"$6.i162"
                                        #   in Loop: Header=BB573_2 Depth=1
	movl	$-1, (%rax)
.LBB573_138:                            # %closeOutFile.exit
                                        #   in Loop: Header=BB573_2 Depth=1
	movl	$0, ($Hear)(%rip)
	jmp	.LBB573_142
.LBB573_141:                            # %"$103"
                                        #   in Loop: Header=BB573_2 Depth=1
	movq	env(%rip), %rdx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rcx, (%rsi)
	movq	%rsi, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	%rsi, env(%rip)
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	movq	8(%rsi), %rax
	movq	%rax, env(%rip)
.LBB573_142:                            # %"$100"
                                        #   in Loop: Header=BB573_2 Depth=1
	movq	%r14, ($InFile)(%rip)
	movq	16(%rbp), %r14                  # 8-byte Reload
.LBB573_143:                            # %"$99"
                                        #   in Loop: Header=BB573_2 Depth=1
	movq	-40(%rbp), %rsi                 # 8-byte Reload
	subq	-24(%rbp), %rsi                 # 8-byte Folded Reload
	jmp	.LBB573_144
	.p2align	4, 0x90
.LBB573_146:                            # %"$110"
                                        #   in Loop: Header=BB573_144 Depth=2
	movq	8(%rdi), %rax
	movq	(%rax), %rdx
	shrq	$4, %rdx
	subq	%rsi, %rdx
	testq	%rdx, %rdx
	jle	.LBB573_148
# %bb.147:                              # %"$111"
                                        #   in Loop: Header=BB573_144 Depth=2
	shlq	$4, %rdx
	orq	$10, %rdx
	movq	%rdx, (%rax)
.LBB573_144:                            # %"$99"
                                        #   Parent Loop BB573_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB573_149 Depth 3
                                        #       Child Loop BB573_164 Depth 3
	testb	$15, %r15b
	jne	.LBB573_152
# %bb.145:                              # %"$106"
                                        #   in Loop: Header=BB573_144 Depth=2
	movq	(%r15), %rdi
	movq	8(%r15), %r15
	movq	(%rdi), %rcx
	testb	$8, %cl
	jne	.LBB573_146
# %bb.161:                              # %"$109"
                                        #   in Loop: Header=BB573_144 Depth=2
	shrq	$4, %rcx
	cmpl	%r14d, %ecx
	je	.LBB573_144
# %bb.162:                              # %"$126"
                                        #   in Loop: Header=BB573_144 Depth=2
	subq	$32, %rsp
                                        # kill: def $ecx killed $ecx killed $rcx
	xorl	%edx, %edx
	callq	inReady
	addq	$32, %rsp
	testb	$1, %al
	je	.LBB573_144
# %bb.163:                              # %"$127"
                                        #   in Loop: Header=BB573_144 Depth=2
	movq	(%rdi), %rax
	movq	%rax, SymTab+440(%rip)
	movq	8(%rdi), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rdi
	jmp	.LBB573_164
	.p2align	4, 0x90
.LBB573_167:                            # %"$138"
                                        #   in Loop: Header=BB573_164 Depth=3
	movq	(%rdi), %rcx
	movq	8(%rdi), %rdi
.LBB573_164:                            # %"$127"
                                        #   Parent Loop BB573_2 Depth=1
                                        #     Parent Loop BB573_144 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	testb	$15, %dil
	jne	.LBB573_150
# %bb.165:                              # %"$130"
                                        #   in Loop: Header=BB573_164 Depth=3
	testb	$15, %cl
	jne	.LBB573_167
# %bb.166:                              # %"$139"
                                        #   in Loop: Header=BB573_164 Depth=3
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	jmp	.LBB573_167
.LBB573_148:                            # %"$112"
                                        #   in Loop: Header=BB573_144 Depth=2
	movq	%rcx, %rdx
	andq	$-9, %rdx
	movq	%rdx, (%rax)
	movq	%rcx, SymTab+440(%rip)
	movq	8(%rax), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rdi
	jmp	.LBB573_149
	.p2align	4, 0x90
.LBB573_160:                            # %"$123"
                                        #   in Loop: Header=BB573_149 Depth=3
	movq	(%rdi), %rcx
	movq	8(%rdi), %rdi
.LBB573_149:                            # %"$112"
                                        #   Parent Loop BB573_2 Depth=1
                                        #     Parent Loop BB573_144 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	testb	$15, %dil
	jne	.LBB573_150
# %bb.158:                              # %"$115"
                                        #   in Loop: Header=BB573_149 Depth=3
	testb	$15, %cl
	jne	.LBB573_160
# %bb.159:                              # %"$124"
                                        #   in Loop: Header=BB573_149 Depth=3
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	jmp	.LBB573_160
	.p2align	4, 0x90
.LBB573_150:                            # %"$117"
                                        #   in Loop: Header=BB573_144 Depth=2
	testb	$14, %cl
	jne	.LBB573_144
# %bb.151:                              # %"$121"
                                        #   in Loop: Header=BB573_144 Depth=2
	subq	$32, %rsp
	callq	evList
	addq	$32, %rsp
	jmp	.LBB573_144
	.p2align	4, 0x90
.LBB573_152:                            # %"$107"
                                        #   in Loop: Header=BB573_2 Depth=1
	movq	%r13, %rax
	subq	%rsi, %rax
	movl	$0, %ecx
	cmovsq	%rcx, %rax
	testq	%r13, %r13
	cmovgq	%rax, %r13
	cmpl	$0, ($Signal)(%rip)
	je	.LBB573_154
# %bb.153:                              # %"$143"
                                        #   in Loop: Header=BB573_2 Depth=1
	subq	$32, %rsp
	movq	%r12, %rcx
	callq	sighandler
	addq	$32, %rsp
.LBB573_154:                            # %"$144"
                                        #   in Loop: Header=BB573_2 Depth=1
	testl	%r14d, %r14d
	js	.LBB573_168
# %bb.155:                              # %"$144"
                                        #   in Loop: Header=BB573_2 Depth=1
	testq	%r13, %r13
	je	.LBB573_168
# %bb.156:                              # %"$145"
                                        #   in Loop: Header=BB573_2 Depth=1
	subq	$32, %rsp
	movl	%r14d, %ecx
	movb	$1, %dl
	callq	inReady
	addq	$32, %rsp
	testb	$1, %al
	jne	.LBB573_168
# %bb.157:                              # %"$148"
                                        #   in Loop: Header=BB573_2 Depth=1
	movq	SymTab+600(%rip), %r15
	movq	%r15, -64(%rbp)
	movq	-40(%rbp), %rax                 # 8-byte Reload
	movq	%rax, -24(%rbp)                 # 8-byte Spill
	movl	-4(%rbp), %ebx                  # 4-byte Reload
	jmp	.LBB573_2
.LBB573_168:                            # %"$149"
	movq	-72(%rbp), %rax                 # 8-byte Reload
	movq	%rax, SymTab+440(%rip)
	movq	-56(%rbp), %rax
	movq	%rax, env(%rip)
	movq	%r13, %rax
	leaq	24(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB573_170:                            # %"$2.i.i"
	subq	$32, %rsp
	leaq	.L$3(%rip), %rcx
	xorl	%edx, %edx
	callq	giveup
.LBB573_171:                            # %"$42"
	leaq	SymTab+8(%rip), %rax
	movq	%rax, SymTab+600(%rip)
	subq	$32, %rsp
	movq	%r12, %rcx
	callq	selectErr
.LBB573_172:                            # %"$66"
	subq	$32, %rsp
	movq	%r12, %rcx
	callq	sizeErr
.LBB573_169:                            # %"$2"
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	stkErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 stdinByte;
	.scl	2;
	.type	32;
	.endef
	.globl	stdinByte                       # -- Begin function stdinByte
	.p2align	4, 0x90
stdinByte:                              # @stdinByte
.seh_proc stdinByte
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	($InFiles)(%rip), %rax
	movq	(%rax), %rdi
	movl	8(%rdi), %ecx
	testl	%ecx, %ecx
	js	.LBB574_7
# %bb.1:                                # %"$4"
	movl	24(%rdi), %eax
	cmpl	28(%rdi), %eax
	jne	.LBB574_14
# %bb.2:                                # %"$6"
	testl	%eax, %eax
	js	.LBB574_7
# %bb.3:                                # %"$8"
	movl	$0, 24(%rdi)
	leaq	32(%rdi), %rsi
	jmp	.LBB574_4
	.p2align	4, 0x90
.LBB574_11:                             # %"$9.i"
                                        #   in Loop: Header=BB574_4 Depth=1
	movl	8(%rdi), %ecx
.LBB574_4:                              # %"$8"
                                        # =>This Inner Loop Header: Depth=1
	movl	$4096, %r8d                     # imm = 0x1000
	movq	%rsi, %rdx
	callq	read
	testl	%eax, %eax
	jns	.LBB574_12
# %bb.5:                                # %"$3.i"
                                        #   in Loop: Header=BB574_4 Depth=1
	callq	gErrno
	cmpl	$2, %eax
	jne	.LBB574_6
# %bb.9:                                # %"$6.i"
                                        #   in Loop: Header=BB574_4 Depth=1
	cmpl	$0, ($Signal)(%rip)
	je	.LBB574_11
# %bb.10:                               # %"$8.i"
                                        #   in Loop: Header=BB574_4 Depth=1
	xorl	%ecx, %ecx
	callq	sighandler
	jmp	.LBB574_11
.LBB574_12:                             # %slow.exit
	movl	%eax, 28(%rdi)
	testl	%eax, %eax
	je	.LBB574_7
# %bb.13:                               # %"slow.exit.$10_crit_edge"
	movl	24(%rdi), %eax
.LBB574_14:                             # %"$10"
	leal	1(%rax), %ecx
	movl	%ecx, 24(%rdi)
	cltq
	movzbl	32(%rdi,%rax), %eax
	jmp	.LBB574_15
.LBB574_6:                              # %slow.exit.thread
	movl	$0, 28(%rdi)
.LBB574_7:                              # %"$9"
	movl	$-1, %eax
	cmpb	$1, 4128(%rdi)
	je	.LBB574_8
.LBB574_15:                             # %"$2"
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
.LBB574_8:                              # %"$12"
	xorl	%ecx, %ecx
	callq	bye
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 selectErr;
	.scl	2;
	.type	32;
	.endef
	.globl	selectErr                       # -- Begin function selectErr
	.p2align	4, 0x90
selectErr:                              # @selectErr
.seh_proc selectErr
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	callq	strErrno
	leaq	.L$35(%rip), %r8
	movq	%rsi, %rcx
	xorl	%edx, %edx
	movq	%rax, %r9
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 rdBytesNb;
	.scl	2;
	.type	32;
	.endef
	.globl	rdBytesNb                       # -- Begin function rdBytesNb
	.p2align	4, 0x90
rdBytesNb:                              # @rdBytesNb
.seh_proc rdBytesNb
# %bb.0:                                # %"$1"
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movl	%r8d, %r12d
	movq	%rdx, %rbx
	movl	%ecx, %edi
	callq	nonBlocking
	movl	%eax, %ebp
	movslq	%r12d, %r15
	movl	%edi, %ecx
	movq	%rbx, %rdx
	movq	%r15, %r8
	callq	read
	movq	%rax, %rsi
	movl	%edi, %ecx
	movl	%ebp, %edx
	callq	fcntlSetFl
	testl	%esi, %esi
	jle	.LBB576_1
.LBB576_17:                             # %"$5.preheader"
	subl	%esi, %r12d
	movl	$1, %r14d
	jne	.LBB576_8
	jmp	.LBB576_6
	.p2align	4, 0x90
.LBB576_7:                              # %"$5.loopexit"
                                        #   in Loop: Header=BB576_8 Depth=1
	subl	%esi, %r12d
	je	.LBB576_6
.LBB576_8:                              # %"$7"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB576_13 Depth 2
	movq	%rbx, %rax
	movl	%esi, %ebx
	addq	%rax, %rbx
	movslq	%r12d, %rbp
.LBB576_13:                             # %"$16"
                                        #   Parent Loop BB576_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	%edi, %ecx
	movq	%rbx, %rdx
	movq	%rbp, %r8
	callq	read
	movq	%rax, %rsi
	testl	%esi, %esi
	jg	.LBB576_7
# %bb.9:                                # %"$9"
                                        #   in Loop: Header=BB576_13 Depth=2
	testl	%esi, %esi
	je	.LBB576_5
# %bb.10:                               # %"$12"
                                        #   in Loop: Header=BB576_13 Depth=2
	callq	gErrno
	cmpl	$2, %eax
	jne	.LBB576_5
# %bb.11:                               # %"$14"
                                        #   in Loop: Header=BB576_13 Depth=2
	cmpl	$0, ($Signal)(%rip)
	je	.LBB576_13
# %bb.12:                               # %"$15"
                                        #   in Loop: Header=BB576_13 Depth=2
	xorl	%ecx, %ecx
	callq	sighandler
	jmp	.LBB576_13
.LBB576_1:
	xorl	%r14d, %r14d
	jmp	.LBB576_2
	.p2align	4, 0x90
.LBB576_16:                             # %"$25"
                                        #   in Loop: Header=BB576_2 Depth=1
	movl	%edi, %ecx
	callq	nonBlocking
	movl	%eax, %ebp
	movl	%edi, %ecx
	movq	%rbx, %rdx
	movq	%r15, %r8
	callq	read
	movq	%rax, %rsi
	movl	%edi, %ecx
	movl	%ebp, %edx
	callq	fcntlSetFl
	testl	%esi, %esi
	jg	.LBB576_17
.LBB576_2:                              # %"$4"
                                        # =>This Inner Loop Header: Depth=1
	testl	%esi, %esi
	je	.LBB576_6
# %bb.3:                                # %"$17"
                                        #   in Loop: Header=BB576_2 Depth=1
	callq	gErrno
	cmpl	$2, %eax
	jne	.LBB576_4
# %bb.14:                               # %"$22"
                                        #   in Loop: Header=BB576_2 Depth=1
	cmpl	$0, ($Signal)(%rip)
	je	.LBB576_16
# %bb.15:                               # %"$24"
                                        #   in Loop: Header=BB576_2 Depth=1
	xorl	%ecx, %ecx
	callq	sighandler
	jmp	.LBB576_16
.LBB576_4:                              # %"$17"
	movq	$-1, %r14
	cmpl	$4, %eax
	je	.LBB576_6
.LBB576_5:                              # %"$18.fold.split"
	xorl	%r14d, %r14d
.LBB576_6:                              # %"$6"
	movq	%r14, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 inReady;
	.scl	2;
	.type	32;
	.endef
	.globl	inReady                         # -- Begin function inReady
	.p2align	4, 0x90
inReady:                                # @inReady
.seh_proc inReady
# %bb.0:                                # %"$1"
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movl	%edx, %r14d
	movl	%ecx, %esi
	movl	($Nfds)(%rip), %ebx
	cmpl	%ecx, %ebx
	jg	.LBB577_4
# %bb.1:                                # %"$2.i"
	movq	($Poll)(%rip), %rcx
	leal	1(%rsi), %ebp
	movl	%ebp, ($Nfds)(%rip)
	movslq	%ebp, %rdx
	shlq	$3, %rdx
	callq	realloc
	testq	%rax, %rax
	je	.LBB577_12
# %bb.2:                                # %alloc.exit.i
	movq	%rax, %rdi
	movq	%rax, ($Poll)(%rip)
	.p2align	4, 0x90
.LBB577_3:                              # %"$4.i"
                                        # =>This Inner Loop Header: Depth=1
	movslq	%ebx, %rbx
	leaq	(%rdi,%rbx,8), %rcx
	callq	pollIgn
	incl	%ebx
	cmpl	%ebx, %ebp
	jne	.LBB577_3
.LBB577_4:                              # %pollfd.exit
	movslq	%esi, %rax
	leaq	(,%rax,8), %rcx
	addq	($Poll)(%rip), %rcx
	cmpl	%esi, ($InFDs)(%rip)
	jle	.LBB577_13
# %bb.5:                                # %"$3"
	movq	($InFiles)(%rip), %rdx
	movq	(%rdx,%rax,8), %rsi
	testq	%rsi, %rsi
	je	.LBB577_13
# %bb.6:                                # %"$5"
	cmpl	$0, 8(%rsi)
	js	.LBB577_13
# %bb.7:                                # %"$8"
	movl	28(%rsi), %edx
	movb	$1, %al
	cmpl	24(%rsi), %edx
	jg	.LBB577_11
# %bb.8:                                # %"$11"
	callq	readyIn
	testb	$1, %al
	je	.LBB577_11
# %bb.9:                                # %"$11"
	testb	$1, %r14b
	jne	.LBB577_11
# %bb.10:                               # %"$15"
	movq	%rsi, %rcx
	callq	slowNb
	testl	%eax, %eax
	setns	%al
.LBB577_11:                             # %"$2"
	addq	$32, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq
.LBB577_13:                             # %"$4"
	addq	$32, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r14
	jmp	readyIn                         # TAILCALL
.LBB577_12:                             # %"$2.i.i"
	leaq	.L$3(%rip), %rcx
	xorl	%edx, %edx
	callq	giveup
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 slowNb;
	.scl	2;
	.type	32;
	.endef
	.globl	slowNb                          # -- Begin function slowNb
	.p2align	4, 0x90
slowNb:                                 # @slowNb
.seh_proc slowNb
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rcx, %rsi
	leaq	32(%rcx), %rdi
	movl	8(%rcx), %ecx
	jmp	.LBB578_1
	.p2align	4, 0x90
.LBB578_10:                             # %"$13"
                                        #   in Loop: Header=BB578_1 Depth=1
	movl	8(%rsi), %ecx
.LBB578_1:                              # %"$1"
                                        # =>This Inner Loop Header: Depth=1
	callq	nonBlocking
	movl	%eax, %ebp
	movl	8(%rsi), %ecx
	movl	$4096, %r8d                     # imm = 0x1000
	movq	%rdi, %rdx
	callq	read
	movq	%rax, %rbx
	movl	8(%rsi), %ecx
	movl	%ebp, %edx
	callq	fcntlSetFl
	testl	%ebx, %ebx
	jg	.LBB578_2
# %bb.3:                                # %"$3"
                                        #   in Loop: Header=BB578_1 Depth=1
	testl	%ebx, %ebx
	je	.LBB578_4
# %bb.5:                                # %"$6"
                                        #   in Loop: Header=BB578_1 Depth=1
	callq	gErrno
	cmpl	$2, %eax
	jne	.LBB578_6
# %bb.8:                                # %"$10"
                                        #   in Loop: Header=BB578_1 Depth=1
	cmpl	$0, ($Signal)(%rip)
	je	.LBB578_10
# %bb.9:                                # %"$12"
                                        #   in Loop: Header=BB578_1 Depth=1
	xorl	%ecx, %ecx
	callq	sighandler
	jmp	.LBB578_10
.LBB578_2:                              # %"$5"
	movl	$0, 24(%rsi)
	movl	%ebx, 28(%rsi)
.LBB578_12:                             # %"$4"
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	retq
.LBB578_4:                              # %"$7"
	movq	$-1, 24(%rsi)
	xorl	%ebx, %ebx
	jmp	.LBB578_12
.LBB578_6:                              # %"$6"
	cmpl	$4, %eax
	jne	.LBB578_7
# %bb.11:                               # %"$4.loopexit"
	movl	$-1, %ebx
	jmp	.LBB578_12
.LBB578_7:                              # %"$11"
	movq	$0, 24(%rsi)
	xorl	%ebx, %ebx
	jmp	.LBB578_12
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 tellEnd;
	.scl	2;
	.type	32;
	.endef
	.globl	tellEnd                         # -- Begin function tellEnd
	.p2align	4, 0x90
tellEnd:                                # @tellEnd
.seh_proc tellEnd
# %bb.0:                                # %"$1"
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movl	%ecx, %ebx
	movq	($Ptr)(%rip), %r8
	movq	($TellBuf)(%rip), %rsi
	movb	$3, (%r8)
	subl	%esi, %r8d
	leal	-7(%r8), %r14d
	movl	%ecx, (%rsi)
	movl	%r14d, 4(%rsi)
	movl	($Tell)(%rip), %edi
	testl	%edi, %edi
	je	.LBB579_3
# %bb.1:                                # %"$2"
	incl	%r8d
	movl	%edi, %ecx
	movq	%rsi, %rdx
                                        # kill: def $r8d killed $r8d killed $r8
	callq	wrBytes
	testb	$1, %al
	jne	.LBB579_3
# %bb.2:                                # %"$4"
	movl	%edi, %ecx
	callq	close
	movl	$0, ($Tell)(%rip)
.LBB579_3:                              # %"$3"
	movl	($Children)(%rip), %eax
	leal	(%rax,%rax,8), %ecx
	leal	(%rcx,%rcx,2), %ecx
	addl	%eax, %ecx
	movslq	%ecx, %rbp
	testq	%rbp, %rbp
	je	.LBB579_12
# %bb.4:                                # %"$7.lr.ph"
	movq	($Child)(%rip), %rdi
	addq	$8, %rsi
	testl	%ebx, %ebx
	jne	.LBB579_8
	jmp	.LBB579_5
	.p2align	4, 0x90
.LBB579_11:                             # %"$14"
                                        #   in Loop: Header=BB579_8 Depth=1
	addq	$28, %rdi
	addq	$-28, %rbp
	je	.LBB579_12
.LBB579_8:                              # %"$7"
                                        # =>This Inner Loop Header: Depth=1
	movl	16(%rdi), %eax
	testl	%eax, %eax
	je	.LBB579_11
# %bb.9:                                # %"$7"
                                        #   in Loop: Header=BB579_8 Depth=1
	cmpl	%ebx, %eax
	jne	.LBB579_11
# %bb.10:                               # %"$13"
                                        #   in Loop: Header=BB579_8 Depth=1
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	movl	%r14d, %r8d
	callq	wrChild
	jmp	.LBB579_11
	.p2align	4, 0x90
.LBB579_7:                              # %"$14.us"
                                        #   in Loop: Header=BB579_5 Depth=1
	addq	$28, %rdi
	addq	$-28, %rbp
	je	.LBB579_12
.LBB579_5:                              # %"$7.us"
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, 16(%rdi)
	je	.LBB579_7
# %bb.6:                                # %"$13.us"
                                        #   in Loop: Header=BB579_5 Depth=1
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	movl	%r14d, %r8d
	callq	wrChild
	jmp	.LBB579_7
.LBB579_12:                             # %"$8"
	addq	$32, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 meta;
	.scl	2;
	.type	32;
	.endef
	.globl	meta                            # -- Begin function meta
	.p2align	4, 0x90
meta:                                   # @meta
.seh_proc meta
# %bb.0:                                # %"$1"
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rcx, %rbx
	testb	$15, %bl
	je	.LBB580_3
# %bb.1:
	leaq	SymTab+8(%rip), %rsi
	jmp	.LBB580_2
.LBB580_3:                              # %"$3.preheader"
	movq	%rdx, %r14
	leaq	SymTab+8(%rip), %rsi
	jmp	.LBB580_5
	.p2align	4, 0x90
.LBB580_4:                              # %"$7"
                                        #   in Loop: Header=BB580_5 Depth=1
	movq	8(%rbx), %rbx
	testb	$15, %bl
	jne	.LBB580_2
.LBB580_5:                              # %"$3"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rbx), %rdi
	movl	%edi, %eax
	andl	$14, %eax
	cmpl	$8, %eax
	jne	.LBB580_4
# %bb.6:                                # %"$6"
                                        #   in Loop: Header=BB580_5 Depth=1
	movq	%rdi, %rcx
	movq	%r14, %rdx
	callq	get
	cmpq	%rsi, %rax
	jne	.LBB580_10
# %bb.7:                                # %"$8"
                                        #   in Loop: Header=BB580_5 Depth=1
	cmpq	%rsp, ($StkLimit)(%rip)
	ja	.LBB580_11
# %bb.8:                                # %"$11"
                                        #   in Loop: Header=BB580_5 Depth=1
	movq	(%rdi), %rcx
	movq	%r14, %rdx
	callq	meta
	cmpq	%rsi, %rax
	je	.LBB580_4
.LBB580_10:
	movq	%rax, %rsi
.LBB580_2:                              # %"$4"
	movq	%rsi, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq
.LBB580_11:                             # %"$10"
	xorl	%ecx, %ecx
	callq	stkErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 getn;
	.scl	2;
	.type	32;
	.endef
	.globl	getn                            # -- Begin function getn
	.p2align	4, 0x90
getn:                                   # @getn
.seh_proc getn
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rdx, %rsi
	testb	$6, %sil
	jne	.LBB581_23
# %bb.1:                                # %"$3"
	movq	%r8, %rdi
	testb	$15, %sil
	je	.LBB581_2
# %bb.15:                               # %"$5"
	movq	-8(%rsi), %rax
	testb	$8, %al
	je	.LBB581_20
# %bb.16:                               # %"$5"
	movl	%eax, %edx
	andl	$6, %edx
	testq	%rdx, %rdx
	je	.LBB581_20
# %bb.17:                               # %"$3.i"
	addq	%rax, %rax
	jb	.LBB581_20
# %bb.18:                               # %"$2.i"
	addq	%rax, %rax
	jb	.LBB581_20
# %bb.19:                               # %"$5.i"
	movl	$1, %r8d
	shldq	$62, %rax, %r8
	movq	%r8, -8(%rsi)
	movq	%rsi, %rdx
	callq	db
.LBB581_20:                             # %"$27"
	movq	%rsi, %rcx
	movq	%rdi, %rdx
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	jmp	get                             # TAILCALL
.LBB581_2:                              # %"$4"
	testb	$6, %dil
	je	.LBB581_3
# %bb.8:                                # %"$8"
	cmpq	$2, %rdi
	jne	.LBB581_10
# %bb.9:
	leaq	SymTab+8(%rip), %rax
	jmp	.LBB581_22
.LBB581_3:                              # %"$10.preheader"
	leaq	SymTab+8(%rip), %rax
	jmp	.LBB581_4
	.p2align	4, 0x90
.LBB581_7:                              # %"$13"
                                        #   in Loop: Header=BB581_4 Depth=1
	movq	8(%rsi), %rsi
	testb	$15, %sil
	jne	.LBB581_22
.LBB581_4:                              # %"$10"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rcx
	testb	$15, %cl
	jne	.LBB581_7
# %bb.5:                                # %"$12"
                                        #   in Loop: Header=BB581_4 Depth=1
	cmpq	%rdi, (%rcx)
	jne	.LBB581_7
# %bb.6:                                # %"$15"
	movq	8(%rcx), %rax
	jmp	.LBB581_22
.LBB581_10:                             # %"$19"
	movq	%rdi, %rax
	shrq	$4, %rax
	decq	%rax
	je	.LBB581_13
	.p2align	4, 0x90
.LBB581_11:                             # %"$21"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rsi), %rsi
	decq	%rax
	jne	.LBB581_11
.LBB581_13:                             # %"$22"
	testb	$8, %dil
	jne	.LBB581_14
# %bb.21:                               # %"$24"
	movq	(%rsi), %rax
	jmp	.LBB581_22
.LBB581_14:                             # %"$23"
	movq	8(%rsi), %rax
.LBB581_22:                             # %"$6"
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
.LBB581_23:                             # %"$2"
	movq	%rsi, %rdx
	callq	argErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 prop;
	.scl	2;
	.type	32;
	.endef
	.globl	prop                            # -- Begin function prop
	.p2align	4, 0x90
prop:                                   # @prop
.seh_proc prop
# %bb.0:                                # %"$1"
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rcx, %r14
	movq	-8(%rcx), %rdi
	testb	$6, %dil
	je	.LBB582_1
.LBB582_20:                             # %"$3"
	leaq	SymTab+8(%rip), %rcx
	callq	cons
	movq	%rax, %rbx
	testb	$8, %dil
	jne	.LBB582_21
# %bb.22:                               # %"$28"
	movq	%rbx, %rcx
	movq	%rdi, %rdx
	callq	cons
	jmp	.LBB582_23
.LBB582_21:                             # %"$27"
	andq	$-9, %rdi
	movq	%rbx, %rcx
	movq	%rdi, %rdx
	callq	cons
	orq	$8, %rax
.LBB582_23:                             # %"$29"
	movq	%rax, -8(%r14)
	movq	%rbx, %rax
.LBB582_4:                              # %"$7"
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq
.LBB582_1:                              # %"$2"
	movq	%rdi, %rbx
	andq	$-9, %rbx
	movq	(%rbx), %rax
	testb	$15, %al
	je	.LBB582_5
# %bb.2:                                # %"$4"
	cmpq	%rdx, %rax
	jne	.LBB582_6
.LBB582_3:
	movq	%rdx, %rax
	jmp	.LBB582_4
.LBB582_5:                              # %"$5"
	cmpq	%rdx, 8(%rax)
	je	.LBB582_4
.LBB582_6:                              # %"$6"
	movq	8(%rbx), %rsi
	testb	$15, %sil
	jne	.LBB582_20
# %bb.7:                                # %"$12.preheader"
	leaq	8(%rbx), %rcx
	jmp	.LBB582_8
	.p2align	4, 0x90
.LBB582_14:                             # %"$15"
                                        #   in Loop: Header=BB582_8 Depth=1
	cmpq	%rdx, 8(%rax)
	je	.LBB582_15
.LBB582_19:                             # %"$16"
                                        #   in Loop: Header=BB582_8 Depth=1
	movq	%rsi, %rcx
	movq	8(%rsi), %rsi
	addq	$8, %rcx
	testb	$15, %sil
	jne	.LBB582_20
.LBB582_8:                              # %"$12"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rax
	testb	$15, %al
	je	.LBB582_14
# %bb.9:                                # %"$14"
                                        #   in Loop: Header=BB582_8 Depth=1
	cmpq	%rdx, %rax
	jne	.LBB582_19
# %bb.10:                               # %"$17"
	movq	8(%rsi), %rax
	movq	%rax, (%rcx)
	testb	$8, %dil
	jne	.LBB582_12
# %bb.11:                               # %"$19"
	movq	%rdi, 8(%rsi)
	movq	%rsi, -8(%r14)
	jmp	.LBB582_3
.LBB582_15:                             # %"$22"
	movq	8(%rsi), %rdx
	movq	%rdx, (%rcx)
	testb	$8, %dil
	jne	.LBB582_17
# %bb.16:                               # %"$24"
	movq	%rdi, 8(%rsi)
	movq	%rsi, -8(%r14)
	jmp	.LBB582_4
.LBB582_12:                             # %"$20"
	movq	%rbx, 8(%rsi)
	orq	$8, %rsi
	movq	%rsi, -8(%r14)
	jmp	.LBB582_3
.LBB582_17:                             # %"$25"
	movq	%rbx, 8(%rsi)
	orq	$8, %rsi
	movq	%rsi, -8(%r14)
	jmp	.LBB582_4
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 itemErr;
	.scl	2;
	.type	32;
	.endef
	.globl	itemErr                         # -- Begin function itemErr
	.p2align	4, 0x90
itemErr:                                # @itemErr
.seh_proc itemErr
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	leaq	.L$19(%rip), %r8
	xorl	%r9d, %r9d
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 consTree;
	.scl	2;
	.type	32;
	.endef
	.globl	consTree                        # -- Begin function consTree
	.p2align	4, 0x90
consTree:                               # @consTree
.seh_proc consTree
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rdx, %r8
	movq	%rcx, %rsi
	testb	$15, %sil
	jne	.LBB584_11
# %bb.1:                                # %"$3"
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	env(%rip), %rax
	movq	%rax, 8(%rdi)
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	$10, (%rbx)
	movq	%rdi, 8(%rbx)
	movq	%rbx, env(%rip)
	movl	$10, %eax
.LBB584_2:                              # %"$5"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB584_4 Depth 2
                                        #     Child Loop BB584_8 Depth 2
                                        #       Child Loop BB584_9 Depth 3
	movq	8(%rsi), %rdx
	movq	8(%rdx), %rcx
	testb	$15, %cl
	jne	.LBB584_8
# %bb.3:                                #   in Loop: Header=BB584_2 Depth=1
	addq	$8, %rdx
	.p2align	4, 0x90
.LBB584_4:                              # %"$7"
                                        #   Parent Loop BB584_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rax, (%rdx)
	movq	%rsi, (%rbx)
	movq	%rsi, %rax
	movq	%rcx, %rsi
	movq	8(%rcx), %rdx
	movq	8(%rdx), %rcx
	addq	$8, %rdx
	testb	$15, %cl
	je	.LBB584_4
.LBB584_8:                              # %"$9.preheader"
                                        #   Parent Loop BB584_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB584_9 Depth 3
	movq	%rsi, (%rdi)
	movq	(%rsi), %rcx
	subq	$32, %rsp
	movq	%r8, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, %r8
	movq	8(%rsi), %rax
	movq	(%rax), %rcx
	testb	$15, %cl
	je	.LBB584_5
	.p2align	4, 0x90
.LBB584_9:                              # %"$13.preheader"
                                        #   Parent Loop BB584_2 Depth=1
                                        #     Parent Loop BB584_8 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rsi, %rax
	movq	(%rbx), %rsi
	cmpq	$10, %rsi
	je	.LBB584_10
# %bb.6:                                # %"$15"
                                        #   in Loop: Header=BB584_9 Depth=3
	testb	$8, %sil
	je	.LBB584_7
# %bb.12:                               # %"$16"
                                        #   in Loop: Header=BB584_9 Depth=3
	andq	$-9, %rsi
	movq	8(%rsi), %rcx
	movq	(%rcx), %rdx
	movq	%rdx, (%rbx)
	movq	%rax, (%rcx)
	movq	%rsi, (%rdi)
	jmp	.LBB584_9
	.p2align	4, 0x90
.LBB584_7:                              # %"$18"
                                        #   in Loop: Header=BB584_8 Depth=2
	movq	8(%rsi), %rcx
	movq	8(%rcx), %rdx
	movq	%rdx, (%rbx)
	movq	%rax, 8(%rcx)
	jmp	.LBB584_8
	.p2align	4, 0x90
.LBB584_5:                              # %"$12"
                                        #   in Loop: Header=BB584_2 Depth=1
	movq	(%rbx), %rdx
	movq	%rdx, (%rax)
	orq	$8, %rsi
	movq	%rsi, (%rbx)
	movq	%rcx, (%rdi)
	movq	%rsi, %rax
	movq	%rcx, %rsi
	jmp	.LBB584_2
.LBB584_10:                             # %"$14"
	movq	8(%rdi), %rax
	movq	%rax, env(%rip)
.LBB584_11:                             # %"$4"
	movq	%r8, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 idxDel;
	.scl	2;
	.type	32;
	.endef
	.globl	idxDel                          # -- Begin function idxDel
	.p2align	4, 0x90
idxDel:                                 # @idxDel
.seh_proc idxDel
# %bb.0:                                # %"$1"
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	(%rcx), %rsi
	leaq	SymTab+8(%rip), %r15
	testb	$15, %sil
	je	.LBB585_1
.LBB585_5:
	movq	%r15, %rsi
.LBB585_14:                             # %"$4"
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	retq
.LBB585_1:                              # %"$3.preheader"
	movq	%rdx, %r14
	movq	%rcx, %rdi
	.p2align	4, 0x90
.LBB585_2:                              # %"$3.preheader"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rcx
	movq	8(%rsi), %rbx
	movq	%r14, %rdx
	callq	compare
	testq	%rax, %rax
	je	.LBB585_6
# %bb.3:                                # %"$6"
                                        #   in Loop: Header=BB585_2 Depth=1
	testb	$15, %bl
	jne	.LBB585_5
# %bb.4:                                # %"$19"
                                        #   in Loop: Header=BB585_2 Depth=1
	leaq	8(%rbx), %rdi
	testq	%rax, %rax
	cmovnsq	%rbx, %rdi
	movq	(%rdi), %rsi
	testb	$15, %sil
	je	.LBB585_2
	jmp	.LBB585_5
.LBB585_6:
	leaq	8(%rsi), %rax
	movq	(%rbx), %rdx
	movq	8(%rbx), %rcx
	testb	$15, %dl
	je	.LBB585_8
# %bb.7:                                # %"$10"
	movq	%rcx, (%rdi)
	jmp	.LBB585_14
.LBB585_8:                              # %"$9"
	testb	$15, %cl
	je	.LBB585_10
# %bb.9:                                # %"$12"
	movq	%rdx, (%rdi)
	jmp	.LBB585_14
.LBB585_10:                             # %"$11"
	movq	8(%rcx), %rdx
	movq	(%rdx), %rdi
	testb	$15, %dil
	je	.LBB585_12
# %bb.11:                               # %"$13"
	movq	(%rcx), %rcx
	movq	%rcx, (%rsi)
	movq	(%rax), %rax
	movq	8(%rdx), %rcx
	movq	%rcx, 8(%rax)
	jmp	.LBB585_14
	.p2align	4, 0x90
.LBB585_12:                             # %"$16"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rdi, %rdx
	movq	%rcx, %rax
	movq	8(%rdi), %rbx
	movq	(%rbx), %rdi
	testb	$15, %dil
	movq	%rdx, %rcx
	je	.LBB585_12
# %bb.13:                               # %"$18"
	movq	(%rdx), %rcx
	movq	%rcx, (%rsi)
	movq	8(%rax), %rax
	movq	8(%rbx), %rcx
	movq	%rcx, (%rax)
	jmp	.LBB585_14
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 chopExtNm;
	.scl	2;
	.type	32;
	.endef
	.globl	chopExtNm                       # -- Begin function chopExtNm
	.p2align	4, 0x90
chopExtNm:                              # @chopExtNm
.seh_proc chopExtNm
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$56, %rsp
	.seh_stackalloc 56
	.seh_endprologue
	movq	%rcx, %rsi
	leaq	SymTab+8(%rip), %rax
	movq	%rax, 32(%rsp)
	movq	env(%rip), %rax
	movq	%rax, 40(%rsp)
	leaq	32(%rsp), %rax
	movq	%rax, env(%rip)
	movl	%esi, %eax
	shrl	$4, %eax
	andl	$1048575, %eax                  # imm = 0xFFFFF
	shrq	$12, %rcx
	andl	$-1048576, %ecx                 # imm = 0xFFF00000
	orq	%rax, %rcx
	movq	%rsi, %rax
	shrq	$20, %rax
	movabsq	$4393751543808, %rdi            # imm = 0x3FF00000000
	andq	%rax, %rdi
	orq	%rcx, %rdi
	jmp	.LBB586_3
	.p2align	4, 0x90
.LBB586_1:                              #   in Loop: Header=BB586_3 Depth=1
	xorl	%edi, %edi
.LBB586_2:                              # %"$4"
                                        #   in Loop: Header=BB586_3 Depth=1
	shlq	$4, %rcx
	orq	$2, %rcx
	xorl	%edx, %edx
	callq	consSym
	movq	32(%rsp), %rdx
	movq	%rax, %rcx
	callq	cons
	movq	%rax, 32(%rsp)
	shrq	$3, %rdi
	je	.LBB586_7
.LBB586_3:                              # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	movl	%edi, %ecx
	andl	$7, %ecx
	orq	$48, %rcx
	movq	%rdi, %rax
	shrq	$3, %rax
	je	.LBB586_1
# %bb.4:                                # %"$3"
                                        #   in Loop: Header=BB586_3 Depth=1
	shlq	$8, %rcx
	andl	$7, %eax
	leaq	48(%rax,%rcx), %rcx
	shrq	$6, %rdi
	je	.LBB586_1
# %bb.5:                                # %"$5"
                                        #   in Loop: Header=BB586_3 Depth=1
	shlq	$8, %rcx
	movl	%edi, %eax
	andl	$7, %eax
	leaq	48(%rax,%rcx), %rcx
	jmp	.LBB586_2
.LBB586_7:                              # %"$8"
	movl	%esi, %ecx
	shrl	$24, %ecx
	shrq	$36, %rsi
	andl	$65280, %esi                    # imm = 0xFF00
	orl	%ecx, %esi
	je	.LBB586_11
# %bb.8:                                # %"$11.preheader"
	xorl	%ecx, %ecx
	.p2align	4, 0x90
.LBB586_9:                              # %"$11"
                                        # =>This Inner Loop Header: Depth=1
	movl	%esi, %eax
	andl	$15, %eax
	orl	%ecx, %eax
	orl	$64, %eax
	shrl	$4, %esi
	movl	%eax, %ecx
	shll	$8, %ecx
	testl	%esi, %esi
	jne	.LBB586_9
# %bb.10:                               # %"$13"
	movslq	%eax, %rcx
	shlq	$4, %rcx
	orq	$2, %rcx
	xorl	%edx, %edx
	callq	consSym
	movq	32(%rsp), %rdx
	movq	%rax, %rcx
	callq	cons
	movq	%rax, 32(%rsp)
.LBB586_11:                             # %"$10"
	movq	40(%rsp), %rcx
	movq	%rcx, env(%rip)
	addq	$56, %rsp
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 unintern;
	.scl	2;
	.type	32;
	.endef
	.globl	unintern                        # -- Begin function unintern
	.p2align	4, 0x90
unintern:                               # @unintern
# %bb.0:                                # %"$1"
	pushq	%rsi
	pushq	%rbx
	testb	$2, %dl
	jne	.LBB587_17
# %bb.1:                                # %"$3"
	movq	8(%r8), %r10
	testb	$15, %r10b
	jne	.LBB587_40
# %bb.2:                                # %"$20.preheader"
	addq	$8, %r8
	.p2align	4, 0x90
.LBB587_3:                              # %"$20"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB587_4 Depth 2
                                        #     Child Loop BB587_6 Depth 2
	movq	(%r10), %r9
	movq	-8(%r9), %rax
	testb	$6, %al
	jne	.LBB587_5
	.p2align	4, 0x90
.LBB587_4:                              # %"$23"
                                        #   Parent Loop BB587_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB587_4
.LBB587_5:                              # %"$2.i.preheader"
                                        #   in Loop: Header=BB587_3 Depth=1
	movq	%rdx, %r11
	.p2align	4, 0x90
.LBB587_6:                              # %"$2.i"
                                        #   Parent Loop BB587_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-4(%rax), %rsi
	cmpq	-4(%r11), %rsi
	setb	%bl
	jne	.LBB587_10
# %bb.7:                                # %"$3.i26"
                                        #   in Loop: Header=BB587_6 Depth=2
	movq	4(%rax), %rax
	movq	4(%r11), %r11
	testb	$2, %al
	jne	.LBB587_11
# %bb.8:                                # %"$9.i29"
                                        #   in Loop: Header=BB587_6 Depth=2
	testb	$2, %r11b
	je	.LBB587_6
# %bb.9:                                #   in Loop: Header=BB587_3 Depth=1
	movl	$1, %esi
	jmp	.LBB587_15
	.p2align	4, 0x90
.LBB587_10:                             # %"$5.i24"
                                        #   in Loop: Header=BB587_3 Depth=1
	xorb	$1, %bl
	movzbl	%bl, %eax
	jmp	.LBB587_14
	.p2align	4, 0x90
.LBB587_11:                             # %"$10.i"
                                        #   in Loop: Header=BB587_3 Depth=1
	movq	$-1, %rsi
	testb	$4, %r11b
	jne	.LBB587_15
# %bb.12:                               # %"$12.i27"
                                        #   in Loop: Header=BB587_3 Depth=1
	cmpq	%rax, %r11
	je	.LBB587_26
# %bb.13:                               # %"$14.i"
                                        #   in Loop: Header=BB587_3 Depth=1
	setbe	%al
	movzbl	%al, %eax
.LBB587_14:                             # %"$25"
                                        #   in Loop: Header=BB587_3 Depth=1
	leaq	-1(%rax,%rax), %rsi
.LBB587_15:                             # %"$25"
                                        #   in Loop: Header=BB587_3 Depth=1
	movq	8(%r10), %rax
	testb	$15, %al
	jne	.LBB587_40
# %bb.16:                               # %"$29"
                                        #   in Loop: Header=BB587_3 Depth=1
	leaq	8(%rax), %r8
	testq	%rsi, %rsi
	cmovnsq	%rax, %r8
	movq	(%r8), %r10
	testb	$15, %r10b
	je	.LBB587_3
	jmp	.LBB587_40
	.p2align	4, 0x90
.LBB587_17:                             # %"$5.preheader"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB587_19 Depth 2
	movq	(%r8), %r9
	testb	$15, %r9b
	jne	.LBB587_40
# %bb.18:                               # %"$6"
                                        #   in Loop: Header=BB587_17 Depth=1
	movq	(%r9), %r10
	movq	-8(%r10), %rax
	testb	$6, %al
	jne	.LBB587_20
	.p2align	4, 0x90
.LBB587_19:                             # %"$9"
                                        #   Parent Loop BB587_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB587_19
.LBB587_20:                             # %"$10"
                                        #   in Loop: Header=BB587_17 Depth=1
	cmpq	%rdx, %rax
	je	.LBB587_23
# %bb.21:                               # %"$11"
                                        #   in Loop: Header=BB587_17 Depth=1
	movq	8(%r9), %rsi
	testb	$15, %sil
	jne	.LBB587_40
# %bb.22:                               # %"$15"
                                        #   in Loop: Header=BB587_17 Depth=1
	leaq	8(%rsi), %r8
	cmpq	%rdx, %rax
	cmovaeq	%rsi, %r8
	jmp	.LBB587_17
.LBB587_23:                             # %"$12"
	cmpq	%rcx, %r10
	jne	.LBB587_40
# %bb.24:                               # %"$13"
	movq	8(%r9), %rax
	movq	(%rax), %rdx
	movq	8(%rax), %rcx
	testb	$15, %dl
	je	.LBB587_29
# %bb.25:                               # %"$4.i"
	movq	%rcx, (%r8)
	jmp	.LBB587_40
.LBB587_26:                             # %"$26"
	cmpq	%rcx, %r9
	jne	.LBB587_40
# %bb.27:                               # %"$27"
	movq	8(%r10), %rcx
	movq	(%rcx), %rdx
	movq	8(%rcx), %rax
	testb	$15, %dl
	je	.LBB587_36
# %bb.28:                               # %"$4.i12"
	movq	%rax, (%r8)
	jmp	.LBB587_40
.LBB587_29:                             # %"$3.i"
	testb	$15, %cl
	je	.LBB587_31
.LBB587_30:                             # %"$6.i"
	movq	%rdx, (%r8)
	jmp	.LBB587_40
.LBB587_31:                             # %"$5.i"
	movq	8(%rcx), %rsi
	movq	(%rsi), %rdx
	testb	$15, %dl
	je	.LBB587_33
# %bb.32:                               # %"$8.i"
	movq	(%rcx), %rcx
	movq	%rcx, (%r9)
	movq	8(%rsi), %rcx
	movq	%rcx, 8(%rax)
	jmp	.LBB587_40
.LBB587_33:                             # %"$9.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rcx, %rax
	movq	%rdx, %rcx
	movq	8(%rdx), %rsi
	movq	(%rsi), %rdx
	testb	$15, %dl
	je	.LBB587_33
# %bb.34:                               # %"$12.i"
	movq	(%rcx), %rcx
	movq	%rcx, (%r9)
	movq	8(%rax), %rax
.LBB587_35:                             # %"$4"
	movq	8(%rsi), %rcx
	movq	%rcx, (%rax)
	jmp	.LBB587_40
.LBB587_36:                             # %"$3.i14"
	testb	$15, %al
	jne	.LBB587_30
# %bb.38:                               # %"$5.i17"
	movq	8(%rax), %rsi
	movq	(%rsi), %rdx
	testb	$15, %dl
	je	.LBB587_41
# %bb.39:                               # %"$8.i18"
	movq	(%rax), %rax
	movq	%rax, (%r10)
	movq	8(%rsi), %rax
	movq	%rax, 8(%rcx)
.LBB587_40:                             # %"$4"
	popq	%rbx
	popq	%rsi
	retq
.LBB587_41:                             # %"$9.i20"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rcx
	movq	%rdx, %rax
	movq	8(%rdx), %rsi
	movq	(%rsi), %rdx
	testb	$15, %dl
	je	.LBB587_41
# %bb.42:                               # %"$12.i21"
	movq	(%rax), %rax
	movq	%rax, (%r10)
	movq	8(%rcx), %rax
	jmp	.LBB587_35
                                        # -- End function
	.def	 funq;
	.scl	2;
	.type	32;
	.endef
	.globl	funq                            # -- Begin function funq
	.p2align	4, 0x90
funq:                                   # @funq
# %bb.0:                                # %"$1"
	testb	$2, %cl
	jne	.LBB588_3
# %bb.1:                                # %"$3"
	testb	$12, %cl
	je	.LBB588_4
.LBB588_2:
	xorl	%r10d, %r10d
	movq	%r10, %rax
	retq
.LBB588_3:
	movq	%rcx, %rax
	retq
.LBB588_4:                              # %"$7"
	testb	$15, %cl
	jne	.LBB588_18
# %bb.5:                                # %"$5.preheader.i"
	movq	(%rcx), %rdx
	movq	%rcx, %rax
	.p2align	4, 0x90
.LBB588_6:                              # %"$5.i"
                                        # =>This Inner Loop Header: Depth=1
	orq	$1, %rdx
	movq	%rdx, (%rax)
	movq	8(%rax), %rax
	testb	$15, %al
	jne	.LBB588_16
# %bb.7:                                # %"$6.i"
                                        #   in Loop: Header=BB588_6 Depth=1
	movq	(%rax), %rdx
	testb	$1, %dl
	je	.LBB588_6
# %bb.8:                                # %"$14.preheader.i"
	cmpq	%rcx, %rax
	movq	%rcx, %rdx
	je	.LBB588_12
# %bb.9:
	movq	%rcx, %rdx
	.p2align	4, 0x90
.LBB588_10:                             # %"$15.i"
                                        # =>This Inner Loop Header: Depth=1
	andb	$-2, (%rdx)
	movq	8(%rdx), %rdx
	cmpq	%rax, %rdx
	jne	.LBB588_10
# %bb.11:
	movq	%rax, %rdx
.LBB588_12:                             # %"$17.preheader.i"
	movq	%rdx, %rax
	.p2align	4, 0x90
.LBB588_13:                             # %"$17.i"
                                        # =>This Inner Loop Header: Depth=1
	andb	$-2, (%rax)
	movq	8(%rax), %rax
	cmpq	%rax, %rdx
	jne	.LBB588_13
# %bb.14:                               # %circ.exit
	testq	%rdx, %rdx
	jne	.LBB588_2
	jmp	.LBB588_18
.LBB588_16:                             # %"$9.i.preheader"
	movq	%rcx, %rax
	.p2align	4, 0x90
.LBB588_17:                             # %"$9.i"
                                        # =>This Inner Loop Header: Depth=1
	andb	$-2, (%rax)
	movq	8(%rax), %rax
	testb	$15, %al
	je	.LBB588_17
.LBB588_18:                             # %"$9"
	movq	8(%rcx), %rax
	testb	$15, %al
	je	.LBB588_23
.LBB588_19:                             # %"$14"
	leaq	SymTab+8(%rip), %r8
	cmpq	%r8, %rax
	jne	.LBB588_2
# %bb.20:                               # %"$16"
	movq	(%rcx), %rax
	cmpq	%r8, %rax
	jne	.LBB588_31
# %bb.21:
	leaq	SymTab+280(%rip), %rax
	retq
.LBB588_23:
	leaq	SymTab+8(%rip), %r8
	xorl	%r10d, %r10d
	leaq	SymTab+280(%rip), %r9
	jmp	.LBB588_26
	.p2align	4, 0x90
.LBB588_24:                             # %"$39"
                                        #   in Loop: Header=BB588_26 Depth=1
	cmpq	%r8, %rax
	jne	.LBB588_51
.LBB588_25:                             # %"$40"
                                        #   in Loop: Header=BB588_26 Depth=1
	testb	$15, %al
	jne	.LBB588_19
.LBB588_26:                             # %"$12"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rax), %rdx
	movq	8(%rax), %rax
	testb	$15, %dl
	jne	.LBB588_24
# %bb.27:                               # %"$38"
                                        #   in Loop: Header=BB588_26 Depth=1
	movq	(%rdx), %rdx
	testb	$6, %dl
	je	.LBB588_29
# %bb.28:                               # %"$41"
                                        #   in Loop: Header=BB588_26 Depth=1
	testb	$15, %al
	jne	.LBB588_25
	jmp	.LBB588_51
.LBB588_29:                             # %"$42"
                                        #   in Loop: Header=BB588_26 Depth=1
	cmpq	%r8, %rdx
	je	.LBB588_51
# %bb.30:                               # %"$42"
                                        #   in Loop: Header=BB588_26 Depth=1
	cmpq	%r9, %rdx
	jne	.LBB588_25
	jmp	.LBB588_51
.LBB588_31:                             # %"$18"
	leaq	SymTab+40(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB588_2
# %bb.33:                               # %"$20"
	testb	$15, %al
	jne	.LBB588_46
# %bb.34:                               # %"$5.preheader.i19"
	movq	(%rax), %rdx
	movq	%rax, %rcx
.LBB588_35:                             # %"$5.i21"
                                        # =>This Inner Loop Header: Depth=1
	orq	$1, %rdx
	movq	%rdx, (%rcx)
	movq	8(%rcx), %rcx
	testb	$15, %cl
	jne	.LBB588_44
# %bb.36:                               # %"$6.i25"
                                        #   in Loop: Header=BB588_35 Depth=1
	movq	(%rcx), %rdx
	testb	$1, %dl
	je	.LBB588_35
# %bb.37:                               # %"$14.preheader.i26"
	cmpq	%rax, %rcx
	movq	%rax, %rdx
	je	.LBB588_41
# %bb.38:                               # %"$15.i29.preheader"
	movq	%rax, %rdx
.LBB588_39:                             # %"$15.i29"
                                        # =>This Inner Loop Header: Depth=1
	andb	$-2, (%rdx)
	movq	8(%rdx), %rdx
	cmpq	%rcx, %rdx
	jne	.LBB588_39
# %bb.40:
	movq	%rcx, %rdx
.LBB588_41:                             # %"$17.i30"
                                        # =>This Inner Loop Header: Depth=1
	andb	$-2, (%rdx)
	movq	8(%rdx), %rdx
	cmpq	%rdx, %rcx
	jne	.LBB588_41
# %bb.42:                               # %circ.exit31
	testq	%rcx, %rcx
	jne	.LBB588_2
	jmp	.LBB588_46
.LBB588_44:                             # %"$9.i23.preheader"
	movq	%rax, %rcx
.LBB588_45:                             # %"$9.i23"
                                        # =>This Inner Loop Header: Depth=1
	andb	$-2, (%rcx)
	movq	8(%rcx), %rcx
	testb	$15, %cl
	je	.LBB588_45
.LBB588_46:                             # %"$24.preheader"
	leaq	SymTab+280(%rip), %r9
	xorl	%r10d, %r10d
	movq	%rax, %rcx
	.p2align	4, 0x90
.LBB588_47:                             # %"$24"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %cl
	jne	.LBB588_52
# %bb.48:                               # %"$25"
                                        #   in Loop: Header=BB588_47 Depth=1
	movq	(%rcx), %rdx
	cmpq	%r9, %rdx
	je	.LBB588_51
# %bb.49:                               # %"$25"
                                        #   in Loop: Header=BB588_47 Depth=1
	cmpq	%r8, %rdx
	je	.LBB588_51
# %bb.50:                               # %"$25"
                                        #   in Loop: Header=BB588_47 Depth=1
	movq	8(%rcx), %rcx
	andl	$14, %edx
	cmpl	$8, %edx
	je	.LBB588_47
.LBB588_51:                             # %"$2"
	movq	%r10, %rax
	retq
.LBB588_52:                             # %"$27"
	xorl	%edx, %edx
	testb	$6, %cl
	cmovneq	%rdx, %rax
	cmpq	%r9, %rcx
	cmoveq	%rdx, %rax
	retq
                                        # -- End function
	.def	 initSeed;
	.scl	2;
	.type	32;
	.endef
	.globl	initSeed                        # -- Begin function initSeed
	.p2align	4, 0x90
initSeed:                               # @initSeed
# %bb.0:                                # %"$1"
	pushq	%rsi
	pushq	%rdi
	subq	$40, %rsp
	movq	%rcx, %rsi
	xorl	%edi, %edi
	testb	$15, %sil
	jne	.LBB589_3
	.p2align	4, 0x90
.LBB589_1:                              # %"$3"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rcx
	movq	8(%rsi), %rsi
	callq	initSeed
	addq	%rax, %rdi
	testb	$15, %sil
	je	.LBB589_1
.LBB589_3:                              # %"$4"
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rsi
	je	.LBB589_12
# %bb.4:                                # %"$5"
	testb	$6, %sil
	jne	.LBB589_7
# %bb.5:                                # %"$7"
	movq	-8(%rsi), %rax
	movq	%rax, %rsi
	andq	$-9, %rsi
	testb	$6, %al
	jne	.LBB589_7
	.p2align	4, 0x90
.LBB589_6:                              # %"$10"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rsi), %rsi
	testb	$6, %sil
	je	.LBB589_6
.LBB589_7:                              # %"$8"
	testb	$2, %sil
	jne	.LBB589_8
# %bb.9:                                # %"$13"
	movq	%rsi, %rax
	andq	$-9, %rax
	shrl	$3, %esi
	andl	$1, %esi
	addq	%rdi, %rsi
	.p2align	4, 0x90
.LBB589_10:                             # %"$17"
                                        # =>This Inner Loop Header: Depth=1
	addq	-4(%rax), %rsi
	movq	4(%rax), %rax
	testb	$2, %al
	je	.LBB589_10
# %bb.11:                               # %"$19"
	shrq	$4, %rax
	addq	%rsi, %rax
	movq	%rax, %rdi
	jmp	.LBB589_12
.LBB589_8:                              # %"$12"
	shrq	$3, %rsi
	addq	%rsi, %rdi
.LBB589_12:                             # %"$6"
	movq	%rdi, %rax
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
                                        # -- End function
	.def	 xoru;
	.scl	2;
	.type	32;
	.endef
	.globl	xoru                            # -- Begin function xoru
	.p2align	4, 0x90
xoru:                                   # @xoru
.seh_proc xoru
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rdx, %rsi
	movq	%rcx, %rdi
	testb	$2, %dil
	jne	.LBB590_10
# %bb.1:                                # %"$3"
	testb	$2, %sil
	jne	.LBB590_15
# %bb.2:                                # %"$8"
	movq	-4(%rsi), %rbx
	xorq	-4(%rdi), %rbx
	movq	($Avail)(%rip), %r15
	testq	%r15, %r15
	jne	.LBB590_4
# %bb.3:                                # %"$2.i55"
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %r15
.LBB590_4:                              # %boxNum.exit57
	movq	(%r15), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%rbx, (%r15)
	movq	$2, 8(%r15)
	leaq	4(%r15), %r12
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%r12, (%r14)
	movq	%r14, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r14, env(%rip)
	movq	4(%rdi), %rdi
	movq	4(%rsi), %r13
	testb	$2, %dil
	jne	.LBB590_20
# %bb.5:
	movq	%r12, %rbx
	jmp	.LBB590_7
	.p2align	4, 0x90
.LBB590_6:                              # %boxNum.exit
                                        #   in Loop: Header=BB590_7 Depth=1
	movq	(%rax), %rcx
	movq	%rcx, ($Avail)(%rip)
	movq	%rsi, (%rax)
	movq	$2, 8(%rax)
	addq	$4, %rax
	movq	%rax, (%rbx)
	movq	4(%rdi), %rdi
	movq	4(%r13), %r13
	testb	$2, %dil
	movq	%rax, %rbx
	jne	.LBB590_21
.LBB590_7:                              # %"$11"
                                        # =>This Inner Loop Header: Depth=1
	addq	$4, %rbx
	testb	$2, %r13b
	jne	.LBB590_31
# %bb.8:                                # %"$17"
                                        #   in Loop: Header=BB590_7 Depth=1
	movq	-4(%r13), %rsi
	xorq	-4(%rdi), %rsi
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	jne	.LBB590_6
# %bb.9:                                # %"$2.i"
                                        #   in Loop: Header=BB590_7 Depth=1
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rax
	jmp	.LBB590_6
.LBB590_10:                             # %"$4"
	testb	$2, %sil
	jne	.LBB590_19
# %bb.11:                               # %"$6"
	shrq	$4, %rdi
	xorq	-4(%rsi), %rdi
	movq	4(%rsi), %rdx
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	consNum
	addq	$32, %rsp
	movq	%rax, (%rbp)
	movq	4(%rax), %rbx
	movq	%rbp, %rcx
	testb	$2, %bl
	jne	.LBB590_23
# %bb.12:                               # %"$3.i.preheader"
	movq	%rax, %rdx
	addq	$4, %rdx
	movq	%rbp, %rdi
	movq	%rdi, %rcx
	.p2align	4, 0x90
.LBB590_13:                             # %"$3.i"
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -4(%rax)
	cmovneq	%rdi, %rcx
	movq	%rdx, %rdi
	movq	%rbx, %rax
	leaq	4(%rbx), %rdx
	movq	4(%rbx), %rbx
	testb	$2, %bl
	je	.LBB590_13
	jmp	.LBB590_14
.LBB590_15:                             # %"$9"
	shrq	$4, %rsi
	xorq	-4(%rdi), %rsi
	movq	4(%rdi), %rdx
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	consNum
	addq	$32, %rsp
	movq	%rax, (%rbp)
	movq	4(%rax), %rbx
	movq	%rbp, %rcx
	testb	$2, %bl
	jne	.LBB590_23
# %bb.16:                               # %"$3.i35.preheader"
	movq	%rax, %rdx
	addq	$4, %rdx
	movq	%rbp, %rdi
	movq	%rdi, %rcx
	.p2align	4, 0x90
.LBB590_17:                             # %"$3.i35"
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -4(%rax)
	cmovneq	%rdi, %rcx
	movq	%rdx, %rdi
	movq	%rbx, %rax
	leaq	4(%rbx), %rdx
	movq	4(%rbx), %rbx
	testb	$2, %bl
	je	.LBB590_17
.LBB590_14:                             # %"$4.i"
	cmpq	$2, %rbx
	je	.LBB590_24
	jmp	.LBB590_42
.LBB590_19:                             # %"$5"
	xorq	%rdi, %rsi
	orq	$2, %rsi
	jmp	.LBB590_47
.LBB590_23:
	movq	%rcx, %rdi
	cmpq	$2, %rbx
	jne	.LBB590_42
.LBB590_24:                             # %"$7.i"
	movq	-4(%rax), %rax
	testq	%rax, %rax
	je	.LBB590_28
# %bb.25:                               # %"$11.i"
	movq	%rax, %rcx
	shrq	$60, %rcx
	jne	.LBB590_42
# %bb.26:                               # %"$12.i"
	shlq	$4, %rax
	orq	$2, %rax
	movq	%rax, (%rdi)
	movq	(%rbp), %rsi
	jmp	.LBB590_47
.LBB590_20:
	movq	%r12, %rax
.LBB590_21:                             # %"$13"
	movq	%rax, %rbx
	addq	$4, %rbx
	testb	$2, %r13b
	jne	.LBB590_30
# %bb.22:                               # %"$15"
	shrq	$4, %rdi
	xorq	-4(%r13), %rdi
	movq	4(%r13), %rdx
	subq	$32, %rsp
	movq	%rdi, %rcx
	jmp	.LBB590_32
.LBB590_30:                             # %"$14"
	xorq	%rdi, %r13
	orq	$2, %r13
	jmp	.LBB590_33
.LBB590_28:                             # %"$10.i50"
	movq	(%rcx), %rdx
	movq	-4(%rdx), %rbx
	movq	%rbx, %rax
	shrq	$60, %rax
	jne	.LBB590_29
# %bb.41:                               # %"$14.i"
	shlq	$4, %rbx
	orq	$2, %rbx
	movq	%rbx, (%rcx)
.LBB590_42:                             # %zapZero.exit
	movq	(%rbp), %rsi
	jmp	.LBB590_47
.LBB590_31:                             # %"$18"
	shrq	$4, %r13
	xorq	-4(%rdi), %r13
	movq	4(%rdi), %rdx
	subq	$32, %rsp
	movq	%r13, %rcx
.LBB590_32:                             # %"$12"
	callq	consNum
	addq	$32, %rsp
	movq	%rax, %r13
.LBB590_33:                             # %"$12"
	movq	%r13, (%rbx)
	movq	%r12, (%rbp)
	movq	8(%r15), %rdx
	movq	%rbp, %rax
	testb	$2, %dl
	jne	.LBB590_37
# %bb.34:                               # %"$3.i10.preheader"
	addq	$8, %r15
	movq	%rbp, %rcx
	movq	%rcx, %rax
	.p2align	4, 0x90
.LBB590_35:                             # %"$3.i10"
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -4(%r12)
	cmovneq	%rcx, %rax
	movq	%r15, %rcx
	movq	%rdx, %r12
	leaq	4(%rdx), %r15
	movq	4(%rdx), %rdx
	testb	$2, %dl
	je	.LBB590_35
# %bb.36:                               # %"$4.i18"
	cmpq	$2, %rdx
	je	.LBB590_38
	jmp	.LBB590_46
.LBB590_37:
	movq	%rax, %rcx
	cmpq	$2, %rdx
	jne	.LBB590_46
.LBB590_38:                             # %"$7.i20"
	movq	-4(%r12), %rdx
	testq	%rdx, %rdx
	je	.LBB590_43
# %bb.39:                               # %"$11.i22"
	movq	%rdx, %rax
	shrq	$60, %rax
	jne	.LBB590_46
# %bb.40:                               # %"$12.i23"
	shlq	$4, %rdx
	orq	$2, %rdx
	movq	%rdx, (%rcx)
	jmp	.LBB590_46
.LBB590_29:                             # %"$15.i51"
	movq	$2, 4(%rdx)
	movq	(%rbp), %rsi
	jmp	.LBB590_47
.LBB590_43:                             # %"$10.i25"
	movq	(%rax), %rdx
	movq	-4(%rdx), %rbx
	movq	%rbx, %rcx
	shrq	$60, %rcx
	jne	.LBB590_45
# %bb.44:                               # %"$14.i27"
	shlq	$4, %rbx
	orq	$2, %rbx
	movq	%rbx, (%rax)
	jmp	.LBB590_46
.LBB590_45:                             # %"$15.i26"
	movq	$2, 4(%rdx)
.LBB590_46:                             # %zapZero.exit28
	movq	(%rbp), %rsi
	movq	8(%r14), %rax
	movq	%rax, env(%rip)
.LBB590_47:                             # %"$2"
	movq	%rsi, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 oru;
	.scl	2;
	.type	32;
	.endef
	.globl	oru                             # -- Begin function oru
	.p2align	4, 0x90
oru:                                    # @oru
.seh_proc oru
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rdx, %rdi
	movq	%rcx, %rbx
	testb	$2, %bl
	jne	.LBB591_1
# %bb.6:                                # %"$3"
	testb	$2, %dil
	jne	.LBB591_7
# %bb.8:                                # %"$8"
	movq	-4(%rdi), %rsi
	orq	-4(%rbx), %rsi
	movq	($Avail)(%rip), %r15
	testq	%r15, %r15
	jne	.LBB591_10
# %bb.9:                                # %"$2.i"
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %r15
.LBB591_10:                             # %boxNum.exit
	movq	(%r15), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%rsi, (%r15)
	movq	$2, 8(%r15)
	addq	$4, %r15
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%r15, (%r14)
	movq	%r14, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r14, env(%rip)
	movq	4(%rbx), %rbx
	movq	4(%rdi), %r12
	testb	$2, %bl
	jne	.LBB591_11
# %bb.17:
	movq	%r15, %rsi
	jmp	.LBB591_18
	.p2align	4, 0x90
.LBB591_22:                             # %boxNum.exit8
                                        #   in Loop: Header=BB591_18 Depth=1
	movq	(%rax), %rcx
	movq	%rcx, ($Avail)(%rip)
	movq	%rdi, (%rax)
	movq	$2, 8(%rax)
	addq	$4, %rax
	movq	%rax, (%rsi)
	movq	4(%rbx), %rbx
	movq	4(%r12), %r12
	testb	$2, %bl
	movq	%rax, %rsi
	jne	.LBB591_12
.LBB591_18:                             # %"$11"
                                        # =>This Inner Loop Header: Depth=1
	addq	$4, %rsi
	testb	$2, %r12b
	jne	.LBB591_19
# %bb.20:                               # %"$17"
                                        #   in Loop: Header=BB591_18 Depth=1
	movq	-4(%r12), %rdi
	orq	-4(%rbx), %rdi
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	jne	.LBB591_22
# %bb.21:                               # %"$2.i7"
                                        #   in Loop: Header=BB591_18 Depth=1
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rax
	jmp	.LBB591_22
.LBB591_1:                              # %"$4"
	testb	$2, %dil
	jne	.LBB591_2
# %bb.4:                                # %"$6"
	shrq	$4, %rbx
	orq	-4(%rdi), %rbx
	movq	4(%rdi), %rdx
	movq	%rbx, %rcx
	jmp	.LBB591_5
.LBB591_7:                              # %"$9"
	shrq	$4, %rdi
	orq	-4(%rbx), %rdi
	movq	4(%rbx), %rdx
	movq	%rdi, %rcx
.LBB591_5:                              # %"$6"
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	consNum                         # TAILCALL
.LBB591_2:                              # %"$5"
	orq	%rbx, %rdi
	movq	%rdi, %r15
	jmp	.LBB591_3
.LBB591_11:
	movq	%r15, %rax
.LBB591_12:                             # %"$13"
	movq	%rax, %rsi
	addq	$4, %rsi
	testb	$2, %r12b
	jne	.LBB591_13
# %bb.15:                               # %"$15"
	shrq	$4, %rbx
	orq	-4(%r12), %rbx
	movq	4(%r12), %rdx
	subq	$32, %rsp
	movq	%rbx, %rcx
	jmp	.LBB591_16
.LBB591_13:                             # %"$14"
	orq	%rbx, %r12
	jmp	.LBB591_14
.LBB591_19:                             # %"$18"
	shrq	$4, %r12
	orq	-4(%rbx), %r12
	movq	4(%rbx), %rdx
	subq	$32, %rsp
	movq	%r12, %rcx
.LBB591_16:                             # %"$12"
	callq	consNum
	addq	$32, %rsp
	movq	%rax, %r12
.LBB591_14:                             # %"$12"
	movq	%r12, (%rsi)
	movq	8(%r14), %rax
	movq	%rax, env(%rip)
.LBB591_3:                              # %"$2"
	movq	%r15, %rax
	movq	%rbp, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 andu;
	.scl	2;
	.type	32;
	.endef
	.globl	andu                            # -- Begin function andu
	.p2align	4, 0x90
andu:                                   # @andu
.seh_proc andu
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rdx, %rsi
	movq	%rcx, %r15
	testb	$2, %r15b
	jne	.LBB592_1
# %bb.4:                                # %"$3"
	testb	$2, %sil
	movq	-4(%r15), %rdi
	jne	.LBB592_5
# %bb.6:                                # %"$8"
	andq	-4(%rsi), %rdi
	movq	($Avail)(%rip), %r12
	testq	%r12, %r12
	jne	.LBB592_8
# %bb.7:                                # %"$2.i"
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %r12
.LBB592_8:                              # %boxNum.exit
	movq	(%r12), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%rdi, (%r12)
	movq	$2, 8(%r12)
	leaq	4(%r12), %r13
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%r13, (%r14)
	movq	%r14, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r14, env(%rip)
	movq	4(%r15), %rdi
	movq	4(%rsi), %r15
	testb	$2, %dil
	jne	.LBB592_9
# %bb.13:
	movq	%r13, %rbx
	jmp	.LBB592_14
	.p2align	4, 0x90
.LBB592_20:                             # %boxNum.exit8
                                        #   in Loop: Header=BB592_14 Depth=1
	movq	(%rax), %rcx
	movq	%rcx, ($Avail)(%rip)
	movq	%rsi, (%rax)
	movq	$2, 8(%rax)
	addq	$4, %rax
	movq	%rax, (%rbx)
	movq	4(%rdi), %rdi
	movq	4(%r15), %r15
	testb	$2, %dil
	movq	%rax, %rbx
	jne	.LBB592_10
.LBB592_14:                             # %"$11"
                                        # =>This Inner Loop Header: Depth=1
	addq	$4, %rbx
	testb	$2, %r15b
	movq	-4(%rdi), %rsi
	jne	.LBB592_15
# %bb.18:                               # %"$17"
                                        #   in Loop: Header=BB592_14 Depth=1
	andq	-4(%r15), %rsi
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	jne	.LBB592_20
# %bb.19:                               # %"$2.i7"
                                        #   in Loop: Header=BB592_14 Depth=1
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rax
	jmp	.LBB592_20
.LBB592_1:                              # %"$4"
	testb	$2, %sil
	jne	.LBB592_3
# %bb.2:                                # %"$6"
	movq	-4(%rsi), %rsi
	shlq	$4, %rsi
	orq	$2, %rsi
.LBB592_3:                              # %"$7"
	andq	%r15, %rsi
	jmp	.LBB592_31
.LBB592_5:                              # %"$9"
	shlq	$4, %rdi
	orq	$2, %rdi
	andq	%rdi, %rsi
	jmp	.LBB592_31
.LBB592_9:
	movq	%r13, %rax
.LBB592_10:                             # %"$13"
	testb	$2, %r15b
	jne	.LBB592_12
# %bb.11:                               # %"$15"
	movq	-4(%r15), %r15
	shlq	$4, %r15
	orq	$2, %r15
.LBB592_12:                             # %"$16"
	andq	%rdi, %r15
	addq	$4, %rax
	movq	%rax, %rbx
	jmp	.LBB592_16
.LBB592_15:                             # %"$18"
	shlq	$4, %rsi
	orq	$2, %rsi
	andq	%rsi, %r15
.LBB592_16:                             # %"$12"
	movq	%r15, (%rbx)
	movq	%r13, (%rbp)
	movq	8(%r12), %rdx
	movq	%rbp, %rax
	testb	$2, %dl
	jne	.LBB592_17
# %bb.21:                               # %"$3.i.preheader"
	addq	$8, %r12
	movq	%rbp, %rcx
	movq	%rcx, %rax
	.p2align	4, 0x90
.LBB592_22:                             # %"$3.i"
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -4(%r13)
	cmovneq	%rcx, %rax
	movq	%r12, %rcx
	movq	%rdx, %r13
	leaq	4(%rdx), %r12
	movq	4(%rdx), %rdx
	testb	$2, %dl
	je	.LBB592_22
# %bb.23:                               # %"$4.i"
	cmpq	$2, %rdx
	je	.LBB592_24
	jmp	.LBB592_30
.LBB592_17:
	movq	%rax, %rcx
	cmpq	$2, %rdx
	jne	.LBB592_30
.LBB592_24:                             # %"$7.i"
	movq	-4(%r13), %rdx
	testq	%rdx, %rdx
	je	.LBB592_27
# %bb.25:                               # %"$11.i"
	movq	%rdx, %rax
	shrq	$60, %rax
	jne	.LBB592_30
# %bb.26:                               # %"$12.i"
	shlq	$4, %rdx
	orq	$2, %rdx
	movq	%rdx, (%rcx)
	jmp	.LBB592_30
.LBB592_27:                             # %"$10.i"
	movq	(%rax), %rdx
	movq	-4(%rdx), %rbx
	movq	%rbx, %rcx
	shrq	$60, %rcx
	jne	.LBB592_28
# %bb.29:                               # %"$14.i"
	shlq	$4, %rbx
	orq	$2, %rbx
	movq	%rbx, (%rax)
	jmp	.LBB592_30
.LBB592_28:                             # %"$15.i"
	movq	$2, 4(%rdx)
.LBB592_30:                             # %zapZero.exit
	movq	(%rbp), %rsi
	movq	8(%r14), %rax
	movq	%rax, env(%rip)
.LBB592_31:                             # %"$2"
	movq	%rsi, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 shru;
	.scl	2;
	.type	32;
	.endef
	.globl	shru                            # -- Begin function shru
	.p2align	4, 0x90
shru:                                   # @shru
.seh_proc shru
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %r15
	testb	$2, %r15b
	jne	.LBB593_1
# %bb.2:                                # %"$3"
	movq	-4(%r15), %rax
	movq	4(%r15), %rsi
	shrq	%rax
	testb	$4, %sil
	jne	.LBB593_3
# %bb.18:                               # %"$6"
	movl	%esi, %edi
	andl	$16, %edi
	shlq	$59, %rdi
	orq	%rax, %rdi
	shrq	$5, %rsi
	jne	.LBB593_21
# %bb.19:                               # %"$6"
	movabsq	$1152921504606846975, %rcx      # imm = 0xFFFFFFFFFFFFFFF
	cmpq	%rcx, %rdi
	ja	.LBB593_21
# %bb.20:                               # %"$18"
	shlq	$4, %rax
	orq	$2, %rax
	movq	%rax, %r15
	jmp	.LBB593_24
.LBB593_1:                              # %"$2"
	shrq	%r15
	andq	$-12, %r15
	orq	$2, %r15
	jmp	.LBB593_24
.LBB593_3:                              # %"$5"
	movq	-4(%rsi), %r14
	movq	%r14, %rdi
	shlq	$63, %rdi
	orq	%rax, %rdi
	movq	($Avail)(%rip), %r15
	testq	%r15, %r15
	jne	.LBB593_5
# %bb.4:                                # %"$2.i"
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %r15
.LBB593_5:                              # %boxNum.exit
	movq	(%r15), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%rdi, (%r15)
	movq	$2, 8(%r15)
	addq	$4, %r15
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdx
	movq	%r15, (%rdx)
	movq	%rdx, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%rdx, (%rbp)                    # 8-byte Spill
	movq	%rdx, env(%rip)
	shrq	%r14
	movq	4(%rsi), %rbx
	testb	$2, %bl
	jne	.LBB593_6
# %bb.7:                                # %"$9.preheader"
	movq	%r15, %r13
	jmp	.LBB593_8
	.p2align	4, 0x90
.LBB593_10:                             # %boxNum.exit12
                                        #   in Loop: Header=BB593_8 Depth=1
	movq	(%rsi), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%rdi, (%rsi)
	movq	$2, 8(%rsi)
	addq	$4, %rsi
	movq	%rsi, 4(%r13)
	shrq	%r12
	movq	4(%rbx), %rbx
	testb	$2, %bl
	movq	%r12, %r14
	movq	%rsi, %r13
	jne	.LBB593_11
.LBB593_8:                              # %"$9"
                                        # =>This Inner Loop Header: Depth=1
	movq	-4(%rbx), %r12
	movq	%r12, %rdi
	shlq	$63, %rdi
	orq	%r14, %rdi
	movq	($Avail)(%rip), %rsi
	testq	%rsi, %rsi
	jne	.LBB593_10
# %bb.9:                                # %"$2.i11"
                                        #   in Loop: Header=BB593_8 Depth=1
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rsi
	jmp	.LBB593_10
.LBB593_21:                             # %"$19"
	movq	($Avail)(%rip), %r15
	testq	%r15, %r15
	jne	.LBB593_23
# %bb.22:                               # %"$2.i17"
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %r15
.LBB593_23:                             # %boxNum.exit18
	movq	(%r15), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%rdi, (%r15)
	shlq	$4, %rsi
	orq	$2, %rsi
	movq	%rsi, 8(%r15)
	addq	$4, %r15
	jmp	.LBB593_24
.LBB593_6:
	movq	%r15, %rsi
	movq	%r14, %r12
.LBB593_11:                             # %"$10"
	movl	%ebx, %edi
	andl	$16, %edi
	shlq	$59, %rdi
	orq	%r12, %rdi
	shrq	$5, %rbx
	jne	.LBB593_14
# %bb.12:                               # %"$10"
	movabsq	$1152921504606846975, %rax      # imm = 0xFFFFFFFFFFFFFFF
	cmpq	%rax, %rdi
	ja	.LBB593_14
# %bb.13:                               # %"$13"
	shlq	$4, %r12
	orq	$2, %r12
	jmp	.LBB593_17
.LBB593_14:                             # %"$14"
	movq	($Avail)(%rip), %r12
	testq	%r12, %r12
	jne	.LBB593_16
# %bb.15:                               # %"$2.i14"
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %r12
.LBB593_16:                             # %boxNum.exit15
	movq	(%r12), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%rdi, (%r12)
	shlq	$4, %rbx
	orq	$2, %rbx
	movq	%rbx, 8(%r12)
	addq	$4, %r12
.LBB593_17:                             # %"$15"
	movq	%r12, 4(%rsi)
	movq	(%rbp), %rax                    # 8-byte Reload
	movq	8(%rax), %rax
	movq	%rax, env(%rip)
.LBB593_24:                             # %"$4"
	movq	%r15, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 shlu;
	.scl	2;
	.type	32;
	.endef
	.globl	shlu                            # -- Begin function shlu
	.p2align	4, 0x90
shlu:                                   # @shlu
.seh_proc shlu
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rcx, %rdi
	testb	$2, %dil
	jne	.LBB594_1
# %bb.6:                                # %"$3"
	movq	-4(%rdi), %r12
	leaq	(%r12,%r12), %rsi
	movq	($Avail)(%rip), %r15
	testq	%r15, %r15
	jne	.LBB594_8
# %bb.7:                                # %"$2.i4"
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %r15
.LBB594_8:                              # %boxNum.exit5
	movq	(%r15), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%rsi, (%r15)
	movq	$2, 8(%r15)
	addq	$4, %r15
	movq	4(%rdi), %rdi
	movq	env(%rip), %rcx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r14
	movq	%r15, (%r14)
	movq	%r14, %rax
	orq	$8, %rax
	movq	%rcx, (%rax)
	movq	%r14, env(%rip)
	testb	$4, %dil
	jne	.LBB594_10
# %bb.9:
	movq	%r15, %rsi
.LBB594_14:                             # %"$10"
	movq	%rdi, %rbx
	shrq	$4, %rbx
	shldq	$1, %r12, %rbx
	testq	%rdi, %rdi
	js	.LBB594_15
# %bb.18:                               # %"$12"
	shlq	$4, %rbx
	orq	$2, %rbx
	movq	%rbx, %rax
	jmp	.LBB594_19
.LBB594_1:                              # %"$2"
	movq	%rdi, %r15
	addq	%rdi, %r15
	jae	.LBB594_5
# %bb.2:                                # %"$5"
	shrq	$3, %rdi
	movq	($Avail)(%rip), %r15
	testq	%r15, %r15
	jne	.LBB594_4
# %bb.3:                                # %"$2.i"
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %r15
.LBB594_4:                              # %boxNum.exit
	movq	(%r15), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%rdi, (%r15)
	movq	$2, 8(%r15)
	addq	$4, %r15
	jmp	.LBB594_20
.LBB594_10:                             # %"$9.preheader"
	movq	%r15, %r13
	jmp	.LBB594_11
	.p2align	4, 0x90
.LBB594_13:                             # %boxNum.exit8
                                        #   in Loop: Header=BB594_11 Depth=1
	movq	(%rsi), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%rbx, (%rsi)
	movq	$2, 8(%rsi)
	addq	$4, %rsi
	movq	%rsi, 4(%r13)
	movq	4(%rdi), %rdi
	testb	$4, %dil
	movq	%rsi, %r13
	je	.LBB594_14
.LBB594_11:                             # %"$9"
                                        # =>This Inner Loop Header: Depth=1
	movq	%r12, %rbx
	movq	-4(%rdi), %r12
	shrdq	$63, %r12, %rbx
	movq	($Avail)(%rip), %rsi
	testq	%rsi, %rsi
	jne	.LBB594_13
# %bb.12:                               # %"$2.i7"
                                        #   in Loop: Header=BB594_11 Depth=1
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rsi
	jmp	.LBB594_13
.LBB594_5:                              # %"$6"
	xorq	$6, %r15
	jmp	.LBB594_20
.LBB594_15:                             # %"$11"
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	jne	.LBB594_17
# %bb.16:                               # %"$2.i10"
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %rax
.LBB594_17:                             # %boxNum.exit11
	movq	(%rax), %rcx
	movq	%rcx, ($Avail)(%rip)
	movq	%rbx, (%rax)
	movq	$2, 8(%rax)
	addq	$4, %rax
.LBB594_19:                             # %"$13"
	movq	%rax, 4(%rsi)
	movq	8(%r14), %rax
	movq	%rax, env(%rip)
.LBB594_20:                             # %"$4"
	movq	%r15, %rax
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 divErr;
	.scl	2;
	.type	32;
	.endef
	.globl	divErr                          # -- Begin function divErr
	.p2align	4, 0x90
divErr:                                 # @divErr
.seh_proc divErr
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	leaq	.L$26(%rip), %r8
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 div1;
	.scl	2;
	.type	32;
	.endef
	.globl	div1                            # -- Begin function div1
	.p2align	4, 0x90
div1:                                   # @div1
.seh_proc div1
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$120, %rsp
	.seh_stackalloc 120
	leaq	112(%rsp), %rbp
	.seh_setframe %rbp, 112
	.seh_endprologue
	movb	%r8b, 7(%rbp)                   # 1-byte Spill
	movq	%rdx, %r15
	movq	%rcx, %rsi
	movq	env(%rip), %rax
	movq	$2, -64(%rbp)
	movq	%rax, -56(%rbp)
	leaq	-64(%rbp), %rax
	movq	%rax, env(%rip)
	movq	-4(%rcx), %rbx
	movq	($Avail)(%rip), %r14
	testq	%r14, %r14
	jne	.LBB596_2
# %bb.1:                                # %"$2.i"
	subq	$32, %rsp
	callq	gc
	addq	$32, %rsp
	movq	($Avail)(%rip), %r14
.LBB596_2:                              # %boxNum.exit
	movq	(%r14), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%rbx, (%r14)
	movq	$2, 8(%r14)
	addq	$4, %r14
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rcx
	movq	%r14, (%rcx)
	movq	env(%rip), %rax
	movq	%rax, 8(%rcx)
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rax
	movq	%r15, (%rax)
	movq	%rcx, -48(%rbp)                 # 8-byte Spill
	movq	%rcx, 8(%rax)
	movq	%rax, -16(%rbp)                 # 8-byte Spill
	movq	%rax, env(%rip)
	movq	4(%rsi), %rsi
	xorl	%r8d, %r8d
	testb	$4, %sil
	jne	.LBB596_3
.LBB596_7:                              # %"$4"
	cmpq	$2, %rsi
	je	.LBB596_11
# %bb.8:                                # %"$5"
	shrq	$4, %rsi
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	jne	.LBB596_10
# %bb.9:                                # %"$2.i39"
	subq	$32, %rsp
	movq	%r8, %rdi
	callq	gc
	movq	%rdi, %r8
	addq	$32, %rsp
	movq	($Avail)(%rip), %rax
.LBB596_10:                             # %boxNum.exit40
	movq	(%rax), %rcx
	movq	%rcx, ($Avail)(%rip)
	movq	%rsi, (%rax)
	movq	$2, 8(%rax)
	addq	$4, %rax
	movq	%rax, 4(%r14)
	incq	%r8
	movq	%rax, %r14
.LBB596_11:                             # %"$6"
	testb	$2, %r15b
	jne	.LBB596_12
# %bb.19:                               # %"$8"
	movq	-4(%r15), %rdi
	movq	($Avail)(%rip), %r13
	testq	%r13, %r13
	jne	.LBB596_21
# %bb.20:                               # %"$2.i45"
	subq	$32, %rsp
	movq	%r8, %rsi
	callq	gc
	movq	%rsi, %r8
	addq	$32, %rsp
	movq	($Avail)(%rip), %r13
.LBB596_21:                             # %boxNum.exit46
	movq	(%r13), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%rdi, (%r13)
	movq	$2, 8(%r13)
	addq	$4, %r13
	movq	-16(%rbp), %rax                 # 8-byte Reload
	movq	%r13, (%rax)
	movq	4(%r15), %rbx
	testb	$4, %bl
	jne	.LBB596_23
# %bb.22:
	movl	$1, %eax
	movq	%rax, -40(%rbp)                 # 8-byte Spill
	xorl	%r15d, %r15d
	cmpq	$2, %rbx
	jne	.LBB596_29
.LBB596_32:                             # %"$14"
	testq	%r8, %r8
	jns	.LBB596_15
	jmp	.LBB596_33
.LBB596_3:                              # %"$3.preheader"
	movq	%r14, %rbx
	jmp	.LBB596_4
	.p2align	4, 0x90
.LBB596_6:                              # %boxNum.exit37
                                        #   in Loop: Header=BB596_4 Depth=1
	movq	(%r14), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%rdi, (%r14)
	movq	$2, 8(%r14)
	addq	$4, %r14
	movq	%r14, 4(%rbx)
	incq	%r8
	movq	4(%rsi), %rsi
	testb	$4, %sil
	movq	%r14, %rbx
	je	.LBB596_7
.LBB596_4:                              # %"$3"
                                        # =>This Inner Loop Header: Depth=1
	movq	-4(%rsi), %rdi
	movq	($Avail)(%rip), %r14
	testq	%r14, %r14
	jne	.LBB596_6
# %bb.5:                                # %"$2.i36"
                                        #   in Loop: Header=BB596_4 Depth=1
	subq	$32, %rsp
	movq	%r8, %r14
	callq	gc
	movq	%r14, %r8
	addq	$32, %rsp
	movq	($Avail)(%rip), %r14
	jmp	.LBB596_6
.LBB596_12:                             # %"$7"
	shrq	$4, %r15
	movq	($Avail)(%rip), %r13
	testq	%r13, %r13
	jne	.LBB596_14
# %bb.13:                               # %"$2.i42"
	subq	$32, %rsp
	movq	%r8, %rsi
	callq	gc
	movq	%rsi, %r8
	addq	$32, %rsp
	movq	($Avail)(%rip), %r13
.LBB596_14:                             # %boxNum.exit43
	movq	(%r13), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%r15, (%r13)
	movq	$2, 8(%r13)
	addq	$4, %r13
	movq	-16(%rbp), %rax                 # 8-byte Reload
	movq	%r13, (%rax)
	movl	$1, %eax
	movq	%rax, -40(%rbp)                 # 8-byte Spill
	xorl	%r15d, %r15d
	jmp	.LBB596_15
.LBB596_23:                             # %"$11.preheader"
	xorl	%esi, %esi
	jmp	.LBB596_24
	.p2align	4, 0x90
.LBB596_26:                             # %boxNum.exit49
                                        #   in Loop: Header=BB596_24 Depth=1
	movq	(%r13), %rax
	movq	%rax, ($Avail)(%rip)
	movq	%rdi, (%r13)
	movq	$2, 8(%r13)
	addq	$4, %r13
	movq	%r13, 4(%r15)
	movq	4(%rbx), %rbx
	incq	%rsi
	testb	$4, %bl
	je	.LBB596_27
.LBB596_24:                             # %"$11"
                                        # =>This Inner Loop Header: Depth=1
	movq	%r13, %r15
	movq	-4(%rbx), %rdi
	movq	($Avail)(%rip), %r13
	testq	%r13, %r13
	jne	.LBB596_26
# %bb.25:                               # %"$2.i48"
                                        #   in Loop: Header=BB596_24 Depth=1
	subq	$32, %rsp
	movq	%r8, %r12
	callq	gc
	movq	%r12, %r8
	addq	$32, %rsp
	movq	($Avail)(%rip), %r13
	jmp	.LBB596_26
.LBB596_27:                             # %"$12.loopexit"
	subq	%rsi, %r8
	incq	%rsi
	movq	%rsi, -40(%rbp)                 # 8-byte Spill
	cmpq	$2, %rbx
	je	.LBB596_32
.LBB596_29:                             # %"$13"
	shrq	$4, %rbx
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	jne	.LBB596_31
# %bb.30:                               # %"$2.i51"
	subq	$32, %rsp
	movq	%r8, %rdi
	callq	gc
	movq	%rdi, %r8
	addq	$32, %rsp
	movq	($Avail)(%rip), %rax
.LBB596_31:                             # %boxNum.exit52
	movq	(%rax), %rcx
	movq	%rcx, ($Avail)(%rip)
	movq	%rbx, (%rax)
	movq	$2, 8(%rax)
	addq	$4, %rax
	movq	%rax, 4(%r13)
	decq	%r8
	incq	-40(%rbp)                       # 8-byte Folded Spill
	movq	%r13, %r15
	movq	%rax, %r13
	testq	%r8, %r8
	js	.LBB596_33
.LBB596_15:                             # %"$9"
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	movq	%r8, -32(%rbp)                  # 8-byte Spill
	jne	.LBB596_17
# %bb.16:                               # %"$2.i55"
	subq	$32, %rsp
	callq	gc
	movq	-32(%rbp), %r8                  # 8-byte Reload
	addq	$32, %rsp
	movq	($Avail)(%rip), %rax
.LBB596_17:                             # %boxNum.exit57
	movq	(%rax), %rcx
	movq	%rcx, ($Avail)(%rip)
	movq	$0, (%rax)
	movq	$2, 8(%rax)
	addq	$4, %rax
	movq	%rax, 4(%r14)
	movq	-4(%r13), %r12
	xorl	%eax, %eax
	testq	%r12, %r12
	js	.LBB596_18
# %bb.47:                               # %"$21.preheader"
	movq	%rax, -24(%rbp)                 # 8-byte Spill
	movq	-16(%rbp), %r14                 # 8-byte Reload
	jmp	.LBB596_48
	.p2align	4, 0x90
.LBB596_64:                             # %"$6.i77"
                                        #   in Loop: Header=BB596_48 Depth=1
	shlq	$4, %rbx
	orq	$2, %rbx
	movq	%rbx, %rax
.LBB596_65:                             # %twiceBig.exit79
                                        #   in Loop: Header=BB596_48 Depth=1
	movq	%rax, 4(%rdi)
	incq	%rsi
	movq	%rsi, -24(%rbp)                 # 8-byte Spill
	movq	-4(%r13), %r12
	testq	%r12, %r12
	js	.LBB596_66
.LBB596_48:                             # %"$21"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB596_51 Depth 2
                                        #     Child Loop BB596_59 Depth 2
	movq	-48(%rbp), %rax                 # 8-byte Reload
	movq	(%rax), %rdi
	movq	-4(%rdi), %rcx
	movq	4(%rdi), %rax
	leaq	(%rcx,%rcx), %rdx
	movq	%rdx, -4(%rdi)
	testb	$4, %al
	jne	.LBB596_50
# %bb.49:                               #   in Loop: Header=BB596_48 Depth=1
	movq	%rcx, %rdx
	movq	-24(%rbp), %rsi                 # 8-byte Reload
	jmp	.LBB596_52
	.p2align	4, 0x90
.LBB596_50:                             # %"$3.i60.preheader"
                                        #   in Loop: Header=BB596_48 Depth=1
	movq	-24(%rbp), %rsi                 # 8-byte Reload
	.p2align	4, 0x90
.LBB596_51:                             # %"$3.i60"
                                        #   Parent Loop BB596_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rax, %rdi
	movq	-4(%rax), %rdx
	movq	4(%rax), %rax
	shrdq	$63, %rdx, %rcx
	movq	%rcx, -4(%rdi)
	testb	$4, %al
	movq	%rdx, %rcx
	jne	.LBB596_51
.LBB596_52:                             # %"$4.i63"
                                        #   in Loop: Header=BB596_48 Depth=1
	movq	%rax, %rbx
	shrq	$4, %rbx
	shldq	$1, %rdx, %rbx
	testq	%rax, %rax
	js	.LBB596_53
# %bb.56:                               # %"$6.i"
                                        #   in Loop: Header=BB596_48 Depth=1
	shlq	$4, %rbx
	orq	$2, %rbx
	movq	%rbx, %rax
	jmp	.LBB596_57
	.p2align	4, 0x90
.LBB596_53:                             # %"$5.i"
                                        #   in Loop: Header=BB596_48 Depth=1
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	jne	.LBB596_55
# %bb.54:                               # %"$2.i.i"
                                        #   in Loop: Header=BB596_48 Depth=1
	subq	$32, %rsp
	callq	gc
	movq	-32(%rbp), %r8                  # 8-byte Reload
	addq	$32, %rsp
	movq	($Avail)(%rip), %rax
.LBB596_55:                             # %boxNum.exit.i
                                        #   in Loop: Header=BB596_48 Depth=1
	movq	(%rax), %rcx
	movq	%rcx, ($Avail)(%rip)
	movq	%rbx, (%rax)
	movq	$2, 8(%rax)
	addq	$4, %rax
.LBB596_57:                             # %twiceBig.exit
                                        #   in Loop: Header=BB596_48 Depth=1
	movq	%rax, 4(%rdi)
	movq	(%r14), %rdi
	movq	-4(%rdi), %rcx
	movq	4(%rdi), %rax
	leaq	(%rcx,%rcx), %rdx
	movq	%rdx, -4(%rdi)
	testb	$4, %al
	jne	.LBB596_59
# %bb.58:                               #   in Loop: Header=BB596_48 Depth=1
	movq	%rcx, %rdx
	jmp	.LBB596_60
	.p2align	4, 0x90
.LBB596_59:                             # %"$3.i67"
                                        #   Parent Loop BB596_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rax, %rdi
	movq	-4(%rax), %rdx
	movq	4(%rax), %rax
	shrdq	$63, %rdx, %rcx
	movq	%rcx, -4(%rdi)
	testb	$4, %al
	movq	%rdx, %rcx
	jne	.LBB596_59
.LBB596_60:                             # %"$4.i72"
                                        #   in Loop: Header=BB596_48 Depth=1
	movq	%rax, %rbx
	shrq	$4, %rbx
	shldq	$1, %rdx, %rbx
	testq	%rax, %rax
	jns	.LBB596_64
# %bb.61:                               # %"$5.i74"
                                        #   in Loop: Header=BB596_48 Depth=1
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	jne	.LBB596_63
# %bb.62:                               # %"$2.i.i75"
                                        #   in Loop: Header=BB596_48 Depth=1
	subq	$32, %rsp
	callq	gc
	movq	-32(%rbp), %r8                  # 8-byte Reload
	addq	$32, %rsp
	movq	($Avail)(%rip), %rax
.LBB596_63:                             # %boxNum.exit.i76
                                        #   in Loop: Header=BB596_48 Depth=1
	movq	(%rax), %rcx
	movq	%rcx, ($Avail)(%rip)
	movq	%rbx, (%rax)
	movq	$2, 8(%rax)
	addq	$4, %rax
	jmp	.LBB596_65
.LBB596_18:
	movq	%rax, -24(%rbp)                 # 8-byte Spill
.LBB596_66:                             # %"$22"
	testq	%r15, %r15
	je	.LBB596_67
# %bb.68:                               # %"$23"
	movq	-4(%r15), %rax
	jmp	.LBB596_69
.LBB596_67:
	xorl	%eax, %eax
.LBB596_69:                             # %"$24"
	movq	%rax, -72(%rbp)                 # 8-byte Spill
	movl	$2, %r11d
	xorl	%r13d, %r13d
	jmp	.LBB596_70
	.p2align	4, 0x90
.LBB596_91:                             #   in Loop: Header=BB596_70 Depth=1
	addq	$-4, %rax
	movzbl	%dl, %ecx
	addq	%rbx, %rcx
	movq	%rcx, (%rax)
.LBB596_92:                             # %"$46"
                                        #   in Loop: Header=BB596_70 Depth=1
	subq	$32, %rsp
	movq	%r8, %rcx
	movq	%r11, %rdx
	callq	consNum
	addq	$32, %rsp
	movq	%rax, %r11
	movq	%rax, -64(%rbp)
	movq	-32(%rbp), %r8                  # 8-byte Reload
	testq	%r8, %r8
	js	.LBB596_93
.LBB596_70:                             # %"$25"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB596_118 Depth 2
                                        #     Child Loop BB596_72 Depth 2
                                        #     Child Loop BB596_76 Depth 2
                                        #     Child Loop BB596_81 Depth 2
                                        #     Child Loop BB596_90 Depth 2
	movq	%r8, %rcx
	movq	-48(%rbp), %rax                 # 8-byte Reload
	movq	(%rax), %r14
	decq	%r8
	movq	%rcx, -80(%rbp)                 # 8-byte Spill
	movq	%rcx, %rax
	js	.LBB596_71
	.p2align	4, 0x90
.LBB596_118:                            # %"$27"
                                        #   Parent Loop BB596_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	4(%r14), %r14
	decq	%rax
	testq	%rax, %rax
	jg	.LBB596_118
.LBB596_71:                             # %"$29.preheader"
                                        #   in Loop: Header=BB596_70 Depth=1
	movq	%r8, -32(%rbp)                  # 8-byte Spill
	xorl	%ebx, %ebx
	xorl	%r15d, %r15d
	movq	-40(%rbp), %rax                 # 8-byte Reload
	movq	%r14, %rcx
	.p2align	4, 0x90
.LBB596_72:                             # %"$29"
                                        #   Parent Loop BB596_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%r15, %rdi
	movq	%rbx, %r15
	movq	-4(%rcx), %rbx
	movq	4(%rcx), %rcx
	decq	%rax
	jns	.LBB596_72
# %bb.73:                               # %"$31"
                                        #   in Loop: Header=BB596_70 Depth=1
	movq	$-1, %r8
	cmpq	%r12, %rbx
	je	.LBB596_75
# %bb.74:                               # %"$33"
                                        #   in Loop: Header=BB596_70 Depth=1
	movq	%rbx, -104(%rbp)
	movq	%r15, -112(%rbp)
	movq	%r12, -96(%rbp)
	movq	$0, -88(%rbp)
	subq	$32, %rsp
	leaq	-112(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movq	%r11, %rsi
	callq	__udivti3
	movq	%rsi, %r11
	addq	$32, %rsp
	movq	%xmm0, %r8
.LBB596_75:                             # %"$34"
                                        #   in Loop: Header=BB596_70 Depth=1
	movq	%r8, %rax
	mulq	%r12
	xorl	%esi, %esi
	subq	%rax, %r15
	setb	%sil
	subq	%rdx, %rbx
	cmpq	%rsi, %rbx
	movq	-72(%rbp), %rcx                 # 8-byte Reload
	je	.LBB596_76
	jmp	.LBB596_80
	.p2align	4, 0x90
.LBB596_79:                             # %"$41"
                                        #   in Loop: Header=BB596_76 Depth=2
	decq	%r8
	addq	%r12, %r15
	jb	.LBB596_80
.LBB596_76:                             # %"$36"
                                        #   Parent Loop BB596_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%r8, %rax
	mulq	%rcx
	cmpq	%rdx, %r15
	ja	.LBB596_80
# %bb.77:                               # %"$38"
                                        #   in Loop: Header=BB596_76 Depth=2
	cmpq	%rax, %rdi
	jb	.LBB596_79
# %bb.78:                               # %"$38"
                                        #   in Loop: Header=BB596_76 Depth=2
	cmpq	%rdx, %r15
	jne	.LBB596_79
	.p2align	4, 0x90
.LBB596_80:                             # %"$41.$37.loopexit_crit_edge"
                                        #   in Loop: Header=BB596_70 Depth=1
	movq	-16(%rbp), %r10                 # 8-byte Reload
	movq	(%r10), %rbx
	movq	-4(%rbx), %rdx
	movq	%r13, %rdi
	imulq	%rdx, %rdi
	movq	%r8, %rax
	mulq	%rdx
	subq	%rax, -4(%r14)
	adcq	%rdi, %rdx
	movq	4(%rbx), %rdi
	movq	%r14, %rbx
	testb	$4, %dil
	je	.LBB596_83
	.p2align	4, 0x90
.LBB596_81:                             # %"$43"
                                        #   Parent Loop BB596_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	4(%rbx), %rbx
	movq	-4(%rbx), %rsi
	xorl	%r9d, %r9d
	subq	%rdx, %rsi
	setb	%r9b
	movq	%rsi, -4(%rbx)
	movq	-4(%rdi), %rdx
	movq	%r13, %rcx
	imulq	%rdx, %rcx
	movq	%r8, %rax
	mulq	%rdx
	addq	%rcx, %rdx
	subq	%rax, %rsi
	movq	%rsi, -4(%rbx)
	adcq	%r9, %rdx
	movq	4(%rdi), %rdi
	testb	$4, %dil
	jne	.LBB596_81
.LBB596_83:                             # %"$44"
                                        #   in Loop: Header=BB596_70 Depth=1
	testq	%rdx, %rdx
	je	.LBB596_92
# %bb.84:                               # %"$45"
                                        #   in Loop: Header=BB596_70 Depth=1
	movq	4(%rbx), %rax
	subq	%rdx, -4(%rax)
	jae	.LBB596_92
# %bb.85:                               # %"$47"
                                        #   in Loop: Header=BB596_70 Depth=1
	decq	%r8
	cmpq	$0, -80(%rbp)                   # 8-byte Folded Reload
	jne	.LBB596_88
# %bb.86:                               # %"$47"
                                        #   in Loop: Header=BB596_70 Depth=1
	testb	$1, 7(%rbp)                     # 1-byte Folded Reload
	je	.LBB596_87
.LBB596_88:                             # %"$51"
                                        #   in Loop: Header=BB596_70 Depth=1
	movq	(%r10), %rcx
	movq	-4(%rcx), %rax
	addq	%rax, -4(%r14)
	setb	%dl
	movq	4(%r14), %rax
	movq	4(%rcx), %rdi
	.p2align	4, 0x90
.LBB596_90:                             # %"$54"
                                        #   Parent Loop BB596_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	testb	$2, %dil
	movq	-4(%rax), %rbx
	jne	.LBB596_91
# %bb.89:                               # %"$54"
                                        #   in Loop: Header=BB596_90 Depth=2
	andb	$1, %dl
	addb	$-1, %dl
	adcq	-4(%rdi), %rbx
	setb	%dl
	movq	%rbx, -4(%rax)
	movq	4(%rax), %rax
	movq	4(%rdi), %rdi
	jmp	.LBB596_90
.LBB596_87:                             # %"$46.thread"
	subq	$32, %rsp
	movq	%r8, %rcx
	movq	%r11, %rdx
	callq	consNum
	addq	$32, %rsp
	movq	%rax, %r11
	movq	%rax, -64(%rbp)
.LBB596_93:                             # %"$57"
	testb	$1, 7(%rbp)                     # 1-byte Folded Reload
	je	.LBB596_94
# %bb.105:                              # %"$59"
	movq	-48(%rbp), %rax                 # 8-byte Reload
	movq	(%rax), %rdx
	movq	%rdx, -8(%rbp)
	movq	4(%rdx), %rbx
	leaq	-8(%rbp), %rax
	testb	$2, %bl
	jne	.LBB596_106
# %bb.107:                              # %"$3.i107.preheader"
	leaq	4(%rdx), %rcx
	leaq	-8(%rbp), %rdi
	movq	%rdi, %rax
	.p2align	4, 0x90
.LBB596_108:                            # %"$3.i107"
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -4(%rdx)
	cmovneq	%rdi, %rax
	movq	%rcx, %rdi
	movq	%rbx, %rdx
	leaq	4(%rbx), %rcx
	movq	4(%rbx), %rbx
	testb	$2, %bl
	je	.LBB596_108
	jmp	.LBB596_109
.LBB596_94:                             # %"$58"
	movq	%r11, -8(%rbp)
	movq	4(%r11), %rdx
	leaq	-8(%rbp), %rax
	testb	$2, %dl
	jne	.LBB596_95
# %bb.96:                               # %"$3.i84.preheader"
	leaq	4(%r11), %rcx
	leaq	-8(%rbp), %rbx
	movq	%rbx, %rax
	.p2align	4, 0x90
.LBB596_97:                             # %"$3.i84"
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -4(%r11)
	cmovneq	%rbx, %rax
	movq	%rcx, %rbx
	movq	%rdx, %r11
	leaq	4(%rdx), %rcx
	movq	4(%rdx), %rdx
	testb	$2, %dl
	je	.LBB596_97
# %bb.98:                               # %"$4.i92"
	cmpq	$2, %rdx
	je	.LBB596_99
	jmp	.LBB596_45
.LBB596_106:
	movq	%rax, %rdi
.LBB596_109:                            # %"$4.loopexit.i110"
	movq	-24(%rbp), %rsi                 # 8-byte Reload
	cmpq	$2, %rbx
	jne	.LBB596_116
# %bb.110:                              # %"$7.i117"
	movabsq	$1152921504606846976, %rbx      # imm = 0x1000000000000000
	movq	-4(%rdx), %rcx
	testq	%rcx, %rcx
	je	.LBB596_113
# %bb.111:                              # %"$11.i119"
	cmpq	%rbx, %rcx
	jae	.LBB596_116
# %bb.112:                              # %"$12.i120"
	shlq	$4, %rcx
	orq	$2, %rcx
	movq	%rcx, (%rdi)
	jmp	.LBB596_116
.LBB596_95:
	movq	%rax, %rbx
	cmpq	$2, %rdx
	jne	.LBB596_45
.LBB596_99:                             # %"$7.i94"
	movabsq	$1152921504606846976, %rdx      # imm = 0x1000000000000000
	movq	-4(%r11), %rcx
	testq	%rcx, %rcx
	je	.LBB596_102
# %bb.100:                              # %"$11.i96"
	cmpq	%rdx, %rcx
	jae	.LBB596_45
# %bb.101:                              # %"$12.i97"
	shlq	$4, %rcx
	orq	$2, %rcx
	movq	%rcx, (%rbx)
	jmp	.LBB596_45
.LBB596_33:                             # %"$15"
	movl	$2, %eax
	testb	$1, 7(%rbp)                     # 1-byte Folded Reload
	je	.LBB596_46
# %bb.34:                               # %"$17"
	movq	-48(%rbp), %rax                 # 8-byte Reload
	movq	(%rax), %rdx
	movq	%rdx, -8(%rbp)
	movq	4(%rdx), %rbx
	leaq	-8(%rbp), %rax
	testb	$2, %bl
	jne	.LBB596_35
# %bb.36:                               # %"$3.i.preheader"
	leaq	4(%rdx), %rcx
	leaq	-8(%rbp), %rdi
	movq	%rdi, %rax
	.p2align	4, 0x90
.LBB596_37:                             # %"$3.i"
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -4(%rdx)
	cmovneq	%rdi, %rax
	movq	%rcx, %rdi
	movq	%rbx, %rdx
	leaq	4(%rbx), %rcx
	movq	4(%rbx), %rbx
	testb	$2, %bl
	je	.LBB596_37
# %bb.38:                               # %"$4.i"
	cmpq	$2, %rbx
	je	.LBB596_39
	jmp	.LBB596_45
.LBB596_113:                            # %"$10.i122"
	movq	(%rax), %rdx
	movq	-4(%rdx), %rcx
	cmpq	%rbx, %rcx
	jae	.LBB596_114
# %bb.115:                              # %"$14.i124"
	shlq	$4, %rcx
	orq	$2, %rcx
	movq	%rcx, (%rax)
	jmp	.LBB596_116
.LBB596_102:                            # %"$10.i99"
	movq	(%rax), %rbx
	movq	-4(%rbx), %rcx
	cmpq	%rdx, %rcx
	jae	.LBB596_103
# %bb.104:                              # %"$14.i101"
	shlq	$4, %rcx
	orq	$2, %rcx
	movq	%rcx, (%rax)
	jmp	.LBB596_45
.LBB596_35:
	movq	%rax, %rdi
	cmpq	$2, %rbx
	jne	.LBB596_45
.LBB596_39:                             # %"$7.i"
	movq	-4(%rdx), %rcx
	testq	%rcx, %rcx
	je	.LBB596_42
# %bb.40:                               # %"$11.i"
	movq	%rcx, %rax
	shrq	$60, %rax
	jne	.LBB596_45
# %bb.41:                               # %"$12.i"
	shlq	$4, %rcx
	orq	$2, %rcx
	movq	%rcx, (%rdi)
	jmp	.LBB596_45
.LBB596_114:                            # %"$15.i123"
	movq	$2, 4(%rdx)
.LBB596_116:                            # %zapZero.exit125
	movq	-8(%rbp), %rax
	testq	%rsi, %rsi
	je	.LBB596_46
	.p2align	4, 0x90
.LBB596_117:                            # %"$62"
                                        # =>This Inner Loop Header: Depth=1
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	half
	addq	$32, %rsp
	decq	%rsi
	jne	.LBB596_117
	jmp	.LBB596_46
.LBB596_103:                            # %"$15.i100"
	movq	$2, 4(%rbx)
	jmp	.LBB596_45
.LBB596_42:                             # %"$10.i"
	movq	(%rax), %rdx
	movq	-4(%rdx), %rbx
	movq	%rbx, %rcx
	shrq	$60, %rcx
	jne	.LBB596_43
# %bb.44:                               # %"$14.i"
	shlq	$4, %rbx
	orq	$2, %rbx
	movq	%rbx, (%rax)
	jmp	.LBB596_45
.LBB596_43:                             # %"$15.i"
	movq	$2, 4(%rdx)
.LBB596_45:                             # %zapZero.exit
	movq	-8(%rbp), %rax
.LBB596_46:                             # %"$19"
	movq	-56(%rbp), %rcx
	movq	%rcx, env(%rip)
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 execAt;
	.scl	2;
	.type	32;
	.endef
	.globl	execAt                          # -- Begin function execAt
	.p2align	4, 0x90
execAt:                                 # @execAt
.seh_proc execAt
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$56, %rsp
	.seh_stackalloc 56
	.seh_endprologue
	movq	%rcx, %rdi
	movq	SymTab+440(%rip), %rsi
	movq	env(%rip), %rax
	movq	%rsi, 32(%rsp)
	movq	%rax, 40(%rsp)
	leaq	32(%rsp), %rax
	movq	%rax, env(%rip)
	jmp	.LBB597_1
	.p2align	4, 0x90
.LBB597_3:                              # %"$4"
                                        #   in Loop: Header=BB597_1 Depth=1
	testb	$15, %dil
	jne	.LBB597_4
.LBB597_1:                              # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rcx
	movq	8(%rdi), %rdi
	testb	$15, %cl
	jne	.LBB597_3
# %bb.2:                                # %"$3"
                                        #   in Loop: Header=BB597_1 Depth=1
	callq	evList
	jmp	.LBB597_3
.LBB597_4:                              # %"$6"
	movq	%rsi, SymTab+440(%rip)
	movq	40(%rsp), %rax
	movq	%rax, env(%rip)
	movq	%rsi, %rax
	addq	$56, %rsp
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 runAt;
	.scl	2;
	.type	32;
	.endef
	.globl	runAt                           # -- Begin function runAt
	.p2align	4, 0x90
runAt:                                  # @runAt
.seh_proc runAt
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$56, %rsp
	.seh_stackalloc 56
	.seh_endprologue
	movq	%rcx, %rax
	movq	SymTab+440(%rip), %rsi
	movq	env(%rip), %rcx
	movq	%rsi, 32(%rsp)
	movq	%rcx, 40(%rsp)
	leaq	32(%rsp), %rcx
	movq	%rcx, env(%rip)
	movq	(%rax), %rcx
	movq	8(%rax), %rdi
	jmp	.LBB598_1
	.p2align	4, 0x90
.LBB598_7:                              # %"$11"
                                        #   in Loop: Header=BB598_1 Depth=1
	movq	(%rdi), %rcx
	movq	8(%rdi), %rdi
.LBB598_1:                              # %"$1"
                                        # =>This Inner Loop Header: Depth=1
	testb	$15, %dil
	jne	.LBB598_2
# %bb.5:                                # %"$3"
                                        #   in Loop: Header=BB598_1 Depth=1
	testb	$15, %cl
	jne	.LBB598_7
# %bb.6:                                # %"$12"
                                        #   in Loop: Header=BB598_1 Depth=1
	callq	evList
	jmp	.LBB598_7
.LBB598_2:                              # %"$5"
	testb	$6, %cl
	jne	.LBB598_9
# %bb.3:                                # %"$7"
	testb	$8, %cl
	jne	.LBB598_4
# %bb.8:                                # %"$9"
	callq	evList
	movq	%rax, %rcx
	jmp	.LBB598_9
.LBB598_4:                              # %"$10"
	movq	(%rcx), %rcx
.LBB598_9:                              # %"$4"
	movq	%rsi, SymTab+440(%rip)
	movq	40(%rsp), %rax
	movq	%rax, env(%rip)
	movq	%rcx, %rax
	addq	$56, %rsp
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 wrnl;
	.scl	2;
	.type	32;
	.endef
	.globl	wrnl                            # -- Begin function wrnl
	.p2align	4, 0x90
wrnl:                                   # @wrnl
# %bb.0:                                # %"$1"
	leaq	.L$1(%rip), %rdx
	movl	$1, %r8d
	movl	$1, %ecx
	jmp	write                           # TAILCALL
                                        # -- End function
	.def	 dbg;
	.scl	2;
	.type	32;
	.endef
	.globl	dbg                             # -- Begin function dbg
	.p2align	4, 0x90
dbg:                                    # @dbg
.seh_proc dbg
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rdx, %rsi
	movq	($OutFile)(%rip), %rdi
	movq	($Put)(%rip), %rbx
	movq	($OutFiles)(%rip), %rax
	movq	16(%rax), %rax
	movq	%rax, ($OutFile)(%rip)
	leaq	_putStdout(%rip), %rax
	movq	%rax, ($Put)(%rip)
	callq	outWord
	testq	%rsi, %rsi
	je	.LBB600_2
# %bb.1:                                # %"$2"
	movb	$32, %cl
	callq	*($Put)(%rip)
	movq	%rsi, %rcx
	callq	print
.LBB600_2:                              # %"$3"
	movb	$10, %cl
	callq	*($Put)(%rip)
	movq	%rbx, ($Put)(%rip)
	movq	%rdi, ($OutFile)(%rip)
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 alloc;
	.scl	2;
	.type	32;
	.endef
	.globl	alloc                           # -- Begin function alloc
	.p2align	4, 0x90
alloc:                                  # @alloc
.seh_proc alloc
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	callq	realloc
	testq	%rax, %rax
	je	.LBB601_2
# %bb.1:                                # %"$3"
	addq	$40, %rsp
	retq
.LBB601_2:                              # %"$2"
	leaq	.L$3(%rip), %rcx
	xorl	%edx, %edx
	callq	giveup
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 heapAlloc;
	.scl	2;
	.type	32;
	.endef
	.globl	heapAlloc                       # -- Begin function heapAlloc
	.p2align	4, 0x90
heapAlloc:                              # @heapAlloc
.seh_proc heapAlloc
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movl	$1048584, %ecx                  # imm = 0x100008
	callq	malloc
	testq	%rax, %rax
	je	.LBB602_4
# %bb.1:                                # %alloc.exit
	movq	($Avail)(%rip), %r8
	movq	($Heaps)(%rip), %rcx
	movq	%rcx, 1048576(%rax)
	movq	%rax, ($Heaps)(%rip)
	movq	%rax, %rdx
	addq	$1048560, %rdx                  # imm = 0xFFFF0
	movq	$-1048576, %rcx                 # imm = 0xFFF00000
	.p2align	4, 0x90
.LBB602_2:                              # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	movq	%r8, (%rdx)
	movq	%rdx, %r8
	addq	$-16, %rdx
	addq	$16, %rcx
	jne	.LBB602_2
# %bb.3:                                # %"$4"
	movq	%rax, ($Avail)(%rip)
	addq	$40, %rsp
	retq
.LBB602_4:                              # %"$2.i"
	leaq	.L$3(%rip), %rcx
	xorl	%edx, %edx
	callq	giveup
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 sigTerm;
	.scl	2;
	.type	32;
	.endef
	.globl	sigTerm                         # -- Begin function sigTerm
	.p2align	4, 0x90
sigTerm:                                # @sigTerm
.seh_proc sigTerm
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movl	%ecx, %edx
	movl	($TtyPid)(%rip), %ecx
	testl	%ecx, %ecx
	je	.LBB603_1
# %bb.2:                                # %"$2"
	addq	$32, %rsp
	popq	%rsi
	jmp	kill                            # TAILCALL
.LBB603_1:                              # %"$3"
	leaq	($Signal)(%rip), %rsi
	incl	($Signal)(%rip)
	movl	Sig+24(%rip), %ecx
	callq	gSignal
	cltq
	incl	(%rsi,%rax,4)
	addq	$32, %rsp
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 xCnt;
	.scl	2;
	.type	32;
	.endef
	.globl	xCnt                            # -- Begin function xCnt
	.p2align	4, 0x90
xCnt:                                   # @xCnt
.seh_proc xCnt
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	testb	$2, %dl
	je	.LBB604_2
# %bb.1:                                # %"$3"
	movq	%rdx, %rcx
	shrq	$4, %rcx
	movq	%rcx, %rax
	negq	%rax
	testb	$8, %dl
	cmoveq	%rcx, %rax
	addq	$40, %rsp
	retq
.LBB604_2:                              # %"$2"
	callq	cntErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 evCnt;
	.scl	2;
	.type	32;
	.endef
	.globl	evCnt                           # -- Begin function evCnt
	.p2align	4, 0x90
evCnt:                                  # @evCnt
.seh_proc evCnt
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	(%rdx), %rax
	testb	$6, %al
	jne	.LBB605_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB605_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB605_4
.LBB605_2:                              # %"$6"
	movq	(%rax), %rax
.LBB605_4:                              # %"$2"
	testb	$2, %al
	je	.LBB605_6
# %bb.5:                                # %xCnt.exit
	movq	%rax, %rdx
	shrq	$4, %rdx
	movq	%rdx, %rcx
	negq	%rcx
	testb	$8, %al
	cmoveq	%rdx, %rcx
	movq	%rcx, %rax
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB605_6:                              # %"$2.i"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	cntErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 evLst;
	.scl	2;
	.type	32;
	.endef
	.globl	evLst                           # -- Begin function evLst
	.p2align	4, 0x90
evLst:                                  # @evLst
.seh_proc evLst
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	(%rcx), %rax
	testb	$6, %al
	jne	.LBB606_4
# %bb.1:                                # %"$3"
	testb	$8, %al
	jne	.LBB606_2
# %bb.3:                                # %"$5"
	movq	%rax, %rcx
	callq	evList
	jmp	.LBB606_4
.LBB606_2:                              # %"$6"
	movq	(%rax), %rax
.LBB606_4:                              # %"$2"
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB606_6
# %bb.5:                                # %"$2"
	movl	%eax, %ecx
	andl	$15, %ecx
	testq	%rcx, %rcx
	jne	.LBB606_7
.LBB606_6:                              # %"$10"
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB606_7:                              # %"$9"
	movq	%rsi, %rcx
	movq	%rax, %rdx
	callq	lstErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 evSym;
	.scl	2;
	.type	32;
	.endef
	.globl	evSym                           # -- Begin function evSym
	.p2align	4, 0x90
evSym:                                  # @evSym
.seh_proc evSym
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	(%rcx), %rcx
	testb	$6, %cl
	jne	.LBB607_4
# %bb.1:                                # %"$3"
	testb	$8, %cl
	jne	.LBB607_2
# %bb.3:                                # %"$5"
	callq	evList
	movq	%rax, %rcx
	jmp	.LBB607_4
.LBB607_2:                              # %"$6"
	movq	(%rcx), %rcx
.LBB607_4:                              # %"$2"
	addq	$40, %rsp
	jmp	xSym                            # TAILCALL
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 xName;
	.scl	2;
	.type	32;
	.endef
	.globl	xName                           # -- Begin function xName
	.p2align	4, 0x90
xName:                                  # @xName
.seh_proc xName
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movl	$2, %eax
	leaq	SymTab+8(%rip), %r8
	cmpq	%r8, %rdx
	jne	.LBB608_1
.LBB608_5:                              # %"$2"
	addq	$40, %rsp
	retq
.LBB608_1:                              # %"$3"
	movq	-8(%rdx), %rax
	testb	$8, %al
	jne	.LBB608_2
	.p2align	4, 0x90
# %bb.4:                                # %"$8"
	testb	$6, %al
	jne	.LBB608_5
.LBB608_3:                              # %"$8"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB608_3
	jmp	.LBB608_5
.LBB608_2:                              # %"$6"
	callq	nameErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 circ;
	.scl	2;
	.type	32;
	.endef
	.globl	circ                            # -- Begin function circ
	.p2align	4, 0x90
circ:                                   # @circ
# %bb.0:                                # %"$1"
	testb	$15, %cl
	je	.LBB609_2
# %bb.1:
	xorl	%eax, %eax
	retq
.LBB609_2:                              # %"$5.preheader"
	movq	(%rcx), %rdx
	movq	%rcx, %rax
	.p2align	4, 0x90
.LBB609_3:                              # %"$5"
                                        # =>This Inner Loop Header: Depth=1
	orq	$1, %rdx
	movq	%rdx, (%rax)
	movq	8(%rax), %rax
	testb	$15, %al
	jne	.LBB609_4
# %bb.6:                                # %"$6"
                                        #   in Loop: Header=BB609_3 Depth=1
	movq	(%rax), %rdx
	testb	$1, %dl
	je	.LBB609_3
# %bb.7:                                # %"$14.preheader"
	cmpq	%rcx, %rax
	je	.LBB609_10
	.p2align	4, 0x90
.LBB609_8:                              # %"$15"
                                        # =>This Inner Loop Header: Depth=1
	andb	$-2, (%rcx)
	movq	8(%rcx), %rcx
	cmpq	%rax, %rcx
	jne	.LBB609_8
# %bb.9:
	movq	%rax, %rcx
	.p2align	4, 0x90
.LBB609_10:                             # %"$17"
                                        # =>This Inner Loop Header: Depth=1
	andb	$-2, (%rcx)
	movq	8(%rcx), %rcx
	cmpq	%rcx, %rax
	jne	.LBB609_10
	jmp	.LBB609_11
.LBB609_4:                              # %"$9.preheader"
	xorl	%eax, %eax
	.p2align	4, 0x90
.LBB609_5:                              # %"$9"
                                        # =>This Inner Loop Header: Depth=1
	andb	$-2, (%rcx)
	movq	8(%rcx), %rcx
	testb	$15, %cl
	je	.LBB609_5
.LBB609_11:                             # %"$4"
	retq
                                        # -- End function
	.def	 tmDate;
	.scl	2;
	.type	32;
	.endef
	.globl	tmDate                          # -- Begin function tmDate
	.p2align	4, 0x90
tmDate:                                 # @tmDate
# %bb.0:                                # %"$1"
	pushq	%rsi
	pushq	%rdi
	testq	%r8, %r8
	leaq	SymTab+8(%rip), %r10
	jle	.LBB610_11
# %bb.1:                                # %"$1"
	movq	%rdx, %r9
	cmpq	$12, %rdx
	ja	.LBB610_11
# %bb.2:                                # %"$1"
	testq	%rcx, %rcx
	jle	.LBB610_11
# %bb.3:                                # %"$1"
	testq	%r9, %r9
	jle	.LBB610_11
# %bb.4:                                # %"$6"
	leaq	($Month)(%rip), %rax
	movzbl	(%r9,%rax), %eax
	cmpq	%r8, %rax
	jae	.LBB610_10
# %bb.5:                                # %"$8"
	testb	$3, %cl
	jne	.LBB610_11
# %bb.6:                                # %"$8"
	cmpq	$2, %r9
	jne	.LBB610_11
# %bb.7:                                # %"$8"
	cmpq	$29, %r8
	jne	.LBB610_11
# %bb.8:                                # %"$12"
	movabsq	$-8116567392432202711, %r11     # imm = 0x8F5C28F5C28F5C29
	imulq	%rcx, %r11
	rorq	$2, %r11
	movq	%rcx, %rax
	shrq	$4, %rax
	movabsq	$737869762948382065, %rdx       # imm = 0xA3D70A3D70A3D71
	mulq	%rdx
	movabsq	$184467440737095516, %rax       # imm = 0x28F5C28F5C28F5C
	cmpq	%rax, %r11
	ja	.LBB610_10
# %bb.9:                                # %"$12"
	imulq	$400, %rdx, %rax                # imm = 0x190
	movq	%rcx, %rdx
	subq	%rax, %rdx
	jne	.LBB610_11
.LBB610_10:                             # %"$15"
	leaq	(%rcx,%rcx,2), %rax
	leaq	-3(%r9,%rax,4), %r11
	movabsq	$-6148914691236517205, %rsi     # imm = 0xAAAAAAAAAAAAAAAB
	movq	%r11, %rax
	mulq	%rsi
	movq	%rdx, %r10
	movq	%rdx, %rax
	shrq	$2, %rax
	movabsq	$1152921504606846974, %rdi      # imm = 0xFFFFFFFFFFFFFFE
	andq	%rax, %rdi
	imulq	$4404, %rcx, %rax               # imm = 0x1134
	imulq	$367, %r9, %rcx                 # imm = 0x16F
	leaq	-1094(%rax,%rcx), %rax
	mulq	%rsi
	movq	%rdx, %rcx
	shrq	$3, %rcx
	shrq	$5, %r10
	movabsq	$7870610804782742023, %rdx      # imm = 0x6D3A06D3A06D3A07
	movq	%r11, %rax
	mulq	%rdx
	movq	%rdx, %rax
	shrq	$11, %rax
	shrq	$9, %rdx
	addq	%r8, %r10
	addq	%rcx, %r10
	addq	%rax, %r10
	subq	%rdx, %r10
	subq	%rdi, %r10
	shlq	$4, %r10
	orq	$2, %r10
.LBB610_11:                             # %"$17"
	movq	%r10, %rax
	popq	%rdi
	popq	%rsi
	retq
                                        # -- End function
	.def	 tmTime;
	.scl	2;
	.type	32;
	.endef
	.globl	tmTime                          # -- Begin function tmTime
	.p2align	4, 0x90
tmTime:                                 # @tmTime
# %bb.0:                                # %"$1"
	cmpq	$59, %r8
	leaq	SymTab+8(%rip), %rax
	ja	.LBB611_4
# %bb.1:                                # %"$1"
	cmpq	$59, %rdx
	ja	.LBB611_4
# %bb.2:                                # %"$1"
	movq	%rcx, %r9
	orq	%r8, %r9
	orq	%rdx, %r9
	js	.LBB611_4
# %bb.3:                                # %"$7"
	imulq	$3600, %rcx, %rcx               # imm = 0xE10
	imulq	$60, %rdx, %rax
	addq	%rcx, %rax
	addq	%r8, %rax
	shlq	$4, %rax
	orq	$2, %rax
.LBB611_4:                              # %"$9"
	retq
                                        # -- End function
	.def	 mark;
	.scl	2;
	.type	32;
	.endef
	.globl	mark                            # -- Begin function mark
	.p2align	4, 0x90
mark:                                   # @mark
# %bb.0:                                # %"$1"
	xorl	%r8d, %r8d
	testb	$2, %cl
	jne	.LBB612_9
	.p2align	4, 0x90
.LBB612_1:                              # %"$4"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rcx, %rax
	movq	%rcx, %rdx
	andq	$-16, %rdx
	movq	8(%rdx), %r9
	testb	$1, %r9b
	je	.LBB612_8
# %bb.2:                                # %"$6"
                                        #   in Loop: Header=BB612_1 Depth=1
	movq	%r9, %rcx
	andq	$-2, %rcx
	movq	%rcx, 8(%rdx)
	testb	$4, %al
	jne	.LBB612_5
# %bb.3:                                # %"$7"
                                        #   in Loop: Header=BB612_1 Depth=1
	movq	(%rdx), %rcx
	orq	$1, %r8
	movq	%r8, (%rdx)
	testb	$2, %cl
	movq	%rax, %r8
	je	.LBB612_1
	jmp	.LBB612_10
.LBB612_5:                              # %"$9.preheader"
	testb	$2, %r9b
	jne	.LBB612_8
	.p2align	4, 0x90
.LBB612_6:                              # %"$10"
                                        # =>This Inner Loop Header: Depth=1
	movq	4(%rcx), %rdx
	testb	$1, %dl
	je	.LBB612_8
# %bb.7:                                # %"$12"
                                        #   in Loop: Header=BB612_6 Depth=1
	movq	%rdx, %r9
	andq	$-2, %r9
	movq	%r9, 4(%rcx)
	testb	$2, %dl
	movq	%r9, %rcx
	je	.LBB612_6
.LBB612_8:
	movq	%rax, %rcx
.LBB612_9:                              # %"$5"
	movq	%r8, %rax
.LBB612_10:                             # %"$5"
	movq	%rax, %rdx
	andq	$-16, %rdx
	je	.LBB612_14
	.p2align	4, 0x90
.LBB612_11:                             # %"$15"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %r8
	movq	(%rdx), %rax
	testb	$1, %al
	jne	.LBB612_13
# %bb.12:                               # %"$16"
                                        #   in Loop: Header=BB612_11 Depth=1
	movq	8(%rdx), %rax
	movq	%rcx, 8(%rdx)
	movq	%rax, %rdx
	andq	$-16, %rdx
	movq	%r8, %rcx
	jne	.LBB612_11
	jmp	.LBB612_14
.LBB612_13:                             # %"$18"
	movq	%rcx, (%rdx)
	movq	8(%rdx), %rcx
	andq	$-2, %rax
	movq	%rax, 8(%rdx)
	testb	$2, %cl
	je	.LBB612_1
	jmp	.LBB612_9
.LBB612_14:                             # %"$14"
	retq
                                        # -- End function
	.def	 need3;
	.scl	2;
	.type	32;
	.endef
	.globl	need3                           # -- Begin function need3
	.p2align	4, 0x90
need3:                                  # @need3
# %bb.0:                                # %"$1"
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	je	.LBB613_4
# %bb.1:                                # %"$3"
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.LBB613_4
# %bb.2:                                # %"$4"
	cmpq	$0, (%rax)
	je	.LBB613_4
# %bb.3:                                # %"$6"
	retq
.LBB613_4:                              # %"$5"
	jmp	gc                              # TAILCALL
                                        # -- End function
	.def	 consStr;
	.scl	2;
	.type	32;
	.endef
	.globl	consStr                         # -- Begin function consStr
	.p2align	4, 0x90
consStr:                                # @consStr
# %bb.0:                                # %"$1"
	cmpq	$2, %rcx
	jne	.LBB614_2
# %bb.1:                                # %"$4"
	leaq	SymTab+8(%rip), %rax
	retq
.LBB614_2:                              # %"$3"
	xorl	%edx, %edx
	jmp	consSym                         # TAILCALL
                                        # -- End function
	.def	 consExt;
	.scl	2;
	.type	32;
	.endef
	.globl	consExt                         # -- Begin function consExt
	.p2align	4, 0x90
consExt:                                # @consExt
# %bb.0:                                # %"$1"
	incq	($ExtCnt)(%rip)
	orq	$8, %rcx
	leaq	SymTab+8(%rip), %rdx
	jmp	consSym                         # TAILCALL
                                        # -- End function
	.def	 boxNum;
	.scl	2;
	.type	32;
	.endef
	.globl	boxNum                          # -- Begin function boxNum
	.p2align	4, 0x90
boxNum:                                 # @boxNum
.seh_proc boxNum
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	jne	.LBB616_2
# %bb.1:                                # %"$2"
	callq	gc
	movq	($Avail)(%rip), %rax
.LBB616_2:                              # %"$3"
	movq	(%rax), %rcx
	movq	%rcx, ($Avail)(%rip)
	movq	%rsi, (%rax)
	movq	$2, 8(%rax)
	addq	$4, %rax
	addq	$32, %rsp
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 box;
	.scl	2;
	.type	32;
	.endef
	.globl	box                             # -- Begin function box
	.p2align	4, 0x90
box:                                    # @box
.seh_proc box
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movabsq	$1152921504606846976, %rax      # imm = 0x1000000000000000
	testq	%rcx, %rcx
	js	.LBB617_6
# %bb.1:                                # %"$2"
	cmpq	%rax, %rsi
	jae	.LBB617_2
# %bb.5:                                # %"$6"
	shlq	$4, %rsi
	orq	$2, %rsi
	movq	%rsi, %rax
	jmp	.LBB617_12
.LBB617_6:                              # %"$3"
	negq	%rsi
	cmpq	%rax, %rsi
	jae	.LBB617_7
# %bb.10:                               # %"$9"
	shlq	$4, %rsi
	orq	$2, %rsi
	movq	%rsi, %rax
	jmp	.LBB617_11
.LBB617_2:                              # %"$5"
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	jne	.LBB617_4
# %bb.3:                                # %"$2.i"
	callq	gc
	movq	($Avail)(%rip), %rax
.LBB617_4:                              # %boxNum.exit
	movq	(%rax), %rcx
	movq	%rcx, ($Avail)(%rip)
	movq	%rsi, (%rax)
	movq	$2, 8(%rax)
	addq	$4, %rax
	jmp	.LBB617_12
.LBB617_7:                              # %"$8"
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	jne	.LBB617_9
# %bb.8:                                # %"$2.i3"
	callq	gc
	movq	($Avail)(%rip), %rax
.LBB617_9:                              # %boxNum.exit4
	movq	(%rax), %rcx
	movq	%rcx, ($Avail)(%rip)
	movq	%rsi, (%rax)
	movq	$2, 8(%rax)
	addq	$4, %rax
.LBB617_11:                             # %"$10"
	orq	$8, %rax
.LBB617_12:                             # %"$4"
	addq	$32, %rsp
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 symByte;
	.scl	2;
	.type	32;
	.endef
	.globl	symByte                         # -- Begin function symByte
	.p2align	4, 0x90
symByte:                                # @symByte
# %bb.0:                                # %"$1"
	movq	(%rcx), %rax
	testq	%rax, %rax
	jne	.LBB618_6
# %bb.1:                                # %"$2"
	movq	8(%rcx), %rax
	cmpq	$2, %rax
	jne	.LBB618_2
# %bb.7:                                # %"$6"
	xorl	%eax, %eax
	retq
.LBB618_2:                              # %"$5"
	testb	$2, %al
	jne	.LBB618_3
# %bb.4:                                # %"$7"
	movq	-4(%rax), %r8
	movq	%r8, (%rcx)
	movq	4(%rax), %rdx
	movq	%r8, %rax
	jmp	.LBB618_5
.LBB618_3:                              # %"$8"
	shrq	$4, %rax
	movl	$2, %edx
.LBB618_5:                              # %"$3.sink.split"
	movq	%rdx, 8(%rcx)
.LBB618_6:                              # %"$3"
	movq	%rax, %rdx
	shrq	$8, %rdx
	movq	%rdx, (%rcx)
                                        # kill: def $al killed $al killed $rax
	retq
                                        # -- End function
	.def	 zapZero;
	.scl	2;
	.type	32;
	.endef
	.globl	zapZero                         # -- Begin function zapZero
	.p2align	4, 0x90
zapZero:                                # @zapZero
# %bb.0:                                # %"$1"
	pushq	%rax
	movq	%rcx, (%rsp)
	movq	4(%rcx), %r9
	movq	%rsp, %rax
	testb	$2, %r9b
	jne	.LBB619_1
# %bb.2:                                # %"$3.preheader"
	leaq	4(%rcx), %rdx
	movq	%rsp, %r8
	movq	%r8, %rax
	.p2align	4, 0x90
.LBB619_3:                              # %"$3"
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -4(%rcx)
	cmovneq	%r8, %rax
	movq	%rdx, %r8
	movq	%r9, %rcx
	leaq	4(%r9), %rdx
	movq	4(%r9), %r9
	testb	$2, %r9b
	je	.LBB619_3
# %bb.4:                                # %"$4"
	cmpq	$2, %r9
	je	.LBB619_5
	jmp	.LBB619_11
.LBB619_1:
	movq	%rax, %r8
	cmpq	$2, %r9
	jne	.LBB619_11
.LBB619_5:                              # %"$7"
	movq	-4(%rcx), %rcx
	testq	%rcx, %rcx
	je	.LBB619_8
# %bb.6:                                # %"$11"
	movq	%rcx, %rax
	shrq	$60, %rax
	jne	.LBB619_11
# %bb.7:                                # %"$12"
	shlq	$4, %rcx
	orq	$2, %rcx
	movq	%rcx, (%r8)
	jmp	.LBB619_11
.LBB619_8:                              # %"$10"
	movq	(%rax), %r8
	movq	-4(%r8), %rdx
	movq	%rdx, %rcx
	shrq	$60, %rcx
	jne	.LBB619_9
# %bb.10:                               # %"$14"
	shlq	$4, %rdx
	orq	$2, %rdx
	movq	%rdx, (%rax)
	jmp	.LBB619_11
.LBB619_9:                              # %"$15"
	movq	$2, 4(%r8)
.LBB619_11:                             # %"$8"
	movq	(%rsp), %rax
	popq	%rcx
	retq
                                        # -- End function
	.def	 twiceBig;
	.scl	2;
	.type	32;
	.endef
	.globl	twiceBig                        # -- Begin function twiceBig
	.p2align	4, 0x90
twiceBig:                               # @twiceBig
.seh_proc twiceBig
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	-4(%rcx), %rcx
	movq	4(%rsi), %rax
	leaq	(%rcx,%rcx), %rdx
	movq	%rdx, -4(%rsi)
	testb	$4, %al
	jne	.LBB620_2
# %bb.1:
	movq	%rsi, %rdi
	movq	%rcx, %rdx
	jmp	.LBB620_3
	.p2align	4, 0x90
.LBB620_2:                              # %"$3"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rdi
	movq	-4(%rax), %rdx
	movq	4(%rax), %rax
	shrdq	$63, %rdx, %rcx
	movq	%rcx, -4(%rdi)
	testb	$4, %al
	movq	%rdx, %rcx
	jne	.LBB620_2
.LBB620_3:                              # %"$4"
	movq	%rax, %rbx
	shrq	$4, %rbx
	shldq	$1, %rdx, %rbx
	testq	%rax, %rax
	js	.LBB620_4
# %bb.7:                                # %"$6"
	shlq	$4, %rbx
	orq	$2, %rbx
	movq	%rbx, %rax
	jmp	.LBB620_8
.LBB620_4:                              # %"$5"
	movq	($Avail)(%rip), %rax
	testq	%rax, %rax
	jne	.LBB620_6
# %bb.5:                                # %"$2.i"
	callq	gc
	movq	($Avail)(%rip), %rax
.LBB620_6:                              # %boxNum.exit
	movq	(%rax), %rcx
	movq	%rcx, ($Avail)(%rip)
	movq	%rbx, (%rax)
	movq	$2, 8(%rax)
	addq	$4, %rax
.LBB620_8:                              # %"$7"
	movq	%rax, 4(%rdi)
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 divu;
	.scl	2;
	.type	32;
	.endef
	.globl	divu                            # -- Begin function divu
	.p2align	4, 0x90
divu:                                   # @divu
# %bb.0:                                # %"$1"
	movq	%rdx, %r8
	testb	$4, %cl
	jne	.LBB621_4
# %bb.1:                                # %"$3"
	movl	$2, %eax
	testb	$4, %r8b
	jne	.LBB621_3
# %bb.2:                                # %"$5"
	shrq	$4, %rcx
	shrq	$4, %r8
	movq	%rcx, %rax
	xorl	%edx, %edx
	divq	%r8
	shlq	$4, %rax
	orq	$2, %rax
.LBB621_3:                              # %"$2"
	retq
.LBB621_4:                              # %"$4"
	movq	%r8, %rdx
	xorl	%r8d, %r8d
	jmp	div1                            # TAILCALL
                                        # -- End function
	.def	 remu;
	.scl	2;
	.type	32;
	.endef
	.globl	remu                            # -- Begin function remu
	.p2align	4, 0x90
remu:                                   # @remu
# %bb.0:                                # %"$1"
	movq	%rdx, %r8
	testb	$4, %cl
	jne	.LBB622_4
# %bb.1:                                # %"$3"
	testb	$4, %r8b
	jne	.LBB622_3
# %bb.2:                                # %"$5"
	shrq	$4, %rcx
	shrq	$4, %r8
	movq	%rcx, %rax
	xorl	%edx, %edx
	divq	%r8
	movq	%rdx, %rcx
	shlq	$4, %rcx
	orq	$2, %rcx
.LBB622_3:                              # %"$2"
	movq	%rcx, %rax
	retq
.LBB622_4:                              # %"$4"
	movq	%r8, %rdx
	movb	$1, %r8b
	jmp	div1                            # TAILCALL
                                        # -- End function
	.def	 incs;
	.scl	2;
	.type	32;
	.endef
	.globl	incs                            # -- Begin function incs
	.p2align	4, 0x90
incs:                                   # @incs
.seh_proc incs
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	testb	$8, %cl
	jne	.LBB623_1
# %bb.6:                                # %"$3"
	movl	$18, %edx
	addq	$40, %rsp
	jmp	addu                            # TAILCALL
.LBB623_1:                              # %"$2"
	movq	%rcx, %rax
	andq	$-9, %rax
	testb	$2, %cl
	jne	.LBB623_2
# %bb.4:                                # %"$3.i"
	movl	$18, %edx
	movq	%rax, %rcx
	callq	sub1
	jmp	.LBB623_5
.LBB623_2:                              # %"$4.i"
	subq	$16, %rax
	jae	.LBB623_5
# %bb.3:                                # %"$8.i"
	xorq	$-16, %rax
	addq	$24, %rax
.LBB623_5:                              # %subu.exit
	movq	%rax, %rcx
	xorq	$8, %rcx
	cmpq	$2, %rax
	cmoveq	%rax, %rcx
	movq	%rcx, %rax
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 decs;
	.scl	2;
	.type	32;
	.endef
	.globl	decs                            # -- Begin function decs
	.p2align	4, 0x90
decs:                                   # @decs
.seh_proc decs
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	testb	$8, %cl
	jne	.LBB624_1
# %bb.2:                                # %"$3"
	testb	$2, %cl
	jne	.LBB624_3
# %bb.6:                                # %"$3.i"
	movl	$18, %edx
	addq	$40, %rsp
	jmp	sub1                            # TAILCALL
.LBB624_1:                              # %"$2"
	andq	$-9, %rcx
	movl	$18, %edx
	callq	addu
	movq	%rax, %rcx
	xorq	$8, %rcx
	cmpq	$2, %rax
	cmoveq	%rax, %rcx
	jmp	.LBB624_5
.LBB624_3:                              # %"$4.i"
	subq	$16, %rcx
	jae	.LBB624_5
# %bb.4:                                # %"$8.i"
	xorq	$-16, %rcx
	addq	$24, %rcx
.LBB624_5:                              # %"$4"
	movq	%rcx, %rax
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 adds;
	.scl	2;
	.type	32;
	.endef
	.globl	adds                            # -- Begin function adds
	.p2align	4, 0x90
adds:                                   # @adds
.seh_proc adds
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	testb	$8, %cl
	jne	.LBB625_3
# %bb.1:                                # %"$2"
	testb	$8, %dl
	jne	.LBB625_2
# %bb.7:                                # %"$5"
	addq	$40, %rsp
	jmp	addu                            # TAILCALL
.LBB625_3:                              # %"$3"
	andq	$-9, %rcx
	testb	$8, %dl
	jne	.LBB625_5
# %bb.4:                                # %"$8"
	callq	subu
	jmp	.LBB625_6
.LBB625_2:                              # %"$6"
	andq	$-9, %rdx
	addq	$40, %rsp
	jmp	subu                            # TAILCALL
.LBB625_5:                              # %"$9"
	andq	$-9, %rdx
	callq	addu
.LBB625_6:                              # %"$10"
	movq	%rax, %rcx
	xorq	$8, %rcx
	cmpq	$2, %rax
	cmoveq	%rax, %rcx
	movq	%rcx, %rax
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 subs;
	.scl	2;
	.type	32;
	.endef
	.globl	subs                            # -- Begin function subs
	.p2align	4, 0x90
subs:                                   # @subs
.seh_proc subs
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	testb	$8, %cl
	jne	.LBB626_3
# %bb.1:                                # %"$2"
	testb	$8, %dl
	jne	.LBB626_2
# %bb.7:                                # %"$5"
	addq	$40, %rsp
	jmp	subu                            # TAILCALL
.LBB626_3:                              # %"$3"
	andq	$-9, %rcx
	testb	$8, %dl
	jne	.LBB626_5
# %bb.4:                                # %"$8"
	callq	addu
	jmp	.LBB626_6
.LBB626_2:                              # %"$6"
	andq	$-9, %rdx
	addq	$40, %rsp
	jmp	addu                            # TAILCALL
.LBB626_5:                              # %"$9"
	andq	$-9, %rdx
	callq	subu
.LBB626_6:                              # %"$10"
	movq	%rax, %rcx
	xorq	$8, %rcx
	cmpq	$2, %rax
	cmoveq	%rax, %rcx
	movq	%rcx, %rax
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 cmpNum;
	.scl	2;
	.type	32;
	.endef
	.globl	cmpNum                          # -- Begin function cmpNum
	.p2align	4, 0x90
cmpNum:                                 # @cmpNum
# %bb.0:                                # %"$1"
	movq	%rcx, %r8
	testb	$8, %r8b
	jne	.LBB627_3
# %bb.1:                                # %"$2"
	movl	$1, %eax
	testb	$8, %dl
	jne	.LBB627_4
# %bb.2:                                # %"$5"
	movq	%r8, %rcx
	jmp	cmpu                            # TAILCALL
.LBB627_3:                              # %"$3"
	movq	$-1, %rax
	testb	$8, %dl
	jne	.LBB627_5
.LBB627_4:                              # %"$4"
	retq
.LBB627_5:                              # %"$9"
	andq	$-9, %rdx
	andq	$-9, %r8
	movq	%rdx, %rcx
	movq	%r8, %rdx
	jmp	cmpu                            # TAILCALL
                                        # -- End function
	.def	 bufSize;
	.scl	2;
	.type	32;
	.endef
	.globl	bufSize                         # -- Begin function bufSize
	.p2align	4, 0x90
bufSize:                                # @bufSize
# %bb.0:                                # %"$1"
	movl	$1, %eax
	testb	$4, %cl
	je	.LBB628_3
# %bb.1:                                # %"$3.preheader"
	movl	$1, %eax
	.p2align	4, 0x90
.LBB628_2:                              # %"$3"
                                        # =>This Inner Loop Header: Depth=1
	addq	$8, %rax
	movq	4(%rcx), %rcx
	testb	$4, %cl
	jne	.LBB628_2
.LBB628_3:                              # %"$4"
	shrq	$4, %rcx
	je	.LBB628_5
	.p2align	4, 0x90
.LBB628_4:                              # %"$6"
                                        # =>This Inner Loop Header: Depth=1
	incq	%rax
	shrq	$8, %rcx
	jne	.LBB628_4
.LBB628_5:                              # %"$7"
	retq
                                        # -- End function
	.def	 pathSize;
	.scl	2;
	.type	32;
	.endef
	.globl	pathSize                        # -- Begin function pathSize
	.p2align	4, 0x90
pathSize:                               # @pathSize
# %bb.0:                                # %"$1"
	movl	$1, %eax
	testb	$4, %cl
	movq	%rcx, %rdx
	je	.LBB629_3
# %bb.1:                                # %"$3.i.preheader"
	movl	$1, %eax
	movq	%rcx, %rdx
	.p2align	4, 0x90
.LBB629_2:                              # %"$3.i"
                                        # =>This Inner Loop Header: Depth=1
	addq	$8, %rax
	movq	4(%rdx), %rdx
	testb	$4, %dl
	jne	.LBB629_2
.LBB629_3:                              # %"$4.i"
	shrq	$4, %rdx
	je	.LBB629_5
	.p2align	4, 0x90
.LBB629_4:                              # %"$6.i"
                                        # =>This Inner Loop Header: Depth=1
	incq	%rax
	shrq	$8, %rdx
	jne	.LBB629_4
.LBB629_5:                              # %bufSize.exit
	testb	$2, %cl
	jne	.LBB629_6
# %bb.7:                                # %"$3"
	movq	-4(%rcx), %rdx
	movq	%rdx, %rcx
	shrq	$8, %rcx
	cmpb	$126, %dl
	jne	.LBB629_9
	jmp	.LBB629_14
.LBB629_6:                              # %"$2"
	movq	%rcx, %rdx
	shrq	$4, %rdx
	shrq	$12, %rcx
	cmpb	$126, %dl
	je	.LBB629_14
.LBB629_9:                              # %"$4"
	cmpb	$64, %dl
	je	.LBB629_13
# %bb.10:                               # %"$4"
	cmpb	$43, %dl
	jne	.LBB629_16
# %bb.11:                               # %"$9"
	cmpb	$126, %cl
	je	.LBB629_14
# %bb.12:                               # %"$9"
	cmpb	$64, %cl
	jne	.LBB629_16
.LBB629_13:                             # %"$11"
	movq	($PilLen)(%rip), %rcx
	jmp	.LBB629_15
.LBB629_14:                             # %"$17"
	movq	($UsrLen)(%rip), %rcx
.LBB629_15:                             # %"$5"
	leaq	-1(%rax,%rcx), %rax
.LBB629_16:                             # %"$5"
	retq
                                        # -- End function
	.def	 bufString;
	.scl	2;
	.type	32;
	.endef
	.globl	bufString                       # -- Begin function bufString
	.p2align	4, 0x90
bufString:                              # @bufString
# %bb.0:                                # %"$1"
	movq	%rdx, %rax
	xorl	%edx, %edx
	movq	%rax, %r8
	testq	%rdx, %rdx
	jne	.LBB630_8
	.p2align	4, 0x90
.LBB630_2:                              # %"$2.i"
	cmpq	$2, %rcx
	je	.LBB630_3
# %bb.5:                                # %"$5.i"
	testb	$2, %cl
	jne	.LBB630_6
# %bb.7:                                # %"$7.i"
	movq	-4(%rcx), %rdx
	movq	4(%rcx), %rcx
	jmp	.LBB630_8
	.p2align	4, 0x90
.LBB630_6:                              # %"$8.i"
	movq	%rcx, %rdx
	shrq	$4, %rdx
	movl	$2, %ecx
	.p2align	4, 0x90
.LBB630_8:                              # %symByte.exit
                                        # =>This Inner Loop Header: Depth=1
	movb	%dl, (%r8)
	testb	%dl, %dl
	je	.LBB630_4
# %bb.9:                                # %"$3"
                                        #   in Loop: Header=BB630_8 Depth=1
	shrq	$8, %rdx
	incq	%r8
	testq	%rdx, %rdx
	jne	.LBB630_8
	jmp	.LBB630_2
.LBB630_3:                              # %symByte.exit.thread
	movb	$0, (%r8)
.LBB630_4:                              # %"$4"
	retq
                                        # -- End function
	.def	 mkChar;
	.scl	2;
	.type	32;
	.endef
	.globl	mkChar                          # -- Begin function mkChar
	.p2align	4, 0x90
mkChar:                                 # @mkChar
# %bb.0:                                # %"$1"
                                        # kill: def $ecx killed $ecx def $rcx
	cmpl	$127, %ecx
	jg	.LBB631_2
# %bb.1:                                # %"$4"
	movslq	%ecx, %rax
	jmp	.LBB631_8
.LBB631_2:                              # %"$3"
	movl	$4082, %eax                     # imm = 0xFF2
	cmpl	$1114112, %ecx                  # imm = 0x110000
	je	.LBB631_10
# %bb.3:                                # %"$5"
	movl	%ecx, %eax
	cmpl	$2047, %ecx                     # imm = 0x7FF
	jg	.LBB631_5
# %bb.4:                                # %"$8"
	shrl	$6, %eax
	andl	$63, %ecx
	shll	$8, %ecx
	orl	%eax, %ecx
	orl	$32960, %ecx                    # imm = 0x80C0
	movq	%rcx, %rax
	jmp	.LBB631_8
.LBB631_5:                              # %"$7"
	cmpl	$65535, %ecx                    # imm = 0xFFFF
	jg	.LBB631_7
# %bb.6:                                # %"$10"
	shrl	$12, %eax
	leal	(,%rcx,4), %edx
	andl	$16128, %edx                    # imm = 0x3F00
	andl	$63, %ecx
	shll	$16, %ecx
	orl	%edx, %ecx
	orl	%eax, %ecx
	orl	$8421600, %ecx                  # imm = 0x8080E0
	movq	%rcx, %rax
	jmp	.LBB631_8
.LBB631_7:                              # %"$9"
	shrl	$18, %eax
	andl	$7, %eax
	movl	%ecx, %edx
	shrl	$4, %edx
	andl	$16128, %edx                    # imm = 0x3F00
	orl	%eax, %edx
	movl	%ecx, %eax
	shll	$10, %eax
	andl	$4128768, %eax                  # imm = 0x3F0000
	orl	%edx, %eax
	andl	$63, %ecx
	shll	$24, %ecx
	leal	-2139062032(%rcx,%rax), %eax
.LBB631_8:                              # %"$2"
	shlq	$4, %rax
	orq	$2, %rax
	cmpq	$2, %rax
	jne	.LBB631_10
# %bb.9:                                # %consStr.exit
	leaq	SymTab+8(%rip), %rax
	retq
.LBB631_10:                             # %"$3.i"
	movq	%rax, %rcx
	xorl	%edx, %edx
	jmp	consSym                         # TAILCALL
                                        # -- End function
	.def	 mkStrE;
	.scl	2;
	.type	32;
	.endef
	.globl	mkStrE                          # -- Begin function mkStrE
	.p2align	4, 0x90
mkStrE:                                 # @mkStrE
.seh_proc mkStrE
# %bb.0:                                # %"$1"
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$72, %rsp
	.seh_stackalloc 72
	.seh_endprologue
	movq	%rcx, %rbx
	movq	$4, 32(%rsp)
	leaq	48(%rsp), %rax
	movq	$2, 48(%rsp)
	movq	env(%rip), %rcx
	movq	%rcx, 56(%rsp)
	movq	%rax, env(%rip)
	leaq	SymTab+8(%rip), %r14
	cmpq	%rdx, %rbx
	je	.LBB632_6
# %bb.1:                                # %"$3.preheader"
	movq	%rdx, %rdi
	leaq	32(%rsp), %rsi
	.p2align	4, 0x90
.LBB632_2:                              # %"$3"
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%rbx), %ecx
	testb	%cl, %cl
	je	.LBB632_4
# %bb.3:                                # %"$5"
                                        #   in Loop: Header=BB632_2 Depth=1
	movq	%rsi, %rdx
	callq	byteSym
	incq	%rbx
	cmpq	%rbx, %rdi
	jne	.LBB632_2
.LBB632_4:                              # %"$4"
	movq	48(%rsp), %rcx
	cmpq	$2, %rcx
	je	.LBB632_6
# %bb.5:                                # %"$3.i"
	xorl	%edx, %edx
	callq	consSym
	movq	%rax, %r14
.LBB632_6:                              # %consStr.exit
	movq	56(%rsp), %rax
	movq	%rax, env(%rip)
	movq	%r14, %rax
	addq	$72, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 firstByte;
	.scl	2;
	.type	32;
	.endef
	.globl	firstByte                       # -- Begin function firstByte
	.p2align	4, 0x90
firstByte:                              # @firstByte
# %bb.0:                                # %"$1"
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rcx
	je	.LBB633_1
# %bb.2:                                # %"$3"
	movq	-8(%rcx), %rax
	testb	$8, %al
	jne	.LBB633_1
	.p2align	4, 0x90
# %bb.3:                                # %"$8"
	testb	$6, %al
	jne	.LBB633_5
.LBB633_4:                              # %"$8"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB633_4
.LBB633_5:                              # %"$9"
	testb	$2, %al
	jne	.LBB633_8
# %bb.6:                                # %"$10"
	movb	-4(%rax), %al
                                        # kill: def $al killed $al killed $rax
	retq
.LBB633_1:
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $rax
	retq
.LBB633_8:                              # %"$11"
	shrq	$4, %rax
                                        # kill: def $al killed $al killed $rax
	retq
                                        # -- End function
	.def	 isBlank;
	.scl	2;
	.type	32;
	.endef
	.globl	isBlank                         # -- Begin function isBlank
	.p2align	4, 0x90
isBlank:                                # @isBlank
# %bb.0:                                # %"$1"
	movb	$1, %al
	leaq	SymTab+8(%rip), %rdx
	cmpq	%rdx, %rcx
	je	.LBB634_14
# %bb.1:                                # %"$3"
	movl	%ecx, %edx
	andl	$14, %edx
	cmpl	$8, %edx
	jne	.LBB634_13
# %bb.2:                                # %"$5"
	movq	-8(%rcx), %r8
	testb	$8, %r8b
	jne	.LBB634_13
	.p2align	4, 0x90
# %bb.4:                                # %"$8"
	testb	$6, %r8b
	jne	.LBB634_5
.LBB634_3:                              # %"$8"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%r8), %r8
	testb	$6, %r8b
	je	.LBB634_3
.LBB634_5:                              # %"$10.preheader"
	xorl	%ecx, %ecx
	.p2align	4, 0x90
.LBB634_6:                              # %"$10"
                                        # =>This Inner Loop Header: Depth=1
	testq	%rcx, %rcx
	jne	.LBB634_11
# %bb.7:                                # %"$2.i"
                                        #   in Loop: Header=BB634_6 Depth=1
	cmpq	$2, %r8
	je	.LBB634_14
# %bb.8:                                # %"$5.i"
                                        #   in Loop: Header=BB634_6 Depth=1
	testb	$2, %r8b
	jne	.LBB634_9
# %bb.10:                               # %"$7.i"
                                        #   in Loop: Header=BB634_6 Depth=1
	movq	-4(%r8), %rcx
	movq	4(%r8), %r8
	jmp	.LBB634_11
.LBB634_9:                              # %"$8.i"
                                        #   in Loop: Header=BB634_6 Depth=1
	movq	%r8, %rcx
	shrq	$4, %rcx
	movl	$2, %r8d
	.p2align	4, 0x90
.LBB634_11:                             # %symByte.exit
                                        #   in Loop: Header=BB634_6 Depth=1
	testb	%cl, %cl
	je	.LBB634_14
# %bb.12:                               # %"$11"
                                        #   in Loop: Header=BB634_6 Depth=1
	movq	%rcx, %rdx
	shrq	$8, %rdx
	cmpb	$33, %cl
	movq	%rdx, %rcx
	jb	.LBB634_6
.LBB634_13:
	xorl	%eax, %eax
.LBB634_14:                             # %"$2"
                                        # kill: def $al killed $al killed $eax
	retq
                                        # -- End function
	.def	 extNm;
	.scl	2;
	.type	32;
	.endef
	.globl	extNm                           # -- Begin function extNm
	.p2align	4, 0x90
extNm:                                  # @extNm
# %bb.0:                                # %"$1"
                                        # kill: def $ecx killed $ecx def $rcx
	movl	%edx, %r8d
	andl	$1048575, %r8d                  # imm = 0xFFFFF
	movzbl	%cl, %r9d
	shll	$20, %r9d
	movl	%edx, %r10d
	andl	$-1048576, %r10d                # imm = 0xFFF00000
	shlq	$8, %r10
	shrl	$8, %ecx
	shlq	$40, %rcx
	shlq	$16, %rdx
	movabsq	$1152640029630136320, %rax      # imm = 0xFFF000000000000
	andq	%rdx, %rax
	orq	%r8, %rax
	orq	%rcx, %rax
	orq	%r10, %rax
	orq	%r9, %rax
	shlq	$4, %rax
	orq	$2, %rax
	retq
                                        # -- End function
	.def	 objFile;
	.scl	2;
	.type	32;
	.endef
	.globl	objFile                         # -- Begin function objFile
	.p2align	4, 0x90
objFile:                                # @objFile
# %bb.0:                                # %"$1"
	movl	%ecx, %eax
	shrl	$24, %eax
	shrq	$36, %rcx
	andl	$65280, %ecx                    # imm = 0xFF00
	orl	%ecx, %eax
	retq
                                        # -- End function
	.def	 objId;
	.scl	2;
	.type	32;
	.endef
	.globl	objId                           # -- Begin function objId
	.p2align	4, 0x90
objId:                                  # @objId
# %bb.0:                                # %"$1"
	movl	%ecx, %edx
	shrl	$4, %edx
	andl	$1048575, %edx                  # imm = 0xFFFFF
	movq	%rcx, %rax
	shrq	$12, %rax
	andl	$-1048576, %eax                 # imm = 0xFFF00000
	orq	%rax, %rdx
	shrq	$20, %rcx
	movabsq	$4393751543808, %rax            # imm = 0x3FF00000000
	andq	%rcx, %rax
	orq	%rdx, %rax
	retq
                                        # -- End function
	.def	 packExtNm;
	.scl	2;
	.type	32;
	.endef
	.globl	packExtNm                       # -- Begin function packExtNm
	.p2align	4, 0x90
packExtNm:                              # @packExtNm
.seh_proc packExtNm
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rdx, %rsi
	movq	%rcx, %rdi
	movl	%edi, %eax
	shrl	$24, %eax
	shrq	$36, %rcx
	andl	$65280, %ecx                    # imm = 0xFF00
	orl	%eax, %ecx
	je	.LBB638_2
# %bb.1:                                # %"$2"
                                        # kill: def $ecx killed $ecx killed $rcx
	movq	%rsi, %rdx
	callq	packAO
.LBB638_2:                              # %"$3"
	movl	%edi, %eax
	shrl	$4, %eax
	andl	$1048575, %eax                  # imm = 0xFFFFF
	movq	%rdi, %rdx
	shrq	$12, %rdx
	andl	$-1048576, %edx                 # imm = 0xFFF00000
	orq	%rax, %rdx
	shrq	$20, %rdi
	movabsq	$4393751543808, %rcx            # imm = 0x3FF00000000
	andq	%rdi, %rcx
	orq	%rdx, %rcx
	movq	%rsi, %rdx
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	jmp	packOct                         # TAILCALL
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 cmpLong;
	.scl	2;
	.type	32;
	.endef
	.globl	cmpLong                         # -- Begin function cmpLong
	.p2align	4, 0x90
cmpLong:                                # @cmpLong
# %bb.0:                                # %"$1"
	.p2align	4, 0x90
.LBB639_1:                              # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	movq	-4(%rcx), %rax
	cmpq	-4(%rdx), %rax
	setb	%al
	jne	.LBB639_5
# %bb.2:                                # %"$3"
                                        #   in Loop: Header=BB639_1 Depth=1
	movq	4(%rcx), %rcx
	movq	4(%rdx), %rdx
	testb	$2, %cl
	jne	.LBB639_6
# %bb.3:                                # %"$9"
                                        #   in Loop: Header=BB639_1 Depth=1
	testb	$2, %dl
	je	.LBB639_1
# %bb.4:
	movl	$1, %eax
.LBB639_9:                              # %"$4"
	retq
.LBB639_5:                              # %"$5"
	xorb	$1, %al
.LBB639_11:                             # %"$14"
	movzbl	%al, %eax
	leaq	-1(%rax,%rax), %rax
	retq
.LBB639_6:                              # %"$10"
	movq	$-1, %rax
	testb	$4, %dl
	jne	.LBB639_9
# %bb.7:                                # %"$12"
	cmpq	%rcx, %rdx
	jne	.LBB639_10
# %bb.8:
	xorl	%eax, %eax
	retq
.LBB639_10:                             # %"$14"
	setbe	%al
	jmp	.LBB639_11
                                        # -- End function
	.def	 isLstIntern;
	.scl	2;
	.type	32;
	.endef
	.globl	isLstIntern                     # -- Begin function isLstIntern
	.p2align	4, 0x90
isLstIntern:                            # @isLstIntern
# %bb.0:                                # %"$1"
	pushq	%rsi
	pushq	%rdi
	subq	$40, %rsp
	movq	%rdx, %rsi
	testb	$15, %sil
	jne	.LBB640_4
# %bb.1:                                # %"$3.preheader"
	movq	%rcx, %rdi
	.p2align	4, 0x90
.LBB640_2:                              # %"$3"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rdx
	movq	%rdi, %rcx
	callq	isIntern
	testq	%rax, %rax
	jne	.LBB640_5
# %bb.3:                                # %"$6"
                                        #   in Loop: Header=BB640_2 Depth=1
	movq	8(%rsi), %rsi
	testb	$15, %sil
	je	.LBB640_2
.LBB640_4:
	xorl	%eax, %eax
.LBB640_5:                              # %"$4"
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
                                        # -- End function
	.def	 findSym;
	.scl	2;
	.type	32;
	.endef
	.globl	findSym                         # -- Begin function findSym
	.p2align	4, 0x90
findSym:                                # @findSym
# %bb.0:                                # %"$1"
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$32, %rsp
	movq	%r8, %rsi
	testb	$15, %sil
	jne	.LBB641_5
# %bb.1:                                # %"$3.preheader"
	movq	%rdx, %rdi
	movq	%rcx, %rbx
	.p2align	4, 0x90
.LBB641_2:                              # %"$3"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsi), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rdx
	movq	%rdi, %rcx
	callq	isIntern
	cmpq	%rbx, %rax
	je	.LBB641_3
# %bb.4:                                # %"$6"
                                        #   in Loop: Header=BB641_2 Depth=1
	movq	8(%rsi), %rsi
	testb	$15, %sil
	je	.LBB641_2
.LBB641_5:
	xorl	%eax, %eax
	jmp	.LBB641_6
.LBB641_3:
	movb	$1, %al
.LBB641_6:                              # %"$4"
                                        # kill: def $al killed $al killed $eax
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
                                        # -- End function
	.def	 requestSym;
	.scl	2;
	.type	32;
	.endef
	.globl	requestSym                      # -- Begin function requestSym
	.p2align	4, 0x90
requestSym:                             # @requestSym
.seh_proc requestSym
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$48, %rsp
	.seh_stackalloc 48
	.seh_endprologue
	movq	%rcx, %rsi
	leaq	SymTab+112(%rip), %rdx
	callq	isIntern
	testq	%rax, %rax
	jne	.LBB642_2
# %bb.1:                                # %"$3"
	movq	gcData(%rip), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rax
	movq	(%rcx), %rcx
	movq	8(%rcx), %r9
	movq	%rax, 32(%rsp)
	movb	$0, 40(%rsp)
	leaq	SymTab+8(%rip), %rdx
	xorl	%ecx, %ecx
	movq	%rsi, %r8
	callq	intern
.LBB642_2:                              # %"$4"
	nop
	addq	$48, %rsp
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 delNode;
	.scl	2;
	.type	32;
	.endef
	.globl	delNode                         # -- Begin function delNode
	.p2align	4, 0x90
delNode:                                # @delNode
# %bb.0:                                # %"$1"
	movq	8(%rcx), %r8
	movq	(%r8), %r9
	movq	8(%r8), %rax
	testb	$15, %r9b
	je	.LBB643_2
# %bb.1:                                # %"$4"
	movq	%rax, (%rdx)
	retq
.LBB643_2:                              # %"$3"
	testb	$15, %al
	je	.LBB643_4
# %bb.3:                                # %"$6"
	movq	%r9, (%rdx)
	retq
.LBB643_4:                              # %"$5"
	movq	8(%rax), %r9
	movq	(%r9), %rdx
	testb	$15, %dl
	je	.LBB643_6
# %bb.5:                                # %"$8"
	movq	(%rax), %rax
	movq	%rax, (%rcx)
	movq	8(%r9), %rax
	movq	%rax, 8(%r8)
	retq
	.p2align	4, 0x90
.LBB643_6:                              # %"$9"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %r8
	movq	%rdx, %rax
	movq	8(%rdx), %r9
	movq	(%r9), %rdx
	testb	$15, %dl
	je	.LBB643_6
# %bb.7:                                # %"$12"
	movq	(%rax), %rax
	movq	%rax, (%rcx)
	movq	8(%r8), %rax
	movq	8(%r9), %rcx
	movq	%rcx, (%rax)
	retq
                                        # -- End function
	.def	 preStr;
	.scl	2;
	.type	32;
	.endef
	.globl	preStr                          # -- Begin function preStr
	.p2align	4, 0x90
preStr:                                 # @preStr
# %bb.0:                                # %"$2.i"
                                        # kill: def $dl killed $dl def $rdx
	cmpq	$2, %rcx
	jne	.LBB644_2
# %bb.1:
	movl	$2, %r9d
	xorl	%r10d, %r10d
	xorl	%ecx, %ecx
	jmp	.LBB644_9
.LBB644_2:                              # %"$5.i"
	testb	$2, %cl
	jne	.LBB644_4
# %bb.3:                                # %"$7.i"
	movq	4(%rcx), %r9
	movq	-4(%rcx), %rcx
	jmp	.LBB644_5
.LBB644_4:                              # %"$8.i"
	shrq	$4, %rcx
	movl	$2, %r9d
.LBB644_5:                              # %"$3.i"
	movq	%rcx, %r10
	shrq	$8, %r10
	jmp	.LBB644_9
.LBB644_6:                              # %"$7.i8"
                                        #   in Loop: Header=BB644_9 Depth=1
	movq	-4(%rdx), %r10
	movq	%r10, (%r8)
	movq	4(%rdx), %rax
	movq	%r10, %rdx
.LBB644_7:                              # %symByte.exit10.sink.split
                                        #   in Loop: Header=BB644_9 Depth=1
	movq	%rax, 8(%r8)
.LBB644_8:                              # %symByte.exit10
                                        #   in Loop: Header=BB644_9 Depth=1
	movq	%rcx, %r10
	shrq	$8, %r10
	movq	%rdx, %rax
	shrq	$8, %rax
	movq	%rax, (%r8)
	testb	%dl, %dl
	je	.LBB644_20
.LBB644_9:                              # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	cmpb	%cl, %dl
	jne	.LBB644_20
# %bb.10:                               # %"$3"
                                        #   in Loop: Header=BB644_9 Depth=1
	testq	%r10, %r10
	je	.LBB644_12
# %bb.11:                               #   in Loop: Header=BB644_9 Depth=1
	movq	%r10, %rcx
	testb	%cl, %cl
	jne	.LBB644_16
	jmp	.LBB644_22
	.p2align	4, 0x90
.LBB644_12:                             # %"$2.i12"
                                        #   in Loop: Header=BB644_9 Depth=1
	cmpq	$2, %r9
	je	.LBB644_22
# %bb.13:                               # %"$5.i15"
                                        #   in Loop: Header=BB644_9 Depth=1
	testb	$2, %r9b
	jne	.LBB644_15
# %bb.14:                               # %"$7.i17"
                                        #   in Loop: Header=BB644_9 Depth=1
	movq	-4(%r9), %rcx
	movq	4(%r9), %r9
	testb	%cl, %cl
	jne	.LBB644_16
	jmp	.LBB644_22
.LBB644_15:                             # %"$8.i16"
                                        #   in Loop: Header=BB644_9 Depth=1
	movq	%r9, %rcx
	shrq	$4, %rcx
	movl	$2, %r9d
	testb	%cl, %cl
	je	.LBB644_22
	.p2align	4, 0x90
.LBB644_16:                             # %"$6"
                                        #   in Loop: Header=BB644_9 Depth=1
	movq	(%r8), %rdx
	testq	%rdx, %rdx
	jne	.LBB644_8
# %bb.17:                               # %"$2.i3"
                                        #   in Loop: Header=BB644_9 Depth=1
	movq	8(%r8), %rdx
	cmpq	$2, %rdx
	je	.LBB644_20
# %bb.18:                               # %"$5.i6"
                                        #   in Loop: Header=BB644_9 Depth=1
	testb	$2, %dl
	je	.LBB644_6
# %bb.19:                               # %"$8.i7"
                                        #   in Loop: Header=BB644_9 Depth=1
	shrq	$4, %rdx
	movl	$2, %eax
	jmp	.LBB644_7
.LBB644_20:
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	retq
.LBB644_22:
	movb	$1, %al
                                        # kill: def $al killed $al killed $eax
	retq
                                        # -- End function
	.def	 idxGet;
	.scl	2;
	.type	32;
	.endef
	.globl	idxGet                          # -- Begin function idxGet
	.p2align	4, 0x90
idxGet:                                 # @idxGet
.seh_proc idxGet
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	(%rcx), %rbx
	leaq	SymTab+8(%rip), %rsi
	testb	$15, %bl
	jne	.LBB645_5
# %bb.1:                                # %"$3.preheader"
	movq	%rdx, %rdi
	.p2align	4, 0x90
.LBB645_2:                              # %"$3"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rbx), %rcx
	movq	%rdi, %rdx
	callq	compare
	testq	%rax, %rax
	je	.LBB645_3
# %bb.4:                                # %"$6"
                                        #   in Loop: Header=BB645_2 Depth=1
	movq	8(%rbx), %rcx
	leaq	8(%rcx), %rdx
	testq	%rax, %rax
	cmovnsq	%rcx, %rdx
	movq	(%rdx), %rbx
	testb	$15, %bl
	je	.LBB645_2
	jmp	.LBB645_5
.LBB645_3:
	movq	%rbx, %rsi
.LBB645_5:                              # %"$4"
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 putn;
	.scl	2;
	.type	32;
	.endef
	.globl	putn                            # -- Begin function putn
	.p2align	4, 0x90
putn:                                   # @putn
.seh_proc putn
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	testb	$6, %r8b
	je	.LBB646_1
# %bb.6:                                # %"$3"
	cmpq	$2, %r8
	je	.LBB646_10
# %bb.7:                                # %"$14"
	movq	%r8, %rax
	shrq	$4, %rax
	.p2align	4, 0x90
.LBB646_8:                              # %"$15"
                                        # =>This Inner Loop Header: Depth=1
	decq	%rax
	je	.LBB646_11
# %bb.9:                                # %"$16"
                                        #   in Loop: Header=BB646_8 Depth=1
	movq	8(%rdx), %rdx
	testb	$15, %dl
	je	.LBB646_8
.LBB646_5:                              # %"$11"
	movq	%r8, %rdx
	callq	itemErr
	.p2align	4, 0x90
.LBB646_4:                              # %"$8"
                                        #   in Loop: Header=BB646_1 Depth=1
	movq	8(%rdx), %rdx
	testb	$15, %dl
	jne	.LBB646_5
.LBB646_1:                              # %"$5"
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdx), %rax
	testb	$15, %al
	jne	.LBB646_4
# %bb.2:                                # %"$7"
                                        #   in Loop: Header=BB646_1 Depth=1
	cmpq	%r8, (%rax)
	jne	.LBB646_4
# %bb.3:                                # %"$10"
	addq	$8, %rax
	jmp	.LBB646_12
.LBB646_11:                             # %"$17"
	leaq	8(%rdx), %rax
	testb	$8, %r8b
	cmoveq	%rdx, %rax
.LBB646_12:                             # %"$2"
	movq	%r9, (%rax)
	addq	$40, %rsp
	retq
.LBB646_10:                             # %"$13"
	movl	$2, %edx
	callq	argErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 wipe;
	.scl	2;
	.type	32;
	.endef
	.globl	wipe                            # -- Begin function wipe
	.p2align	4, 0x90
wipe:                                   # @wipe
.seh_proc wipe
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movl	%edx, %eax
	andl	$14, %eax
	cmpl	$8, %eax
	jne	.LBB647_10
# %bb.1:                                # %"$3"
	movq	-8(%rdx), %rcx
	movq	%rcx, %rax
	andq	$-9, %rax
	testb	$6, %cl
	jne	.LBB647_3
	.p2align	4, 0x90
.LBB647_2:                              # %"$5"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB647_2
.LBB647_3:                              # %"$6"
	testb	$8, %cl
	jne	.LBB647_5
# %bb.4:                                # %"$7"
	leaq	SymTab+8(%rip), %rcx
	movq	%rcx, (%rdx)
.LBB647_8:                              # %"$9"
	movq	%rax, -8(%rdx)
	jmp	.LBB647_9
.LBB647_5:                              # %"$8"
	addq	%rax, %rax
	jb	.LBB647_9
# %bb.6:                                # %"$10"
	addq	%rax, %rax
	jae	.LBB647_9
# %bb.7:                                # %"$12"
	leaq	SymTab+8(%rip), %rcx
	movq	%rcx, (%rdx)
	shrq	$2, %rax
	orq	$8, %rax
	jmp	.LBB647_8
.LBB647_9:                              # %"$9"
	addq	$40, %rsp
	retq
.LBB647_10:                             # %"$2"
	callq	symErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 closeOnExec;
	.scl	2;
	.type	32;
	.endef
	.globl	closeOnExec                     # -- Begin function closeOnExec
	.p2align	4, 0x90
closeOnExec:                            # @closeOnExec
.seh_proc closeOnExec
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movl	%edx, %ecx
	callq	fcntlCloExec
	testl	%eax, %eax
	js	.LBB648_2
# %bb.1:                                # %"$3"
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB648_2:                              # %"$2"
	callq	strErrno
	leaq	.L$36(%rip), %r8
	movq	%rsi, %rcx
	xorl	%edx, %edx
	movq	%rax, %r9
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 rdLockWait;
	.scl	2;
	.type	32;
	.endef
	.globl	rdLockWait                      # -- Begin function rdLockWait
	.p2align	4, 0x90
rdLockWait:                             # @rdLockWait
.seh_proc rdLockWait
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rdx, %rsi
	movl	%ecx, %edi
	.p2align	4, 0x90
.LBB649_1:                              # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	movl	%edi, %ecx
	xorl	%edx, %edx
	movq	%rsi, %r8
	movb	$1, %r9b
	callq	rdLock
	testl	%eax, %eax
	jns	.LBB649_4
# %bb.2:                                # %"$3"
                                        #   in Loop: Header=BB649_1 Depth=1
	callq	gErrno
	cmpl	$2, %eax
	je	.LBB649_1
# %bb.3:                                # %"$5"
	callq	lockErr
.LBB649_4:                              # %"$4"
	nop
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 wrLockWait;
	.scl	2;
	.type	32;
	.endef
	.globl	wrLockWait                      # -- Begin function wrLockWait
	.p2align	4, 0x90
wrLockWait:                             # @wrLockWait
.seh_proc wrLockWait
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rdx, %rsi
	movl	%ecx, %edi
	.p2align	4, 0x90
.LBB650_1:                              # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	movl	%edi, %ecx
	xorl	%edx, %edx
	movq	%rsi, %r8
	movb	$1, %r9b
	callq	wrLock
	testl	%eax, %eax
	jns	.LBB650_4
# %bb.2:                                # %"$3"
                                        #   in Loop: Header=BB650_1 Depth=1
	callq	gErrno
	cmpl	$2, %eax
	je	.LBB650_1
# %bb.3:                                # %"$5"
	callq	lockErr
.LBB650_4:                              # %"$4"
	nop
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 closeInFile;
	.scl	2;
	.type	32;
	.endef
	.globl	closeInFile                     # -- Begin function closeInFile
	.p2align	4, 0x90
closeInFile:                            # @closeInFile
# %bb.0:                                # %"$1"
	pushq	%rsi
	subq	$32, %rsp
	cmpl	%ecx, ($InFDs)(%rip)
	jle	.LBB651_5
# %bb.1:                                # %"$2"
	movq	($InFiles)(%rip), %rax
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	cmpq	($InFile)(%rip), %rsi
	je	.LBB651_2
# %bb.3:                                # %"$5"
	testq	%rsi, %rsi
	je	.LBB651_5
.LBB651_4:                              # %"$6"
	movq	(%rsi), %rcx
	callq	free
	movq	$0, (%rsi)
	movl	$-1, 8(%rsi)
.LBB651_5:                              # %"$3"
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB651_2:                              # %"$4"
	movq	(%rax), %rax
	movq	%rax, ($InFile)(%rip)
	movl	12(%rax), %eax
	movl	%eax, ($Chr)(%rip)
	testq	%rsi, %rsi
	jne	.LBB651_4
	jmp	.LBB651_5
                                        # -- End function
	.def	 closeOutFile;
	.scl	2;
	.type	32;
	.endef
	.globl	closeOutFile                    # -- Begin function closeOutFile
	.p2align	4, 0x90
closeOutFile:                           # @closeOutFile
# %bb.0:                                # %"$1"
	cmpl	%ecx, ($OutFDs)(%rip)
	jle	.LBB652_5
# %bb.1:                                # %"$2"
	movq	($OutFiles)(%rip), %rdx
	movslq	%ecx, %rax
	movq	(%rdx,%rax,8), %rax
	cmpq	($OutFile)(%rip), %rax
	je	.LBB652_2
# %bb.3:                                # %"$5"
	testq	%rax, %rax
	je	.LBB652_5
.LBB652_4:                              # %"$6"
	movl	$-1, (%rax)
.LBB652_5:                              # %"$3"
	retq
.LBB652_2:                              # %"$4"
	movq	8(%rdx), %rcx
	movq	%rcx, ($OutFile)(%rip)
	testq	%rax, %rax
	jne	.LBB652_4
	jmp	.LBB652_5
                                        # -- End function
	.def	 slow;
	.scl	2;
	.type	32;
	.endef
	.globl	slow                            # -- Begin function slow
	.p2align	4, 0x90
slow:                                   # @slow
.seh_proc slow
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rcx, %rsi
	movl	$0, 24(%rcx)
	movl	8(%rcx), %ecx
	leaq	32(%rsi), %rdi
	jmp	.LBB653_1
	.p2align	4, 0x90
.LBB653_7:                              # %"$9"
                                        #   in Loop: Header=BB653_1 Depth=1
	movl	8(%rsi), %ecx
.LBB653_1:                              # %"$1"
                                        # =>This Inner Loop Header: Depth=1
	movl	$4096, %r8d                     # imm = 0x1000
	movq	%rdi, %rdx
	callq	read
	testl	%eax, %eax
	jns	.LBB653_4
# %bb.2:                                # %"$3"
                                        #   in Loop: Header=BB653_1 Depth=1
	callq	gErrno
	cmpl	$2, %eax
	jne	.LBB653_3
# %bb.5:                                # %"$6"
                                        #   in Loop: Header=BB653_1 Depth=1
	cmpl	$0, ($Signal)(%rip)
	je	.LBB653_7
# %bb.6:                                # %"$8"
                                        #   in Loop: Header=BB653_1 Depth=1
	xorl	%ecx, %ecx
	callq	sighandler
	jmp	.LBB653_7
.LBB653_3:
	xorl	%eax, %eax
.LBB653_4:                              # %"$4"
	movl	%eax, 28(%rsi)
                                        # kill: def $eax killed $eax killed $rax
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 rdBytes;
	.scl	2;
	.type	32;
	.endef
	.globl	rdBytes                         # -- Begin function rdBytes
	.p2align	4, 0x90
rdBytes:                                # @rdBytes
.seh_proc rdBytes
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movl	%r8d, %esi
	movq	%rdx, %rdi
	movl	%ecx, %ebp
	jmp	.LBB654_1
	.p2align	4, 0x90
.LBB654_3:                              # %"$6"
                                        #   in Loop: Header=BB654_1 Depth=1
	movl	%eax, %ecx
	addq	%rcx, %rdi
	subl	%eax, %esi
	je	.LBB654_4
.LBB654_1:                              # %"$2"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB654_2 Depth 2
	movslq	%esi, %rbx
.LBB654_2:                              # %"$2"
                                        #   Parent Loop BB654_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	%ebp, %ecx
	movq	%rdi, %rdx
	movq	%rbx, %r8
	callq	read
	testl	%eax, %eax
	jg	.LBB654_3
# %bb.5:                                # %"$4"
                                        #   in Loop: Header=BB654_2 Depth=2
	testl	%eax, %eax
	je	.LBB654_7
# %bb.6:                                # %"$8"
                                        #   in Loop: Header=BB654_2 Depth=2
	callq	gErrno
	cmpl	$2, %eax
	jne	.LBB654_7
# %bb.9:                                # %"$10"
                                        #   in Loop: Header=BB654_2 Depth=2
	cmpl	$0, ($Signal)(%rip)
	je	.LBB654_2
# %bb.10:                               # %"$11"
                                        #   in Loop: Header=BB654_2 Depth=2
	xorl	%ecx, %ecx
	callq	sighandler
	jmp	.LBB654_2
.LBB654_7:
	xorl	%eax, %eax
.LBB654_8:                              # %"$9"
                                        # kill: def $al killed $al killed $eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	retq
.LBB654_4:
	movb	$1, %al
	jmp	.LBB654_8
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 clsChild;
	.scl	2;
	.type	32;
	.endef
	.globl	clsChild                        # -- Begin function clsChild
	.p2align	4, 0x90
clsChild:                               # @clsChild
.seh_proc clsChild
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movl	16(%rcx), %eax
	cmpl	($Talking)(%rip), %eax
	jne	.LBB655_2
# %bb.1:                                # %"$2"
	movl	$0, ($Talking)(%rip)
.LBB655_2:                              # %"$3"
	movl	$0, 16(%rsi)
	movl	20(%rsi), %ecx
	callq	close
	movl	24(%rsi), %ecx
	callq	close
	movq	(%rsi), %rcx
	addq	$32, %rsp
	popq	%rsi
	jmp	free                            # TAILCALL
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 flush;
	.scl	2;
	.type	32;
	.endef
	.globl	flush                           # -- Begin function flush
	.p2align	4, 0x90
flush:                                  # @flush
# %bb.0:                                # %"$1"
	testq	%rcx, %rcx
	je	.LBB656_2
# %bb.1:                                # %"$3"
	movq	%rcx, %rdx
	movl	4(%rcx), %r8d
	testl	%r8d, %r8d
	je	.LBB656_2
# %bb.3:                                # %"$6"
	movl	$0, 4(%rdx)
	movl	(%rdx), %ecx
	addq	$8, %rdx
	jmp	wrBytes                         # TAILCALL
.LBB656_2:                              # %"$4"
	movb	$1, %al
	retq
                                        # -- End function
	.def	 prCnt;
	.scl	2;
	.type	32;
	.endef
	.globl	prCnt                           # -- Begin function prCnt
	.p2align	4, 0x90
prCnt:                                  # @prCnt
.seh_proc prCnt
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rdx, %rsi
	addb	$-4, %cl
	movq	%rdx, %rax
	.p2align	4, 0x90
.LBB657_1:                              # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	shrq	$8, %rax
	addb	$4, %cl
	testq	%rax, %rax
	jne	.LBB657_1
# %bb.2:                                # %"$4"
	callq	*($PutBin)(%rip)
	.p2align	4, 0x90
.LBB657_3:                              # %"$5"
                                        # =>This Inner Loop Header: Depth=1
	movl	%esi, %ecx
	callq	*($PutBin)(%rip)
	shrq	$8, %rsi
	jne	.LBB657_3
# %bb.4:                                # %"$7"
	addq	$32, %rsp
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 pr;
	.scl	2;
	.type	32;
	.endef
	.globl	pr                              # -- Begin function pr
	.p2align	4, 0x90
pr:                                     # @pr
# %bb.0:                                # %"$1"
	leaq	_putStdout(%rip), %rax
	movq	%rax, ($PutBin)(%rip)
	jmp	binPrint                        # TAILCALL
                                        # -- End function
	.def	 prTell;
	.scl	2;
	.type	32;
	.endef
	.globl	prTell                          # -- Begin function prTell
	.p2align	4, 0x90
prTell:                                 # @prTell
# %bb.0:                                # %"$1"
	leaq	putTell(%rip), %rax
	movq	%rax, ($PutBin)(%rip)
	movl	$0, ($Extn)(%rip)
	jmp	binPrint                        # TAILCALL
                                        # -- End function
	.def	 tellBeg;
	.scl	2;
	.type	32;
	.endef
	.globl	tellBeg                         # -- Begin function tellBeg
	.p2align	4, 0x90
tellBeg:                                # @tellBeg
# %bb.0:                                # %"$1"
	movq	%rcx, ($TellBuf)(%rip)
	movl	PipeBufSize(%rip), %eax
	decl	%eax
	cltq
	addq	%rcx, %rax
	movq	%rax, ($End)(%rip)
	movb	$1, 8(%rcx)
	addq	$9, %rcx
	movq	%rcx, ($Ptr)(%rip)
	retq
                                        # -- End function
	.def	 waitFile;
	.scl	2;
	.type	32;
	.endef
	.globl	waitFile                        # -- Begin function waitFile
	.p2align	4, 0x90
waitFile:                               # @waitFile
.seh_proc waitFile
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movl	%ecx, %esi
	leaq	36(%rsp), %rdx
	xorl	%r8d, %r8d
	callq	waitpid
	testl	%eax, %eax
	js	.LBB661_1
.LBB661_6:                              # %"$4"
	movslq	36(%rsp), %rax
	shlq	$4, %rax
	orq	$2, %rax
	movq	%rax, SymTab+456(%rip)
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
.LBB661_1:                              # %"$3.preheader"
	leaq	36(%rsp), %rdi
	jmp	.LBB661_2
	.p2align	4, 0x90
.LBB661_5:                              # %"$8"
                                        #   in Loop: Header=BB661_2 Depth=1
	movl	%esi, %ecx
	movq	%rdi, %rdx
	xorl	%r8d, %r8d
	callq	waitpid
	testl	%eax, %eax
	jns	.LBB661_6
.LBB661_2:                              # %"$3"
                                        # =>This Inner Loop Header: Depth=1
	callq	gErrno
	cmpl	$2, %eax
	jne	.LBB661_7
# %bb.3:                                # %"$6"
                                        #   in Loop: Header=BB661_2 Depth=1
	cmpl	$0, ($Signal)(%rip)
	je	.LBB661_5
# %bb.4:                                # %"$7"
                                        #   in Loop: Header=BB661_2 Depth=1
	xorl	%ecx, %ecx
	callq	sighandler
	jmp	.LBB661_5
.LBB661_7:                              # %"$5"
	callq	closeErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 currFd;
	.scl	2;
	.type	32;
	.endef
	.globl	currFd                          # -- Begin function currFd
	.p2align	4, 0x90
currFd:                                 # @currFd
.seh_proc currFd
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	env+32(%rip), %rax
	movq	env+40(%rip), %r8
	movq	%r8, %rdx
	orq	%rax, %rdx
	je	.LBB662_7
# %bb.1:                                # %"$5"
	testq	%r8, %r8
	je	.LBB662_2
# %bb.3:                                # %"$7"
	testq	%rax, %rax
	je	.LBB662_5
# %bb.4:                                # %"$9"
	xorl	%ecx, %ecx
	cmpq	%rax, %r8
	seta	%cl
	xorl	%edx, %edx
	cmpq	%r8, %rax
	seta	%dl
	cmpq	%rsp, %rax
	cmoval	%ecx, %edx
	cmpb	$1, %dl
	jne	.LBB662_5
.LBB662_2:                              # %"$8"
	movq	8(%rax), %rax
	addq	$8, %rax
	jmp	.LBB662_6
.LBB662_5:                              # %"$15"
	movq	8(%r8), %rax
.LBB662_6:                              # %"$2"
	movl	(%rax), %eax
	addq	$40, %rsp
	retq
.LBB662_7:                              # %"$6"
	leaq	.L$40(%rip), %r8
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 pushInFile;
	.scl	2;
	.type	32;
	.endef
	.globl	pushInFile                      # -- Begin function pushInFile
	.p2align	4, 0x90
pushInFile:                             # @pushInFile
# %bb.0:                                # %"$1"
	movq	($InFile)(%rip), %r9
	testq	%r9, %r9
	je	.LBB663_2
# %bb.1:                                # %"$2"
	movl	($Chr)(%rip), %eax
	movl	%eax, 12(%r9)
.LBB663_2:                              # %"$3"
	movq	env+32(%rip), %r9
	movq	%r9, (%rcx)
	testq	%r9, %r9
	je	.LBB663_4
# %bb.3:                                # %"$4"
	movq	($Get)(%rip), %rax
	movq	%rax, 16(%r9)
.LBB663_4:                              # %"$5"
	leaq	_getStdin(%rip), %rax
	movq	%rax, ($Get)(%rip)
	movq	%rdx, ($InFile)(%rip)
	movq	%rdx, 8(%rcx)
	movl	12(%rdx), %eax
	movl	%eax, ($Chr)(%rip)
	movl	%r8d, 24(%rcx)
	movq	%rcx, env+32(%rip)
	retq
                                        # -- End function
	.def	 pushOutFile;
	.scl	2;
	.type	32;
	.endef
	.globl	pushOutFile                     # -- Begin function pushOutFile
	.p2align	4, 0x90
pushOutFile:                            # @pushOutFile
# %bb.0:                                # %"$1"
	movq	env+40(%rip), %r9
	movq	%r9, (%rcx)
	testq	%r9, %r9
	je	.LBB664_2
# %bb.1:                                # %"$2"
	movq	($Put)(%rip), %rax
	movq	%rax, 16(%r9)
.LBB664_2:                              # %"$3"
	leaq	_putStdout(%rip), %rax
	movq	%rax, ($Put)(%rip)
	movq	%rdx, ($OutFile)(%rip)
	movq	%rdx, 8(%rcx)
	movl	%r8d, 24(%rcx)
	movq	%rcx, env+40(%rip)
	retq
                                        # -- End function
	.def	 pushErrFile;
	.scl	2;
	.type	32;
	.endef
	.globl	pushErrFile                     # -- Begin function pushErrFile
	.p2align	4, 0x90
pushErrFile:                            # @pushErrFile
# %bb.0:                                # %"$1"
	movq	env+48(%rip), %rax
	movq	%rax, (%rcx)
	movq	%rcx, env+48(%rip)
	retq
                                        # -- End function
	.def	 pushCtlFile;
	.scl	2;
	.type	32;
	.endef
	.globl	pushCtlFile                     # -- Begin function pushCtlFile
	.p2align	4, 0x90
pushCtlFile:                            # @pushCtlFile
# %bb.0:                                # %"$1"
	movq	env+56(%rip), %rax
	movq	%rax, (%rcx)
	movq	%rcx, env+56(%rip)
	retq
                                        # -- End function
	.def	 tosInFile;
	.scl	2;
	.type	32;
	.endef
	.globl	tosInFile                       # -- Begin function tosInFile
	.p2align	4, 0x90
tosInFile:                              # @tosInFile
# %bb.0:                                # %"$1"
	movq	env+32(%rip), %rax
	movq	8(%rax), %rcx
	movq	%rcx, ($InFile)(%rip)
	movl	12(%rcx), %ecx
	movl	%ecx, ($Chr)(%rip)
	movq	16(%rax), %rax
	movq	%rax, ($Get)(%rip)
	retq
                                        # -- End function
	.def	 tosOutFile;
	.scl	2;
	.type	32;
	.endef
	.globl	tosOutFile                      # -- Begin function tosOutFile
	.p2align	4, 0x90
tosOutFile:                             # @tosOutFile
# %bb.0:                                # %"$1"
	movq	env+40(%rip), %rax
	movq	8(%rax), %rcx
	movq	%rcx, ($OutFile)(%rip)
	movq	16(%rax), %rax
	movq	%rax, ($Put)(%rip)
	retq
                                        # -- End function
	.def	 popErrFiles;
	.scl	2;
	.type	32;
	.endef
	.globl	popErrFiles                     # -- Begin function popErrFiles
	.p2align	4, 0x90
popErrFiles:                            # @popErrFiles
.seh_proc popErrFiles
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	env+48(%rip), %rsi
	movl	8(%rsi), %ecx
	movl	$2, %edx
	callq	dup2
	movl	8(%rsi), %ecx
	callq	close
	movq	(%rsi), %rax
	movq	%rax, env+48(%rip)
	addq	$32, %rsp
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 popCtlFiles;
	.scl	2;
	.type	32;
	.endef
	.globl	popCtlFiles                     # -- Begin function popCtlFiles
	.p2align	4, 0x90
popCtlFiles:                            # @popCtlFiles
.seh_proc popCtlFiles
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	env+56(%rip), %rsi
	movl	8(%rsi), %ecx
	testl	%ecx, %ecx
	js	.LBB670_2
# %bb.1:                                # %"$2"
	callq	close
	jmp	.LBB670_9
.LBB670_2:                              # %"$3"
	movq	env+32(%rip), %rax
	movq	env+40(%rip), %rcx
	movq	%rcx, %rdx
	orq	%rax, %rdx
	je	.LBB670_10
# %bb.3:                                # %"$5.i"
	testq	%rcx, %rcx
	je	.LBB670_4
# %bb.5:                                # %"$7.i"
	testq	%rax, %rax
	je	.LBB670_7
# %bb.6:                                # %"$9.i"
	xorl	%r8d, %r8d
	cmpq	%rax, %rcx
	seta	%r8b
	xorl	%edx, %edx
	cmpq	%rcx, %rax
	seta	%dl
	cmpq	%rsp, %rax
	cmoval	%r8d, %edx
	cmpb	$1, %dl
	jne	.LBB670_7
.LBB670_4:                              # %"$8.i"
	movq	8(%rax), %rax
	addq	$8, %rax
	jmp	.LBB670_8
.LBB670_7:                              # %"$15.i"
	movq	8(%rcx), %rax
.LBB670_8:                              # %currFd.exit
	movl	(%rax), %ecx
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	callq	unLock
.LBB670_9:                              # %"$4"
	movq	(%rsi), %rax
	movq	%rax, env+56(%rip)
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB670_10:                             # %"$6.i"
	leaq	.L$40(%rip), %r8
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 pollfd;
	.scl	2;
	.type	32;
	.endef
	.globl	pollfd                          # -- Begin function pollfd
	.p2align	4, 0x90
pollfd:                                 # @pollfd
.seh_proc pollfd
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movl	%ecx, %esi
	movl	($Nfds)(%rip), %ebx
	cmpl	%ecx, %ebx
	jg	.LBB671_4
# %bb.1:                                # %"$2"
	movq	($Poll)(%rip), %rcx
	leal	1(%rsi), %ebp
	movl	%ebp, ($Nfds)(%rip)
	movslq	%ebp, %rdx
	shlq	$3, %rdx
	callq	realloc
	testq	%rax, %rax
	je	.LBB671_5
# %bb.2:                                # %alloc.exit
	movq	%rax, %rdi
	movq	%rax, ($Poll)(%rip)
	.p2align	4, 0x90
.LBB671_3:                              # %"$4"
                                        # =>This Inner Loop Header: Depth=1
	movslq	%ebx, %rbx
	leaq	(%rdi,%rbx,8), %rcx
	callq	pollIgn
	incl	%ebx
	cmpl	%ebx, %ebp
	jne	.LBB671_3
.LBB671_4:                              # %"$3"
	movslq	%esi, %rax
	shlq	$3, %rax
	addq	($Poll)(%rip), %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	retq
.LBB671_5:                              # %"$2.i"
	leaq	.L$3(%rip), %rcx
	xorl	%edx, %edx
	callq	giveup
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 hasData;
	.scl	2;
	.type	32;
	.endef
	.globl	hasData                         # -- Begin function hasData
	.p2align	4, 0x90
hasData:                                # @hasData
# %bb.0:                                # %"$1"
	cmpl	%ecx, ($InFDs)(%rip)
	jle	.LBB672_4
# %bb.1:                                # %"$3"
	movq	($InFiles)(%rip), %rax
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	testq	%rax, %rax
	je	.LBB672_4
# %bb.2:                                # %"$4"
	cmpl	$0, 8(%rax)
	js	.LBB672_4
# %bb.3:                                # %"$6"
	movl	28(%rax), %ecx
	cmpl	24(%rax), %ecx
	setg	%al
                                        # kill: def $al killed $al killed $eax
	retq
.LBB672_4:
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	retq
                                        # -- End function
	.def	 rlGetc;
	.scl	2;
	.type	32;
	.endef
	.globl	rlGetc                          # -- Begin function rlGetc
	.p2align	4, 0x90
rlGetc:                                 # @rlGetc
.seh_proc rlGetc
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movabsq	$9223372036854775807, %r8       # imm = 0x7FFFFFFFFFFFFFFF
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	callq	waitFd
	testq	%rax, %rax
	je	.LBB673_1
# %bb.2:                                # %"$2"
	addq	$40, %rsp
	jmp	stdinByte                       # TAILCALL
.LBB673_1:                              # %"$4"
	movl	$-1, %eax
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 rlAvail;
	.scl	2;
	.type	32;
	.endef
	.globl	rlAvail                         # -- Begin function rlAvail
	.p2align	4, 0x90
rlAvail:                                # @rlAvail
# %bb.0:                                # %"$1"
	movl	$60, %r8d
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	jmp	waitFd                          # TAILCALL
                                        # -- End function
	.def	 getChar;
	.scl	2;
	.type	32;
	.endef
	.globl	getChar                         # -- Begin function getChar
	.p2align	4, 0x90
getChar:                                # @getChar
.seh_proc getChar
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movl	%ecx, %esi
	cmpl	$128, %ecx
	jge	.LBB675_2
# %bb.1:
	movl	%esi, %eax
	jmp	.LBB675_10
.LBB675_2:                              # %"$3"
	movl	$1114112, %eax                  # imm = 0x110000
	cmpl	$255, %esi
	je	.LBB675_10
# %bb.3:                                # %"$5"
	testb	$32, %sil
	jne	.LBB675_5
# %bb.4:                                # %"$7"
	andl	$31, %esi
	jmp	.LBB675_9
.LBB675_5:                              # %"$8"
	testb	$16, %sil
	jne	.LBB675_7
# %bb.6:                                # %"$10"
	andl	$15, %esi
	movl	%esi, %edi
	jmp	.LBB675_8
.LBB675_7:                              # %"$11"
	andl	$7, %esi
	shll	$6, %esi
	callq	*($Get)(%rip)
	movl	%eax, %edi
	andl	$63, %edi
	orl	%esi, %edi
.LBB675_8:                              # %"$12"
	shll	$6, %edi
	callq	*($Get)(%rip)
	movl	%eax, %esi
	andl	$63, %esi
	orl	%edi, %esi
.LBB675_9:                              # %"$9"
	shll	$6, %esi
	callq	*($Get)(%rip)
	andl	$63, %eax
	orl	%esi, %eax
.LBB675_10:                             # %"$2"
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 skipc;
	.scl	2;
	.type	32;
	.endef
	.globl	skipc                           # -- Begin function skipc
	.p2align	4, 0x90
skipc:                                  # @skipc
.seh_proc skipc
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movl	%ecx, %esi
	movl	($Chr)(%rip), %eax
	cmpl	$32, %eax
	jg	.LBB676_4
.LBB676_2:                              # %"$4"
                                        # =>This Inner Loop Header: Depth=1
	callq	*($Get)(%rip)
	testl	%eax, %eax
	js	.LBB676_3
# %bb.1:                                # %"$3"
                                        #   in Loop: Header=BB676_2 Depth=1
	cmpl	$32, %eax
	jle	.LBB676_2
.LBB676_4:                              # %"$5"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB676_5 Depth 2
	cmpl	%esi, %eax
	jne	.LBB676_3
	.p2align	4, 0x90
.LBB676_5:                              # %"$10"
                                        #   Parent Loop BB676_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	callq	*($Get)(%rip)
	cmpl	$10, %eax
	je	.LBB676_7
# %bb.6:                                # %"$11"
                                        #   in Loop: Header=BB676_5 Depth=2
	testl	%eax, %eax
	jns	.LBB676_5
	jmp	.LBB676_3
	.p2align	4, 0x90
.LBB676_7:                              # %"$12"
                                        #   in Loop: Header=BB676_4 Depth=1
	callq	*($Get)(%rip)
	cmpl	$32, %eax
	jle	.LBB676_2
	jmp	.LBB676_4
.LBB676_3:                              # %"$6"
	addq	$32, %rsp
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 comment;
	.scl	2;
	.type	32;
	.endef
	.globl	comment                         # -- Begin function comment
	.p2align	4, 0x90
comment:                                # @comment
.seh_proc comment
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	callq	*($Get)(%rip)
	cmpl	$123, %eax
	jne	.LBB677_1
# %bb.4:                                # %"$5.preheader"
	callq	*($Get)(%rip)
	testl	%eax, %eax
	js	.LBB677_13
# %bb.5:                                # %"$6.preheader"
	xorl	%esi, %esi
	jmp	.LBB677_6
	.p2align	4, 0x90
.LBB677_1:                              # %"$17.preheader"
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$10, %eax
	je	.LBB677_13
# %bb.2:                                # %"$17.preheader"
                                        #   in Loop: Header=BB677_1 Depth=1
	testl	%eax, %eax
	js	.LBB677_13
# %bb.3:                                # %"$20"
                                        #   in Loop: Header=BB677_1 Depth=1
	callq	*($Get)(%rip)
	jmp	.LBB677_1
	.p2align	4, 0x90
.LBB677_8:                              # %"$10"
                                        #   in Loop: Header=BB677_6 Depth=1
	incq	%rsi
.LBB677_12:                             # %"$12"
                                        #   in Loop: Header=BB677_6 Depth=1
	callq	*($Get)(%rip)
	testl	%eax, %eax
	js	.LBB677_13
.LBB677_6:                              # %"$6"
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$35, %eax
	jne	.LBB677_9
# %bb.7:                                # %"$8"
                                        #   in Loop: Header=BB677_6 Depth=1
	callq	*($Get)(%rip)
	cmpl	$123, %eax
	je	.LBB677_8
.LBB677_9:                              # %"$11"
                                        #   in Loop: Header=BB677_6 Depth=1
	cmpl	$125, %eax
	jne	.LBB677_12
# %bb.10:                               # %"$14"
                                        #   in Loop: Header=BB677_6 Depth=1
	callq	*($Get)(%rip)
	cmpl	$35, %eax
	jne	.LBB677_12
# %bb.11:                               # %"$13"
                                        #   in Loop: Header=BB677_6 Depth=1
	decq	%rsi
	jns	.LBB677_12
.LBB677_13:                             # %"$4"
	addq	$32, %rsp
	popq	%rsi
	rex64 jmpq	*($Get)(%rip)           # TAILCALL
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 skip;
	.scl	2;
	.type	32;
	.endef
	.globl	skip                            # -- Begin function skip
	.p2align	4, 0x90
skip:                                   # @skip
.seh_proc skip
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	jmp	.LBB678_1
	.p2align	4, 0x90
.LBB678_20:                             # %comment.exit
                                        #   in Loop: Header=BB678_1 Depth=1
	callq	*($Get)(%rip)
.LBB678_1:                              # %"$1"
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB678_3 Depth 2
                                        #     Child Loop BB678_8 Depth 2
                                        #     Child Loop BB678_13 Depth 2
	movl	($Chr)(%rip), %eax
	testl	%eax, %eax
	js	.LBB678_5
.LBB678_3:                              # %"$5"
                                        #   Parent Loop BB678_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$32, %eax
	jg	.LBB678_6
# %bb.4:                                # %"$6"
                                        #   in Loop: Header=BB678_3 Depth=2
	callq	*($Get)(%rip)
	testl	%eax, %eax
	jns	.LBB678_3
	jmp	.LBB678_5
	.p2align	4, 0x90
.LBB678_6:                              # %"$7"
                                        #   in Loop: Header=BB678_1 Depth=1
	cmpl	$35, %eax
	jne	.LBB678_5
# %bb.7:                                # %"$11"
                                        #   in Loop: Header=BB678_1 Depth=1
	callq	*($Get)(%rip)
	cmpl	$123, %eax
	jne	.LBB678_8
# %bb.11:                               # %"$5.preheader.i"
                                        #   in Loop: Header=BB678_1 Depth=1
	callq	*($Get)(%rip)
	testl	%eax, %eax
	js	.LBB678_20
# %bb.12:                               # %"$6.i.preheader"
                                        #   in Loop: Header=BB678_1 Depth=1
	xorl	%esi, %esi
	jmp	.LBB678_13
	.p2align	4, 0x90
.LBB678_8:                              # %"$17.preheader.i"
                                        #   Parent Loop BB678_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, %eax
	je	.LBB678_20
# %bb.9:                                # %"$17.preheader.i"
                                        #   in Loop: Header=BB678_8 Depth=2
	testl	%eax, %eax
	js	.LBB678_20
# %bb.10:                               # %"$20.i"
                                        #   in Loop: Header=BB678_8 Depth=2
	callq	*($Get)(%rip)
	jmp	.LBB678_8
	.p2align	4, 0x90
.LBB678_15:                             # %"$10.i"
                                        #   in Loop: Header=BB678_13 Depth=2
	incq	%rsi
.LBB678_19:                             # %"$12.i"
                                        #   in Loop: Header=BB678_13 Depth=2
	callq	*($Get)(%rip)
	testl	%eax, %eax
	js	.LBB678_20
.LBB678_13:                             # %"$6.i"
                                        #   Parent Loop BB678_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$35, %eax
	jne	.LBB678_16
# %bb.14:                               # %"$8.i"
                                        #   in Loop: Header=BB678_13 Depth=2
	callq	*($Get)(%rip)
	cmpl	$123, %eax
	je	.LBB678_15
.LBB678_16:                             # %"$11.i"
                                        #   in Loop: Header=BB678_13 Depth=2
	cmpl	$125, %eax
	jne	.LBB678_19
# %bb.17:                               # %"$14.i"
                                        #   in Loop: Header=BB678_13 Depth=2
	callq	*($Get)(%rip)
	cmpl	$35, %eax
	jne	.LBB678_19
# %bb.18:                               # %"$13.i"
                                        #   in Loop: Header=BB678_13 Depth=2
	decq	%rsi
	jns	.LBB678_19
	jmp	.LBB678_20
.LBB678_5:                              # %"$3"
	addq	$32, %rsp
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 read1;
	.scl	2;
	.type	32;
	.endef
	.globl	read1                           # -- Begin function read1
	.p2align	4, 0x90
read1:                                  # @read1
.seh_proc read1
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movl	%ecx, %esi
	movl	($Chr)(%rip), %eax
	testl	%eax, %eax
	je	.LBB679_1
# %bb.2:                                # %"$3"
	cmpl	%esi, %eax
	jne	.LBB679_4
.LBB679_3:                              # %"$6"
	leaq	SymTab+8(%rip), %rax
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB679_1:                              # %"$2"
	callq	*($Get)(%rip)
	movl	($Chr)(%rip), %eax
	cmpl	%esi, %eax
	je	.LBB679_3
.LBB679_4:                              # %"$5"
	movb	$1, %cl
	addq	$32, %rsp
	popq	%rsi
	jmp	read0                           # TAILCALL
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 eol;
	.scl	2;
	.type	32;
	.endef
	.globl	eol                             # -- Begin function eol
	.p2align	4, 0x90
eol:                                    # @eol
.seh_proc eol
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movb	$1, %sil
	testl	%ecx, %ecx
	js	.LBB680_6
# %bb.1:                                # %"$3"
	cmpl	$13, %ecx
	je	.LBB680_4
# %bb.2:                                # %"$3"
	cmpl	$10, %ecx
	je	.LBB680_5
# %bb.3:
	xorl	%esi, %esi
	jmp	.LBB680_6
.LBB680_4:                              # %"$8"
	callq	*($Get)(%rip)
	cmpl	$10, %eax
	jne	.LBB680_6
.LBB680_5:                              # %"$9"
	movl	$0, ($Chr)(%rip)
.LBB680_6:                              # %"$2"
	movl	%esi, %eax
	addq	$32, %rsp
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 put1;
	.scl	2;
	.type	32;
	.endef
	.globl	put1                            # -- Begin function put1
	.p2align	4, 0x90
put1:                                   # @put1
.seh_proc put1
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$64, %rsp
	.seh_stackalloc 64
	.seh_endprologue
	movq	%rcx, %rsi
	movq	SymTab+456(%rip), %rdi
	movq	env(%rip), %rax
	movq	%rdi, 32(%rsp)
	movq	%rax, 40(%rsp)
	movq	SymTab+472(%rip), %rbx
	movq	%rbx, 48(%rsp)
	leaq	32(%rsp), %rax
	movq	%rax, 56(%rsp)
	leaq	48(%rsp), %rax
	movq	%rax, env(%rip)
	movq	16(%rcx), %rax
	movq	%rax, ($Put)(%rip)
	movq	(%rcx), %rax
	movq	%rax, env+72(%rip)
	movq	%rdx, SymTab+456(%rip)
	movq	%r8, SymTab+472(%rip)
	movq	8(%rcx), %rcx
	testb	$14, %cl
	jne	.LBB681_2
# %bb.1:                                # %"$5"
	callq	evList
.LBB681_2:                              # %"$2"
	movq	%rbx, SymTab+472(%rip)
	movq	%rdi, SymTab+456(%rip)
	movq	%rsi, env+72(%rip)
	leaq	putOut(%rip), %rax
	movq	%rax, ($Put)(%rip)
	movq	40(%rsp), %rax
	movq	%rax, env(%rip)
	addq	$64, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 newline;
	.scl	2;
	.type	32;
	.endef
	.globl	newline                         # -- Begin function newline
	.p2align	4, 0x90
newline:                                # @newline
# %bb.0:                                # %"$1"
	movb	$10, %cl
	rex64 jmpq	*($Put)(%rip)           # TAILCALL
                                        # -- End function
	.def	 space;
	.scl	2;
	.type	32;
	.endef
	.globl	space                           # -- Begin function space
	.p2align	4, 0x90
space:                                  # @space
# %bb.0:                                # %"$1"
	movb	$32, %cl
	rex64 jmpq	*($Put)(%rip)           # TAILCALL
                                        # -- End function
	.def	 outNum;
	.scl	2;
	.type	32;
	.endef
	.globl	outNum                          # -- Begin function outNum
	.p2align	4, 0x90
outNum:                                 # @outNum
.seh_proc outNum
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	testb	$8, %sil
	je	.LBB684_2
# %bb.1:                                # %"$2"
	movb	$45, %cl
	callq	*($Put)(%rip)
.LBB684_2:                              # %"$3"
	shrq	$4, %rsi
	movq	%rsi, %rcx
	addq	$32, %rsp
	popq	%rsi
	jmp	outWord                         # TAILCALL
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 prExt;
	.scl	2;
	.type	32;
	.endef
	.globl	prExt                           # -- Begin function prExt
	.p2align	4, 0x90
prExt:                                  # @prExt
.seh_proc prExt
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movl	%esi, %eax
	shrl	$24, %eax
	shrq	$36, %rcx
	andl	$65280, %ecx                    # imm = 0xFF00
	orl	%eax, %ecx
	je	.LBB685_2
# %bb.1:                                # %"$2"
                                        # kill: def $ecx killed $ecx killed $rcx
	callq	outAo
.LBB685_2:                              # %"$3"
	movl	%esi, %eax
	shrl	$4, %eax
	andl	$1048575, %eax                  # imm = 0xFFFFF
	movq	%rsi, %rdx
	shrq	$12, %rdx
	andl	$-1048576, %edx                 # imm = 0xFFF00000
	orq	%rax, %rdx
	shrq	$20, %rsi
	movabsq	$4393751543808, %rcx            # imm = 0x3FF00000000
	andq	%rsi, %rcx
	orq	%rdx, %rcx
	addq	$32, %rsp
	popq	%rsi
	jmp	outOct                          # TAILCALL
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 outString;
	.scl	2;
	.type	32;
	.endef
	.globl	outString                       # -- Begin function outString
	.p2align	4, 0x90
outString:                              # @outString
.seh_proc outString
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movb	(%rcx), %cl
	testb	%cl, %cl
	je	.LBB686_3
# %bb.1:                                # %"$3.preheader"
	incq	%rsi
	.p2align	4, 0x90
.LBB686_2:                              # %"$3"
                                        # =>This Inner Loop Header: Depth=1
	callq	*($Put)(%rip)
	movzbl	(%rsi), %ecx
	incq	%rsi
	testb	%cl, %cl
	jne	.LBB686_2
.LBB686_3:                              # %"$4"
	addq	$32, %rsp
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 prName;
	.scl	2;
	.type	32;
	.endef
	.globl	prName                          # -- Begin function prName
	.p2align	4, 0x90
prName:                                 # @prName
.seh_proc prName
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rcx, %rsi
	xorl	%ecx, %ecx
	testq	%rcx, %rcx
	jne	.LBB687_6
	.p2align	4, 0x90
.LBB687_2:                              # %"$2.i"
	cmpq	$2, %rsi
	je	.LBB687_8
# %bb.3:                                # %"$5.i"
	testb	$2, %sil
	jne	.LBB687_4
# %bb.5:                                # %"$7.i"
	movq	-4(%rsi), %rcx
	movq	4(%rsi), %rsi
	.p2align	4, 0x90
.LBB687_6:                              # %symByte.exit
	testb	%cl, %cl
	je	.LBB687_8
.LBB687_7:                              # %"$3"
	movq	%rcx, %rdi
	shrq	$8, %rdi
                                        # kill: def $cl killed $cl killed $rcx
	callq	*($Put)(%rip)
	movq	%rdi, %rcx
	testq	%rcx, %rcx
	jne	.LBB687_6
	jmp	.LBB687_2
	.p2align	4, 0x90
.LBB687_4:                              # %"$8.i"
	movq	%rsi, %rcx
	shrq	$4, %rcx
	movl	$2, %esi
	testb	%cl, %cl
	jne	.LBB687_7
.LBB687_8:                              # %"$4"
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 prSym;
	.scl	2;
	.type	32;
	.endef
	.globl	prSym                           # -- Begin function prSym
	.p2align	4, 0x90
prSym:                                  # @prSym
.seh_proc prSym
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	-8(%rcx), %rsi
	testb	$6, %sil
	jne	.LBB688_3
	.p2align	4, 0x90
.LBB688_1:                              # %"$3"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rsi), %rsi
	testb	$6, %sil
	je	.LBB688_1
.LBB688_3:                              # %"$2.i.preheader"
	xorl	%ecx, %ecx
	testq	%rcx, %rcx
	jne	.LBB688_9
	.p2align	4, 0x90
.LBB688_5:                              # %"$2.i.i"
	cmpq	$2, %rsi
	je	.LBB688_11
# %bb.6:                                # %"$5.i.i"
	testb	$2, %sil
	jne	.LBB688_7
# %bb.8:                                # %"$7.i.i"
	movq	-4(%rsi), %rcx
	movq	4(%rsi), %rsi
	.p2align	4, 0x90
.LBB688_9:                              # %symByte.exit.i
	testb	%cl, %cl
	je	.LBB688_11
.LBB688_10:                             # %"$3.i"
	movq	%rcx, %rdi
	shrq	$8, %rdi
                                        # kill: def $cl killed $cl killed $rcx
	callq	*($Put)(%rip)
	movq	%rdi, %rcx
	testq	%rcx, %rcx
	jne	.LBB688_9
	jmp	.LBB688_5
	.p2align	4, 0x90
.LBB688_7:                              # %"$8.i.i"
	movq	%rsi, %rcx
	shrq	$4, %rcx
	movl	$2, %esi
	testb	%cl, %cl
	jne	.LBB688_10
.LBB688_11:                             # %prName.exit
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 printSym;
	.scl	2;
	.type	32;
	.endef
	.globl	printSym                        # -- Begin function printSym
	.p2align	4, 0x90
printSym:                               # @printSym
# %bb.0:                                # %"$1"
	movq	-8(%rcx), %rcx
	testb	$6, %cl
	jne	.LBB689_3
	.p2align	4, 0x90
.LBB689_1:                              # %"$3"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rcx
	testb	$6, %cl
	je	.LBB689_1
.LBB689_3:                              # %"$4"
	jmp	printName                       # TAILCALL
                                        # -- End function
	.def	 begString;
	.scl	2;
	.type	32;
	.endef
	.globl	begString                       # -- Begin function begString
	.p2align	4, 0x90
begString:                              # @begString
# %bb.0:                                # %"$1"
	movq	($StrP)(%rip), %rax
	movq	%rax, 40(%rcx)
	movq	%rcx, ($StrP)(%rip)
	leaq	16(%rcx), %rax
	movq	env(%rip), %rdx
	movq	%rdx, 24(%rcx)
	movq	%rax, env(%rip)
	movq	($Put)(%rip), %rax
	movq	%rax, 32(%rcx)
	leaq	putString(%rip), %rax
	movq	%rax, ($Put)(%rip)
	retq
                                        # -- End function
	.def	 tglString;
	.scl	2;
	.type	32;
	.endef
	.globl	tglString                       # -- Begin function tglString
	.p2align	4, 0x90
tglString:                              # @tglString
# %bb.0:                                # %"$1"
	movq	32(%rcx), %rax
	movq	($Put)(%rip), %rdx
	movq	%rdx, 32(%rcx)
	movq	%rax, ($Put)(%rip)
	retq
                                        # -- End function
	.def	 endString;
	.scl	2;
	.type	32;
	.endef
	.globl	endString                       # -- Begin function endString
	.p2align	4, 0x90
endString:                              # @endString
.seh_proc endString
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	($StrP)(%rip), %rsi
	movq	32(%rsi), %rax
	movq	%rax, ($Put)(%rip)
	movq	40(%rsi), %rax
	movq	%rax, ($StrP)(%rip)
	movq	16(%rsi), %rcx
	cmpq	$2, %rcx
	jne	.LBB692_2
# %bb.1:
	leaq	SymTab+8(%rip), %rax
	jmp	.LBB692_3
.LBB692_2:                              # %"$3.i"
	xorl	%edx, %edx
	callq	consSym
.LBB692_3:                              # %consStr.exit
	movq	24(%rsi), %rcx
	movq	%rcx, env(%rip)
	addq	$32, %rsp
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 loadAll;
	.scl	2;
	.type	32;
	.endef
	.globl	loadAll                         # -- Begin function loadAll
	.p2align	4, 0x90
loadAll:                                # @loadAll
.seh_proc loadAll
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	($AV)(%rip), %rdx
	movq	(%rdx), %rcx
	leaq	SymTab+8(%rip), %rax
	jmp	.LBB693_1
	.p2align	4, 0x90
.LBB693_4:                              # %"$7"
                                        #   in Loop: Header=BB693_1 Depth=1
	addq	$8, %rdx
	movq	%rdx, ($AV)(%rip)
	callq	mkStr
	movq	%rsi, %rcx
	xorl	%edx, %edx
	movq	%rax, %r8
	callq	repl
	movq	($AV)(%rip), %rdx
	movq	(%rdx), %rcx
.LBB693_1:                              # %"$1"
                                        # =>This Inner Loop Header: Depth=1
	testq	%rcx, %rcx
	je	.LBB693_5
# %bb.2:                                # %"$4"
                                        #   in Loop: Header=BB693_1 Depth=1
	cmpb	$45, (%rcx)
	jne	.LBB693_4
# %bb.3:                                # %"$6"
                                        #   in Loop: Header=BB693_1 Depth=1
	cmpb	$0, 1(%rcx)
	jne	.LBB693_4
.LBB693_5:                              # %"$8"
	addq	$32, %rsp
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 getAdr;
	.scl	2;
	.type	32;
	.endef
	.globl	getAdr                          # -- Begin function getAdr
	.p2align	4, 0x90
getAdr:                                 # @getAdr
# %bb.0:                                # %"$1"
	movzwl	4(%rcx), %eax
	movd	%eax, %xmm0
	pxor	%xmm1, %xmm1
	punpcklbw	%xmm1, %xmm0            # xmm0 = xmm0[0],xmm1[0],xmm0[1],xmm1[1],xmm0[2],xmm1[2],xmm0[3],xmm1[3],xmm0[4],xmm1[4],xmm0[5],xmm1[5],xmm0[6],xmm1[6],xmm0[7],xmm1[7]
	punpcklwd	%xmm1, %xmm0            # xmm0 = xmm0[0],xmm1[0],xmm0[1],xmm1[1],xmm0[2],xmm1[2],xmm0[3],xmm1[3]
	punpckldq	%xmm1, %xmm0            # xmm0 = xmm0[0],xmm1[0],xmm0[1],xmm1[1]
	movdqa	%xmm0, %xmm2
	psllq	$8, %xmm2
	psllq	$16, %xmm0
	pshufd	$78, %xmm0, %xmm0               # xmm0 = xmm0[2,3,0,1]
	por	%xmm2, %xmm0
	movq	%xmm0, %rax
	movzbl	3(%rcx), %edx
	orq	%rax, %rdx
	movzwl	1(%rcx), %eax
	movd	%eax, %xmm0
	punpcklbw	%xmm1, %xmm0            # xmm0 = xmm0[0],xmm1[0],xmm0[1],xmm1[1],xmm0[2],xmm1[2],xmm0[3],xmm1[3],xmm0[4],xmm1[4],xmm0[5],xmm1[5],xmm0[6],xmm1[6],xmm0[7],xmm1[7]
	punpcklwd	%xmm1, %xmm0            # xmm0 = xmm0[0],xmm1[0],xmm0[1],xmm1[1],xmm0[2],xmm1[2],xmm0[3],xmm1[3]
	punpckldq	%xmm1, %xmm0            # xmm0 = xmm0[0],xmm1[0],xmm0[1],xmm1[1]
	shlq	$24, %rdx
	movdqa	%xmm0, %xmm1
	psllq	$8, %xmm1
	psllq	$16, %xmm0
	pshufd	$78, %xmm0, %xmm0               # xmm0 = xmm0[2,3,0,1]
	por	%xmm1, %xmm0
	movq	%xmm0, %r8
	movzbl	(%rcx), %eax
	orq	%r8, %rax
	orq	%rdx, %rax
	retq
                                        # -- End function
	.def	 setAdr;
	.scl	2;
	.type	32;
	.endef
	.globl	setAdr                          # -- Begin function setAdr
	.p2align	4, 0x90
setAdr:                                 # @setAdr
# %bb.0:                                # %"$1"
	movb	%cl, (%rdx)
	movb	%ch, 1(%rdx)
	movq	%rcx, %rax
	shrq	$16, %rax
	movb	%al, 2(%rdx)
	movq	%rcx, %rax
	shrq	$24, %rax
	movb	%al, 3(%rdx)
	movq	%rcx, %rax
	shrq	$32, %rax
	movb	%al, 4(%rdx)
	shrq	$40, %rcx
	movb	%cl, 5(%rdx)
	retq
                                        # -- End function
	.def	 dbfBuf;
	.scl	2;
	.type	32;
	.endef
	.globl	dbfBuf                          # -- Begin function dbfBuf
	.p2align	4, 0x90
dbfBuf:                                 # @dbfBuf
# %bb.0:                                # %"$1"
	movzwl	(%rcx), %eax
	cmpl	%eax, ($DBs)(%rip)
	jle	.LBB696_1
# %bb.2:                                # %"$2"
	imulq	$42, %rax, %rax
	addq	($DbFiles)(%rip), %rax
	movq	%rax, ($DbFile)(%rip)
	retq
.LBB696_1:
	xorl	%eax, %eax
	retq
                                        # -- End function
	.def	 rdLockDb;
	.scl	2;
	.type	32;
	.endef
	.globl	rdLockDb                        # -- Begin function rdLockDb
	.p2align	4, 0x90
rdLockDb:                               # @rdLockDb
.seh_proc rdLockDb
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, SymTab+424(%rip)
	jne	.LBB697_1
.LBB697_5:                              # %"$3"
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB697_1:                              # %"$2"
	movq	($DbFiles)(%rip), %rax
	movl	(%rax), %esi
	.p2align	4, 0x90
.LBB697_2:                              # %"$2.i"
                                        # =>This Inner Loop Header: Depth=1
	movl	$1, %r8d
	movl	%esi, %ecx
	xorl	%edx, %edx
	movb	$1, %r9b
	callq	rdLock
	testl	%eax, %eax
	jns	.LBB697_5
# %bb.3:                                # %"$3.i"
                                        #   in Loop: Header=BB697_2 Depth=1
	callq	gErrno
	cmpl	$2, %eax
	je	.LBB697_2
# %bb.4:                                # %"$5.i"
	callq	lockErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 wrLockDb;
	.scl	2;
	.type	32;
	.endef
	.globl	wrLockDb                        # -- Begin function wrLockDb
	.p2align	4, 0x90
wrLockDb:                               # @wrLockDb
.seh_proc wrLockDb
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, SymTab+424(%rip)
	jne	.LBB698_1
.LBB698_5:                              # %"$3"
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB698_1:                              # %"$2"
	movq	($DbFiles)(%rip), %rax
	movl	(%rax), %esi
	.p2align	4, 0x90
.LBB698_2:                              # %"$2.i"
                                        # =>This Inner Loop Header: Depth=1
	movl	$1, %r8d
	movl	%esi, %ecx
	xorl	%edx, %edx
	movb	$1, %r9b
	callq	wrLock
	testl	%eax, %eax
	jns	.LBB698_5
# %bb.3:                                # %"$3.i"
                                        #   in Loop: Header=BB698_2 Depth=1
	callq	gErrno
	cmpl	$2, %eax
	je	.LBB698_2
# %bb.4:                                # %"$5.i"
	callq	lockErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 unLockDb;
	.scl	2;
	.type	32;
	.endef
	.globl	unLockDb                        # -- Begin function unLockDb
	.p2align	4, 0x90
unLockDb:                               # @unLockDb
.seh_proc unLockDb
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	leaq	SymTab+280(%rip), %rax
	cmpq	%rax, SymTab+424(%rip)
	jne	.LBB699_1
# %bb.9:                                # %"$3"
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
.LBB699_1:                              # %"$2"
	movq	%rcx, %rsi
	testq	%rcx, %rcx
	jne	.LBB699_8
# %bb.2:                                # %"$4"
	movl	($DBs)(%rip), %edi
	decl	%edi
	je	.LBB699_7
# %bb.3:                                # %"$7.preheader"
	movq	($DbFiles)(%rip), %rbx
	addq	$82, %rbx
	jmp	.LBB699_4
	.p2align	4, 0x90
.LBB699_6:                              # %"$10"
                                        #   in Loop: Header=BB699_4 Depth=1
	addq	$42, %rbx
	decl	%edi
	je	.LBB699_7
.LBB699_4:                              # %"$7"
                                        # =>This Inner Loop Header: Depth=1
	cmpb	$1, (%rbx)
	jne	.LBB699_6
# %bb.5:                                # %"$9"
                                        #   in Loop: Header=BB699_4 Depth=1
	movl	-40(%rbx), %ecx
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	callq	unLock
	movb	$0, (%rbx)
	jmp	.LBB699_6
.LBB699_7:                              # %"$8"
	movq	$2, SymTab+424(%rip)
.LBB699_8:                              # %"$5"
	movq	($DbFiles)(%rip), %rax
	movl	(%rax), %ecx
	xorl	%edx, %edx
	movq	%rsi, %r8
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	jmp	unLock                          # TAILCALL
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 lockJnl;
	.scl	2;
	.type	32;
	.endef
	.globl	lockJnl                         # -- Begin function lockJnl
	.p2align	4, 0x90
lockJnl:                                # @lockJnl
.seh_proc lockJnl
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	($DbJnl)(%rip), %rcx
	callq	fileno
	movl	%eax, %esi
	.p2align	4, 0x90
.LBB700_1:                              # %"$2.i"
                                        # =>This Inner Loop Header: Depth=1
	movl	%esi, %ecx
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	movb	$1, %r9b
	callq	wrLock
	testl	%eax, %eax
	jns	.LBB700_4
# %bb.2:                                # %"$3.i"
                                        #   in Loop: Header=BB700_1 Depth=1
	callq	gErrno
	cmpl	$2, %eax
	je	.LBB700_1
# %bb.3:                                # %"$5.i"
	callq	lockErr
.LBB700_4:                              # %wrLockWait.exit
	nop
	addq	$32, %rsp
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 unLockJnl;
	.scl	2;
	.type	32;
	.endef
	.globl	unLockJnl                       # -- Begin function unLockJnl
	.p2align	4, 0x90
unLockJnl:                              # @unLockJnl
.seh_proc unLockJnl
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	($DbJnl)(%rip), %rsi
	movq	%rsi, %rcx
	callq	fflush
	movq	%rsi, %rcx
	callq	fileno
	movl	%eax, %ecx
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	addq	$32, %rsp
	popq	%rsi
	jmp	unLock                          # TAILCALL
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 blkPeek;
	.scl	2;
	.type	32;
	.endef
	.globl	blkPeek                         # -- Begin function blkPeek
	.p2align	4, 0x90
blkPeek:                                # @blkPeek
.seh_proc blkPeek
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %r9
	movslq	%r8d, %rsi
	movq	($DbFile)(%rip), %rax
	movl	(%rax), %ecx
	movq	%rsi, %r8
	callq	pread
	cmpq	%rsi, %rax
	jne	.LBB702_2
# %bb.1:                                # %"$3"
	addq	$32, %rsp
	popq	%rsi
	retq
.LBB702_2:                              # %"$2"
	callq	dbRdErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 rdBlock;
	.scl	2;
	.type	32;
	.endef
	.globl	rdBlock                         # -- Begin function rdBlock
	.p2align	4, 0x90
rdBlock:                                # @rdBlock
.seh_proc rdBlock
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %r9
	movq	($DbFile)(%rip), %rbx
	movq	($DbBlock)(%rip), %rsi
	movq	%rcx, ($BlkIndex)(%rip)
	movb	8(%rbx), %cl
	shlq	%cl, %r9
	movslq	12(%rbx), %rdi
	movl	(%rbx), %ecx
	movq	%rsi, %rdx
	movq	%rdi, %r8
	callq	pread
	cmpq	%rdi, %rax
	jne	.LBB703_2
# %bb.1:                                # %blkPeek.exit
	movzbl	5(%rsi), %eax
	movzbl	4(%rsi), %ecx
	shlq	$16, %rax
	shlq	$8, %rcx
	orq	%rax, %rcx
	movzbl	3(%rsi), %eax
	orq	%rcx, %rax
	movzbl	2(%rsi), %ecx
	movzbl	1(%rsi), %edx
	shlq	$24, %rax
	shlq	$16, %rcx
	shlq	$8, %rdx
	orq	%rcx, %rdx
	orq	%rax, %rdx
	movzbl	(%rsi), %eax
	andl	$-64, %eax
	orq	%rdx, %rax
	movq	%rax, ($BlkLink)(%rip)
	movslq	12(%rbx), %rax
	addq	%rsi, %rax
	movq	%rax, ($BlkEnd)(%rip)
	leaq	6(%rsi), %rax
	movq	%rax, ($BlkPtr)(%rip)
	movq	%rsi, %rax
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
.LBB703_2:                              # %"$2.i"
	callq	dbRdErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 wrBlock;
	.scl	2;
	.type	32;
	.endef
	.globl	wrBlock                         # -- Begin function wrBlock
	.p2align	4, 0x90
wrBlock:                                # @wrBlock
# %bb.0:                                # %"$1"
	movq	($DbFile)(%rip), %r8
	movq	($BlkIndex)(%rip), %rax
	movb	8(%r8), %cl
	shlq	%cl, %rax
	movq	($DbBlock)(%rip), %rdx
	movl	12(%r8), %r8d
	movq	%rax, %rcx
	jmp	blkPoke                         # TAILCALL
                                        # -- End function
	.def	 ignLog;
	.scl	2;
	.type	32;
	.endef
	.globl	ignLog                          # -- Begin function ignLog
	.p2align	4, 0x90
ignLog:                                 # @ignLog
# %bb.0:                                # %"$1"
	leaq	.L$57(%rip), %rcx
	xorl	%edx, %edx
	jmp	stderrMsg                       # TAILCALL
                                        # -- End function
	.def	 fsyncDB;
	.scl	2;
	.type	32;
	.endef
	.globl	fsyncDB                         # -- Begin function fsyncDB
	.p2align	4, 0x90
fsyncDB:                                # @fsyncDB
.seh_proc fsyncDB
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	movq	($DbFiles)(%rip), %rdi
	movl	($DBs)(%rip), %ebx
	jmp	.LBB706_1
	.p2align	4, 0x90
.LBB706_3:                              # %"$6"
                                        #   in Loop: Header=BB706_1 Depth=1
	addq	$42, %rdi
	decl	%ebx
	je	.LBB706_4
.LBB706_1:                              # %"$2"
                                        # =>This Inner Loop Header: Depth=1
	cmpb	$1, 41(%rdi)
	jne	.LBB706_3
# %bb.2:                                # %"$4"
                                        #   in Loop: Header=BB706_1 Depth=1
	movl	(%rdi), %ecx
	callq	fsync
	testl	%eax, %eax
	jns	.LBB706_3
# %bb.5:                                # %"$5"
	movq	%rsi, %rcx
	callq	dbSyncErr
.LBB706_4:                              # %"$8"
	nop
	addq	$32, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 truncLog;
	.scl	2;
	.type	32;
	.endef
	.globl	truncLog                        # -- Begin function truncLog
	.p2align	4, 0x90
truncLog:                               # @truncLog
.seh_proc truncLog
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rcx, %rsi
	movq	($DbLog)(%rip), %rdi
	movq	%rdi, %rcx
	callq	fseek0
	testb	$1, %al
	je	.LBB707_3
# %bb.1:                                # %"$3"
	movq	%rdi, %rcx
	callq	fileno
	movl	%eax, %ecx
	callq	truncate0
	testb	$1, %al
	je	.LBB707_3
# %bb.2:                                # %"$5"
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
.LBB707_3:                              # %"$4"
	callq	strErrno
	leaq	.L$59(%rip), %r8
	movq	%rsi, %rcx
	xorl	%edx, %edx
	movq	%rax, %r9
	callq	err
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 dbFetch;
	.scl	2;
	.type	32;
	.endef
	.globl	dbFetch                         # -- Begin function dbFetch
	.p2align	4, 0x90
dbFetch:                                # @dbFetch
# %bb.0:                                # %"$1"
	movq	-8(%rdx), %rax
	testb	$6, %al
	je	.LBB708_3
# %bb.1:                                # %"$3"
	addq	%rax, %rax
	jb	.LBB708_3
# %bb.2:                                # %"$2"
	addq	%rax, %rax
	jae	.LBB708_4
.LBB708_3:                              # %"$6"
	retq
.LBB708_4:                              # %"$5"
	movl	$1, %r8d
	shldq	$62, %rax, %r8
	movq	%r8, -8(%rdx)
	jmp	db                              # TAILCALL
                                        # -- End function
	.def	 dbTouch;
	.scl	2;
	.type	32;
	.endef
	.globl	dbTouch                         # -- Begin function dbTouch
	.p2align	4, 0x90
dbTouch:                                # @dbTouch
# %bb.0:                                # %"$1"
	movq	-8(%rdx), %rax
	testb	$6, %al
	je	.LBB709_2
# %bb.1:
	leaq	-8(%rdx), %r9
	addq	%rax, %rax
	jae	.LBB709_6
	jmp	.LBB709_7
.LBB709_2:                              # %"$2"
	andq	$-9, %rax
	.p2align	4, 0x90
.LBB709_3:                              # %"$4"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %r9
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB709_3
# %bb.4:
	addq	$8, %r9
	addq	%rax, %rax
	jb	.LBB709_7
.LBB709_6:                              # %"$7"
	leaq	(%rax,%rax), %r10
	movl	$2, %r8d
	shldq	$62, %r10, %r8
	addq	%rax, %rax
	movq	%r8, (%r9)
	jae	.LBB709_8
.LBB709_7:                              # %"$8"
	retq
.LBB709_8:                              # %"$9"
	jmp	db                              # TAILCALL
                                        # -- End function
	.def	 dbZap;
	.scl	2;
	.type	32;
	.endef
	.globl	dbZap                           # -- Begin function dbZap
	.p2align	4, 0x90
dbZap:                                  # @dbZap
# %bb.0:                                # %"$1"
	movq	-8(%rcx), %rax
	testb	$6, %al
	jne	.LBB710_4
# %bb.1:                                # %"$2"
	andq	$-9, %rax
	.p2align	4, 0x90
.LBB710_2:                              # %"$4"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB710_2
# %bb.3:                                # %"$6"
	orq	$8, %rax
.LBB710_4:                              # %"$3"
	shlq	$2, %rax
	movl	$3, %edx
	shldq	$62, %rax, %rdx
	movq	%rdx, -8(%rcx)
	leaq	SymTab+8(%rip), %rax
	movq	%rax, (%rcx)
	retq
                                        # -- End function
	.def	 tabComplete;
	.scl	2;
	.type	32;
	.endef
	.globl	tabComplete                     # -- Begin function tabComplete
	.p2align	4, 0x90
tabComplete:                            # @tabComplete
.seh_proc tabComplete
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	pushq	%rax
	.seh_stackalloc 8
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	SymTab+840(%rip), %rdx
	leaq	SymTab+8(%rip), %r14
	cmpq	%r14, %rdx
	jne	.LBB711_2
# %bb.1:
	xorl	%eax, %eax
	jmp	.LBB711_22
.LBB711_2:                              # %"$3"
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r15
	movq	%r15, %rdi
	movq	%r15, %rax
	orq	$8, %rax
	movq	%r14, (%rax)
	movq	$2, 16(%r15)
	movl	$48, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rsi, %rax
	orq	$8, %rax
	movq	%r15, (%rax)
	movq	$2, 16(%rsi)
	movq	%rdx, 24(%rsi)
	movq	%rsi, %rbx
	addq	$24, %rbx
	testq	%rcx, %rcx
	movq	%r14, %rax
	je	.LBB711_6
# %bb.3:                                # %"$6"
	cmpb	$0, (%rcx)
	je	.LBB711_4
# %bb.5:                                # %"$8"
	subq	$32, %rsp
	callq	mkStr
	addq	$32, %rsp
	jmp	.LBB711_6
.LBB711_4:
	leaq	SymTab+280(%rip), %rax
.LBB711_6:                              # %"$5"
	addq	$24, %r15
	movq	%rax, 24(%rdi)
	movq	env(%rip), %rax
	movq	%rax, 32(%rdi)
	movq	%r15, (%rdi)
	movq	%r15, 32(%rsi)
	movq	%rbx, env(%rip)
	movq	%rbx, (%rsi)
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	evList
	addq	$32, %rsp
	cmpq	%r14, %rax
	jne	.LBB711_8
# %bb.7:
	xorl	%eax, %eax
	jmp	.LBB711_21
.LBB711_8:                              # %"$11"
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	xSym
	addq	$32, %rsp
	movq	-8(%rax), %rdi
	testb	$6, %dil
	jne	.LBB711_11
	.p2align	4, 0x90
.LBB711_9:                              # %"$14"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rdi), %rdi
	testb	$6, %dil
	je	.LBB711_9
.LBB711_11:                             # %"$15"
	movl	$1, %eax
	testb	$4, %dil
	movq	%rdi, %rcx
	je	.LBB711_14
# %bb.12:                               # %"$3.i.preheader"
	movl	$1, %eax
	movq	%rdi, %rcx
	.p2align	4, 0x90
.LBB711_13:                             # %"$3.i"
                                        # =>This Inner Loop Header: Depth=1
	addq	$8, %rax
	movq	4(%rcx), %rcx
	testb	$4, %cl
	jne	.LBB711_13
.LBB711_14:                             # %"$4.i"
	shrq	$4, %rcx
	je	.LBB711_16
	.p2align	4, 0x90
.LBB711_15:                             # %"$6.i"
                                        # =>This Inner Loop Header: Depth=1
	incq	%rax
	shrq	$8, %rcx
	jne	.LBB711_15
.LBB711_16:                             # %bufSize.exit
	addq	$15, %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rcx
	xorl	%edx, %edx
	movq	%rcx, %rax
	testq	%rdx, %rdx
	jne	.LBB711_26
	.p2align	4, 0x90
.LBB711_18:                             # %"$2.i.i"
	cmpq	$2, %rdi
	je	.LBB711_19
# %bb.23:                               # %"$5.i.i"
	testb	$2, %dil
	jne	.LBB711_24
# %bb.25:                               # %"$7.i.i"
	movq	-4(%rdi), %rdx
	movq	4(%rdi), %rdi
	jmp	.LBB711_26
	.p2align	4, 0x90
.LBB711_24:                             # %"$8.i.i"
	movq	%rdi, %rdx
	shrq	$4, %rdx
	movl	$2, %edi
	.p2align	4, 0x90
.LBB711_26:                             # %symByte.exit.i
                                        # =>This Inner Loop Header: Depth=1
	movb	%dl, (%rax)
	testb	%dl, %dl
	je	.LBB711_20
# %bb.27:                               # %"$3.i7"
                                        #   in Loop: Header=BB711_26 Depth=1
	shrq	$8, %rdx
	incq	%rax
	testq	%rdx, %rdx
	jne	.LBB711_26
	jmp	.LBB711_18
.LBB711_19:                             # %symByte.exit.thread.i
	movb	$0, (%rax)
.LBB711_20:                             # %bufString.exit
	subq	$32, %rsp
	callq	strdup
	addq	$32, %rsp
.LBB711_21:                             # %"$12"
	movq	8(%r15), %rcx
	movq	%rcx, env(%rip)
.LBB711_22:                             # %"$4"
	leaq	8(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 redefine;
	.scl	2;
	.type	32;
	.endef
	.globl	redefine                        # -- Begin function redefine
	.p2align	4, 0x90
redefine:                               # @redefine
.seh_proc redefine
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rdx, %rsi
	testb	$6, %sil
	jne	.LBB712_8
# %bb.1:                                # %"$3"
	movq	%r8, %rdi
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rsi
	jb	.LBB712_3
# %bb.2:                                # %"$3"
	leaq	SymTab+280(%rip), %rdx
	cmpq	%rdx, %rsi
	jbe	.LBB712_9
.LBB712_3:                              # %"$7"
	movq	(%rsi), %rcx
	cmpq	%rax, %rcx
	je	.LBB712_7
# %bb.4:                                # %"$7"
	cmpq	%rsi, %rcx
	je	.LBB712_7
# %bb.5:                                # %"$10"
	movq	%rdi, %rdx
	callq	equal
	testb	$1, %al
	jne	.LBB712_7
# %bb.6:                                # %"$11"
	movq	%rsi, %rcx
	xorl	%edx, %edx
	callq	redefMsg
.LBB712_7:                              # %"$12"
	movq	%rdi, (%rsi)
	movq	%rsi, %rcx
	xorl	%edx, %edx
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	jmp	putSrc                          # TAILCALL
.LBB712_8:                              # %"$2"
	movq	%rsi, %rdx
	callq	varErr
.LBB712_9:                              # %"$6"
	movq	%rsi, %rdx
	callq	protErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 saveCoIO;
	.scl	2;
	.type	32;
	.endef
	.globl	saveCoIO                        # -- Begin function saveCoIO
	.p2align	4, 0x90
saveCoIO:                               # @saveCoIO
# %bb.0:                                # %"$1"
	movq	env+40(%rip), %rax
	movq	($Put)(%rip), %rcx
	movq	%rcx, 16(%rax)
	movq	env+32(%rip), %rax
	movq	($Get)(%rip), %rcx
	movq	%rcx, 16(%rax)
	movq	8(%rax), %rax
	movl	($Chr)(%rip), %ecx
	movl	%ecx, 12(%rax)
	retq
                                        # -- End function
	.def	 saveCoEnv;
	.scl	2;
	.type	32;
	.endef
	.globl	saveCoEnv                       # -- Begin function saveCoEnv
	.p2align	4, 0x90
saveCoEnv:                              # @saveCoEnv
# %bb.0:                                # %"$1"
	pushq	%rsi
	subq	$32, %rsp
	movq	%rcx, %rsi
	movq	SymTab+440(%rip), %rax
	movq	%rax, 48(%rcx)
	addq	$96, %rcx
	leaq	env(%rip), %rdx
	movl	$144, %r8d
	callq	memcpy
	movq	gcData(%rip), %rax
	movq	%rax, 240(%rsi)
	movq	gcData+8(%rip), %rax
	movq	%rax, 248(%rsi)
	movq	gcData+16(%rip), %rax
	movq	%rax, 256(%rsi)
	movq	SymTab+112(%rip), %rax
	movq	%rax, 264(%rsi)
	movq	SymTab+120(%rip), %rax
	movq	%rax, 272(%rsi)
	addq	$32, %rsp
	popq	%rsi
	retq
                                        # -- End function
	.def	 loadCoEnv;
	.scl	2;
	.type	32;
	.endef
	.globl	loadCoEnv                       # -- Begin function loadCoEnv
	.p2align	4, 0x90
loadCoEnv:                              # @loadCoEnv
# %bb.0:                                # %"$1"
	pushq	%rsi
	subq	$32, %rsp
	movq	%rcx, %rsi
	movq	%rcx, ($Current)(%rip)
	movl	$4096, %eax                     # imm = 0x1000
	addq	40(%rcx), %rax
	movq	%rax, ($StkLimit)(%rip)
	leaq	96(%rcx), %rdx
	leaq	env(%rip), %rcx
	movl	$144, %r8d
	callq	memcpy
	movq	240(%rsi), %rax
	movq	%rax, gcData(%rip)
	movq	248(%rsi), %rax
	movq	%rax, gcData+8(%rip)
	movq	256(%rsi), %rax
	movq	%rax, gcData+16(%rip)
	movq	264(%rsi), %rax
	movq	%rax, SymTab+112(%rip)
	movq	272(%rsi), %rax
	movq	%rax, SymTab+120(%rip)
	movq	env+32(%rip), %rax
	movq	8(%rax), %rcx
	movq	%rcx, ($InFile)(%rip)
	movl	12(%rcx), %ecx
	movl	%ecx, ($Chr)(%rip)
	movq	16(%rax), %rax
	movq	%rax, ($Get)(%rip)
	movq	env+40(%rip), %rax
	movq	8(%rax), %rcx
	movq	%rcx, ($OutFile)(%rip)
	movq	16(%rax), %rax
	movq	%rax, ($Put)(%rip)
	movq	48(%rsi), %rax
	movq	%rax, SymTab+440(%rip)
	movq	$0, 48(%rsi)
	movq	($Ret)(%rip), %rax
	addq	$32, %rsp
	popq	%rsi
	retq
                                        # -- End function
	.def	 trace;
	.scl	2;
	.type	32;
	.endef
	.globl	trace                           # -- Begin function trace
	.p2align	4, 0x90
trace:                                  # @trace
.seh_proc trace
# %bb.0:                                # %"$1"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rdx, %rsi
	cmpl	$65, %ecx
	movl	$64, %edi
	cmovll	%ecx, %edi
	movl	%edi, %eax
	decl	%eax
	js	.LBB716_2
	.p2align	4, 0x90
.LBB716_1:                              # %"$5"
                                        # =>This Inner Loop Header: Depth=1
	movb	$32, %cl
	callq	*($Put)(%rip)
	decl	%edi
	testl	%edi, %edi
	jg	.LBB716_1
.LBB716_2:                              # %"$6"
	testb	$15, %sil
	jne	.LBB716_4
# %bb.3:                                # %"$8"
	movq	(%rsi), %rcx
	callq	print
	movb	$32, %cl
	callq	*($Put)(%rip)
	movq	8(%rsi), %rcx
	callq	print
	movb	$32, %cl
	callq	*($Put)(%rip)
	movq	SymTab+488(%rip), %rsi
.LBB716_4:                              # %"$9"
	movq	%rsi, %rcx
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	jmp	print                           # TAILCALL
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 lookup;
	.scl	2;
	.type	32;
	.endef
	.globl	lookup                          # -- Begin function lookup
	.p2align	4, 0x90
lookup:                                 # @lookup
.seh_proc lookup
# %bb.0:                                # %"$1"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	callq	lup
	movl	%eax, %ecx
	andl	$14, %ecx
	cmpl	$8, %ecx
	jne	.LBB717_9
# %bb.1:                                # %"$1"
	leaq	SymTab+8(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB717_9
# %bb.2:                                # %"$3.i"
	movq	-8(%rax), %rdx
	testb	$8, %dl
	jne	.LBB717_9
	.p2align	4, 0x90
# %bb.4:                                # %"$8.i"
	testb	$6, %dl
	jne	.LBB717_5
.LBB717_3:                              # %"$8.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rdx), %rdx
	testb	$6, %dl
	je	.LBB717_3
.LBB717_5:                              # %"$9.i"
	testb	$2, %dl
	jne	.LBB717_6
# %bb.7:                                # %"$10.i"
	movb	-4(%rdx), %dl
	jmp	.LBB717_8
.LBB717_6:                              # %"$11.i"
	shrq	$4, %rdx
.LBB717_8:                              # %"$2"
	cmpb	$64, %dl
	cmoveq	%rcx, %rax
.LBB717_9:                              # %"$2.thread"
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 fetchChar;
	.scl	2;
	.type	32;
	.endef
	.globl	fetchChar                       # -- Begin function fetchChar
	.p2align	4, 0x90
fetchChar:                              # @fetchChar
# %bb.0:                                # %"$1"
	movq	(%rcx), %rdx
	movzbl	(%rdx), %eax
	leaq	1(%rdx), %r8
	testb	%al, %al
	js	.LBB718_1
# %bb.10:                               # %"$2"
	movq	%r8, (%rcx)
	retq
.LBB718_1:                              # %"$3"
	cmpb	$-1, %al
	je	.LBB718_2
# %bb.3:                                # %"$5"
	testb	$32, %al
	jne	.LBB718_5
# %bb.4:                                # %"$7"
	andl	$31, %eax
	movl	%eax, %edx
	jmp	.LBB718_9
.LBB718_2:
	movl	$1114112, %eax                  # imm = 0x110000
	movq	%r8, (%rcx)
	retq
.LBB718_5:                              # %"$8"
	testb	$16, %al
	jne	.LBB718_7
# %bb.6:                                # %"$10"
	andl	$15, %eax
	jmp	.LBB718_8
.LBB718_7:                              # %"$11"
	andl	$7, %eax
	shll	$6, %eax
	movzbl	1(%rdx), %r8d
	addq	$2, %rdx
	andl	$63, %r8d
	orl	%r8d, %eax
	movq	%rdx, %r8
.LBB718_8:                              # %"$12"
	shll	$6, %eax
	movzbl	(%r8), %edx
	incq	%r8
	andl	$63, %edx
	orl	%eax, %edx
.LBB718_9:                              # %"$9"
	shll	$6, %edx
	movzbl	(%r8), %eax
	incq	%r8
	andl	$63, %eax
	orl	%edx, %eax
	movq	%r8, (%rcx)
	retq
                                        # -- End function
	.def	 main;
	.scl	2;
	.type	32;
	.endef
	.globl	main                            # -- Begin function main
	.p2align	4, 0x90
main:                                   # @main
.seh_proc main
# %bb.0:                                # %"$1"
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	movq	%rsp, %rbp
	.seh_setframe %rbp, 0
	.seh_endprologue
	movq	%rdx, %rsi
	movl	%ecx, %edi
	subq	$32, %rsp
	callq	__main
	addq	$32, %rsp
	movq	(%rsi), %rax
	movq	%rax, ($AV0)(%rip)
	leaq	8(%rsi), %rbx
	movq	%rbx, ($AV)(%rip)
	subq	$32, %rsp
	callq	ulimStk
	addq	$32, %rsp
	movq	%rax, ($StkBrk)(%rip)
	movq	%rax, ($StkLimit)(%rip)
	addl	$-2, %edi
	movslq	%edi, %rdi
	movq	8(%rsi,%rdi,8), %rcx
	subq	$32, %rsp
	leaq	.L$93(%rip), %rdx
	callq	strcmp
	addq	$32, %rsp
	testl	%eax, %eax
	jne	.LBB719_2
# %bb.1:                                # %"$2"
	leaq	SymTab+280(%rip), %rax
	movq	%rax, SymTab+824(%rip)
	movq	$0, (%rbx,%rdi,8)
.LBB719_2:                              # %"$3"
	movq	(%rbx), %rsi
	testq	%rsi, %rsi
	je	.LBB719_8
# %bb.3:                                # %"$5"
	movb	(%rsi), %bl
	cmpb	$45, %bl
	je	.LBB719_8
# %bb.4:                                # %"$6"
	subq	$32, %rsp
	movq	%rsi, %rcx
	movl	$47, %edx
	callq	strrchr
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB719_8
# %bb.5:                                # %"$9"
	movq	%rax, %rdi
	cmpb	$46, %bl
	jne	.LBB719_7
# %bb.6:                                # %"$9"
	leaq	1(%rsi), %rax
	cmpq	%rax, %rdi
	je	.LBB719_8
.LBB719_7:                              # %"$12"
	subq	%rsi, %rdi
	leaq	1(%rdi), %r14
	leaq	2(%rdi), %rcx
	subq	$32, %rsp
	callq	malloc
	addq	$32, %rsp
	movq	%rax, %rbx
	movq	%rax, ($PilHome)(%rip)
	movq	%r14, ($PilLen)(%rip)
	subq	$32, %rsp
	movq	%rax, %rcx
	movq	%rsi, %rdx
	movq	%r14, %r8
	callq	memcpy
	addq	$32, %rsp
	movb	$0, 1(%rbx,%rdi)
.LBB719_8:                              # %"$7"
	subq	$32, %rsp
	leaq	.L$94(%rip), %rcx
	callq	getenv
	addq	$32, %rsp
	testq	%rax, %rax
	je	.LBB719_10
# %bb.9:                                # %"$14"
	movq	%rax, ($UsrHome)(%rip)
	subq	$32, %rsp
	movq	%rax, %rcx
	callq	strlen
	addq	$32, %rsp
	movq	%rax, ($UsrLen)(%rip)
.LBB719_10:                             # %"$15"
	subq	$32, %rsp
	movl	$1048584, %ecx                  # imm = 0x100008
	callq	malloc
	addq	$32, %rsp
	testq	%rax, %rax
	jne	.LBB719_11
# %bb.46:                               # %"$2.i.i"
	subq	$32, %rsp
	leaq	.L$3(%rip), %rcx
	xorl	%edx, %edx
	callq	giveup
.LBB719_11:                             # %alloc.exit.i
	movq	($Avail)(%rip), %rdx
	movq	($Heaps)(%rip), %rcx
	movq	%rcx, 1048576(%rax)
	movq	%rax, ($Heaps)(%rip)
	movq	%rax, %rbx
	addq	$1048560, %rbx                  # imm = 0xFFFF0
	movq	$-1048576, %rcx                 # imm = 0xFFF00000
.LBB719_12:                             # %"$2.i"
                                        # =>This Inner Loop Header: Depth=1
	movq	%rdx, (%rbx)
	movq	%rbx, %rdx
	addq	$-16, %rbx
	addq	$16, %rcx
	jne	.LBB719_12
# %bb.13:                               # %heapAlloc.exit
	movq	%rax, ($Avail)(%rip)
	leaq	SymTab+8(%rip), %rbx
	leaq	SymTab+7000(%rip), %r14
	movq	%rbx, %rsi
	jmp	.LBB719_14
	.p2align	4, 0x90
.LBB719_18:                             # %"$18"
                                        #   in Loop: Header=BB719_14 Depth=1
	addq	$16, %rsi
.LBB719_14:                             # %"$16"
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rsi), %rdi
	testb	$6, %dil
	je	.LBB719_18
# %bb.15:                               # %"$17"
                                        #   in Loop: Header=BB719_14 Depth=1
	movq	SymTab+72(%rip), %r9
	subq	$48, %rsp
	movq	%rbx, 32(%rsp)
	movb	$0, 40(%rsp)
	movq	%rsi, %rcx
	xorl	%edx, %edx
	movq	%rdi, %r8
	callq	intern
	addq	$48, %rsp
	cmpq	%r14, %rsi
	je	.LBB719_19
# %bb.16:                               # %"$19"
                                        #   in Loop: Header=BB719_14 Depth=1
	testb	$4, %dil
	je	.LBB719_18
# %bb.17:                               # %"$19"
                                        #   in Loop: Header=BB719_14 Depth=1
	addq	$16, %rsi
	jmp	.LBB719_18
.LBB719_19:                             # %"$20"
	subq	$32, %rsp
	leaq	TgOS(%rip), %rcx
	callq	mkStr
	addq	$32, %rsp
	movq	%rax, SymTab+168(%rip)
	subq	$32, %rsp
	leaq	TgCPU(%rip), %rcx
	callq	mkStr
	addq	$32, %rsp
	movq	%rax, SymTab+184(%rip)
	subq	$32, %rsp
	callq	getpid
	addq	$32, %rsp
	cltq
	shlq	$4, %rax
	orq	$2, %rax
	movq	%rax, SymTab+200(%rip)
	leaq	SymTab+408(%rip), %rcx
	movq	%rcx, SymTab+232(%rip)
	movq	$26, SymTab+400(%rip)
	subq	$32, %rsp
	leaq	SymTab+8(%rip), %rsi
	movq	%rsi, %rdx
	callq	cons
	addq	$32, %rsp
	movq	%rax, ($Extern)(%rip)
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	subq	$32, %rsp
	movl	$2, %ecx
	callq	initOutFile
	addq	$32, %rsp
	movq	env+40(%rip), %rcx
	movq	%rcx, (%rbx)
	testq	%rcx, %rcx
	je	.LBB719_21
# %bb.20:                               # %"$2.i17"
	movq	($Put)(%rip), %rdx
	movq	%rdx, 16(%rcx)
.LBB719_21:                             # %pushOutFile.exit
	leaq	_putStdout(%rip), %rdi
	movq	%rdi, ($Put)(%rip)
	movq	%rax, ($OutFile)(%rip)
	movq	%rax, 8(%rbx)
	movl	$0, 24(%rbx)
	movq	%rbx, env+40(%rip)
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rbx, ($Stdout)(%rip)
	subq	$32, %rsp
	movl	$1, %ecx
	callq	initOutFile
	addq	$32, %rsp
	movq	env+40(%rip), %rcx
	movq	%rcx, (%rbx)
	testq	%rcx, %rcx
	je	.LBB719_23
# %bb.22:                               # %"$2.i19"
	movq	($Put)(%rip), %rdx
	movq	%rdx, 16(%rcx)
.LBB719_23:                             # %pushOutFile.exit20
	movq	%rdi, ($Put)(%rip)
	movq	%rax, ($OutFile)(%rip)
	movq	%rax, 8(%rbx)
	movl	$0, 24(%rbx)
	movq	%rbx, env+40(%rip)
	movl	$32, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rdi, ($Stdin)(%rip)
	subq	$32, %rsp
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	callq	initInFile
	addq	$32, %rsp
	movq	($InFile)(%rip), %rcx
	testq	%rcx, %rcx
	je	.LBB719_25
# %bb.24:                               # %"$2.i22"
	movl	($Chr)(%rip), %edx
	movl	%edx, 12(%rcx)
.LBB719_25:                             # %"$3.i"
	movq	env+32(%rip), %rcx
	movq	%rcx, (%rdi)
	testq	%rcx, %rcx
	je	.LBB719_27
# %bb.26:                               # %"$4.i"
	movq	($Get)(%rip), %rdx
	movq	%rdx, 16(%rcx)
.LBB719_27:                             # %pushInFile.exit
	leaq	_getStdin(%rip), %rcx
	movq	%rcx, ($Get)(%rip)
	movq	%rax, ($InFile)(%rip)
	movq	%rax, 8(%rdi)
	movl	12(%rax), %eax
	movl	%eax, ($Chr)(%rip)
	movl	$0, 24(%rdi)
	movq	%rdi, env+32(%rip)
	subq	$32, %rsp
	leaq	OrgTermio(%rip), %rdx
	xorl	%ecx, %ecx
	callq	tcgetattr
	addq	$32, %rsp
	testl	%eax, %eax
	sete	Tio(%rip)
	subq	$32, %rsp
	xorl	%ecx, %ecx
	callq	sigUnblock
	addq	$32, %rsp
	movl	Sig(%rip), %ecx
	subq	$32, %rsp
	leaq	sig(%rip), %rdi
	movq	%rdi, %rdx
	callq	iSignal
	addq	$32, %rsp
	movl	Sig+8(%rip), %ecx
	subq	$32, %rsp
	movq	%rdi, %rdx
	callq	iSignal
	addq	$32, %rsp
	movl	Sig+12(%rip), %ecx
	subq	$32, %rsp
	movq	%rdi, %rdx
	callq	iSignal
	addq	$32, %rsp
	movl	Sig+20(%rip), %ecx
	subq	$32, %rsp
	movq	%rdi, %rdx
	callq	iSignal
	addq	$32, %rsp
	movl	Sig+24(%rip), %ecx
	subq	$32, %rsp
	movq	%rdi, %rdx
	callq	iSignal
	addq	$32, %rsp
	movl	Sig+52(%rip), %ecx
	subq	$32, %rsp
	movq	%rdi, %rdx
	callq	iSignal
	addq	$32, %rsp
	movl	Sig+56(%rip), %ecx
	subq	$32, %rsp
	movq	%rdi, %rdx
	callq	iSignal
	addq	$32, %rsp
	movl	Sig+40(%rip), %ecx
	movq	SigIgn(%rip), %rdx
	subq	$32, %rsp
	callq	signal
	addq	$32, %rsp
	cmpq	SigDfl(%rip), %rax
	jne	.LBB719_29
# %bb.28:                               # %"$23"
	movl	Sig+40(%rip), %ecx
	subq	$32, %rsp
	leaq	sig(%rip), %rdx
	callq	iSignal
	addq	$32, %rsp
.LBB719_29:                             # %"$24"
	movl	Sig+4(%rip), %ecx
	subq	$32, %rsp
	leaq	sigTerm(%rip), %rdx
	callq	iSignal
	addq	$32, %rsp
	movl	Sig+28(%rip), %ecx
	subq	$32, %rsp
	leaq	sigChld(%rip), %rdx
	callq	signal
	addq	$32, %rsp
	movl	Sig+16(%rip), %ecx
	movq	SigIgn(%rip), %rdi
	subq	$32, %rsp
	movq	%rdi, %rdx
	callq	signal
	addq	$32, %rsp
	movl	Sig+44(%rip), %ecx
	subq	$32, %rsp
	movq	%rdi, %rdx
	callq	signal
	addq	$32, %rsp
	movl	Sig+48(%rip), %ecx
	subq	$32, %rsp
	movq	%rdi, %rdx
	callq	signal
	callq	initReadline
	movb	$1, %cl
	callq	getUsec
	addq	$32, %rsp
	movq	%rax, ($USec)(%rip)
	subq	$32, %rsp
	leaq	QuitRst(%rip), %rcx
	callq	setjmp
	addq	$32, %rsp
	testl	%eax, %eax
	jne	.LBB719_34
.LBB719_30:                             # %"$25"
                                        # =>This Inner Loop Header: Depth=1
	movq	($AV)(%rip), %rax
	movq	(%rax), %rcx
	testq	%rcx, %rcx
	je	.LBB719_34
# %bb.31:                               # %"$4.i23"
                                        #   in Loop: Header=BB719_30 Depth=1
	cmpb	$45, (%rcx)
	jne	.LBB719_33
# %bb.32:                               # %"$6.i"
                                        #   in Loop: Header=BB719_30 Depth=1
	cmpb	$0, 1(%rcx)
	je	.LBB719_34
.LBB719_33:                             # %"$7.i"
                                        #   in Loop: Header=BB719_30 Depth=1
	addq	$8, %rax
	movq	%rax, ($AV)(%rip)
	subq	$32, %rsp
	callq	mkStr
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%rax, %r8
	callq	repl
	addq	$32, %rsp
	jmp	.LBB719_30
.LBB719_34:                             # %"$26"
	subq	$32, %rsp
	callq	setCooked
	addq	$32, %rsp
	cmpb	$0, ($Repl)(%rip)
	jne	.LBB719_36
# %bb.35:                               # %"$27"
	movb	$1, ($Repl)(%rip)
	movl	Sig+4(%rip), %ecx
	subq	$32, %rsp
	leaq	sig(%rip), %rdx
	callq	iSignal
	addq	$32, %rsp
.LBB719_36:                             # %"$28"
	subq	$32, %rsp
	leaq	.L$95(%rip), %rcx
	callq	stdRead
	addq	$32, %rsp
	movq	%rax, %rcx
	movq	env(%rip), %rdx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rcx, (%rbx)
	movq	%rbx, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	%rbx, env(%rip)
	movl	($Chr)(%rip), %eax
	testl	%eax, %eax
	js	.LBB719_45
# %bb.37:
	leaq	.L$95(%rip), %rdi
.LBB719_38:                             # %"$31"
                                        # =>This Inner Loop Header: Depth=1
	testl	%eax, %eax
	jne	.LBB719_41
# %bb.39:                               # %"$34"
                                        #   in Loop: Header=BB719_38 Depth=1
	cmpq	%rsi, %rcx
	je	.LBB719_44
# %bb.40:                               # %"$35"
                                        #   in Loop: Header=BB719_38 Depth=1
	subq	$32, %rsp
	callq	stdEval
	jmp	.LBB719_43
	.p2align	4, 0x90
.LBB719_41:                             # %"$33"
                                        #   in Loop: Header=BB719_38 Depth=1
	testb	$14, %cl
	jne	.LBB719_44
# %bb.42:                               # %"$40"
                                        #   in Loop: Header=BB719_38 Depth=1
	subq	$32, %rsp
	callq	evList
.LBB719_43:                             # %"$30"
                                        #   in Loop: Header=BB719_38 Depth=1
	addq	$32, %rsp
.LBB719_44:                             # %"$30"
                                        #   in Loop: Header=BB719_38 Depth=1
	movq	8(%rbx), %rax
	movq	%rax, env(%rip)
	subq	$32, %rsp
	movq	%rdi, %rcx
	callq	stdRead
	addq	$32, %rsp
	movq	%rax, %rcx
	movq	env(%rip), %rdx
	movl	$16, %eax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rbx
	movq	%rcx, (%rbx)
	movq	%rbx, %rax
	orq	$8, %rax
	movq	%rdx, (%rax)
	movq	%rbx, env(%rip)
	movl	($Chr)(%rip), %eax
	testl	%eax, %eax
	jns	.LBB719_38
.LBB719_45:                             # %"$32"
	subq	$32, %rsp
	xorl	%ecx, %ecx
	callq	bye
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 stderrMsg;
	.scl	2;
	.type	32;
	.endef
	.globl	stderrMsg                       # -- Begin function stderrMsg
	.p2align	4, 0x90
stderrMsg:                              # @stderrMsg
.seh_proc stderrMsg
# %bb.0:
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rdx, %rsi
	movq	%rcx, %rdi
	callq	__getreent
	movq	24(%rax), %rcx
	movq	%rdi, %rdx
	movq	%rsi, %r8
	callq	fprintf
	movq	%rsi, %rax
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 gPrintf;
	.scl	2;
	.type	32;
	.endef
	.globl	gPrintf                         # -- Begin function gPrintf
	.p2align	4, 0x90
gPrintf:                                # @gPrintf
.seh_proc gPrintf
# %bb.0:
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movslq	%edx, %rdx
	callq	snprintf
	nop
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 strErrno;
	.scl	2;
	.type	32;
	.endef
	.globl	strErrno                        # -- Begin function strErrno
	.p2align	4, 0x90
strErrno:                               # @strErrno
.seh_proc strErrno
# %bb.0:
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	callq	__errno
	movl	(%rax), %ecx
	addq	$40, %rsp
	jmp	strerror                        # TAILCALL
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 openRd;
	.scl	2;
	.type	32;
	.endef
	.globl	openRd                          # -- Begin function openRd
	.p2align	4, 0x90
openRd:                                 # @openRd
.seh_proc openRd
# %bb.0:
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	xorl	%edx, %edx
	callq	open
	nop
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 openWr;
	.scl	2;
	.type	32;
	.endef
	.globl	openWr                          # -- Begin function openWr
	.p2align	4, 0x90
openWr:                                 # @openWr
.seh_proc openWr
# %bb.0:
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movl	$1537, %edx                     # imm = 0x601
	movl	$438, %r8d                      # imm = 0x1B6
	callq	open
	nop
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 openRdWr;
	.scl	2;
	.type	32;
	.endef
	.globl	openRdWr                        # -- Begin function openRdWr
	.p2align	4, 0x90
openRdWr:                               # @openRdWr
.seh_proc openRdWr
# %bb.0:
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movl	$2, %edx
	callq	open
	nop
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 openRdWrExcl;
	.scl	2;
	.type	32;
	.endef
	.globl	openRdWrExcl                    # -- Begin function openRdWrExcl
	.p2align	4, 0x90
openRdWrExcl:                           # @openRdWrExcl
.seh_proc openRdWrExcl
# %bb.0:
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movl	$2562, %edx                     # imm = 0xA02
	movl	$438, %r8d                      # imm = 0x1B6
	callq	open
	nop
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 openRdWrCreate;
	.scl	2;
	.type	32;
	.endef
	.globl	openRdWrCreate                  # -- Begin function openRdWrCreate
	.p2align	4, 0x90
openRdWrCreate:                         # @openRdWrCreate
.seh_proc openRdWrCreate
# %bb.0:
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movl	$514, %edx                      # imm = 0x202
	movl	$438, %r8d                      # imm = 0x1B6
	callq	open
	nop
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 openRdWrAppend;
	.scl	2;
	.type	32;
	.endef
	.globl	openRdWrAppend                  # -- Begin function openRdWrAppend
	.p2align	4, 0x90
openRdWrAppend:                         # @openRdWrAppend
.seh_proc openRdWrAppend
# %bb.0:
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movl	$522, %edx                      # imm = 0x20A
	movl	$438, %r8d                      # imm = 0x1B6
	callq	open
	nop
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 openWrAppend;
	.scl	2;
	.type	32;
	.endef
	.globl	openWrAppend                    # -- Begin function openWrAppend
	.p2align	4, 0x90
openWrAppend:                           # @openWrAppend
.seh_proc openWrAppend
# %bb.0:
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movl	$521, %edx                      # imm = 0x209
	movl	$438, %r8d                      # imm = 0x1B6
	callq	open
	nop
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 fseekOfs;
	.scl	2;
	.type	32;
	.endef
	.globl	fseekOfs                        # -- Begin function fseekOfs
	.p2align	4, 0x90
fseekOfs:                               # @fseekOfs
.seh_proc fseekOfs
# %bb.0:
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movslq	%edx, %rdx
	movl	$1, %r8d
	callq	fseek
	xorl	%ecx, %ecx
	testl	%eax, %eax
	sete	%cl
	movl	%ecx, %eax
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 fseek0;
	.scl	2;
	.type	32;
	.endef
	.globl	fseek0                          # -- Begin function fseek0
	.p2align	4, 0x90
fseek0:                                 # @fseek0
.seh_proc fseek0
# %bb.0:
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	callq	fseek
	xorl	%ecx, %ecx
	testl	%eax, %eax
	sete	%cl
	movl	%ecx, %eax
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 seek0;
	.scl	2;
	.type	32;
	.endef
	.globl	seek0                           # -- Begin function seek0
	.p2align	4, 0x90
seek0:                                  # @seek0
.seh_proc seek0
# %bb.0:
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	callq	lseek
	xorl	%ecx, %ecx
	testq	%rax, %rax
	sete	%cl
	movl	%ecx, %eax
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 truncate0;
	.scl	2;
	.type	32;
	.endef
	.globl	truncate0                       # -- Begin function truncate0
	.p2align	4, 0x90
truncate0:                              # @truncate0
.seh_proc truncate0
# %bb.0:
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	xorl	%edx, %edx
	callq	ftruncate
	xorl	%ecx, %ecx
	testl	%eax, %eax
	sete	%cl
	movl	%ecx, %eax
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 socketPair;
	.scl	2;
	.type	32;
	.endef
	.globl	socketPair                      # -- Begin function socketPair
	.p2align	4, 0x90
socketPair:                             # @socketPair
# %bb.0:
	movq	%rcx, %r9
	movl	$1, %ecx
	movl	$1, %edx
	xorl	%r8d, %r8d
	jmp	socketpair                      # TAILCALL
                                        # -- End function
	.def	 fcntlCloExec;
	.scl	2;
	.type	32;
	.endef
	.globl	fcntlCloExec                    # -- Begin function fcntlCloExec
	.p2align	4, 0x90
fcntlCloExec:                           # @fcntlCloExec
.seh_proc fcntlCloExec
# %bb.0:
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movl	$2, %edx
	movl	$1, %r8d
	callq	fcntl
	nop
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 fcntlSetFl;
	.scl	2;
	.type	32;
	.endef
	.globl	fcntlSetFl                      # -- Begin function fcntlSetFl
	.p2align	4, 0x90
fcntlSetFl:                             # @fcntlSetFl
.seh_proc fcntlSetFl
# %bb.0:
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movl	%edx, %r8d
	movl	$4, %edx
	callq	fcntl
	nop
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 nonBlocking;
	.scl	2;
	.type	32;
	.endef
	.globl	nonBlocking                     # -- Begin function nonBlocking
	.p2align	4, 0x90
nonBlocking:                            # @nonBlocking
.seh_proc nonBlocking
# %bb.0:
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movl	%ecx, %esi
	movl	$3, %edx
	xorl	%r8d, %r8d
	callq	fcntl
	movl	%eax, %edi
	movl	%eax, %r8d
	orl	$16384, %r8d                    # imm = 0x4000
	movl	%esi, %ecx
	movl	$4, %edx
	callq	fcntl
	movl	%edi, %eax
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 fcntlSetOwn;
	.scl	2;
	.type	32;
	.endef
	.globl	fcntlSetOwn                     # -- Begin function fcntlSetOwn
	.p2align	4, 0x90
fcntlSetOwn:                            # @fcntlSetOwn
.seh_proc fcntlSetOwn
# %bb.0:
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movl	%edx, %r8d
	movl	%ecx, %esi
	movl	$6, %edx
	callq	fcntl
	movl	%esi, %ecx
	movl	$3, %edx
	xorl	%r8d, %r8d
	callq	fcntl
	orl	$16384, %eax                    # imm = 0x4000
	movl	%esi, %ecx
	movl	$4, %edx
	movl	%eax, %r8d
	callq	fcntl
	nop
	addq	$32, %rsp
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 getDir;
	.scl	2;
	.type	32;
	.endef
	.globl	getDir                          # -- Begin function getDir
	.p2align	4, 0x90
getDir:                                 # @getDir
.seh_proc getDir
# %bb.0:
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	testq	%rcx, %rcx
	je	.LBB739_1
# %bb.2:
	callq	opendir
	movq	%rax, %rcx
	movq	%rax, getDir.dp(%rip)
	testq	%rax, %rax
	jne	.LBB739_3
	jmp	.LBB739_6
.LBB739_1:
	movq	getDir.dp(%rip), %rcx
.LBB739_3:
	callq	readdir
	testq	%rax, %rax
	je	.LBB739_5
# %bb.4:
	addq	$24, %rax
	jmp	.LBB739_7
.LBB739_5:
	movq	getDir.dp(%rip), %rcx
	callq	closedir
.LBB739_6:
	xorl	%eax, %eax
.LBB739_7:
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 initReadline;
	.scl	2;
	.type	32;
	.endef
	.globl	initReadline                    # -- Begin function initReadline
	.p2align	4, 0x90
initReadline:                           # @initReadline
# %bb.0:
	movl	$0, rl_catch_signals(%rip)
	leaq	rlGetc(%rip), %rax
	movq	%rax, rl_getc_function(%rip)
	leaq	rlAvail(%rip), %rax
	movq	%rax, rl_input_available_hook(%rip)
	leaq	tabEntry(%rip), %rax
	movq	%rax, rl_completion_entry_function(%rip)
	leaq	.L.str(%rip), %rax
	movq	%rax, rl_special_prefixes(%rip)
	movq	$0, rl_basic_quote_characters(%rip)
	retq
                                        # -- End function
	.def	 tabEntry;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90                         # -- Begin function tabEntry
tabEntry:                               # @tabEntry
# %bb.0:
	movl	$0, rl_completion_append_character(%rip)
	xorl	%eax, %eax
	testl	%edx, %edx
	cmovneq	%rax, %rcx
	jmp	tabComplete                     # TAILCALL
                                        # -- End function
	.def	 gReadline;
	.scl	2;
	.type	32;
	.endef
	.globl	gReadline                       # -- Begin function gReadline
	.p2align	4, 0x90
gReadline:                              # @gReadline
.seh_proc gReadline
# %bb.0:
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rcx, %rsi
	callq	__errno
	movl	(%rax), %edi
	movq	%rsi, %rcx
	callq	readline
	movq	%rax, %rsi
	callq	__errno
	movl	%edi, (%rax)
	movq	%rsi, %rax
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 rlHide;
	.scl	2;
	.type	32;
	.endef
	.globl	rlHide                          # -- Begin function rlHide
	.p2align	4, 0x90
rlHide:                                 # @rlHide
.seh_proc rlHide
# %bb.0:
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movl	$33554434, %eax                 # imm = 0x2000002
	andl	rl_readline_state(%rip), %eax
	cmpl	$2, %eax
	jne	.LBB743_1
# %bb.2:
	callq	rl_clear_visible_line
	callq	__getreent
	movq	16(%rax), %rcx
	addq	$40, %rsp
	jmp	fflush                          # TAILCALL
.LBB743_1:
	nop
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 rlShow;
	.scl	2;
	.type	32;
	.endef
	.globl	rlShow                          # -- Begin function rlShow
	.p2align	4, 0x90
rlShow:                                 # @rlShow
# %bb.0:
	movl	$33554434, %eax                 # imm = 0x2000002
	andl	rl_readline_state(%rip), %eax
	cmpl	$2, %eax
	jne	.LBB744_1
# %bb.2:
	jmp	rl_forced_update_display        # TAILCALL
.LBB744_1:
	retq
                                        # -- End function
	.def	 rlSigBeg;
	.scl	2;
	.type	32;
	.endef
	.globl	rlSigBeg                        # -- Begin function rlSigBeg
	.p2align	4, 0x90
rlSigBeg:                               # @rlSigBeg
.seh_proc rlSigBeg
# %bb.0:
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	testb	$2, rl_readline_state(%rip)
	jne	.LBB745_2
# %bb.1:
	addq	$40, %rsp
	retq
.LBB745_2:
	callq	rl_save_prompt
	callq	rl_free_line_state
	nop
	addq	$40, %rsp
	jmp	rl_cleanup_after_signal         # TAILCALL
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 rlSigEnd;
	.scl	2;
	.type	32;
	.endef
	.globl	rlSigEnd                        # -- Begin function rlSigEnd
	.p2align	4, 0x90
rlSigEnd:                               # @rlSigEnd
.seh_proc rlSigEnd
# %bb.0:
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	cmpw	$0, rl_readline_state(%rip)
	js	.LBB746_2
# %bb.1:
	addq	$40, %rsp
	retq
.LBB746_2:
	callq	rl_reset_after_signal
	nop
	addq	$40, %rsp
	jmp	rl_restore_prompt               # TAILCALL
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 currentLine;
	.scl	2;
	.type	32;
	.endef
	.globl	currentLine                     # -- Begin function currentLine
	.p2align	4, 0x90
currentLine:                            # @currentLine
.seh_proc currentLine
# %bb.0:
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movl	history_length(%rip), %ecx
	callq	history_get
	testq	%rax, %rax
	je	.LBB747_1
# %bb.2:
	movq	(%rax), %rax
	jmp	.LBB747_3
.LBB747_1:
	xorl	%eax, %eax
.LBB747_3:
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 gSignal;
	.scl	2;
	.type	32;
	.endef
	.globl	gSignal                         # -- Begin function gSignal
	.p2align	4, 0x90
gSignal:                                # @gSignal
# %bb.0:
	addl	$-1, %ecx
	cmpl	$30, %ecx
	ja	.LBB748_2
# %bb.1:
	movslq	%ecx, %rax
	leaq	.Lswitch.table.gSignal(%rip), %rcx
	movl	(%rcx,%rax,4), %eax
	retq
.LBB748_2:
	xorl	%eax, %eax
	retq
                                        # -- End function
	.def	 iSignal;
	.scl	2;
	.type	32;
	.endef
	.globl	iSignal                         # -- Begin function iSignal
	.p2align	4, 0x90
iSignal:                                # @iSignal
.seh_proc iSignal
# %bb.0:
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$64, %rsp
	.seh_stackalloc 64
	.seh_endprologue
	movl	%ecx, %esi
	movq	%rdx, 40(%rsp)
	leaq	48(%rsp), %rcx
	callq	sigemptyset
	movl	$0, 56(%rsp)
	leaq	40(%rsp), %rdx
	movl	%esi, %ecx
	xorl	%r8d, %r8d
	callq	sigaction
	nop
	addq	$64, %rsp
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 sigUnblock;
	.scl	2;
	.type	32;
	.endef
	.globl	sigUnblock                      # -- Begin function sigUnblock
	.p2align	4, 0x90
sigUnblock:                             # @sigUnblock
.seh_proc sigUnblock
# %bb.0:
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	testl	%ecx, %ecx
	je	.LBB750_1
# %bb.2:
	movl	%ecx, %esi
	leaq	32(%rsp), %rdi
	movq	%rdi, %rcx
	callq	sigemptyset
	movq	%rdi, %rcx
	movl	%esi, %edx
	callq	sigaddset
	jmp	.LBB750_3
.LBB750_1:
	leaq	32(%rsp), %rcx
	callq	sigfillset
.LBB750_3:
	leaq	32(%rsp), %rdx
	movl	$2, %ecx
	xorl	%r8d, %r8d
	callq	sigprocmask
	nop
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 sigChld;
	.scl	2;
	.type	32;
	.endef
	.globl	sigChld                         # -- Begin function sigChld
	.p2align	4, 0x90
sigChld:                                # @sigChld
.seh_proc sigChld
# %bb.0:
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	callq	__errno
	movl	(%rax), %ebp
	leaq	36(%rsp), %rdx
	xorl	%ecx, %ecx
	movl	$1, %r8d
	callq	waitpid
	testl	%eax, %eax
	jle	.LBB751_6
# %bb.1:                                # %.preheader
	movl	%eax, %ebx
	leaq	36(%rsp), %rsi
	leaq	.L.str.1(%rip), %rdi
	jmp	.LBB751_2
	.p2align	4, 0x90
.LBB751_5:                              #   in Loop: Header=BB751_2 Depth=1
	xorl	%ecx, %ecx
	movq	%rsi, %rdx
	movl	$1, %r8d
	callq	waitpid
	movl	%eax, %ebx
	testl	%eax, %eax
	jle	.LBB751_6
.LBB751_2:                              # =>This Inner Loop Header: Depth=1
	movl	36(%rsp), %eax
	andl	$127, %eax
	je	.LBB751_5
# %bb.3:                                #   in Loop: Header=BB751_2 Depth=1
	cmpl	$127, %eax
	je	.LBB751_5
# %bb.4:                                #   in Loop: Header=BB751_2 Depth=1
	callq	__getreent
	movq	24(%rax), %rcx
	movl	36(%rsp), %r9d
	andl	$127, %r9d
	movq	%rdi, %rdx
	movl	%ebx, %r8d
	callq	fprintf
	jmp	.LBB751_5
.LBB751_6:
	callq	__errno
	movl	%ebp, (%rax)
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 waitWuntraced;
	.scl	2;
	.type	32;
	.endef
	.globl	waitWuntraced                   # -- Begin function waitWuntraced
	.p2align	4, 0x90
waitWuntraced:                          # @waitWuntraced
# %bb.0:
	movl	$2, %r8d
	jmp	waitpid                         # TAILCALL
                                        # -- End function
	.def	 wifStopped;
	.scl	2;
	.type	32;
	.endef
	.globl	wifStopped                      # -- Begin function wifStopped
	.p2align	4, 0x90
wifStopped:                             # @wifStopped
# %bb.0:
	xorl	%eax, %eax
	cmpb	$127, (%rcx)
	sete	%al
	retq
                                        # -- End function
	.def	 nErrno;
	.scl	2;
	.type	32;
	.endef
	.globl	nErrno                          # -- Begin function nErrno
	.p2align	4, 0x90
nErrno:                                 # @nErrno
.seh_proc nErrno
# %bb.0:
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	callq	__errno
	movl	(%rax), %eax
	addq	$40, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 gErrno;
	.scl	2;
	.type	32;
	.endef
	.globl	gErrno                          # -- Begin function gErrno
	.p2align	4, 0x90
gErrno:                                 # @gErrno
.seh_proc gErrno
# %bb.0:
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	callq	__errno
	movl	(%rax), %eax
	leal	-2(%rax), %ecx
	cmpl	$30, %ecx
	ja	.LBB755_1
# %bb.3:
	movl	$1, %eax
	leaq	.LJTI755_0(%rip), %rdx
	movslq	(%rdx,%rcx,4), %rcx
	addq	%rdx, %rcx
	jmpq	*%rcx
.LBB755_4:
	movl	$2, %eax
	jmp	.LBB755_10
.LBB755_1:
	cmpl	$104, %eax
	jne	.LBB755_9
# %bb.2:
	movl	$7, %eax
	jmp	.LBB755_10
.LBB755_9:
	xorl	%eax, %eax
	jmp	.LBB755_10
.LBB755_5:
	movl	$3, %eax
	jmp	.LBB755_10
.LBB755_6:
	movl	$4, %eax
	jmp	.LBB755_10
.LBB755_7:
	movl	$5, %eax
	jmp	.LBB755_10
.LBB755_8:
	movl	$6, %eax
.LBB755_10:
	addq	$40, %rsp
	retq
	.p2align	2, 0x90
.LJTI755_0:
	.long	.LBB755_10-.LJTI755_0
	.long	.LBB755_9-.LJTI755_0
	.long	.LBB755_4-.LJTI755_0
	.long	.LBB755_9-.LJTI755_0
	.long	.LBB755_9-.LJTI755_0
	.long	.LBB755_9-.LJTI755_0
	.long	.LBB755_9-.LJTI755_0
	.long	.LBB755_5-.LJTI755_0
	.long	.LBB755_9-.LJTI755_0
	.long	.LBB755_6-.LJTI755_0
	.long	.LBB755_9-.LJTI755_0
	.long	.LBB755_7-.LJTI755_0
	.long	.LBB755_9-.LJTI755_0
	.long	.LBB755_9-.LJTI755_0
	.long	.LBB755_9-.LJTI755_0
	.long	.LBB755_9-.LJTI755_0
	.long	.LBB755_9-.LJTI755_0
	.long	.LBB755_9-.LJTI755_0
	.long	.LBB755_9-.LJTI755_0
	.long	.LBB755_9-.LJTI755_0
	.long	.LBB755_9-.LJTI755_0
	.long	.LBB755_9-.LJTI755_0
	.long	.LBB755_9-.LJTI755_0
	.long	.LBB755_9-.LJTI755_0
	.long	.LBB755_9-.LJTI755_0
	.long	.LBB755_9-.LJTI755_0
	.long	.LBB755_9-.LJTI755_0
	.long	.LBB755_9-.LJTI755_0
	.long	.LBB755_9-.LJTI755_0
	.long	.LBB755_9-.LJTI755_0
	.long	.LBB755_8-.LJTI755_0
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 stopTerm;
	.scl	2;
	.type	32;
	.endef
	.globl	stopTerm                        # -- Begin function stopTerm
	.p2align	4, 0x90
stopTerm:                               # @stopTerm
.seh_proc stopTerm
# %bb.0:
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$48, %rsp
	.seh_stackalloc 48
	.seh_endprologue
	cmpl	$0, Tio(%rip)
	je	.LBB756_7
# %bb.1:                                # %.preheader1
	leaq	OrgTermio(%rip), %rsi
	.p2align	4, 0x90
.LBB756_2:                              # =>This Inner Loop Header: Depth=1
	xorl	%ecx, %ecx
	movl	$3, %edx
	movq	%rsi, %r8
	callq	tcsetattr
	testl	%eax, %eax
	je	.LBB756_4
# %bb.3:                                #   in Loop: Header=BB756_2 Depth=1
	callq	__errno
	cmpl	$4, (%rax)
	je	.LBB756_2
.LBB756_4:
	leaq	40(%rsp), %rsi
	movq	%rsi, %rcx
	callq	sigemptyset
	movq	%rsi, %rcx
	movl	$18, %edx
	callq	sigaddset
	movl	$2, %ecx
	movq	%rsi, %rdx
	xorl	%r8d, %r8d
	callq	sigprocmask
	movl	$18, %ecx
	xorl	%edx, %edx
	callq	signal
	movl	$18, %ecx
	callq	raise
	movq	Termio(%rip), %rsi
	testq	%rsi, %rsi
	je	.LBB756_7
	.p2align	4, 0x90
.LBB756_5:                              # =>This Inner Loop Header: Depth=1
	xorl	%ecx, %ecx
	movl	$3, %edx
	movq	%rsi, %r8
	callq	tcsetattr
	testl	%eax, %eax
	je	.LBB756_7
# %bb.6:                                #   in Loop: Header=BB756_5 Depth=1
	callq	__errno
	cmpl	$4, (%rax)
	je	.LBB756_5
.LBB756_7:
	addq	$48, %rsp
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 setRaw;
	.scl	2;
	.type	32;
	.endef
	.globl	setRaw                          # -- Begin function setRaw
	.p2align	4, 0x90
setRaw:                                 # @setRaw
.seh_proc setRaw
# %bb.0:
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	cmpl	$0, Tio(%rip)
	je	.LBB757_5
# %bb.1:
	cmpq	$0, Termio(%rip)
	jne	.LBB757_5
# %bb.2:
	movl	$44, %ecx
	callq	malloc
	movq	%rax, Termio(%rip)
	movups	OrgTermio(%rip), %xmm0
	movups	%xmm0, (%rax)
	movups	OrgTermio+16(%rip), %xmm0
	movups	%xmm0, 16(%rax)
	movups	OrgTermio+28(%rip), %xmm0
	movups	%xmm0, 28(%rax)
	xorl	%ecx, %ecx
	movq	%rax, %rdx
	callq	tcgetattr
	movq	Termio(%rip), %rsi
	movl	$0, (%rsi)
	movl	$1, 12(%rsi)
	movb	$1, 26(%rsi)
	movb	$0, 33(%rsi)
	.p2align	4, 0x90
.LBB757_3:                              # =>This Inner Loop Header: Depth=1
	xorl	%ecx, %ecx
	movl	$3, %edx
	movq	%rsi, %r8
	callq	tcsetattr
	testl	%eax, %eax
	je	.LBB757_5
# %bb.4:                                #   in Loop: Header=BB757_3 Depth=1
	callq	__errno
	cmpl	$4, (%rax)
	je	.LBB757_3
.LBB757_5:
	addq	$32, %rsp
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 setCooked;
	.scl	2;
	.type	32;
	.endef
	.globl	setCooked                       # -- Begin function setCooked
	.p2align	4, 0x90
setCooked:                              # @setCooked
.seh_proc setCooked
# %bb.0:
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	cmpq	$0, Termio(%rip)
	je	.LBB758_5
# %bb.1:                                # %.preheader
	leaq	OrgTermio(%rip), %rsi
	.p2align	4, 0x90
.LBB758_2:                              # =>This Inner Loop Header: Depth=1
	xorl	%ecx, %ecx
	movl	$3, %edx
	movq	%rsi, %r8
	callq	tcsetattr
	testl	%eax, %eax
	je	.LBB758_4
# %bb.3:                                #   in Loop: Header=BB758_2 Depth=1
	callq	__errno
	cmpl	$4, (%rax)
	je	.LBB758_2
.LBB758_4:
	movq	Termio(%rip), %rcx
	callq	free
	movq	$0, Termio(%rip)
.LBB758_5:
	addq	$32, %rsp
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 reopenTty;
	.scl	2;
	.type	32;
	.endef
	.globl	reopenTty                       # -- Begin function reopenTty
	.p2align	4, 0x90
reopenTty:                              # @reopenTty
.seh_proc reopenTty
# %bb.0:
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rcx, %rsi
	callq	__getreent
	movq	8(%rax), %r8
	leaq	.L.str.2(%rip), %rdx
	movq	%rsi, %rcx
	callq	freopen
	xorl	%edi, %edi
	testq	%rax, %rax
	je	.LBB759_3
# %bb.1:
	callq	__getreent
	movq	16(%rax), %r8
	leaq	.L.str.3(%rip), %rdx
	movq	%rsi, %rcx
	callq	freopen
	testq	%rax, %rax
	je	.LBB759_3
# %bb.2:
	callq	__getreent
	movq	24(%rax), %r8
	leaq	.L.str.3(%rip), %rdx
	movq	%rsi, %rcx
	callq	freopen
	xorl	%edi, %edi
	testq	%rax, %rax
	setne	%dil
.LBB759_3:
	movl	%edi, %eax
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 getUsec;
	.scl	2;
	.type	32;
	.endef
	.globl	getUsec                         # -- Begin function getUsec
	.p2align	4, 0x90
getUsec:                                # @getUsec
.seh_proc getUsec
# %bb.0:
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$48, %rsp
	.seh_stackalloc 48
	.seh_endprologue
	testl	%ecx, %ecx
	je	.LBB760_2
# %bb.1:
	xorl	%esi, %esi
	leaq	32(%rsp), %rcx
	xorl	%edx, %edx
	callq	gettimeofday
	imulq	$1000000, 32(%rsp), %rcx        # imm = 0xF4240
	addq	40(%rsp), %rcx
	testl	%eax, %eax
	cmovneq	%rsi, %rcx
	jmp	.LBB760_3
.LBB760_2:
	movq	Tv+8(%rip), %rcx
.LBB760_3:
	movq	%rcx, %rax
	addq	$48, %rsp
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 getMsec;
	.scl	2;
	.type	32;
	.endef
	.globl	getMsec                         # -- Begin function getMsec
	.p2align	4, 0x90
getMsec:                                # @getMsec
.seh_proc getMsec
# %bb.0:
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$48, %rsp
	.seh_stackalloc 48
	.seh_endprologue
	xorl	%esi, %esi
	leaq	32(%rsp), %rcx
	xorl	%edx, %edx
	callq	gettimeofday
	testl	%eax, %eax
	jne	.LBB761_2
# %bb.1:
	imulq	$1000, 32(%rsp), %rcx           # imm = 0x3E8
	movl	$500, %eax                      # imm = 0x1F4
	addq	40(%rsp), %rax
	movabsq	$2361183241434822607, %rdx      # imm = 0x20C49BA5E353F7CF
	imulq	%rdx
	movq	%rdx, %rsi
	movq	%rdx, %rax
	shrq	$63, %rax
	sarq	$7, %rsi
	addq	%rax, %rsi
	addq	%rcx, %rsi
.LBB761_2:
	movq	%rsi, %rax
	addq	$48, %rsp
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 getDate;
	.scl	2;
	.type	32;
	.endef
	.globl	getDate                         # -- Begin function getDate
	.p2align	4, 0x90
getDate:                                # @getDate
.seh_proc getDate
# %bb.0:
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	leaq	Tv(%rip), %rsi
	movq	%rsi, %rcx
	xorl	%edx, %edx
	callq	gettimeofday
	movq	%rsi, %rcx
	callq	localtime
	movq	%rax, Time(%rip)
	movl	$1900, %ecx                     # imm = 0x76C
	addl	20(%rax), %ecx
	movl	12(%rax), %edx
	movl	16(%rax), %eax
	shll	$16, %eax
	addl	$65536, %eax                    # imm = 0x10000
	shll	$24, %edx
	orl	%ecx, %edx
	orl	%eax, %edx
	movslq	%edx, %rax
	addq	$32, %rsp
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 getGmDate;
	.scl	2;
	.type	32;
	.endef
	.globl	getGmDate                       # -- Begin function getGmDate
	.p2align	4, 0x90
getGmDate:                              # @getGmDate
.seh_proc getGmDate
# %bb.0:
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	leaq	Tv(%rip), %rsi
	movq	%rsi, %rcx
	xorl	%edx, %edx
	callq	gettimeofday
	movq	%rsi, %rcx
	callq	gmtime
	movq	%rax, Time(%rip)
	movl	$1900, %ecx                     # imm = 0x76C
	addl	20(%rax), %ecx
	movl	12(%rax), %edx
	movl	16(%rax), %eax
	shll	$16, %eax
	addl	$65536, %eax                    # imm = 0x10000
	shll	$24, %edx
	orl	%ecx, %edx
	orl	%eax, %edx
	movslq	%edx, %rax
	addq	$32, %rsp
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 getTime;
	.scl	2;
	.type	32;
	.endef
	.globl	getTime                         # -- Begin function getTime
	.p2align	4, 0x90
getTime:                                # @getTime
.seh_proc getTime
# %bb.0:
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	leaq	Tv(%rip), %rsi
	movq	%rsi, %rcx
	xorl	%edx, %edx
	callq	gettimeofday
	movq	%rsi, %rcx
	callq	localtime
	movslq	8(%rax), %rcx
	imulq	$3600, %rcx, %rcx               # imm = 0xE10
	movslq	4(%rax), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rcx, %rdx
	movslq	(%rax), %rax
	addq	%rdx, %rax
	addq	$32, %rsp
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 getGmTime;
	.scl	2;
	.type	32;
	.endef
	.globl	getGmTime                       # -- Begin function getGmTime
	.p2align	4, 0x90
getGmTime:                              # @getGmTime
# %bb.0:
	movq	Time(%rip), %rax
	testq	%rax, %rax
	je	.LBB765_1
# %bb.2:
	movslq	8(%rax), %rcx
	imulq	$3600, %rcx, %rcx               # imm = 0xE10
	movslq	4(%rax), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rcx, %rdx
	movslq	(%rax), %rax
	addq	%rdx, %rax
	retq
.LBB765_1:
	movq	$-1, %rax
	retq
                                        # -- End function
	.def	 ulimStk;
	.scl	2;
	.type	32;
	.endef
	.globl	ulimStk                         # -- Begin function ulimStk
	.p2align	4, 0x90
ulimStk:                                # @ulimStk
.seh_proc ulimStk
# %bb.0:
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$48, %rsp
	.seh_stackalloc 48
	.seh_endprologue
	leaq	32(%rsp), %rsi
	movl	$3, %ecx
	movq	%rsi, %rdx
	callq	getrlimit
	testl	%eax, %eax
	js	.LBB766_4
# %bb.1:
	movq	32(%rsp), %rax
	cmpq	$-1, %rax
	je	.LBB766_4
# %bb.2:
	subq	%rax, %rsi
	addq	$16384, %rsi                    # imm = 0x4000
	jmp	.LBB766_5
.LBB766_4:
	xorl	%esi, %esi
.LBB766_5:
	movq	%rsi, %rax
	addq	$48, %rsp
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 fileInfo;
	.scl	2;
	.type	32;
	.endef
	.globl	fileInfo                        # -- Begin function fileInfo
	.p2align	4, 0x90
fileInfo:                               # @fileInfo
.seh_proc fileInfo
# %bb.0:
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$168, %rsp
	.seh_stackalloc 168
	.seh_endprologue
	movq	%r8, %rdi
	movq	%rdx, %rax
	leaq	40(%rsp), %rdx
	testl	%ecx, %ecx
	je	.LBB767_2
# %bb.1:
	movq	%rax, %rcx
	callq	stat
	testl	%eax, %eax
	js	.LBB767_4
.LBB767_5:
	leaq	104(%rsp), %rcx
	callq	gmtime
	movq	%rax, %rcx
	movl	$1900, %eax                     # imm = 0x76C
	addl	20(%rcx), %eax
	movl	12(%rcx), %edx
	movl	16(%rcx), %esi
	shll	$16, %esi
	addl	$65536, %esi                    # imm = 0x10000
	shll	$24, %edx
	orl	%eax, %edx
	orl	%esi, %edx
	imull	$3600, 8(%rcx), %esi            # imm = 0xE10
	movslq	%edx, %rax
	imull	$60, 4(%rcx), %edx
	addl	%esi, %edx
	addl	(%rcx), %edx
	shlq	$34, %rdx
	shlq	$2, %rax
	orq	%rdx, %rax
	movzwl	56(%rsp), %ecx
	andl	$61440, %ecx                    # imm = 0xF000
	cmpl	$32768, %ecx                    # imm = 0x8000
	je	.LBB767_9
# %bb.6:
	movzwl	%cx, %ecx
	cmpl	$16384, %ecx                    # imm = 0x4000
	jne	.LBB767_8
# %bb.7:
	orq	$1, %rax
	jmp	.LBB767_10
.LBB767_2:
	movq	%rax, %rcx
	callq	lstat
	testl	%eax, %eax
	jns	.LBB767_5
.LBB767_4:
	movq	$-1, %rax
	jmp	.LBB767_10
.LBB767_9:
	movq	80(%rsp), %rcx
	movq	%rcx, (%rdi)
	jmp	.LBB767_10
.LBB767_8:
	orq	$2, %rax
.LBB767_10:
	addq	$168, %rsp
	popq	%rdi
	popq	%rsi
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 pollIn;
	.scl	2;
	.type	32;
	.endef
	.globl	pollIn                          # -- Begin function pollIn
	.p2align	4, 0x90
pollIn:                                 # @pollIn
# %bb.0:
	movl	%ecx, (%rdx)
	movw	$1, 4(%rdx)
	retq
                                        # -- End function
	.def	 pollOut;
	.scl	2;
	.type	32;
	.endef
	.globl	pollOut                         # -- Begin function pollOut
	.p2align	4, 0x90
pollOut:                                # @pollOut
# %bb.0:
	movl	%ecx, (%rdx)
	movw	$4, 4(%rdx)
	retq
                                        # -- End function
	.def	 pollIgn;
	.scl	2;
	.type	32;
	.endef
	.globl	pollIgn                         # -- Begin function pollIgn
	.p2align	4, 0x90
pollIgn:                                # @pollIgn
# %bb.0:
	movl	$-1, (%rcx)
	retq
                                        # -- End function
	.def	 gPoll;
	.scl	2;
	.type	32;
	.endef
	.globl	gPoll                           # -- Begin function gPoll
	.p2align	4, 0x90
gPoll:                                  # @gPoll
# %bb.0:
	movl	$2147483648, %eax               # imm = 0x80000000
	cmpq	%rax, %r8
	jl	.LBB771_5
# %bb.1:
	movslq	%edx, %rax
	.p2align	4, 0x90
.LBB771_2:                              # =>This Inner Loop Header: Depth=1
	testq	%rax, %rax
	jle	.LBB771_6
# %bb.3:                                #   in Loop: Header=BB771_2 Depth=1
	cmpl	$0, -8(%rcx,%rax,8)
	leaq	-1(%rax), %rax
	js	.LBB771_2
# %bb.4:
	movl	$-1, %r8d
.LBB771_5:
                                        # kill: def $r8d killed $r8d killed $r8
	jmp	poll                            # TAILCALL
.LBB771_6:
	xorl	%eax, %eax
	retq
                                        # -- End function
	.def	 readyIn;
	.scl	2;
	.type	32;
	.endef
	.globl	readyIn                         # -- Begin function readyIn
	.p2align	4, 0x90
readyIn:                                # @readyIn
# %bb.0:
	cmpl	$0, (%rcx)
	js	.LBB772_1
# %bb.2:
	movl	$-1, (%rcx)
	xorl	%eax, %eax
	testb	$57, 6(%rcx)
	setne	%al
	retq
.LBB772_1:
	xorl	%eax, %eax
	retq
                                        # -- End function
	.def	 readyOut;
	.scl	2;
	.type	32;
	.endef
	.globl	readyOut                        # -- Begin function readyOut
	.p2align	4, 0x90
readyOut:                               # @readyOut
# %bb.0:
	cmpl	$0, (%rcx)
	js	.LBB773_1
# %bb.2:
	movl	$-1, (%rcx)
	movl	$1, %eax
	retq
.LBB773_1:
	xorl	%eax, %eax
	retq
                                        # -- End function
	.def	 rdLock;
	.scl	2;
	.type	32;
	.endef
	.globl	rdLock                          # -- Begin function rdLock
	.p2align	4, 0x90
rdLock:                                 # @rdLock
.seh_proc rdLock
# %bb.0:
	subq	$72, %rsp
	.seh_stackalloc 72
	.seh_endprologue
	movl	$1, 40(%rsp)
	movq	%rdx, 48(%rsp)
	movq	%r8, 56(%rsp)
	cmpl	$1, %r9d
	movl	$9, %edx
	sbbl	$0, %edx
	leaq	40(%rsp), %r8
	callq	fcntl
	nop
	addq	$72, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 wrLock;
	.scl	2;
	.type	32;
	.endef
	.globl	wrLock                          # -- Begin function wrLock
	.p2align	4, 0x90
wrLock:                                 # @wrLock
.seh_proc wrLock
# %bb.0:
	subq	$72, %rsp
	.seh_stackalloc 72
	.seh_endprologue
	movl	$2, 40(%rsp)
	movq	%rdx, 48(%rsp)
	movq	%r8, 56(%rsp)
	cmpl	$1, %r9d
	movl	$9, %edx
	sbbl	$0, %edx
	leaq	40(%rsp), %r8
	callq	fcntl
	nop
	addq	$72, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 unLock;
	.scl	2;
	.type	32;
	.endef
	.globl	unLock                          # -- Begin function unLock
	.p2align	4, 0x90
unLock:                                 # @unLock
.seh_proc unLock
# %bb.0:
	subq	$72, %rsp
	.seh_stackalloc 72
	.seh_endprologue
	movl	$3, 40(%rsp)
	movq	%rdx, 48(%rsp)
	movq	%r8, 56(%rsp)
	leaq	40(%rsp), %r8
	movl	$8, %edx
	callq	fcntl
	nop
	addq	$72, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 getLock;
	.scl	2;
	.type	32;
	.endef
	.globl	getLock                         # -- Begin function getLock
	.p2align	4, 0x90
getLock:                                # @getLock
.seh_proc getLock
# %bb.0:
	subq	$72, %rsp
	.seh_stackalloc 72
	.seh_endprologue
	movl	$2, 40(%rsp)
	movq	%rdx, 48(%rsp)
	movq	%r8, 56(%rsp)
	leaq	40(%rsp), %r8
	movl	$7, %edx
	callq	fcntl
	xorl	%ecx, %ecx
	cmpw	$3, 40(%rsp)
	je	.LBB777_2
# %bb.1:
	movl	64(%rsp), %ecx
.LBB777_2:
	testl	%eax, %eax
	movl	$-1, %eax
	cmovnsl	%ecx, %eax
	addq	$72, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 name;
	.scl	2;
	.type	32;
	.endef
	.globl	name                            # -- Begin function name
	.p2align	4, 0x90
name:                                   # @name
# %bb.0:
	movq	%rcx, %rax
	testb	$6, %al
	jne	.LBB778_3
	.p2align	4, 0x90
.LBB778_1:                              # =>This Inner Loop Header: Depth=1
	movq	8(%rax), %rax
	testb	$6, %al
	je	.LBB778_1
.LBB778_3:
	retq
                                        # -- End function
	.def	 number;
	.scl	2;
	.type	32;
	.endef
	.globl	number                          # -- Begin function number
	.p2align	4, 0x90
number:                                 # @number
# %bb.0:
	testb	$2, %cl
	jne	.LBB779_1
# %bb.2:
	movq	-4(%rcx), %rdx
	jmp	.LBB779_3
.LBB779_1:
	movq	%rcx, %rdx
	shrq	$4, %rdx
.LBB779_3:
	movq	%rdx, %rax
	negq	%rax
	testb	$8, %cl
	cmoveq	%rdx, %rax
	retq
                                        # -- End function
	.def	 length;
	.scl	2;
	.type	32;
	.endef
	.globl	length                          # -- Begin function length
	.p2align	4, 0x90
length:                                 # @length
# %bb.0:
	xorl	%eax, %eax
	testb	$15, %cl
	jne	.LBB780_3
	.p2align	4, 0x90
.LBB780_1:                              # =>This Inner Loop Header: Depth=1
	movq	8(%rcx), %rcx
	addq	$1, %rax
	testb	$15, %cl
	je	.LBB780_1
.LBB780_3:
	retq
                                        # -- End function
	.def	 box64;
	.scl	2;
	.type	32;
	.endef
	.globl	box64                           # -- Begin function box64
	.p2align	4, 0x90
box64:                                  # @box64
# %bb.0:
	movq	%rcx, %rax
	shrq	$60, %rax
	jne	.LBB781_2
# %bb.1:
	shlq	$4, %rcx
	orq	$2, %rcx
	movq	%rcx, %rax
	retq
.LBB781_2:
	jmp	boxNum                          # TAILCALL
                                        # -- End function
	.def	 boxFloat;
	.scl	2;
	.type	32;
	.endef
	.section	.rdata,"dr"
	.p2align	4                               # -- Begin function boxFloat
.LCPI782_0:
	.long	0x80000000                      # float -0
	.long	0x80000000                      # float -0
	.long	0x80000000                      # float -0
	.long	0x80000000                      # float -0
.LCPI782_1:
	.long	0x3f000000                      # float 0.5
.LCPI782_2:
	.long	0x5f800000                      # float 1.84467441E+19
.LCPI782_3:
	.quad	0x43f0000000000000              # double 1.8446744073709552E+19
.LCPI782_4:
	.quad	0x43e0000000000000              # double 9.2233720368547758E+18
.LCPI782_5:
	.long	0x1f800000                      # float 5.42101086E-20
.LCPI782_6:
	.long	0x5f000000                      # float 9.22337203E+18
	.text
	.globl	boxFloat
	.p2align	4, 0x90
boxFloat:                               # @boxFloat
.seh_proc boxFloat
# %bb.0:
	subq	$56, %rsp
	.seh_stackalloc 56
	movaps	%xmm6, 32(%rsp)                 # 16-byte Spill
	.seh_savexmm %xmm6, 32
	.seh_endprologue
	movd	%ecx, %xmm0
	xorps	%xmm6, %xmm6
	cvtsi2ss	%rdx, %xmm6
	mulss	%xmm0, %xmm6
	movaps	%xmm6, %xmm0
	callq	__fpclassifyf
	testl	%eax, %eax
	je	.LBB782_1
# %bb.2:
	movaps	%xmm6, %xmm0
	callq	__fpclassifyf
	movaps	%xmm6, %xmm0
	callq	__fpclassifyf
	cmpl	$1, %eax
	jne	.LBB782_4
# %bb.3:
	leaq	SymTab+280(%rip), %rax
	jmp	.LBB782_10
.LBB782_1:
	leaq	SymTab+8(%rip), %rax
	jmp	.LBB782_10
.LBB782_4:
	movl	$0, Fsign(%rip)
	xorps	%xmm0, %xmm0
	ucomiss	%xmm6, %xmm0
	jbe	.LBB782_6
# %bb.5:
	movl	$1, Fsign(%rip)
	xorps	.LCPI782_0(%rip), %xmm6
.LBB782_6:
	addss	.LCPI782_1(%rip), %xmm6
	movss	.LCPI782_2(%rip), %xmm0         # xmm0 = mem[0],zero,zero,zero
	ucomiss	%xmm6, %xmm0
	jbe	.LBB782_9
# %bb.7:
	movss	.LCPI782_6(%rip), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movaps	%xmm6, %xmm1
	subss	%xmm0, %xmm1
	cvttss2si	%xmm1, %rax
	movabsq	$-9223372036854775808, %rcx     # imm = 0x8000000000000000
	xorq	%rax, %rcx
	cvttss2si	%xmm6, %rax
	ucomiss	%xmm0, %xmm6
	cmovaeq	%rcx, %rax
	movq	%rax, %rcx
	shrq	$60, %rcx
	jne	.LBB782_11
# %bb.8:
	shlq	$4, %rax
	orq	$2, %rax
	jmp	.LBB782_10
.LBB782_9:
	xorps	%xmm0, %xmm0
	cvtss2sd	%xmm6, %xmm0
	movsd	.LCPI782_3(%rip), %xmm1         # xmm1 = mem[0],zero
	callq	fmod
	movsd	.LCPI782_4(%rip), %xmm1         # xmm1 = mem[0],zero
	movapd	%xmm0, %xmm2
	subsd	%xmm1, %xmm2
	cvttsd2si	%xmm2, %rax
	movabsq	$-9223372036854775808, %rcx     # imm = 0x8000000000000000
	xorq	%rax, %rcx
	cvttsd2si	%xmm0, %rax
	ucomisd	%xmm1, %xmm0
	cmovaeq	%rcx, %rax
	movq	%rax, Fdigit(%rip)
	mulss	.LCPI782_5(%rip), %xmm6
	movss	%xmm6, Fval(%rip)
	xorl	%eax, %eax
.LBB782_10:
	movaps	32(%rsp), %xmm6                 # 16-byte Reload
	addq	$56, %rsp
	retq
.LBB782_11:
	movq	%rax, %rcx
	movaps	32(%rsp), %xmm6                 # 16-byte Reload
	addq	$56, %rsp
	jmp	boxNum                          # TAILCALL
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 boxFlt;
	.scl	2;
	.type	32;
	.endef
	.section	.rdata,"dr"
	.p2align	3                               # -- Begin function boxFlt
.LCPI783_0:
	.long	0x5f800000                      # float 1.84467441E+19
	.zero	4
.LCPI783_1:
	.quad	0x43f0000000000000              # double 1.8446744073709552E+19
.LCPI783_2:
	.quad	0x43e0000000000000              # double 9.2233720368547758E+18
.LCPI783_3:
	.long	0x1f800000                      # float 5.42101086E-20
.LCPI783_4:
	.long	0x5f000000                      # float 9.22337203E+18
	.text
	.globl	boxFlt
	.p2align	4, 0x90
boxFlt:                                 # @boxFlt
.seh_proc boxFlt
# %bb.0:
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movss	Fval(%rip), %xmm0               # xmm0 = mem[0],zero,zero,zero
	movss	.LCPI783_0(%rip), %xmm1         # xmm1 = mem[0],zero,zero,zero
	ucomiss	%xmm0, %xmm1
	jbe	.LBB783_3
# %bb.1:
	movss	.LCPI783_4(%rip), %xmm1         # xmm1 = mem[0],zero,zero,zero
	movaps	%xmm0, %xmm2
	subss	%xmm1, %xmm2
	cvttss2si	%xmm2, %rax
	movabsq	$-9223372036854775808, %rcx     # imm = 0x8000000000000000
	xorq	%rax, %rcx
	cvttss2si	%xmm0, %rax
	ucomiss	%xmm1, %xmm0
	cmovaeq	%rcx, %rax
	movq	%rax, %rcx
	shrq	$60, %rcx
	jne	.LBB783_5
# %bb.2:
	shlq	$4, %rax
	orq	$2, %rax
	jmp	.LBB783_4
.LBB783_3:
	cvtss2sd	%xmm0, %xmm0
	movsd	.LCPI783_1(%rip), %xmm1         # xmm1 = mem[0],zero
	callq	fmod
	movsd	.LCPI783_2(%rip), %xmm1         # xmm1 = mem[0],zero
	movapd	%xmm0, %xmm2
	subsd	%xmm1, %xmm2
	cvttsd2si	%xmm2, %rax
	movabsq	$-9223372036854775808, %rcx     # imm = 0x8000000000000000
	xorq	%rax, %rcx
	cvttsd2si	%xmm0, %rax
	ucomisd	%xmm1, %xmm0
	cmovaeq	%rcx, %rax
	movq	%rax, Fdigit(%rip)
	movss	Fval(%rip), %xmm0               # xmm0 = mem[0],zero,zero,zero
	mulss	.LCPI783_3(%rip), %xmm0
	movss	%xmm0, Fval(%rip)
	xorl	%eax, %eax
.LBB783_4:
	addq	$40, %rsp
	retq
.LBB783_5:
	movq	%rax, %rcx
	addq	$40, %rsp
	jmp	boxNum                          # TAILCALL
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 boxDouble;
	.scl	2;
	.type	32;
	.endef
	.section	.rdata,"dr"
	.p2align	4                               # -- Begin function boxDouble
.LCPI784_0:
	.quad	0x8000000000000000              # double -0
	.quad	0x8000000000000000              # double -0
.LCPI784_1:
	.quad	0x3fe0000000000000              # double 0.5
.LCPI784_2:
	.quad	0x43f0000000000000              # double 1.8446744073709552E+19
.LCPI784_3:
	.quad	0x43e0000000000000              # double 9.2233720368547758E+18
.LCPI784_4:
	.quad	0x3bf0000000000000              # double 5.4210108624275222E-20
	.text
	.globl	boxDouble
	.p2align	4, 0x90
boxDouble:                              # @boxDouble
.seh_proc boxDouble
# %bb.0:
	subq	$56, %rsp
	.seh_stackalloc 56
	movaps	%xmm6, 32(%rsp)                 # 16-byte Spill
	.seh_savexmm %xmm6, 32
	.seh_endprologue
	movq	%rcx, %xmm0
	xorps	%xmm6, %xmm6
	cvtsi2sd	%rdx, %xmm6
	mulsd	%xmm0, %xmm6
	movapd	%xmm6, %xmm0
	callq	__fpclassifyd
	testl	%eax, %eax
	je	.LBB784_1
# %bb.2:
	movapd	%xmm6, %xmm0
	callq	__fpclassifyd
	movapd	%xmm6, %xmm0
	callq	__fpclassifyd
	cmpl	$1, %eax
	jne	.LBB784_4
# %bb.3:
	leaq	SymTab+280(%rip), %rax
	jmp	.LBB784_10
.LBB784_1:
	leaq	SymTab+8(%rip), %rax
	jmp	.LBB784_10
.LBB784_4:
	movl	$0, Fsign(%rip)
	xorpd	%xmm0, %xmm0
	ucomisd	%xmm6, %xmm0
	jbe	.LBB784_6
# %bb.5:
	movl	$1, Fsign(%rip)
	xorpd	.LCPI784_0(%rip), %xmm6
.LBB784_6:
	addsd	.LCPI784_1(%rip), %xmm6
	movsd	.LCPI784_2(%rip), %xmm0         # xmm0 = mem[0],zero
	ucomisd	%xmm6, %xmm0
	jbe	.LBB784_9
# %bb.7:
	movsd	.LCPI784_3(%rip), %xmm0         # xmm0 = mem[0],zero
	movapd	%xmm6, %xmm1
	subsd	%xmm0, %xmm1
	cvttsd2si	%xmm1, %rax
	movabsq	$-9223372036854775808, %rcx     # imm = 0x8000000000000000
	xorq	%rax, %rcx
	cvttsd2si	%xmm6, %rax
	ucomisd	%xmm0, %xmm6
	cmovaeq	%rcx, %rax
	movq	%rax, %rcx
	shrq	$60, %rcx
	jne	.LBB784_11
# %bb.8:
	shlq	$4, %rax
	orq	$2, %rax
	jmp	.LBB784_10
.LBB784_9:
	movsd	.LCPI784_2(%rip), %xmm1         # xmm1 = mem[0],zero
	movapd	%xmm6, %xmm0
	callq	fmod
	movsd	.LCPI784_3(%rip), %xmm1         # xmm1 = mem[0],zero
	movapd	%xmm0, %xmm2
	subsd	%xmm1, %xmm2
	cvttsd2si	%xmm2, %rax
	movabsq	$-9223372036854775808, %rcx     # imm = 0x8000000000000000
	xorq	%rax, %rcx
	cvttsd2si	%xmm0, %rax
	ucomisd	%xmm1, %xmm0
	cmovaeq	%rcx, %rax
	movq	%rax, Fdigit(%rip)
	mulsd	.LCPI784_4(%rip), %xmm6
	movsd	%xmm6, Fval(%rip)
	xorl	%eax, %eax
.LBB784_10:
	movaps	32(%rsp), %xmm6                 # 16-byte Reload
	addq	$56, %rsp
	retq
.LBB784_11:
	movq	%rax, %rcx
	movaps	32(%rsp), %xmm6                 # 16-byte Reload
	addq	$56, %rsp
	jmp	boxNum                          # TAILCALL
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 boxDbl;
	.scl	2;
	.type	32;
	.endef
	.section	.rdata,"dr"
	.p2align	3                               # -- Begin function boxDbl
.LCPI785_0:
	.quad	0x43f0000000000000              # double 1.8446744073709552E+19
.LCPI785_1:
	.quad	0x43e0000000000000              # double 9.2233720368547758E+18
.LCPI785_2:
	.quad	0x3bf0000000000000              # double 5.4210108624275222E-20
	.text
	.globl	boxDbl
	.p2align	4, 0x90
boxDbl:                                 # @boxDbl
.seh_proc boxDbl
# %bb.0:
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movsd	Fval(%rip), %xmm0               # xmm0 = mem[0],zero
	movsd	.LCPI785_0(%rip), %xmm1         # xmm1 = mem[0],zero
	ucomisd	%xmm0, %xmm1
	jbe	.LBB785_3
# %bb.1:
	movsd	.LCPI785_1(%rip), %xmm1         # xmm1 = mem[0],zero
	movapd	%xmm0, %xmm2
	subsd	%xmm1, %xmm2
	cvttsd2si	%xmm2, %rax
	movabsq	$-9223372036854775808, %rcx     # imm = 0x8000000000000000
	xorq	%rax, %rcx
	cvttsd2si	%xmm0, %rax
	ucomisd	%xmm1, %xmm0
	cmovaeq	%rcx, %rax
	movq	%rax, %rcx
	shrq	$60, %rcx
	jne	.LBB785_5
# %bb.2:
	shlq	$4, %rax
	orq	$2, %rax
	jmp	.LBB785_4
.LBB785_3:
	movsd	.LCPI785_0(%rip), %xmm1         # xmm1 = mem[0],zero
	callq	fmod
	movsd	.LCPI785_1(%rip), %xmm1         # xmm1 = mem[0],zero
	movapd	%xmm0, %xmm2
	subsd	%xmm1, %xmm2
	cvttsd2si	%xmm2, %rax
	movabsq	$-9223372036854775808, %rcx     # imm = 0x8000000000000000
	xorq	%rax, %rcx
	cvttsd2si	%xmm0, %rax
	ucomisd	%xmm1, %xmm0
	cmovaeq	%rcx, %rax
	movq	%rax, Fdigit(%rip)
	movsd	Fval(%rip), %xmm0               # xmm0 = mem[0],zero
	mulsd	.LCPI785_2(%rip), %xmm0
	movsd	%xmm0, Fval(%rip)
	xorl	%eax, %eax
.LBB785_4:
	addq	$40, %rsp
	retq
.LBB785_5:
	movq	%rax, %rcx
	addq	$40, %rsp
	jmp	boxNum                          # TAILCALL
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 bufFloat;
	.scl	2;
	.type	32;
	.endef
	.section	.rdata,"dr"
	.p2align	4                               # -- Begin function bufFloat
.LCPI786_0:
	.long	0x5f800000                      # float 1.84467441E+19
	.zero	12
.LCPI786_1:
	.long	0x80000000                      # float -0
	.long	0x80000000                      # float -0
	.long	0x80000000                      # float -0
	.long	0x80000000                      # float -0
	.text
	.globl	bufFloat
	.p2align	4, 0x90
bufFloat:                               # @bufFloat
# %bb.0:
	testb	$2, %cl
	jne	.LBB786_1
# %bb.2:
	movq	-4(%rcx), %r9
	movq	4(%rcx), %r10
	testq	%r9, %r9
	js	.LBB786_3
# %bb.4:
	cvtsi2ss	%r9, %xmm0
	testb	$2, %r10b
	je	.LBB786_7
.LBB786_6:
	movss	.LCPI786_0(%rip), %xmm1         # xmm1 = mem[0],zero,zero,zero
.LBB786_12:
	shrq	$4, %r10
	xorps	%xmm2, %xmm2
	cvtsi2ss	%r10, %xmm2
	mulss	%xmm1, %xmm2
	addss	%xmm0, %xmm2
	jmp	.LBB786_13
.LBB786_1:
	movq	%rcx, %rax
	shrq	$4, %rax
	cvtsi2ss	%rax, %xmm2
.LBB786_13:
	xorps	%xmm0, %xmm0
	cvtsi2ss	%rdx, %xmm0
	divss	%xmm0, %xmm2
	testb	$8, %cl
	je	.LBB786_15
# %bb.14:
	xorps	.LCPI786_1(%rip), %xmm2
.LBB786_15:
	movss	%xmm2, (%r8)
	retq
.LBB786_3:
	movq	%r9, %rax
	shrq	%rax
	andl	$1, %r9d
	orq	%rax, %r9
	cvtsi2ss	%r9, %xmm0
	addss	%xmm0, %xmm0
	testb	$2, %r10b
	jne	.LBB786_6
.LBB786_7:                              # %.preheader
	movss	.LCPI786_0(%rip), %xmm2         # xmm2 = mem[0],zero,zero,zero
	movaps	%xmm2, %xmm1
	jmp	.LBB786_8
	.p2align	4, 0x90
.LBB786_10:                             #   in Loop: Header=BB786_8 Depth=1
	xorps	%xmm3, %xmm3
	cvtsi2ss	%rax, %xmm3
.LBB786_11:                             #   in Loop: Header=BB786_8 Depth=1
	mulss	%xmm1, %xmm3
	addss	%xmm3, %xmm0
	mulss	%xmm2, %xmm1
	testb	$2, %r10b
	jne	.LBB786_12
.LBB786_8:                              # =>This Inner Loop Header: Depth=1
	movq	-4(%r10), %rax
	movq	4(%r10), %r10
	testq	%rax, %rax
	jns	.LBB786_10
# %bb.9:                                #   in Loop: Header=BB786_8 Depth=1
	movq	%rax, %r9
	shrq	%r9
	andl	$1, %eax
	orq	%r9, %rax
	xorps	%xmm3, %xmm3
	cvtsi2ss	%rax, %xmm3
	addss	%xmm3, %xmm3
	jmp	.LBB786_11
                                        # -- End function
	.def	 bufDouble;
	.scl	2;
	.type	32;
	.endef
	.section	.rdata,"dr"
	.p2align	4                               # -- Begin function bufDouble
.LCPI787_0:
	.long	1127219200                      # 0x43300000
	.long	1160773632                      # 0x45300000
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI787_1:
	.quad	0x4330000000000000              # double 4503599627370496
	.quad	0x4530000000000000              # double 1.9342813113834067E+25
.LCPI787_2:
	.quad	0x43f0000000000000              # double 1.8446744073709552E+19
	.zero	8
.LCPI787_3:
	.quad	0x8000000000000000              # double -0
	.quad	0x8000000000000000              # double -0
	.text
	.globl	bufDouble
	.p2align	4, 0x90
bufDouble:                              # @bufDouble
.seh_proc bufDouble
# %bb.0:
	subq	$24, %rsp
	.seh_stackalloc 24
	movapd	%xmm6, (%rsp)                   # 16-byte Spill
	.seh_savexmm %xmm6, 0
	.seh_endprologue
	testb	$2, %cl
	jne	.LBB787_1
# %bb.2:
	movsd	-4(%rcx), %xmm1                 # xmm1 = mem[0],zero
	unpcklps	.LCPI787_0(%rip), %xmm1         # xmm1 = xmm1[0],mem[0],xmm1[1],mem[1]
	subpd	.LCPI787_1(%rip), %xmm1
	movapd	%xmm1, %xmm0
	unpckhpd	%xmm1, %xmm0                    # xmm0 = xmm0[1],xmm1[1]
	addsd	%xmm1, %xmm0
	movq	4(%rcx), %rax
	testb	$2, %al
	jne	.LBB787_3
# %bb.4:                                # %.preheader
	movsd	.LCPI787_2(%rip), %xmm2         # xmm2 = mem[0],zero
	movapd	.LCPI787_0(%rip), %xmm3         # xmm3 = [1127219200,1160773632,0,0]
	movapd	.LCPI787_1(%rip), %xmm4         # xmm4 = [4.503599627370496E+15,1.9342813113834067E+25]
	movapd	%xmm2, %xmm1
	.p2align	4, 0x90
.LBB787_5:                              # =>This Inner Loop Header: Depth=1
	movsd	-4(%rax), %xmm5                 # xmm5 = mem[0],zero
	unpcklps	%xmm3, %xmm5                    # xmm5 = xmm5[0],xmm3[0],xmm5[1],xmm3[1]
	subpd	%xmm4, %xmm5
	movapd	%xmm5, %xmm6
	unpckhpd	%xmm5, %xmm6                    # xmm6 = xmm6[1],xmm5[1]
	addsd	%xmm5, %xmm6
	mulsd	%xmm1, %xmm6
	addsd	%xmm6, %xmm0
	mulsd	%xmm2, %xmm1
	movq	4(%rax), %rax
	testb	$2, %al
	je	.LBB787_5
	jmp	.LBB787_6
.LBB787_1:
	movq	%rcx, %rax
	shrq	$4, %rax
	cvtsi2sd	%rax, %xmm2
	jmp	.LBB787_7
.LBB787_3:
	movsd	.LCPI787_2(%rip), %xmm1         # xmm1 = mem[0],zero
.LBB787_6:
	shrq	$4, %rax
	xorps	%xmm2, %xmm2
	cvtsi2sd	%rax, %xmm2
	mulsd	%xmm1, %xmm2
	addsd	%xmm0, %xmm2
.LBB787_7:
	xorps	%xmm0, %xmm0
	cvtsi2sd	%rdx, %xmm0
	divsd	%xmm0, %xmm2
	testb	$8, %cl
	je	.LBB787_9
# %bb.8:
	xorpd	.LCPI787_3(%rip), %xmm2
.LBB787_9:
	movsd	%xmm2, (%r8)
	movaps	(%rsp), %xmm6                   # 16-byte Reload
	addq	$24, %rsp
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 dlOpen;
	.scl	2;
	.type	32;
	.endef
	.globl	dlOpen                          # -- Begin function dlOpen
	.p2align	4, 0x90
dlOpen:                                 # @dlOpen
# %bb.0:
	movl	$5, %edx
	jmp	dlopen                          # TAILCALL
                                        # -- End function
	.def	 ffiPrep;
	.scl	2;
	.type	32;
	.endef
	.globl	ffiPrep                         # -- Begin function ffiPrep
	.p2align	4, 0x90
ffiPrep:                                # @ffiPrep
.seh_proc ffiPrep
# %bb.0:
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$48, %rsp
	.seh_stackalloc 48
	.seh_endprologue
	movq	%rdx, %r14
	movq	%rcx, %r15
	movq	(%r8), %r12
	movq	8(%r8), %rdi
	xorl	%ebx, %ebx
	testb	$15, %dil
	jne	.LBB789_3
# %bb.1:                                # %.preheader
	movq	%rdi, %rax
	.p2align	4, 0x90
.LBB789_2:                              # =>This Inner Loop Header: Depth=1
	movq	8(%rax), %rax
	addq	$1, %rbx
	testb	$15, %al
	je	.LBB789_2
.LBB789_3:
	leaq	40(,%rbx,8), %rcx
	callq	malloc
	movq	%rax, %r13
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %r12
	jne	.LBB789_5
# %bb.4:
	leaq	ffi_type_void(%rip), %r9
	jmp	.LBB789_20
.LBB789_5:
	leaq	SymTab+280(%rip), %rax
	leaq	ffi_type_sint64(%rip), %r9
	cmpq	%rax, %r12
	je	.LBB789_20
# %bb.6:
	leaq	SymTab+296(%rip), %rax
	cmpq	%rax, %r12
	je	.LBB789_20
# %bb.7:
	leaq	SymTab+376(%rip), %rax
	cmpq	%rax, %r12
	jne	.LBB789_9
# %bb.8:
	leaq	ffi_type_uint64(%rip), %r9
	jmp	.LBB789_20
.LBB789_9:
	leaq	SymTab+360(%rip), %rax
	cmpq	%rax, %r12
	jne	.LBB789_11
# %bb.10:
	leaq	ffi_type_sint32(%rip), %r9
	jmp	.LBB789_20
.LBB789_11:
	leaq	SymTab+312(%rip), %rax
	cmpq	%rax, %r12
	jne	.LBB789_13
# %bb.12:
	leaq	ffi_type_uint32(%rip), %r9
	jmp	.LBB789_20
.LBB789_13:
	leaq	SymTab+392(%rip), %rax
	cmpq	%rax, %r12
	jne	.LBB789_15
# %bb.14:
	leaq	ffi_type_sint16(%rip), %r9
	jmp	.LBB789_20
.LBB789_15:
	leaq	SymTab+344(%rip), %rax
	cmpq	%rax, %r12
	jne	.LBB789_17
# %bb.16:
	leaq	ffi_type_uint8(%rip), %r9
	jmp	.LBB789_20
.LBB789_17:
	testb	$2, %r12b
	jne	.LBB789_19
# %bb.18:
	leaq	ffi_type_pointer(%rip), %r9
	jmp	.LBB789_20
.LBB789_19:
	testb	$8, %r12b
	leaq	ffi_type_double(%rip), %rax
	leaq	ffi_type_float(%rip), %r9
	cmoveq	%rax, %r9
.LBB789_20:
	testl	%ebx, %ebx
	jle	.LBB789_27
# %bb.21:
	xorl	%eax, %eax
	leaq	ffi_type_sint64(%rip), %rdx
	leaq	ffi_type_pointer(%rip), %r11
	leaq	ffi_type_double(%rip), %r8
	leaq	ffi_type_float(%rip), %r10
	jmp	.LBB789_22
	.p2align	4, 0x90
.LBB789_26:                             #   in Loop: Header=BB789_22 Depth=1
	movq	%rcx, 40(%r13,%rax,8)
	addq	$1, %rax
	movq	8(%rdi), %rdi
	cmpq	%rax, %rbx
	je	.LBB789_27
.LBB789_22:                             # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rsi
	movq	%rdx, %rcx
	testb	$6, %sil
	jne	.LBB789_26
# %bb.23:                               #   in Loop: Header=BB789_22 Depth=1
	movq	%r11, %rcx
	testb	$8, %sil
	jne	.LBB789_26
# %bb.24:                               #   in Loop: Header=BB789_22 Depth=1
	movq	8(%rsi), %rsi
	movq	%r11, %rcx
	testb	$2, %sil
	je	.LBB789_26
# %bb.25:                               #   in Loop: Header=BB789_22 Depth=1
	testb	$8, %sil
	movq	%r10, %rcx
	cmoveq	%r8, %rcx
	jmp	.LBB789_26
.LBB789_27:
	movq	%r13, %rax
	addq	$40, %rax
	movq	%rax, 32(%rsp)
	movq	%r13, %rcx
	movl	$2, %edx
	movl	%ebx, %r8d
	callq	ffi_prep_cif
	testl	%eax, %eax
	je	.LBB789_28
.LBB789_29:
	movq	%r13, %rcx
	callq	free
	xorl	%r13d, %r13d
	jmp	.LBB789_30
.LBB789_28:
	movq	%r15, %rcx
	movq	%r14, %rdx
	callq	dlsym
	movq	%rax, 32(%r13)
	testq	%rax, %rax
	je	.LBB789_29
.LBB789_30:
	movq	%r13, %rax
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 ffiCall;
	.scl	2;
	.type	32;
	.endef
	.section	.rdata,"dr"
	.p2align	4                               # -- Begin function ffiCall
.LCPI790_0:
	.long	0x5f800000                      # float 1.84467441E+19
	.zero	12
.LCPI790_1:
	.long	0x80000000                      # float -0
	.long	0x80000000                      # float -0
	.long	0x80000000                      # float -0
	.long	0x80000000                      # float -0
.LCPI790_2:
	.long	1127219200                      # 0x43300000
	.long	1160773632                      # 0x45300000
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI790_3:
	.quad	0x4330000000000000              # double 4503599627370496
	.quad	0x4530000000000000              # double 1.9342813113834067E+25
.LCPI790_4:
	.quad	0x43f0000000000000              # double 1.8446744073709552E+19
	.zero	8
.LCPI790_5:
	.quad	0x8000000000000000              # double -0
	.quad	0x8000000000000000              # double -0
	.text
	.globl	ffiCall
	.p2align	4, 0x90
ffiCall:                                # @ffiCall
.seh_proc ffiCall
# %bb.0:
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$168, %rsp
	.seh_stackalloc 168
	leaq	128(%rsp), %rbp
	.seh_setframe %rbp, 128
	movaps	%xmm11, 16(%rbp)                # 16-byte Spill
	.seh_savexmm %xmm11, 144
	movapd	%xmm10, (%rbp)                  # 16-byte Spill
	.seh_savexmm %xmm10, 128
	movapd	%xmm9, -16(%rbp)                # 16-byte Spill
	.seh_savexmm %xmm9, 112
	movapd	%xmm8, -32(%rbp)                # 16-byte Spill
	.seh_savexmm %xmm8, 96
	movaps	%xmm7, -48(%rbp)                # 16-byte Spill
	.seh_savexmm %xmm7, 80
	movapd	%xmm6, -64(%rbp)                # 16-byte Spill
	.seh_savexmm %xmm6, 64
	.seh_endprologue
	movq	%rdx, %rdi
	testb	$15, %dil
	je	.LBB790_1
# %bb.54:
	leaq	-80(%rbp), %r9
	leaq	-104(%rbp), %r8
	xorl	%esi, %esi
	movq	%r9, %r13
	xorl	%r14d, %r14d
	jmp	.LBB790_55
.LBB790_1:                              # %.preheader11
	movq	%rcx, -120(%rbp)                # 8-byte Spill
	xorl	%r14d, %r14d
	movq	%rdi, %rax
	.p2align	4, 0x90
.LBB790_2:                              # =>This Inner Loop Header: Depth=1
	movq	8(%rax), %rax
	addq	$1, %r14
	testb	$15, %al
	je	.LBB790_2
# %bb.3:
	leaq	15(,%r14,8), %rcx
	andq	$-16, %rcx
	movq	%rcx, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r13
	movq	%rcx, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %r9
	xorl	%r12d, %r12d
	movapd	.LCPI790_2(%rip), %xmm8         # xmm8 = [1127219200,1160773632,0,0]
	movapd	.LCPI790_3(%rip), %xmm10        # xmm10 = [4.503599627370496E+15,1.9342813113834067E+25]
	movsd	.LCPI790_4(%rip), %xmm6         # xmm6 = mem[0],zero
	movapd	.LCPI790_5(%rip), %xmm9         # xmm9 = [-0.0E+0,-0.0E+0]
	movss	.LCPI790_0(%rip), %xmm7         # xmm7 = mem[0],zero,zero,zero
	movaps	.LCPI790_1(%rip), %xmm11        # xmm11 = [-0.0E+0,-0.0E+0,-0.0E+0,-0.0E+0]
	movq	%rdi, -112(%rbp)                # 8-byte Spill
	movq	%r9, -88(%rbp)                  # 8-byte Spill
	jmp	.LBB790_4
	.p2align	4, 0x90
.LBB790_7:                              #   in Loop: Header=BB790_4 Depth=1
	movq	-4(%rdx), %rax
.LBB790_8:                              #   in Loop: Header=BB790_4 Depth=1
	movq	%rax, %rcx
	negq	%rcx
	testb	$8, %dl
	cmoveq	%rax, %rcx
.LBB790_9:                              #   in Loop: Header=BB790_4 Depth=1
	movq	%rcx, (%r15)
.LBB790_10:                             #   in Loop: Header=BB790_4 Depth=1
	addq	$1, %r12
	movq	8(%rdi), %rdi
	cmpq	%r12, %r14
	je	.LBB790_11
.LBB790_4:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB790_16 Depth 2
                                        #     Child Loop BB790_28 Depth 2
                                        #     Child Loop BB790_40 Depth 2
                                        #     Child Loop BB790_50 Depth 2
	movq	(%rdi), %rdx
	leaq	(,%r12,8), %r15
	addq	%r13, %r15
	movq	%r15, (%r9,%r12,8)
	testb	$6, %dl
	je	.LBB790_12
# %bb.5:                                #   in Loop: Header=BB790_4 Depth=1
	testb	$2, %dl
	je	.LBB790_7
# %bb.6:                                #   in Loop: Header=BB790_4 Depth=1
	movq	%rdx, %rax
	shrq	$4, %rax
	jmp	.LBB790_8
	.p2align	4, 0x90
.LBB790_12:                             #   in Loop: Header=BB790_4 Depth=1
	testb	$8, %dl
	movq	%rdi, -96(%rbp)                 # 8-byte Spill
	jne	.LBB790_13
# %bb.19:                               #   in Loop: Header=BB790_4 Depth=1
	movq	(%rdx), %rax
	movq	8(%rdx), %rcx
	leaq	SymTab+280(%rip), %rbx
	cmpq	%rbx, %rax
	je	.LBB790_9
# %bb.20:                               #   in Loop: Header=BB790_4 Depth=1
	testb	$2, %cl
	jne	.LBB790_21
# %bb.46:                               #   in Loop: Header=BB790_4 Depth=1
	testb	$15, %cl
	jne	.LBB790_53
# %bb.47:                               #   in Loop: Header=BB790_4 Depth=1
	movq	(%rcx), %rax
	movq	(%rax), %rbx
	shrq	$4, %rbx
	leaq	15(%rbx), %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rsi
	movq	%rsi, (%r15)
	movq	8(%rcx), %r15
	testb	$2, %r15b
	jne	.LBB790_48
	.p2align	4, 0x90
.LBB790_50:                             #   Parent Loop BB790_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	testb	$15, %r15b
	jne	.LBB790_10
# %bb.51:                               #   in Loop: Header=BB790_50 Depth=2
	testq	%rbx, %rbx
	jle	.LBB790_64
# %bb.52:                               #   in Loop: Header=BB790_50 Depth=2
	movq	(%r15), %rcx
	subq	$32, %rsp
	movq	%rsi, %rdx
	callq	natBuf
	addq	$32, %rsp
	subq	%rax, %rbx
	addq	%rax, %rsi
	movq	8(%r15), %r15
	testb	$2, %r15b
	movq	-88(%rbp), %r9                  # 8-byte Reload
	movq	-96(%rbp), %rdi                 # 8-byte Reload
	je	.LBB790_50
.LBB790_48:                             #   in Loop: Header=BB790_4 Depth=1
	testq	%rbx, %rbx
	jle	.LBB790_10
# %bb.49:                               #   in Loop: Header=BB790_4 Depth=1
	shrq	$4, %r15
	subq	$32, %rsp
	movq	%rsi, %rcx
	movl	%r15d, %edx
	movq	%rbx, %r8
	callq	memset
	movq	-96(%rbp), %rdi                 # 8-byte Reload
	movq	-88(%rbp), %r9                  # 8-byte Reload
	addq	$32, %rsp
	jmp	.LBB790_10
.LBB790_13:                             #   in Loop: Header=BB790_4 Depth=1
	leaq	SymTab+8(%rip), %rax
	cmpq	%rax, %rdx
	jne	.LBB790_15
# %bb.14:                               #   in Loop: Header=BB790_4 Depth=1
	leaq	.L.str.4(%rip), %rax
	movq	%rax, (%r15)
	jmp	.LBB790_10
.LBB790_15:                             #   in Loop: Header=BB790_4 Depth=1
	movq	-8(%rdx), %rsi
	testb	$6, %sil
	jne	.LBB790_18
	.p2align	4, 0x90
.LBB790_16:                             #   Parent Loop BB790_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8(%rsi), %rsi
	testb	$6, %sil
	je	.LBB790_16
.LBB790_18:                             #   in Loop: Header=BB790_4 Depth=1
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	bufSize
	addq	$32, %rsp
	cltq
	addq	$15, %rax
	andq	$-16, %rax
	callq	___chkstk_ms
	subq	%rax, %rsp
	movq	%rsp, %rdx
	movq	%rdx, (%r15)
	subq	$32, %rsp
	movq	%rsi, %rcx
	callq	bufString
	addq	$32, %rsp
	movq	-88(%rbp), %r9                  # 8-byte Reload
	movq	-96(%rbp), %rdi                 # 8-byte Reload
	jmp	.LBB790_10
.LBB790_21:                             #   in Loop: Header=BB790_4 Depth=1
	movl	%ecx, %edx
	shrq	$4, %rcx
	testb	$8, %dl
	jne	.LBB790_22
# %bb.37:                               #   in Loop: Header=BB790_4 Depth=1
	testb	$2, %al
	jne	.LBB790_38
# %bb.39:                               #   in Loop: Header=BB790_4 Depth=1
	movsd	-4(%rax), %xmm1                 # xmm1 = mem[0],zero
	unpcklps	%xmm8, %xmm1                    # xmm1 = xmm1[0],xmm8[0],xmm1[1],xmm8[1]
	subpd	%xmm10, %xmm1
	movapd	%xmm1, %xmm0
	unpckhpd	%xmm1, %xmm0                    # xmm0 = xmm0[1],xmm1[1]
	addsd	%xmm1, %xmm0
	movq	4(%rax), %rdx
	movapd	%xmm6, %xmm1
	testb	$2, %dl
	jne	.LBB790_42
	.p2align	4, 0x90
.LBB790_40:                             #   Parent Loop BB790_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movsd	-4(%rdx), %xmm2                 # xmm2 = mem[0],zero
	unpcklps	%xmm8, %xmm2                    # xmm2 = xmm2[0],xmm8[0],xmm2[1],xmm8[1]
	subpd	%xmm10, %xmm2
	movapd	%xmm2, %xmm3
	unpckhpd	%xmm2, %xmm3                    # xmm3 = xmm3[1],xmm2[1]
	addsd	%xmm2, %xmm3
	mulsd	%xmm1, %xmm3
	addsd	%xmm3, %xmm0
	mulsd	%xmm6, %xmm1
	movq	4(%rdx), %rdx
	testb	$2, %dl
	je	.LBB790_40
.LBB790_42:                             #   in Loop: Header=BB790_4 Depth=1
	shrq	$4, %rdx
	xorps	%xmm2, %xmm2
	cvtsi2sd	%rdx, %xmm2
	mulsd	%xmm1, %xmm2
	addsd	%xmm0, %xmm2
	jmp	.LBB790_43
.LBB790_22:                             #   in Loop: Header=BB790_4 Depth=1
	testb	$2, %al
	jne	.LBB790_23
# %bb.24:                               #   in Loop: Header=BB790_4 Depth=1
	movq	-4(%rax), %rbx
	movq	4(%rax), %rdx
	testq	%rbx, %rbx
	js	.LBB790_25
# %bb.26:                               #   in Loop: Header=BB790_4 Depth=1
	xorps	%xmm0, %xmm0
	cvtsi2ss	%rbx, %xmm0
	jmp	.LBB790_27
.LBB790_38:                             #   in Loop: Header=BB790_4 Depth=1
	movq	%rax, %rdx
	shrq	$4, %rdx
	xorps	%xmm2, %xmm2
	cvtsi2sd	%rdx, %xmm2
.LBB790_43:                             #   in Loop: Header=BB790_4 Depth=1
	xorps	%xmm0, %xmm0
	cvtsi2sd	%rcx, %xmm0
	divsd	%xmm0, %xmm2
	testb	$8, %al
	je	.LBB790_45
# %bb.44:                               #   in Loop: Header=BB790_4 Depth=1
	xorpd	%xmm9, %xmm2
.LBB790_45:                             #   in Loop: Header=BB790_4 Depth=1
	movsd	%xmm2, (%r15)
	jmp	.LBB790_10
.LBB790_23:                             #   in Loop: Header=BB790_4 Depth=1
	movq	%rax, %rdx
	shrq	$4, %rdx
	xorps	%xmm2, %xmm2
	cvtsi2ss	%rdx, %xmm2
	jmp	.LBB790_34
.LBB790_25:                             #   in Loop: Header=BB790_4 Depth=1
	movq	%rbx, %rsi
	shrq	%rsi
	andl	$1, %ebx
	orq	%rsi, %rbx
	xorps	%xmm0, %xmm0
	cvtsi2ss	%rbx, %xmm0
	addss	%xmm0, %xmm0
.LBB790_27:                             #   in Loop: Header=BB790_4 Depth=1
	movaps	%xmm7, %xmm1
	jmp	.LBB790_28
	.p2align	4, 0x90
.LBB790_31:                             #   in Loop: Header=BB790_28 Depth=2
	xorps	%xmm2, %xmm2
	cvtsi2ss	%rbx, %xmm2
.LBB790_32:                             #   in Loop: Header=BB790_28 Depth=2
	mulss	%xmm1, %xmm2
	addss	%xmm2, %xmm0
	mulss	%xmm7, %xmm1
.LBB790_28:                             #   Parent Loop BB790_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	testb	$2, %dl
	jne	.LBB790_33
# %bb.29:                               #   in Loop: Header=BB790_28 Depth=2
	movq	-4(%rdx), %rbx
	movq	4(%rdx), %rdx
	testq	%rbx, %rbx
	jns	.LBB790_31
# %bb.30:                               #   in Loop: Header=BB790_28 Depth=2
	movq	%rbx, %rsi
	shrq	%rsi
	andl	$1, %ebx
	orq	%rsi, %rbx
	xorps	%xmm2, %xmm2
	cvtsi2ss	%rbx, %xmm2
	addss	%xmm2, %xmm2
	jmp	.LBB790_32
.LBB790_33:                             #   in Loop: Header=BB790_4 Depth=1
	shrq	$4, %rdx
	xorps	%xmm2, %xmm2
	cvtsi2ss	%rdx, %xmm2
	mulss	%xmm1, %xmm2
	addss	%xmm0, %xmm2
.LBB790_34:                             #   in Loop: Header=BB790_4 Depth=1
	xorps	%xmm0, %xmm0
	cvtsi2ss	%rcx, %xmm0
	divss	%xmm0, %xmm2
	testb	$8, %al
	je	.LBB790_36
# %bb.35:                               #   in Loop: Header=BB790_4 Depth=1
	xorps	%xmm11, %xmm2
.LBB790_36:                             #   in Loop: Header=BB790_4 Depth=1
	movss	%xmm2, (%r15)
	jmp	.LBB790_10
.LBB790_11:
	movb	$1, %sil
	movq	-120(%rbp), %rcx                # 8-byte Reload
	leaq	-104(%rbp), %r8
	movq	-112(%rbp), %rdi                # 8-byte Reload
.LBB790_55:
	movq	32(%rcx), %rdx
	subq	$32, %rsp
	callq	ffi_call
	addq	$32, %rsp
	testb	%sil, %sil
	je	.LBB790_63
# %bb.56:                               # %.preheader
	leaq	SymTab+8(%rip), %rsi
	leaq	SymTab+280(%rip), %r15
	jmp	.LBB790_57
	.p2align	4, 0x90
.LBB790_62:                             #   in Loop: Header=BB790_57 Depth=1
	movq	8(%rdi), %rdi
	addq	$8, %r13
	addq	$-1, %r14
	je	.LBB790_63
.LBB790_57:                             # =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rcx
	testb	$15, %cl
	jne	.LBB790_62
# %bb.58:                               #   in Loop: Header=BB790_57 Depth=1
	movq	8(%rcx), %rax
	testb	$6, %al
	jne	.LBB790_62
# %bb.59:                               #   in Loop: Header=BB790_57 Depth=1
	movq	(%rcx), %rbx
	cmpq	%rsi, %rbx
	je	.LBB790_62
# %bb.60:                               #   in Loop: Header=BB790_57 Depth=1
	cmpq	%r15, %rbx
	je	.LBB790_62
# %bb.61:                               #   in Loop: Header=BB790_57 Depth=1
	movq	(%rax), %rax
	movq	8(%rax), %rcx
	subq	$32, %rsp
	movq	%r13, %rdx
	callq	natRetBuf
	addq	$32, %rsp
	movq	%rax, (%rbx)
	jmp	.LBB790_62
.LBB790_63:
	movq	-104(%rbp), %rax
	movaps	-64(%rbp), %xmm6                # 16-byte Reload
	movaps	-48(%rbp), %xmm7                # 16-byte Reload
	movaps	-32(%rbp), %xmm8                # 16-byte Reload
	movaps	-16(%rbp), %xmm9                # 16-byte Reload
	movaps	(%rbp), %xmm10                  # 16-byte Reload
	movaps	16(%rbp), %xmm11                # 16-byte Reload
	leaq	40(%rbp), %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB790_64:
	subq	$32, %rsp
	leaq	.L.str.5(%rip), %r8
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	callq	err
.LBB790_53:
	subq	$32, %rsp
	xorl	%ecx, %ecx
	callq	argErr
	int3
	.seh_handlerdata
	.text
	.seh_endproc
                                        # -- End function
	.def	 arg;
	.scl	2;
	.type	32;
	.endef
	.globl	arg                             # -- Begin function arg
	.p2align	4, 0x90
arg:                                    # @arg
# %bb.0:
	movq	%rcx, %rax
	retq
                                        # -- End function
	.def	 isLowc;
	.scl	2;
	.type	32;
	.endef
	.globl	isLowc                          # -- Begin function isLowc
	.p2align	4, 0x90
isLowc:                                 # @isLowc
# %bb.0:
	xorl	%eax, %eax
	cmpl	$65535, %ecx                    # imm = 0xFFFF
	jg	.LBB792_2
# %bb.1:
	movl	%ecx, %eax
	sarl	$5, %eax
	cltq
	leaq	Blocks(%rip), %rdx
	movzwl	(%rdx,%rax,2), %eax
	addl	%ecx, %eax
	movzwl	%ax, %eax
	leaq	Data(%rip), %rcx
	movzwl	(%rcx,%rax,2), %ecx
	andl	$31, %ecx
	xorl	%eax, %eax
	cmpw	$2, %cx
	sete	%al
.LBB792_2:
	retq
                                        # -- End function
	.def	 isUppc;
	.scl	2;
	.type	32;
	.endef
	.globl	isUppc                          # -- Begin function isUppc
	.p2align	4, 0x90
isUppc:                                 # @isUppc
# %bb.0:
	xorl	%eax, %eax
	cmpl	$65535, %ecx                    # imm = 0xFFFF
	jg	.LBB793_2
# %bb.1:
	movl	%ecx, %eax
	sarl	$5, %eax
	cltq
	leaq	Blocks(%rip), %rdx
	movzwl	(%rdx,%rax,2), %eax
	addl	%ecx, %eax
	movzwl	%ax, %eax
	leaq	Data(%rip), %rcx
	movzwl	(%rcx,%rax,2), %ecx
	andl	$31, %ecx
	xorl	%eax, %eax
	cmpw	$1, %cx
	sete	%al
.LBB793_2:
	retq
                                        # -- End function
	.def	 isLetterOrDigit;
	.scl	2;
	.type	32;
	.endef
	.globl	isLetterOrDigit                 # -- Begin function isLetterOrDigit
	.p2align	4, 0x90
isLetterOrDigit:                        # @isLetterOrDigit
# %bb.0:
	xorl	%eax, %eax
	cmpl	$65535, %ecx                    # imm = 0xFFFF
	jg	.LBB794_2
# %bb.1:
	movl	%ecx, %eax
	sarl	$5, %eax
	cltq
	leaq	Blocks(%rip), %rdx
	movzwl	(%rdx,%rax,2), %eax
	addl	%ecx, %eax
	movzwl	%ax, %eax
	leaq	Data(%rip), %rcx
	movzbl	(%rcx,%rax,2), %ecx
	movl	$574, %edx                      # imm = 0x23E
	xorl	%eax, %eax
	btl	%ecx, %edx
	setb	%al
.LBB794_2:
	retq
                                        # -- End function
	.def	 toUpperCase;
	.scl	2;
	.type	32;
	.endef
	.globl	toUpperCase                     # -- Begin function toUpperCase
	.p2align	4, 0x90
toUpperCase:                            # @toUpperCase
# %bb.0:
	movl	%ecx, %eax
	cmpl	$65535, %ecx                    # imm = 0xFFFF
	jg	.LBB795_2
# %bb.1:
	movl	%eax, %ecx
	sarl	$5, %ecx
	movslq	%ecx, %rcx
	leaq	Blocks(%rip), %rdx
	movzwl	(%rdx,%rcx,2), %ecx
	addl	%eax, %ecx
	movzwl	%cx, %ecx
	leaq	Data(%rip), %rdx
	movzwl	(%rdx,%rcx,2), %ecx
	shrq	$6, %rcx
	andl	$1022, %ecx                     # imm = 0x3FE
	leaq	Upper(%rip), %rdx
	movswl	(%rcx,%rdx), %ecx
	addl	%ecx, %eax
.LBB795_2:
	retq
                                        # -- End function
	.def	 toLowerCase;
	.scl	2;
	.type	32;
	.endef
	.globl	toLowerCase                     # -- Begin function toLowerCase
	.p2align	4, 0x90
toLowerCase:                            # @toLowerCase
# %bb.0:
	movl	%ecx, %eax
	cmpl	$65535, %ecx                    # imm = 0xFFFF
	jg	.LBB796_2
# %bb.1:
	movl	%eax, %ecx
	sarl	$5, %ecx
	movslq	%ecx, %rcx
	leaq	Blocks(%rip), %rdx
	movzwl	(%rdx,%rcx,2), %ecx
	addl	%eax, %ecx
	movzwl	%cx, %ecx
	leaq	Data(%rip), %rdx
	movzwl	(%rdx,%rcx,2), %ecx
	shrq	$6, %rcx
	andl	$1022, %ecx                     # imm = 0x3FE
	leaq	Lower(%rip), %rdx
	movswl	(%rcx,%rdx), %ecx
	addl	%ecx, %eax
.LBB796_2:
	retq
                                        # -- End function
	.bss
	.globl	$AV0                            # @"$AV0"
	.p2align	3
$AV0:
	.quad	0

	.globl	$AV                             # @"$AV"
	.p2align	3
$AV:
	.quad	0

	.globl	$PilHome                        # @"$PilHome"
	.p2align	3
$PilHome:
	.quad	0

	.globl	$PilLen                         # @"$PilLen"
	.p2align	3
$PilLen:
	.quad	0                               # 0x0

	.globl	$UsrHome                        # @"$UsrHome"
	.p2align	3
$UsrHome:
	.quad	0

	.globl	$UsrLen                         # @"$UsrLen"
	.p2align	3
$UsrLen:
	.quad	0                               # 0x0

	.globl	$Heaps                          # @"$Heaps"
	.p2align	3
$Heaps:
	.quad	0                               # 0x0

	.globl	$Avail                          # @"$Avail"
	.p2align	3
$Avail:
	.quad	0                               # 0x0

	.globl	$Extern                         # @"$Extern"
	.p2align	3
$Extern:
	.quad	0                               # 0x0

	.data
	.globl	$ExtCnt                         # @"$ExtCnt"
	.p2align	3
$ExtCnt:
	.quad	1                               # 0x1

	.bss
	.globl	$ExtSkip                        # @"$ExtSkip"
	.p2align	3
$ExtSkip:
	.quad	0                               # 0x0

	.globl	$Current                        # @"$Current"
	.p2align	3
$Current:
	.quad	0

	.globl	$Coroutines                     # @"$Coroutines"
	.p2align	3
$Coroutines:
	.quad	0

	.globl	$StkBrk                         # @"$StkBrk"
	.p2align	3
$StkBrk:
	.quad	0

	.globl	$StkLimit                       # @"$StkLimit"
	.p2align	3
$StkLimit:
	.quad	0

	.data
	.globl	$StkSizeT                       # @"$StkSizeT"
	.p2align	3
$StkSizeT:
	.quad	262144                          # 0x40000

	.globl	$StkSize                        # @"$StkSize"
	.p2align	3
$StkSize:
	.quad	65536                           # 0x10000

	.bss
	.globl	$Stdin                          # @"$Stdin"
	.p2align	3
$Stdin:
	.quad	0

	.globl	$Stdout                         # @"$Stdout"
	.p2align	3
$Stdout:
	.quad	0

	.globl	$LinePtr                        # @"$LinePtr"
	.p2align	3
$LinePtr:
	.quad	0

	.globl	$LineBuf                        # @"$LineBuf"
	.p2align	3
$LineBuf:
	.quad	0

	.globl	$LinePrmt                       # @"$LinePrmt"
	.p2align	3
$LinePrmt:
	.quad	0

	.globl	$ReplPrmt                       # @"$ReplPrmt"
	.p2align	3
$ReplPrmt:
	.quad	0

	.globl	$ContPrmt                       # @"$ContPrmt"
	.p2align	3
$ContPrmt:
	.quad	0

	.globl	$Ret                            # @"$Ret"
	.p2align	3
$Ret:
	.quad	0                               # 0x0

	.globl	$TtyPid                         # @"$TtyPid"
	.p2align	2
$TtyPid:
	.long	0                               # 0x0

	.globl	$InFDs                          # @"$InFDs"
	.p2align	2
$InFDs:
	.long	0                               # 0x0

	.globl	$InFiles                        # @"$InFiles"
	.p2align	3
$InFiles:
	.quad	0

	.globl	$OutFiles                       # @"$OutFiles"
	.p2align	3
$OutFiles:
	.quad	0

	.globl	$InFile                         # @"$InFile"
	.p2align	3
$InFile:
	.quad	0

	.globl	$OutFile                        # @"$OutFile"
	.p2align	3
$OutFile:
	.quad	0

	.globl	$Chr                            # @"$Chr"
	.p2align	2
$Chr:
	.long	0                               # 0x0

	.globl	$IoCnt                          # @"$IoCnt"
	.p2align	2
$IoCnt:
	.long	0                               # 0x0

	.globl	$IoIx                           # @"$IoIx"
	.p2align	3
$IoIx:
	.quad	0                               # 0x0

	.globl	$IoChar                         # @"$IoChar"
	.p2align	3
$IoChar:
	.quad	0                               # 0x0

	.globl	$Put                            # @"$Put"
	.p2align	3
$Put:
	.quad	0

	.globl	$Get                            # @"$Get"
	.p2align	3
$Get:
	.quad	0

	.globl	$PutBin                         # @"$PutBin"
	.p2align	3
$PutBin:
	.quad	0

	.globl	$GetBin                         # @"$GetBin"
	.p2align	3
$GetBin:
	.quad	0

	.globl	$OutFDs                         # @"$OutFDs"
	.p2align	2
$OutFDs:
	.long	0                               # 0x0

	.globl	$Nfds                           # @"$Nfds"
	.p2align	2
$Nfds:
	.long	0                               # 0x0

	.globl	$Poll                           # @"$Poll"
	.p2align	3
$Poll:
	.quad	0

	.globl	$SeedL                          # @"$SeedL"
	.p2align	3
$SeedL:
	.quad	0                               # 0x0

	.globl	$SeedH                          # @"$SeedH"
	.p2align	3
$SeedH:
	.quad	0                               # 0x0

	.globl	$USec                           # @"$USec"
	.p2align	3
$USec:
	.quad	0                               # 0x0

	.globl	$TickU                          # @"$TickU"
	.p2align	3
$TickU:
	.quad	0                               # 0x0

	.globl	$TickS                          # @"$TickS"
	.p2align	3
$TickS:
	.quad	0                               # 0x0

	.globl	$Child                          # @"$Child"
	.p2align	3
$Child:
	.quad	0

	.globl	$Children                       # @"$Children"
	.p2align	2
$Children:
	.long	0                               # 0x0

	.globl	$Slot                           # @"$Slot"
	.p2align	2
$Slot:
	.long	0                               # 0x0

	.globl	$Spkr                           # @"$Spkr"
	.p2align	2
$Spkr:
	.long	0                               # 0x0

	.globl	$Mic                            # @"$Mic"
	.p2align	2
$Mic:
	.long	0                               # 0x0

	.globl	$SpMiPipe                       # @"$SpMiPipe"
	.p2align	2
$SpMiPipe:
	.zero	8

	.globl	$Talking                        # @"$Talking"
	.p2align	2
$Talking:
	.long	0                               # 0x0

	.globl	$Hear                           # @"$Hear"
	.p2align	2
$Hear:
	.long	0                               # 0x0

	.globl	$Tell                           # @"$Tell"
	.p2align	2
$Tell:
	.long	0                               # 0x0

	.globl	$TellBuf                        # @"$TellBuf"
	.p2align	3
$TellBuf:
	.quad	0

	.globl	$Ptr                            # @"$Ptr"
	.p2align	3
$Ptr:
	.quad	0

	.globl	$End                            # @"$End"
	.p2align	3
$End:
	.quad	0

	.globl	$BufX                           # @"$BufX"
	.p2align	3
$BufX:
	.quad	0

	.globl	$PtrX                           # @"$PtrX"
	.p2align	3
$PtrX:
	.quad	0

	.globl	$EndX                           # @"$EndX"
	.p2align	3
$EndX:
	.quad	0

	.globl	$ExtN                           # @"$ExtN"
	.p2align	2
$ExtN:
	.long	0                               # 0x0

	.globl	$Extn                           # @"$Extn"
	.p2align	2
$Extn:
	.long	0                               # 0x0

	.globl	$StrP                           # @"$StrP"
	.p2align	3
$StrP:
	.quad	0

	.data
	.globl	$GcCount                        # @"$GcCount"
	.p2align	3
$GcCount:
	.quad	65536                           # 0x10000

	.bss
	.globl	$DbFiles                        # @"$DbFiles"
	.p2align	3
$DbFiles:
	.quad	0

	.globl	$DbFile                         # @"$DbFile"
	.p2align	3
$DbFile:
	.quad	0

	.globl	$DBs                            # @"$DBs"
	.p2align	2
$DBs:
	.long	0                               # 0x0

	.globl	$MaxBlkSize                     # @"$MaxBlkSize"
	.p2align	2
$MaxBlkSize:
	.long	0                               # 0x0

	.globl	$DbBlock                        # @"$DbBlock"
	.p2align	3
$DbBlock:
	.quad	0

	.globl	$BlkIndex                       # @"$BlkIndex"
	.p2align	3
$BlkIndex:
	.quad	0                               # 0x0

	.globl	$BlkLink                        # @"$BlkLink"
	.p2align	3
$BlkLink:
	.quad	0                               # 0x0

	.globl	$BlkPtr                         # @"$BlkPtr"
	.p2align	3
$BlkPtr:
	.quad	0

	.globl	$BlkEnd                         # @"$BlkEnd"
	.p2align	3
$BlkEnd:
	.quad	0

	.globl	$DbJnl                          # @"$DbJnl"
	.p2align	3
$DbJnl:
	.quad	0

	.globl	$DbLog                          # @"$DbLog"
	.p2align	3
$DbLog:
	.quad	0

	.globl	$Signal                         # @"$Signal"
	.p2align	4
$Signal:
	.zero	64

	.data
	.globl	SymTab                          # @SymTab
	.p2align	4
SymTab:
	.quad	79992034                        # 0x4c494e2
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	0                               # 0x0
	.quad	2018                            # 0x7e2
	.quad	SymTab+40
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+40
	.quad	SymTab+48
	.quad	29900576514                     # 0x6f6369702
	.quad	SymTab+64
	.quad	SymTab+88
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+40
	.quad	SymTab+112
	.quad	31785953026                     # 0x766972702
	.quad	SymTab+128
	.quad	87356066                        # 0x534f2a2
	.quad	0                               # 0x0
	.quad	22901174946                     # 0x5550432a2
	.quad	0                               # 0x0
	.quad	26953974434                     # 0x6469502a2
	.quad	0                               # 0x0
	.quad	6900217610914                   # 0x646950502a2
	.quad	SymTab+8
	.quad	69485218                        # 0x42442a2
	.quad	0                               # 0x0
	.quad	28039337682                     # 0x6874656d2
	.quad	__meth+2
	.quad	6971922536210                   # 0x65746f75712
	.quad	_quote+2
	.quad	1346                            # 0x542
	.quad	SymTab+280
	.quad	1250                            # 0x4e2
	.quad	SymTab+8
	.quad	1074                            # 0x432
	.quad	SymTab+8
	.quad	1330                            # 0x532
	.quad	SymTab+8
	.quad	1058                            # 0x422
	.quad	SymTab+8
	.quad	1170                            # 0x492
	.quad	SymTab+8
	.quad	1282                            # 0x502
	.quad	SymTab+8
	.quad	1394                            # 0x572
	.quad	SymTab+8
	.quad	0                               # 0x0
	.quad	SymTab+8
	.quad	7656969679522                   # 0x6f6c6f532a2
	.quad	2                               # 0x2
	.quad	1026                            # 0x402
	.quad	SymTab+8
	.quad	263170                          # 0x40402
	.quad	SymTab+8
	.quad	67372034                        # 0x4040402
	.quad	SymTab+8
	.quad	30980605250                     # 0x736968542
	.quad	SymTab+8
	.quad	524395401951117986              # 0x74706d6f72502a2
	.quad	SymTab+8
	.quad	30166852258                     # 0x70615a2a2
	.quad	SymTab+8
	.quad	31264625314                     # 0x7478452a2
	.quad	SymTab+8
	.quad	29095178914                     # 0x6c63532a2
	.quad	2                               # 0x2
	.quad	6969781199522                   # 0x656c75522a2
	.quad	SymTab+8
	.quad	2031030286693026                # 0x7373616c432a2
	.quad	SymTab+8
	.quad	29650920098                     # 0x6e75522a2
	.quad	SymTab+8
	.quad	30187750050                     # 0x7075482a2
	.quad	SymTab+8
	.quad	3395013653154                   # 0x316769532a2
	.quad	SymTab+8
	.quad	3463733129890                   # 0x326769532a2
	.quad	SymTab+8
	.quad	1836420215173794                # 0x68636e69572a2
	.quad	SymTab+8
	.quad	869744923460258                 # 0x31707453542a2
	.quad	SymTab+8
	.quad	887337109504674                 # 0x32707453542a2
	.quad	SymTab+8
	.quad	7521130857122                   # 0x6d7265542a2
	.quad	SymTab+8
	.quad	1506                            # 0x5e2
	.quad	SymTab+8
	.quad	30721462946                     # 0x7272452a2
	.quad	SymTab+8
	.quad	27769754274                     # 0x67734d2a2
	.quad	SymTab+8
	.quad	28301415074                     # 0x696e552a2
	.quad	SymTab+8
	.quad	7383702332066                   # 0x6b726f462a2
	.quad	SymTab+8
	.quad	27239129762                     # 0x6579422a2
	.quad	SymTab+8
	.quad	27751891618                     # 0x6762442a2
	.quad	SymTab+8
	.quad	SymTab+852
	.quad	SymTab+8
	.quad	7310579611546251107             # 0x6574656c706d6f63
	.quad	2                               # 0x2
	.quad	407154                          # 0x63672
	.quad	_gc+2
	.quad	2047388749854306                # 0x74616d726f662
	.quad	_format+2
	.quad	690                             # 0x2b2
	.quad	_add+2
	.quad	722                             # 0x2d2
	.quad	_sub+2
	.quad	104261266                       # 0x636e692
	.quad	_inc+2
	.quad	104224322                       # 0x6365642
	.quad	_dec+2
	.quad	674                             # 0x2a2
	.quad	_mul+2
	.quad	193186                          # 0x2f2a2
	.quad	_mulDiv+2
	.quad	754                             # 0x2f2
	.quad	_div+2
	.quad	594                             # 0x252
	.quad	_rem+2
	.quad	254946                          # 0x3e3e2
	.quad	_shr+2
	.quad	124147490                       # 0x7665722
	.quad	_rev+2
	.quad	50808514                        # 0x30746c2
	.quad	_lt0+2
	.quad	50747074                        # 0x30656c2
	.quad	_le0+2
	.quad	50746994                        # 0x3065672
	.quad	_ge0+2
	.quad	50808434                        # 0x3074672
	.quad	_gt0+2
	.quad	120989202                       # 0x7362612
	.quad	_abs+2
	.quad	17033500194                     # 0x3f7469622
	.quad	_bitQ+2
	.quad	610                             # 0x262
	.quad	_bitAnd+2
	.quad	1986                            # 0x7c2
	.quad	_bitOr+2
	.quad	509826                          # 0x7c782
	.quad	_bitXor+2
	.quad	31258515250                     # 0x747271732
	.quad	_sqrt+2
	.quad	26949867314                     # 0x646565732
	.quad	_seed+2
	.quad	28038272642                     # 0x687361682
	.quad	_hash+2
	.quad	26959288098                     # 0x646e61722
	.quad	_rand+2
	.quad	27226674914                     # 0x656d616e2
	.quad	_name+2
	.quad	117913314                       # 0x70736e2
	.quad	_nsp+2
	.quad	66520882                        # 0x3f70732
	.quad	_spQ+2
	.quad	17033467650                     # 0x3f7461702
	.quad	_patQ+2
	.quad	17027257954                     # 0x3f6e75662
	.quad	_funQ+2
	.quad	26965595762                     # 0x647465672
	.quad	_getd+2
	.quad	113690130                       # 0x6c6c612
	.quad	_all+2
	.quad	519821567523788594              # 0x736c6f626d79732
	.quad	_symbols+2
	.quad	1943001719301778                # 0x6e7265746e692
	.quad	_intern+2
	.quad	16438776786                     # 0x3d3d3d3d2
	.quad	_hide+2
	.quad	17037719074                     # 0x3f786f622
	.quad	_boxQ+2
	.quad	17031448370                     # 0x3f7274732
	.quad	_strQ+2
	.quad	117839778                       # 0x70617a2
	.quad	_zap+2
	.quad	30181590578                     # 0x706f68632
	.quad	_chop+2
	.quad	28826801922                     # 0x6b6361702
	.quad	_pack+2
	.quad	27235108466                     # 0x65756c672
	.quad	_glue+2
	.quad	31264757570                     # 0x747865742
	.quad	_text+2
	.quad	17017808642                     # 0x3f6572702
	.quad	_preQ+2
	.quad	17014675250                     # 0x3f6275732
	.quad	_subQ+2
	.quad	113645410                       # 0x6c61762
	.quad	_val+2
	.quad	122050354                       # 0x7465732
	.quad	_set+2
	.quad	30455256882                     # 0x717465732
	.quad	_setq+2
	.quad	30166972210                     # 0x706177732
	.quad	_swap+2
	.quad	27758311298                     # 0x676863782
	.quad	_xchg+2
	.quad	452338                          # 0x6e6f2
	.quad	_on+2
	.quad	107374322                       # 0x66666f2
	.quad	_off+2
	.quad	7036850333426                   # 0x66664f6e6f2
	.quad	_onOff+2
	.quad	29916288930                     # 0x6f72657a2
	.quad	_zero+2
	.quad	106358514                       # 0x656e6f2
	.quad	_one+2
	.quad	524325579192161858              # 0x746c75616665642
	.quad	_default+2
	.quad	28038354690                     # 0x687375702
	.quad	_push+2
	.quad	3395292714754                   # 0x31687375702
	.quad	_push1+2
	.quad	1991312315733762                # 0x7131687375702
	.quad	_push1q+2
	.quad	117896962                       # 0x706f702
	.quad	_pop+2
	.quad	176818                          # 0x2b2b2
	.quad	_popq+2
	.quad	7998950246194                   # 0x74666968732
	.quad	_shift+2
	.quad	122115634                       # 0x7475632
	.quad	_cut+2
	.quad	113661506                       # 0x6c65642
	.quad	_del+2
	.quad	6972180485906                   # 0x65756575712
	.quad	_queue+2
	.quad	29903722082                     # 0x6f6669662
	.quad	_fifo+2
	.quad	105289506                       # 0x6469722
	.quad	_rid+2
	.quad	29382600274                     # 0x6d756e652
	.quad	_enum+2
	.quad	4358709634642                   # 0x3f6d756e652
	.quad	_enumQ+2
	.quad	126240402                       # 0x7864692
	.quad	_idx+2
	.quad	117921474                       # 0x70756c2
	.quad	_lup+2
	.quad	122115842                       # 0x7475702
	.quad	_put+2
	.quad	122050162                       # 0x7465672
	.quad	_get+2
	.quad	30181631746                     # 0x706f72702
	.quad	_prop+2
	.quad	946                             # 0x3b2
	.quad	_semicol+2
	.quad	238546                          # 0x3a3d2
	.quad	_setCol+2
	.quad	930                             # 0x3a2
	.quad	_col+2
	.quad	238498                          # 0x3a3a2
	.quad	_propCol+2
	.quad	29113145090                     # 0x6c7475702
	.quad	_putl+2
	.quad	29113079410                     # 0x6c7465672
	.quad	_getl+2
	.quad	27229853554                     # 0x657069772
	.quad	_wipe+2
	.quad	26160289490                     # 0x6174656d2
	.quad	_meta+2
	.quad	17036670658                     # 0x3f776f6c2
	.quad	_lowQ+2
	.quad	17029334866                     # 0x3f7070752
	.quad	_uppQ+2
	.quad	26700347074                     # 0x63776f6c2
	.quad	_lowc+2
	.quad	26693011282                     # 0x637070752
	.quad	_uppc+2
	.quad	26957248098                     # 0x646c6f662
	.quad	_fold+2
	.quad	28039321346                     # 0x687461702
	.quad	_path+2
	.quad	31249012594                     # 0x746961772
	.quad	_wait+2
	.quad	26690950962                     # 0x636e79732
	.quad	_sync+2
	.quad	30703769218                     # 0x726165682
	.quad	_hear+2
	.quad	29104691010                     # 0x6c6c65742
	.quad	_tell+2
	.quad	29104731906                     # 0x6c6c6f702
	.quad	_poll+2
	.quad	26945672994                     # 0x646165722
	.quad	_read+2
	.quad	127293106                       # 0x79656b2
	.quad	_key+2
	.quad	28828915458                     # 0x6b6565702
	.quad	_peek+2
	.quad	30703781426                     # 0x726168632
	.quad	_char+2
	.quad	30175311666                     # 0x70696b732
	.quad	_skip+2
	.quad	113702482                       # 0x6c6f652
	.quad	_eol+2
	.quad	107411026                       # 0x666f652
	.quad	_eof+2
	.quad	29376325218                     # 0x6d6f72662
	.quad	_from+2
	.quad	29104707394                     # 0x6c6c69742
	.quad	_till+2
	.quad	27227756226                     # 0x656e696c2
	.quad	_line+2
	.quad	452242                          # 0x6e692
	.quad	_in+2
	.quad	122115826                       # 0x74756f2
	.quad	_out+2
	.quad	120006226                       # 0x7272652
	.quad	_err+2
	.quad	113722930                       # 0x6c74632
	.quad	_ctl+2
	.quad	8002984142482                   # 0x7475706e692
	.quad	_input+2
	.quad	2048763946817266                # 0x74757074756f2
	.quad	_output+2
	.quad	411234                          # 0x64662
	.quad	_fd+2
	.quad	27229853442                     # 0x657069702
	.quad	_pipe+2
	.quad	29634266866                     # 0x6e65706f2
	.quad	_open+2
	.quad	6971654063666                   # 0x65736f6c632
	.quad	_close+2
	.quad	29905794642                     # 0x6f6863652
	.quad	_echo+2
	.quad	29638469378                     # 0x6e6972702
	.quad	_prin+2
	.quad	7451341956866                   # 0x6c6e6972702
	.quad	_prinl+2
	.quad	6967344432946                   # 0x65636170732
	.quad	_space+2
	.quad	8001097770754                   # 0x746e6972702
	.quad	_print+2
	.quad	506434260758374146              # 0x7073746e6972702
	.quad	_printsp+2
	.quad	497303916201322242              # 0x6e6c746e6972702
	.quad	_println+2
	.quad	7177818785378                   # 0x6873756c662
	.quad	_flush+2
	.quad	1766806057801506                # 0x646e697765722
	.quad	_rewind+2
	.quad	122127954                       # 0x7478652
	.quad	_ext+2
	.quad	29906880258                     # 0x6f696c702
	.quad	_plio+2
	.quad	411426                          # 0x64722
	.quad	_rd+2
	.quad	468738                          # 0x72702
	.quad	_pr+2
	.quad	468850                          # 0x72772
	.quad	_wr+2
	.quad	127329810                       # 0x796e612
	.quad	_any+2
	.quad	114792242                       # 0x6d79732
	.quad	_sym+2
	.quad	120014642                       # 0x7274732
	.quad	_str+2
	.quad	26945713858                     # 0x64616f6c2
	.quad	_load+2
	.quad	17033561682                     # 0x3f7478652
	.quad	_extQ+2
	.quad	SymTab+2980
	.quad	_rollback+2
	.quad	7738135660106379122             # 0x6b6361626c6c6f72
	.quad	2                               # 0x2
	.quad	1943001719342674                # 0x6e72657478652
	.quad	_extern+2
	.quad	29107877634                     # 0x6c6f6f702
	.quad	_pool+2
	.quad	3465081714434                   # 0x326c6f6f702
	.quad	_pool2+2
	.quad	488102791669544610              # 0x6c616e72756f6a2
	.quad	_journal+2
	.quad	411282                          # 0x64692
	.quad	_id+2
	.quad	112641570                       # 0x6b6c622
	.quad	_blk+2
	.quad	118904626                       # 0x7165732
	.quad	_seq+2
	.quad	31513286338                     # 0x7565696c2
	.quad	_lieu+2
	.quad	28826859202                     # 0x6b636f6c2
	.quad	_lock+2
	.quad	7173523830594                   # 0x6863756f742
	.quad	_touch+2
	.quad	2047938500425266                # 0x74696d6d6f632
	.quad	_commit+2
	.quad	28842530514                     # 0x6b72616d2
	.quad	_mark+2
	.quad	27218355810                     # 0x656572662
	.quad	_free+2
	.quad	28826805826                     # 0x6b6362642
	.quad	_dbck+2
	.quad	8344165615122                   # 0x796c7070612
	.quad	_apply+2
	.quad	30991062786                     # 0x737361702
	.quad	_pass+2
	.quad	115824226                       # 0x6e75662
	.quad	_fun+2
	.quad	30987917010                     # 0x7370616d2
	.quad	_maps+2
	.quad	117839570                       # 0x70616d2
	.quad	_map+2
	.quad	26692949714                     # 0x6370616d2
	.quad	_mapc+2
	.quad	524447902824011474              # 0x7473696c70616d2
	.quad	_maplist+2
	.quad	2012201691256530                # 0x72616370616d2
	.quad	_mapcar+2
	.quad	1942795019753170                # 0x6e6f6370616d2
	.quad	_mapcon+2
	.quad	1941832947078866                # 0x6e616370616d2
	.quad	_mapcan+2
	.quad	2012481128404578                # 0x7265746c69662
	.quad	_filter+2
	.quad	524165879706388050              # 0x746361727478652
	.quad	_extract+2
	.quad	28828915506                     # 0x6b6565732
	.quad	_seek+2
	.quad	26959320674                     # 0x646e69662
	.quad	_find+2
	.quad	28826834690                     # 0x6b6369702
	.quad	_pick+2
	.quad	8344161441378                   # 0x796c6c75662
	.quad	_fully+2
	.quad	122086962                       # 0x746e632
	.quad	_cnt+2
	.quad	114775858                       # 0x6d75732
	.quad	_sum+2
	.quad	28311951058                     # 0x6978616d2
	.quad	_maxi+2
	.quad	28301498066                     # 0x696e696d2
	.quad	_mini+2
	.quad	28038305378                     # 0x687369662
	.quad	_fish+2
	.quad	497186                          # 0x79622
	.quad	_by+2
	.quad	472594                          # 0x73612
	.quad	_as+2
	.quad	122066626                       # 0x74696c2
	.quad	_lit+2
	.quad	29093226066                     # 0x6c6176652
	.quad	_eval+2
	.quad	115824418                       # 0x6e75722
	.quad	_run+2
	.quad	107370050                       # 0x6665642
	.quad	_def+2
	.quad	415298                          # 0x65642
	.quad	_de+2
	.quad	448066                          # 0x6d642
	.quad	_dm+2
	.quad	126285346                       # 0x786f622
	.quad	_box+2
	.quad	125196002                       # 0x77656e2
	.quad	_new+2
	.quad	27229919042                     # 0x657079742
	.quad	_type+2
	.quad	102184594                       # 0x6173692
	.quad	_isa+2
	.quad	1766874505696978                # 0x646f6874656d2
	.quad	_method+2
	.quad	26959304498                     # 0x646e65732
	.quad	_send+2
	.quad	127346498                       # 0x7972742
	.quad	_try+2
	.quad	7861250250546                   # 0x72657075732
	.quad	_super+2
	.quad	6696513013330                   # 0x61727478652
	.quad	_extra+2
	.quad	105309714                       # 0x646e612
	.quad	_and+2
	.quad	468722                          # 0x726f2
	.quad	_or+2
	.quad	26959288034                     # 0x646e616e2
	.quad	_nand+2
	.quad	119994082                       # 0x726f6e2
	.quad	_nor+2
	.quad	119994242                       # 0x726f782
	.quad	_xor+2
	.quad	29107877410                     # 0x6c6f6f622
	.quad	_bool+2
	.quad	122091234                       # 0x746f6e2
	.quad	_not+2
	.quad	113678050                       # 0x6c696e2
	.quad	_nil+2
	.quad	1858                            # 0x742
	.quad	_t+2
	.quad	27765712642                     # 0x676f72702
	.quad	_prog+2
	.quad	3395020072706                   # 0x31676f72702
	.quad	_prog1+2
	.quad	3463739549442                   # 0x32676f72702
	.quad	_prog2+2
	.quad	419474                          # 0x66692
	.quad	_if+2
	.quad	115762834                       # 0x6e66692
	.quad	_ifn+2
	.quad	52848274                        # 0x3266692
	.quad	_if2+2
	.quad	29634234226                     # 0x6e6568772
	.quad	_when+2
	.quad	2031031360612178                # 0x7373656c6e752
	.quad	_unless+2
	.quad	26959345202                     # 0x646e6f632
	.quad	_cond+2
	.quad	26959345378                     # 0x646e6f6e2
	.quad	_nond+2
	.quad	27232966194                     # 0x657361632
	.quad	_case+2
	.quad	30454191666                     # 0x717361632
	.quad	_casq+2
	.quad	6971907852082                   # 0x65746174732
	.quad	_state+2
	.quad	6969768707954                   # 0x656c6968772
	.quad	_while+2
	.quad	7450011297618                   # 0x6c69746e752
	.quad	_until+2
	.quad	476690                          # 0x74612
	.quad	_at+2
	.quad	456258                          # 0x6f642
	.quad	_do+2
	.quad	30181619394                     # 0x706f6f6c2
	.quad	_loop+2
	.quad	119993954                       # 0x726f662
	.quad	_for+2
	.quad	28039354226                     # 0x687469772
	.quad	_with+2
	.quad	26959320610                     # 0x646e69622
	.quad	_bind+2
	.quad	103216802                       # 0x626f6a2
	.quad	_job+2
	.quad	122050242                       # 0x74656c2
	.quad	_let+2
	.quad	17033483970                     # 0x3f74656c2
	.quad	_letQ+2
	.quad	106379090                       # 0x6573752
	.quad	_use+2
	.quad	107435554                       # 0x6675622
	.quad	_buf+2
	.quad	7173522724402                   # 0x68637461632
	.quad	_catch+2
	.quad	8207534032706                   # 0x776f7268742
	.quad	_throw+2
	.quad	546842958862128738              # 0x796c6c616e69662
	.quad	_finally+2
	.quad	456242                          # 0x6f632
	.quad	_co+2
	.quad	6901045041042                   # 0x646c6569792
	.quad	_yield+2
	.quad	530                             # 0x212
	.quad	_break+2
	.quad	1618                            # 0x652
	.quad	_e+2
	.quad	578                             # 0x242
	.quad	_trace+2
	.quad	26681509458                     # 0x636578652
	.quad	_exec+2
	.quad	29104674354                     # 0x6c6c61632
	.quad	_call+2
	.quad	26954106514                     # 0x646970692
	.quad	_ipid+2
	.quad	26954106610                     # 0x6469706f2
	.quad	_opid+2
	.quad	29104707250                     # 0x6c6c696b2
	.quad	_kill+2
	.quad	28842587746                     # 0x6b726f662
	.quad	_fork+2
	.quad	1836416737105474                # 0x6863617465642
	.quad	_detach+2
	.quad	106403362                       # 0x6579622
	.quad	_bye+2
	.quad	119936562                       # 0x7261632
	.quad	_car+2
	.quad	119948850                       # 0x7264632
	.quad	_cdr+2
	.quad	30703752754                     # 0x726161632
	.quad	_caar+2
	.quad	30706898482                     # 0x726461632
	.quad	_cadr+2
	.quad	30703765042                     # 0x726164632
	.quad	_cdar+2
	.quad	30706910770                     # 0x726464632
	.quad	_cddr+2
	.quad	7860160697906                   # 0x72616161632
	.quad	_caaar+2
	.quad	7860966004274                   # 0x72646161632
	.quad	_caadr+2
	.quad	7860163843634                   # 0x72616461632
	.quad	_cadar+2
	.quad	7860969150002                   # 0x72646461632
	.quad	_caddr+2
	.quad	7860160710194                   # 0x72616164632
	.quad	_cdaar+2
	.quad	7860966016562                   # 0x72646164632
	.quad	_cdadr+2
	.quad	7860163855922                   # 0x72616464632
	.quad	_cddar+2
	.quad	7860969162290                   # 0x72646464632
	.quad	_cdddr+2
	.quad	2012201138656818                # 0x7261616161632
	.quad	_caaaar+2
	.quad	2012407297087026                # 0x7264616161632
	.quad	_caaadr+2
	.quad	2012201943963186                # 0x7261646161632
	.quad	_caadar+2
	.quad	2012408102393394                # 0x7264646161632
	.quad	_caaddr+2
	.quad	2012201141802546                # 0x7261616461632
	.quad	_cadaar+2
	.quad	2012407300232754                # 0x7264616461632
	.quad	_cadadr+2
	.quad	2012201947108914                # 0x7261646461632
	.quad	_caddar+2
	.quad	2012408105539122                # 0x7264646461632
	.quad	_cadddr+2
	.quad	2012201138669106                # 0x7261616164632
	.quad	_cdaaar+2
	.quad	2012407297099314                # 0x7264616164632
	.quad	_cdaadr+2
	.quad	2012201943975474                # 0x7261646164632
	.quad	_cdadar+2
	.quad	2012408102405682                # 0x7264646164632
	.quad	_cdaddr+2
	.quad	2012201141814834                # 0x7261616464632
	.quad	_cddaar+2
	.quad	2012407300245042                # 0x7264616464632
	.quad	_cddadr+2
	.quad	2012201947121202                # 0x7261646464632
	.quad	_cdddar+2
	.quad	2012408105551410                # 0x7264646464632
	.quad	_cddddr+2
	.quad	109528802                       # 0x68746e2
	.quad	_nth+2
	.quad	115799602                       # 0x6e6f632
	.quad	_con+2
	.quad	30985877042                     # 0x736e6f632
	.quad	_cons+2
	.quad	26690909746                     # 0x636e6f632
	.quad	_conc+2
	.quad	26695079474                     # 0x637269632
	.quad	_circ+2
	.quad	122091298                       # 0x746f722
	.quad	_rot+2
	.quad	31259530946                     # 0x7473696c2
	.quad	_list+2
	.quad	26949867234                     # 0x6465656e2
	.quad	_need+2
	.quad	6968431744802                   # 0x65676e61722
	.quad	_range+2
	.quad	29104756322                     # 0x6c6c75662
	.quad	_full+2
	.quad	27224577746                     # 0x656b616d2
	.quad	_make+2
	.quad	27217237714                     # 0x6564616d2
	.quad	_made+2
	.quad	7587430303282                   # 0x6e696168632
	.quad	_chain+2
	.quad	28838368962                     # 0x6b6e696c2
	.quad	_link+2
	.quad	27224635282                     # 0x656b6f792
	.quad	_yoke+2
	.quad	32598586930                     # 0x79706f632
	.quad	_copy+2
	.quad	126260946                       # 0x78696d2
	.quad	_mix+2
	.quad	1766804976764434                # 0x646e657070612
	.quad	_append+2
	.quad	1784809475429954                # 0x6574656c65642
	.quad	_delete+2
	.quad	30446868034                     # 0x716c65642
	.quad	_delq+2
	.quad	456611883680945954              # 0x6563616c7065722
	.quad	_replace+2
	.quad	2048554834519698                # 0x747265736e692
	.quad	_insert+2
	.quad	1784949599786786                # 0x65766f6d65722
	.quad	_remove+2
	.quad	6967344416514                   # 0x6563616c702
	.quad	_place+2
	.quad	7724887131954                   # 0x70697274732
	.quad	_strip+2
	.quad	7999758731058                   # 0x74696c70732
	.quad	_split+2
	.quad	456894525016004386              # 0x657372657665722
	.quad	_reverse+2
	.quad	30175315554                     # 0x70696c662
	.quad	_flip+2
	.quad	29370033986                     # 0x6d6972742
	.quad	_trim+2
	.quad	30175315506                     # 0x70696c632
	.quad	_clip+2
	.quad	26945672834                     # 0x646165682
	.quad	_head+2
	.quad	29101528898                     # 0x6c6961742
	.quad	_tail+2
	.quad	29365847858                     # 0x6d6574732
	.quad	_stem+2
	.quad	115775074                       # 0x6e69662
	.quad	_fin+2
	.quad	31259498178                     # 0x7473616c2
	.quad	_last+2
	.quad	250834                          # 0x3d3d2
	.quad	_eq+2
	.quad	64214754                        # 0x3d3d6e2
	.quad	_neq+2
	.quad	978                             # 0x3d2
	.quad	_equal+2
	.quad	254914                          # 0x3e3c2
	.quad	_nequal+2
	.quad	197586                          # 0x303d2
	.quad	_eq0+2
	.quad	201682                          # 0x313d2
	.quad	_eq1+2
	.quad	345042                          # 0x543d2
	.quad	_eqT+2
	.quad	198370                          # 0x306e2
	.quad	_neq0+2
	.quad	345826                          # 0x546e2
	.quad	_neqT+2
	.quad	962                             # 0x3c2
	.quad	_lt+2
	.quad	250818                          # 0x3d3c2
	.quad	_le+2
	.quad	994                             # 0x3e2
	.quad	_gt+2
	.quad	250850                          # 0x3d3e2
	.quad	_ge+2
	.quad	126228178                       # 0x78616d2
	.quad	_max+2
	.quad	115775186                       # 0x6e696d2
	.quad	_min+2
	.quad	29376333330                     # 0x6d6f74612
	.quad	_atom+2
	.quad	30712141570                     # 0x726961702
	.quad	_pair+2
	.quad	4356022113842                   # 0x3f637269632
	.quad	_circQ+2
	.quad	17033541314                     # 0x3f74736c2
	.quad	_lstQ+2
	.quad	17026209506                     # 0x3f6d756e2
	.quad	_numQ+2
	.quad	17026225970                     # 0x3f6d79732
	.quad	_symQ+2
	.quad	17019881058                     # 0x3f676c662
	.quad	_flgQ+2
	.quad	2012476297598674                # 0x7265626d656d2
	.quad	_member+2
	.quad	30447916754                     # 0x716d656d2
	.quad	_memq+2
	.quad	30439560914                     # 0x71656d6d2
	.quad	_mmeq+2
	.quad	31242737458                     # 0x746365732
	.quad	_sect+2
	.quad	27487802946                     # 0x666669642
	.quad	_diff+2
	.quad	8273554499218                   # 0x7865646e692
	.quad	_index+2
	.quad	2047665225754354                # 0x74657366666f2
	.quad	_offset+2
	.quad	7863927252738                   # 0x726f6972702
	.quad	_prior+2
	.quad	1837586572531394                # 0x6874676e656c2
	.quad	_length+2
	.quad	27240339250                     # 0x657a69732
	.quad	_size+2
	.quad	7929973937698                   # 0x73657479622
	.quad	_bytes+2
	.quad	6833145591314                   # 0x636f7373612
	.quad	_assoc+2
	.quad	1749285271377698                # 0x636f737361722
	.quad	_rassoc+2
	.quad	30450071058                     # 0x716f73612
	.quad	_asoq+2
	.quad	7795218192162                   # 0x716f7361722
	.quad	_rasoq+2
	.quad	28838336290                     # 0x6b6e61722
	.quad	_rank+2
	.quad	7173522724562                   # 0x686374616d2
	.quad	_match+2
	.quad	29104707170                     # 0x6c6c69662
	.quad	_fill+2
	.quad	6972459394818                   # 0x65766f72702
	.quad	_prove+2
	.quad	254674                          # 0x3e2d2
	.quad	_arrow+2
	.quad	8342547654482                   # 0x7966696e752
	.quad	_unify+2
	.quad	7728105203314                   # 0x70756f72672
	.quad	_group+2
	.quad	31258507058                     # 0x74726f732
	.quad	_sort+2
	.quad	127354690                       # 0x7974742
	.quad	_tty+2
	.quad	125179682                       # 0x7761722
	.quad	_raw+2
	.quad	7521126762002                   # 0x6d72616c612
	.quad	_alarm+2
	.quad	7656156075826                   # 0x6f696769732
	.quad	_sigio+2
	.quad	30975366834                     # 0x7364696b2
	.quad	_kids+2
	.quad	524166155115898626              # 0x746365746f72702
	.quad	_protect+2
	.quad	30166898306                     # 0x706165682
	.quad	_heap+2
	.quad	7379661309746                   # 0x6b636174732
	.quad	_stack+2
	.quad	27234113058                     # 0x657479622
	.quad	_byte+2
	.quad	124184146                       # 0x766e652
	.quad	_env+2
	.quad	27234014786                     # 0x657461642
	.quad	_date+2
	.quad	27226707778                     # 0x656d69742
	.quad	_time+2
	.quad	26681489234                     # 0x636573752
	.quad	_usec+2
	.quad	31249094418                     # 0x746975712
	.quad	_quit+2
	.quad	121083698                       # 0x7379732
	.quad	_sys+2
	.quad	105346818                       # 0x6477702
	.quad	_pwd+2
	.quad	411186                          # 0x64632
	.quad	_cd+2
	.quad	32602801714                     # 0x797474632
	.quad	_ctty+2
	.quad	105305650                       # 0x646d632
	.quad	_cmd+2
	.quad	119969346                       # 0x7269642
	.quad	_dir+2
	.quad	29903742610                     # 0x6f666e692
	.quad	_info+2
	.quad	27225658978                     # 0x656c69662
	.quad	_file+2
	.quad	31783855634                     # 0x766772612
	.quad	_argv+2
	.quad	122095346                       # 0x74706f2
	.quad	_opt+2
	.quad	7657509824082                   # 0x6f6e7272652
	.quad	_errno+2
	.quad	262738                          # 0x40252
	.quad	_nat+2
	.quad	1784947996497634                # 0x65766974616e2
	.quad	_native+2
	.quad	2047528336312114                # 0x7463757274732
	.quad	_struct+2
	.quad	30185789122                     # 0x7073696c2
	.quad	_lisp+2
	.quad	30978549266                     # 0x736772612
	.quad	_args+2
	.quad	31264757474                     # 0x7478656e2
	.quad	_next+2
	.quad	108471826                       # 0x6772612
	.quad	_arg+2
	.quad	31259514658                     # 0x747365722
	.quad	_rest+2
	.quad	119948818                       # 0x7264612
	.quad	_adr+2
	.quad	7449991391042                   # 0x6c696172742
	.quad	_trail+2
	.quad	460626                          # 0x70752
	.quad	_up+2
	.quad	546948723242342018              # 0x79726f747369682
	.quad	_history+2
	.quad	497355938196772706              # 0x6e6f69737265762
	.quad	_version+2

	.globl	$Version                        # @"$Version"
	.p2align	3
$Version:
	.quad	354                             # 0x162
	.quad	98                              # 0x62
	.quad	162                             # 0xa2

	.globl	env                             # @env
	.p2align	3
env:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	SymTab+8
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0

	.globl	gcData                          # @gcData
	.p2align	3
gcData:
	.quad	SymTab+96
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8
	.quad	SymTab+8

	.section	.rdata,"dr"
.L$3:                                   # @"$3"
	.asciz	"No memory"

.L$7:                                   # @"$7"
	.asciz	"Stack overflow"

	.bss
	.globl	$Jam                            # @"$Jam"
$Jam:
	.byte	0                               # 0x0

	.section	.rdata,"dr"
.L$6:                                   # @"$6"
	.asciz	"? "

.L$1:                                   # @"$1"
	.asciz	"\n"

	.globl	$Empty                          # @"$Empty"
$Empty:
	.zero	1

	.bss
	.globl	$Repl                           # @"$Repl"
$Repl:
	.byte	0                               # 0x0

	.section	.rdata,"dr"
.L$29:                                  # @"$29"
	.asciz	"Close error: %s"

	.p2align	4                               # @"$43"
.L$43:
	.asciz	"Super parentheses mismatch"

	.data
	.globl	$Cell                           # @"$Cell"
	.p2align	3
$Cell:
	.quad	SymTab+8
	.quad	SymTab+8

	.section	.rdata,"dr"
	.globl	$Delim                          # @"$Delim"
$Delim:
	.asciz	" \t\n\r\"'(),[]`{}~"

	.p2align	4                               # @"$23"
.L$23:
	.asciz	"Bad symbol namespace"

.L$33:                                  # @"$33"
	.asciz	"Bad input '%s'"

.L$32:                                  # @"$32"
	.asciz	"EOF Overrun"

.L$46:                                  # @"$46"
	.asciz	"   "

.L$36:                                  # @"$36"
	.asciz	"SETFD %s"

.L$2:                                   # @"$2"
	.asciz	"%s: Can't exec\n"

.L$22:                                  # @"$22"
	.asciz	"Can't fork"

.L$30:                                  # @"$30"
	.asciz	"Pipe error: %s"

.L$28:                                  # @"$28"
	.asciz	"Open error: %s"

.L$14:                                  # @"$14"
	.asciz	"Name expected"

.L$34:                                  # @"$34"
	.asciz	"Bad FD"

.L$42:                                  # @"$42"
	.asciz	"Bad dotted pair"

.L$8:                                   # @"$8"
	.asciz	"Bad argument"

	.bss
	.globl	$InBye                          # @"$InBye"
$InBye:
	.byte	0                               # 0x0

	.section	.rdata,"dr"
.L$37:                                  # @"$37"
	.asciz	"bytes write: %s"

.L$40:                                  # @"$40"
	.asciz	"No current fd"

.L$27:                                  # @"$27"
	.asciz	"Undefined"

.L$24:                                  # @"$24"
	.asciz	"lib/"

.L$20:                                  # @"$20"
	.asciz	"Protected"

	.p2align	4                               # @"$18"
.L$18:
	.asciz	"Variable expected"

	.bss
	.globl	$PRepl                          # @"$PRepl"
$PRepl:
	.byte	0                               # 0x0

	.section	.rdata,"dr"
.L$79:                                  # @"$79"
	.asciz	"! "

.L$17:                                  # @"$17"
	.asciz	"List expected"

	.p2align	4                               # @"$9"
.L$9:
	.asciz	"Small number expected"

	.data
	.globl	cbFuns                          # @cbFuns
	.p2align	3
cbFuns:
	.quad	_cb1
	.quad	_cb2
	.quad	_cb3
	.quad	_cb4
	.quad	_cb5
	.quad	_cb6
	.quad	_cb7
	.quad	_cb8
	.quad	_cb9
	.quad	_cb10
	.quad	_cb11
	.quad	_cb12
	.quad	_cb13
	.quad	_cb14
	.quad	_cb15
	.quad	_cb16
	.quad	_cb17
	.quad	_cb18
	.quad	_cb19
	.quad	_cb20
	.quad	_cb21
	.quad	_cb22
	.quad	_cb23
	.quad	_cb24

	.section	.rdata,"dr"
	.p2align	4                               # @"$92"
.L$92:
	.asciz	"Too many callbacks"

.L$89:                                  # @"$89"
	.asciz	"Bad result spec"

.L$10:                                  # @"$10"
	.asciz	"Number expected"

.L$91:                                  # @"$91"
	.asciz	"[DLL] %s"

.L$90:                                  # @"$90"
	.asciz	"Bad ffi"

	.data
	.globl	$Month                          # @"$Month"
$Month:
	.ascii	"\037\037\034\037\036\037\036\037\037\036\037\036\037"

	.section	.rdata,"dr"
.L$88:                                  # @"$88"
	.asciz	"."

	.p2align	4                               # @"$87"
.L$87:
	.asciz	"Can't open PTY: %s"

.L$86:                                  # @"$86"
	.asciz	"%s"

	.bss
	.globl	$Pnl                            # @"$Pnl"
	.p2align	3
$Pnl:
	.quad	0                               # 0x0

	.globl	$Penv                           # @"$Penv"
	.p2align	3
$Penv:
	.quad	0                               # 0x0

	.section	.rdata,"dr"
.L$63:                                  # @"$63"
	.asciz	"Bad ID"

.L$50:                                  # @"$50"
	.asciz	"DB read: %s"

.L$21:                                  # @"$21"
	.asciz	"File lock: %s"

.L$49:                                  # @"$49"
	.asciz	"Bad DB file"

.L$85:                                  # @"$85"
	.asciz	"Not making"

	.p2align	4                               # @"$16"
.L$16:
	.asciz	"Cons pair expected"

.L$84:                                  # @"$84"
	.asciz	"+ "

.L$83:                                  # @"$83"
	.asciz	"wait pid"

.L$80:                                  # @"$80"
	.asciz	"No Break"

.L$76:                                  # @"$76"
	.asciz	"No coroutines"

	.p2align	4                               # @"$77"
.L$77:
	.asciz	"Coroutine not found"

.L$78:                                  # @"$78"
	.asciz	"Tag expected"

	.p2align	4                               # @"$74"
.L$74:
	.asciz	"Reentrant coroutine"

	.p2align	4                               # @"$75"
.L$75:
	.asciz	"Can't stop main routine"

.L$73:                                  # @"$73"
	.asciz	"Tag not found"

.L$72:                                  # @"$72"
	.asciz	"Bad extra"

.L$71:                                  # @"$71"
	.asciz	"Bad super"

.L$70:                                  # @"$70"
	.asciz	"Bad message"

.L$11:                                  # @"$11"
	.asciz	"Symbol expected"

.L$56:                                  # @"$56"
	.asciz	"DB Oversize"

	.p2align	4                               # @"$54"
.L$54:
	.asciz	"Journal write: %s"

.L$51:                                  # @"$51"
	.asciz	"DB write: %s"

	.p2align	4                               # @"$65"
.L$65:
	.asciz	"Circular free list"

.L$66:                                  # @"$66"
	.asciz	"Bad chain"

.L$67:                                  # @"$67"
	.asciz	"Bad count"

	.p2align	4                               # @"$13"
.L$13:
	.asciz	"External symbol expected"

	.p2align	4                               # @"$64"
.L$64:
	.asciz	"Transaction fsync error: %s"

	.p2align	4                               # @"$59"
.L$59:
	.asciz	"Log truncate error: %s"

	.bss
	.globl	$Sync                           # @"$Sync"
$Sync:
	.byte	0                               # 0x0

	.section	.rdata,"dr"
	.p2align	4                               # @"$53"
.L$53:
	.asciz	"DB fsync error: %s"

.L$38:                                  # @"$38"
	.asciz	"child write: %s"

.L$31:                                  # @"$31"
	.asciz	"Size overflow"

.L$39:                                  # @"$39"
	.asciz	"Tell PIPE_BUF"

.L$55:                                  # @"$55"
	.asciz	"Log write: %s"

.L$62:                                  # @"$62"
	.asciz	"r"

.L$52:                                  # @"$52"
	.asciz	"Bad Journal"

.L$60:                                  # @"$60"
	.asciz	"a"

.L$61:                                  # @"$61"
	.asciz	"a+"

	.p2align	4                               # @"$58"
.L$58:
	.asciz	"Last transaction not completed: Rollback\n"

	.p2align	4                               # @"$57"
.L$57:
	.asciz	"Discarding incomplete transaction\n"

.L$48:                                  # @"$48"
	.asciz	"> "

.L$12:                                  # @"$12"
	.asciz	"Char expected"

.L$15:                                  # @"$15"
	.asciz	"Atom expected"

	.data
	.globl	$TBuf                           # @"$TBuf"
$TBuf:
	.ascii	"\005T"

	.section	.rdata,"dr"
	.p2align	4                               # @"$35"
.L$35:
	.asciz	"Select error: %s"

.L$41:                                  # @"$41"
	.asciz	"sync write: %s"

.L$19:                                  # @"$19"
	.asciz	"Item not found"

.L$26:                                  # @"$26"
	.asciz	"Div/0"

.L$93:                                  # @"$93"
	.asciz	"+"

.L$94:                                  # @"$94"
	.asciz	"HOME"

.L$95:                                  # @"$95"
	.asciz	": "

	.globl	TgOS                            # @TgOS
	.p2align	4
TgOS:
	.asciz	"MSYS_NT-10.0-19044"

	.globl	TgCPU                           # @TgCPU
TgCPU:
	.asciz	"x86_64"

	.globl	PipeBufSize                     # @PipeBufSize
	.p2align	2
PipeBufSize:
	.long	4096                            # 0x1000

	.globl	Sig                             # @Sig
	.p2align	4
Sig:
	.long	1                               # 0x1
	.long	2                               # 0x2
	.long	30                              # 0x1e
	.long	31                              # 0x1f
	.long	13                              # 0xd
	.long	14                              # 0xe
	.long	15                              # 0xf
	.long	20                              # 0x14
	.long	19                              # 0x13
	.long	17                              # 0x11
	.long	18                              # 0x12
	.long	21                              # 0x15
	.long	22                              # 0x16
	.long	28                              # 0x1c
	.long	23                              # 0x17

	.globl	SigDfl                          # @SigDfl
	.p2align	3
SigDfl:
	.quad	0

	.globl	SigIgn                          # @SigIgn
	.p2align	3
SigIgn:
	.quad	1

	.bss
	.globl	Tio                             # @Tio
	.p2align	2
Tio:
	.long	0                               # 0x0

	.globl	OrgTermio                       # @OrgTermio
	.p2align	2
OrgTermio:
	.zero	44

	.globl	Termio                          # @Termio
	.p2align	3
Termio:
	.quad	0

	.section	.rdata,"dr"
	.globl	JmpBufSize                      # @JmpBufSize
	.p2align	3
JmpBufSize:
	.quad	256                             # 0x100

	.bss
	.globl	Fsign                           # @Fsign
	.p2align	2
Fsign:
	.long	0                               # 0x0

	.globl	Fdigit                          # @Fdigit
	.p2align	3
Fdigit:
	.quad	0                               # 0x0

	.globl	QuitRst                         # @QuitRst
	.p2align	4
QuitRst:
	.zero	256

	.lcomm	getDir.dp,8,8                   # @getDir.dp
	.section	.rdata,"dr"
.L.str:                                 # @.str
	.asciz	"$%&*+-<=>?@"

	.p2align	2                               # @switch.table.gSignal
.Lswitch.table.gSignal:
	.long	1                               # 0x1
	.long	2                               # 0x2
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	5                               # 0x5
	.long	6                               # 0x6
	.long	7                               # 0x7
	.long	0                               # 0x0
	.long	10                              # 0xa
	.long	11                              # 0xb
	.long	9                               # 0x9
	.long	8                               # 0x8
	.long	12                              # 0xc
	.long	13                              # 0xd
	.long	15                              # 0xf
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	14                              # 0xe
	.long	0                               # 0x0
	.long	3                               # 0x3
	.long	4                               # 0x4

.L.str.1:                               # @.str.1
	.asciz	"%d SIG-%d\n"

.L.str.2:                               # @.str.2
	.asciz	"r"

.L.str.3:                               # @.str.3
	.asciz	"w"

	.lcomm	Tv,16,8                         # @Tv
	.lcomm	Time,8,8                        # @Time
	.lcomm	Fval,8,8                        # @Fval
.L.str.4:                               # @.str.4
	.zero	1

.L.str.5:                               # @.str.5
	.asciz	"Init oversize"

	.p2align	4                               # @Blocks
Blocks:
	.short	450                             # 0x1c2
	.short	450                             # 0x1c2
	.short	449                             # 0x1c1
	.short	300                             # 0x12c
	.short	299                             # 0x12b
	.short	416                             # 0x1a0
	.short	504                             # 0x1f8
	.short	732                             # 0x2dc
	.short	607                             # 0x25f
	.short	750                             # 0x2ee
	.short	533                             # 0x215
	.short	838                             # 0x346
	.short	732                             # 0x2dc
	.short	806                             # 0x326
	.short	700                             # 0x2bc
	.short	534                             # 0x216
	.short	351                             # 0x15f
	.short	724                             # 0x2d4
	.short	886                             # 0x376
	.short	886                             # 0x376
	.short	886                             # 0x376
	.short	873                             # 0x369
	.short	65167                           # 0xfe8f
	.short	836                             # 0x344
	.short	65413                           # 0xff85
	.short	65381                           # 0xff65
	.short	64949                           # 0xfdb5
	.short	64929                           # 0xfda1
	.short	27                              # 0x1b
	.short	708                             # 0x2c4
	.short	28                              # 0x1c
	.short	71                              # 0x47
	.short	65192                           # 0xfea8
	.short	65420                           # 0xff8c
	.short	565                             # 0x235
	.short	65279                           # 0xfeff
	.short	26                              # 0x1a
	.short	65215                           # 0xfebf
	.short	38                              # 0x26
	.short	64288                           # 0xfb20
	.short	65064                           # 0xfe28
	.short	275                             # 0x113
	.short	260                             # 0x104
	.short	64353                           # 0xfb61
	.short	64346                           # 0xfb5a
	.short	267                             # 0x10b
	.short	265                             # 0x109
	.short	254                             # 0xfe
	.short	65288                           # 0xff08
	.short	553                             # 0x229
	.short	606                             # 0x25e
	.short	455                             # 0x1c7
	.short	508                             # 0x1fc
	.short	476                             # 0x1dc
	.short	64582                           # 0xfc46
	.short	553                             # 0x229
	.short	65063                           # 0xfe27
	.short	64341                           # 0xfb55
	.short	361                             # 0x169
	.short	64456                           # 0xfbc8
	.short	252                             # 0xfc
	.short	259                             # 0x103
	.short	64360                           # 0xfb68
	.short	64328                           # 0xfb48
	.short	64296                           # 0xfb28
	.short	64264                           # 0xfb08
	.short	64232                           # 0xfae8
	.short	64200                           # 0xfac8
	.short	64168                           # 0xfaa8
	.short	64136                           # 0xfa88
	.short	64104                           # 0xfa68
	.short	64072                           # 0xfa48
	.short	101                             # 0x65
	.short	80                              # 0x50
	.short	171                             # 0xab
	.short	313                             # 0x139
	.short	65038                           # 0xfe0e
	.short	99                              # 0x63
	.short	341                             # 0x155
	.short	424                             # 0x1a8
	.short	63081                           # 0xf669
	.short	297                             # 0x129
	.short	296                             # 0x128
	.short	63775                           # 0xf91f
	.short	65110                           # 0xfe56
	.short	264                             # 0x108
	.short	263                             # 0x107
	.short	64192                           # 0xfac0
	.short	64654                           # 0xfc8e
	.short	65197                           # 0xfead
	.short	198                             # 0xc6
	.short	64679                           # 0xfca7
	.short	64405                           # 0xfb95
	.short	62589                           # 0xf47d
	.short	159                             # 0x9f
	.short	64279                           # 0xfb17
	.short	65056                           # 0xfe20
	.short	64808                           # 0xfd28
	.short	64303                           # 0xfb2f
	.short	59                              # 0x3b
	.short	62393                           # 0xf3b9
	.short	65111                           # 0xfe57
	.short	64718                           # 0xfcce
	.short	65467                           # 0xffbb
	.short	62265                           # 0xf339
	.short	64152                           # 0xfa98
	.short	65419                           # 0xff8b
	.short	65339                           # 0xff3b
	.short	64084                           # 0xfa54
	.short	63459                           # 0xf7e3
	.short	65323                           # 0xff2b
	.short	64215                           # 0xfad7
	.short	64361                           # 0xfb69
	.short	64570                           # 0xfc3a
	.short	65253                           # 0xfee5
	.short	62664                           # 0xf4c8
	.short	64688                           # 0xfcb0
	.short	64136                           # 0xfa88
	.short	64959                           # 0xfdbf
	.short	62536                           # 0xf448
	.short	65093                           # 0xfe45
	.short	64711                           # 0xfcc7
	.short	65103                           # 0xfe4f
	.short	63473                           # 0xf7f1
	.short	63253                           # 0xf715
	.short	62184                           # 0xf2e8
	.short	64927                           # 0xfd9f
	.short	62280                           # 0xf348
	.short	63850                           # 0xf96a
	.short	64514                           # 0xfc02
	.short	64919                           # 0xfd97
	.short	62152                           # 0xf2c8
	.short	62120                           # 0xf2a8
	.short	62649                           # 0xf4b9
	.short	62643                           # 0xf4b3
	.short	61291                           # 0xef6b
	.short	63594                           # 0xf86a
	.short	63562                           # 0xf84a
	.short	64600                           # 0xfc58
	.short	63498                           # 0xf80a
	.short	63466                           # 0xf7ea
	.short	64527                           # 0xfc0f
	.short	63402                           # 0xf7aa
	.short	61084                           # 0xee9c
	.short	64400                           # 0xfb90
	.short	63306                           # 0xf74a
	.short	63482                           # 0xf7fa
	.short	63242                           # 0xf70a
	.short	63434                           # 0xf7ca
	.short	63378                           # 0xf792
	.short	62577                           # 0xf471
	.short	62674                           # 0xf4d2
	.short	63282                           # 0xf732
	.short	63050                           # 0xf64a
	.short	62465                           # 0xf401
	.short	63053                           # 0xf64d
	.short	61352                           # 0xefa8
	.short	62922                           # 0xf5ca
	.short	62890                           # 0xf5aa
	.short	60577                           # 0xeca1
	.short	62825                           # 0xf569
	.short	62794                           # 0xf54a
	.short	62762                           # 0xf52a
	.short	62730                           # 0xf50a
	.short	62698                           # 0xf4ea
	.short	62666                           # 0xf4ca
	.short	62634                           # 0xf4aa
	.short	62602                           # 0xf48a
	.short	62570                           # 0xf46a
	.short	62538                           # 0xf44a
	.short	62506                           # 0xf42a
	.short	62474                           # 0xf40a
	.short	62442                           # 0xf3ea
	.short	62410                           # 0xf3ca
	.short	62378                           # 0xf3aa
	.short	62346                           # 0xf38a
	.short	62314                           # 0xf36a
	.short	62282                           # 0xf34a
	.short	62250                           # 0xf32a
	.short	62089                           # 0xf289
	.short	63351                           # 0xf777
	.short	62154                           # 0xf2ca
	.short	62122                           # 0xf2aa
	.short	63287                           # 0xf737
	.short	60456                           # 0xec28
	.short	60424                           # 0xec08
	.short	60392                           # 0xebe8
	.short	60360                           # 0xebc8
	.short	61930                           # 0xf1ea
	.short	62626                           # 0xf4a2
	.short	62789                           # 0xf545
	.short	60870                           # 0xedc6
	.short	62167                           # 0xf2d7
	.short	61770                           # 0xf14a
	.short	59629                           # 0xe8ed
	.short	59422                           # 0xe81e
	.short	61674                           # 0xf0ea
	.short	62871                           # 0xf597
	.short	60008                           # 0xea68
	.short	59976                           # 0xea48
	.short	59944                           # 0xea28
	.short	59912                           # 0xea08
	.short	59880                           # 0xe9e8
	.short	59848                           # 0xe9c8
	.short	59816                           # 0xe9a8
	.short	59784                           # 0xe988
	.short	59752                           # 0xe968
	.short	59720                           # 0xe948
	.short	59688                           # 0xe928
	.short	59656                           # 0xe908
	.short	59624                           # 0xe8e8
	.short	59592                           # 0xe8c8
	.short	59560                           # 0xe8a8
	.short	59528                           # 0xe888
	.short	59496                           # 0xe868
	.short	59464                           # 0xe848
	.short	59432                           # 0xe828
	.short	59400                           # 0xe808
	.short	59368                           # 0xe7e8
	.short	59336                           # 0xe7c8
	.short	59304                           # 0xe7a8
	.short	59272                           # 0xe788
	.short	59240                           # 0xe768
	.short	59208                           # 0xe748
	.short	59176                           # 0xe728
	.short	59144                           # 0xe708
	.short	59112                           # 0xe6e8
	.short	59080                           # 0xe6c8
	.short	59048                           # 0xe6a8
	.short	59016                           # 0xe688
	.short	58984                           # 0xe668
	.short	58952                           # 0xe648
	.short	58920                           # 0xe628
	.short	58888                           # 0xe608
	.short	58856                           # 0xe5e8
	.short	58824                           # 0xe5c8
	.short	58792                           # 0xe5a8
	.short	58760                           # 0xe588
	.short	58728                           # 0xe568
	.short	58696                           # 0xe548
	.short	58719                           # 0xe55f
	.short	58687                           # 0xe53f
	.short	58655                           # 0xe51f
	.short	58623                           # 0xe4ff
	.short	61399                           # 0xefd7
	.short	58559                           # 0xe4bf
	.short	58527                           # 0xe49f
	.short	58501                           # 0xe485
	.short	61319                           # 0xef87
	.short	61271                           # 0xef57
	.short	61271                           # 0xef57
	.short	61271                           # 0xef57
	.short	61271                           # 0xef57
	.short	61255                           # 0xef47
	.short	57773                           # 0xe1ad
	.short	61254                           # 0xef46
	.short	61254                           # 0xef46
	.short	61254                           # 0xef46
	.short	57824                           # 0xe1e0
	.short	58333                           # 0xe3dd
	.short	61190                           # 0xef06
	.short	59865                           # 0xe9d9
	.short	60395                           # 0xebeb
	.short	57924                           # 0xe244
	.short	61140                           # 0xeed4
	.short	61285                           # 0xef65
	.short	57845                           # 0xe1f5
	.short	61253                           # 0xef45
	.short	61161                           # 0xeee9
	.short	61308                           # 0xef7c
	.short	61044                           # 0xee74
	.short	61296                           # 0xef70
	.short	61309                           # 0xef7d
	.short	61304                           # 0xef78
	.short	61073                           # 0xee91
	.short	61395                           # 0xefd3
	.short	61053                           # 0xee7d
	.short	60965                           # 0xee25
	.short	60967                           # 0xee27
	.short	61285                           # 0xef65
	.short	61405                           # 0xefdd
	.short	61078                           # 0xee96
	.short	61395                           # 0xefd3
	.short	61409                           # 0xefe1
	.short	61289                           # 0xef69
	.short	57224                           # 0xdf88
	.short	57192                           # 0xdf68
	.short	57160                           # 0xdf48
	.short	60715                           # 0xed2b
	.short	60733                           # 0xed3d
	.short	60697                           # 0xed19
	.short	61212                           # 0xef1c
	.short	61192                           # 0xef08
	.short	60743                           # 0xed47
	.short	60733                           # 0xed3d
	.short	60723                           # 0xed33
	.short	60459                           # 0xec2b
	.short	60427                           # 0xec0b
	.short	60395                           # 0xebeb
	.short	60363                           # 0xebcb
	.short	60366                           # 0xebce
	.short	60028                           # 0xea7c
	.short	60265                           # 0xeb69
	.short	60268                           # 0xeb6c
	.short	59830                           # 0xe9b6
	.short	60171                           # 0xeb0b
	.short	60139                           # 0xeaeb
	.short	59881                           # 0xe9e9
	.short	56488                           # 0xdca8
	.short	56456                           # 0xdc88
	.short	56424                           # 0xdc68
	.short	56392                           # 0xdc48
	.short	59664                           # 0xe910
	.short	59939                           # 0xea23
	.short	60248                           # 0xeb58
	.short	60239                           # 0xeb4f
	.short	60229                           # 0xeb45
	.short	60133                           # 0xeae5
	.short	56168                           # 0xdb68
	.short	56136                           # 0xdb48
	.short	59691                           # 0xe92b
	.short	59659                           # 0xe90b
	.short	59627                           # 0xe8eb
	.short	59595                           # 0xe8cb
	.short	59563                           # 0xe8ab
	.short	59531                           # 0xe88b
	.short	59499                           # 0xe86b
	.short	59467                           # 0xe84b
	.short	55848                           # 0xda28
	.short	55816                           # 0xda08
	.short	55784                           # 0xd9e8
	.short	55752                           # 0xd9c8
	.short	55720                           # 0xd9a8
	.short	55688                           # 0xd988
	.short	55656                           # 0xd968
	.short	55624                           # 0xd948
	.short	55592                           # 0xd928
	.short	55560                           # 0xd908
	.short	55528                           # 0xd8e8
	.short	55496                           # 0xd8c8
	.short	55464                           # 0xd8a8
	.short	55432                           # 0xd888
	.short	55400                           # 0xd868
	.short	55368                           # 0xd848
	.short	55336                           # 0xd828
	.short	55304                           # 0xd808
	.short	55272                           # 0xd7e8
	.short	55240                           # 0xd7c8
	.short	55208                           # 0xd7a8
	.short	55176                           # 0xd788
	.short	55144                           # 0xd768
	.short	55112                           # 0xd748
	.short	55080                           # 0xd728
	.short	55048                           # 0xd708
	.short	55016                           # 0xd6e8
	.short	54984                           # 0xd6c8
	.short	54952                           # 0xd6a8
	.short	54920                           # 0xd688
	.short	54888                           # 0xd668
	.short	54856                           # 0xd648
	.short	54824                           # 0xd628
	.short	54792                           # 0xd608
	.short	54760                           # 0xd5e8
	.short	54728                           # 0xd5c8
	.short	54696                           # 0xd5a8
	.short	54664                           # 0xd588
	.short	54632                           # 0xd568
	.short	54600                           # 0xd548
	.short	54568                           # 0xd528
	.short	54536                           # 0xd508
	.short	54504                           # 0xd4e8
	.short	54472                           # 0xd4c8
	.short	58033                           # 0xe2b1
	.short	57995                           # 0xe28b
	.short	57963                           # 0xe26b
	.short	57968                           # 0xe270
	.short	57899                           # 0xe22b
	.short	57867                           # 0xe20b
	.short	57835                           # 0xe1eb
	.short	57803                           # 0xe1cb
	.short	57771                           # 0xe1ab
	.short	57739                           # 0xe18b
	.short	57742                           # 0xe18e
	.short	56719                           # 0xdd8f
	.short	58280                           # 0xe3a8
	.short	57299                           # 0xdfd3
	.short	55593                           # 0xd929
	.short	55562                           # 0xd90a
	.short	58184                           # 0xe348
	.short	55497                           # 0xd8c9
	.short	55466                           # 0xd8aa
	.short	56535                           # 0xdcd7
	.short	56498                           # 0xdcb2
	.short	54913                           # 0xd681
	.short	55338                           # 0xd82a
	.short	55306                           # 0xd80a
	.short	57960                           # 0xe268
	.short	52958                           # 0xcede
	.short	53608                           # 0xd168
	.short	53576                           # 0xd148
	.short	57622                           # 0xe116
	.short	57577                           # 0xe0e9
	.short	57803                           # 0xe1cb
	.short	57527                           # 0xe0b7
	.short	57527                           # 0xe0b7
	.short	57694                           # 0xe15e
	.short	57111                           # 0xdf17
	.short	57396                           # 0xe034
	.short	57363                           # 0xe013
	.short	57331                           # 0xdff3
	.short	57299                           # 0xdfd3
	.short	56940                           # 0xde6c
	.short	57235                           # 0xdf93
	.short	57203                           # 0xdf73
	.short	57173                           # 0xdf55
	.short	57140                           # 0xdf34
	.short	54634                           # 0xd56a
	.short	54602                           # 0xd54a
	.short	54570                           # 0xd52a
	.short	54538                           # 0xd50a
	.short	54506                           # 0xd4ea
	.short	54474                           # 0xd4ca
	.short	54442                           # 0xd4aa
	.short	54410                           # 0xd48a
	.short	54378                           # 0xd46a
	.short	54346                           # 0xd44a
	.short	54314                           # 0xd42a
	.short	54282                           # 0xd40a
	.short	54250                           # 0xd3ea
	.short	54218                           # 0xd3ca
	.short	54186                           # 0xd3aa
	.short	54154                           # 0xd38a
	.short	54122                           # 0xd36a
	.short	54090                           # 0xd34a
	.short	54058                           # 0xd32a
	.short	54026                           # 0xd30a
	.short	53994                           # 0xd2ea
	.short	53962                           # 0xd2ca
	.short	53930                           # 0xd2aa
	.short	53898                           # 0xd28a
	.short	53866                           # 0xd26a
	.short	53834                           # 0xd24a
	.short	53802                           # 0xd22a
	.short	53770                           # 0xd20a
	.short	53738                           # 0xd1ea
	.short	53706                           # 0xd1ca
	.short	53674                           # 0xd1aa
	.short	53642                           # 0xd18a
	.short	53610                           # 0xd16a
	.short	53578                           # 0xd14a
	.short	53546                           # 0xd12a
	.short	53514                           # 0xd10a
	.short	53482                           # 0xd0ea
	.short	53450                           # 0xd0ca
	.short	53418                           # 0xd0aa
	.short	53386                           # 0xd08a
	.short	53354                           # 0xd06a
	.short	53322                           # 0xd04a
	.short	53290                           # 0xd02a
	.short	53258                           # 0xd00a
	.short	53226                           # 0xcfea
	.short	53194                           # 0xcfca
	.short	53162                           # 0xcfaa
	.short	53130                           # 0xcf8a
	.short	53098                           # 0xcf6a
	.short	53066                           # 0xcf4a
	.short	53034                           # 0xcf2a
	.short	53002                           # 0xcf0a
	.short	52970                           # 0xceea
	.short	52938                           # 0xceca
	.short	52906                           # 0xceaa
	.short	52874                           # 0xce8a
	.short	52842                           # 0xce6a
	.short	52810                           # 0xce4a
	.short	52778                           # 0xce2a
	.short	52746                           # 0xce0a
	.short	52714                           # 0xcdea
	.short	52682                           # 0xcdca
	.short	52650                           # 0xcdaa
	.short	52618                           # 0xcd8a
	.short	52586                           # 0xcd6a
	.short	52554                           # 0xcd4a
	.short	52522                           # 0xcd2a
	.short	52490                           # 0xcd0a
	.short	52458                           # 0xccea
	.short	52426                           # 0xccca
	.short	52394                           # 0xccaa
	.short	52362                           # 0xcc8a
	.short	52330                           # 0xcc6a
	.short	52298                           # 0xcc4a
	.short	52266                           # 0xcc2a
	.short	52234                           # 0xcc0a
	.short	52202                           # 0xcbea
	.short	52170                           # 0xcbca
	.short	52138                           # 0xcbaa
	.short	52106                           # 0xcb8a
	.short	52074                           # 0xcb6a
	.short	52042                           # 0xcb4a
	.short	52010                           # 0xcb2a
	.short	51978                           # 0xcb0a
	.short	51946                           # 0xcaea
	.short	51914                           # 0xcaca
	.short	51882                           # 0xcaaa
	.short	51850                           # 0xca8a
	.short	51818                           # 0xca6a
	.short	51786                           # 0xca4a
	.short	51754                           # 0xca2a
	.short	51722                           # 0xca0a
	.short	51690                           # 0xc9ea
	.short	51658                           # 0xc9ca
	.short	51626                           # 0xc9aa
	.short	51594                           # 0xc98a
	.short	51562                           # 0xc96a
	.short	51530                           # 0xc94a
	.short	51498                           # 0xc92a
	.short	51466                           # 0xc90a
	.short	51434                           # 0xc8ea
	.short	51402                           # 0xc8ca
	.short	51370                           # 0xc8aa
	.short	51338                           # 0xc88a
	.short	51306                           # 0xc86a
	.short	51274                           # 0xc84a
	.short	51242                           # 0xc82a
	.short	51210                           # 0xc80a
	.short	51178                           # 0xc7ea
	.short	51146                           # 0xc7ca
	.short	51114                           # 0xc7aa
	.short	51082                           # 0xc78a
	.short	51050                           # 0xc76a
	.short	51018                           # 0xc74a
	.short	50986                           # 0xc72a
	.short	50954                           # 0xc70a
	.short	50922                           # 0xc6ea
	.short	50890                           # 0xc6ca
	.short	50858                           # 0xc6aa
	.short	50826                           # 0xc68a
	.short	50794                           # 0xc66a
	.short	50762                           # 0xc64a
	.short	50730                           # 0xc62a
	.short	50698                           # 0xc60a
	.short	50666                           # 0xc5ea
	.short	50634                           # 0xc5ca
	.short	50602                           # 0xc5aa
	.short	50570                           # 0xc58a
	.short	50538                           # 0xc56a
	.short	50506                           # 0xc54a
	.short	50474                           # 0xc52a
	.short	50442                           # 0xc50a
	.short	50410                           # 0xc4ea
	.short	50378                           # 0xc4ca
	.short	50346                           # 0xc4aa
	.short	50314                           # 0xc48a
	.short	50282                           # 0xc46a
	.short	50250                           # 0xc44a
	.short	50218                           # 0xc42a
	.short	50186                           # 0xc40a
	.short	50154                           # 0xc3ea
	.short	50122                           # 0xc3ca
	.short	50090                           # 0xc3aa
	.short	50058                           # 0xc38a
	.short	50026                           # 0xc36a
	.short	49994                           # 0xc34a
	.short	49962                           # 0xc32a
	.short	49930                           # 0xc30a
	.short	49898                           # 0xc2ea
	.short	49866                           # 0xc2ca
	.short	49834                           # 0xc2aa
	.short	49802                           # 0xc28a
	.short	49770                           # 0xc26a
	.short	49738                           # 0xc24a
	.short	49706                           # 0xc22a
	.short	49674                           # 0xc20a
	.short	49642                           # 0xc1ea
	.short	49610                           # 0xc1ca
	.short	49578                           # 0xc1aa
	.short	49546                           # 0xc18a
	.short	49514                           # 0xc16a
	.short	49482                           # 0xc14a
	.short	49450                           # 0xc12a
	.short	49418                           # 0xc10a
	.short	49386                           # 0xc0ea
	.short	49354                           # 0xc0ca
	.short	49322                           # 0xc0aa
	.short	49290                           # 0xc08a
	.short	49258                           # 0xc06a
	.short	49226                           # 0xc04a
	.short	49194                           # 0xc02a
	.short	49162                           # 0xc00a
	.short	49130                           # 0xbfea
	.short	49098                           # 0xbfca
	.short	49066                           # 0xbfaa
	.short	49034                           # 0xbf8a
	.short	49002                           # 0xbf6a
	.short	48970                           # 0xbf4a
	.short	48938                           # 0xbf2a
	.short	48906                           # 0xbf0a
	.short	48874                           # 0xbeea
	.short	48842                           # 0xbeca
	.short	48810                           # 0xbeaa
	.short	48778                           # 0xbe8a
	.short	48746                           # 0xbe6a
	.short	48714                           # 0xbe4a
	.short	48682                           # 0xbe2a
	.short	48650                           # 0xbe0a
	.short	48618                           # 0xbdea
	.short	48586                           # 0xbdca
	.short	48554                           # 0xbdaa
	.short	48522                           # 0xbd8a
	.short	48490                           # 0xbd6a
	.short	48458                           # 0xbd4a
	.short	48426                           # 0xbd2a
	.short	48394                           # 0xbd0a
	.short	48362                           # 0xbcea
	.short	48330                           # 0xbcca
	.short	48298                           # 0xbcaa
	.short	48266                           # 0xbc8a
	.short	48234                           # 0xbc6a
	.short	48202                           # 0xbc4a
	.short	48170                           # 0xbc2a
	.short	48138                           # 0xbc0a
	.short	48106                           # 0xbbea
	.short	45792                           # 0xb2e0
	.short	46440                           # 0xb568
	.short	46408                           # 0xb548
	.short	47978                           # 0xbb6a
	.short	47946                           # 0xbb4a
	.short	47914                           # 0xbb2a
	.short	47882                           # 0xbb0a
	.short	47850                           # 0xbaea
	.short	47818                           # 0xbaca
	.short	47786                           # 0xbaaa
	.short	47754                           # 0xba8a
	.short	47722                           # 0xba6a
	.short	47690                           # 0xba4a
	.short	47658                           # 0xba2a
	.short	47626                           # 0xba0a
	.short	47594                           # 0xb9ea
	.short	47562                           # 0xb9ca
	.short	47530                           # 0xb9aa
	.short	47498                           # 0xb98a
	.short	47466                           # 0xb96a
	.short	47434                           # 0xb94a
	.short	47402                           # 0xb92a
	.short	47370                           # 0xb90a
	.short	47338                           # 0xb8ea
	.short	47306                           # 0xb8ca
	.short	47274                           # 0xb8aa
	.short	47242                           # 0xb88a
	.short	47210                           # 0xb86a
	.short	47178                           # 0xb84a
	.short	47146                           # 0xb82a
	.short	47114                           # 0xb80a
	.short	47082                           # 0xb7ea
	.short	47050                           # 0xb7ca
	.short	47018                           # 0xb7aa
	.short	46986                           # 0xb78a
	.short	46954                           # 0xb76a
	.short	46922                           # 0xb74a
	.short	46890                           # 0xb72a
	.short	46858                           # 0xb70a
	.short	46826                           # 0xb6ea
	.short	46794                           # 0xb6ca
	.short	46762                           # 0xb6aa
	.short	46730                           # 0xb68a
	.short	46698                           # 0xb66a
	.short	46666                           # 0xb64a
	.short	46634                           # 0xb62a
	.short	46602                           # 0xb60a
	.short	46570                           # 0xb5ea
	.short	46538                           # 0xb5ca
	.short	46506                           # 0xb5aa
	.short	46474                           # 0xb58a
	.short	46442                           # 0xb56a
	.short	46410                           # 0xb54a
	.short	46378                           # 0xb52a
	.short	46346                           # 0xb50a
	.short	46314                           # 0xb4ea
	.short	46282                           # 0xb4ca
	.short	46250                           # 0xb4aa
	.short	46218                           # 0xb48a
	.short	46186                           # 0xb46a
	.short	46154                           # 0xb44a
	.short	46122                           # 0xb42a
	.short	46090                           # 0xb40a
	.short	46058                           # 0xb3ea
	.short	46026                           # 0xb3ca
	.short	45994                           # 0xb3aa
	.short	45962                           # 0xb38a
	.short	45930                           # 0xb36a
	.short	45898                           # 0xb34a
	.short	45866                           # 0xb32a
	.short	45834                           # 0xb30a
	.short	45802                           # 0xb2ea
	.short	45770                           # 0xb2ca
	.short	45738                           # 0xb2aa
	.short	45706                           # 0xb28a
	.short	45674                           # 0xb26a
	.short	45642                           # 0xb24a
	.short	45610                           # 0xb22a
	.short	45578                           # 0xb20a
	.short	45546                           # 0xb1ea
	.short	45514                           # 0xb1ca
	.short	45482                           # 0xb1aa
	.short	45450                           # 0xb18a
	.short	45418                           # 0xb16a
	.short	45386                           # 0xb14a
	.short	45354                           # 0xb12a
	.short	45322                           # 0xb10a
	.short	45290                           # 0xb0ea
	.short	45258                           # 0xb0ca
	.short	45226                           # 0xb0aa
	.short	45194                           # 0xb08a
	.short	45162                           # 0xb06a
	.short	45130                           # 0xb04a
	.short	45098                           # 0xb02a
	.short	45066                           # 0xb00a
	.short	45034                           # 0xafea
	.short	45002                           # 0xafca
	.short	44970                           # 0xafaa
	.short	44938                           # 0xaf8a
	.short	44906                           # 0xaf6a
	.short	44874                           # 0xaf4a
	.short	44842                           # 0xaf2a
	.short	44810                           # 0xaf0a
	.short	44778                           # 0xaeea
	.short	44746                           # 0xaeca
	.short	44714                           # 0xaeaa
	.short	44682                           # 0xae8a
	.short	44650                           # 0xae6a
	.short	44618                           # 0xae4a
	.short	44586                           # 0xae2a
	.short	44554                           # 0xae0a
	.short	44522                           # 0xadea
	.short	44490                           # 0xadca
	.short	44458                           # 0xadaa
	.short	44426                           # 0xad8a
	.short	44394                           # 0xad6a
	.short	44362                           # 0xad4a
	.short	44330                           # 0xad2a
	.short	44298                           # 0xad0a
	.short	44266                           # 0xacea
	.short	44234                           # 0xacca
	.short	44202                           # 0xacaa
	.short	44170                           # 0xac8a
	.short	44138                           # 0xac6a
	.short	44106                           # 0xac4a
	.short	44074                           # 0xac2a
	.short	44042                           # 0xac0a
	.short	44010                           # 0xabea
	.short	43978                           # 0xabca
	.short	43946                           # 0xabaa
	.short	43914                           # 0xab8a
	.short	43882                           # 0xab6a
	.short	43850                           # 0xab4a
	.short	43818                           # 0xab2a
	.short	43786                           # 0xab0a
	.short	43754                           # 0xaaea
	.short	43722                           # 0xaaca
	.short	43690                           # 0xaaaa
	.short	43658                           # 0xaa8a
	.short	43626                           # 0xaa6a
	.short	43594                           # 0xaa4a
	.short	43562                           # 0xaa2a
	.short	43530                           # 0xaa0a
	.short	43498                           # 0xa9ea
	.short	43466                           # 0xa9ca
	.short	43434                           # 0xa9aa
	.short	43402                           # 0xa98a
	.short	43370                           # 0xa96a
	.short	43338                           # 0xa94a
	.short	43306                           # 0xa92a
	.short	43274                           # 0xa90a
	.short	43242                           # 0xa8ea
	.short	43210                           # 0xa8ca
	.short	43178                           # 0xa8aa
	.short	43146                           # 0xa88a
	.short	43114                           # 0xa86a
	.short	43082                           # 0xa84a
	.short	43050                           # 0xa82a
	.short	43018                           # 0xa80a
	.short	42986                           # 0xa7ea
	.short	42954                           # 0xa7ca
	.short	42922                           # 0xa7aa
	.short	42890                           # 0xa78a
	.short	42858                           # 0xa76a
	.short	42826                           # 0xa74a
	.short	42794                           # 0xa72a
	.short	42762                           # 0xa70a
	.short	42730                           # 0xa6ea
	.short	42698                           # 0xa6ca
	.short	42666                           # 0xa6aa
	.short	42634                           # 0xa68a
	.short	42602                           # 0xa66a
	.short	42570                           # 0xa64a
	.short	42538                           # 0xa62a
	.short	42506                           # 0xa60a
	.short	42474                           # 0xa5ea
	.short	42442                           # 0xa5ca
	.short	42410                           # 0xa5aa
	.short	42378                           # 0xa58a
	.short	42346                           # 0xa56a
	.short	42314                           # 0xa54a
	.short	42282                           # 0xa52a
	.short	42250                           # 0xa50a
	.short	42218                           # 0xa4ea
	.short	42186                           # 0xa4ca
	.short	42154                           # 0xa4aa
	.short	42122                           # 0xa48a
	.short	42090                           # 0xa46a
	.short	42058                           # 0xa44a
	.short	42026                           # 0xa42a
	.short	41994                           # 0xa40a
	.short	41962                           # 0xa3ea
	.short	41930                           # 0xa3ca
	.short	41898                           # 0xa3aa
	.short	41866                           # 0xa38a
	.short	41834                           # 0xa36a
	.short	41802                           # 0xa34a
	.short	41770                           # 0xa32a
	.short	41738                           # 0xa30a
	.short	41706                           # 0xa2ea
	.short	41674                           # 0xa2ca
	.short	41642                           # 0xa2aa
	.short	41610                           # 0xa28a
	.short	41578                           # 0xa26a
	.short	41546                           # 0xa24a
	.short	41514                           # 0xa22a
	.short	41482                           # 0xa20a
	.short	41450                           # 0xa1ea
	.short	41418                           # 0xa1ca
	.short	41386                           # 0xa1aa
	.short	41354                           # 0xa18a
	.short	41322                           # 0xa16a
	.short	41290                           # 0xa14a
	.short	41258                           # 0xa12a
	.short	41226                           # 0xa10a
	.short	41194                           # 0xa0ea
	.short	41162                           # 0xa0ca
	.short	41130                           # 0xa0aa
	.short	41098                           # 0xa08a
	.short	41066                           # 0xa06a
	.short	41034                           # 0xa04a
	.short	41002                           # 0xa02a
	.short	40970                           # 0xa00a
	.short	40938                           # 0x9fea
	.short	40906                           # 0x9fca
	.short	40874                           # 0x9faa
	.short	40842                           # 0x9f8a
	.short	40810                           # 0x9f6a
	.short	40778                           # 0x9f4a
	.short	40746                           # 0x9f2a
	.short	40714                           # 0x9f0a
	.short	40682                           # 0x9eea
	.short	40650                           # 0x9eca
	.short	40618                           # 0x9eaa
	.short	40586                           # 0x9e8a
	.short	40554                           # 0x9e6a
	.short	40522                           # 0x9e4a
	.short	40490                           # 0x9e2a
	.short	40458                           # 0x9e0a
	.short	40426                           # 0x9dea
	.short	40394                           # 0x9dca
	.short	40362                           # 0x9daa
	.short	40330                           # 0x9d8a
	.short	40298                           # 0x9d6a
	.short	40266                           # 0x9d4a
	.short	40234                           # 0x9d2a
	.short	40202                           # 0x9d0a
	.short	40170                           # 0x9cea
	.short	40138                           # 0x9cca
	.short	40106                           # 0x9caa
	.short	40074                           # 0x9c8a
	.short	40042                           # 0x9c6a
	.short	40010                           # 0x9c4a
	.short	39978                           # 0x9c2a
	.short	39946                           # 0x9c0a
	.short	39914                           # 0x9bea
	.short	39882                           # 0x9bca
	.short	39850                           # 0x9baa
	.short	39818                           # 0x9b8a
	.short	39786                           # 0x9b6a
	.short	39754                           # 0x9b4a
	.short	39722                           # 0x9b2a
	.short	39690                           # 0x9b0a
	.short	39658                           # 0x9aea
	.short	39626                           # 0x9aca
	.short	39594                           # 0x9aaa
	.short	39562                           # 0x9a8a
	.short	39530                           # 0x9a6a
	.short	39498                           # 0x9a4a
	.short	39466                           # 0x9a2a
	.short	39434                           # 0x9a0a
	.short	39402                           # 0x99ea
	.short	39370                           # 0x99ca
	.short	39338                           # 0x99aa
	.short	39306                           # 0x998a
	.short	39274                           # 0x996a
	.short	39242                           # 0x994a
	.short	39210                           # 0x992a
	.short	39178                           # 0x990a
	.short	39146                           # 0x98ea
	.short	39114                           # 0x98ca
	.short	39082                           # 0x98aa
	.short	39050                           # 0x988a
	.short	39018                           # 0x986a
	.short	38986                           # 0x984a
	.short	38954                           # 0x982a
	.short	38922                           # 0x980a
	.short	38890                           # 0x97ea
	.short	38858                           # 0x97ca
	.short	38826                           # 0x97aa
	.short	38794                           # 0x978a
	.short	38762                           # 0x976a
	.short	38730                           # 0x974a
	.short	38698                           # 0x972a
	.short	38666                           # 0x970a
	.short	38634                           # 0x96ea
	.short	38602                           # 0x96ca
	.short	38570                           # 0x96aa
	.short	38538                           # 0x968a
	.short	38506                           # 0x966a
	.short	38474                           # 0x964a
	.short	38442                           # 0x962a
	.short	38410                           # 0x960a
	.short	38378                           # 0x95ea
	.short	38346                           # 0x95ca
	.short	38314                           # 0x95aa
	.short	38282                           # 0x958a
	.short	38250                           # 0x956a
	.short	38218                           # 0x954a
	.short	38186                           # 0x952a
	.short	38154                           # 0x950a
	.short	38122                           # 0x94ea
	.short	38090                           # 0x94ca
	.short	38058                           # 0x94aa
	.short	38026                           # 0x948a
	.short	37994                           # 0x946a
	.short	37962                           # 0x944a
	.short	37930                           # 0x942a
	.short	37898                           # 0x940a
	.short	37866                           # 0x93ea
	.short	37834                           # 0x93ca
	.short	37802                           # 0x93aa
	.short	37770                           # 0x938a
	.short	37738                           # 0x936a
	.short	37706                           # 0x934a
	.short	37674                           # 0x932a
	.short	37642                           # 0x930a
	.short	37610                           # 0x92ea
	.short	37578                           # 0x92ca
	.short	37546                           # 0x92aa
	.short	37514                           # 0x928a
	.short	37482                           # 0x926a
	.short	37450                           # 0x924a
	.short	37418                           # 0x922a
	.short	37386                           # 0x920a
	.short	37354                           # 0x91ea
	.short	37322                           # 0x91ca
	.short	37290                           # 0x91aa
	.short	37258                           # 0x918a
	.short	37226                           # 0x916a
	.short	37194                           # 0x914a
	.short	37162                           # 0x912a
	.short	37130                           # 0x910a
	.short	37098                           # 0x90ea
	.short	37066                           # 0x90ca
	.short	37034                           # 0x90aa
	.short	37002                           # 0x908a
	.short	36970                           # 0x906a
	.short	36938                           # 0x904a
	.short	36906                           # 0x902a
	.short	36874                           # 0x900a
	.short	36842                           # 0x8fea
	.short	36810                           # 0x8fca
	.short	36778                           # 0x8faa
	.short	36746                           # 0x8f8a
	.short	36714                           # 0x8f6a
	.short	36682                           # 0x8f4a
	.short	36650                           # 0x8f2a
	.short	36618                           # 0x8f0a
	.short	36586                           # 0x8eea
	.short	36554                           # 0x8eca
	.short	36522                           # 0x8eaa
	.short	36490                           # 0x8e8a
	.short	36458                           # 0x8e6a
	.short	36426                           # 0x8e4a
	.short	36394                           # 0x8e2a
	.short	36362                           # 0x8e0a
	.short	36330                           # 0x8dea
	.short	36298                           # 0x8dca
	.short	36266                           # 0x8daa
	.short	36234                           # 0x8d8a
	.short	36202                           # 0x8d6a
	.short	36170                           # 0x8d4a
	.short	36138                           # 0x8d2a
	.short	36106                           # 0x8d0a
	.short	36074                           # 0x8cea
	.short	36042                           # 0x8cca
	.short	36010                           # 0x8caa
	.short	35978                           # 0x8c8a
	.short	35946                           # 0x8c6a
	.short	35914                           # 0x8c4a
	.short	35882                           # 0x8c2a
	.short	35850                           # 0x8c0a
	.short	35818                           # 0x8bea
	.short	35786                           # 0x8bca
	.short	35754                           # 0x8baa
	.short	35722                           # 0x8b8a
	.short	35690                           # 0x8b6a
	.short	35658                           # 0x8b4a
	.short	35626                           # 0x8b2a
	.short	35594                           # 0x8b0a
	.short	35562                           # 0x8aea
	.short	35530                           # 0x8aca
	.short	35498                           # 0x8aaa
	.short	35466                           # 0x8a8a
	.short	35434                           # 0x8a6a
	.short	35402                           # 0x8a4a
	.short	35370                           # 0x8a2a
	.short	35338                           # 0x8a0a
	.short	35306                           # 0x89ea
	.short	35274                           # 0x89ca
	.short	35242                           # 0x89aa
	.short	35210                           # 0x898a
	.short	35178                           # 0x896a
	.short	35146                           # 0x894a
	.short	35114                           # 0x892a
	.short	35082                           # 0x890a
	.short	35050                           # 0x88ea
	.short	35018                           # 0x88ca
	.short	34986                           # 0x88aa
	.short	34954                           # 0x888a
	.short	34922                           # 0x886a
	.short	34890                           # 0x884a
	.short	34858                           # 0x882a
	.short	34826                           # 0x880a
	.short	34794                           # 0x87ea
	.short	34762                           # 0x87ca
	.short	34730                           # 0x87aa
	.short	34698                           # 0x878a
	.short	34666                           # 0x876a
	.short	34634                           # 0x874a
	.short	34602                           # 0x872a
	.short	34570                           # 0x870a
	.short	34538                           # 0x86ea
	.short	34506                           # 0x86ca
	.short	34474                           # 0x86aa
	.short	34442                           # 0x868a
	.short	34410                           # 0x866a
	.short	34378                           # 0x864a
	.short	34346                           # 0x862a
	.short	34314                           # 0x860a
	.short	34282                           # 0x85ea
	.short	34250                           # 0x85ca
	.short	34218                           # 0x85aa
	.short	34186                           # 0x858a
	.short	34154                           # 0x856a
	.short	34122                           # 0x854a
	.short	34090                           # 0x852a
	.short	34058                           # 0x850a
	.short	34026                           # 0x84ea
	.short	33994                           # 0x84ca
	.short	33962                           # 0x84aa
	.short	33930                           # 0x848a
	.short	33898                           # 0x846a
	.short	33866                           # 0x844a
	.short	33834                           # 0x842a
	.short	33802                           # 0x840a
	.short	33770                           # 0x83ea
	.short	33738                           # 0x83ca
	.short	33706                           # 0x83aa
	.short	33674                           # 0x838a
	.short	33642                           # 0x836a
	.short	33610                           # 0x834a
	.short	33578                           # 0x832a
	.short	33546                           # 0x830a
	.short	33514                           # 0x82ea
	.short	33482                           # 0x82ca
	.short	33450                           # 0x82aa
	.short	33418                           # 0x828a
	.short	33386                           # 0x826a
	.short	33354                           # 0x824a
	.short	33322                           # 0x822a
	.short	33290                           # 0x820a
	.short	33258                           # 0x81ea
	.short	33226                           # 0x81ca
	.short	33194                           # 0x81aa
	.short	33162                           # 0x818a
	.short	33130                           # 0x816a
	.short	33098                           # 0x814a
	.short	33066                           # 0x812a
	.short	33034                           # 0x810a
	.short	33002                           # 0x80ea
	.short	32970                           # 0x80ca
	.short	32938                           # 0x80aa
	.short	32906                           # 0x808a
	.short	32874                           # 0x806a
	.short	32842                           # 0x804a
	.short	32810                           # 0x802a
	.short	32778                           # 0x800a
	.short	32746                           # 0x7fea
	.short	32714                           # 0x7fca
	.short	32682                           # 0x7faa
	.short	32650                           # 0x7f8a
	.short	32618                           # 0x7f6a
	.short	32586                           # 0x7f4a
	.short	32554                           # 0x7f2a
	.short	32522                           # 0x7f0a
	.short	32490                           # 0x7eea
	.short	32458                           # 0x7eca
	.short	32426                           # 0x7eaa
	.short	32394                           # 0x7e8a
	.short	32362                           # 0x7e6a
	.short	32330                           # 0x7e4a
	.short	32298                           # 0x7e2a
	.short	32266                           # 0x7e0a
	.short	32234                           # 0x7dea
	.short	32202                           # 0x7dca
	.short	32170                           # 0x7daa
	.short	32138                           # 0x7d8a
	.short	32106                           # 0x7d6a
	.short	32074                           # 0x7d4a
	.short	32042                           # 0x7d2a
	.short	32010                           # 0x7d0a
	.short	31978                           # 0x7cea
	.short	31946                           # 0x7cca
	.short	31914                           # 0x7caa
	.short	31882                           # 0x7c8a
	.short	31850                           # 0x7c6a
	.short	31818                           # 0x7c4a
	.short	31786                           # 0x7c2a
	.short	31754                           # 0x7c0a
	.short	31722                           # 0x7bea
	.short	31690                           # 0x7bca
	.short	31658                           # 0x7baa
	.short	31626                           # 0x7b8a
	.short	31594                           # 0x7b6a
	.short	31562                           # 0x7b4a
	.short	31530                           # 0x7b2a
	.short	31498                           # 0x7b0a
	.short	31466                           # 0x7aea
	.short	31434                           # 0x7aca
	.short	31402                           # 0x7aaa
	.short	31370                           # 0x7a8a
	.short	31338                           # 0x7a6a
	.short	31306                           # 0x7a4a
	.short	31274                           # 0x7a2a
	.short	31242                           # 0x7a0a
	.short	31210                           # 0x79ea
	.short	31178                           # 0x79ca
	.short	31146                           # 0x79aa
	.short	31114                           # 0x798a
	.short	31082                           # 0x796a
	.short	31050                           # 0x794a
	.short	31018                           # 0x792a
	.short	30986                           # 0x790a
	.short	30954                           # 0x78ea
	.short	30922                           # 0x78ca
	.short	30890                           # 0x78aa
	.short	30858                           # 0x788a
	.short	30826                           # 0x786a
	.short	30794                           # 0x784a
	.short	30762                           # 0x782a
	.short	30730                           # 0x780a
	.short	30698                           # 0x77ea
	.short	30666                           # 0x77ca
	.short	30634                           # 0x77aa
	.short	30602                           # 0x778a
	.short	30570                           # 0x776a
	.short	30538                           # 0x774a
	.short	30506                           # 0x772a
	.short	30474                           # 0x770a
	.short	30442                           # 0x76ea
	.short	30410                           # 0x76ca
	.short	30378                           # 0x76aa
	.short	30346                           # 0x768a
	.short	30314                           # 0x766a
	.short	30282                           # 0x764a
	.short	30250                           # 0x762a
	.short	30218                           # 0x760a
	.short	30186                           # 0x75ea
	.short	30154                           # 0x75ca
	.short	30122                           # 0x75aa
	.short	30090                           # 0x758a
	.short	30058                           # 0x756a
	.short	30026                           # 0x754a
	.short	29994                           # 0x752a
	.short	29962                           # 0x750a
	.short	29930                           # 0x74ea
	.short	29898                           # 0x74ca
	.short	29866                           # 0x74aa
	.short	29834                           # 0x748a
	.short	29802                           # 0x746a
	.short	29770                           # 0x744a
	.short	29738                           # 0x742a
	.short	29706                           # 0x740a
	.short	29674                           # 0x73ea
	.short	29642                           # 0x73ca
	.short	29610                           # 0x73aa
	.short	29578                           # 0x738a
	.short	29546                           # 0x736a
	.short	29514                           # 0x734a
	.short	29482                           # 0x732a
	.short	29450                           # 0x730a
	.short	29418                           # 0x72ea
	.short	29386                           # 0x72ca
	.short	29354                           # 0x72aa
	.short	29322                           # 0x728a
	.short	29290                           # 0x726a
	.short	29258                           # 0x724a
	.short	29226                           # 0x722a
	.short	29194                           # 0x720a
	.short	29162                           # 0x71ea
	.short	29130                           # 0x71ca
	.short	29098                           # 0x71aa
	.short	29066                           # 0x718a
	.short	29034                           # 0x716a
	.short	29002                           # 0x714a
	.short	28970                           # 0x712a
	.short	28938                           # 0x710a
	.short	28906                           # 0x70ea
	.short	28874                           # 0x70ca
	.short	28842                           # 0x70aa
	.short	28810                           # 0x708a
	.short	28778                           # 0x706a
	.short	28746                           # 0x704a
	.short	28714                           # 0x702a
	.short	28682                           # 0x700a
	.short	28650                           # 0x6fea
	.short	28618                           # 0x6fca
	.short	28586                           # 0x6faa
	.short	28554                           # 0x6f8a
	.short	28522                           # 0x6f6a
	.short	28490                           # 0x6f4a
	.short	28458                           # 0x6f2a
	.short	28426                           # 0x6f0a
	.short	28394                           # 0x6eea
	.short	28362                           # 0x6eca
	.short	28330                           # 0x6eaa
	.short	28298                           # 0x6e8a
	.short	28266                           # 0x6e6a
	.short	28234                           # 0x6e4a
	.short	28202                           # 0x6e2a
	.short	28170                           # 0x6e0a
	.short	28138                           # 0x6dea
	.short	28106                           # 0x6dca
	.short	28074                           # 0x6daa
	.short	28042                           # 0x6d8a
	.short	28010                           # 0x6d6a
	.short	27978                           # 0x6d4a
	.short	27946                           # 0x6d2a
	.short	27914                           # 0x6d0a
	.short	27882                           # 0x6cea
	.short	27850                           # 0x6cca
	.short	27818                           # 0x6caa
	.short	27786                           # 0x6c8a
	.short	27754                           # 0x6c6a
	.short	27722                           # 0x6c4a
	.short	27690                           # 0x6c2a
	.short	27658                           # 0x6c0a
	.short	27626                           # 0x6bea
	.short	27594                           # 0x6bca
	.short	27562                           # 0x6baa
	.short	27530                           # 0x6b8a
	.short	27498                           # 0x6b6a
	.short	27466                           # 0x6b4a
	.short	27434                           # 0x6b2a
	.short	27402                           # 0x6b0a
	.short	27370                           # 0x6aea
	.short	27338                           # 0x6aca
	.short	27306                           # 0x6aaa
	.short	27274                           # 0x6a8a
	.short	27242                           # 0x6a6a
	.short	27210                           # 0x6a4a
	.short	27178                           # 0x6a2a
	.short	27146                           # 0x6a0a
	.short	27114                           # 0x69ea
	.short	24816                           # 0x60f0
	.short	25448                           # 0x6368
	.short	25416                           # 0x6348
	.short	26986                           # 0x696a
	.short	26954                           # 0x694a
	.short	26922                           # 0x692a
	.short	26890                           # 0x690a
	.short	26858                           # 0x68ea
	.short	26826                           # 0x68ca
	.short	26794                           # 0x68aa
	.short	26762                           # 0x688a
	.short	26730                           # 0x686a
	.short	26698                           # 0x684a
	.short	26666                           # 0x682a
	.short	26634                           # 0x680a
	.short	26602                           # 0x67ea
	.short	26570                           # 0x67ca
	.short	26538                           # 0x67aa
	.short	26506                           # 0x678a
	.short	26474                           # 0x676a
	.short	26442                           # 0x674a
	.short	26410                           # 0x672a
	.short	26378                           # 0x670a
	.short	26346                           # 0x66ea
	.short	26314                           # 0x66ca
	.short	26282                           # 0x66aa
	.short	26250                           # 0x668a
	.short	26218                           # 0x666a
	.short	26186                           # 0x664a
	.short	26154                           # 0x662a
	.short	26122                           # 0x660a
	.short	26090                           # 0x65ea
	.short	26058                           # 0x65ca
	.short	26026                           # 0x65aa
	.short	25994                           # 0x658a
	.short	25962                           # 0x656a
	.short	25930                           # 0x654a
	.short	25898                           # 0x652a
	.short	25866                           # 0x650a
	.short	27430                           # 0x6b26
	.short	28129                           # 0x6de1
	.short	28316                           # 0x6e9c
	.short	24136                           # 0x5e48
	.short	24104                           # 0x5e28
	.short	24072                           # 0x5e08
	.short	24040                           # 0x5de8
	.short	24008                           # 0x5dc8
	.short	23976                           # 0x5da8
	.short	23944                           # 0x5d88
	.short	23912                           # 0x5d68
	.short	23880                           # 0x5d48
	.short	23848                           # 0x5d28
	.short	23816                           # 0x5d08
	.short	23784                           # 0x5ce8
	.short	23752                           # 0x5cc8
	.short	23720                           # 0x5ca8
	.short	23688                           # 0x5c88
	.short	23656                           # 0x5c68
	.short	23624                           # 0x5c48
	.short	23592                           # 0x5c28
	.short	23560                           # 0x5c08
	.short	23528                           # 0x5be8
	.short	23496                           # 0x5bc8
	.short	23464                           # 0x5ba8
	.short	23432                           # 0x5b88
	.short	23400                           # 0x5b68
	.short	23368                           # 0x5b48
	.short	23336                           # 0x5b28
	.short	23304                           # 0x5b08
	.short	23272                           # 0x5ae8
	.short	23240                           # 0x5ac8
	.short	23208                           # 0x5aa8
	.short	23176                           # 0x5a88
	.short	23144                           # 0x5a68
	.short	23112                           # 0x5a48
	.short	23080                           # 0x5a28
	.short	23048                           # 0x5a08
	.short	23016                           # 0x59e8
	.short	22984                           # 0x59c8
	.short	22952                           # 0x59a8
	.short	22920                           # 0x5988
	.short	22888                           # 0x5968
	.short	22856                           # 0x5948
	.short	22824                           # 0x5928
	.short	22792                           # 0x5908
	.short	22760                           # 0x58e8
	.short	22728                           # 0x58c8
	.short	22696                           # 0x58a8
	.short	22664                           # 0x5888
	.short	22632                           # 0x5868
	.short	22600                           # 0x5848
	.short	22568                           # 0x5828
	.short	22536                           # 0x5808
	.short	22504                           # 0x57e8
	.short	22472                           # 0x57c8
	.short	22440                           # 0x57a8
	.short	22408                           # 0x5788
	.short	22376                           # 0x5768
	.short	22344                           # 0x5748
	.short	23914                           # 0x5d6a
	.short	23882                           # 0x5d4a
	.short	23850                           # 0x5d2a
	.short	23818                           # 0x5d0a
	.short	23786                           # 0x5cea
	.short	23754                           # 0x5cca
	.short	23722                           # 0x5caa
	.short	23690                           # 0x5c8a
	.short	23658                           # 0x5c6a
	.short	23626                           # 0x5c4a
	.short	23594                           # 0x5c2a
	.short	23562                           # 0x5c0a
	.short	23530                           # 0x5bea
	.short	23498                           # 0x5bca
	.short	23466                           # 0x5baa
	.short	23434                           # 0x5b8a
	.short	23402                           # 0x5b6a
	.short	23370                           # 0x5b4a
	.short	23338                           # 0x5b2a
	.short	23306                           # 0x5b0a
	.short	23274                           # 0x5aea
	.short	23242                           # 0x5aca
	.short	23210                           # 0x5aaa
	.short	23178                           # 0x5a8a
	.short	23146                           # 0x5a6a
	.short	23114                           # 0x5a4a
	.short	23082                           # 0x5a2a
	.short	23050                           # 0x5a0a
	.short	23018                           # 0x59ea
	.short	22986                           # 0x59ca
	.short	22954                           # 0x59aa
	.short	22922                           # 0x598a
	.short	22890                           # 0x596a
	.short	22858                           # 0x594a
	.short	22826                           # 0x592a
	.short	22794                           # 0x590a
	.short	22762                           # 0x58ea
	.short	22730                           # 0x58ca
	.short	22698                           # 0x58aa
	.short	22666                           # 0x588a
	.short	22634                           # 0x586a
	.short	22602                           # 0x584a
	.short	22570                           # 0x582a
	.short	22538                           # 0x580a
	.short	22506                           # 0x57ea
	.short	22474                           # 0x57ca
	.short	22442                           # 0x57aa
	.short	22410                           # 0x578a
	.short	22378                           # 0x576a
	.short	22346                           # 0x574a
	.short	22314                           # 0x572a
	.short	22282                           # 0x570a
	.short	22250                           # 0x56ea
	.short	22218                           # 0x56ca
	.short	22186                           # 0x56aa
	.short	22154                           # 0x568a
	.short	22122                           # 0x566a
	.short	22090                           # 0x564a
	.short	22058                           # 0x562a
	.short	22026                           # 0x560a
	.short	21994                           # 0x55ea
	.short	21962                           # 0x55ca
	.short	21930                           # 0x55aa
	.short	21898                           # 0x558a
	.short	21866                           # 0x556a
	.short	21834                           # 0x554a
	.short	21802                           # 0x552a
	.short	21770                           # 0x550a
	.short	21738                           # 0x54ea
	.short	21706                           # 0x54ca
	.short	21674                           # 0x54aa
	.short	21642                           # 0x548a
	.short	21610                           # 0x546a
	.short	21578                           # 0x544a
	.short	21546                           # 0x542a
	.short	21514                           # 0x540a
	.short	21482                           # 0x53ea
	.short	21450                           # 0x53ca
	.short	21418                           # 0x53aa
	.short	21386                           # 0x538a
	.short	21354                           # 0x536a
	.short	21322                           # 0x534a
	.short	21290                           # 0x532a
	.short	21258                           # 0x530a
	.short	21226                           # 0x52ea
	.short	21194                           # 0x52ca
	.short	21162                           # 0x52aa
	.short	21130                           # 0x528a
	.short	21098                           # 0x526a
	.short	21066                           # 0x524a
	.short	21034                           # 0x522a
	.short	21002                           # 0x520a
	.short	20970                           # 0x51ea
	.short	20938                           # 0x51ca
	.short	20906                           # 0x51aa
	.short	20874                           # 0x518a
	.short	20842                           # 0x516a
	.short	20810                           # 0x514a
	.short	20778                           # 0x512a
	.short	20746                           # 0x510a
	.short	20714                           # 0x50ea
	.short	20682                           # 0x50ca
	.short	20650                           # 0x50aa
	.short	20618                           # 0x508a
	.short	20586                           # 0x506a
	.short	20554                           # 0x504a
	.short	20522                           # 0x502a
	.short	20490                           # 0x500a
	.short	20458                           # 0x4fea
	.short	20426                           # 0x4fca
	.short	20394                           # 0x4faa
	.short	20362                           # 0x4f8a
	.short	20330                           # 0x4f6a
	.short	20298                           # 0x4f4a
	.short	20266                           # 0x4f2a
	.short	20234                           # 0x4f0a
	.short	20202                           # 0x4eea
	.short	20170                           # 0x4eca
	.short	20138                           # 0x4eaa
	.short	20106                           # 0x4e8a
	.short	20074                           # 0x4e6a
	.short	20042                           # 0x4e4a
	.short	20010                           # 0x4e2a
	.short	19978                           # 0x4e0a
	.short	19946                           # 0x4dea
	.short	19914                           # 0x4dca
	.short	19882                           # 0x4daa
	.short	19850                           # 0x4d8a
	.short	19818                           # 0x4d6a
	.short	19786                           # 0x4d4a
	.short	19754                           # 0x4d2a
	.short	19722                           # 0x4d0a
	.short	19690                           # 0x4cea
	.short	19658                           # 0x4cca
	.short	19626                           # 0x4caa
	.short	19594                           # 0x4c8a
	.short	19562                           # 0x4c6a
	.short	19530                           # 0x4c4a
	.short	19498                           # 0x4c2a
	.short	19466                           # 0x4c0a
	.short	19434                           # 0x4bea
	.short	19402                           # 0x4bca
	.short	19370                           # 0x4baa
	.short	19338                           # 0x4b8a
	.short	19306                           # 0x4b6a
	.short	19274                           # 0x4b4a
	.short	19242                           # 0x4b2a
	.short	19210                           # 0x4b0a
	.short	19178                           # 0x4aea
	.short	19146                           # 0x4aca
	.short	19114                           # 0x4aaa
	.short	19082                           # 0x4a8a
	.short	19050                           # 0x4a6a
	.short	19018                           # 0x4a4a
	.short	18986                           # 0x4a2a
	.short	18954                           # 0x4a0a
	.short	18922                           # 0x49ea
	.short	18890                           # 0x49ca
	.short	18858                           # 0x49aa
	.short	18826                           # 0x498a
	.short	18794                           # 0x496a
	.short	18762                           # 0x494a
	.short	18730                           # 0x492a
	.short	18698                           # 0x490a
	.short	18666                           # 0x48ea
	.short	18634                           # 0x48ca
	.short	18602                           # 0x48aa
	.short	18570                           # 0x488a
	.short	18538                           # 0x486a
	.short	18506                           # 0x484a
	.short	18474                           # 0x482a
	.short	18442                           # 0x480a
	.short	18410                           # 0x47ea
	.short	18378                           # 0x47ca
	.short	18346                           # 0x47aa
	.short	18314                           # 0x478a
	.short	18282                           # 0x476a
	.short	18250                           # 0x474a
	.short	18218                           # 0x472a
	.short	18186                           # 0x470a
	.short	18154                           # 0x46ea
	.short	18122                           # 0x46ca
	.short	18090                           # 0x46aa
	.short	18058                           # 0x468a
	.short	18026                           # 0x466a
	.short	17994                           # 0x464a
	.short	17962                           # 0x462a
	.short	17930                           # 0x460a
	.short	17898                           # 0x45ea
	.short	17866                           # 0x45ca
	.short	17834                           # 0x45aa
	.short	17802                           # 0x458a
	.short	17770                           # 0x456a
	.short	17738                           # 0x454a
	.short	17706                           # 0x452a
	.short	17674                           # 0x450a
	.short	17642                           # 0x44ea
	.short	17610                           # 0x44ca
	.short	17578                           # 0x44aa
	.short	17546                           # 0x448a
	.short	17514                           # 0x446a
	.short	17482                           # 0x444a
	.short	17450                           # 0x442a
	.short	17418                           # 0x440a
	.short	17386                           # 0x43ea
	.short	17354                           # 0x43ca
	.short	17322                           # 0x43aa
	.short	17290                           # 0x438a
	.short	17258                           # 0x436a
	.short	17226                           # 0x434a
	.short	17194                           # 0x432a
	.short	17162                           # 0x430a
	.short	17130                           # 0x42ea
	.short	17098                           # 0x42ca
	.short	17066                           # 0x42aa
	.short	17034                           # 0x428a
	.short	17002                           # 0x426a
	.short	16970                           # 0x424a
	.short	16938                           # 0x422a
	.short	16906                           # 0x420a
	.short	16874                           # 0x41ea
	.short	16842                           # 0x41ca
	.short	16810                           # 0x41aa
	.short	16778                           # 0x418a
	.short	16746                           # 0x416a
	.short	16714                           # 0x414a
	.short	16682                           # 0x412a
	.short	16650                           # 0x410a
	.short	16618                           # 0x40ea
	.short	16586                           # 0x40ca
	.short	16554                           # 0x40aa
	.short	16522                           # 0x408a
	.short	16490                           # 0x406a
	.short	16458                           # 0x404a
	.short	16426                           # 0x402a
	.short	16394                           # 0x400a
	.short	16362                           # 0x3fea
	.short	16330                           # 0x3fca
	.short	16298                           # 0x3faa
	.short	16266                           # 0x3f8a
	.short	16234                           # 0x3f6a
	.short	16202                           # 0x3f4a
	.short	16170                           # 0x3f2a
	.short	16138                           # 0x3f0a
	.short	16106                           # 0x3eea
	.short	16074                           # 0x3eca
	.short	16042                           # 0x3eaa
	.short	16010                           # 0x3e8a
	.short	15978                           # 0x3e6a
	.short	15946                           # 0x3e4a
	.short	15914                           # 0x3e2a
	.short	15882                           # 0x3e0a
	.short	15850                           # 0x3dea
	.short	15818                           # 0x3dca
	.short	15786                           # 0x3daa
	.short	15754                           # 0x3d8a
	.short	15722                           # 0x3d6a
	.short	15690                           # 0x3d4a
	.short	15658                           # 0x3d2a
	.short	15626                           # 0x3d0a
	.short	15594                           # 0x3cea
	.short	15562                           # 0x3cca
	.short	15530                           # 0x3caa
	.short	15498                           # 0x3c8a
	.short	15466                           # 0x3c6a
	.short	15434                           # 0x3c4a
	.short	15402                           # 0x3c2a
	.short	15370                           # 0x3c0a
	.short	15338                           # 0x3bea
	.short	15306                           # 0x3bca
	.short	15274                           # 0x3baa
	.short	15242                           # 0x3b8a
	.short	15210                           # 0x3b6a
	.short	15178                           # 0x3b4a
	.short	15146                           # 0x3b2a
	.short	15114                           # 0x3b0a
	.short	15082                           # 0x3aea
	.short	15050                           # 0x3aca
	.short	15018                           # 0x3aaa
	.short	14986                           # 0x3a8a
	.short	14954                           # 0x3a6a
	.short	14922                           # 0x3a4a
	.short	14890                           # 0x3a2a
	.short	14858                           # 0x3a0a
	.short	14826                           # 0x39ea
	.short	14794                           # 0x39ca
	.short	14762                           # 0x39aa
	.short	14730                           # 0x398a
	.short	14698                           # 0x396a
	.short	14666                           # 0x394a
	.short	14634                           # 0x392a
	.short	14602                           # 0x390a
	.short	14570                           # 0x38ea
	.short	14538                           # 0x38ca
	.short	14506                           # 0x38aa
	.short	14474                           # 0x388a
	.short	14442                           # 0x386a
	.short	14410                           # 0x384a
	.short	14378                           # 0x382a
	.short	14346                           # 0x380a
	.short	14314                           # 0x37ea
	.short	14282                           # 0x37ca
	.short	14250                           # 0x37aa
	.short	14218                           # 0x378a
	.short	14186                           # 0x376a
	.short	14154                           # 0x374a
	.short	14122                           # 0x372a
	.short	14090                           # 0x370a
	.short	14058                           # 0x36ea
	.short	14026                           # 0x36ca
	.short	13994                           # 0x36aa
	.short	13962                           # 0x368a
	.short	13930                           # 0x366a
	.short	13898                           # 0x364a
	.short	13866                           # 0x362a
	.short	13834                           # 0x360a
	.short	13802                           # 0x35ea
	.short	13770                           # 0x35ca
	.short	13738                           # 0x35aa
	.short	13706                           # 0x358a
	.short	13674                           # 0x356a
	.short	13642                           # 0x354a
	.short	13610                           # 0x352a
	.short	13578                           # 0x350a
	.short	13546                           # 0x34ea
	.short	13514                           # 0x34ca
	.short	13482                           # 0x34aa
	.short	13450                           # 0x348a
	.short	13418                           # 0x346a
	.short	13386                           # 0x344a
	.short	13354                           # 0x342a
	.short	13322                           # 0x340a
	.short	13290                           # 0x33ea
	.short	13258                           # 0x33ca
	.short	13226                           # 0x33aa
	.short	13194                           # 0x338a
	.short	13162                           # 0x336a
	.short	13130                           # 0x334a
	.short	13098                           # 0x332a
	.short	13066                           # 0x330a
	.short	13034                           # 0x32ea
	.short	13002                           # 0x32ca
	.short	12970                           # 0x32aa
	.short	12938                           # 0x328a
	.short	12906                           # 0x326a
	.short	12874                           # 0x324a
	.short	12842                           # 0x322a
	.short	12810                           # 0x320a
	.short	12778                           # 0x31ea
	.short	10482                           # 0x28f2
	.short	11112                           # 0x2b68
	.short	11080                           # 0x2b48
	.short	15403                           # 0x3c2b
	.short	15371                           # 0x3c0b
	.short	15339                           # 0x3beb
	.short	15307                           # 0x3bcb
	.short	15275                           # 0x3bab
	.short	15243                           # 0x3b8b
	.short	15211                           # 0x3b6b
	.short	15179                           # 0x3b4b
	.short	15147                           # 0x3b2b
	.short	15115                           # 0x3b0b
	.short	15083                           # 0x3aeb
	.short	15051                           # 0x3acb
	.short	15019                           # 0x3aab
	.short	14987                           # 0x3a8b
	.short	14955                           # 0x3a6b
	.short	14923                           # 0x3a4b
	.short	14891                           # 0x3a2b
	.short	14859                           # 0x3a0b
	.short	14827                           # 0x39eb
	.short	14795                           # 0x39cb
	.short	14763                           # 0x39ab
	.short	14731                           # 0x398b
	.short	14699                           # 0x396b
	.short	14667                           # 0x394b
	.short	14635                           # 0x392b
	.short	14603                           # 0x390b
	.short	14571                           # 0x38eb
	.short	14539                           # 0x38cb
	.short	14507                           # 0x38ab
	.short	14475                           # 0x388b
	.short	14443                           # 0x386b
	.short	14411                           # 0x384b
	.short	14379                           # 0x382b
	.short	14347                           # 0x380b
	.short	14315                           # 0x37eb
	.short	14283                           # 0x37cb
	.short	14251                           # 0x37ab
	.short	14219                           # 0x378b
	.short	14187                           # 0x376b
	.short	14155                           # 0x374b
	.short	14123                           # 0x372b
	.short	14091                           # 0x370b
	.short	14059                           # 0x36eb
	.short	14027                           # 0x36cb
	.short	13995                           # 0x36ab
	.short	13963                           # 0x368b
	.short	13931                           # 0x366b
	.short	13899                           # 0x364b
	.short	13867                           # 0x362b
	.short	13835                           # 0x360b
	.short	13803                           # 0x35eb
	.short	13771                           # 0x35cb
	.short	13739                           # 0x35ab
	.short	13707                           # 0x358b
	.short	13675                           # 0x356b
	.short	13643                           # 0x354b
	.short	13611                           # 0x352b
	.short	13579                           # 0x350b
	.short	13547                           # 0x34eb
	.short	13515                           # 0x34cb
	.short	13483                           # 0x34ab
	.short	13451                           # 0x348b
	.short	13419                           # 0x346b
	.short	13387                           # 0x344b
	.short	13387                           # 0x344b
	.short	13355                           # 0x342b
	.short	13323                           # 0x340b
	.short	13291                           # 0x33eb
	.short	13259                           # 0x33cb
	.short	13227                           # 0x33ab
	.short	13195                           # 0x338b
	.short	13163                           # 0x336b
	.short	13131                           # 0x334b
	.short	13099                           # 0x332b
	.short	13067                           # 0x330b
	.short	13035                           # 0x32eb
	.short	13003                           # 0x32cb
	.short	12971                           # 0x32ab
	.short	12939                           # 0x328b
	.short	12907                           # 0x326b
	.short	12875                           # 0x324b
	.short	12843                           # 0x322b
	.short	12811                           # 0x320b
	.short	12779                           # 0x31eb
	.short	12747                           # 0x31cb
	.short	12715                           # 0x31ab
	.short	12683                           # 0x318b
	.short	12651                           # 0x316b
	.short	12619                           # 0x314b
	.short	12587                           # 0x312b
	.short	12555                           # 0x310b
	.short	12523                           # 0x30eb
	.short	12491                           # 0x30cb
	.short	12459                           # 0x30ab
	.short	12427                           # 0x308b
	.short	12395                           # 0x306b
	.short	12363                           # 0x304b
	.short	12331                           # 0x302b
	.short	12299                           # 0x300b
	.short	12267                           # 0x2feb
	.short	12235                           # 0x2fcb
	.short	12203                           # 0x2fab
	.short	12171                           # 0x2f8b
	.short	12139                           # 0x2f6b
	.short	12107                           # 0x2f4b
	.short	12075                           # 0x2f2b
	.short	12043                           # 0x2f0b
	.short	12011                           # 0x2eeb
	.short	11979                           # 0x2ecb
	.short	11947                           # 0x2eab
	.short	11915                           # 0x2e8b
	.short	11883                           # 0x2e6b
	.short	11851                           # 0x2e4b
	.short	11819                           # 0x2e2b
	.short	11787                           # 0x2e0b
	.short	11755                           # 0x2deb
	.short	11723                           # 0x2dcb
	.short	11691                           # 0x2dab
	.short	11659                           # 0x2d8b
	.short	11627                           # 0x2d6b
	.short	11595                           # 0x2d4b
	.short	11563                           # 0x2d2b
	.short	11531                           # 0x2d0b
	.short	11499                           # 0x2ceb
	.short	11467                           # 0x2ccb
	.short	11435                           # 0x2cab
	.short	11403                           # 0x2c8b
	.short	11371                           # 0x2c6b
	.short	11339                           # 0x2c4b
	.short	11307                           # 0x2c2b
	.short	11275                           # 0x2c0b
	.short	11243                           # 0x2beb
	.short	11211                           # 0x2bcb
	.short	11179                           # 0x2bab
	.short	11147                           # 0x2b8b
	.short	11115                           # 0x2b6b
	.short	11083                           # 0x2b4b
	.short	11051                           # 0x2b2b
	.short	11019                           # 0x2b0b
	.short	10987                           # 0x2aeb
	.short	10955                           # 0x2acb
	.short	10923                           # 0x2aab
	.short	10891                           # 0x2a8b
	.short	10859                           # 0x2a6b
	.short	10827                           # 0x2a4b
	.short	10795                           # 0x2a2b
	.short	10763                           # 0x2a0b
	.short	10731                           # 0x29eb
	.short	10699                           # 0x29cb
	.short	10667                           # 0x29ab
	.short	10635                           # 0x298b
	.short	10603                           # 0x296b
	.short	10571                           # 0x294b
	.short	10539                           # 0x292b
	.short	10507                           # 0x290b
	.short	10475                           # 0x28eb
	.short	10443                           # 0x28cb
	.short	10411                           # 0x28ab
	.short	10379                           # 0x288b
	.short	10347                           # 0x286b
	.short	10315                           # 0x284b
	.short	10283                           # 0x282b
	.short	10251                           # 0x280b
	.short	10219                           # 0x27eb
	.short	10187                           # 0x27cb
	.short	10155                           # 0x27ab
	.short	10123                           # 0x278b
	.short	10091                           # 0x276b
	.short	10059                           # 0x274b
	.short	10027                           # 0x272b
	.short	9995                            # 0x270b
	.short	9963                            # 0x26eb
	.short	9931                            # 0x26cb
	.short	9899                            # 0x26ab
	.short	9867                            # 0x268b
	.short	9835                            # 0x266b
	.short	9803                            # 0x264b
	.short	9771                            # 0x262b
	.short	9739                            # 0x260b
	.short	9707                            # 0x25eb
	.short	9675                            # 0x25cb
	.short	9643                            # 0x25ab
	.short	9611                            # 0x258b
	.short	9579                            # 0x256b
	.short	9547                            # 0x254b
	.short	9515                            # 0x252b
	.short	9483                            # 0x250b
	.short	9451                            # 0x24eb
	.short	9419                            # 0x24cb
	.short	9387                            # 0x24ab
	.short	9355                            # 0x248b
	.short	9323                            # 0x246b
	.short	9291                            # 0x244b
	.short	9259                            # 0x242b
	.short	9227                            # 0x240b
	.short	9195                            # 0x23eb
	.short	9163                            # 0x23cb
	.short	9131                            # 0x23ab
	.short	9099                            # 0x238b
	.short	9067                            # 0x236b
	.short	9035                            # 0x234b
	.short	9003                            # 0x232b
	.short	8971                            # 0x230b
	.short	8939                            # 0x22eb
	.short	8907                            # 0x22cb
	.short	8875                            # 0x22ab
	.short	8843                            # 0x228b
	.short	8811                            # 0x226b
	.short	8779                            # 0x224b
	.short	8747                            # 0x222b
	.short	8715                            # 0x220b
	.short	8683                            # 0x21eb
	.short	8651                            # 0x21cb
	.short	8619                            # 0x21ab
	.short	8587                            # 0x218b
	.short	8555                            # 0x216b
	.short	8523                            # 0x214b
	.short	8491                            # 0x212b
	.short	8459                            # 0x210b
	.short	8427                            # 0x20eb
	.short	8395                            # 0x20cb
	.short	8363                            # 0x20ab
	.short	8331                            # 0x208b
	.short	8299                            # 0x206b
	.short	8267                            # 0x204b
	.short	8235                            # 0x202b
	.short	8203                            # 0x200b
	.short	8171                            # 0x1feb
	.short	8139                            # 0x1fcb
	.short	8107                            # 0x1fab
	.short	8075                            # 0x1f8b
	.short	8043                            # 0x1f6b
	.short	8011                            # 0x1f4b
	.short	7979                            # 0x1f2b
	.short	7947                            # 0x1f0b
	.short	7915                            # 0x1eeb
	.short	7883                            # 0x1ecb
	.short	7851                            # 0x1eab
	.short	7819                            # 0x1e8b
	.short	7787                            # 0x1e6b
	.short	7755                            # 0x1e4b
	.short	7723                            # 0x1e2b
	.short	7691                            # 0x1e0b
	.short	7659                            # 0x1deb
	.short	7627                            # 0x1dcb
	.short	7595                            # 0x1dab
	.short	7563                            # 0x1d8b
	.short	7531                            # 0x1d6b
	.short	7499                            # 0x1d4b
	.short	7467                            # 0x1d2b
	.short	7435                            # 0x1d0b
	.short	7403                            # 0x1ceb
	.short	7371                            # 0x1ccb
	.short	7339                            # 0x1cab
	.short	7307                            # 0x1c8b
	.short	7275                            # 0x1c6b
	.short	7243                            # 0x1c4b
	.short	7211                            # 0x1c2b
	.short	7179                            # 0x1c0b
	.short	7147                            # 0x1beb
	.short	7115                            # 0x1bcb
	.short	7083                            # 0x1bab
	.short	7051                            # 0x1b8b
	.short	7019                            # 0x1b6b
	.short	4202                            # 0x106a
	.short	4170                            # 0x104a
	.short	4138                            # 0x102a
	.short	4106                            # 0x100a
	.short	4074                            # 0xfea
	.short	4042                            # 0xfca
	.short	4010                            # 0xfaa
	.short	3978                            # 0xf8a
	.short	3946                            # 0xf6a
	.short	1640                            # 0x668
	.short	2280                            # 0x8e8
	.short	2248                            # 0x8c8
	.short	2216                            # 0x8a8
	.short	2184                            # 0x888
	.short	2152                            # 0x868
	.short	2120                            # 0x848
	.short	2007                            # 0x7d7
	.short	6475                            # 0x194b
	.short	1974                            # 0x7b6
	.short	3356                            # 0xd1c
	.short	3324                            # 0xcfc
	.short	3250                            # 0xcb2
	.short	3241                            # 0xca9
	.short	3228                            # 0xc9c
	.short	3196                            # 0xc7c
	.short	3164                            # 0xc5c
	.short	3132                            # 0xc3c
	.short	3100                            # 0xc1c
	.short	3068                            # 0xbfc
	.short	3036                            # 0xbdc
	.short	3004                            # 0xbbc
	.short	2972                            # 0xb9c
	.short	2940                            # 0xb7c
	.short	2910                            # 0xb5e
	.short	2860                            # 0xb2c
	.short	2844                            # 0xb1c
	.short	2744                            # 0xab8
	.short	2780                            # 0xadc
	.short	2716                            # 0xa9c
	.short	706                             # 0x2c2
	.short	1320                            # 0x528
	.short	5739                            # 0x166b
	.short	5735                            # 0x1667
	.short	1023                            # 0x3ff
	.short	2556                            # 0x9fc
	.short	2524                            # 0x9dc
	.short	2492                            # 0x9bc
	.short	1625                            # 0x659
	.short	3000                            # 0xbb8
	.short	5543                            # 0x15a7
	.short	4038                            # 0xfc6
	.short	448                             # 0x1c0
	.short	433                             # 0x1b1
	.short	2507                            # 0x9cb
	.short	2092                            # 0x82c
	.short	4741                            # 0x1285

	.p2align	4                               # @Data
Data:
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	20888                           # 0x5198
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	17926                           # 0x4606
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	20994                           # 0x5202
	.short	20994                           # 0x5202
	.short	20994                           # 0x5202
	.short	20994                           # 0x5202
	.short	20994                           # 0x5202
	.short	20994                           # 0x5202
	.short	20994                           # 0x5202
	.short	20994                           # 0x5202
	.short	20994                           # 0x5202
	.short	20994                           # 0x5202
	.short	20994                           # 0x5202
	.short	20994                           # 0x5202
	.short	20994                           # 0x5202
	.short	20994                           # 0x5202
	.short	20994                           # 0x5202
	.short	20994                           # 0x5202
	.short	20994                           # 0x5202
	.short	20994                           # 0x5202
	.short	20994                           # 0x5202
	.short	20994                           # 0x5202
	.short	20994                           # 0x5202
	.short	20994                           # 0x5202
	.short	20994                           # 0x5202
	.short	20994                           # 0x5202
	.short	20994                           # 0x5202
	.short	20994                           # 0x5202
	.short	20994                           # 0x5202
	.short	20994                           # 0x5202
	.short	20994                           # 0x5202
	.short	20994                           # 0x5202
	.short	20994                           # 0x5202
	.short	11906                           # 0x2e82
	.short	16000                           # 0x3e80
	.short	20888                           # 0x5198
	.short	10772                           # 0x2a14
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	18054                           # 0x4686
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	17796                           # 0x4584
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	664                             # 0x298
	.short	16000                           # 0x3e80
	.short	664                             # 0x298
	.short	26133                           # 0x6615
	.short	26262                           # 0x6696
	.short	664                             # 0x298
	.short	6807                            # 0x1a97
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	17796                           # 0x4584
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	17796                           # 0x4584
	.short	17796                           # 0x4584
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	17796                           # 0x4584
	.short	17796                           # 0x4584
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	11906                           # 0x2e82
	.short	29314                           # 0x7282
	.short	11906                           # 0x2e82
	.short	16000                           # 0x3e80
	.short	11906                           # 0x2e82
	.short	18690                           # 0x4902
	.short	29825                           # 0x7481
	.short	29825                           # 0x7481
	.short	29825                           # 0x7481
	.short	29825                           # 0x7481
	.short	29571                           # 0x7383
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	28034                           # 0x6d82
	.short	28034                           # 0x6d82
	.short	18690                           # 0x4902
	.short	18690                           # 0x4902
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	11906                           # 0x2e82
	.short	18690                           # 0x4902
	.short	28161                           # 0x6e01
	.short	28161                           # 0x6e01
	.short	29953                           # 0x7501
	.short	29953                           # 0x7501
	.short	16000                           # 0x3e80
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	6914                            # 0x1b02
	.short	7042                            # 0x1b82
	.short	7170                            # 0x1c02
	.short	7298                            # 0x1c82
	.short	7426                            # 0x1d02
	.short	7554                            # 0x1d82
	.short	7682                            # 0x1e02
	.short	7810                            # 0x1e82
	.short	7938                            # 0x1f02
	.short	8066                            # 0x1f82
	.short	8194                            # 0x2002
	.short	8322                            # 0x2082
	.short	8450                            # 0x2102
	.short	8578                            # 0x2182
	.short	8706                            # 0x2202
	.short	8834                            # 0x2282
	.short	8962                            # 0x2302
	.short	9090                            # 0x2382
	.short	9218                            # 0x2402
	.short	9346                            # 0x2482
	.short	9474                            # 0x2502
	.short	9602                            # 0x2582
	.short	9730                            # 0x2602
	.short	9858                            # 0x2682
	.short	9986                            # 0x2702
	.short	10114                           # 0x2782
	.short	1109                            # 0x455
	.short	3225                            # 0xc99
	.short	1238                            # 0x4d6
	.short	3225                            # 0xc99
	.short	15                              # 0xf
	.short	15                              # 0xf
	.short	15                              # 0xf
	.short	15                              # 0xf
	.short	15                              # 0xf
	.short	271                             # 0x10f
	.short	15                              # 0xf
	.short	15                              # 0xf
	.short	15                              # 0xf
	.short	15                              # 0xf
	.short	15                              # 0xf
	.short	15                              # 0xf
	.short	15                              # 0xf
	.short	15                              # 0xf
	.short	15                              # 0xf
	.short	15                              # 0xf
	.short	15                              # 0xf
	.short	15                              # 0xf
	.short	15                              # 0xf
	.short	15                              # 0xf
	.short	15                              # 0xf
	.short	15                              # 0xf
	.short	15                              # 0xf
	.short	15                              # 0xf
	.short	15                              # 0xf
	.short	15                              # 0xf
	.short	15                              # 0xf
	.short	15                              # 0xf
	.short	15                              # 0xf
	.short	15                              # 0xf
	.short	15                              # 0xf
	.short	15                              # 0xf
	.short	143                             # 0x8f
	.short	271                             # 0x10f
	.short	143                             # 0x8f
	.short	399                             # 0x18f
	.short	271                             # 0x10f
	.short	15                              # 0xf
	.short	15                              # 0xf
	.short	15                              # 0xf
	.short	15                              # 0xf
	.short	15                              # 0xf
	.short	15                              # 0xf
	.short	15                              # 0xf
	.short	15                              # 0xf
	.short	15                              # 0xf
	.short	15                              # 0xf
	.short	15                              # 0xf
	.short	15                              # 0xf
	.short	15                              # 0xf
	.short	15                              # 0xf
	.short	271                             # 0x10f
	.short	271                             # 0x10f
	.short	271                             # 0x10f
	.short	143                             # 0x8f
	.short	524                             # 0x20c
	.short	664                             # 0x298
	.short	664                             # 0x298
	.short	792                             # 0x318
	.short	922                             # 0x39a
	.short	792                             # 0x318
	.short	664                             # 0x298
	.short	664                             # 0x298
	.short	1109                            # 0x455
	.short	1238                            # 0x4d6
	.short	664                             # 0x298
	.short	1305                            # 0x519
	.short	1432                            # 0x598
	.short	1556                            # 0x614
	.short	1432                            # 0x598
	.short	1688                            # 0x698
	.short	1801                            # 0x709
	.short	1929                            # 0x789
	.short	2057                            # 0x809
	.short	2185                            # 0x889
	.short	2313                            # 0x909
	.short	2441                            # 0x989
	.short	2569                            # 0xa09
	.short	2697                            # 0xa89
	.short	2825                            # 0xb09
	.short	2953                            # 0xb89
	.short	1432                            # 0x598
	.short	664                             # 0x298
	.short	3161                            # 0xc59
	.short	3225                            # 0xc99
	.short	3161                            # 0xc59
	.short	664                             # 0x298
	.short	3329                            # 0xd01
	.short	3457                            # 0xd81
	.short	3585                            # 0xe01
	.short	3713                            # 0xe81
	.short	3841                            # 0xf01
	.short	3969                            # 0xf81
	.short	4097                            # 0x1001
	.short	4225                            # 0x1081
	.short	4353                            # 0x1101
	.short	4481                            # 0x1181
	.short	4609                            # 0x1201
	.short	4737                            # 0x1281
	.short	4865                            # 0x1301
	.short	4993                            # 0x1381
	.short	5121                            # 0x1401
	.short	5249                            # 0x1481
	.short	5377                            # 0x1501
	.short	5505                            # 0x1581
	.short	5633                            # 0x1601
	.short	5761                            # 0x1681
	.short	5889                            # 0x1701
	.short	6017                            # 0x1781
	.short	6145                            # 0x1801
	.short	6273                            # 0x1881
	.short	6401                            # 0x1901
	.short	6529                            # 0x1981
	.short	1109                            # 0x455
	.short	664                             # 0x298
	.short	1238                            # 0x4d6
	.short	6683                            # 0x1a1b
	.short	6807                            # 0x1a97
	.short	664                             # 0x298
	.short	664                             # 0x298
	.short	664                             # 0x298
	.short	3225                            # 0xc99
	.short	1109                            # 0x455
	.short	1238                            # 0x4d6
	.short	16000                           # 0x3e80
	.short	664                             # 0x298
	.short	664                             # 0x298
	.short	664                             # 0x298
	.short	664                             # 0x298
	.short	664                             # 0x298
	.short	664                             # 0x298
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	10284                           # 0x282c
	.short	664                             # 0x298
	.short	922                             # 0x39a
	.short	922                             # 0x39a
	.short	922                             # 0x39a
	.short	922                             # 0x39a
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	6683                            # 0x1a1b
	.short	10396                           # 0x289c
	.short	10498                           # 0x2902
	.short	10717                           # 0x29dd
	.short	3225                            # 0xc99
	.short	10772                           # 0x2a14
	.short	10396                           # 0x289c
	.short	6683                            # 0x1a1b
	.short	10908                           # 0x2a9c
	.short	1305                            # 0x519
	.short	11019                           # 0x2b0b
	.short	11147                           # 0x2b8b
	.short	6683                            # 0x1a1b
	.short	11266                           # 0x2c02
	.short	10396                           # 0x289c
	.short	664                             # 0x298
	.short	6683                            # 0x1a1b
	.short	11403                           # 0x2c8b
	.short	10498                           # 0x2902
	.short	11614                           # 0x2d5e
	.short	11659                           # 0x2d8b
	.short	11659                           # 0x2d8b
	.short	11659                           # 0x2d8b
	.short	664                             # 0x298
	.short	664                             # 0x298
	.short	1305                            # 0x519
	.short	1556                            # 0x614
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	16000                           # 0x3e80
	.short	664                             # 0x298
	.short	922                             # 0x39a
	.short	792                             # 0x318
	.short	664                             # 0x298
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	16000                           # 0x3e80
	.short	21509                           # 0x5405
	.short	16000                           # 0x3e80
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	16000                           # 0x3e80
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20353                           # 0x4f81
	.short	20353                           # 0x4f81
	.short	20353                           # 0x4f81
	.short	20353                           # 0x4f81
	.short	20353                           # 0x4f81
	.short	20353                           # 0x4f81
	.short	20353                           # 0x4f81
	.short	20353                           # 0x4f81
	.short	20353                           # 0x4f81
	.short	20353                           # 0x4f81
	.short	20353                           # 0x4f81
	.short	20353                           # 0x4f81
	.short	20353                           # 0x4f81
	.short	20353                           # 0x4f81
	.short	20353                           # 0x4f81
	.short	20353                           # 0x4f81
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	3225                            # 0xc99
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11906                           # 0x2e82
	.short	11906                           # 0x2e82
	.short	11906                           # 0x2e82
	.short	18690                           # 0x4902
	.short	18690                           # 0x4902
	.short	11906                           # 0x2e82
	.short	11906                           # 0x2e82
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	11906                           # 0x2e82
	.short	11906                           # 0x2e82
	.short	11906                           # 0x2e82
	.short	11906                           # 0x2e82
	.short	11906                           # 0x2e82
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	21253                           # 0x5305
	.short	17926                           # 0x4606
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	16000                           # 0x3e80
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	16000                           # 0x3e80
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21400                           # 0x5398
	.short	21509                           # 0x5405
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	20615                           # 0x5087
	.short	20615                           # 0x5087
	.short	17926                           # 0x4606
	.short	20615                           # 0x5087
	.short	20615                           # 0x5087
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	11659                           # 0x2d8b
	.short	11659                           # 0x2d8b
	.short	11659                           # 0x2d8b
	.short	11659                           # 0x2d8b
	.short	11659                           # 0x2d8b
	.short	11659                           # 0x2d8b
	.short	11659                           # 0x2d8b
	.short	11659                           # 0x2d8b
	.short	11659                           # 0x2d8b
	.short	11659                           # 0x2d8b
	.short	11659                           # 0x2d8b
	.short	11659                           # 0x2d8b
	.short	33803                           # 0x840b
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	11906                           # 0x2e82
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	23561                           # 0x5c09
	.short	23689                           # 0x5c89
	.short	23817                           # 0x5d09
	.short	23945                           # 0x5d89
	.short	24073                           # 0x5e09
	.short	24201                           # 0x5e89
	.short	24329                           # 0x5f09
	.short	24457                           # 0x5f89
	.short	24585                           # 0x6009
	.short	24713                           # 0x6089
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	18177                           # 0x4701
	.short	664                             # 0x298
	.short	18305                           # 0x4781
	.short	18305                           # 0x4781
	.short	18305                           # 0x4781
	.short	16000                           # 0x3e80
	.short	18433                           # 0x4801
	.short	16000                           # 0x3e80
	.short	18561                           # 0x4881
	.short	18561                           # 0x4881
	.short	18690                           # 0x4902
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	3225                            # 0xc99
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12162                           # 0x2f82
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	19074                           # 0x4a82
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	19202                           # 0x4b02
	.short	19330                           # 0x4b82
	.short	19330                           # 0x4b82
	.short	16000                           # 0x3e80
	.short	19458                           # 0x4c02
	.short	19586                           # 0x4c82
	.short	19713                           # 0x4d01
	.short	19713                           # 0x4d01
	.short	19713                           # 0x4d01
	.short	19842                           # 0x4d82
	.short	19970                           # 0x4e02
	.short	10498                           # 0x2902
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	11906                           # 0x2e82
	.short	15233                           # 0x3b81
	.short	15363                           # 0x3c03
	.short	15490                           # 0x3c82
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	15745                           # 0x3d81
	.short	15873                           # 0x3e01
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12545                           # 0x3101
	.short	12674                           # 0x3182
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	10498                           # 0x2902
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	20098                           # 0x4e82
	.short	20226                           # 0x4f02
	.short	15618                           # 0x3d02
	.short	10498                           # 0x2902
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	23312                           # 0x5b10
	.short	23312                           # 0x5b10
	.short	23312                           # 0x5b10
	.short	23312                           # 0x5b10
	.short	23312                           # 0x5b10
	.short	23312                           # 0x5b10
	.short	32523                           # 0x7f0b
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	32651                           # 0x7f8b
	.short	32779                           # 0x800b
	.short	32907                           # 0x808b
	.short	33035                           # 0x810b
	.short	33163                           # 0x818b
	.short	33291                           # 0x820b
	.short	1305                            # 0x519
	.short	1305                            # 0x519
	.short	3225                            # 0xc99
	.short	1109                            # 0x455
	.short	1238                            # 0x4d6
	.short	10498                           # 0x2902
	.short	13057                           # 0x3301
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	13185                           # 0x3381
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	13313                           # 0x3401
	.short	13313                           # 0x3401
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	10498                           # 0x2902
	.short	13441                           # 0x3481
	.short	13569                           # 0x3501
	.short	13697                           # 0x3581
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	13313                           # 0x3401
	.short	13825                           # 0x3601
	.short	13954                           # 0x3682
	.short	14081                           # 0x3701
	.short	14209                           # 0x3781
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	14081                           # 0x3701
	.short	14337                           # 0x3801
	.short	10498                           # 0x2902
	.short	14465                           # 0x3881
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	15233                           # 0x3b81
	.short	15363                           # 0x3c03
	.short	15490                           # 0x3c82
	.short	15233                           # 0x3b81
	.short	15363                           # 0x3c03
	.short	15490                           # 0x3c82
	.short	15233                           # 0x3b81
	.short	15363                           # 0x3c03
	.short	15490                           # 0x3c82
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	15618                           # 0x3d02
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	20508                           # 0x501c
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	16000                           # 0x3e80
	.short	20615                           # 0x5087
	.short	20615                           # 0x5087
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12801                           # 0x3201
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12930                           # 0x3282
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	14593                           # 0x3901
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	14593                           # 0x3901
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	14593                           # 0x3901
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	14721                           # 0x3981
	.short	14721                           # 0x3981
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	14849                           # 0x3a01
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	10498                           # 0x2902
	.short	14981                           # 0x3a85
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	10498                           # 0x2902
	.short	15106                           # 0x3b02
	.short	19713                           # 0x4d01
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	1432                            # 0x598
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	21400                           # 0x5398
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	21400                           # 0x5398
	.short	21400                           # 0x5398
	.short	21400                           # 0x5398
	.short	21400                           # 0x5398
	.short	21400                           # 0x5398
	.short	21400                           # 0x5398
	.short	21400                           # 0x5398
	.short	21400                           # 0x5398
	.short	21400                           # 0x5398
	.short	21400                           # 0x5398
	.short	21400                           # 0x5398
	.short	21400                           # 0x5398
	.short	21400                           # 0x5398
	.short	21400                           # 0x5398
	.short	16000                           # 0x3e80
	.short	23312                           # 0x5b10
	.short	21509                           # 0x5405
	.short	17926                           # 0x4606
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	23312                           # 0x5b10
	.short	19713                           # 0x4d01
	.short	19713                           # 0x4d01
	.short	19713                           # 0x4d01
	.short	19713                           # 0x4d01
	.short	19713                           # 0x4d01
	.short	19713                           # 0x4d01
	.short	19713                           # 0x4d01
	.short	19713                           # 0x4d01
	.short	19713                           # 0x4d01
	.short	19713                           # 0x4d01
	.short	19713                           # 0x4d01
	.short	19713                           # 0x4d01
	.short	19713                           # 0x4d01
	.short	19713                           # 0x4d01
	.short	19713                           # 0x4d01
	.short	19713                           # 0x4d01
	.short	19713                           # 0x4d01
	.short	19713                           # 0x4d01
	.short	19713                           # 0x4d01
	.short	19713                           # 0x4d01
	.short	19713                           # 0x4d01
	.short	19713                           # 0x4d01
	.short	19713                           # 0x4d01
	.short	19713                           # 0x4d01
	.short	19713                           # 0x4d01
	.short	19713                           # 0x4d01
	.short	19713                           # 0x4d01
	.short	19713                           # 0x4d01
	.short	19713                           # 0x4d01
	.short	19713                           # 0x4d01
	.short	19713                           # 0x4d01
	.short	19713                           # 0x4d01
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	23561                           # 0x5c09
	.short	23689                           # 0x5c89
	.short	23817                           # 0x5d09
	.short	23945                           # 0x5d89
	.short	24073                           # 0x5e09
	.short	24201                           # 0x5e89
	.short	24329                           # 0x5f09
	.short	24457                           # 0x5f89
	.short	24585                           # 0x6009
	.short	24713                           # 0x6089
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	16130                           # 0x3f02
	.short	16258                           # 0x3f82
	.short	10498                           # 0x2902
	.short	16386                           # 0x4002
	.short	16386                           # 0x4002
	.short	10498                           # 0x2902
	.short	16514                           # 0x4082
	.short	10498                           # 0x2902
	.short	16642                           # 0x4102
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	16386                           # 0x4002
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	16770                           # 0x4182
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	16898                           # 0x4202
	.short	17026                           # 0x4282
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	17026                           # 0x4282
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	17154                           # 0x4302
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	17282                           # 0x4382
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	17410                           # 0x4402
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	17410                           # 0x4402
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	17410                           # 0x4402
	.short	10498                           # 0x2902
	.short	17538                           # 0x4482
	.short	17538                           # 0x4482
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	17666                           # 0x4502
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	17796                           # 0x4584
	.short	17796                           # 0x4584
	.short	17796                           # 0x4584
	.short	17796                           # 0x4584
	.short	17796                           # 0x4584
	.short	17796                           # 0x4584
	.short	17796                           # 0x4584
	.short	17796                           # 0x4584
	.short	17796                           # 0x4584
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	17796                           # 0x4584
	.short	17796                           # 0x4584
	.short	17796                           # 0x4584
	.short	17796                           # 0x4584
	.short	17796                           # 0x4584
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	17796                           # 0x4584
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	20737                           # 0x5101
	.short	20737                           # 0x5101
	.short	20737                           # 0x5101
	.short	20737                           # 0x5101
	.short	20737                           # 0x5101
	.short	20737                           # 0x5101
	.short	20737                           # 0x5101
	.short	20737                           # 0x5101
	.short	20737                           # 0x5101
	.short	20737                           # 0x5101
	.short	20737                           # 0x5101
	.short	20737                           # 0x5101
	.short	20737                           # 0x5101
	.short	20737                           # 0x5101
	.short	20737                           # 0x5101
	.short	20737                           # 0x5101
	.short	20737                           # 0x5101
	.short	20737                           # 0x5101
	.short	20737                           # 0x5101
	.short	20737                           # 0x5101
	.short	20737                           # 0x5101
	.short	20737                           # 0x5101
	.short	20737                           # 0x5101
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	17796                           # 0x4584
	.short	20888                           # 0x5198
	.short	20888                           # 0x5198
	.short	20888                           # 0x5198
	.short	20888                           # 0x5198
	.short	20888                           # 0x5198
	.short	20888                           # 0x5198
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	16000                           # 0x3e80
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	11777                           # 0x2e01
	.short	18818                           # 0x4982
	.short	18946                           # 0x4a02
	.short	18946                           # 0x4a02
	.short	18946                           # 0x4a02
	.short	18690                           # 0x4902
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	12034                           # 0x2f02
	.short	20226                           # 0x4f02
	.short	20226                           # 0x4f02
	.short	20226                           # 0x4f02
	.short	20226                           # 0x4f02
	.short	20226                           # 0x4f02
	.short	20226                           # 0x4f02
	.short	20226                           # 0x4f02
	.short	20226                           # 0x4f02
	.short	20226                           # 0x4f02
	.short	20226                           # 0x4f02
	.short	20226                           # 0x4f02
	.short	20226                           # 0x4f02
	.short	20226                           # 0x4f02
	.short	20226                           # 0x4f02
	.short	20226                           # 0x4f02
	.short	20226                           # 0x4f02
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	20888                           # 0x5198
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	16000                           # 0x3e80
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	16000                           # 0x3e80
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	21144                           # 0x5298
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	21144                           # 0x5298
	.short	17926                           # 0x4606
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21144                           # 0x5298
	.short	21144                           # 0x5298
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	23689                           # 0x5c89
	.short	23817                           # 0x5d09
	.short	23945                           # 0x5d89
	.short	24073                           # 0x5e09
	.short	24201                           # 0x5e89
	.short	24329                           # 0x5f09
	.short	24457                           # 0x5f89
	.short	24585                           # 0x6009
	.short	24713                           # 0x6089
	.short	25611                           # 0x640b
	.short	25739                           # 0x648b
	.short	25867                           # 0x650b
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	17926                           # 0x4606
	.short	23432                           # 0x5b88
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	16000                           # 0x3e80
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	16000                           # 0x3e80
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	17926                           # 0x4606
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	23561                           # 0x5c09
	.short	23689                           # 0x5c89
	.short	23817                           # 0x5d09
	.short	23945                           # 0x5d89
	.short	24073                           # 0x5e09
	.short	24201                           # 0x5e89
	.short	24329                           # 0x5f09
	.short	24457                           # 0x5f89
	.short	24585                           # 0x6009
	.short	24713                           # 0x6089
	.short	20508                           # 0x501c
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	21769                           # 0x5509
	.short	21897                           # 0x5589
	.short	22025                           # 0x5609
	.short	22153                           # 0x5689
	.short	22281                           # 0x5709
	.short	22409                           # 0x5789
	.short	22537                           # 0x5809
	.short	22665                           # 0x5889
	.short	22793                           # 0x5909
	.short	22921                           # 0x5989
	.short	792                             # 0x318
	.short	23064                           # 0x5a18
	.short	23064                           # 0x5a18
	.short	21400                           # 0x5398
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	17926                           # 0x4606
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	26133                           # 0x6615
	.short	26262                           # 0x6696
	.short	21636                           # 0x5484
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	20888                           # 0x5198
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	23432                           # 0x5b88
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	20888                           # 0x5198
	.short	20888                           # 0x5198
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	21636                           # 0x5484
	.short	21636                           # 0x5484
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	10396                           # 0x289c
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	1801                            # 0x709
	.short	1929                            # 0x789
	.short	2057                            # 0x809
	.short	2185                            # 0x889
	.short	2313                            # 0x909
	.short	2441                            # 0x989
	.short	2569                            # 0xa09
	.short	2697                            # 0xa89
	.short	2825                            # 0xb09
	.short	2953                            # 0xb89
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	21509                           # 0x5405
	.short	23196                           # 0x5a9c
	.short	23196                           # 0x5a9c
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	17926                           # 0x4606
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	16000                           # 0x3e80
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	23432                           # 0x5b88
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	17926                           # 0x4606
	.short	14981                           # 0x3a85
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	16000                           # 0x3e80
	.short	17926                           # 0x4606
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	16000                           # 0x3e80
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	20888                           # 0x5198
	.short	20888                           # 0x5198
	.short	20888                           # 0x5198
	.short	20888                           # 0x5198
	.short	20888                           # 0x5198
	.short	20888                           # 0x5198
	.short	20888                           # 0x5198
	.short	20888                           # 0x5198
	.short	23689                           # 0x5c89
	.short	23817                           # 0x5d09
	.short	23945                           # 0x5d89
	.short	24073                           # 0x5e09
	.short	24201                           # 0x5e89
	.short	24329                           # 0x5f09
	.short	24457                           # 0x5f89
	.short	24585                           # 0x6009
	.short	24713                           # 0x6089
	.short	25611                           # 0x640b
	.short	26379                           # 0x670b
	.short	26507                           # 0x678b
	.short	26635                           # 0x680b
	.short	26763                           # 0x688b
	.short	26891                           # 0x690b
	.short	27019                           # 0x698b
	.short	27147                           # 0x6a0b
	.short	27275                           # 0x6a8b
	.short	25739                           # 0x648b
	.short	27403                           # 0x6b0b
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	17926                           # 0x4606
	.short	14981                           # 0x3a85
	.short	23432                           # 0x5b88
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	17926                           # 0x4606
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	17926                           # 0x4606
	.short	16000                           # 0x3e80
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	17926                           # 0x4606
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	922                             # 0x39a
	.short	922                             # 0x39a
	.short	922                             # 0x39a
	.short	922                             # 0x39a
	.short	922                             # 0x39a
	.short	922                             # 0x39a
	.short	922                             # 0x39a
	.short	922                             # 0x39a
	.short	922                             # 0x39a
	.short	922                             # 0x39a
	.short	922                             # 0x39a
	.short	922                             # 0x39a
	.short	922                             # 0x39a
	.short	922                             # 0x39a
	.short	922                             # 0x39a
	.short	922                             # 0x39a
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	20888                           # 0x5198
	.short	20888                           # 0x5198
	.short	23561                           # 0x5c09
	.short	23689                           # 0x5c89
	.short	23817                           # 0x5d09
	.short	23945                           # 0x5d89
	.short	24073                           # 0x5e09
	.short	24201                           # 0x5e89
	.short	24329                           # 0x5f09
	.short	24457                           # 0x5f89
	.short	24585                           # 0x6009
	.short	24713                           # 0x6089
	.short	20888                           # 0x5198
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	664                             # 0x298
	.short	664                             # 0x298
	.short	792                             # 0x318
	.short	922                             # 0x39a
	.short	792                             # 0x318
	.short	664                             # 0x298
	.short	664                             # 0x298
	.short	26133                           # 0x6615
	.short	26262                           # 0x6696
	.short	664                             # 0x298
	.short	1305                            # 0x519
	.short	1432                            # 0x598
	.short	1556                            # 0x614
	.short	1432                            # 0x598
	.short	1688                            # 0x698
	.short	1801                            # 0x709
	.short	1929                            # 0x789
	.short	2057                            # 0x809
	.short	2185                            # 0x889
	.short	2313                            # 0x909
	.short	2441                            # 0x989
	.short	2569                            # 0xa09
	.short	2697                            # 0xa89
	.short	2825                            # 0xb09
	.short	2953                            # 0xb89
	.short	1432                            # 0x598
	.short	664                             # 0x298
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	664                             # 0x298
	.short	664                             # 0x298
	.short	664                             # 0x298
	.short	664                             # 0x298
	.short	664                             # 0x298
	.short	664                             # 0x298
	.short	10772                           # 0x2a14
	.short	664                             # 0x298
	.short	664                             # 0x298
	.short	664                             # 0x298
	.short	664                             # 0x298
	.short	23312                           # 0x5b10
	.short	23312                           # 0x5b10
	.short	23312                           # 0x5b10
	.short	23312                           # 0x5b10
	.short	16000                           # 0x3e80
	.short	23561                           # 0x5c09
	.short	23689                           # 0x5c89
	.short	23817                           # 0x5d09
	.short	23945                           # 0x5d89
	.short	24073                           # 0x5e09
	.short	24201                           # 0x5e89
	.short	24329                           # 0x5f09
	.short	24457                           # 0x5f89
	.short	24585                           # 0x6009
	.short	24713                           # 0x6089
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	23432                           # 0x5b88
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	17926                           # 0x4606
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	23432                           # 0x5b88
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	17926                           # 0x4606
	.short	16000                           # 0x3e80
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	23561                           # 0x5c09
	.short	23689                           # 0x5c89
	.short	23817                           # 0x5d09
	.short	23945                           # 0x5d89
	.short	24073                           # 0x5e09
	.short	24201                           # 0x5e89
	.short	24329                           # 0x5f09
	.short	24457                           # 0x5f89
	.short	24585                           # 0x6009
	.short	24713                           # 0x6089
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	922                             # 0x39a
	.short	922                             # 0x39a
	.short	24843                           # 0x610b
	.short	24971                           # 0x618b
	.short	25099                           # 0x620b
	.short	25227                           # 0x628b
	.short	25355                           # 0x630b
	.short	25483                           # 0x638b
	.short	20508                           # 0x501c
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	17926                           # 0x4606
	.short	14981                           # 0x3a85
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	16000                           # 0x3e80
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	23432                           # 0x5b88
	.short	16000                           # 0x3e80
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	17926                           # 0x4606
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	23561                           # 0x5c09
	.short	23689                           # 0x5c89
	.short	23817                           # 0x5d09
	.short	23945                           # 0x5d89
	.short	24073                           # 0x5e09
	.short	24201                           # 0x5e89
	.short	24329                           # 0x5f09
	.short	24457                           # 0x5f89
	.short	24585                           # 0x6009
	.short	24713                           # 0x6089
	.short	25355                           # 0x630b
	.short	25355                           # 0x630b
	.short	25355                           # 0x630b
	.short	25355                           # 0x630b
	.short	25355                           # 0x630b
	.short	25355                           # 0x630b
	.short	25355                           # 0x630b
	.short	25355                           # 0x630b
	.short	25355                           # 0x630b
	.short	25355                           # 0x630b
	.short	20508                           # 0x501c
	.short	17926                           # 0x4606
	.short	20508                           # 0x501c
	.short	17926                           # 0x4606
	.short	20508                           # 0x501c
	.short	17926                           # 0x4606
	.short	26133                           # 0x6615
	.short	26262                           # 0x6696
	.short	26133                           # 0x6615
	.short	26262                           # 0x6696
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	17926                           # 0x4606
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	17926                           # 0x4606
	.short	23432                           # 0x5b88
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	23432                           # 0x5b88
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	23432                           # 0x5b88
	.short	17926                           # 0x4606
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	23432                           # 0x5b88
	.short	17926                           # 0x4606
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	16000                           # 0x3e80
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	17926                           # 0x4606
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	23432                           # 0x5b88
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	17796                           # 0x4584
	.short	16000                           # 0x3e80
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	23561                           # 0x5c09
	.short	23689                           # 0x5c89
	.short	23817                           # 0x5d09
	.short	23945                           # 0x5d89
	.short	24073                           # 0x5e09
	.short	24201                           # 0x5e89
	.short	24329                           # 0x5f09
	.short	24457                           # 0x5f89
	.short	24585                           # 0x6009
	.short	24713                           # 0x6089
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	23561                           # 0x5c09
	.short	23689                           # 0x5c89
	.short	23817                           # 0x5d09
	.short	23945                           # 0x5d89
	.short	24073                           # 0x5e09
	.short	24201                           # 0x5e89
	.short	24329                           # 0x5f09
	.short	24457                           # 0x5f89
	.short	24585                           # 0x6009
	.short	24713                           # 0x6089
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	20615                           # 0x5087
	.short	20615                           # 0x5087
	.short	20615                           # 0x5087
	.short	23432                           # 0x5b88
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	16000                           # 0x3e80
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	17926                           # 0x4606
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	23432                           # 0x5b88
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	17926                           # 0x4606
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	16000                           # 0x3e80
	.short	17926                           # 0x4606
	.short	16000                           # 0x3e80
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	17926                           # 0x4606
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	20888                           # 0x5198
	.short	20888                           # 0x5198
	.short	20888                           # 0x5198
	.short	20888                           # 0x5198
	.short	20888                           # 0x5198
	.short	20888                           # 0x5198
	.short	20888                           # 0x5198
	.short	922                             # 0x39a
	.short	20888                           # 0x5198
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	17796                           # 0x4584
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	20888                           # 0x5198
	.short	23561                           # 0x5c09
	.short	23689                           # 0x5c89
	.short	23817                           # 0x5d09
	.short	23945                           # 0x5d89
	.short	24073                           # 0x5e09
	.short	24201                           # 0x5e89
	.short	24329                           # 0x5f09
	.short	24457                           # 0x5f89
	.short	24585                           # 0x6009
	.short	24713                           # 0x6089
	.short	20888                           # 0x5198
	.short	20888                           # 0x5198
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20888                           # 0x5198
	.short	20888                           # 0x5198
	.short	20888                           # 0x5198
	.short	20888                           # 0x5198
	.short	20888                           # 0x5198
	.short	20888                           # 0x5198
	.short	20888                           # 0x5198
	.short	20888                           # 0x5198
	.short	26040                           # 0x65b8
	.short	20888                           # 0x5198
	.short	20888                           # 0x5198
	.short	20888                           # 0x5198
	.short	20888                           # 0x5198
	.short	20888                           # 0x5198
	.short	20888                           # 0x5198
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	17926                           # 0x4606
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	20508                           # 0x501c
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	6807                            # 0x1a97
	.short	17796                           # 0x4584
	.short	17796                           # 0x4584
	.short	17796                           # 0x4584
	.short	16000                           # 0x3e80
	.short	23561                           # 0x5c09
	.short	23689                           # 0x5c89
	.short	23817                           # 0x5d09
	.short	23945                           # 0x5d89
	.short	24073                           # 0x5e09
	.short	24201                           # 0x5e89
	.short	24329                           # 0x5f09
	.short	24457                           # 0x5f89
	.short	24585                           # 0x6009
	.short	24713                           # 0x6089
	.short	20888                           # 0x5198
	.short	20888                           # 0x5198
	.short	20888                           # 0x5198
	.short	20888                           # 0x5198
	.short	20888                           # 0x5198
	.short	20888                           # 0x5198
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	23432                           # 0x5b88
	.short	23432                           # 0x5b88
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	524                             # 0x20c
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	26133                           # 0x6615
	.short	26262                           # 0x6696
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	20888                           # 0x5198
	.short	20888                           # 0x5198
	.short	20888                           # 0x5198
	.short	27531                           # 0x6b8b
	.short	27659                           # 0x6c0b
	.short	27787                           # 0x6c8b
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	17926                           # 0x4606
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	12289                           # 0x3001
	.short	12418                           # 0x3082
	.short	11906                           # 0x2e82
	.short	11906                           # 0x2e82
	.short	11906                           # 0x2e82
	.short	11906                           # 0x2e82
	.short	11906                           # 0x2e82
	.short	27906                           # 0x6d02
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	28034                           # 0x6d82
	.short	28034                           # 0x6d82
	.short	28034                           # 0x6d82
	.short	28034                           # 0x6d82
	.short	28034                           # 0x6d82
	.short	28034                           # 0x6d82
	.short	28034                           # 0x6d82
	.short	28034                           # 0x6d82
	.short	28161                           # 0x6e01
	.short	28161                           # 0x6e01
	.short	28161                           # 0x6e01
	.short	28161                           # 0x6e01
	.short	28161                           # 0x6e01
	.short	28161                           # 0x6e01
	.short	28161                           # 0x6e01
	.short	28161                           # 0x6e01
	.short	28034                           # 0x6d82
	.short	28034                           # 0x6d82
	.short	28034                           # 0x6d82
	.short	28034                           # 0x6d82
	.short	28034                           # 0x6d82
	.short	28034                           # 0x6d82
	.short	28034                           # 0x6d82
	.short	28034                           # 0x6d82
	.short	28161                           # 0x6e01
	.short	28161                           # 0x6e01
	.short	28161                           # 0x6e01
	.short	28161                           # 0x6e01
	.short	28161                           # 0x6e01
	.short	28161                           # 0x6e01
	.short	28161                           # 0x6e01
	.short	28161                           # 0x6e01
	.short	28034                           # 0x6d82
	.short	28034                           # 0x6d82
	.short	28034                           # 0x6d82
	.short	28034                           # 0x6d82
	.short	28034                           # 0x6d82
	.short	28034                           # 0x6d82
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	28161                           # 0x6e01
	.short	28161                           # 0x6e01
	.short	28161                           # 0x6e01
	.short	28161                           # 0x6e01
	.short	28161                           # 0x6e01
	.short	28161                           # 0x6e01
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	11906                           # 0x2e82
	.short	28034                           # 0x6d82
	.short	18690                           # 0x4902
	.short	28034                           # 0x6d82
	.short	18690                           # 0x4902
	.short	28034                           # 0x6d82
	.short	18690                           # 0x4902
	.short	28034                           # 0x6d82
	.short	16000                           # 0x3e80
	.short	28161                           # 0x6e01
	.short	16000                           # 0x3e80
	.short	28161                           # 0x6e01
	.short	16000                           # 0x3e80
	.short	28161                           # 0x6e01
	.short	16000                           # 0x3e80
	.short	28161                           # 0x6e01
	.short	28034                           # 0x6d82
	.short	28034                           # 0x6d82
	.short	28034                           # 0x6d82
	.short	28034                           # 0x6d82
	.short	28034                           # 0x6d82
	.short	28034                           # 0x6d82
	.short	28034                           # 0x6d82
	.short	28034                           # 0x6d82
	.short	28161                           # 0x6e01
	.short	28161                           # 0x6e01
	.short	28161                           # 0x6e01
	.short	28161                           # 0x6e01
	.short	28161                           # 0x6e01
	.short	28161                           # 0x6e01
	.short	28161                           # 0x6e01
	.short	28161                           # 0x6e01
	.short	28290                           # 0x6e82
	.short	28290                           # 0x6e82
	.short	28418                           # 0x6f02
	.short	28418                           # 0x6f02
	.short	28418                           # 0x6f02
	.short	28418                           # 0x6f02
	.short	28546                           # 0x6f82
	.short	28546                           # 0x6f82
	.short	28674                           # 0x7002
	.short	28674                           # 0x7002
	.short	28802                           # 0x7082
	.short	28802                           # 0x7082
	.short	28930                           # 0x7102
	.short	28930                           # 0x7102
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	29058                           # 0x7182
	.short	29058                           # 0x7182
	.short	29058                           # 0x7182
	.short	29058                           # 0x7182
	.short	29058                           # 0x7182
	.short	29058                           # 0x7182
	.short	29058                           # 0x7182
	.short	29058                           # 0x7182
	.short	29187                           # 0x7203
	.short	29187                           # 0x7203
	.short	29187                           # 0x7203
	.short	29187                           # 0x7203
	.short	29187                           # 0x7203
	.short	29187                           # 0x7203
	.short	29187                           # 0x7203
	.short	29187                           # 0x7203
	.short	29058                           # 0x7182
	.short	29058                           # 0x7182
	.short	29058                           # 0x7182
	.short	29058                           # 0x7182
	.short	29058                           # 0x7182
	.short	29058                           # 0x7182
	.short	29058                           # 0x7182
	.short	29058                           # 0x7182
	.short	29187                           # 0x7203
	.short	29187                           # 0x7203
	.short	29187                           # 0x7203
	.short	29187                           # 0x7203
	.short	29187                           # 0x7203
	.short	29187                           # 0x7203
	.short	29187                           # 0x7203
	.short	29187                           # 0x7203
	.short	28034                           # 0x6d82
	.short	28034                           # 0x6d82
	.short	11906                           # 0x2e82
	.short	29314                           # 0x7282
	.short	11906                           # 0x2e82
	.short	16000                           # 0x3e80
	.short	11906                           # 0x2e82
	.short	18690                           # 0x4902
	.short	28161                           # 0x6e01
	.short	28161                           # 0x6e01
	.short	29441                           # 0x7301
	.short	29441                           # 0x7301
	.short	29571                           # 0x7383
	.short	6683                            # 0x1a1b
	.short	29698                           # 0x7402
	.short	6683                            # 0x1a1b
	.short	6914                            # 0x1b02
	.short	7042                            # 0x1b82
	.short	7170                            # 0x1c02
	.short	7298                            # 0x1c82
	.short	7426                            # 0x1d02
	.short	7554                            # 0x1d82
	.short	7682                            # 0x1e02
	.short	7810                            # 0x1e82
	.short	7938                            # 0x1f02
	.short	8066                            # 0x1f82
	.short	8194                            # 0x2002
	.short	8322                            # 0x2082
	.short	8450                            # 0x2102
	.short	8578                            # 0x2182
	.short	8706                            # 0x2202
	.short	8834                            # 0x2282
	.short	8962                            # 0x2302
	.short	9090                            # 0x2382
	.short	9218                            # 0x2402
	.short	9346                            # 0x2482
	.short	9474                            # 0x2502
	.short	9602                            # 0x2582
	.short	9730                            # 0x2602
	.short	9858                            # 0x2682
	.short	9986                            # 0x2702
	.short	10114                           # 0x2782
	.short	26133                           # 0x6615
	.short	3225                            # 0xc99
	.short	26262                           # 0x6696
	.short	3225                            # 0xc99
	.short	16000                           # 0x3e80
	.short	28034                           # 0x6d82
	.short	28034                           # 0x6d82
	.short	18690                           # 0x4902
	.short	18690                           # 0x4902
	.short	11906                           # 0x2e82
	.short	30082                           # 0x7582
	.short	11906                           # 0x2e82
	.short	18690                           # 0x4902
	.short	28161                           # 0x6e01
	.short	28161                           # 0x6e01
	.short	30209                           # 0x7601
	.short	30209                           # 0x7601
	.short	30337                           # 0x7681
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	11906                           # 0x2e82
	.short	29314                           # 0x7282
	.short	11906                           # 0x2e82
	.short	16000                           # 0x3e80
	.short	11906                           # 0x2e82
	.short	18690                           # 0x4902
	.short	30465                           # 0x7701
	.short	30465                           # 0x7701
	.short	30593                           # 0x7781
	.short	30593                           # 0x7781
	.short	29571                           # 0x7383
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	16000                           # 0x3e80
	.short	524                             # 0x20c
	.short	524                             # 0x20c
	.short	524                             # 0x20c
	.short	524                             # 0x20c
	.short	524                             # 0x20c
	.short	524                             # 0x20c
	.short	524                             # 0x20c
	.short	30764                           # 0x782c
	.short	524                             # 0x20c
	.short	524                             # 0x20c
	.short	524                             # 0x20c
	.short	30860                           # 0x788c
	.short	23312                           # 0x5b10
	.short	23312                           # 0x5b10
	.short	30992                           # 0x7910
	.short	31120                           # 0x7990
	.short	10772                           # 0x2a14
	.short	31284                           # 0x7a34
	.short	10772                           # 0x2a14
	.short	10772                           # 0x2a14
	.short	10772                           # 0x2a14
	.short	10772                           # 0x2a14
	.short	664                             # 0x298
	.short	664                             # 0x298
	.short	31389                           # 0x7a9d
	.short	31518                           # 0x7b1e
	.short	26133                           # 0x6615
	.short	31389                           # 0x7a9d
	.short	31389                           # 0x7a9d
	.short	31518                           # 0x7b1e
	.short	26133                           # 0x6615
	.short	31389                           # 0x7a9d
	.short	664                             # 0x298
	.short	664                             # 0x298
	.short	664                             # 0x298
	.short	664                             # 0x298
	.short	664                             # 0x298
	.short	664                             # 0x298
	.short	664                             # 0x298
	.short	664                             # 0x298
	.short	31629                           # 0x7b8d
	.short	31758                           # 0x7c0e
	.short	31888                           # 0x7c90
	.short	32016                           # 0x7d10
	.short	32144                           # 0x7d90
	.short	32272                           # 0x7e10
	.short	32400                           # 0x7e90
	.short	30764                           # 0x782c
	.short	792                             # 0x318
	.short	792                             # 0x318
	.short	792                             # 0x318
	.short	792                             # 0x318
	.short	792                             # 0x318
	.short	664                             # 0x298
	.short	664                             # 0x298
	.short	664                             # 0x298
	.short	664                             # 0x298
	.short	10717                           # 0x29dd
	.short	11614                           # 0x2d5e
	.short	664                             # 0x298
	.short	664                             # 0x298
	.short	664                             # 0x298
	.short	664                             # 0x298
	.short	6807                            # 0x1a97
	.short	32523                           # 0x7f0b
	.short	11403                           # 0x2c8b
	.short	11019                           # 0x2b0b
	.short	11147                           # 0x2b8b
	.short	32651                           # 0x7f8b
	.short	32779                           # 0x800b
	.short	32907                           # 0x808b
	.short	33035                           # 0x810b
	.short	33163                           # 0x818b
	.short	33291                           # 0x820b
	.short	1305                            # 0x519
	.short	1305                            # 0x519
	.short	3225                            # 0xc99
	.short	1109                            # 0x455
	.short	1238                            # 0x4d6
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	19713                           # 0x4d01
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	19713                           # 0x4d01
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10498                           # 0x2902
	.short	19713                           # 0x4d01
	.short	19713                           # 0x4d01
	.short	19713                           # 0x4d01
	.short	10498                           # 0x2902
	.short	10498                           # 0x2902
	.short	19713                           # 0x4d01
	.short	19713                           # 0x4d01
	.short	19713                           # 0x4d01
	.short	10498                           # 0x2902
	.short	10396                           # 0x289c
	.short	19713                           # 0x4d01
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	19713                           # 0x4d01
	.short	19713                           # 0x4d01
	.short	19713                           # 0x4d01
	.short	19713                           # 0x4d01
	.short	19713                           # 0x4d01
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	41482                           # 0xa20a
	.short	41610                           # 0xa28a
	.short	41738                           # 0xa30a
	.short	41866                           # 0xa38a
	.short	41994                           # 0xa40a
	.short	42122                           # 0xa48a
	.short	42250                           # 0xa50a
	.short	42378                           # 0xa58a
	.short	42506                           # 0xa60a
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	10772                           # 0x2a14
	.short	17796                           # 0x4584
	.short	17796                           # 0x4584
	.short	17796                           # 0x4584
	.short	17796                           # 0x4584
	.short	17796                           # 0x4584
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	42634                           # 0xa68a
	.short	42762                           # 0xa70a
	.short	42890                           # 0xa78a
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	16000                           # 0x3e80
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	3225                            # 0xc99
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	3225                            # 0xc99
	.short	10396                           # 0x289c
	.short	3225                            # 0xc99
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	3225                            # 0xc99
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	38026                           # 0x948a
	.short	38154                           # 0x950a
	.short	38282                           # 0x958a
	.short	38410                           # 0x960a
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	19713                           # 0x4d01
	.short	10396                           # 0x289c
	.short	33409                           # 0x8281
	.short	10396                           # 0x289c
	.short	19713                           # 0x4d01
	.short	10396                           # 0x289c
	.short	33537                           # 0x8301
	.short	33665                           # 0x8381
	.short	19713                           # 0x4d01
	.short	19713                           # 0x4d01
	.short	10908                           # 0x2a9c
	.short	10498                           # 0x2902
	.short	19713                           # 0x4d01
	.short	19713                           # 0x4d01
	.short	10396                           # 0x289c
	.short	19713                           # 0x4d01
	.short	10498                           # 0x2902
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	10498                           # 0x2902
	.short	10396                           # 0x289c
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	33930                           # 0x848a
	.short	34058                           # 0x850a
	.short	34186                           # 0x858a
	.short	34314                           # 0x860a
	.short	34442                           # 0x868a
	.short	34570                           # 0x870a
	.short	34698                           # 0x878a
	.short	34826                           # 0x880a
	.short	34954                           # 0x888a
	.short	35082                           # 0x890a
	.short	35210                           # 0x898a
	.short	35338                           # 0x8a0a
	.short	35466                           # 0x8a8a
	.short	35594                           # 0x8b0a
	.short	35722                           # 0x8b8a
	.short	35850                           # 0x8c0a
	.short	35978                           # 0x8c8a
	.short	36106                           # 0x8d0a
	.short	36234                           # 0x8d8a
	.short	36362                           # 0x8e0a
	.short	36490                           # 0x8e8a
	.short	36618                           # 0x8f0a
	.short	36746                           # 0x8f8a
	.short	36874                           # 0x900a
	.short	37002                           # 0x908a
	.short	37130                           # 0x910a
	.short	37258                           # 0x918a
	.short	37386                           # 0x920a
	.short	37514                           # 0x928a
	.short	37642                           # 0x930a
	.short	37770                           # 0x938a
	.short	37898                           # 0x940a
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3161                            # 0xc59
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	3225                            # 0xc99
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	3225                            # 0xc99
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	3225                            # 0xc99
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	16000                           # 0x3e80
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	3225                            # 0xc99
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3161                            # 0xc59
	.short	1305                            # 0x519
	.short	1305                            # 0x519
	.short	3225                            # 0xc99
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3225                            # 0xc99
	.short	3161                            # 0xc59
	.short	3225                            # 0xc99
	.short	3161                            # 0xc59
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3161                            # 0xc59
	.short	3225                            # 0xc99
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	1109                            # 0x455
	.short	1238                            # 0x4d6
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	39964                           # 0x9c1c
	.short	39964                           # 0x9c1c
	.short	39964                           # 0x9c1c
	.short	39964                           # 0x9c1c
	.short	39964                           # 0x9c1c
	.short	39964                           # 0x9c1c
	.short	39964                           # 0x9c1c
	.short	39964                           # 0x9c1c
	.short	39964                           # 0x9c1c
	.short	39964                           # 0x9c1c
	.short	39964                           # 0x9c1c
	.short	39964                           # 0x9c1c
	.short	39964                           # 0x9c1c
	.short	39964                           # 0x9c1c
	.short	39964                           # 0x9c1c
	.short	39964                           # 0x9c1c
	.short	40092                           # 0x9c9c
	.short	40092                           # 0x9c9c
	.short	40092                           # 0x9c9c
	.short	40092                           # 0x9c9c
	.short	40092                           # 0x9c9c
	.short	40092                           # 0x9c9c
	.short	40092                           # 0x9c9c
	.short	40092                           # 0x9c9c
	.short	40092                           # 0x9c9c
	.short	40092                           # 0x9c9c
	.short	40092                           # 0x9c9c
	.short	40092                           # 0x9c9c
	.short	40092                           # 0x9c9c
	.short	40092                           # 0x9c9c
	.short	40092                           # 0x9c9c
	.short	40092                           # 0x9c9c
	.short	32523                           # 0x7f0b
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	3161                            # 0xc59
	.short	3225                            # 0xc99
	.short	3161                            # 0xc59
	.short	3225                            # 0xc99
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	922                             # 0x39a
	.short	922                             # 0x39a
	.short	3225                            # 0xc99
	.short	6683                            # 0x1a1b
	.short	10396                           # 0x289c
	.short	922                             # 0x39a
	.short	922                             # 0x39a
	.short	16000                           # 0x3e80
	.short	10396                           # 0x289c
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	3225                            # 0xc99
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	23312                           # 0x5b10
	.short	23312                           # 0x5b10
	.short	23312                           # 0x5b10
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	16000                           # 0x3e80
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	16000                           # 0x3e80
	.short	10396                           # 0x289c
	.short	16000                           # 0x3e80
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	10396                           # 0x289c
	.short	16000                           # 0x3e80
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	33803                           # 0x840b
	.short	40203                           # 0x9d0b
	.short	40331                           # 0x9d8b
	.short	40459                           # 0x9e0b
	.short	40587                           # 0x9e8b
	.short	40715                           # 0x9f0b
	.short	40843                           # 0x9f8b
	.short	40971                           # 0xa00b
	.short	41099                           # 0xa08b
	.short	41227                           # 0xa10b
	.short	33803                           # 0x840b
	.short	40203                           # 0x9d0b
	.short	40331                           # 0x9d8b
	.short	40459                           # 0x9e0b
	.short	40587                           # 0x9e8b
	.short	40715                           # 0x9f0b
	.short	40843                           # 0x9f8b
	.short	40971                           # 0xa00b
	.short	41099                           # 0xa08b
	.short	41227                           # 0xa10b
	.short	10396                           # 0x289c
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	3161                            # 0xc59
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	20508                           # 0x501c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	25355                           # 0x630b
	.short	25355                           # 0x630b
	.short	25355                           # 0x630b
	.short	25355                           # 0x630b
	.short	25355                           # 0x630b
	.short	25355                           # 0x630b
	.short	25355                           # 0x630b
	.short	25355                           # 0x630b
	.short	25355                           # 0x630b
	.short	25355                           # 0x630b
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	20508                           # 0x501c
	.short	24843                           # 0x610b
	.short	24971                           # 0x618b
	.short	25099                           # 0x620b
	.short	25227                           # 0x628b
	.short	43019                           # 0xa80b
	.short	43147                           # 0xa88b
	.short	43275                           # 0xa90b
	.short	43403                           # 0xa98b
	.short	43531                           # 0xaa0b
	.short	25611                           # 0x640b
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	10396                           # 0x289c
	.short	16000                           # 0x3e80
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	16000                           # 0x3e80
	.short	10396                           # 0x289c
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	11403                           # 0x2c8b
	.short	11019                           # 0x2b0b
	.short	11147                           # 0x2b8b
	.short	32651                           # 0x7f8b
	.short	32779                           # 0x800b
	.short	32907                           # 0x808b
	.short	33035                           # 0x810b
	.short	33163                           # 0x818b
	.short	33291                           # 0x820b
	.short	38539                           # 0x968b
	.short	38667                           # 0x970b
	.short	38795                           # 0x978b
	.short	38923                           # 0x980b
	.short	39051                           # 0x988b
	.short	39179                           # 0x990b
	.short	39307                           # 0x998b
	.short	39435                           # 0x9a0b
	.short	39563                           # 0x9a8b
	.short	39691                           # 0x9b0b
	.short	39819                           # 0x9b8b
	.short	11403                           # 0x2c8b
	.short	11019                           # 0x2b0b
	.short	11147                           # 0x2b8b
	.short	32651                           # 0x7f8b
	.short	32779                           # 0x800b
	.short	32907                           # 0x808b
	.short	33035                           # 0x810b
	.short	33163                           # 0x818b
	.short	33291                           # 0x820b
	.short	38539                           # 0x968b
	.short	38667                           # 0x970b
	.short	38795                           # 0x978b
	.short	38923                           # 0x980b
	.short	39051                           # 0x988b
	.short	39179                           # 0x990b
	.short	39307                           # 0x998b
	.short	39435                           # 0x9a0b
	.short	39563                           # 0x9a8b
	.short	39691                           # 0x9b0b
	.short	39819                           # 0x9b8b
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	524                             # 0x20c
	.short	664                             # 0x298
	.short	664                             # 0x298
	.short	664                             # 0x298
	.short	10396                           # 0x289c
	.short	17796                           # 0x4584
	.short	14981                           # 0x3a85
	.short	41354                           # 0xa18a
	.short	1109                            # 0x455
	.short	1238                            # 0x4d6
	.short	1109                            # 0x455
	.short	1238                            # 0x4d6
	.short	1109                            # 0x455
	.short	1238                            # 0x4d6
	.short	1109                            # 0x455
	.short	1238                            # 0x4d6
	.short	1109                            # 0x455
	.short	1238                            # 0x4d6
	.short	10396                           # 0x289c
	.short	10396                           # 0x289c
	.short	1109                            # 0x455
	.short	1238                            # 0x4d6
	.short	1109                            # 0x455
	.short	1238                            # 0x4d6
	.short	1109                            # 0x455
	.short	1238                            # 0x4d6
	.short	1109                            # 0x455
	.short	1238                            # 0x4d6
	.short	10772                           # 0x2a14
	.short	26133                           # 0x6615
	.short	26262                           # 0x6696
	.short	26262                           # 0x6696
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	6683                            # 0x1a1b
	.short	6683                            # 0x1a1b
	.short	17796                           # 0x4584
	.short	17796                           # 0x4584
	.short	16000                           # 0x3e80
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	14981                           # 0x3a85
	.short	16000                           # 0x3e80
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	25355                           # 0x630b
	.short	25355                           # 0x630b
	.short	25355                           # 0x630b
	.short	25355                           # 0x630b
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	20508                           # 0x501c
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	43667                           # 0xaa93
	.short	43667                           # 0xaa93
	.short	43667                           # 0xaa93
	.short	43667                           # 0xaa93
	.short	43667                           # 0xaa93
	.short	43667                           # 0xaa93
	.short	43667                           # 0xaa93
	.short	43667                           # 0xaa93
	.short	43667                           # 0xaa93
	.short	43667                           # 0xaa93
	.short	43667                           # 0xaa93
	.short	43667                           # 0xaa93
	.short	43667                           # 0xaa93
	.short	43667                           # 0xaa93
	.short	43667                           # 0xaa93
	.short	43667                           # 0xaa93
	.short	43667                           # 0xaa93
	.short	43667                           # 0xaa93
	.short	43667                           # 0xaa93
	.short	43667                           # 0xaa93
	.short	43667                           # 0xaa93
	.short	43667                           # 0xaa93
	.short	43667                           # 0xaa93
	.short	43667                           # 0xaa93
	.short	43667                           # 0xaa93
	.short	43667                           # 0xaa93
	.short	43667                           # 0xaa93
	.short	43667                           # 0xaa93
	.short	43667                           # 0xaa93
	.short	43667                           # 0xaa93
	.short	43667                           # 0xaa93
	.short	43667                           # 0xaa93
	.short	43794                           # 0xab12
	.short	43794                           # 0xab12
	.short	43794                           # 0xab12
	.short	43794                           # 0xab12
	.short	43794                           # 0xab12
	.short	43794                           # 0xab12
	.short	43794                           # 0xab12
	.short	43794                           # 0xab12
	.short	43794                           # 0xab12
	.short	43794                           # 0xab12
	.short	43794                           # 0xab12
	.short	43794                           # 0xab12
	.short	43794                           # 0xab12
	.short	43794                           # 0xab12
	.short	43794                           # 0xab12
	.short	43794                           # 0xab12
	.short	43794                           # 0xab12
	.short	43794                           # 0xab12
	.short	43794                           # 0xab12
	.short	43794                           # 0xab12
	.short	43794                           # 0xab12
	.short	43794                           # 0xab12
	.short	43794                           # 0xab12
	.short	43794                           # 0xab12
	.short	43794                           # 0xab12
	.short	43794                           # 0xab12
	.short	43794                           # 0xab12
	.short	43794                           # 0xab12
	.short	43794                           # 0xab12
	.short	43794                           # 0xab12
	.short	43794                           # 0xab12
	.short	43794                           # 0xab12
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	1305                            # 0x519
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	16000                           # 0x3e80
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	21253                           # 0x5305
	.short	16000                           # 0x3e80
	.short	21253                           # 0x5305
	.short	16000                           # 0x3e80
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	17926                           # 0x4606
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	664                             # 0x298
	.short	10772                           # 0x2a14
	.short	10772                           # 0x2a14
	.short	6807                            # 0x1a97
	.short	6807                            # 0x1a97
	.short	26133                           # 0x6615
	.short	26262                           # 0x6696
	.short	26133                           # 0x6615
	.short	26262                           # 0x6696
	.short	26133                           # 0x6615
	.short	26262                           # 0x6696
	.short	26133                           # 0x6615
	.short	26262                           # 0x6696
	.short	26133                           # 0x6615
	.short	26262                           # 0x6696
	.short	26133                           # 0x6615
	.short	26262                           # 0x6696
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	16000                           # 0x3e80
	.short	664                             # 0x298
	.short	664                             # 0x298
	.short	664                             # 0x298
	.short	664                             # 0x298
	.short	6807                            # 0x1a97
	.short	6807                            # 0x1a97
	.short	6807                            # 0x1a97
	.short	1432                            # 0x598
	.short	664                             # 0x298
	.short	1432                            # 0x598
	.short	16000                           # 0x3e80
	.short	664                             # 0x298
	.short	1432                            # 0x598
	.short	664                             # 0x298
	.short	664                             # 0x298
	.short	10772                           # 0x2a14
	.short	26133                           # 0x6615
	.short	26262                           # 0x6696
	.short	26133                           # 0x6615
	.short	26262                           # 0x6696
	.short	26133                           # 0x6615
	.short	26262                           # 0x6696
	.short	792                             # 0x318
	.short	664                             # 0x298
	.short	3329                            # 0xd01
	.short	3457                            # 0xd81
	.short	3585                            # 0xe01
	.short	3713                            # 0xe81
	.short	3841                            # 0xf01
	.short	3969                            # 0xf81
	.short	4097                            # 0x1001
	.short	4225                            # 0x1081
	.short	4353                            # 0x1101
	.short	4481                            # 0x1181
	.short	4609                            # 0x1201
	.short	4737                            # 0x1281
	.short	4865                            # 0x1301
	.short	4993                            # 0x1381
	.short	5121                            # 0x1401
	.short	5249                            # 0x1481
	.short	5377                            # 0x1501
	.short	5505                            # 0x1581
	.short	5633                            # 0x1601
	.short	5761                            # 0x1681
	.short	5889                            # 0x1701
	.short	6017                            # 0x1781
	.short	6145                            # 0x1801
	.short	6273                            # 0x1881
	.short	6401                            # 0x1901
	.short	6529                            # 0x1981
	.short	26133                           # 0x6615
	.short	664                             # 0x298
	.short	26262                           # 0x6696
	.short	6683                            # 0x1a1b
	.short	6807                            # 0x1a97

	.p2align	4                               # @Upper
Upper:
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	65504                           # 0xffe0
	.short	65504                           # 0xffe0
	.short	65504                           # 0xffe0
	.short	65504                           # 0xffe0
	.short	65504                           # 0xffe0
	.short	65504                           # 0xffe0
	.short	65504                           # 0xffe0
	.short	65504                           # 0xffe0
	.short	65504                           # 0xffe0
	.short	65504                           # 0xffe0
	.short	65504                           # 0xffe0
	.short	65504                           # 0xffe0
	.short	65504                           # 0xffe0
	.short	65504                           # 0xffe0
	.short	65504                           # 0xffe0
	.short	65504                           # 0xffe0
	.short	65504                           # 0xffe0
	.short	65504                           # 0xffe0
	.short	65504                           # 0xffe0
	.short	65504                           # 0xffe0
	.short	65504                           # 0xffe0
	.short	65504                           # 0xffe0
	.short	65504                           # 0xffe0
	.short	65504                           # 0xffe0
	.short	65504                           # 0xffe0
	.short	65504                           # 0xffe0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	743                             # 0x2e7
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	65504                           # 0xffe0
	.short	121                             # 0x79
	.short	0                               # 0x0
	.short	65535                           # 0xffff
	.short	0                               # 0x0
	.short	65304                           # 0xff18
	.short	0                               # 0x0
	.short	65236                           # 0xfed4
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	97                              # 0x61
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	56                              # 0x38
	.short	0                               # 0x0
	.short	65535                           # 0xffff
	.short	65534                           # 0xfffe
	.short	65457                           # 0xffb1
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	65326                           # 0xff2e
	.short	65330                           # 0xff32
	.short	65331                           # 0xff33
	.short	65334                           # 0xff36
	.short	65333                           # 0xff35
	.short	65329                           # 0xff31
	.short	65327                           # 0xff2f
	.short	65325                           # 0xff2d
	.short	65323                           # 0xff2b
	.short	65322                           # 0xff2a
	.short	65318                           # 0xff26
	.short	65319                           # 0xff27
	.short	65317                           # 0xff25
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	84                              # 0x54
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	65498                           # 0xffda
	.short	65499                           # 0xffdb
	.short	65505                           # 0xffe1
	.short	65472                           # 0xffc0
	.short	65473                           # 0xffc1
	.short	65474                           # 0xffc2
	.short	65479                           # 0xffc7
	.short	0                               # 0x0
	.short	65489                           # 0xffd1
	.short	65482                           # 0xffca
	.short	65450                           # 0xffaa
	.short	65456                           # 0xffb0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	65488                           # 0xffd0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	65477                           # 0xffc5
	.short	8                               # 0x8
	.short	0                               # 0x0
	.short	74                              # 0x4a
	.short	86                              # 0x56
	.short	100                             # 0x64
	.short	128                             # 0x80
	.short	112                             # 0x70
	.short	126                             # 0x7e
	.short	8                               # 0x8
	.short	0                               # 0x0
	.short	9                               # 0x9
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	58331                           # 0xe3db
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	7                               # 0x7
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	65520                           # 0xfff0
	.short	65520                           # 0xfff0
	.short	65520                           # 0xfff0
	.short	65520                           # 0xfff0
	.short	65520                           # 0xfff0
	.short	65520                           # 0xfff0
	.short	65520                           # 0xfff0
	.short	65520                           # 0xfff0
	.short	65520                           # 0xfff0
	.short	65520                           # 0xfff0
	.short	65520                           # 0xfff0
	.short	65520                           # 0xfff0
	.short	65520                           # 0xfff0
	.short	65520                           # 0xfff0
	.short	65520                           # 0xfff0
	.short	65520                           # 0xfff0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	65510                           # 0xffe6
	.zero	58

	.p2align	4                               # @Lower
Lower:
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	32                              # 0x20
	.short	32                              # 0x20
	.short	32                              # 0x20
	.short	32                              # 0x20
	.short	32                              # 0x20
	.short	32                              # 0x20
	.short	32                              # 0x20
	.short	32                              # 0x20
	.short	32                              # 0x20
	.short	32                              # 0x20
	.short	32                              # 0x20
	.short	32                              # 0x20
	.short	32                              # 0x20
	.short	32                              # 0x20
	.short	32                              # 0x20
	.short	32                              # 0x20
	.short	32                              # 0x20
	.short	32                              # 0x20
	.short	32                              # 0x20
	.short	32                              # 0x20
	.short	32                              # 0x20
	.short	32                              # 0x20
	.short	32                              # 0x20
	.short	32                              # 0x20
	.short	32                              # 0x20
	.short	32                              # 0x20
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	32                              # 0x20
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	1                               # 0x1
	.short	0                               # 0x0
	.short	65337                           # 0xff39
	.short	0                               # 0x0
	.short	65415                           # 0xff87
	.short	0                               # 0x0
	.short	210                             # 0xd2
	.short	206                             # 0xce
	.short	205                             # 0xcd
	.short	79                              # 0x4f
	.short	202                             # 0xca
	.short	203                             # 0xcb
	.short	207                             # 0xcf
	.short	0                               # 0x0
	.short	211                             # 0xd3
	.short	209                             # 0xd1
	.short	213                             # 0xd5
	.short	214                             # 0xd6
	.short	218                             # 0xda
	.short	217                             # 0xd9
	.short	219                             # 0xdb
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	2                               # 0x2
	.short	1                               # 0x1
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	65439                           # 0xff9f
	.short	65480                           # 0xffc8
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	38                              # 0x26
	.short	37                              # 0x25
	.short	64                              # 0x40
	.short	63                              # 0x3f
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	80                              # 0x50
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	48                              # 0x30
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	65528                           # 0xfff8
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	65528                           # 0xfff8
	.short	0                               # 0x0
	.short	65462                           # 0xffb6
	.short	65527                           # 0xfff7
	.short	0                               # 0x0
	.short	65450                           # 0xffaa
	.short	65436                           # 0xff9c
	.short	0                               # 0x0
	.short	65424                           # 0xff90
	.short	65529                           # 0xfff9
	.short	65408                           # 0xff80
	.short	65410                           # 0xff82
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	58019                           # 0xe2a3
	.short	57153                           # 0xdf41
	.short	57274                           # 0xdfba
	.short	0                               # 0x0
	.short	16                              # 0x10
	.short	16                              # 0x10
	.short	16                              # 0x10
	.short	16                              # 0x10
	.short	16                              # 0x10
	.short	16                              # 0x10
	.short	16                              # 0x10
	.short	16                              # 0x10
	.short	16                              # 0x10
	.short	16                              # 0x10
	.short	16                              # 0x10
	.short	16                              # 0x10
	.short	16                              # 0x10
	.short	16                              # 0x10
	.short	16                              # 0x10
	.short	16                              # 0x10
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	0                               # 0x0
	.short	26                              # 0x1a
	.zero	60

